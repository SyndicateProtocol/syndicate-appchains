// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package teemodule

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PendingAssertion is an auto generated low-level Go binding around an user-defined struct.
type PendingAssertion struct {
	BlockHash    [32]byte
	SendRoot     [32]byte
	SeqBlockHash [32]byte
}

// TeeTrustedInput is an auto generated low-level Go binding around an user-defined struct.
type TeeTrustedInput struct {
	AppchainConfigHash     [32]byte
	AppchainStartBlockHash [32]byte
	SeqConfigHash          [32]byte
	SeqStartBlockHash      [32]byte
	SetDelayedMessageAcc   [32]byte
	L1StartBlockHash       [32]byte
	L1EndBlockHash         [32]byte
}

// TeemoduleMetaData contains all meta data concerning the Teemodule contract.
var TeemoduleMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"poster_\",\"type\":\"address\",\"internalType\":\"contractAssertionPoster\"},{\"name\":\"bridge_\",\"type\":\"address\",\"internalType\":\"contractIBridge\"},{\"name\":\"appchainConfigHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appchainStartBlockHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqConfigHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqStartBlockHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1StartBlockHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1block_\",\"type\":\"address\",\"internalType\":\"contractIL1Block\"},{\"name\":\"challengeWindowDuration_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"teeKeyManager_\",\"type\":\"address\",\"internalType\":\"contractITeeKeyManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBridge\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"challengeWindowDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"challengeWindowEnd\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"closeChallengeWindow\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"l1block\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIL1Block\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingAssertions\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"sendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"poster\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractAssertionPoster\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"resolveChallenge\",\"inputs\":[{\"name\":\"assertion\",\"type\":\"tuple\",\"internalType\":\"structPendingAssertion\",\"components\":[{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"sendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAppchainConfigHash\",\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setChallengeWindowDuration\",\"inputs\":[{\"name\":\"duration\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSeqConfigHash\",\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"submitAssertion\",\"inputs\":[{\"name\":\"assertion\",\"type\":\"tuple\",\"internalType\":\"structPendingAssertion\",\"components\":[{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"sendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"rewardAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"teeHackCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"teeKeyManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractITeeKeyManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"teeTrustedInput\",\"inputs\":[],\"outputs\":[{\"name\":\"appchainConfigHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appchainStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqConfigHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"setDelayedMessageAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1StartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1EndBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChallengeResolved\",\"inputs\":[{\"name\":\"\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structPendingAssertion\",\"components\":[{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"sendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeAppchainConfigHash\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"blockHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeHacked\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeInput\",\"inputs\":[{\"name\":\"input\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structTeeTrustedInput\",\"components\":[{\"name\":\"appchainConfigHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appchainStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqConfigHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"setDelayedMessageAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1StartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1EndBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeSeqConfigHash\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"blockHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x61010060405234610099576100276100156102ca565b989790979691969592959493946107e1565b61002f61009e565b612f9461184a82396080518181816105890152611628015260a051818181610987015281816113220152611355015260c05181818161035a0152818161126201528181611414015281816114c30152611710015260e051818181610163015261238a0152612f9490f35b6100a4565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100d0906100a8565b810190811060018060401b038211176100e857604052565b6100b2565b906101006100f961009e565b92836100c6565b565b5f80fd5b60018060a01b031690565b61011a90610106565b90565b61012690610111565b90565b6101328161011d565b0361013957565b5f80fd5b9050519061014a82610129565b565b61015590610111565b90565b6101618161014c565b0361016857565b5f80fd5b9050519061017982610158565b565b90565b6101878161017b565b0361018e57565b5f80fd5b9050519061019f8261017e565b565b6101aa90610111565b90565b6101b6816101a1565b036101bd57565b5f80fd5b905051906101ce826101ad565b565b60018060401b031690565b6101e4816101d0565b036101eb57565b5f80fd5b905051906101fc826101db565b565b61020790610111565b90565b610213816101fe565b0361021a57565b5f80fd5b9050519061022b8261020a565b565b610140818303126102c557610244825f830161013d565b92610252836020840161016c565b926102608160408501610192565b9261026e8260608301610192565b9261027c8360808401610192565b9261028a8160a08501610192565b926102988260c08301610192565b926102c26102a98460e085016101c1565b936102b88161010086016101ef565b936101200161021e565b90565b610102565b6102e86147de803803806102dd816100ed565b92833981019061022d565b90919293949596979899565b60401b90565b9061031468010000000000000000600160801b03916102f4565b9181191691161790565b90565b61033561033061033a926101d0565b61031e565b6101d0565b90565b90565b9061035561035061035c92610321565b61033d565b82546102fa565b9055565b61037461036f61037992610106565b61031e565b610106565b90565b61038590610360565b90565b6103919061037c565b90565b90565b6103ab6103a66103b092610394565b61031e565b610106565b90565b6103bc90610397565b90565b5f80fd5b60e01b90565b906020828203126103e2576103df915f016101ef565b90565b610102565b5f0190565b6103f461009e565b3d5f823e3d90fd5b61041061040b61041592610394565b61031e565b6101d0565b90565b906020828203126104315761042e915f01610192565b90565b610102565b5f1b90565b61044f61044a61045492610394565b610436565b61017b565b90565b60209181520190565b5f7f6c3120636f6e747261637420696e76616c696400000000000000000000000000910152565b6104946013602092610457565b61049d81610460565b0190565b6104b69060208101905f818303910152610487565b90565b156104c057565b6104c861009e565b62461bcd60e51b8152806104de600482016104a1565b0390fd5b6104eb9061037c565b90565b90565b61050561050061050a92610394565b61031e565b6104ee565b90565b60207f20636f6465000000000000000000000000000000000000000000000000000000917f706f73746572206164647265737320646f6573206e6f74206861766520616e795f8201520152565b6105676025604092610457565b6105708161050d565b0190565b6105899060208101905f81830391015261055a565b90565b1561059357565b61059b61009e565b62461bcd60e51b8152806105b160048201610574565b0390fd5b6105be9061037c565b90565b6105ca816104ee565b036105d157565b5f80fd5b905051906105e2826105c1565b565b906020828203126105fd576105fa915f016105d5565b90565b610102565b60207f2062726964676500000000000000000000000000000000000000000000000000917f696e73756666696369656e742064656c61796564206d6573736167657320696e5f8201520152565b61065c6027604092610457565b61066581610602565b0190565b61067e9060208101905f81830391015261064f565b90565b1561068857565b61069061009e565b62461bcd60e51b8152806106a660048201610669565b0390fd5b6106b39061037c565b90565b60207f61766520616e7920636f64650000000000000000000000000000000000000000917f7465654b65794d616e61676572206164647265737320646f6573206e6f7420685f8201520152565b610710602c604092610457565b610719816106b6565b0190565b6107329060208101905f818303910152610703565b90565b1561073c57565b61074461009e565b62461bcd60e51b81528061075a6004820161071d565b0390fd5b9061076a5f1991610436565b9181191691161790565b61077d9061017b565b90565b5f1c90565b61078e90610780565b90565b906107a66107a16107ad92610774565b610785565b825461075e565b9055565b6107ba9061017b565b9052565b9160206107df9294936107d860408201965f8301906107b1565b01906107b1565b565b90919395976107ff9099939597996107f833610b91565b600b610340565b61080889610388565b61082261081c6108175f6103b3565b610111565b91610111565b1480156109e2575b986108376108839a6104b9565b60c05261085f610846826104e2565b3b6108596108535f6104f1565b916104ee565b1161058c565b608052602061086d826105b5565b63eca067ad9061087b61009e565b9a8b926103c3565b82528180610893600482016103e7565b03915afa9788156109dd576109a5986108c6915f916109af575b506108c06108ba5f6104f1565b916104ee565b11610681565b60a0526108ee6108d5826106aa565b3b6108e86108e25f6104f1565b916104ee565b11610735565b60e0526108fe815f600201610791565b61090c826001600201610791565b907fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec9161094361093a61009e565b928392836107be565b0390a16109538160028001610791565b610961826003600201610791565b907fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b9161099861098f61009e565b928392836107be565b0390a16005600201610791565b6109ad6116ae565b565b6109d0915060203d81116109d6575b6109c881836100c6565b8101906105e4565b5f6108ad565b503d6109be565b6103ec565b50610a0760206109f18b610388565b63b80777ea906109ff61009e565b9384926103c3565b82528180610a17600482016103e7565b03915afa908115610b21575f91610af3575b50610a3c610a365f6103fc565b916101d0565b119889610a54575b6108376108839a919a505061082a565b610a7a99506020610a6482610388565b6309bd5a6090610a7261009e565b9c8d926103c3565b82528180610a8a600482016103e7565b03915afa998a15610aee576108839a610837915f91610ac0575b50610ab7610ab15f61043b565b9161017b565b119a5050610a44565b610ae1915060203d8111610ae7575b610ad981836100c6565b810190610418565b5f610aa4565b503d610acf565b6103ec565b610b14915060203d8111610b1a575b610b0c81836100c6565b8101906103c9565b5f610a29565b503d610b02565b6103ec565b90565b610b3d610b38610b4292610b26565b61031e565b6104ee565b90565b610b4f6001610b29565b90565b610b66610b61610b6b926104ee565b61031e565b6104ee565b90565b90565b90610b86610b81610b8d92610b52565b610b6e565b825461075e565b9055565b610b9a90610bd0565b610bac610ba5610b45565b6001610b71565b565b610bb790610111565b9052565b9190610bce905f60208501940190610bae565b565b80610beb610be5610be05f6103b3565b610111565b91610111565b14610bfb57610bf99061172e565b565b610c1e610c075f6103b3565b5f918291631e4fbdf760e01b835260048301610bbb565b0390fd5b610c2a6117dd565b610c326111dd565b610c3a611835565b565b5490565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610c9a6033604092610457565b610ca381610c40565b0190565b610cbc9060208101905f818303910152610c8d565b90565b15610cc657565b610cce61009e565b62461bcd60e51b815280610ce460048201610ca7565b0390fd5b610cf290516101a1565b90565b610d09610d04610d0e926104ee565b61031e565b6101d0565b90565b60018060401b031690565b610d28610d2d91610780565b610d11565b90565b610d3a9054610d1c565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610d97603c604092610457565b610da081610d3d565b0190565b610db99060208101905f818303910152610d8a565b90565b15610dc357565b610dcb61009e565b62461bcd60e51b815280610de160048201610da4565b0390fd5b60401c90565b610df7610dfc91610de5565b610d11565b90565b610e099054610deb565b90565b634e487b7160e01b5f52601160045260245ffd5b610e2c610e32916101d0565b916101d0565b019060018060401b038211610e4357565b610e0c565b90610e5960018060401b0391610436565b9181191691161790565b90610e78610e73610e7f92610321565b61033d565b8254610e48565b9055565b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b610ea981610c3c565b821015610ec357610ebb600391610e97565b910201905f90565b610e83565b90565b610ed7610edc91610780565b610ec8565b90565b610ee99054610ecb565b90565b610ef6905161011d565b90565b5f910312610f0357565b610102565b610f17610f1d919392936104ee565b926104ee565b91610f298382026104ee565b928184041490151715610f3857565b610e0c565b610f48906003610f08565b90565b1b90565b91906008610f6a910291610f645f1984610f4b565b92610f4b565b9181191691161790565b9190610f8a610f85610f9293610774565b610785565b908354610f4f565b9055565b5f90565b610fac91610fa6610f96565b91610f74565b565b5f6002610fd492610fc183808301610f9a565b610fce8360018301610f9a565b01610f9a565b565b634e487b7160e01b5f525f60045260245ffd5b905f03610ffb57610ff990610fae565b565b610fd6565b5b81811061100c575050565b806110195f600393610fe9565b01611001565b909182811061102e575b505050565b61104c61104661104061105795610f3d565b92610f3d565b92610e97565b918201910190611000565b5f8080611029565b90680100000000000000008111611088578161107d61108693610c3c565b9082815561101f565b565b6100b2565b5f6110979161105f565b565b905f036110ab576110a99061108d565b565b610fd6565b6110ba905161014c565b90565b6110cc6110d2919392936104ee565b926104ee565b82039182116110dd57565b610e0c565b6110eb906104ee565b9052565b9190611102905f602085019401906110e2565b565b61110d9061017b565b9052565b9060c06111be60066111c69461113561112c5f830154610ecb565b5f870190611104565b61114f6111456001830154610ecb565b6020870190611104565b61116961115f6002830154610ecb565b6040870190611104565b6111836111796003830154610ecb565b6060870190611104565b61119d6111936004830154610ecb565b6080870190611104565b6111b76111ad6005830154610ecb565b60a0870190611104565b0154610ecb565b910190611104565b565b91906111db905f60e08501940190611111565b565b6112046111ea6009610c3c565b6111fd6111f76001610b29565b916104ee565b1115610cbf565b61121661121160c0610ce8565b610388565b61123061122a6112255f6103b3565b610111565b91610111565b145f146116235761126561124342610cf5565b5b61125f611259611254600b610d30565b6101d0565b916101d0565b11610dbc565b61128b61128461127442610cf5565b61127e600b610dff565b90610e20565b600b610e63565b6112956009610c3c565b6112a76112a15f6104f1565b916104ee565b116114f4575b6112bf6112ba60a06110b0565b6105b5565b6112f163d5719dc260206112db6112d660a06110b0565b6105b5565b63eca067ad906112e961009e565b9485926103c3565b82528180611301600482016103e7565b03915afa9283156114ef57611346611331611351956020955f916114c2575b5061132b6001610b29565b906110bd565b9261133a61009e565b958694859384936103c3565b8352600483016110ef565b03915afa80156114bd57611371915f9161148f575b506004600201610791565b61138361137e60c0610ce8565b610388565b61139d6113976113925f6103b3565b610111565b91610111565b145f14611404576113c76113bb436113b56001610b29565b906110bd565b405b6006600201610791565b60026113ff7f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc916113f661009e565b918291826111c8565b0390a1565b611431602061141b61141660c0610ce8565b610388565b6309bd5a609061142961009e565b9384926103c3565b82528180611441600482016103e7565b03915afa801561148a576113c7915f9161145c575b506113bd565b61147d915060203d8111611483575b61147581836100c6565b810190610418565b5f611456565b503d61146b565b6103ec565b6114b0915060203d81116114b6575b6114a881836100c6565b810190610418565b5f611366565b503d61149e565b6103ec565b6114e29150863d81116114e8575b6114da81836100c6565b8101906105e4565b5f611320565b503d6114d0565b6103ec565b61151861150e5f61150760098290610ea0565b5001610edf565b6001600201610791565b61153d611533600261152c60095f90610ea0565b5001610edf565b6003600201610791565b61155761154d6006600201610edf565b6005600201610791565b6115696115646080610eec565b6104e2565b63daeab4126115855f61157e60098290610ea0565b5001610edf565b61159d600161159660095f90610ea0565b5001610edf565b92803b1561161e576115c25f80946115cd6115b661009e565b978896879586946103c3565b8452600484016107be565b03925af18015611619576115ed575b506115e85f6009611099565b6112ad565b61160c905f3d8111611612575b61160481836100c6565b810190610ef9565b5f6115dc565b503d6115fa565b6103ec565b6103bf565b611650602061163a61163560c0610ce8565b610388565b63b80777ea9061164861009e565b9384926103c3565b82528180611660600482016103e7565b03915afa80156116a957611265915f9161167b575b50611244565b61169c915060203d81116116a2575b61169481836100c6565b8101906103c9565b5f611675565b503d61168a565b6103ec565b6116b6610c22565b565b60018060a01b031690565b6116cf6116d491610780565b6116b8565b90565b6116e190546116c3565b90565b906116f560018060a01b0391610436565b9181191691161790565b6117089061037c565b90565b90565b9061172361171e61172a926116ff565b61170b565b82546116e4565b9055565b6117375f6116d7565b611741825f61170e565b9061177561176f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936116ff565b916116ff565b9161177e61009e565b80611788816103e7565b0390a3565b90565b61179c6117a191610780565b61178d565b90565b6117ae9054611790565b90565b90565b6117c86117c36117cd926117b1565b61031e565b6104ee565b90565b6117da60026117b4565b90565b6117e760016117a4565b6118006117fa6117f56117d0565b6104ee565b916104ee565b14611819576118176118106117d0565b6001610b71565b565b5f633ee5aeb560e01b815280611831600482016103e7565b0390fd5b611847611840610b45565b6001610b71565b56fe60806040526004361015610015575b36610b4857005b61001f5f3561013e565b80633a009a06146101395780633ceaae7d14610134578063420caf3a1461012f5780634bd167c91461012a578063697b5e62146101255780636c4c206014610120578063715018a61461011b57806380959721146101165780638da5cb5b146101115780638fed55a31461010c578063a56ec6cd14610107578063c3f2dbd314610102578063e50c6156146100fd578063e78cea92146100f8578063eb60553a146100f3578063ee1c28b8146100ee578063f223055c146100e95763f2fde38b0361000e57610b15565b610ac4565b610a8f565b610a4d565b6109d7565b61094e565b61085a565b6107e1565b6106aa565b61063c565b6105d9565b610554565b610521565b6104e7565b610455565b6103aa565b61031c565b6101e9565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015c57565b61014e565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b6101a76101a26101ac92610185565b610190565b610185565b90565b6101b890610193565b90565b6101c4906101af565b90565b6101d0906101bb565b9052565b91906101e7905f602085019401906101c7565b565b34610219576101f9366004610152565b610215610204610161565b61020c610144565b918291826101d4565b0390f35b61014a565b5f1c90565b90565b6102326102379161021e565b610223565b90565b6102449054610226565b90565b60026102545f820161023a565b916102616001830161023a565b9161026e6002820161023a565b9161027b6003830161023a565b916102886004820161023a565b916102a1600661029a6005850161023a565b930161023a565b90565b90565b6102b0906102a4565b9052565b949290979695939160e08601985f87016102cd916102a7565b602086016102da916102a7565b604085016102e7916102a7565b606084016102f4916102a7565b60808301610301916102a7565b60a0820161030e916102a7565b60c00161031a916102a7565b565b346103535761032c366004610152565b61034f610337610247565b93610346979597939193610144565b978897886102b4565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b610385906101af565b90565b6103919061037c565b9052565b91906103a8905f60208501940190610388565b565b346103da576103ba366004610152565b6103d66103c5610358565b6103cd610144565b91829182610395565b0390f35b61014a565b1c90565b67ffffffffffffffff1690565b61040090600861040593026103df565b6103e3565b90565b9061041391546103f0565b90565b610423600b600890610408565b90565b67ffffffffffffffff1690565b61043c90610426565b9052565b9190610453905f60208501940190610433565b565b3461048557610465366004610152565b610481610470610416565b610478610144565b91829182610440565b0390f35b61014a565b90565b61049d9060086104a293026103df565b61048a565b90565b906104b0915461048d565b90565b6104bf600a5f906104a5565b90565b90565b6104ce906104c2565b9052565b91906104e5905f602085019401906104c5565b565b34610517576104f7366004610152565b6105136105026104b3565b61050a610144565b918291826104d2565b0390f35b61014a565b5f0190565b3461054f57610531366004610152565b6105396117a8565b610541610144565b8061054b8161051c565b0390f35b61014a565b3461058257610564366004610152565b61056c6117d7565b610574610144565b8061057e8161051c565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6105b4906101af565b90565b6105c0906105ab565b9052565b91906105d7905f602085019401906105b7565b565b34610609576105e9366004610152565b6106056105f4610587565b6105fc610144565b918291826105c4565b0390f35b61014a565b61061790610185565b90565b6106239061060e565b9052565b919061063a905f6020850194019061061a565b565b3461066c5761064c366004610152565b610668610657611811565b61065f610144565b91829182610627565b0390f35b61014a565b5f80fd5b5f80fd5b908160609103126106875790565b610675565b906060828203126106a5576106a2915f01610679565b90565b61014e565b346106d8576106c26106bd36600461068c565b611be7565b6106ca610144565b806106d48161051c565b0390f35b61014a565b6106e6816104c2565b036106ed57565b5f80fd5b905035906106fe826106dd565b565b9060208282031261071957610716915f016106f1565b90565b61014e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61074881610732565b8210156107625761075a600391610736565b910201905f90565b61071e565b60099061077382610732565b8110156107ab576107839161073f565b5061078f5f820161023a565b916107a860026107a16001850161023a565b930161023a565b90565b5f80fd5b6040906107d86107df94969593966107ce60608401985f8501906102a7565b60208301906102a7565b01906102a7565b565b34610814576108106107fc6107f7366004610700565b610767565b610807939193610144565b938493846107af565b0390f35b61014a565b610822816102a4565b0361082957565b5f80fd5b9050359061083a82610819565b565b9060208282031261085557610852915f0161082d565b90565b61014e565b346108885761087261086d36600461083c565b611d27565b61087a610144565b806108848161051c565b0390f35b61014a565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156108d35781359167ffffffffffffffff83116108ce5760200192600183028401116108c957565b610895565b610891565b61088d565b6108e18161060e565b036108e857565b5f80fd5b905035906108f9826108d8565b565b9060a08282031261094957610912815f8401610679565b92606083013567ffffffffffffffff81116109445761093683610941928601610899565b9390946080016108ec565b90565b610671565b61014e565b346109805761096a6109613660046108fb565b92919091612613565b610972610144565b8061097c8161051c565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6109b2906101af565b90565b6109be906109a9565b9052565b91906109d5905f602085019401906109b5565b565b34610a07576109e7366004610152565b610a036109f2610985565b6109fa610144565b918291826109c2565b0390f35b61014a565b610a1581610426565b03610a1c57565b5f80fd5b90503590610a2d82610a0c565b565b90602082820312610a4857610a45915f01610a20565b90565b61014e565b34610a7b57610a65610a60366004610a2f565b612759565b610a6d610144565b80610a778161051c565b0390f35b61014a565b610a8c600b5f90610408565b90565b34610abf57610a9f366004610152565b610abb610aaa610a80565b610ab2610144565b91829182610440565b0390f35b61014a565b34610af257610adc610ad736600461083c565b6127f1565b610ae4610144565b80610aee8161051c565b0390f35b61014a565b90602082820312610b1057610b0d915f016108ec565b90565b61014e565b34610b4357610b2d610b28366004610af7565b612861565b610b35610144565b80610b3f8161051c565b0390f35b61014a565b5f80fd5b610b54612879565b610b5c611236565b610b646128de565b565b90565b610b7d610b78610b8292610b66565b610190565b6104c2565b90565b60209181520190565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610be86033604092610b85565b610bf181610b8e565b0190565b610c0a9060208101905f818303910152610bdb565b90565b15610c1457565b610c1c610144565b62461bcd60e51b815280610c3260048201610bf5565b0390fd5b90565b610c4d610c48610c5292610c36565b610190565b610185565b90565b610c5e90610c39565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610c8d90610c65565b810190811067ffffffffffffffff821117610ca757604052565b610c6f565b60e01b90565b90505190610cbf82610a0c565b565b90602082820312610cda57610cd7915f01610cb2565b90565b61014e565b610ce7610144565b3d5f823e3d90fd5b610d03610cfe610d08926104c2565b610190565b610426565b90565b610d17610d1c9161021e565b6103e3565b90565b610d299054610d0b565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610d86603c604092610b85565b610d8f81610d2c565b0190565b610da89060208101905f818303910152610d79565b90565b15610db257565b610dba610144565b62461bcd60e51b815280610dd060048201610d93565b0390fd5b60401c90565b610de6610deb91610dd4565b6103e3565b90565b610df89054610dda565b90565b634e487b7160e01b5f52601160045260245ffd5b610e1b610e2191610426565b91610426565b019067ffffffffffffffff8211610e3457565b610dfb565b5f1b90565b90610e5167ffffffffffffffff91610e39565b9181191691161790565b610e6f610e6a610e7492610426565b610190565b610426565b90565b90565b90610e8f610e8a610e9692610e5b565b610e77565b8254610e3e565b9055565b610eae610ea9610eb392610c36565b610190565b6104c2565b90565b90610ec25f1991610e39565b9181191691161790565b610ed5906102a4565b90565b610ee19061021e565b90565b90610ef9610ef4610f0092610ecc565b610ed8565b8254610eb6565b9055565b5f910312610f0e57565b61014e565b916020610f34929493610f2d60408201965f8301906102a7565b01906102a7565b565b610f45610f4b919392936104c2565b926104c2565b91610f578382026104c2565b928184041490151715610f6657565b610dfb565b610f76906003610f36565b90565b1b90565b91906008610f98910291610f925f1984610f79565b92610f79565b9181191691161790565b9190610fb8610fb3610fc093610ecc565b610ed8565b908354610f7d565b9055565b5f90565b610fda91610fd4610fc4565b91610fa2565b565b5f600261100292610fef83808301610fc8565b610ffc8360018301610fc8565b01610fc8565b565b634e487b7160e01b5f525f60045260245ffd5b905f036110295761102790610fdc565b565b611004565b5b81811061103a575050565b806110475f600393611017565b0161102f565b909182811061105c575b505050565b61107a61107461106e61108595610f6b565b92610f6b565b92610736565b91820191019061102e565b5f8080611057565b906801000000000000000081116110b657816110ab6110b493610732565b9082815561104d565b565b610c6f565b5f6110c59161108d565b565b905f036110d9576110d7906110bb565b565b611004565b905051906110eb826106dd565b565b9060208282031261110657611103915f016110de565b90565b61014e565b61111a611120919392936104c2565b926104c2565b820391821161112b57565b610dfb565b9050519061113d82610819565b565b9060208282031261115857611155915f01611130565b90565b61014e565b611166906102a4565b9052565b9060c0611217600661121f9461118e6111855f830154610226565b5f87019061115d565b6111a861119e6001830154610226565b602087019061115d565b6111c26111b86002830154610226565b604087019061115d565b6111dc6111d26003830154610226565b606087019061115d565b6111f66111ec6004830154610226565b608087019061115d565b6112106112066005830154610226565b60a087019061115d565b0154610226565b91019061115d565b565b9190611234905f60e0850194019061116a565b565b61125d6112436009610732565b6112566112506001610b69565b916104c2565b1115610c0d565b6112867f000000000000000000000000000000000000000000000000000000000000000061037c565b6112a061129a6112955f610c55565b61060e565b9161060e565b145f14611706576112d56112b342610cef565b5b6112cf6112c96112c4600b610d1f565b610426565b91610426565b11610dab565b6112fb6112f46112e442610cef565b6112ee600b610dee565b90610e0f565b600b610e7a565b6113056009610732565b6113176113115f610e9a565b916104c2565b116115c0575b6113467f00000000000000000000000000000000000000000000000000000000000000006109a9565b61138f63d5719dc260206113797f00000000000000000000000000000000000000000000000000000000000000006109a9565b63eca067ad90611387610144565b948592610cac565b8252818061139f6004820161051c565b03915afa9283156115bb576113e46113cf6113ef956020955f9161158e575b506113c96001610b69565b9061110b565b926113d8610144565b95869485938493610cac565b8352600483016104d2565b03915afa80156115895761140f915f9161155b575b506004600201610ee4565b6114387f000000000000000000000000000000000000000000000000000000000000000061037c565b61145261144c6114475f610c55565b61060e565b9161060e565b145f146114b95761147c6114704361146a6001610b69565b9061110b565b405b6006600201610ee4565b60026114b47f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc916114ab610144565b91829182611221565b0390a1565b6114fd60206114e77f000000000000000000000000000000000000000000000000000000000000000061037c565b6309bd5a60906114f5610144565b938492610cac565b8252818061150d6004820161051c565b03915afa80156115565761147c915f91611528575b50611472565b611549915060203d811161154f575b6115418183610c83565b81019061113f565b5f611522565b503d611537565b610cdf565b61157c915060203d8111611582575b6115748183610c83565b81019061113f565b5f611404565b503d61156a565b610cdf565b6115ae9150863d81116115b4575b6115a68183610c83565b8101906110ed565b5f6113be565b503d61159c565b610cdf565b6115e46115da5f6115d36009829061073f565b500161023a565b6001600201610ee4565b6116096115ff60026115f860095f9061073f565b500161023a565b6003600201610ee4565b611623611619600660020161023a565b6005600201610ee4565b61164c7f00000000000000000000000000000000000000000000000000000000000000006105ab565b63daeab4126116685f6116616009829061073f565b500161023a565b611680600161167960095f9061073f565b500161023a565b92803b15611701576116a55f80946116b0611699610144565b97889687958694610cac565b845260048401610f13565b03925af180156116fc576116d0575b506116cb5f60096110c7565b61131d565b6116ef905f3d81116116f5575b6116e78183610c83565b810190610f04565b5f6116bf565b503d6116dd565b610cdf565b610c61565b61174a60206117347f000000000000000000000000000000000000000000000000000000000000000061037c565b63b80777ea90611742610144565b938492610cac565b8252818061175a6004820161051c565b03915afa80156117a3576112d5915f91611775575b506112b4565b611796915060203d811161179c575b61178e8183610c83565b810190610cc1565b5f61176f565b503d611784565b610cdf565b6117b0610b4c565b565b6117ba6128f2565b6117c26117c4565b565b6117d56117d05f610c55565b61298a565b565b6117df6117b2565b565b5f90565b60018060a01b031690565b6117fc6118019161021e565b6117e5565b90565b61180e90546117f0565b90565b6118196117e1565b506118235f611804565b90565b611837906118326128f2565b611839565b565b61184a90611845612879565b611aaf565b6118526128de565b565b5f7f6368616c6c656e676520646f6573206e6f742065786973740000000000000000910152565b6118886018602092610b85565b61189181611854565b0190565b6118aa9060208101905f81830391015261187b565b90565b156118b457565b6118bc610144565b62461bcd60e51b8152806118d260048201611895565b0390fd5b60016118e291016104c2565b90565b90565b90565b5f5260205f2090565b5490565b611901816118f4565b82101561191b576119136003916118eb565b910201905f90565b61071e565b3561192a81610819565b90565b9061197160406002611977946119505f820161194a5f8801611920565b90610ee4565b6119696001820161196360208801611920565b90610ee4565b019201611920565b90610ee4565b565b919061198a576119889161192d565b565b611004565b90815491680100000000000000008310156119bf57826119b79160016119bd950181556118f8565b90611979565b565b610c6f565b6119d86119d36119dd92610c36565b610190565b610426565b90565b506119ef90602081019061082d565b90565b906040611a37611a3f93611a14611a0b5f8301836119e0565b5f86019061115d565b611a2e611a2460208301836119e0565b602086019061115d565b828101906119e0565b91019061115d565b565b9190611a54905f606085019401906119f2565b565b5f7f617373657274696f6e206e6f7420666f756e6400000000000000000000000000910152565b611a8a6013602092610b85565b611a9381611a56565b0190565b611aac9060208101905f818303910152611a7d565b90565b611ad5611abc6009610732565b611acf611ac96001610b69565b916104c2565b116118ad565b611ade81612a14565b90611ae85f610e9a565b5b80611b05611aff611afa6009610732565b6104c2565b916104c2565b1015611bc55782611b3a611b34611b2f611b2a611b246009879061073f565b506118e5565b612a7f565b6102a4565b916102a4565b14611b4d57611b48906118d6565b611ae9565b509050611b5b5f60096110c7565b611b6f611b6860096118e8565b829061198f565b611b82611b7b5f6119c4565b600b610e7a565b611b8a6117a8565b611bc07fe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b91611bb7610144565b91829182611a41565b0390a1565b611bcd610144565b62461bcd60e51b815280611be360048201611a97565b0390fd5b611bf090611826565b565b611c0390611bfe6128f2565b611cad565b565b60207f617373657274696f6e73206172652070656e64696e6700000000000000000000917f63616e6e6f742075706461746520636f6e6669672068617368207768696c65205f8201520152565b611c5f6036604092610b85565b611c6881611c05565b0190565b611c819060208101905f818303910152611c52565b90565b15611c8b57565b611c93610144565b62461bcd60e51b815280611ca960048201611c6c565b0390fd5b611cd2611cba6009610732565b611ccc611cc65f610e9a565b916104c2565b14611c84565b611cdf8160028001610ee4565b611cec600360020161023a565b7fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b91611d22611d19610144565b92839283610f13565b0390a1565b611d3090611bf2565b565b90611d46939291611d41612879565b6122cc565b611d4e6128de565b565b5f7f72657761726420616464726573732063616e6e6f74206265207a65726f000000910152565b611d84601d602092610b85565b611d8d81611d50565b0190565b611da69060208101905f818303910152611d77565b90565b15611db057565b611db8610144565b62461bcd60e51b815280611dce60048201611d91565b0390fd5b5090565b90565b611ded611de8611df292611dd6565b610190565b6104c2565b90565b5f7f696e76616c6964207369676e6174757265206c656e6774680000000000000000910152565b611e296018602092610b85565b611e3281611df5565b0190565b611e4b9060208101905f818303910152611e1c565b90565b15611e5557565b611e5d610144565b62461bcd60e51b815280611e7360048201611e36565b0390fd5b90565b90565b611e89611e8e916102a4565b611e7a565b9052565b602081611ea4611eac93839695611e7d565b018092611e7d565b0190565b60200190565b5190565b5f80fd5b90611ed1611eca610144565b9283610c83565b565b67ffffffffffffffff8111611ef157611eed602091610c65565b0190565b610c6f565b90825f939282370152565b90929192611f16611f1182611ed3565b611ebe565b93818552602085019082840111611f3257611f3092611ef6565b565b611eba565b611f42913691611f01565b90565b151590565b611f5381611f45565b03611f5a57565b5f80fd5b90505190611f6b82611f4a565b565b90602082820312611f8657611f83915f01611f5e565b90565b61014e565b5f7f696e76616c696420746565207369676e61747572650000000000000000000000910152565b611fbf6015602092610b85565b611fc881611f8b565b0190565b611fe19060208101905f818303910152611fb2565b90565b15611feb57565b611ff3610144565b62461bcd60e51b81528061200960048201611fcc565b0390fd5b5f7f617070636861696e20626c6f636b206861736820756e6368616e676564000000910152565b612041601d602092610b85565b61204a8161200d565b0190565b6120639060208101905f818303910152612034565b90565b1561206d57565b612075610144565b62461bcd60e51b81528061208b6004820161204e565b0390fd5b5f7f617373657274696f6e20616c7265616479206578697374730000000000000000910152565b6120c36018602092610b85565b6120cc8161208f565b0190565b6120e59060208101905f8183039101526120b6565b90565b156120ef57565b6120f7610144565b62461bcd60e51b81528061210d600482016120d0565b0390fd5b90565b61212861212361212d92612111565b610190565b6104c2565b90565b61213c6121419161021e565b61048a565b90565b61214e9054612130565b90565b612160612166919392936104c2565b926104c2565b820180921161217157565b610dfb565b61218a61218561218f926104c2565b610190565b6104c2565b90565b90565b906121aa6121a56121b192612176565b612192565b8254610eb6565b9055565b6121be90610193565b90565b6121ca906121b5565b90565b6121d6906101af565b90565b6121e2906101af565b90565b905090565b6121f55f80926121e5565b0190565b612202906121ea565b90565b9061221761221283611ed3565b611ebe565b918252565b606090565b3d5f1461223c576122313d612205565b903d5f602084013e5b565b61224461221c565b9061223a565b5f7f7061796d656e74206661696c6564000000000000000000000000000000000000910152565b61227e600e602092610b85565b6122878161224a565b0190565b6122a09060208101905f818303910152612271565b90565b156122aa57565b6122b2610144565b62461bcd60e51b8152806122c86004820161228b565b0390fd5b929060206123e1919593956122fc846122f56122ef6122ea5f610c55565b61060e565b9161060e565b1415611da9565b61232361230a828990611dd2565b61231d6123176041611dd9565b916104c2565b14611e4e565b61232c86612a14565b966123d66123c16123456123406002611e77565b612b4c565b61236e8b91612360612355610144565b9384928a8401611e92565b888201810382520382610c83565b61238061237a82611eb6565b91611eb0565b20936123bb6123ae7f00000000000000000000000000000000000000000000000000000000000000006101bb565b94637217efcd9692611f37565b90612beb565b926123ca610144565b95869485938493610cac565b835260048301610627565b03915afa801561260e576123fc915f916125e0575b50611fe4565b61242f61240a5f8501611920565b61242861242261241d600160020161023a565b6102a4565b916102a4565b1415612066565b6124385f610e9a565b5b8061245561244f61244a6009610732565b6104c2565b916104c2565b10156124a25761249d906124988661249161248b61248661248161247b6009889061073f565b506118e5565b612a7f565b6102a4565b916102a4565b14156120e8565b6118d6565b612439565b50916124db9193506124b46009610732565b6124c66124c05f610e9a565b916104c2565b146125b5575b6124d660096118e8565b61198f565b6124e56009610732565b6124f86124f26002612114565b916104c2565b14612501575b50565b5f8061258061257b6125af9461253361252c61251d6001610b69565b612527600a612144565b612151565b600a612195565b61253d600a612144565b6125737f37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a79161256a610144565b918291826104d2565b0390a16121c1565b6121cd565b612589306121d9565b31612592610144565b908161259d816121f9565b03925af16125a9612221565b506122a3565b5f6124fe565b6125db6125d46125c442610cef565b6125ce600b610dee565b90610e0f565b600b610e7a565b6124cc565b612601915060203d8111612607575b6125f98183610c83565b810190611f6d565b5f6123f6565b503d6125ef565b610cdf565b9061261f939291611d32565b565b6126329061262d6128f2565b612727565b565b60207f68696c6520617373657274696f6e2069732070656e64696e6700000000000000917f63616e6e6f7420757064617465206368616c6c656e67652077696e646f7720775f8201520152565b61268e6039604092610b85565b61269781612634565b0190565b6126b09060208101905f818303910152612681565b90565b156126ba57565b6126c2610144565b62461bcd60e51b8152806126d86004820161269b565b0390fd5b60401b90565b906126fd6fffffffffffffffff0000000000000000916126dc565b9181191691161790565b9061271c61271761272392610e5b565b610e77565b82546126e2565b9055565b612757906127506127386009610732565b61274a6127445f610e9a565b916104c2565b146126b3565b600b612707565b565b61276290612621565b565b612775906127706128f2565b612777565b565b61279c6127846009610732565b6127966127905f610e9a565b916104c2565b14611c84565b6127a9815f600201610ee4565b6127b6600160020161023a565b7fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec916127ec6127e3610144565b92839283610f13565b0390a1565b6127fa90612764565b565b61280d906128086128f2565b61280f565b565b8061282a61282461281f5f610c55565b61060e565b9161060e565b1461283a576128389061298a565b565b61285d6128465f610c55565b5f918291631e4fbdf760e01b835260048301610627565b0390fd5b61286a906127fc565b565b6128766002612114565b90565b6128836001612144565b61289c61289661289161286c565b6104c2565b916104c2565b146128b5576128b36128ac61286c565b6001612195565b565b5f633ee5aeb560e01b8152806128cd6004820161051c565b0390fd5b6128db6001610b69565b90565b6128f06128e96128d1565b6001612195565b565b6128fa611811565b61291361290d612908612c0d565b61060e565b9161060e565b0361291a57565b61293c612925612c0d565b5f91829163118cdaa760e01b835260048301610627565b0390fd5b9061295160018060a01b0391610e39565b9181191691161790565b612964906101af565b90565b90565b9061297f61297a6129869261295b565b612967565b8254612940565b9055565b6129935f611804565b61299d825f61296a565b906129d16129cb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361295b565b9161295b565b916129da610144565b806129e48161051c565b0390a3565b60209392612a088583612a008295612a1097611e7d565b018092611e7d565b018092611e7d565b0190565b612a1c610fc4565b50612a69612a2b5f8301611920565b612a5a612a466040612a3f60208701611920565b9501611920565b612a4e610144565b948593602085016129e9565b60208201810382520382610c83565b612a7b612a7582611eb6565b91611eb0565b2090565b612a87610fc4565b50612ad4612a965f830161023a565b612ac5612ab16002612aaa6001870161023a565b950161023a565b612ab9610144565b948593602085016129e9565b60208201810382520382610c83565b612ae6612ae082611eb6565b91611eb0565b2090565b94612b3860208099989596612b30828099612b2882612b409a612b20612b489f80612b18859e928693611e7d565b018092611e7d565b018092611e7d565b018092611e7d565b018092611e7d565b018092611e7d565b018092611e7d565b0190565b612b54610fc4565b50612bd5612b635f830161023a565b612bc6612b726001850161023a565b93612b7f6002820161023a565b90612b8c6003820161023a565b612b986004830161023a565b90612bb16006612baa6005860161023a565b940161023a565b93612bba610144565b98899760208901612aea565b60208201810382520382610c83565b612be7612be182611eb6565b91611eb0565b2090565b612c0a91612c0191612bfb6117e1565b50612c3e565b90929192612d3b565b90565b612c156117e1565b503390565b5f90565b612c32612c2d612c37926104c2565b610e39565b6102a4565b90565b5f90565b919091612c496117e1565b50612c52612c1a565b50612c5b610fc4565b50612c6583611eb6565b612c78612c726041611dd9565b916104c2565b145f14612cbf57612cb89192612c8c610fc4565b50612c95610fc4565b50612c9e612c3a565b506020810151606060408301519201515f1a909192612e98565b9192909190565b50612cc95f610c55565b90612cdd612cd8600294611eb6565b612c1e565b91929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612d0157565b612ce3565b90612d1082612cf7565b565b9190612d25905f602085019401906102a7565b565b612d33612d389161021e565b612176565b90565b80612d4e612d485f612d06565b91612d06565b145f14612d59575050565b80612d6d612d676001612d06565b91612d06565b145f14612d90575f63f645eedf60e01b815280612d8c6004820161051c565b0390fd5b80612da4612d9e6002612d06565b91612d06565b145f14612dd257612dce612db783612d27565b5f91829163fce698f760e01b8352600483016104d2565b0390fd5b612de5612ddf6003612d06565b91612d06565b14612ded5750565b612e08905f9182916335e2f38360e21b835260048301612d12565b0390fd5b90565b612e23612e1e612e2892612e0c565b610190565b6104c2565b90565b60ff1690565b612e3a90612e2b565b9052565b612e73612e7a94612e69606094989795612e5f608086019a5f8701906102a7565b6020850190612e31565b60408301906102a7565b01906102a7565b565b612e90612e8b612e9592610c36565b610e39565b6102a4565b90565b939293612ea36117e1565b50612eac612c1a565b50612eb5610fc4565b50612ebf85612d27565b612ef1612eeb7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612e0f565b916104c2565b11612f7e5790612f14602094955f94939293612f0b610144565b94859485612e3e565b838052039060015afa15612f7957612f2c5f51610e39565b80612f47612f41612f3c5f610c55565b61060e565b9161060e565b14612f5d575f91612f575f612e7c565b91929190565b50612f675f610c55565b600191612f735f612e7c565b91929190565b610cdf565b505050612f8a5f610c55565b906003929192919056",
}

// TeemoduleABI is the input ABI used to generate the binding from.
// Deprecated: Use TeemoduleMetaData.ABI instead.
var TeemoduleABI = TeemoduleMetaData.ABI

// TeemoduleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TeemoduleMetaData.Bin instead.
var TeemoduleBin = TeemoduleMetaData.Bin

// DeployTeemodule deploys a new Ethereum contract, binding an instance of Teemodule to it.
func DeployTeemodule(auth *bind.TransactOpts, backend bind.ContractBackend, poster_ common.Address, bridge_ common.Address, appchainConfigHash_ [32]byte, appchainStartBlockHash_ [32]byte, seqConfigHash_ [32]byte, seqStartBlockHash_ [32]byte, l1StartBlockHash_ [32]byte, l1block_ common.Address, challengeWindowDuration_ uint64, teeKeyManager_ common.Address) (common.Address, *types.Transaction, *Teemodule, error) {
	parsed, err := TeemoduleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TeemoduleBin), backend, poster_, bridge_, appchainConfigHash_, appchainStartBlockHash_, seqConfigHash_, seqStartBlockHash_, l1StartBlockHash_, l1block_, challengeWindowDuration_, teeKeyManager_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Teemodule{TeemoduleCaller: TeemoduleCaller{contract: contract}, TeemoduleTransactor: TeemoduleTransactor{contract: contract}, TeemoduleFilterer: TeemoduleFilterer{contract: contract}}, nil
}

// Teemodule is an auto generated Go binding around an Ethereum contract.
type Teemodule struct {
	TeemoduleCaller     // Read-only binding to the contract
	TeemoduleTransactor // Write-only binding to the contract
	TeemoduleFilterer   // Log filterer for contract events
}

// TeemoduleCaller is an auto generated read-only Go binding around an Ethereum contract.
type TeemoduleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TeemoduleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TeemoduleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TeemoduleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TeemoduleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TeemoduleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TeemoduleSession struct {
	Contract     *Teemodule        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TeemoduleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TeemoduleCallerSession struct {
	Contract *TeemoduleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// TeemoduleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TeemoduleTransactorSession struct {
	Contract     *TeemoduleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TeemoduleRaw is an auto generated low-level Go binding around an Ethereum contract.
type TeemoduleRaw struct {
	Contract *Teemodule // Generic contract binding to access the raw methods on
}

// TeemoduleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TeemoduleCallerRaw struct {
	Contract *TeemoduleCaller // Generic read-only contract binding to access the raw methods on
}

// TeemoduleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TeemoduleTransactorRaw struct {
	Contract *TeemoduleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTeemodule creates a new instance of Teemodule, bound to a specific deployed contract.
func NewTeemodule(address common.Address, backend bind.ContractBackend) (*Teemodule, error) {
	contract, err := bindTeemodule(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Teemodule{TeemoduleCaller: TeemoduleCaller{contract: contract}, TeemoduleTransactor: TeemoduleTransactor{contract: contract}, TeemoduleFilterer: TeemoduleFilterer{contract: contract}}, nil
}

// NewTeemoduleCaller creates a new read-only instance of Teemodule, bound to a specific deployed contract.
func NewTeemoduleCaller(address common.Address, caller bind.ContractCaller) (*TeemoduleCaller, error) {
	contract, err := bindTeemodule(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TeemoduleCaller{contract: contract}, nil
}

// NewTeemoduleTransactor creates a new write-only instance of Teemodule, bound to a specific deployed contract.
func NewTeemoduleTransactor(address common.Address, transactor bind.ContractTransactor) (*TeemoduleTransactor, error) {
	contract, err := bindTeemodule(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TeemoduleTransactor{contract: contract}, nil
}

// NewTeemoduleFilterer creates a new log filterer instance of Teemodule, bound to a specific deployed contract.
func NewTeemoduleFilterer(address common.Address, filterer bind.ContractFilterer) (*TeemoduleFilterer, error) {
	contract, err := bindTeemodule(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TeemoduleFilterer{contract: contract}, nil
}

// bindTeemodule binds a generic wrapper to an already deployed contract.
func bindTeemodule(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TeemoduleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Teemodule *TeemoduleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Teemodule.Contract.TeemoduleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Teemodule *TeemoduleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.Contract.TeemoduleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Teemodule *TeemoduleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Teemodule.Contract.TeemoduleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Teemodule *TeemoduleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Teemodule.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Teemodule *TeemoduleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Teemodule *TeemoduleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Teemodule.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Teemodule *TeemoduleCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Teemodule *TeemoduleSession) Bridge() (common.Address, error) {
	return _Teemodule.Contract.Bridge(&_Teemodule.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Teemodule *TeemoduleCallerSession) Bridge() (common.Address, error) {
	return _Teemodule.Contract.Bridge(&_Teemodule.CallOpts)
}

// ChallengeWindowDuration is a free data retrieval call binding the contract method 0x4bd167c9.
//
// Solidity: function challengeWindowDuration() view returns(uint64)
func (_Teemodule *TeemoduleCaller) ChallengeWindowDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "challengeWindowDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeWindowDuration is a free data retrieval call binding the contract method 0x4bd167c9.
//
// Solidity: function challengeWindowDuration() view returns(uint64)
func (_Teemodule *TeemoduleSession) ChallengeWindowDuration() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowDuration(&_Teemodule.CallOpts)
}

// ChallengeWindowDuration is a free data retrieval call binding the contract method 0x4bd167c9.
//
// Solidity: function challengeWindowDuration() view returns(uint64)
func (_Teemodule *TeemoduleCallerSession) ChallengeWindowDuration() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowDuration(&_Teemodule.CallOpts)
}

// ChallengeWindowEnd is a free data retrieval call binding the contract method 0xee1c28b8.
//
// Solidity: function challengeWindowEnd() view returns(uint64)
func (_Teemodule *TeemoduleCaller) ChallengeWindowEnd(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "challengeWindowEnd")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeWindowEnd is a free data retrieval call binding the contract method 0xee1c28b8.
//
// Solidity: function challengeWindowEnd() view returns(uint64)
func (_Teemodule *TeemoduleSession) ChallengeWindowEnd() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowEnd(&_Teemodule.CallOpts)
}

// ChallengeWindowEnd is a free data retrieval call binding the contract method 0xee1c28b8.
//
// Solidity: function challengeWindowEnd() view returns(uint64)
func (_Teemodule *TeemoduleCallerSession) ChallengeWindowEnd() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowEnd(&_Teemodule.CallOpts)
}

// L1block is a free data retrieval call binding the contract method 0x420caf3a.
//
// Solidity: function l1block() view returns(address)
func (_Teemodule *TeemoduleCaller) L1block(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "l1block")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1block is a free data retrieval call binding the contract method 0x420caf3a.
//
// Solidity: function l1block() view returns(address)
func (_Teemodule *TeemoduleSession) L1block() (common.Address, error) {
	return _Teemodule.Contract.L1block(&_Teemodule.CallOpts)
}

// L1block is a free data retrieval call binding the contract method 0x420caf3a.
//
// Solidity: function l1block() view returns(address)
func (_Teemodule *TeemoduleCallerSession) L1block() (common.Address, error) {
	return _Teemodule.Contract.L1block(&_Teemodule.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Teemodule *TeemoduleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Teemodule *TeemoduleSession) Owner() (common.Address, error) {
	return _Teemodule.Contract.Owner(&_Teemodule.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Teemodule *TeemoduleCallerSession) Owner() (common.Address, error) {
	return _Teemodule.Contract.Owner(&_Teemodule.CallOpts)
}

// PendingAssertions is a free data retrieval call binding the contract method 0xa56ec6cd.
//
// Solidity: function pendingAssertions(uint256 ) view returns(bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash)
func (_Teemodule *TeemoduleCaller) PendingAssertions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	BlockHash    [32]byte
	SendRoot     [32]byte
	SeqBlockHash [32]byte
}, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "pendingAssertions", arg0)

	outstruct := new(struct {
		BlockHash    [32]byte
		SendRoot     [32]byte
		SeqBlockHash [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BlockHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.SendRoot = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SeqBlockHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// PendingAssertions is a free data retrieval call binding the contract method 0xa56ec6cd.
//
// Solidity: function pendingAssertions(uint256 ) view returns(bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash)
func (_Teemodule *TeemoduleSession) PendingAssertions(arg0 *big.Int) (struct {
	BlockHash    [32]byte
	SendRoot     [32]byte
	SeqBlockHash [32]byte
}, error) {
	return _Teemodule.Contract.PendingAssertions(&_Teemodule.CallOpts, arg0)
}

// PendingAssertions is a free data retrieval call binding the contract method 0xa56ec6cd.
//
// Solidity: function pendingAssertions(uint256 ) view returns(bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash)
func (_Teemodule *TeemoduleCallerSession) PendingAssertions(arg0 *big.Int) (struct {
	BlockHash    [32]byte
	SendRoot     [32]byte
	SeqBlockHash [32]byte
}, error) {
	return _Teemodule.Contract.PendingAssertions(&_Teemodule.CallOpts, arg0)
}

// Poster is a free data retrieval call binding the contract method 0x80959721.
//
// Solidity: function poster() view returns(address)
func (_Teemodule *TeemoduleCaller) Poster(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "poster")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Poster is a free data retrieval call binding the contract method 0x80959721.
//
// Solidity: function poster() view returns(address)
func (_Teemodule *TeemoduleSession) Poster() (common.Address, error) {
	return _Teemodule.Contract.Poster(&_Teemodule.CallOpts)
}

// Poster is a free data retrieval call binding the contract method 0x80959721.
//
// Solidity: function poster() view returns(address)
func (_Teemodule *TeemoduleCallerSession) Poster() (common.Address, error) {
	return _Teemodule.Contract.Poster(&_Teemodule.CallOpts)
}

// TeeHackCount is a free data retrieval call binding the contract method 0x697b5e62.
//
// Solidity: function teeHackCount() view returns(uint256)
func (_Teemodule *TeemoduleCaller) TeeHackCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "teeHackCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TeeHackCount is a free data retrieval call binding the contract method 0x697b5e62.
//
// Solidity: function teeHackCount() view returns(uint256)
func (_Teemodule *TeemoduleSession) TeeHackCount() (*big.Int, error) {
	return _Teemodule.Contract.TeeHackCount(&_Teemodule.CallOpts)
}

// TeeHackCount is a free data retrieval call binding the contract method 0x697b5e62.
//
// Solidity: function teeHackCount() view returns(uint256)
func (_Teemodule *TeemoduleCallerSession) TeeHackCount() (*big.Int, error) {
	return _Teemodule.Contract.TeeHackCount(&_Teemodule.CallOpts)
}

// TeeKeyManager is a free data retrieval call binding the contract method 0x3a009a06.
//
// Solidity: function teeKeyManager() view returns(address)
func (_Teemodule *TeemoduleCaller) TeeKeyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "teeKeyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TeeKeyManager is a free data retrieval call binding the contract method 0x3a009a06.
//
// Solidity: function teeKeyManager() view returns(address)
func (_Teemodule *TeemoduleSession) TeeKeyManager() (common.Address, error) {
	return _Teemodule.Contract.TeeKeyManager(&_Teemodule.CallOpts)
}

// TeeKeyManager is a free data retrieval call binding the contract method 0x3a009a06.
//
// Solidity: function teeKeyManager() view returns(address)
func (_Teemodule *TeemoduleCallerSession) TeeKeyManager() (common.Address, error) {
	return _Teemodule.Contract.TeeKeyManager(&_Teemodule.CallOpts)
}

// TeeTrustedInput is a free data retrieval call binding the contract method 0x3ceaae7d.
//
// Solidity: function teeTrustedInput() view returns(bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash)
func (_Teemodule *TeemoduleCaller) TeeTrustedInput(opts *bind.CallOpts) (struct {
	AppchainConfigHash     [32]byte
	AppchainStartBlockHash [32]byte
	SeqConfigHash          [32]byte
	SeqStartBlockHash      [32]byte
	SetDelayedMessageAcc   [32]byte
	L1StartBlockHash       [32]byte
	L1EndBlockHash         [32]byte
}, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "teeTrustedInput")

	outstruct := new(struct {
		AppchainConfigHash     [32]byte
		AppchainStartBlockHash [32]byte
		SeqConfigHash          [32]byte
		SeqStartBlockHash      [32]byte
		SetDelayedMessageAcc   [32]byte
		L1StartBlockHash       [32]byte
		L1EndBlockHash         [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AppchainConfigHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.AppchainStartBlockHash = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SeqConfigHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.SeqStartBlockHash = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.SetDelayedMessageAcc = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.L1StartBlockHash = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.L1EndBlockHash = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// TeeTrustedInput is a free data retrieval call binding the contract method 0x3ceaae7d.
//
// Solidity: function teeTrustedInput() view returns(bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash)
func (_Teemodule *TeemoduleSession) TeeTrustedInput() (struct {
	AppchainConfigHash     [32]byte
	AppchainStartBlockHash [32]byte
	SeqConfigHash          [32]byte
	SeqStartBlockHash      [32]byte
	SetDelayedMessageAcc   [32]byte
	L1StartBlockHash       [32]byte
	L1EndBlockHash         [32]byte
}, error) {
	return _Teemodule.Contract.TeeTrustedInput(&_Teemodule.CallOpts)
}

// TeeTrustedInput is a free data retrieval call binding the contract method 0x3ceaae7d.
//
// Solidity: function teeTrustedInput() view returns(bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash)
func (_Teemodule *TeemoduleCallerSession) TeeTrustedInput() (struct {
	AppchainConfigHash     [32]byte
	AppchainStartBlockHash [32]byte
	SeqConfigHash          [32]byte
	SeqStartBlockHash      [32]byte
	SetDelayedMessageAcc   [32]byte
	L1StartBlockHash       [32]byte
	L1EndBlockHash         [32]byte
}, error) {
	return _Teemodule.Contract.TeeTrustedInput(&_Teemodule.CallOpts)
}

// CloseChallengeWindow is a paid mutator transaction binding the contract method 0x6c4c2060.
//
// Solidity: function closeChallengeWindow() returns()
func (_Teemodule *TeemoduleTransactor) CloseChallengeWindow(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "closeChallengeWindow")
}

// CloseChallengeWindow is a paid mutator transaction binding the contract method 0x6c4c2060.
//
// Solidity: function closeChallengeWindow() returns()
func (_Teemodule *TeemoduleSession) CloseChallengeWindow() (*types.Transaction, error) {
	return _Teemodule.Contract.CloseChallengeWindow(&_Teemodule.TransactOpts)
}

// CloseChallengeWindow is a paid mutator transaction binding the contract method 0x6c4c2060.
//
// Solidity: function closeChallengeWindow() returns()
func (_Teemodule *TeemoduleTransactorSession) CloseChallengeWindow() (*types.Transaction, error) {
	return _Teemodule.Contract.CloseChallengeWindow(&_Teemodule.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Teemodule *TeemoduleTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Teemodule *TeemoduleSession) RenounceOwnership() (*types.Transaction, error) {
	return _Teemodule.Contract.RenounceOwnership(&_Teemodule.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Teemodule *TeemoduleTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Teemodule.Contract.RenounceOwnership(&_Teemodule.TransactOpts)
}

// ResolveChallenge is a paid mutator transaction binding the contract method 0x8fed55a3.
//
// Solidity: function resolveChallenge((bytes32,bytes32,bytes32) assertion) returns()
func (_Teemodule *TeemoduleTransactor) ResolveChallenge(opts *bind.TransactOpts, assertion PendingAssertion) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "resolveChallenge", assertion)
}

// ResolveChallenge is a paid mutator transaction binding the contract method 0x8fed55a3.
//
// Solidity: function resolveChallenge((bytes32,bytes32,bytes32) assertion) returns()
func (_Teemodule *TeemoduleSession) ResolveChallenge(assertion PendingAssertion) (*types.Transaction, error) {
	return _Teemodule.Contract.ResolveChallenge(&_Teemodule.TransactOpts, assertion)
}

// ResolveChallenge is a paid mutator transaction binding the contract method 0x8fed55a3.
//
// Solidity: function resolveChallenge((bytes32,bytes32,bytes32) assertion) returns()
func (_Teemodule *TeemoduleTransactorSession) ResolveChallenge(assertion PendingAssertion) (*types.Transaction, error) {
	return _Teemodule.Contract.ResolveChallenge(&_Teemodule.TransactOpts, assertion)
}

// SetAppchainConfigHash is a paid mutator transaction binding the contract method 0xf223055c.
//
// Solidity: function setAppchainConfigHash(bytes32 hash) returns()
func (_Teemodule *TeemoduleTransactor) SetAppchainConfigHash(opts *bind.TransactOpts, hash [32]byte) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "setAppchainConfigHash", hash)
}

// SetAppchainConfigHash is a paid mutator transaction binding the contract method 0xf223055c.
//
// Solidity: function setAppchainConfigHash(bytes32 hash) returns()
func (_Teemodule *TeemoduleSession) SetAppchainConfigHash(hash [32]byte) (*types.Transaction, error) {
	return _Teemodule.Contract.SetAppchainConfigHash(&_Teemodule.TransactOpts, hash)
}

// SetAppchainConfigHash is a paid mutator transaction binding the contract method 0xf223055c.
//
// Solidity: function setAppchainConfigHash(bytes32 hash) returns()
func (_Teemodule *TeemoduleTransactorSession) SetAppchainConfigHash(hash [32]byte) (*types.Transaction, error) {
	return _Teemodule.Contract.SetAppchainConfigHash(&_Teemodule.TransactOpts, hash)
}

// SetChallengeWindowDuration is a paid mutator transaction binding the contract method 0xeb60553a.
//
// Solidity: function setChallengeWindowDuration(uint64 duration) returns()
func (_Teemodule *TeemoduleTransactor) SetChallengeWindowDuration(opts *bind.TransactOpts, duration uint64) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "setChallengeWindowDuration", duration)
}

// SetChallengeWindowDuration is a paid mutator transaction binding the contract method 0xeb60553a.
//
// Solidity: function setChallengeWindowDuration(uint64 duration) returns()
func (_Teemodule *TeemoduleSession) SetChallengeWindowDuration(duration uint64) (*types.Transaction, error) {
	return _Teemodule.Contract.SetChallengeWindowDuration(&_Teemodule.TransactOpts, duration)
}

// SetChallengeWindowDuration is a paid mutator transaction binding the contract method 0xeb60553a.
//
// Solidity: function setChallengeWindowDuration(uint64 duration) returns()
func (_Teemodule *TeemoduleTransactorSession) SetChallengeWindowDuration(duration uint64) (*types.Transaction, error) {
	return _Teemodule.Contract.SetChallengeWindowDuration(&_Teemodule.TransactOpts, duration)
}

// SetSeqConfigHash is a paid mutator transaction binding the contract method 0xc3f2dbd3.
//
// Solidity: function setSeqConfigHash(bytes32 hash) returns()
func (_Teemodule *TeemoduleTransactor) SetSeqConfigHash(opts *bind.TransactOpts, hash [32]byte) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "setSeqConfigHash", hash)
}

// SetSeqConfigHash is a paid mutator transaction binding the contract method 0xc3f2dbd3.
//
// Solidity: function setSeqConfigHash(bytes32 hash) returns()
func (_Teemodule *TeemoduleSession) SetSeqConfigHash(hash [32]byte) (*types.Transaction, error) {
	return _Teemodule.Contract.SetSeqConfigHash(&_Teemodule.TransactOpts, hash)
}

// SetSeqConfigHash is a paid mutator transaction binding the contract method 0xc3f2dbd3.
//
// Solidity: function setSeqConfigHash(bytes32 hash) returns()
func (_Teemodule *TeemoduleTransactorSession) SetSeqConfigHash(hash [32]byte) (*types.Transaction, error) {
	return _Teemodule.Contract.SetSeqConfigHash(&_Teemodule.TransactOpts, hash)
}

// SubmitAssertion is a paid mutator transaction binding the contract method 0xe50c6156.
//
// Solidity: function submitAssertion((bytes32,bytes32,bytes32) assertion, bytes signature, address rewardAddr) returns()
func (_Teemodule *TeemoduleTransactor) SubmitAssertion(opts *bind.TransactOpts, assertion PendingAssertion, signature []byte, rewardAddr common.Address) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "submitAssertion", assertion, signature, rewardAddr)
}

// SubmitAssertion is a paid mutator transaction binding the contract method 0xe50c6156.
//
// Solidity: function submitAssertion((bytes32,bytes32,bytes32) assertion, bytes signature, address rewardAddr) returns()
func (_Teemodule *TeemoduleSession) SubmitAssertion(assertion PendingAssertion, signature []byte, rewardAddr common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.SubmitAssertion(&_Teemodule.TransactOpts, assertion, signature, rewardAddr)
}

// SubmitAssertion is a paid mutator transaction binding the contract method 0xe50c6156.
//
// Solidity: function submitAssertion((bytes32,bytes32,bytes32) assertion, bytes signature, address rewardAddr) returns()
func (_Teemodule *TeemoduleTransactorSession) SubmitAssertion(assertion PendingAssertion, signature []byte, rewardAddr common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.SubmitAssertion(&_Teemodule.TransactOpts, assertion, signature, rewardAddr)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Teemodule *TeemoduleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Teemodule *TeemoduleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.TransferOwnership(&_Teemodule.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Teemodule *TeemoduleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.TransferOwnership(&_Teemodule.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Teemodule *TeemoduleTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Teemodule *TeemoduleSession) Receive() (*types.Transaction, error) {
	return _Teemodule.Contract.Receive(&_Teemodule.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Teemodule *TeemoduleTransactorSession) Receive() (*types.Transaction, error) {
	return _Teemodule.Contract.Receive(&_Teemodule.TransactOpts)
}

// TeemoduleChallengeResolvedIterator is returned from FilterChallengeResolved and is used to iterate over the raw logs and unpacked data for ChallengeResolved events raised by the Teemodule contract.
type TeemoduleChallengeResolvedIterator struct {
	Event *TeemoduleChallengeResolved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleChallengeResolvedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleChallengeResolved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleChallengeResolved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleChallengeResolvedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleChallengeResolvedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleChallengeResolved represents a ChallengeResolved event raised by the Teemodule contract.
type TeemoduleChallengeResolved struct {
	Arg0 PendingAssertion
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterChallengeResolved is a free log retrieval operation binding the contract event 0xe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b.
//
// Solidity: event ChallengeResolved((bytes32,bytes32,bytes32) arg0)
func (_Teemodule *TeemoduleFilterer) FilterChallengeResolved(opts *bind.FilterOpts) (*TeemoduleChallengeResolvedIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "ChallengeResolved")
	if err != nil {
		return nil, err
	}
	return &TeemoduleChallengeResolvedIterator{contract: _Teemodule.contract, event: "ChallengeResolved", logs: logs, sub: sub}, nil
}

// WatchChallengeResolved is a free log subscription operation binding the contract event 0xe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b.
//
// Solidity: event ChallengeResolved((bytes32,bytes32,bytes32) arg0)
func (_Teemodule *TeemoduleFilterer) WatchChallengeResolved(opts *bind.WatchOpts, sink chan<- *TeemoduleChallengeResolved) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "ChallengeResolved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleChallengeResolved)
				if err := _Teemodule.contract.UnpackLog(event, "ChallengeResolved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeResolved is a log parse operation binding the contract event 0xe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b.
//
// Solidity: event ChallengeResolved((bytes32,bytes32,bytes32) arg0)
func (_Teemodule *TeemoduleFilterer) ParseChallengeResolved(log types.Log) (*TeemoduleChallengeResolved, error) {
	event := new(TeemoduleChallengeResolved)
	if err := _Teemodule.contract.UnpackLog(event, "ChallengeResolved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Teemodule contract.
type TeemoduleOwnershipTransferredIterator struct {
	Event *TeemoduleOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleOwnershipTransferred represents a OwnershipTransferred event raised by the Teemodule contract.
type TeemoduleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Teemodule *TeemoduleFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TeemoduleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TeemoduleOwnershipTransferredIterator{contract: _Teemodule.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Teemodule *TeemoduleFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TeemoduleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleOwnershipTransferred)
				if err := _Teemodule.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Teemodule *TeemoduleFilterer) ParseOwnershipTransferred(log types.Log) (*TeemoduleOwnershipTransferred, error) {
	event := new(TeemoduleOwnershipTransferred)
	if err := _Teemodule.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeAppchainConfigHashIterator is returned from FilterTeeAppchainConfigHash and is used to iterate over the raw logs and unpacked data for TeeAppchainConfigHash events raised by the Teemodule contract.
type TeemoduleTeeAppchainConfigHashIterator struct {
	Event *TeemoduleTeeAppchainConfigHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeAppchainConfigHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeAppchainConfigHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeAppchainConfigHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeAppchainConfigHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeAppchainConfigHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeAppchainConfigHash represents a TeeAppchainConfigHash event raised by the Teemodule contract.
type TeemoduleTeeAppchainConfigHash struct {
	ConfigHash [32]byte
	BlockHash  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTeeAppchainConfigHash is a free log retrieval operation binding the contract event 0xc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec.
//
// Solidity: event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash)
func (_Teemodule *TeemoduleFilterer) FilterTeeAppchainConfigHash(opts *bind.FilterOpts) (*TeemoduleTeeAppchainConfigHashIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeAppchainConfigHash")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeAppchainConfigHashIterator{contract: _Teemodule.contract, event: "TeeAppchainConfigHash", logs: logs, sub: sub}, nil
}

// WatchTeeAppchainConfigHash is a free log subscription operation binding the contract event 0xc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec.
//
// Solidity: event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash)
func (_Teemodule *TeemoduleFilterer) WatchTeeAppchainConfigHash(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeAppchainConfigHash) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeAppchainConfigHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeAppchainConfigHash)
				if err := _Teemodule.contract.UnpackLog(event, "TeeAppchainConfigHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeAppchainConfigHash is a log parse operation binding the contract event 0xc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec.
//
// Solidity: event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash)
func (_Teemodule *TeemoduleFilterer) ParseTeeAppchainConfigHash(log types.Log) (*TeemoduleTeeAppchainConfigHash, error) {
	event := new(TeemoduleTeeAppchainConfigHash)
	if err := _Teemodule.contract.UnpackLog(event, "TeeAppchainConfigHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeHackedIterator is returned from FilterTeeHacked and is used to iterate over the raw logs and unpacked data for TeeHacked events raised by the Teemodule contract.
type TeemoduleTeeHackedIterator struct {
	Event *TeemoduleTeeHacked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeHackedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeHacked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeHacked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeHackedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeHackedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeHacked represents a TeeHacked event raised by the Teemodule contract.
type TeemoduleTeeHacked struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterTeeHacked is a free log retrieval operation binding the contract event 0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7.
//
// Solidity: event TeeHacked(uint256 arg0)
func (_Teemodule *TeemoduleFilterer) FilterTeeHacked(opts *bind.FilterOpts) (*TeemoduleTeeHackedIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeHacked")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeHackedIterator{contract: _Teemodule.contract, event: "TeeHacked", logs: logs, sub: sub}, nil
}

// WatchTeeHacked is a free log subscription operation binding the contract event 0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7.
//
// Solidity: event TeeHacked(uint256 arg0)
func (_Teemodule *TeemoduleFilterer) WatchTeeHacked(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeHacked) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeHacked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeHacked)
				if err := _Teemodule.contract.UnpackLog(event, "TeeHacked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeHacked is a log parse operation binding the contract event 0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7.
//
// Solidity: event TeeHacked(uint256 arg0)
func (_Teemodule *TeemoduleFilterer) ParseTeeHacked(log types.Log) (*TeemoduleTeeHacked, error) {
	event := new(TeemoduleTeeHacked)
	if err := _Teemodule.contract.UnpackLog(event, "TeeHacked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeInputIterator is returned from FilterTeeInput and is used to iterate over the raw logs and unpacked data for TeeInput events raised by the Teemodule contract.
type TeemoduleTeeInputIterator struct {
	Event *TeemoduleTeeInput // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeInputIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeInput)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeInput)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeInputIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeInputIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeInput represents a TeeInput event raised by the Teemodule contract.
type TeemoduleTeeInput struct {
	Input TeeTrustedInput
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTeeInput is a free log retrieval operation binding the contract event 0x91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc.
//
// Solidity: event TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32) input)
func (_Teemodule *TeemoduleFilterer) FilterTeeInput(opts *bind.FilterOpts) (*TeemoduleTeeInputIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeInput")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeInputIterator{contract: _Teemodule.contract, event: "TeeInput", logs: logs, sub: sub}, nil
}

// WatchTeeInput is a free log subscription operation binding the contract event 0x91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc.
//
// Solidity: event TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32) input)
func (_Teemodule *TeemoduleFilterer) WatchTeeInput(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeInput) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeInput")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeInput)
				if err := _Teemodule.contract.UnpackLog(event, "TeeInput", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeInput is a log parse operation binding the contract event 0x91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc.
//
// Solidity: event TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32) input)
func (_Teemodule *TeemoduleFilterer) ParseTeeInput(log types.Log) (*TeemoduleTeeInput, error) {
	event := new(TeemoduleTeeInput)
	if err := _Teemodule.contract.UnpackLog(event, "TeeInput", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeSeqConfigHashIterator is returned from FilterTeeSeqConfigHash and is used to iterate over the raw logs and unpacked data for TeeSeqConfigHash events raised by the Teemodule contract.
type TeemoduleTeeSeqConfigHashIterator struct {
	Event *TeemoduleTeeSeqConfigHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeSeqConfigHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeSeqConfigHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeSeqConfigHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeSeqConfigHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeSeqConfigHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeSeqConfigHash represents a TeeSeqConfigHash event raised by the Teemodule contract.
type TeemoduleTeeSeqConfigHash struct {
	ConfigHash [32]byte
	BlockHash  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTeeSeqConfigHash is a free log retrieval operation binding the contract event 0xb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b.
//
// Solidity: event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash)
func (_Teemodule *TeemoduleFilterer) FilterTeeSeqConfigHash(opts *bind.FilterOpts) (*TeemoduleTeeSeqConfigHashIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeSeqConfigHash")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeSeqConfigHashIterator{contract: _Teemodule.contract, event: "TeeSeqConfigHash", logs: logs, sub: sub}, nil
}

// WatchTeeSeqConfigHash is a free log subscription operation binding the contract event 0xb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b.
//
// Solidity: event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash)
func (_Teemodule *TeemoduleFilterer) WatchTeeSeqConfigHash(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeSeqConfigHash) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeSeqConfigHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeSeqConfigHash)
				if err := _Teemodule.contract.UnpackLog(event, "TeeSeqConfigHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeSeqConfigHash is a log parse operation binding the contract event 0xb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b.
//
// Solidity: event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash)
func (_Teemodule *TeemoduleFilterer) ParseTeeSeqConfigHash(log types.Log) (*TeemoduleTeeSeqConfigHash, error) {
	event := new(TeemoduleTeeSeqConfigHash)
	if err := _Teemodule.contract.UnpackLog(event, "TeeSeqConfigHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
