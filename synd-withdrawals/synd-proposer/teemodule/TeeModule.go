// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package teemodule

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PendingAssertion is an auto generated low-level Go binding around an user-defined struct.
type PendingAssertion struct {
	AppBlockHash [32]byte
	AppSendRoot  [32]byte
	SeqBlockHash [32]byte
	L1BatchAcc   [32]byte
}

// TeeTrustedInput is an auto generated low-level Go binding around an user-defined struct.
type TeeTrustedInput struct {
	ConfigHash           [32]byte
	AppStartBlockHash    [32]byte
	SeqStartBlockHash    [32]byte
	SetDelayedMessageAcc [32]byte
	L1StartBatchAcc      [32]byte
	L1EndHash            [32]byte
}

// TeemoduleMetaData contains all meta data concerning the Teemodule contract.
var TeemoduleMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"poster_\",\"type\":\"address\",\"internalType\":\"contractIAssertionPoster\"},{\"name\":\"bridge_\",\"type\":\"address\",\"internalType\":\"contractIBridge\"},{\"name\":\"configHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appStartBlockHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqStartBlockHash_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1StartBatchAcc_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1BlockOrBridge_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isL1Chain_\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"challengeWindowDuration_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"teeKeyManager_\",\"type\":\"address\",\"internalType\":\"contractITeeKeyManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBridge\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"challengeWindowDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"challengeWindowEnd\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"closeChallengeWindow\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isL1Chain\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"l1BlockOrBridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingAssertions\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"appBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appSendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1BatchAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"poster\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAssertionPoster\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"resolveChallenge\",\"inputs\":[{\"name\":\"assertion\",\"type\":\"tuple\",\"internalType\":\"structPendingAssertion\",\"components\":[{\"name\":\"appBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appSendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1BatchAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"submitAssertion\",\"inputs\":[{\"name\":\"assertion\",\"type\":\"tuple\",\"internalType\":\"structPendingAssertion\",\"components\":[{\"name\":\"appBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appSendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1BatchAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"rewardAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"teeHackCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"teeKeyManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractITeeKeyManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"teeTrustedInput\",\"inputs\":[],\"outputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"setDelayedMessageAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1StartBatchAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1EndHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChallengeResolved\",\"inputs\":[{\"name\":\"\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structPendingAssertion\",\"components\":[{\"name\":\"appBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appSendRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1BatchAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeConfigHash\",\"inputs\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeHacked\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TeeInput\",\"inputs\":[{\"name\":\"input\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structTeeTrustedInput\",\"components\":[{\"name\":\"configHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"appStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"seqStartBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"setDelayedMessageAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1StartBatchAcc\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l1EndHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]}]",
	Bin: "0x610120604052346100b857610027610015610305565b9897909796919695929594939461095a565b61002f6100bd565b612dd3611bc282396080518181816106e30152612102015260a05181818161094701528181611d080152611d3b015260c05181818161014301528181611e2401528181611e5f01528181611fcd015261220c015260e0518181816104c00152818161146101528181611bd60152611df70152610100518181816102ed01526113ea0152612dd390f35b6100c3565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100ef906100c7565b810190811060018060401b0382111761010757604052565b6100d1565b9061011f6101186100bd565b92836100e5565b565b5f80fd5b60018060a01b031690565b61013990610125565b90565b61014590610130565b90565b6101518161013c565b0361015857565b5f80fd5b9050519061016982610148565b565b61017490610130565b90565b6101808161016b565b0361018757565b5f80fd5b9050519061019882610177565b565b90565b6101a68161019a565b036101ad57565b5f80fd5b905051906101be8261019d565b565b6101c981610130565b036101d057565b5f80fd5b905051906101e1826101c0565b565b151590565b6101f1816101e3565b036101f857565b5f80fd5b90505190610209826101e8565b565b60018060401b031690565b61021f8161020b565b0361022657565b5f80fd5b9050519061023782610216565b565b61024290610130565b90565b61024e81610239565b0361025557565b5f80fd5b9050519061026682610245565b565b610140818303126103005761027f825f830161015c565b9261028d836020840161018b565b9261029b81604085016101b1565b926102a982606083016101b1565b926102b783608084016101b1565b926102c58160a085016101b1565b926102d38260c083016101d4565b926102fd6102e48460e085016101fc565b936102f381610100860161022a565b9361012001610259565b90565b610121565b610323614995803803806103188161010c565b928339810190610268565b90919293949596979899565b60401b90565b9061034f68010000000000000000600160801b039161032f565b9181191691161790565b90565b61037061036b6103759261020b565b610359565b61020b565b90565b90565b9061039061038b6103979261035c565b610378565b8254610335565b9055565b5f1b90565b906103ac5f199161039b565b9181191691161790565b6103bf9061019a565b90565b5f1c90565b6103d0906103c2565b90565b906103e86103e36103ef926103b6565b6103c7565b82546103a0565b9055565b6103fc9061019a565b9052565b9190610413905f602085019401906103f3565b565b61041f90516101e3565b90565b61042c9051610130565b90565b61044361043e61044892610125565b610359565b610125565b90565b6104549061042f565b90565b6104609061044b565b90565b61046c9061042f565b90565b61047890610463565b90565b5f80fd5b60e01b90565b9060208282031261049e5761049b915f0161022a565b90565b610121565b5f0190565b6104b06100bd565b3d5f823e3d90fd5b90565b6104cf6104ca6104d4926104b8565b610359565b61020b565b90565b906020828203126104f0576104ed915f016101b1565b90565b610121565b61050961050461050e926104b8565b61039b565b61019a565b90565b60209181520190565b5f7f6c3120626c6f636b20636f6e747261637420696e76616c696400000000000000910152565b61054e6019602092610511565b6105578161051a565b0190565b6105709060208101905f818303910152610541565b90565b1561057a57565b6105826100bd565b62461bcd60e51b8152806105986004820161055b565b0390fd5b5f7f756e657870656374656420736571206272696467652061646472657373000000910152565b6105d0601d602092610511565b6105d98161059c565b0190565b6105f29060208101905f8183039101526105c3565b90565b156105fc57565b6106046100bd565b62461bcd60e51b81528061061a600482016105dd565b0390fd5b6106279061042f565b90565b6106339061061e565b90565b61063f90610463565b90565b90565b61064e81610642565b0361065557565b5f80fd5b9050519061066682610645565b565b906020828203126106815761067e915f01610659565b90565b610121565b61069a61069561069f926104b8565b610359565b610642565b90565b60207f617374206f6e6520626174636800000000000000000000000000000000000000917f73657175656e63696e6720636861696e206d7573742068617665206174206c655f8201520152565b6106fc602d604092610511565b610705816106a2565b0190565b61071e9060208101905f8183039101526106ef565b90565b1561072857565b6107306100bd565b62461bcd60e51b81528061074660048201610709565b0390fd5b61075390610463565b90565b60207f20636f6465000000000000000000000000000000000000000000000000000000917f706f73746572206164647265737320646f6573206e6f74206861766520616e795f8201520152565b6107b06025604092610511565b6107b981610756565b0190565b6107d29060208101905f8183039101526107a3565b90565b156107dc57565b6107e46100bd565b62461bcd60e51b8152806107fa600482016107bd565b0390fd5b60207f2062726964676500000000000000000000000000000000000000000000000000917f696e73756666696369656e742064656c61796564206d6573736167657320696e5f8201520152565b6108586027604092610511565b610861816107fe565b0190565b61087a9060208101905f81830391015261084b565b90565b1561088457565b61088c6100bd565b62461bcd60e51b8152806108a260048201610865565b0390fd5b6108af90610463565b90565b60207f61766520616e7920636f64650000000000000000000000000000000000000000917f7465654b65794d616e61676572206164647265737320646f6573206e6f7420685f8201520152565b61090c602c604092610511565b610915816108b2565b0190565b61092e9060208101905f8183039101526108ff565b90565b1561093857565b6109406100bd565b62461bcd60e51b81528061095660048201610919565b0390fd5b9691929395909894976109779061097033610da3565b600a61037b565b60c05260e05261098a815f6002016103d3565b6109c07fd266bca6281b20459ae52407bea3d134d9017bf8f3ba803cb7a11d724e2b2da6916109b76100bd565b91829182610400565b0390a16109cd60e0610415565b5f14610bd257610a4293610a116109e460c0610422565b610a0a610a04734200000000000000000000000000000000000015610130565b91610130565b14156105f5565b6020610a2d610a28610a2360c0610422565b61062a565b610636565b6284120c90610a3a6100bd565b97889261047f565b82528180610a52600482016104a3565b03915afa948515610bcd57610acf95610a85915f91610b9f575b50610a7f610a795f610686565b91610642565b11610721565b5b610aab610a928261074a565b3b610aa5610a9f5f610686565b91610642565b116107d5565b6080526020610ab987610636565b63eca067ad90610ac76100bd565b96879261047f565b82528180610adf600482016104a3565b03915afa918215610b9a57610b6296610b19610b4f94610b58975f91610b6c575b50610b13610b0d5f610686565b91610642565b1161087d565b60a052610b41610b28826108a6565b3b610b3b610b355f610686565b91610642565b11610931565b6101005260016002016103d3565b600280016103d3565b60046002016103d3565b610b6a611a26565b565b610b8d915060203d8111610b93575b610b8581836100e5565b810190610668565b5f610b00565b503d610b7b565b6104a8565b610bc0915060203d8111610bc6575b610bb881836100e5565b810190610668565b5f610a6c565b503d610bae565b6104a8565b610c076020610bf1610bec610be760c0610422565b610457565b61046f565b63b80777ea90610bff6100bd565b93849261047f565b82528180610c17600482016104a3565b03915afa908115610d33575f91610d05575b50610c3c610c365f6104bb565b9161020b565b119384610c55575b610c50610acf95610573565b610a86565b610c8c94506020610c76610c71610c6c60c0610422565b610457565b61046f565b6309bd5a6090610c846100bd565b97889261047f565b82528180610c9c600482016104a3565b03915afa948515610d0057610acf95610c50915f91610cd2575b50610cc9610cc35f6104f5565b9161019a565b11955050610c44565b610cf3915060203d8111610cf9575b610ceb81836100e5565b8101906104d7565b5f610cb6565b503d610ce1565b6104a8565b610d26915060203d8111610d2c575b610d1e81836100e5565b810190610485565b5f610c29565b503d610d14565b6104a8565b90565b610d4f610d4a610d5492610d38565b610359565b610642565b90565b610d616001610d3b565b90565b610d78610d73610d7d92610642565b610359565b610642565b90565b90565b90610d98610d93610d9f92610d64565b610d80565b82546103a0565b9055565b610dac90610e0a565b610dbe610db7610d57565b6001610d83565b565b610dd4610dcf610dd9926104b8565b610359565b610125565b90565b610de590610dc0565b90565b610df190610130565b9052565b9190610e08905f60208501940190610de8565b565b80610e25610e1f610e1a5f610ddc565b610130565b91610130565b14610e3557610e3390611aa6565b565b610e58610e415f610ddc565b5f918291631e4fbdf760e01b835260048301610df5565b0390fd5b610e64611b55565b610e6c611420565b610e74611bad565b565b610e8a610e85610e8f92610642565b610359565b61020b565b90565b60018060401b031690565b610ea9610eae916103c2565b610e92565b90565b610ebb9054610e9d565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610f18603c604092610511565b610f2181610ebe565b0190565b610f3a9060208101905f818303910152610f0b565b90565b15610f4457565b610f4c6100bd565b62461bcd60e51b815280610f6260048201610f25565b0390fd5b60401c90565b610f78610f7d91610f66565b610e92565b90565b610f8a9054610f6c565b90565b634e487b7160e01b5f52601160045260245ffd5b610fad610fb39161020b565b9161020b565b019060018060401b038211610fc457565b610f8d565b90610fda60018060401b039161039b565b9181191691161790565b90610ff9610ff46110009261035c565b610378565b8254610fc9565b9055565b5490565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6110626033604092610511565b61106b81611008565b0190565b6110849060208101905f818303910152611055565b90565b1561108e57565b6110966100bd565b62461bcd60e51b8152806110ac6004820161106f565b0390fd5b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b6110d681611004565b8210156110f0576110e86004916110c4565b910201905f90565b6110b0565b90565b611104611109916103c2565b6110f5565b90565b61111690546110f8565b90565b611123905161013c565b90565b5f91031261113057565b610121565b91602061115692949361114f60408201965f8301906103f3565b01906103f3565b565b61116761116d91939293610642565b92610642565b91611179838202610642565b92818404149015171561118857565b610f8d565b611198906004611158565b90565b1b90565b919060086111ba9102916111b45f198461119b565b9261119b565b9181191691161790565b91906111da6111d56111e2936103b6565b6103c7565b90835461119f565b9055565b5f90565b6111fc916111f66111e6565b916111c4565b565b5f600361123192611211838083016111ea565b61121e83600183016111ea565b61122b83600283016111ea565b016111ea565b565b634e487b7160e01b5f525f60045260245ffd5b905f0361125857611256906111fe565b565b611233565b5b818110611269575050565b806112765f600493611246565b0161125e565b909182811061128b575b505050565b6112a96112a361129d6112b49561118d565b9261118d565b926110c4565b91820191019061125d565b5f8080611286565b906801000000000000000081116112e557816112da6112e393611004565b9082815561127c565b565b6100d1565b5f6112f4916112bc565b565b905f0361130857611306906112ea565b565b611233565b611317905161016b565b90565b61132961132f91939293610642565b92610642565b820391821161133a57565b610f8d565b61134890610642565b9052565b919061135f905f6020850194019061133f565b565b61136a9061019a565b9052565b9060a06114016005611409946113926113895f8301546110f8565b5f870190611361565b6113ac6113a260018301546110f8565b6020870190611361565b6113c66113bc60028301546110f8565b6040870190611361565b6113e06113d660038301546110f8565b6060870190611361565b6113fa6113f060048301546110f8565b6080870190611361565b01546110f8565b910190611361565b565b919061141e905f60c0850194019061136e565b565b61142a60e0610415565b5f146119935761145e61143c42610e76565b5b61145861145261144d600a610eb1565b61020b565b9161020b565b11610f3d565b61148461147d61146d42610e76565b611477600a610f80565b90610fa1565b600a610fe4565b61148e6008611004565b6114a161149b6001610d3b565b91610642565b145f14611969576114cd6114c360036114bc60085f906110cd565b500161110c565b60046002016103d3565b6114f16114e860026114e160085f906110cd565b500161110c565b600280016103d3565b6114fe600160020161110c565b61152661152061151b5f611514600882906110cd565b500161110c565b61019a565b9161019a565b03611884575b6115375f60086112f6565b5b61154a61154560a061130d565b610636565b61157c63d5719dc2602061156661156160a061130d565b610636565b63eca067ad906115746100bd565b94859261047f565b8252818061158c600482016104a3565b03915afa92831561187f576115d16115bc6115dc956020955f91611852575b506115b66001610d3b565b9061131a565b926115c56100bd565b9586948593849361047f565b83526004830161134c565b03915afa801561184d576115fc915f9161181f575b5060036002016103d3565b61160660e0610415565b5f146117825761162661162161161c60c0610422565b61062a565b610636565b61165f6316bf5579602061164a61164561164060c0610422565b61062a565b610636565b6284120c906116576100bd565b94859261047f565b8252818061166f600482016104a3565b03915afa92831561177d576116b461169f6116bf956020955f91611750575b506116996001610d3b565b9061131a565b926116a86100bd565b9586948593849361047f565b83526004830161134c565b03915afa801561174b576116df915f9161171d575b5060056002016103d3565b5b60026117187f55232299d83faf4dc2c32e228af37632bca7fa6dbc03b41224c100c6c9dca3499161170f6100bd565b9182918261140b565b0390a1565b61173e915060203d8111611744575b61173681836100e5565b8101906104d7565b5f6116d4565b503d61172c565b6104a8565b6117709150863d8111611776575b61176881836100e5565b810190610668565b5f61168e565b503d61175e565b6104a8565b6117b760206117a161179c61179760c0610422565b610457565b61046f565b6309bd5a60906117af6100bd565b93849261047f565b825281806117c7600482016104a3565b03915afa801561181a576117e7915f916117ec575b5060056002016103d3565b6116e0565b61180d915060203d8111611813575b61180581836100e5565b8101906104d7565b5f6117dc565b503d6117fb565b6104a8565b611840915060203d8111611846575b61183881836100e5565b8101906104d7565b5f6115f1565b503d61182e565b6104a8565b6118729150863d8111611878575b61186a81836100e5565b810190610668565b5f6115ab565b503d611860565b6104a8565b6118a861189e5f611897600882906110cd565b500161110c565b60016002016103d3565b6118ba6118b56080611119565b61074a565b63daeab4126118d65f6118cf600882906110cd565b500161110c565b6118ee60016118e760085f906110cd565b500161110c565b92803b15611964576119135f809461191e6119076100bd565b9788968795869461047f565b845260048401611135565b03925af1801561195f57611933575b5061152c565b611952905f3d8111611958575b61194a81836100e5565b810190611126565b5f61192d565b503d611940565b6104a8565b61047b565b61198e6119766008611004565b6119886119825f610686565b91610642565b14611087565b611538565b6119c860206119b26119ad6119a860c0610422565b610457565b61046f565b63b80777ea906119c06100bd565b93849261047f565b825281806119d8600482016104a3565b03915afa8015611a215761145e915f916119f3575b5061143d565b611a14915060203d8111611a1a575b611a0c81836100e5565b810190610485565b5f6119ed565b503d611a02565b6104a8565b611a2e610e5c565b565b60018060a01b031690565b611a47611a4c916103c2565b611a30565b90565b611a599054611a3b565b90565b90611a6d60018060a01b039161039b565b9181191691161790565b611a8090610463565b90565b90565b90611a9b611a96611aa292611a77565b611a83565b8254611a5c565b9055565b611aaf5f611a4f565b611ab9825f611a86565b90611aed611ae77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611a77565b91611a77565b91611af66100bd565b80611b00816104a3565b0390a3565b90565b611b14611b19916103c2565b611b05565b90565b611b269054611b08565b90565b90565b611b40611b3b611b4592611b29565b610359565b610642565b90565b611b526002611b2c565b90565b611b5f6001611b1c565b611b78611b72611b6d611b48565b610642565b91610642565b14611b9157611b8f611b88611b48565b6001610d83565b565b5f633ee5aeb560e01b815280611ba9600482016104a3565b0390fd5b611bbf611bb8610d57565b6001610d83565b56fe60806040526004361015610015575b36610a6157005b61001f5f3561011e565b806327d40299146101195780633183baac146101145780633a009a061461010f5780633ceaae7d1461010a578063470b9b1a146101055780634bd167c914610100578063697b5e62146100fb5780636c4c2060146100f6578063715018a6146100f157806380959721146100ec5780638da5cb5b146100e7578063a56ec6cd146100e2578063dc68cdfe146100dd578063e78cea92146100d8578063ee1c28b8146100d35763f2fde38b0361000e57610a2e565b6109db565b610997565b610912565b6108bb565b610768565b610733565b6106ae565b61067b565b610646565b6105b4565b610509565b610482565b610368565b6102b4565b61019e565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261013c57565b61012e565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b61017990610165565b90565b61018590610170565b9052565b919061019c905f6020850194019061017c565b565b346101ce576101ae366004610132565b6101ca6101b9610141565b6101c1610124565b91829182610189565b0390f35b61012a565b5f80fd5b5f80fd5b908160809103126101e95790565b6101d7565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102345781359167ffffffffffffffff831161022f57602001926001830284011161022a57565b6101f6565b6101f2565b6101ee565b61024281610170565b0361024957565b5f80fd5b9050359061025a82610239565b565b9060c0828203126102aa57610273815f84016101db565b92608083013567ffffffffffffffff81116102a557610297836102a29286016101fa565b93909460a00161024d565b90565b6101d3565b61012e565b5f0190565b346102e6576102d06102c736600461025c565b929190916116b0565b6102d8610124565b806102e2816102af565b0390f35b61012a565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61032661032161032b92610165565b61030f565b610165565b90565b61033790610312565b90565b6103439061032e565b90565b61034f9061033a565b9052565b9190610366905f60208501940190610346565b565b3461039857610378366004610132565b6103946103836102eb565b61038b610124565b91829182610353565b0390f35b61012a565b5f1c90565b90565b6103b16103b69161039d565b6103a2565b90565b6103c390546103a5565b90565b6002906103d45f83016103b9565b916103e1600182016103b9565b916103ee600283016103b9565b916103fb600382016103b9565b91610414600561040d600485016103b9565b93016103b9565b90565b90565b61042390610417565b9052565b919461046f6104799298979561046560a09661045b6104809a61045160c08a019e5f8b019061041a565b602089019061041a565b604087019061041a565b606085019061041a565b608083019061041a565b019061041a565b565b346104b957610492366004610132565b6104b561049d6103c6565b926104ac969496929192610124565b96879687610427565b0390f35b61012a565b7f000000000000000000000000000000000000000000000000000000000000000090565b151590565b6104f0906104e2565b9052565b9190610507905f602085019401906104e7565b565b3461053957610519366004610132565b6105356105246104be565b61052c610124565b918291826104f4565b0390f35b61012a565b1c90565b67ffffffffffffffff1690565b61055f906008610564930261053e565b610542565b90565b90610572915461054f565b90565b610582600a600890610567565b90565b67ffffffffffffffff1690565b61059b90610585565b9052565b91906105b2905f60208501940190610592565b565b346105e4576105c4366004610132565b6105e06105cf610575565b6105d7610124565b9182918261059f565b0390f35b61012a565b90565b6105fc906008610601930261053e565b6105e9565b90565b9061060f91546105ec565b90565b61061e60095f90610604565b90565b90565b61062d90610621565b9052565b9190610644905f60208501940190610624565b565b3461067657610656366004610132565b610672610661610612565b610669610124565b91829182610631565b0390f35b61012a565b346106a95761068b366004610132565b6106936122a9565b61069b610124565b806106a5816102af565b0390f35b61012a565b346106dc576106be366004610132565b6106c66122d8565b6106ce610124565b806106d8816102af565b0390f35b61012a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61070e9061032e565b90565b61071a90610705565b9052565b9190610731905f60208501940190610711565b565b3461076357610743366004610132565b61075f61074e6106e1565b610756610124565b9182918261071e565b0390f35b61012a565b3461079857610778366004610132565b610794610783612312565b61078b610124565b91829182610189565b0390f35b61012a565b6107a681610621565b036107ad57565b5f80fd5b905035906107be8261079d565b565b906020828203126107d9576107d6915f016107b1565b90565b61012e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610808816107f2565b8210156108225761081a6004916107f6565b910201905f90565b6107de565b600890610833826107f2565b81101561087957610843916107ff565b50906108505f83016103b9565b9161085d600182016103b9565b91610876600361086f600285016103b9565b93016103b9565b90565b5f80fd5b6108b26108b9946108a860609498979561089e608086019a5f87019061041a565b602085019061041a565b604083019061041a565b019061041a565b565b346108ef576108eb6108d66108d13660046107c0565b610827565b906108e2949294610124565b9485948561087d565b0390f35b61012a565b9060808282031261090d5761090a915f016101db565b90565b61012e565b346109405761092a6109253660046108f4565b612623565b610932610124565b8061093c816102af565b0390f35b61012a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6109729061032e565b90565b61097e90610969565b9052565b9190610995905f60208501940190610975565b565b346109c7576109a7366004610132565b6109c36109b2610945565b6109ba610124565b91829182610982565b0390f35b61012a565b6109d8600a5f90610567565b90565b34610a0b576109eb366004610132565b610a076109f66109cc565b6109fe610124565b9182918261059f565b0390f35b61012a565b90602082820312610a2957610a26915f0161024d565b90565b61012e565b34610a5c57610a46610a41366004610a10565b612693565b610a4e610124565b80610a58816102af565b0390f35b61012a565b5f80fd5b90610a79939291610a746126ab565b61132c565b610a81612710565b565b90565b610a9a610a95610a9f92610a83565b61030f565b610165565b90565b610aab90610a86565b90565b60209181520190565b5f7f72657761726420616464726573732063616e6e6f74206265207a65726f000000910152565b610aeb601d602092610aae565b610af481610ab7565b0190565b610b0d9060208101905f818303910152610ade565b90565b15610b1757565b610b1f610124565b62461bcd60e51b815280610b3560048201610af8565b0390fd5b5090565b90565b610b54610b4f610b5992610b3d565b61030f565b610621565b90565b5f7f696e76616c6964207369676e6174757265206c656e6774680000000000000000910152565b610b906018602092610aae565b610b9981610b5c565b0190565b610bb29060208101905f818303910152610b83565b90565b15610bbc57565b610bc4610124565b62461bcd60e51b815280610bda60048201610b9d565b0390fd5b90565b90565b610bf0610bf591610417565b610be1565b9052565b602081610c0b610c1393839695610be4565b018092610be4565b0190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610c3f90610c17565b810190811067ffffffffffffffff821117610c5957604052565b610c21565b60200190565b5190565b5f80fd5b90610c7f610c78610124565b9283610c35565b565b67ffffffffffffffff8111610c9f57610c9b602091610c17565b0190565b610c21565b90825f939282370152565b90929192610cc4610cbf82610c81565b610c6c565b93818552602085019082840111610ce057610cde92610ca4565b565b610c68565b610cf0913691610caf565b90565b5f80fd5b60e01b90565b610d06816104e2565b03610d0d57565b5f80fd5b90505190610d1e82610cfd565b565b90602082820312610d3957610d36915f01610d11565b90565b61012e565b610d46610124565b3d5f823e3d90fd5b5f7f696e76616c696420746565207369676e61747572650000000000000000000000910152565b610d826015602092610aae565b610d8b81610d4e565b0190565b610da49060208101905f818303910152610d75565b90565b15610dae57565b610db6610124565b62461bcd60e51b815280610dcc60048201610d8f565b0390fd5b610dd981610417565b03610de057565b5f80fd5b35610dee81610dd0565b90565b5f7f756e6578706563746564206c3120656e64206261746368206163630000000000910152565b610e25601b602092610aae565b610e2e81610df1565b0190565b610e479060208101905f818303910152610e18565b90565b15610e5157565b610e59610124565b62461bcd60e51b815280610e6f60048201610e32565b0390fd5b610e87610e82610e8c92610a83565b61030f565b610621565b90565b6001610e9b9101610621565b90565b90565b5f7f617373657274696f6e20616c7265616479206578697374730000000000000000910152565b610ed56018602092610aae565b610ede81610ea1565b0190565b610ef79060208101905f818303910152610ec8565b90565b15610f0157565b610f09610124565b62461bcd60e51b815280610f1f60048201610ee2565b0390fd5b610f37610f32610f3c92610621565b61030f565b610585565b90565b60401c90565b610f51610f5691610f3f565b610542565b90565b610f639054610f45565b90565b634e487b7160e01b5f52601160045260245ffd5b610f86610f8c91610585565b91610585565b019067ffffffffffffffff8211610f9f57565b610f66565b5f1b90565b90610fbc67ffffffffffffffff91610fa4565b9181191691161790565b610fda610fd5610fdf92610585565b61030f565b610585565b90565b90565b90610ffa610ff561100192610fc6565b610fe2565b8254610fa9565b9055565b90565b5f5260205f2090565b5490565b61101e81611011565b82101561103857611030600491611008565b910201905f90565b6107de565b634e487b7160e01b5f525f60045260245ffd5b9061105c5f1991610fa4565b9181191691161790565b61106f90610417565b90565b61107b9061039d565b90565b9061109361108e61109a92611066565b611072565b8254611050565b9055565b906110fb60606003611101946110c15f82016110bb5f8801610de4565b9061107e565b6110da600182016110d460208801610de4565b9061107e565b6110f3600282016110ed60408801610de4565b9061107e565b019201610de4565b9061107e565b565b9190611114576111129161109e565b565b61103d565b1b90565b908154916801000000000000000083101561114d578261114591600161114b95018155611015565b90611103565b565b610c21565b90565b61116961116461116e92611152565b61030f565b610621565b90565b90565b61118861118361118d92611171565b61030f565b610621565b90565b61119c6111a19161039d565b6105e9565b90565b6111ae9054611190565b90565b6111c06111c691939293610621565b92610621565b82018092116111d157565b610f66565b6111ea6111e56111ef92610621565b61030f565b610621565b90565b90565b9061120a611205611211926111d6565b6111f2565b8254611050565b9055565b61121e90610312565b90565b61122a90611215565b90565b6112369061032e565b90565b6112429061032e565b90565b905090565b6112555f8092611245565b0190565b6112629061124a565b90565b9061127761127283610c81565b610c6c565b918252565b606090565b3d5f1461129c576112913d611265565b903d5f602084013e5b565b6112a461127c565b9061129a565b5f7f7061796d656e74206661696c6564000000000000000000000000000000000000910152565b6112de600e602092610aae565b6112e7816112aa565b0190565b6113009060208101905f8183039101526112d1565b90565b1561130a57565b611312610124565b62461bcd60e51b815280611328600482016112eb565b0390fd5b929060206114419195939561135c8461135561134f61134a5f610aa2565b610170565b91610170565b1415610b10565b61138361136a828990610b39565b61137d6113776041610b40565b91610621565b14610bb5565b61138c8661275c565b966114366114216113a56113a06002610bde565b612828565b6113ce8b916113c06113b5610124565b9384928a8401610bf9565b888201810382520382610c35565b6113e06113da82610c64565b91610c5e565b209361141b61140e7f000000000000000000000000000000000000000000000000000000000000000061033a565b94637217efcd9692610ce5565b906128ba565b9261142a610124565b95869485938493610cf7565b835260048301610189565b03915afa80156116ab5761145c915f9161167d575b50610da7565b6114867f0000000000000000000000000000000000000000000000000000000000000000156104e2565b8015611647575b61149690610e4a565b61149f5f610e73565b5b806114bc6114b66114b160086107f2565b610621565b91610621565b101561150957611504906114ff866114f86114f26114ed6114e86114e2600888906107ff565b50610e9e565b6128dc565b610417565b91610417565b1415610efa565b610e8f565b6114a0565b509161154291935061151b60086107f2565b61152d6115275f610e73565b91610621565b1461161c575b61153d6008611005565b61111d565b61154c60086107f2565b61155f6115596002611155565b91610621565b14611568575b50565b5f806115e76115e26116169461159a6115936115846001611174565b61158e60096111a4565b6111b1565b60096111f5565b6115a460096111a4565b6115da7f37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7916115d1610124565b91829182610631565b0390a1611221565b61122d565b6115f030611239565b316115f9610124565b908161160481611259565b03925af1611610611281565b50611303565b5f611565565b61164261163b61162b42610f23565b611635600a610f59565b90610f7a565b600a610fe5565b611533565b5061149661165760608501610de4565b61167561166f61166a60056002016103b9565b610417565b91610417565b14905061148d565b61169e915060203d81116116a4575b6116968183610c35565b810190610d20565b5f611456565b503d61168c565b610d3e565b906116bc939291610a65565b565b6116c66126ab565b6116ce611bd4565b6116d6612710565b565b6116e190610312565b90565b6116ed906116d8565b90565b6116f99061032e565b90565b61170581610585565b0361170c57565b5f80fd5b9050519061171d826116fc565b565b9060208282031261173857611735915f01611710565b90565b61012e565b61174961174e9161039d565b610542565b90565b61175b905461173d565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6117b8603c604092610aae565b6117c18161175e565b0190565b6117da9060208101905f8183039101526117ab565b90565b156117e457565b6117ec610124565b62461bcd60e51b815280611802600482016117c5565b0390fd5b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6118606033604092610aae565b61186981611806565b0190565b6118829060208101905f818303910152611853565b90565b1561188c57565b611894610124565b62461bcd60e51b8152806118aa6004820161186d565b0390fd5b5f9103126118b857565b61012e565b9160206118de9294936118d760408201965f83019061041a565b019061041a565b565b6118ef6118f591939293610621565b92610621565b91611901838202610621565b92818404149015171561191057565b610f66565b6119209060046118e0565b90565b9190600861193e9102916119385f1984611119565b92611119565b9181191691161790565b919061195e61195961196693611066565b611072565b908354611923565b9055565b5f90565b6119809161197a61196a565b91611948565b565b5f60036119b5926119958380830161196e565b6119a2836001830161196e565b6119af836002830161196e565b0161196e565b565b905f036119c9576119c790611982565b565b61103d565b5b8181106119da575050565b806119e75f6004936119b7565b016119cf565b90918281106119fc575b505050565b611a1a611a14611a0e611a2595611915565b92611915565b926107f6565b9182019101906119ce565b5f80806119f7565b90680100000000000000008111611a565781611a4b611a54936107f2565b908281556119ed565b565b610c21565b5f611a6591611a2d565b565b905f03611a7957611a7790611a5b565b565b61103d565b90505190611a8b8261079d565b565b90602082820312611aa657611aa3915f01611a7e565b90565b61012e565b611aba611ac091939293610621565b92610621565b8203918211611acb57565b610f66565b90505190611add82610dd0565b565b90602082820312611af857611af5915f01611ad0565b90565b61012e565b611b0690610312565b90565b611b1290611afd565b90565b611b1e90610417565b9052565b9060a0611bb56005611bbd94611b46611b3d5f8301546103a5565b5f870190611b15565b611b60611b5660018301546103a5565b6020870190611b15565b611b7a611b7060028301546103a5565b6040870190611b15565b611b94611b8a60038301546103a5565b6060870190611b15565b611bae611ba460048301546103a5565b6080870190611b15565b01546103a5565b910190611b15565b565b9190611bd2905f60c08501940190611b22565b565b7f00000000000000000000000000000000000000000000000000000000000000005f146121ff57611c29611c0742610f23565b5b611c23611c1d611c18600a611751565b610585565b91610585565b116117dd565b611c4f611c48611c3842610f23565b611c42600a610f59565b90610f7a565b600a610fe5565b611c5960086107f2565b611c6c611c666001611174565b91610621565b145f146121d557611c98611c8e6003611c8760085f906107ff565b50016103b9565b600460020161107e565b611cbc611cb36002611cac60085f906107ff565b50016103b9565b6002800161107e565b611cc960016002016103b9565b611cf1611ceb611ce65f611cdf600882906107ff565b50016103b9565b610417565b91610417565b036120d9575b611d025f6008611a67565b5b611d2c7f0000000000000000000000000000000000000000000000000000000000000000610969565b611d7563d5719dc26020611d5f7f0000000000000000000000000000000000000000000000000000000000000000610969565b63eca067ad90611d6d610124565b948592610cf7565b82528180611d85600482016102af565b03915afa9283156120d457611dca611db5611dd5956020955f916120a7575b50611daf6001611174565b90611aab565b92611dbe610124565b95869485938493610cf7565b835260048301610631565b03915afa80156120a257611df5915f91612074575b50600360020161107e565b7f00000000000000000000000000000000000000000000000000000000000000005f14611fc057611e4d611e487f0000000000000000000000000000000000000000000000000000000000000000611b09565b610969565b611e9d6316bf55796020611e88611e837f0000000000000000000000000000000000000000000000000000000000000000611b09565b610969565b6284120c90611e95610124565b948592610cf7565b82528180611ead600482016102af565b03915afa928315611fbb57611ef2611edd611efd956020955f91611f8e575b50611ed76001611174565b90611aab565b92611ee6610124565b95869485938493610cf7565b835260048301610631565b03915afa8015611f8957611f1d915f91611f5b575b50600560020161107e565b5b6002611f567f55232299d83faf4dc2c32e228af37632bca7fa6dbc03b41224c100c6c9dca34991611f4d610124565b91829182611bbf565b0390a1565b611f7c915060203d8111611f82575b611f748183610c35565b810190611adf565b5f611f12565b503d611f6a565b610d3e565b611fae9150863d8111611fb4575b611fa68183610c35565b810190611a8d565b5f611ecc565b503d611f9c565b610d3e565b61200c6020611ff6611ff17f00000000000000000000000000000000000000000000000000000000000000006116e4565b6116f0565b6309bd5a6090612004610124565b938492610cf7565b8252818061201c600482016102af565b03915afa801561206f5761203c915f91612041575b50600560020161107e565b611f1e565b612062915060203d8111612068575b61205a8183610c35565b810190611adf565b5f612031565b503d612050565b610d3e565b612095915060203d811161209b575b61208d8183610c35565b810190611adf565b5f611dea565b503d612083565b610d3e565b6120c79150863d81116120cd575b6120bf8183610c35565b810190611a8d565b5f611da4565b503d6120b5565b610d3e565b6120fd6120f35f6120ec600882906107ff565b50016103b9565b600160020161107e565b6121267f0000000000000000000000000000000000000000000000000000000000000000610705565b63daeab4126121425f61213b600882906107ff565b50016103b9565b61215a600161215360085f906107ff565b50016103b9565b92803b156121d05761217f5f809461218a612173610124565b97889687958694610cf7565b8452600484016118bd565b03925af180156121cb5761219f575b50611cf7565b6121be905f3d81116121c4575b6121b68183610c35565b8101906118ae565b5f612199565b503d6121ac565b610d3e565b610cf3565b6121fa6121e260086107f2565b6121f46121ee5f610e73565b91610621565b14611885565b611d03565b61224b60206122356122307f00000000000000000000000000000000000000000000000000000000000000006116e4565b6116f0565b63b80777ea90612243610124565b938492610cf7565b8252818061225b600482016102af565b03915afa80156122a457611c29915f91612276575b50611c08565b612297915060203d811161229d575b61228f8183610c35565b81019061171f565b5f612270565b503d612285565b610d3e565b6122b16116be565b565b6122bb612955565b6122c36122c5565b565b6122d66122d15f610aa2565b6129ed565b565b6122e06122b3565b565b5f90565b60018060a01b031690565b6122fd6123029161039d565b6122e6565b90565b61230f90546122f1565b90565b61231a6122e2565b506123245f612305565b90565b61233890612333612955565b61233a565b565b61234b906123466126ab565b6124eb565b612353612710565b565b5f7f6368616c6c656e676520646f6573206e6f742065786973740000000000000000910152565b6123896018602092610aae565b61239281612355565b0190565b6123ab9060208101905f81830391015261237c565b90565b156123b557565b6123bd610124565b62461bcd60e51b8152806123d360048201612396565b0390fd5b6123eb6123e66123f092610a83565b61030f565b610585565b90565b9050359061240082610dd0565b565b506124119060208101906123f3565b90565b90606061247361247b9361243661242d5f830183612402565b5f860190611b15565b6124506124466020830183612402565b6020860190611b15565b61246a6124606040830183612402565b6040860190611b15565b82810190612402565b910190611b15565b565b9190612490905f60808501940190612414565b565b5f7f617373657274696f6e206e6f7420666f756e6400000000000000000000000000910152565b6124c66013602092610aae565b6124cf81612492565b0190565b6124e89060208101905f8183039101526124b9565b90565b6125116124f860086107f2565b61250b6125056001611174565b91610621565b116123ae565b61251a8161275c565b906125245f610e73565b5b8061254161253b61253660086107f2565b610621565b91610621565b1015612601578261257661257061256b612566612560600887906107ff565b50610e9e565b6128dc565b610417565b91610417565b146125895761258490610e8f565b612525565b5090506125975f6008611a67565b6125ab6125a46008611005565b829061111d565b6125be6125b75f6123d7565b600a610fe5565b6125c66122a9565b6125fc7f2020542b6e6b951d4c0736eed2a4d762d20bb1ba579f99feffae9b1dea240883916125f3610124565b9182918261247d565b0390a1565b612609610124565b62461bcd60e51b81528061261f600482016124d3565b0390fd5b61262c90612327565b565b61263f9061263a612955565b612641565b565b8061265c6126566126515f610aa2565b610170565b91610170565b1461266c5761266a906129ed565b565b61268f6126785f610aa2565b5f918291631e4fbdf760e01b835260048301610189565b0390fd5b61269c9061262e565b565b6126a86002611155565b90565b6126b560016111a4565b6126ce6126c86126c361269e565b610621565b91610621565b146126e7576126e56126de61269e565b60016111f5565b565b5f633ee5aeb560e01b8152806126ff600482016102af565b0390fd5b61270d6001611174565b90565b61272261271b612703565b60016111f5565b565b926127506020612758946127488288612740829b9a8399610be4565b018092610be4565b018092610be4565b018092610be4565b0190565b61276461196a565b506127bf6127735f8301610de4565b6127b061278260208501610de4565b9361279b606061279460408401610de4565b9201610de4565b906127a4610124565b95869460208601612724565b60208201810382520382610c35565b6127d16127cb82610c64565b91610c5e565b2090565b612824946128146020809998959661280c82809961280482896127fc829b61281c9d610be4565b018092610be4565b018092610be4565b018092610be4565b018092610be4565b018092610be4565b0190565b61283061196a565b506128a461283f5f83016103b9565b61289561284e600185016103b9565b9361285b600282016103b9565b90612868600382016103b9565b6128806005612879600485016103b9565b93016103b9565b92612889610124565b978896602088016127d5565b60208201810382520382610c35565b6128b66128b082610c64565b91610c5e565b2090565b6128d9916128d0916128ca6122e2565b50612a70565b90929192612b6d565b90565b6128e461196a565b5061293f6128f35f83016103b9565b612930612902600185016103b9565b9361291b6003612914600284016103b9565b92016103b9565b90612924610124565b95869460208601612724565b60208201810382520382610c35565b61295161294b82610c64565b91610c5e565b2090565b61295d612312565b61297661297061296b612c3e565b610170565b91610170565b0361297d57565b61299f612988612c3e565b5f91829163118cdaa760e01b835260048301610189565b0390fd5b906129b460018060a01b0391610fa4565b9181191691161790565b6129c79061032e565b90565b90565b906129e26129dd6129e9926129be565b6129ca565b82546129a3565b9055565b6129f65f612305565b612a00825f6129cd565b90612a34612a2e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936129be565b916129be565b91612a3d610124565b80612a47816102af565b0390a3565b5f90565b612a64612a5f612a6992610621565b610fa4565b610417565b90565b5f90565b919091612a7b6122e2565b50612a84612a4c565b50612a8d61196a565b50612a9783610c64565b612aaa612aa46041610b40565b91610621565b145f14612af157612aea9192612abe61196a565b50612ac761196a565b50612ad0612a6c565b506020810151606060408301519201515f1a909192612cd7565b9192909190565b50612afb5f610aa2565b90612b0f612b0a600294610c64565b612a50565b91929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612b3357565b612b15565b90612b4282612b29565b565b9190612b57905f6020850194019061041a565b565b612b65612b6a9161039d565b6111d6565b90565b80612b80612b7a5f612b38565b91612b38565b145f14612b8b575050565b80612b9f612b996001612b38565b91612b38565b145f14612bc2575f63f645eedf60e01b815280612bbe600482016102af565b0390fd5b80612bd6612bd06002612b38565b91612b38565b145f14612c0457612c00612be983612b59565b5f91829163fce698f760e01b835260048301610631565b0390fd5b612c17612c116003612b38565b91612b38565b14612c1f5750565b612c3a905f9182916335e2f38360e21b835260048301612b44565b0390fd5b612c466122e2565b503390565b90565b612c62612c5d612c6792612c4b565b61030f565b610621565b90565b60ff1690565b612c7990612c6a565b9052565b612cb2612cb994612ca8606094989795612c9e608086019a5f87019061041a565b6020850190612c70565b604083019061041a565b019061041a565b565b612ccf612cca612cd492610a83565b610fa4565b610417565b90565b939293612ce26122e2565b50612ceb612a4c565b50612cf461196a565b50612cfe85612b59565b612d30612d2a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612c4e565b91610621565b11612dbd5790612d53602094955f94939293612d4a610124565b94859485612c7d565b838052039060015afa15612db857612d6b5f51610fa4565b80612d86612d80612d7b5f610aa2565b610170565b91610170565b14612d9c575f91612d965f612cbb565b91929190565b50612da65f610aa2565b600191612db25f612cbb565b91929190565b610d3e565b505050612dc95f610aa2565b906003929192919056",
}

// TeemoduleABI is the input ABI used to generate the binding from.
// Deprecated: Use TeemoduleMetaData.ABI instead.
var TeemoduleABI = TeemoduleMetaData.ABI

// TeemoduleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TeemoduleMetaData.Bin instead.
var TeemoduleBin = TeemoduleMetaData.Bin

// DeployTeemodule deploys a new Ethereum contract, binding an instance of Teemodule to it.
func DeployTeemodule(auth *bind.TransactOpts, backend bind.ContractBackend, poster_ common.Address, bridge_ common.Address, configHash_ [32]byte, appStartBlockHash_ [32]byte, seqStartBlockHash_ [32]byte, l1StartBatchAcc_ [32]byte, l1BlockOrBridge_ common.Address, isL1Chain_ bool, challengeWindowDuration_ uint64, teeKeyManager_ common.Address) (common.Address, *types.Transaction, *Teemodule, error) {
	parsed, err := TeemoduleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TeemoduleBin), backend, poster_, bridge_, configHash_, appStartBlockHash_, seqStartBlockHash_, l1StartBatchAcc_, l1BlockOrBridge_, isL1Chain_, challengeWindowDuration_, teeKeyManager_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Teemodule{TeemoduleCaller: TeemoduleCaller{contract: contract}, TeemoduleTransactor: TeemoduleTransactor{contract: contract}, TeemoduleFilterer: TeemoduleFilterer{contract: contract}}, nil
}

// Teemodule is an auto generated Go binding around an Ethereum contract.
type Teemodule struct {
	TeemoduleCaller     // Read-only binding to the contract
	TeemoduleTransactor // Write-only binding to the contract
	TeemoduleFilterer   // Log filterer for contract events
}

// TeemoduleCaller is an auto generated read-only Go binding around an Ethereum contract.
type TeemoduleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TeemoduleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TeemoduleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TeemoduleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TeemoduleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TeemoduleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TeemoduleSession struct {
	Contract     *Teemodule        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TeemoduleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TeemoduleCallerSession struct {
	Contract *TeemoduleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// TeemoduleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TeemoduleTransactorSession struct {
	Contract     *TeemoduleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TeemoduleRaw is an auto generated low-level Go binding around an Ethereum contract.
type TeemoduleRaw struct {
	Contract *Teemodule // Generic contract binding to access the raw methods on
}

// TeemoduleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TeemoduleCallerRaw struct {
	Contract *TeemoduleCaller // Generic read-only contract binding to access the raw methods on
}

// TeemoduleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TeemoduleTransactorRaw struct {
	Contract *TeemoduleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTeemodule creates a new instance of Teemodule, bound to a specific deployed contract.
func NewTeemodule(address common.Address, backend bind.ContractBackend) (*Teemodule, error) {
	contract, err := bindTeemodule(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Teemodule{TeemoduleCaller: TeemoduleCaller{contract: contract}, TeemoduleTransactor: TeemoduleTransactor{contract: contract}, TeemoduleFilterer: TeemoduleFilterer{contract: contract}}, nil
}

// NewTeemoduleCaller creates a new read-only instance of Teemodule, bound to a specific deployed contract.
func NewTeemoduleCaller(address common.Address, caller bind.ContractCaller) (*TeemoduleCaller, error) {
	contract, err := bindTeemodule(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TeemoduleCaller{contract: contract}, nil
}

// NewTeemoduleTransactor creates a new write-only instance of Teemodule, bound to a specific deployed contract.
func NewTeemoduleTransactor(address common.Address, transactor bind.ContractTransactor) (*TeemoduleTransactor, error) {
	contract, err := bindTeemodule(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TeemoduleTransactor{contract: contract}, nil
}

// NewTeemoduleFilterer creates a new log filterer instance of Teemodule, bound to a specific deployed contract.
func NewTeemoduleFilterer(address common.Address, filterer bind.ContractFilterer) (*TeemoduleFilterer, error) {
	contract, err := bindTeemodule(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TeemoduleFilterer{contract: contract}, nil
}

// bindTeemodule binds a generic wrapper to an already deployed contract.
func bindTeemodule(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TeemoduleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Teemodule *TeemoduleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Teemodule.Contract.TeemoduleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Teemodule *TeemoduleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.Contract.TeemoduleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Teemodule *TeemoduleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Teemodule.Contract.TeemoduleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Teemodule *TeemoduleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Teemodule.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Teemodule *TeemoduleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Teemodule *TeemoduleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Teemodule.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Teemodule *TeemoduleCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Teemodule *TeemoduleSession) Bridge() (common.Address, error) {
	return _Teemodule.Contract.Bridge(&_Teemodule.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Teemodule *TeemoduleCallerSession) Bridge() (common.Address, error) {
	return _Teemodule.Contract.Bridge(&_Teemodule.CallOpts)
}

// ChallengeWindowDuration is a free data retrieval call binding the contract method 0x4bd167c9.
//
// Solidity: function challengeWindowDuration() view returns(uint64)
func (_Teemodule *TeemoduleCaller) ChallengeWindowDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "challengeWindowDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeWindowDuration is a free data retrieval call binding the contract method 0x4bd167c9.
//
// Solidity: function challengeWindowDuration() view returns(uint64)
func (_Teemodule *TeemoduleSession) ChallengeWindowDuration() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowDuration(&_Teemodule.CallOpts)
}

// ChallengeWindowDuration is a free data retrieval call binding the contract method 0x4bd167c9.
//
// Solidity: function challengeWindowDuration() view returns(uint64)
func (_Teemodule *TeemoduleCallerSession) ChallengeWindowDuration() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowDuration(&_Teemodule.CallOpts)
}

// ChallengeWindowEnd is a free data retrieval call binding the contract method 0xee1c28b8.
//
// Solidity: function challengeWindowEnd() view returns(uint64)
func (_Teemodule *TeemoduleCaller) ChallengeWindowEnd(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "challengeWindowEnd")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeWindowEnd is a free data retrieval call binding the contract method 0xee1c28b8.
//
// Solidity: function challengeWindowEnd() view returns(uint64)
func (_Teemodule *TeemoduleSession) ChallengeWindowEnd() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowEnd(&_Teemodule.CallOpts)
}

// ChallengeWindowEnd is a free data retrieval call binding the contract method 0xee1c28b8.
//
// Solidity: function challengeWindowEnd() view returns(uint64)
func (_Teemodule *TeemoduleCallerSession) ChallengeWindowEnd() (uint64, error) {
	return _Teemodule.Contract.ChallengeWindowEnd(&_Teemodule.CallOpts)
}

// IsL1Chain is a free data retrieval call binding the contract method 0x470b9b1a.
//
// Solidity: function isL1Chain() view returns(bool)
func (_Teemodule *TeemoduleCaller) IsL1Chain(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "isL1Chain")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsL1Chain is a free data retrieval call binding the contract method 0x470b9b1a.
//
// Solidity: function isL1Chain() view returns(bool)
func (_Teemodule *TeemoduleSession) IsL1Chain() (bool, error) {
	return _Teemodule.Contract.IsL1Chain(&_Teemodule.CallOpts)
}

// IsL1Chain is a free data retrieval call binding the contract method 0x470b9b1a.
//
// Solidity: function isL1Chain() view returns(bool)
func (_Teemodule *TeemoduleCallerSession) IsL1Chain() (bool, error) {
	return _Teemodule.Contract.IsL1Chain(&_Teemodule.CallOpts)
}

// L1BlockOrBridge is a free data retrieval call binding the contract method 0x27d40299.
//
// Solidity: function l1BlockOrBridge() view returns(address)
func (_Teemodule *TeemoduleCaller) L1BlockOrBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "l1BlockOrBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1BlockOrBridge is a free data retrieval call binding the contract method 0x27d40299.
//
// Solidity: function l1BlockOrBridge() view returns(address)
func (_Teemodule *TeemoduleSession) L1BlockOrBridge() (common.Address, error) {
	return _Teemodule.Contract.L1BlockOrBridge(&_Teemodule.CallOpts)
}

// L1BlockOrBridge is a free data retrieval call binding the contract method 0x27d40299.
//
// Solidity: function l1BlockOrBridge() view returns(address)
func (_Teemodule *TeemoduleCallerSession) L1BlockOrBridge() (common.Address, error) {
	return _Teemodule.Contract.L1BlockOrBridge(&_Teemodule.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Teemodule *TeemoduleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Teemodule *TeemoduleSession) Owner() (common.Address, error) {
	return _Teemodule.Contract.Owner(&_Teemodule.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Teemodule *TeemoduleCallerSession) Owner() (common.Address, error) {
	return _Teemodule.Contract.Owner(&_Teemodule.CallOpts)
}

// PendingAssertions is a free data retrieval call binding the contract method 0xa56ec6cd.
//
// Solidity: function pendingAssertions(uint256 ) view returns(bytes32 appBlockHash, bytes32 appSendRoot, bytes32 seqBlockHash, bytes32 l1BatchAcc)
func (_Teemodule *TeemoduleCaller) PendingAssertions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	AppBlockHash [32]byte
	AppSendRoot  [32]byte
	SeqBlockHash [32]byte
	L1BatchAcc   [32]byte
}, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "pendingAssertions", arg0)

	outstruct := new(struct {
		AppBlockHash [32]byte
		AppSendRoot  [32]byte
		SeqBlockHash [32]byte
		L1BatchAcc   [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AppBlockHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.AppSendRoot = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SeqBlockHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.L1BatchAcc = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// PendingAssertions is a free data retrieval call binding the contract method 0xa56ec6cd.
//
// Solidity: function pendingAssertions(uint256 ) view returns(bytes32 appBlockHash, bytes32 appSendRoot, bytes32 seqBlockHash, bytes32 l1BatchAcc)
func (_Teemodule *TeemoduleSession) PendingAssertions(arg0 *big.Int) (struct {
	AppBlockHash [32]byte
	AppSendRoot  [32]byte
	SeqBlockHash [32]byte
	L1BatchAcc   [32]byte
}, error) {
	return _Teemodule.Contract.PendingAssertions(&_Teemodule.CallOpts, arg0)
}

// PendingAssertions is a free data retrieval call binding the contract method 0xa56ec6cd.
//
// Solidity: function pendingAssertions(uint256 ) view returns(bytes32 appBlockHash, bytes32 appSendRoot, bytes32 seqBlockHash, bytes32 l1BatchAcc)
func (_Teemodule *TeemoduleCallerSession) PendingAssertions(arg0 *big.Int) (struct {
	AppBlockHash [32]byte
	AppSendRoot  [32]byte
	SeqBlockHash [32]byte
	L1BatchAcc   [32]byte
}, error) {
	return _Teemodule.Contract.PendingAssertions(&_Teemodule.CallOpts, arg0)
}

// Poster is a free data retrieval call binding the contract method 0x80959721.
//
// Solidity: function poster() view returns(address)
func (_Teemodule *TeemoduleCaller) Poster(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "poster")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Poster is a free data retrieval call binding the contract method 0x80959721.
//
// Solidity: function poster() view returns(address)
func (_Teemodule *TeemoduleSession) Poster() (common.Address, error) {
	return _Teemodule.Contract.Poster(&_Teemodule.CallOpts)
}

// Poster is a free data retrieval call binding the contract method 0x80959721.
//
// Solidity: function poster() view returns(address)
func (_Teemodule *TeemoduleCallerSession) Poster() (common.Address, error) {
	return _Teemodule.Contract.Poster(&_Teemodule.CallOpts)
}

// TeeHackCount is a free data retrieval call binding the contract method 0x697b5e62.
//
// Solidity: function teeHackCount() view returns(uint256)
func (_Teemodule *TeemoduleCaller) TeeHackCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "teeHackCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TeeHackCount is a free data retrieval call binding the contract method 0x697b5e62.
//
// Solidity: function teeHackCount() view returns(uint256)
func (_Teemodule *TeemoduleSession) TeeHackCount() (*big.Int, error) {
	return _Teemodule.Contract.TeeHackCount(&_Teemodule.CallOpts)
}

// TeeHackCount is a free data retrieval call binding the contract method 0x697b5e62.
//
// Solidity: function teeHackCount() view returns(uint256)
func (_Teemodule *TeemoduleCallerSession) TeeHackCount() (*big.Int, error) {
	return _Teemodule.Contract.TeeHackCount(&_Teemodule.CallOpts)
}

// TeeKeyManager is a free data retrieval call binding the contract method 0x3a009a06.
//
// Solidity: function teeKeyManager() view returns(address)
func (_Teemodule *TeemoduleCaller) TeeKeyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "teeKeyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TeeKeyManager is a free data retrieval call binding the contract method 0x3a009a06.
//
// Solidity: function teeKeyManager() view returns(address)
func (_Teemodule *TeemoduleSession) TeeKeyManager() (common.Address, error) {
	return _Teemodule.Contract.TeeKeyManager(&_Teemodule.CallOpts)
}

// TeeKeyManager is a free data retrieval call binding the contract method 0x3a009a06.
//
// Solidity: function teeKeyManager() view returns(address)
func (_Teemodule *TeemoduleCallerSession) TeeKeyManager() (common.Address, error) {
	return _Teemodule.Contract.TeeKeyManager(&_Teemodule.CallOpts)
}

// TeeTrustedInput is a free data retrieval call binding the contract method 0x3ceaae7d.
//
// Solidity: function teeTrustedInput() view returns(bytes32 configHash, bytes32 appStartBlockHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBatchAcc, bytes32 l1EndHash)
func (_Teemodule *TeemoduleCaller) TeeTrustedInput(opts *bind.CallOpts) (struct {
	ConfigHash           [32]byte
	AppStartBlockHash    [32]byte
	SeqStartBlockHash    [32]byte
	SetDelayedMessageAcc [32]byte
	L1StartBatchAcc      [32]byte
	L1EndHash            [32]byte
}, error) {
	var out []interface{}
	err := _Teemodule.contract.Call(opts, &out, "teeTrustedInput")

	outstruct := new(struct {
		ConfigHash           [32]byte
		AppStartBlockHash    [32]byte
		SeqStartBlockHash    [32]byte
		SetDelayedMessageAcc [32]byte
		L1StartBatchAcc      [32]byte
		L1EndHash            [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.AppStartBlockHash = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SeqStartBlockHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.SetDelayedMessageAcc = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.L1StartBatchAcc = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.L1EndHash = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// TeeTrustedInput is a free data retrieval call binding the contract method 0x3ceaae7d.
//
// Solidity: function teeTrustedInput() view returns(bytes32 configHash, bytes32 appStartBlockHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBatchAcc, bytes32 l1EndHash)
func (_Teemodule *TeemoduleSession) TeeTrustedInput() (struct {
	ConfigHash           [32]byte
	AppStartBlockHash    [32]byte
	SeqStartBlockHash    [32]byte
	SetDelayedMessageAcc [32]byte
	L1StartBatchAcc      [32]byte
	L1EndHash            [32]byte
}, error) {
	return _Teemodule.Contract.TeeTrustedInput(&_Teemodule.CallOpts)
}

// TeeTrustedInput is a free data retrieval call binding the contract method 0x3ceaae7d.
//
// Solidity: function teeTrustedInput() view returns(bytes32 configHash, bytes32 appStartBlockHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBatchAcc, bytes32 l1EndHash)
func (_Teemodule *TeemoduleCallerSession) TeeTrustedInput() (struct {
	ConfigHash           [32]byte
	AppStartBlockHash    [32]byte
	SeqStartBlockHash    [32]byte
	SetDelayedMessageAcc [32]byte
	L1StartBatchAcc      [32]byte
	L1EndHash            [32]byte
}, error) {
	return _Teemodule.Contract.TeeTrustedInput(&_Teemodule.CallOpts)
}

// CloseChallengeWindow is a paid mutator transaction binding the contract method 0x6c4c2060.
//
// Solidity: function closeChallengeWindow() returns()
func (_Teemodule *TeemoduleTransactor) CloseChallengeWindow(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "closeChallengeWindow")
}

// CloseChallengeWindow is a paid mutator transaction binding the contract method 0x6c4c2060.
//
// Solidity: function closeChallengeWindow() returns()
func (_Teemodule *TeemoduleSession) CloseChallengeWindow() (*types.Transaction, error) {
	return _Teemodule.Contract.CloseChallengeWindow(&_Teemodule.TransactOpts)
}

// CloseChallengeWindow is a paid mutator transaction binding the contract method 0x6c4c2060.
//
// Solidity: function closeChallengeWindow() returns()
func (_Teemodule *TeemoduleTransactorSession) CloseChallengeWindow() (*types.Transaction, error) {
	return _Teemodule.Contract.CloseChallengeWindow(&_Teemodule.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Teemodule *TeemoduleTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Teemodule *TeemoduleSession) RenounceOwnership() (*types.Transaction, error) {
	return _Teemodule.Contract.RenounceOwnership(&_Teemodule.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Teemodule *TeemoduleTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Teemodule.Contract.RenounceOwnership(&_Teemodule.TransactOpts)
}

// ResolveChallenge is a paid mutator transaction binding the contract method 0xdc68cdfe.
//
// Solidity: function resolveChallenge((bytes32,bytes32,bytes32,bytes32) assertion) returns()
func (_Teemodule *TeemoduleTransactor) ResolveChallenge(opts *bind.TransactOpts, assertion PendingAssertion) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "resolveChallenge", assertion)
}

// ResolveChallenge is a paid mutator transaction binding the contract method 0xdc68cdfe.
//
// Solidity: function resolveChallenge((bytes32,bytes32,bytes32,bytes32) assertion) returns()
func (_Teemodule *TeemoduleSession) ResolveChallenge(assertion PendingAssertion) (*types.Transaction, error) {
	return _Teemodule.Contract.ResolveChallenge(&_Teemodule.TransactOpts, assertion)
}

// ResolveChallenge is a paid mutator transaction binding the contract method 0xdc68cdfe.
//
// Solidity: function resolveChallenge((bytes32,bytes32,bytes32,bytes32) assertion) returns()
func (_Teemodule *TeemoduleTransactorSession) ResolveChallenge(assertion PendingAssertion) (*types.Transaction, error) {
	return _Teemodule.Contract.ResolveChallenge(&_Teemodule.TransactOpts, assertion)
}

// SubmitAssertion is a paid mutator transaction binding the contract method 0x3183baac.
//
// Solidity: function submitAssertion((bytes32,bytes32,bytes32,bytes32) assertion, bytes signature, address rewardAddr) returns()
func (_Teemodule *TeemoduleTransactor) SubmitAssertion(opts *bind.TransactOpts, assertion PendingAssertion, signature []byte, rewardAddr common.Address) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "submitAssertion", assertion, signature, rewardAddr)
}

// SubmitAssertion is a paid mutator transaction binding the contract method 0x3183baac.
//
// Solidity: function submitAssertion((bytes32,bytes32,bytes32,bytes32) assertion, bytes signature, address rewardAddr) returns()
func (_Teemodule *TeemoduleSession) SubmitAssertion(assertion PendingAssertion, signature []byte, rewardAddr common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.SubmitAssertion(&_Teemodule.TransactOpts, assertion, signature, rewardAddr)
}

// SubmitAssertion is a paid mutator transaction binding the contract method 0x3183baac.
//
// Solidity: function submitAssertion((bytes32,bytes32,bytes32,bytes32) assertion, bytes signature, address rewardAddr) returns()
func (_Teemodule *TeemoduleTransactorSession) SubmitAssertion(assertion PendingAssertion, signature []byte, rewardAddr common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.SubmitAssertion(&_Teemodule.TransactOpts, assertion, signature, rewardAddr)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Teemodule *TeemoduleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Teemodule.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Teemodule *TeemoduleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.TransferOwnership(&_Teemodule.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Teemodule *TeemoduleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Teemodule.Contract.TransferOwnership(&_Teemodule.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Teemodule *TeemoduleTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Teemodule.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Teemodule *TeemoduleSession) Receive() (*types.Transaction, error) {
	return _Teemodule.Contract.Receive(&_Teemodule.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Teemodule *TeemoduleTransactorSession) Receive() (*types.Transaction, error) {
	return _Teemodule.Contract.Receive(&_Teemodule.TransactOpts)
}

// TeemoduleChallengeResolvedIterator is returned from FilterChallengeResolved and is used to iterate over the raw logs and unpacked data for ChallengeResolved events raised by the Teemodule contract.
type TeemoduleChallengeResolvedIterator struct {
	Event *TeemoduleChallengeResolved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleChallengeResolvedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleChallengeResolved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleChallengeResolved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleChallengeResolvedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleChallengeResolvedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleChallengeResolved represents a ChallengeResolved event raised by the Teemodule contract.
type TeemoduleChallengeResolved struct {
	Arg0 PendingAssertion
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterChallengeResolved is a free log retrieval operation binding the contract event 0x2020542b6e6b951d4c0736eed2a4d762d20bb1ba579f99feffae9b1dea240883.
//
// Solidity: event ChallengeResolved((bytes32,bytes32,bytes32,bytes32) arg0)
func (_Teemodule *TeemoduleFilterer) FilterChallengeResolved(opts *bind.FilterOpts) (*TeemoduleChallengeResolvedIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "ChallengeResolved")
	if err != nil {
		return nil, err
	}
	return &TeemoduleChallengeResolvedIterator{contract: _Teemodule.contract, event: "ChallengeResolved", logs: logs, sub: sub}, nil
}

// WatchChallengeResolved is a free log subscription operation binding the contract event 0x2020542b6e6b951d4c0736eed2a4d762d20bb1ba579f99feffae9b1dea240883.
//
// Solidity: event ChallengeResolved((bytes32,bytes32,bytes32,bytes32) arg0)
func (_Teemodule *TeemoduleFilterer) WatchChallengeResolved(opts *bind.WatchOpts, sink chan<- *TeemoduleChallengeResolved) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "ChallengeResolved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleChallengeResolved)
				if err := _Teemodule.contract.UnpackLog(event, "ChallengeResolved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeResolved is a log parse operation binding the contract event 0x2020542b6e6b951d4c0736eed2a4d762d20bb1ba579f99feffae9b1dea240883.
//
// Solidity: event ChallengeResolved((bytes32,bytes32,bytes32,bytes32) arg0)
func (_Teemodule *TeemoduleFilterer) ParseChallengeResolved(log types.Log) (*TeemoduleChallengeResolved, error) {
	event := new(TeemoduleChallengeResolved)
	if err := _Teemodule.contract.UnpackLog(event, "ChallengeResolved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Teemodule contract.
type TeemoduleOwnershipTransferredIterator struct {
	Event *TeemoduleOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleOwnershipTransferred represents a OwnershipTransferred event raised by the Teemodule contract.
type TeemoduleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Teemodule *TeemoduleFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TeemoduleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TeemoduleOwnershipTransferredIterator{contract: _Teemodule.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Teemodule *TeemoduleFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TeemoduleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleOwnershipTransferred)
				if err := _Teemodule.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Teemodule *TeemoduleFilterer) ParseOwnershipTransferred(log types.Log) (*TeemoduleOwnershipTransferred, error) {
	event := new(TeemoduleOwnershipTransferred)
	if err := _Teemodule.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeConfigHashIterator is returned from FilterTeeConfigHash and is used to iterate over the raw logs and unpacked data for TeeConfigHash events raised by the Teemodule contract.
type TeemoduleTeeConfigHashIterator struct {
	Event *TeemoduleTeeConfigHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeConfigHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeConfigHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeConfigHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeConfigHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeConfigHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeConfigHash represents a TeeConfigHash event raised by the Teemodule contract.
type TeemoduleTeeConfigHash struct {
	ConfigHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTeeConfigHash is a free log retrieval operation binding the contract event 0xd266bca6281b20459ae52407bea3d134d9017bf8f3ba803cb7a11d724e2b2da6.
//
// Solidity: event TeeConfigHash(bytes32 configHash)
func (_Teemodule *TeemoduleFilterer) FilterTeeConfigHash(opts *bind.FilterOpts) (*TeemoduleTeeConfigHashIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeConfigHash")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeConfigHashIterator{contract: _Teemodule.contract, event: "TeeConfigHash", logs: logs, sub: sub}, nil
}

// WatchTeeConfigHash is a free log subscription operation binding the contract event 0xd266bca6281b20459ae52407bea3d134d9017bf8f3ba803cb7a11d724e2b2da6.
//
// Solidity: event TeeConfigHash(bytes32 configHash)
func (_Teemodule *TeemoduleFilterer) WatchTeeConfigHash(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeConfigHash) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeConfigHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeConfigHash)
				if err := _Teemodule.contract.UnpackLog(event, "TeeConfigHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeConfigHash is a log parse operation binding the contract event 0xd266bca6281b20459ae52407bea3d134d9017bf8f3ba803cb7a11d724e2b2da6.
//
// Solidity: event TeeConfigHash(bytes32 configHash)
func (_Teemodule *TeemoduleFilterer) ParseTeeConfigHash(log types.Log) (*TeemoduleTeeConfigHash, error) {
	event := new(TeemoduleTeeConfigHash)
	if err := _Teemodule.contract.UnpackLog(event, "TeeConfigHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeHackedIterator is returned from FilterTeeHacked and is used to iterate over the raw logs and unpacked data for TeeHacked events raised by the Teemodule contract.
type TeemoduleTeeHackedIterator struct {
	Event *TeemoduleTeeHacked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeHackedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeHacked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeHacked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeHackedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeHackedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeHacked represents a TeeHacked event raised by the Teemodule contract.
type TeemoduleTeeHacked struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterTeeHacked is a free log retrieval operation binding the contract event 0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7.
//
// Solidity: event TeeHacked(uint256 arg0)
func (_Teemodule *TeemoduleFilterer) FilterTeeHacked(opts *bind.FilterOpts) (*TeemoduleTeeHackedIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeHacked")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeHackedIterator{contract: _Teemodule.contract, event: "TeeHacked", logs: logs, sub: sub}, nil
}

// WatchTeeHacked is a free log subscription operation binding the contract event 0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7.
//
// Solidity: event TeeHacked(uint256 arg0)
func (_Teemodule *TeemoduleFilterer) WatchTeeHacked(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeHacked) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeHacked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeHacked)
				if err := _Teemodule.contract.UnpackLog(event, "TeeHacked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeHacked is a log parse operation binding the contract event 0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7.
//
// Solidity: event TeeHacked(uint256 arg0)
func (_Teemodule *TeemoduleFilterer) ParseTeeHacked(log types.Log) (*TeemoduleTeeHacked, error) {
	event := new(TeemoduleTeeHacked)
	if err := _Teemodule.contract.UnpackLog(event, "TeeHacked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TeemoduleTeeInputIterator is returned from FilterTeeInput and is used to iterate over the raw logs and unpacked data for TeeInput events raised by the Teemodule contract.
type TeemoduleTeeInputIterator struct {
	Event *TeemoduleTeeInput // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TeemoduleTeeInputIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TeemoduleTeeInput)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TeemoduleTeeInput)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TeemoduleTeeInputIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TeemoduleTeeInputIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TeemoduleTeeInput represents a TeeInput event raised by the Teemodule contract.
type TeemoduleTeeInput struct {
	Input TeeTrustedInput
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTeeInput is a free log retrieval operation binding the contract event 0x55232299d83faf4dc2c32e228af37632bca7fa6dbc03b41224c100c6c9dca349.
//
// Solidity: event TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32) input)
func (_Teemodule *TeemoduleFilterer) FilterTeeInput(opts *bind.FilterOpts) (*TeemoduleTeeInputIterator, error) {

	logs, sub, err := _Teemodule.contract.FilterLogs(opts, "TeeInput")
	if err != nil {
		return nil, err
	}
	return &TeemoduleTeeInputIterator{contract: _Teemodule.contract, event: "TeeInput", logs: logs, sub: sub}, nil
}

// WatchTeeInput is a free log subscription operation binding the contract event 0x55232299d83faf4dc2c32e228af37632bca7fa6dbc03b41224c100c6c9dca349.
//
// Solidity: event TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32) input)
func (_Teemodule *TeemoduleFilterer) WatchTeeInput(opts *bind.WatchOpts, sink chan<- *TeemoduleTeeInput) (event.Subscription, error) {

	logs, sub, err := _Teemodule.contract.WatchLogs(opts, "TeeInput")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TeemoduleTeeInput)
				if err := _Teemodule.contract.UnpackLog(event, "TeeInput", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeeInput is a log parse operation binding the contract event 0x55232299d83faf4dc2c32e228af37632bca7fa6dbc03b41224c100c6c9dca349.
//
// Solidity: event TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32) input)
func (_Teemodule *TeemoduleFilterer) ParseTeeInput(log types.Log) (*TeemoduleTeeInput, error) {
	event := new(TeemoduleTeeInput)
	if err := _Teemodule.contract.UnpackLog(event, "TeeInput", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
