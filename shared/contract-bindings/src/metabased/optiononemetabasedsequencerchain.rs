/**

Generated by the following Solidity interface...
```solidity
interface OptionOneMetabasedSequencerChain {
    error AlreadyInitialized();
    error CalldataNotAllowed();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _l3ChainId);

    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function isAllowedWithCalldata(address proposer, bytes memory data) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function l3ChainId() external view returns (uint256);
    function owner() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function requirementModule() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_l3ChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowedWithCalldata",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l3ChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "requirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ConsolidatedPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OptionOneMetabasedSequencerChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b611311610411823960805181610525015261131190f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611722803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f4c3320636861696e2049442063616e6e6f742062652030000000000000000000910152565b610169601760209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf610234565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60a01b90565b906101f660ff60a01b916101e1565b9181191691161790565b151590565b61020e90610200565b90565b90565b9061022961022461023092610205565b610211565b82546101e7565b9055565b61023d336102ab565b6102485f6001610214565b565b60018060a01b031690565b61026961026461026e9261010a565b61010d565b61024a565b90565b61027a90610255565b90565b6102869061024a565b90565b6102929061027d565b9052565b91906102a9905f60208501940190610289565b565b806102c66102c06102bb5f610271565b61027d565b9161027d565b146102d6576102d4906103b1565b565b6103006102e25f610271565b6102ea61003d565b918291631e4fbdf760e01b835260048301610296565b0390fd5b5f1c90565b60018060a01b031690565b61032061032591610304565b610309565b90565b6103329054610314565b90565b5f1b90565b9061034b60018060a01b0391610335565b9181191691161790565b61036961036461036e9261024a565b61010d565b61024a565b90565b61037a90610355565b90565b61038690610371565b90565b90565b906103a161039c6103a89261037d565b610389565b825461033a565b9055565b5f0190565b6103ba5f610328565b6103c4825f61038c565b906103f86103f27f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361037d565b9161037d565b9161040161003d565b8061040b816103ac565b0390a356fe60806040526004361015610013575b6106b1565b61001d5f356100ec565b80630b83249d146100e75780633514d37b146100e25780633bb83a64146100dd5780633dfb5ee7146100d857806346e2cc09146100d3578063485cc955146100ce57806361de91cc146100c9578063715018a6146100c457806377bfdd19146100bf5780638da5cb5b146100ba578063babcc539146100b5578063d4f0eb4d146100b05763f2fde38b0361000e5761067e565b61064b565b610616565b6105c3565b61056c565b6104f0565b6104ba565b610440565b6103b0565b61037a565b61031e565b610233565b61018a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561014a5781359167ffffffffffffffff831161014557602001926020830284011161014057565b61010c565b610108565b610104565b90602082820312610180575f82013567ffffffffffffffff811161017b576101779201610110565b9091565b610100565b6100fc565b5f0190565b346101b9576101a361019d36600461014f565b906108e7565b6101ab6100f2565b806101b581610185565b0390f35b6100f8565b909182601f830112156101f85781359167ffffffffffffffff83116101f35760200192600183028401116101ee57565b61010c565b610108565b610104565b9060208282031261022e575f82013567ffffffffffffffff81116102295761022592016101be565b9091565b610100565b6100fc565b346102625761024c6102463660046101fd565b906109e6565b6102546100f2565b8061025e81610185565b0390f35b6100f8565b5f91031261027157565b6100fc565b1c90565b60018060a01b031690565b61029590600861029a9302610276565b61027a565b90565b906102a89154610285565b90565b6102b760015f9061029d565b90565b60018060a01b031690565b90565b6102dc6102d76102e1926102ba565b6102c5565b6102ba565b90565b6102ed906102c8565b90565b6102f9906102e4565b90565b610305906102f0565b9052565b919061031c905f602085019401906102fc565b565b3461034e5761032e366004610267565b61034a6103396102ab565b6103416100f2565b91829182610309565b0390f35b6100f8565b151590565b61036190610353565b9052565b9190610378905f60208501940190610358565b565b346103ab576103a76103966103903660046101fd565b90610b00565b61039e6100f2565b91829182610365565b0390f35b6100f8565b346103df576103c96103c33660046101fd565b90610c51565b6103d16100f2565b806103db81610185565b0390f35b6100f8565b6103ed906102ba565b90565b6103f9816103e4565b0361040057565b5f80fd5b90503590610411826103f0565b565b919060408382031261043b578061042f610438925f8601610404565b93602001610404565b90565b6100fc565b3461046f57610459610453366004610413565b90610dee565b6104616100f2565b8061046b81610185565b0390f35b6100f8565b9190916040818403126104b55761048d835f8301610404565b92602082013567ffffffffffffffff81116104b0576104ac92016101be565b9091565b610100565b6100fc565b346104eb576104e76104d66104d0366004610474565b91610dfa565b6104de6100f2565b91829182610365565b0390f35b6100f8565b3461051e57610500366004610267565b610508610eb5565b6105106100f2565b8061051a81610185565b0390f35b6100f8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61055390610547565b9052565b919061056a905f6020850194019061054a565b565b3461059c5761057c366004610267565b610598610587610523565b61058f6100f2565b91829182610557565b0390f35b6100f8565b6105aa906103e4565b9052565b91906105c1905f602085019401906105a1565b565b346105f3576105d3366004610267565b6105ef6105de610eef565b6105e66100f2565b918291826105ae565b0390f35b6100f8565b906020828203126106115761060e915f01610404565b90565b6100fc565b346106465761064261063161062c3660046105f8565b610f39565b6106396100f2565b91829182610365565b0390f35b6100f8565b346106795761066361065e3660046105f8565b611075565b61066b6100f2565b8061067581610185565b0390f35b6100f8565b346106ac576106966106913660046105f8565b6110ec565b61069e6100f2565b806106a881610185565b0390f35b6100f8565b5f80fd5b919033926106cb6106c585610f39565b15610353565b6106dc576106da929350610832565b565b6106fe846106e86100f2565b91829163fa5cd00f60e01b8352600483016105ae565b0390fd5b5090565b90565b61071d61071861072292610706565b6102c5565b610547565b90565b60016107319101610547565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610796570180359067ffffffffffffffff82116107915760200191600182023603831361078c57565b610750565b61074c565b610748565b908210156107b65760206107b29202810190610754565b9091565b610734565b6107c4906102e4565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610808610811602093610816936107ff816107c7565b938480936107cb565b958691016107d4565b6107df565b0190565b61082f9160208201915f8184039101526107e9565b90565b919091610840818490610702565b9161084a5f610709565b5b8061085e61085886610547565b91610547565b10156108e0576108db9061087d6108778588849161079b565b906110f7565b3361089361088d8689859161079b565b906111b6565b906108d36108c17f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107bb565b926108ca6100f2565b9182918261081a565b0390a2610725565b61084b565b5092505050565b906108f1916106b5565b565b9190339261090961090385610f39565b15610353565b61091a57610918929350610940565b565b61093c846109266100f2565b91829163fa5cd00f60e01b8352600483016105ae565b0390fd5b90610955916109508183906110f7565b61099f565b565b90825f939282370152565b919061097c8161097581610981956107cb565b8095610957565b6107df565b0190565b909161099c9260208301925f818503910152610962565b90565b3390916109cc7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107bb565b926109e16109d86100f2565b92839283610985565b0390a2565b906109f0916108f3565b565b5f90565b5f1c90565b610a07610a0c916109f6565b61027a565b90565b610a1990546109fb565b90565b610a30610a2b610a3592610706565b6102c5565b6102ba565b90565b610a4190610a1c565b90565b634e487b7160e01b5f52604160045260245ffd5b90610a62906107df565b810190811067ffffffffffffffff821117610a7c57604052565b610a44565b60e01b90565b610a9081610353565b03610a9757565b5f80fd5b90505190610aa882610a87565b565b90602082820312610ac357610ac0915f01610a9b565b90565b6100fc565b91610aed939192610ae060408201945f8301906105a1565b6020818503910152610962565b90565b610af86100f2565b3d5f823e3d90fd5b602090610b0b6109f2565b50610b1e610b196001610a0f565b6102f0565b610b4863e3f756de610b53610b325f610a38565b9496610b3c6100f2565b97889687958695610a81565b855260048501610ac8565b03915afa908115610b97575f91610b69575b5090565b610b8a915060203d8111610b90575b610b828183610a58565b810190610aaa565b5f610b65565b503d610b78565b610af0565b91903392610bb2610bac85610f39565b15610353565b610bc357610bc1929350610be9565b565b610be584610bcf6100f2565b91829163fa5cd00f60e01b8352600483016105ae565b0390fd5b90610bfe91610bf98183906110f7565b610c00565b565b90610c0c9033926111b6565b90610c4c610c3a7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107bb565b92610c436100f2565b9182918261081a565b0390a2565b90610c5b91610b9c565b565b90610c6f91610c6a6111f7565b610d53565b565b60a01c90565b60ff1690565b610c89610c8e91610c71565b610c77565b90565b610c9b9054610c7d565b90565b60a01b90565b90610cb360ff60a01b91610c9e565b9181191691161790565b610cc690610353565b90565b90565b90610ce1610cdc610ce892610cbd565b610cc9565b8254610ca4565b9055565b610cf5906102c8565b90565b610d0190610cec565b90565b5f1b90565b90610d1a60018060a01b0391610d04565b9181191691161790565b610d2d90610cec565b90565b90565b90610d48610d43610d4f92610d24565b610d30565b8254610d09565b9055565b610d5d6001610c91565b610dcc5781610d7c610d76610d715f610a38565b6103e4565b916103e4565b14610da957610da2610d9b610da793610d96600180610ccc565b610cf8565b6001610d33565b6110ec565b565b610db16100f2565b632e7f3c7f60e11b815280610dc860048201610185565b0390fd5b610dd46100f2565b62dc149f60e41b815280610dea60048201610185565b0390fd5b90610df891610c5d565b565b90602091610e066109f2565b50610e3c610e1c610e176001610a0f565b6102f0565b91610e4763e3f756de919496610e306100f2565b97889687958695610a81565b855260048501610ac8565b03915afa908115610e8b575f91610e5d575b5090565b610e7e915060203d8111610e84575b610e768183610a58565b810190610aaa565b5f610e59565b503d610e6c565b610af0565b610e986111f7565b610ea0610ea2565b565b610eb3610eae5f610a38565b61126f565b565b610ebd610e90565b565b5f90565b60018060a01b031690565b610eda610edf916109f6565b610ec3565b90565b610eec9054610ece565b90565b610ef7610ebf565b50610f015f610ee2565b90565b610f0f5f80926107cb565b0190565b90610f3691610f2960408201925f8301906105a1565b6020818303910152610f04565b90565b6020610f8191610f476109f2565b50610f5a610f556001610a0f565b6102f0565b610f7663e3f756de610f6a6100f2565b95869485938493610a81565b835260048301610f13565b03915afa908115610fc5575f91610f97575b5090565b610fb8915060203d8111610fbe575b610fb08183610a58565b810190610aaa565b5f610f93565b503d610fa6565b610af0565b610fdb90610fd66111f7565b610fdd565b565b80610ff8610ff2610fed5f610a38565b6103e4565b916103e4565b146110525761101061100982610cf8565b6001610d33565b61103a7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916107bb565b906110436100f2565b8061104d81610185565b0390a2565b61105a6100f2565b632e7f3c7f60e11b81528061107160048201610185565b0390fd5b61107e90610fca565b565b6110919061108c6111f7565b611093565b565b806110ae6110a86110a35f610a38565b6103e4565b916103e4565b146110be576110bc9061126f565b565b6110e86110ca5f610a38565b6110d26100f2565b918291631e4fbdf760e01b8352600483016105ae565b0390fd5b6110f590611080565b565b61110a9161110491610b00565b15610353565b61111057565b6111186100f2565b6360c054b160e11b81528061112f60048201610185565b0390fd5b606090565b60ff60f81b1690565b60f81b90565b61115b61115661116092610706565b611141565b611138565b90565b90565b61117261117791611138565b611163565b9052565b905090565b909182611190816111979361117b565b8093610957565b0190565b806111ac6001926111b39694611166565b0191611180565b90565b6111f4906111c2611133565b506111e56111cf5f611147565b91936111d96100f2565b9485936020850161119b565b60208201810382520382610a58565b90565b6111ff610eef565b61121861121261120d6112ce565b6103e4565b916103e4565b0361121f57565b61124861122a6112ce565b6112326100f2565b91829163118cdaa760e01b8352600483016105ae565b0390fd5b90565b9061126461125f61126b926107bb565b61124c565b8254610d09565b9055565b6112785f610ee2565b611282825f61124f565b906112b66112b07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107bb565b916107bb565b916112bf6100f2565b806112c981610185565b0390a3565b6112d6610ebf565b50339056fea264697066735822122063efef5f2b12b87f411480aae1ac0a5a91cb92b070e45f697a1840cece619ef764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x13\x11a\x04\x11\x829`\x80Q\x81a\x05%\x01Ra\x13\x11\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x17\"\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FL3 chain ID cannot be 0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x17` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x024V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\xA0\x1B\x90V[\x90a\x01\xF6`\xFF`\xA0\x1B\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0E\x90a\x02\0V[\x90V[\x90V[\x90a\x02)a\x02$a\x020\x92a\x02\x05V[a\x02\x11V[\x82Ta\x01\xE7V[\x90UV[a\x02=3a\x02\xABV[a\x02H_`\x01a\x02\x14V[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ia\x02da\x02n\x92a\x01\nV[a\x01\rV[a\x02JV[\x90V[a\x02z\x90a\x02UV[\x90V[a\x02\x86\x90a\x02JV[\x90V[a\x02\x92\x90a\x02}V[\x90RV[\x91\x90a\x02\xA9\x90_` \x85\x01\x94\x01\x90a\x02\x89V[V[\x80a\x02\xC6a\x02\xC0a\x02\xBB_a\x02qV[a\x02}V[\x91a\x02}V[\x14a\x02\xD6Wa\x02\xD4\x90a\x03\xB1V[V[a\x03\0a\x02\xE2_a\x02qV[a\x02\xEAa\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02\x96V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03 a\x03%\x91a\x03\x04V[a\x03\tV[\x90V[a\x032\x90Ta\x03\x14V[\x90V[_\x1B\x90V[\x90a\x03K`\x01\x80`\xA0\x1B\x03\x91a\x035V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03ia\x03da\x03n\x92a\x02JV[a\x01\rV[a\x02JV[\x90V[a\x03z\x90a\x03UV[\x90V[a\x03\x86\x90a\x03qV[\x90V[\x90V[\x90a\x03\xA1a\x03\x9Ca\x03\xA8\x92a\x03}V[a\x03\x89V[\x82Ta\x03:V[\x90UV[_\x01\x90V[a\x03\xBA_a\x03(V[a\x03\xC4\x82_a\x03\x8CV[\x90a\x03\xF8a\x03\xF2\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x03}V[\x91a\x03}V[\x91a\x04\x01a\0=V[\x80a\x04\x0B\x81a\x03\xACV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x06\xB1V[a\0\x1D_5a\0\xECV[\x80c\x0B\x83$\x9D\x14a\0\xE7W\x80c5\x14\xD3{\x14a\0\xE2W\x80c;\xB8:d\x14a\0\xDDW\x80c=\xFB^\xE7\x14a\0\xD8W\x80cF\xE2\xCC\t\x14a\0\xD3W\x80cH\\\xC9U\x14a\0\xCEW\x80ca\xDE\x91\xCC\x14a\0\xC9W\x80cqP\x18\xA6\x14a\0\xC4W\x80cw\xBF\xDD\x19\x14a\0\xBFW\x80c\x8D\xA5\xCB[\x14a\0\xBAW\x80c\xBA\xBC\xC59\x14a\0\xB5W\x80c\xD4\xF0\xEBM\x14a\0\xB0Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06~V[a\x06KV[a\x06\x16V[a\x05\xC3V[a\x05lV[a\x04\xF0V[a\x04\xBAV[a\x04@V[a\x03\xB0V[a\x03zV[a\x03\x1EV[a\x023V[a\x01\x8AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01JW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01EW` \x01\x92` \x83\x02\x84\x01\x11a\x01@WV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x01\x80W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01{Wa\x01w\x92\x01a\x01\x10V[\x90\x91V[a\x01\0V[a\0\xFCV[_\x01\x90V[4a\x01\xB9Wa\x01\xA3a\x01\x9D6`\x04a\x01OV[\x90a\x08\xE7V[a\x01\xABa\0\xF2V[\x80a\x01\xB5\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xF8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xF3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xEEWV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x02.W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02)Wa\x02%\x92\x01a\x01\xBEV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x02bWa\x02La\x02F6`\x04a\x01\xFDV[\x90a\t\xE6V[a\x02Ta\0\xF2V[\x80a\x02^\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x02qWV[a\0\xFCV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x95\x90`\x08a\x02\x9A\x93\x02a\x02vV[a\x02zV[\x90V[\x90a\x02\xA8\x91Ta\x02\x85V[\x90V[a\x02\xB7`\x01_\x90a\x02\x9DV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\xDCa\x02\xD7a\x02\xE1\x92a\x02\xBAV[a\x02\xC5V[a\x02\xBAV[\x90V[a\x02\xED\x90a\x02\xC8V[\x90V[a\x02\xF9\x90a\x02\xE4V[\x90V[a\x03\x05\x90a\x02\xF0V[\x90RV[\x91\x90a\x03\x1C\x90_` \x85\x01\x94\x01\x90a\x02\xFCV[V[4a\x03NWa\x03.6`\x04a\x02gV[a\x03Ja\x039a\x02\xABV[a\x03Aa\0\xF2V[\x91\x82\x91\x82a\x03\tV[\x03\x90\xF3[a\0\xF8V[\x15\x15\x90V[a\x03a\x90a\x03SV[\x90RV[\x91\x90a\x03x\x90_` \x85\x01\x94\x01\x90a\x03XV[V[4a\x03\xABWa\x03\xA7a\x03\x96a\x03\x906`\x04a\x01\xFDV[\x90a\x0B\0V[a\x03\x9Ea\0\xF2V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\0\xF8V[4a\x03\xDFWa\x03\xC9a\x03\xC36`\x04a\x01\xFDV[\x90a\x0CQV[a\x03\xD1a\0\xF2V[\x80a\x03\xDB\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[a\x03\xED\x90a\x02\xBAV[\x90V[a\x03\xF9\x81a\x03\xE4V[\x03a\x04\0WV[_\x80\xFD[\x90P5\x90a\x04\x11\x82a\x03\xF0V[V[\x91\x90`@\x83\x82\x03\x12a\x04;W\x80a\x04/a\x048\x92_\x86\x01a\x04\x04V[\x93` \x01a\x04\x04V[\x90V[a\0\xFCV[4a\x04oWa\x04Ya\x04S6`\x04a\x04\x13V[\x90a\r\xEEV[a\x04aa\0\xF2V[\x80a\x04k\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x91\x90\x91`@\x81\x84\x03\x12a\x04\xB5Wa\x04\x8D\x83_\x83\x01a\x04\x04V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xB0Wa\x04\xAC\x92\x01a\x01\xBEV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x04\xEBWa\x04\xE7a\x04\xD6a\x04\xD06`\x04a\x04tV[\x91a\r\xFAV[a\x04\xDEa\0\xF2V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\0\xF8V[4a\x05\x1EWa\x05\x006`\x04a\x02gV[a\x05\x08a\x0E\xB5V[a\x05\x10a\0\xF2V[\x80a\x05\x1A\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05S\x90a\x05GV[\x90RV[\x91\x90a\x05j\x90_` \x85\x01\x94\x01\x90a\x05JV[V[4a\x05\x9CWa\x05|6`\x04a\x02gV[a\x05\x98a\x05\x87a\x05#V[a\x05\x8Fa\0\xF2V[\x91\x82\x91\x82a\x05WV[\x03\x90\xF3[a\0\xF8V[a\x05\xAA\x90a\x03\xE4V[\x90RV[\x91\x90a\x05\xC1\x90_` \x85\x01\x94\x01\x90a\x05\xA1V[V[4a\x05\xF3Wa\x05\xD36`\x04a\x02gV[a\x05\xEFa\x05\xDEa\x0E\xEFV[a\x05\xE6a\0\xF2V[\x91\x82\x91\x82a\x05\xAEV[\x03\x90\xF3[a\0\xF8V[\x90` \x82\x82\x03\x12a\x06\x11Wa\x06\x0E\x91_\x01a\x04\x04V[\x90V[a\0\xFCV[4a\x06FWa\x06Ba\x061a\x06,6`\x04a\x05\xF8V[a\x0F9V[a\x069a\0\xF2V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\0\xF8V[4a\x06yWa\x06ca\x06^6`\x04a\x05\xF8V[a\x10uV[a\x06ka\0\xF2V[\x80a\x06u\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[4a\x06\xACWa\x06\x96a\x06\x916`\x04a\x05\xF8V[a\x10\xECV[a\x06\x9Ea\0\xF2V[\x80a\x06\xA8\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[\x91\x903\x92a\x06\xCBa\x06\xC5\x85a\x0F9V[\x15a\x03SV[a\x06\xDCWa\x06\xDA\x92\x93Pa\x082V[V[a\x06\xFE\x84a\x06\xE8a\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[P\x90V[\x90V[a\x07\x1Da\x07\x18a\x07\"\x92a\x07\x06V[a\x02\xC5V[a\x05GV[\x90V[`\x01a\x071\x91\x01a\x05GV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x07\x96W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07\x91W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x07\x8CWV[a\x07PV[a\x07LV[a\x07HV[\x90\x82\x10\x15a\x07\xB6W` a\x07\xB2\x92\x02\x81\x01\x90a\x07TV[\x90\x91V[a\x074V[a\x07\xC4\x90a\x02\xE4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x08\x08a\x08\x11` \x93a\x08\x16\x93a\x07\xFF\x81a\x07\xC7V[\x93\x84\x80\x93a\x07\xCBV[\x95\x86\x91\x01a\x07\xD4V[a\x07\xDFV[\x01\x90V[a\x08/\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\xE9V[\x90V[\x91\x90\x91a\x08@\x81\x84\x90a\x07\x02V[\x91a\x08J_a\x07\tV[[\x80a\x08^a\x08X\x86a\x05GV[\x91a\x05GV[\x10\x15a\x08\xE0Wa\x08\xDB\x90a\x08}a\x08w\x85\x88\x84\x91a\x07\x9BV[\x90a\x10\xF7V[3a\x08\x93a\x08\x8D\x86\x89\x85\x91a\x07\x9BV[\x90a\x11\xB6V[\x90a\x08\xD3a\x08\xC1\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xBBV[\x92a\x08\xCAa\0\xF2V[\x91\x82\x91\x82a\x08\x1AV[\x03\x90\xA2a\x07%V[a\x08KV[P\x92PPPV[\x90a\x08\xF1\x91a\x06\xB5V[V[\x91\x903\x92a\t\ta\t\x03\x85a\x0F9V[\x15a\x03SV[a\t\x1AWa\t\x18\x92\x93Pa\t@V[V[a\t<\x84a\t&a\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[\x90a\tU\x91a\tP\x81\x83\x90a\x10\xF7V[a\t\x9FV[V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\t|\x81a\tu\x81a\t\x81\x95a\x07\xCBV[\x80\x95a\tWV[a\x07\xDFV[\x01\x90V[\x90\x91a\t\x9C\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\tbV[\x90V[3\x90\x91a\t\xCC\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xBBV[\x92a\t\xE1a\t\xD8a\0\xF2V[\x92\x83\x92\x83a\t\x85V[\x03\x90\xA2V[\x90a\t\xF0\x91a\x08\xF3V[V[_\x90V[_\x1C\x90V[a\n\x07a\n\x0C\x91a\t\xF6V[a\x02zV[\x90V[a\n\x19\x90Ta\t\xFBV[\x90V[a\n0a\n+a\n5\x92a\x07\x06V[a\x02\xC5V[a\x02\xBAV[\x90V[a\nA\x90a\n\x1CV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\nb\x90a\x07\xDFV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n|W`@RV[a\nDV[`\xE0\x1B\x90V[a\n\x90\x81a\x03SV[\x03a\n\x97WV[_\x80\xFD[\x90PQ\x90a\n\xA8\x82a\n\x87V[V[\x90` \x82\x82\x03\x12a\n\xC3Wa\n\xC0\x91_\x01a\n\x9BV[\x90V[a\0\xFCV[\x91a\n\xED\x93\x91\x92a\n\xE0`@\x82\x01\x94_\x83\x01\x90a\x05\xA1V[` \x81\x85\x03\x91\x01Ra\tbV[\x90V[a\n\xF8a\0\xF2V[=_\x82>=\x90\xFD[` \x90a\x0B\x0Ba\t\xF2V[Pa\x0B\x1Ea\x0B\x19`\x01a\n\x0FV[a\x02\xF0V[a\x0BHc\xE3\xF7V\xDEa\x0BSa\x0B2_a\n8V[\x94\x96a\x0B<a\0\xF2V[\x97\x88\x96\x87\x95\x86\x95a\n\x81V[\x85R`\x04\x85\x01a\n\xC8V[\x03\x91Z\xFA\x90\x81\x15a\x0B\x97W_\x91a\x0BiW[P\x90V[a\x0B\x8A\x91P` =\x81\x11a\x0B\x90W[a\x0B\x82\x81\x83a\nXV[\x81\x01\x90a\n\xAAV[_a\x0BeV[P=a\x0BxV[a\n\xF0V[\x91\x903\x92a\x0B\xB2a\x0B\xAC\x85a\x0F9V[\x15a\x03SV[a\x0B\xC3Wa\x0B\xC1\x92\x93Pa\x0B\xE9V[V[a\x0B\xE5\x84a\x0B\xCFa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[\x90a\x0B\xFE\x91a\x0B\xF9\x81\x83\x90a\x10\xF7V[a\x0C\0V[V[\x90a\x0C\x0C\x903\x92a\x11\xB6V[\x90a\x0CLa\x0C:\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xBBV[\x92a\x0CCa\0\xF2V[\x91\x82\x91\x82a\x08\x1AV[\x03\x90\xA2V[\x90a\x0C[\x91a\x0B\x9CV[V[\x90a\x0Co\x91a\x0Cja\x11\xF7V[a\rSV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0C\x89a\x0C\x8E\x91a\x0CqV[a\x0CwV[\x90V[a\x0C\x9B\x90Ta\x0C}V[\x90V[`\xA0\x1B\x90V[\x90a\x0C\xB3`\xFF`\xA0\x1B\x91a\x0C\x9EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xC6\x90a\x03SV[\x90V[\x90V[\x90a\x0C\xE1a\x0C\xDCa\x0C\xE8\x92a\x0C\xBDV[a\x0C\xC9V[\x82Ta\x0C\xA4V[\x90UV[a\x0C\xF5\x90a\x02\xC8V[\x90V[a\r\x01\x90a\x0C\xECV[\x90V[_\x1B\x90V[\x90a\r\x1A`\x01\x80`\xA0\x1B\x03\x91a\r\x04V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r-\x90a\x0C\xECV[\x90V[\x90V[\x90a\rHa\rCa\rO\x92a\r$V[a\r0V[\x82Ta\r\tV[\x90UV[a\r]`\x01a\x0C\x91V[a\r\xCCW\x81a\r|a\rva\rq_a\n8V[a\x03\xE4V[\x91a\x03\xE4V[\x14a\r\xA9Wa\r\xA2a\r\x9Ba\r\xA7\x93a\r\x96`\x01\x80a\x0C\xCCV[a\x0C\xF8V[`\x01a\r3V[a\x10\xECV[V[a\r\xB1a\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\r\xC8`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\r\xD4a\0\xF2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\r\xEA`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[\x90a\r\xF8\x91a\x0C]V[V[\x90` \x91a\x0E\x06a\t\xF2V[Pa\x0E<a\x0E\x1Ca\x0E\x17`\x01a\n\x0FV[a\x02\xF0V[\x91a\x0EGc\xE3\xF7V\xDE\x91\x94\x96a\x0E0a\0\xF2V[\x97\x88\x96\x87\x95\x86\x95a\n\x81V[\x85R`\x04\x85\x01a\n\xC8V[\x03\x91Z\xFA\x90\x81\x15a\x0E\x8BW_\x91a\x0E]W[P\x90V[a\x0E~\x91P` =\x81\x11a\x0E\x84W[a\x0Ev\x81\x83a\nXV[\x81\x01\x90a\n\xAAV[_a\x0EYV[P=a\x0ElV[a\n\xF0V[a\x0E\x98a\x11\xF7V[a\x0E\xA0a\x0E\xA2V[V[a\x0E\xB3a\x0E\xAE_a\n8V[a\x12oV[V[a\x0E\xBDa\x0E\x90V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\xDAa\x0E\xDF\x91a\t\xF6V[a\x0E\xC3V[\x90V[a\x0E\xEC\x90Ta\x0E\xCEV[\x90V[a\x0E\xF7a\x0E\xBFV[Pa\x0F\x01_a\x0E\xE2V[\x90V[a\x0F\x0F_\x80\x92a\x07\xCBV[\x01\x90V[\x90a\x0F6\x91a\x0F)`@\x82\x01\x92_\x83\x01\x90a\x05\xA1V[` \x81\x83\x03\x91\x01Ra\x0F\x04V[\x90V[` a\x0F\x81\x91a\x0FGa\t\xF2V[Pa\x0FZa\x0FU`\x01a\n\x0FV[a\x02\xF0V[a\x0Fvc\xE3\xF7V\xDEa\x0Fja\0\xF2V[\x95\x86\x94\x85\x93\x84\x93a\n\x81V[\x83R`\x04\x83\x01a\x0F\x13V[\x03\x91Z\xFA\x90\x81\x15a\x0F\xC5W_\x91a\x0F\x97W[P\x90V[a\x0F\xB8\x91P` =\x81\x11a\x0F\xBEW[a\x0F\xB0\x81\x83a\nXV[\x81\x01\x90a\n\xAAV[_a\x0F\x93V[P=a\x0F\xA6V[a\n\xF0V[a\x0F\xDB\x90a\x0F\xD6a\x11\xF7V[a\x0F\xDDV[V[\x80a\x0F\xF8a\x0F\xF2a\x0F\xED_a\n8V[a\x03\xE4V[\x91a\x03\xE4V[\x14a\x10RWa\x10\x10a\x10\t\x82a\x0C\xF8V[`\x01a\r3V[a\x10:\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x07\xBBV[\x90a\x10Ca\0\xF2V[\x80a\x10M\x81a\x01\x85V[\x03\x90\xA2V[a\x10Za\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10q`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\x10~\x90a\x0F\xCAV[V[a\x10\x91\x90a\x10\x8Ca\x11\xF7V[a\x10\x93V[V[\x80a\x10\xAEa\x10\xA8a\x10\xA3_a\n8V[a\x03\xE4V[\x91a\x03\xE4V[\x14a\x10\xBEWa\x10\xBC\x90a\x12oV[V[a\x10\xE8a\x10\xCA_a\n8V[a\x10\xD2a\0\xF2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[a\x10\xF5\x90a\x10\x80V[V[a\x11\n\x91a\x11\x04\x91a\x0B\0V[\x15a\x03SV[a\x11\x10WV[a\x11\x18a\0\xF2V[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\x11/`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x11[a\x11Va\x11`\x92a\x07\x06V[a\x11AV[a\x118V[\x90V[\x90V[a\x11ra\x11w\x91a\x118V[a\x11cV[\x90RV[\x90P\x90V[\x90\x91\x82a\x11\x90\x81a\x11\x97\x93a\x11{V[\x80\x93a\tWV[\x01\x90V[\x80a\x11\xAC`\x01\x92a\x11\xB3\x96\x94a\x11fV[\x01\x91a\x11\x80V[\x90V[a\x11\xF4\x90a\x11\xC2a\x113V[Pa\x11\xE5a\x11\xCF_a\x11GV[\x91\x93a\x11\xD9a\0\xF2V[\x94\x85\x93` \x85\x01a\x11\x9BV[` \x82\x01\x81\x03\x82R\x03\x82a\nXV[\x90V[a\x11\xFFa\x0E\xEFV[a\x12\x18a\x12\x12a\x12\ra\x12\xCEV[a\x03\xE4V[\x91a\x03\xE4V[\x03a\x12\x1FWV[a\x12Ha\x12*a\x12\xCEV[a\x122a\0\xF2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[\x90V[\x90a\x12da\x12_a\x12k\x92a\x07\xBBV[a\x12LV[\x82Ta\r\tV[\x90UV[a\x12x_a\x0E\xE2V[a\x12\x82\x82_a\x12OV[\x90a\x12\xB6a\x12\xB0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x07\xBBV[\x91a\x07\xBBV[\x91a\x12\xBFa\0\xF2V[\x80a\x12\xC9\x81a\x01\x85V[\x03\x90\xA3V[a\x12\xD6a\x0E\xBFV[P3\x90V\xFE\xA2dipfsX\"\x12 c\xEF\xEF_+\x12\xB8\x7FA\x14\x80\xAA\xE1\xAC\nZ\x91\xCB\x92\xB0p\xE4_iz\x18@\xCE\xCEa\x9E\xF7dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6106b1565b61001d5f356100ec565b80630b83249d146100e75780633514d37b146100e25780633bb83a64146100dd5780633dfb5ee7146100d857806346e2cc09146100d3578063485cc955146100ce57806361de91cc146100c9578063715018a6146100c457806377bfdd19146100bf5780638da5cb5b146100ba578063babcc539146100b5578063d4f0eb4d146100b05763f2fde38b0361000e5761067e565b61064b565b610616565b6105c3565b61056c565b6104f0565b6104ba565b610440565b6103b0565b61037a565b61031e565b610233565b61018a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561014a5781359167ffffffffffffffff831161014557602001926020830284011161014057565b61010c565b610108565b610104565b90602082820312610180575f82013567ffffffffffffffff811161017b576101779201610110565b9091565b610100565b6100fc565b5f0190565b346101b9576101a361019d36600461014f565b906108e7565b6101ab6100f2565b806101b581610185565b0390f35b6100f8565b909182601f830112156101f85781359167ffffffffffffffff83116101f35760200192600183028401116101ee57565b61010c565b610108565b610104565b9060208282031261022e575f82013567ffffffffffffffff81116102295761022592016101be565b9091565b610100565b6100fc565b346102625761024c6102463660046101fd565b906109e6565b6102546100f2565b8061025e81610185565b0390f35b6100f8565b5f91031261027157565b6100fc565b1c90565b60018060a01b031690565b61029590600861029a9302610276565b61027a565b90565b906102a89154610285565b90565b6102b760015f9061029d565b90565b60018060a01b031690565b90565b6102dc6102d76102e1926102ba565b6102c5565b6102ba565b90565b6102ed906102c8565b90565b6102f9906102e4565b90565b610305906102f0565b9052565b919061031c905f602085019401906102fc565b565b3461034e5761032e366004610267565b61034a6103396102ab565b6103416100f2565b91829182610309565b0390f35b6100f8565b151590565b61036190610353565b9052565b9190610378905f60208501940190610358565b565b346103ab576103a76103966103903660046101fd565b90610b00565b61039e6100f2565b91829182610365565b0390f35b6100f8565b346103df576103c96103c33660046101fd565b90610c51565b6103d16100f2565b806103db81610185565b0390f35b6100f8565b6103ed906102ba565b90565b6103f9816103e4565b0361040057565b5f80fd5b90503590610411826103f0565b565b919060408382031261043b578061042f610438925f8601610404565b93602001610404565b90565b6100fc565b3461046f57610459610453366004610413565b90610dee565b6104616100f2565b8061046b81610185565b0390f35b6100f8565b9190916040818403126104b55761048d835f8301610404565b92602082013567ffffffffffffffff81116104b0576104ac92016101be565b9091565b610100565b6100fc565b346104eb576104e76104d66104d0366004610474565b91610dfa565b6104de6100f2565b91829182610365565b0390f35b6100f8565b3461051e57610500366004610267565b610508610eb5565b6105106100f2565b8061051a81610185565b0390f35b6100f8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61055390610547565b9052565b919061056a905f6020850194019061054a565b565b3461059c5761057c366004610267565b610598610587610523565b61058f6100f2565b91829182610557565b0390f35b6100f8565b6105aa906103e4565b9052565b91906105c1905f602085019401906105a1565b565b346105f3576105d3366004610267565b6105ef6105de610eef565b6105e66100f2565b918291826105ae565b0390f35b6100f8565b906020828203126106115761060e915f01610404565b90565b6100fc565b346106465761064261063161062c3660046105f8565b610f39565b6106396100f2565b91829182610365565b0390f35b6100f8565b346106795761066361065e3660046105f8565b611075565b61066b6100f2565b8061067581610185565b0390f35b6100f8565b346106ac576106966106913660046105f8565b6110ec565b61069e6100f2565b806106a881610185565b0390f35b6100f8565b5f80fd5b919033926106cb6106c585610f39565b15610353565b6106dc576106da929350610832565b565b6106fe846106e86100f2565b91829163fa5cd00f60e01b8352600483016105ae565b0390fd5b5090565b90565b61071d61071861072292610706565b6102c5565b610547565b90565b60016107319101610547565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610796570180359067ffffffffffffffff82116107915760200191600182023603831361078c57565b610750565b61074c565b610748565b908210156107b65760206107b29202810190610754565b9091565b610734565b6107c4906102e4565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610808610811602093610816936107ff816107c7565b938480936107cb565b958691016107d4565b6107df565b0190565b61082f9160208201915f8184039101526107e9565b90565b919091610840818490610702565b9161084a5f610709565b5b8061085e61085886610547565b91610547565b10156108e0576108db9061087d6108778588849161079b565b906110f7565b3361089361088d8689859161079b565b906111b6565b906108d36108c17f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107bb565b926108ca6100f2565b9182918261081a565b0390a2610725565b61084b565b5092505050565b906108f1916106b5565b565b9190339261090961090385610f39565b15610353565b61091a57610918929350610940565b565b61093c846109266100f2565b91829163fa5cd00f60e01b8352600483016105ae565b0390fd5b90610955916109508183906110f7565b61099f565b565b90825f939282370152565b919061097c8161097581610981956107cb565b8095610957565b6107df565b0190565b909161099c9260208301925f818503910152610962565b90565b3390916109cc7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107bb565b926109e16109d86100f2565b92839283610985565b0390a2565b906109f0916108f3565b565b5f90565b5f1c90565b610a07610a0c916109f6565b61027a565b90565b610a1990546109fb565b90565b610a30610a2b610a3592610706565b6102c5565b6102ba565b90565b610a4190610a1c565b90565b634e487b7160e01b5f52604160045260245ffd5b90610a62906107df565b810190811067ffffffffffffffff821117610a7c57604052565b610a44565b60e01b90565b610a9081610353565b03610a9757565b5f80fd5b90505190610aa882610a87565b565b90602082820312610ac357610ac0915f01610a9b565b90565b6100fc565b91610aed939192610ae060408201945f8301906105a1565b6020818503910152610962565b90565b610af86100f2565b3d5f823e3d90fd5b602090610b0b6109f2565b50610b1e610b196001610a0f565b6102f0565b610b4863e3f756de610b53610b325f610a38565b9496610b3c6100f2565b97889687958695610a81565b855260048501610ac8565b03915afa908115610b97575f91610b69575b5090565b610b8a915060203d8111610b90575b610b828183610a58565b810190610aaa565b5f610b65565b503d610b78565b610af0565b91903392610bb2610bac85610f39565b15610353565b610bc357610bc1929350610be9565b565b610be584610bcf6100f2565b91829163fa5cd00f60e01b8352600483016105ae565b0390fd5b90610bfe91610bf98183906110f7565b610c00565b565b90610c0c9033926111b6565b90610c4c610c3a7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107bb565b92610c436100f2565b9182918261081a565b0390a2565b90610c5b91610b9c565b565b90610c6f91610c6a6111f7565b610d53565b565b60a01c90565b60ff1690565b610c89610c8e91610c71565b610c77565b90565b610c9b9054610c7d565b90565b60a01b90565b90610cb360ff60a01b91610c9e565b9181191691161790565b610cc690610353565b90565b90565b90610ce1610cdc610ce892610cbd565b610cc9565b8254610ca4565b9055565b610cf5906102c8565b90565b610d0190610cec565b90565b5f1b90565b90610d1a60018060a01b0391610d04565b9181191691161790565b610d2d90610cec565b90565b90565b90610d48610d43610d4f92610d24565b610d30565b8254610d09565b9055565b610d5d6001610c91565b610dcc5781610d7c610d76610d715f610a38565b6103e4565b916103e4565b14610da957610da2610d9b610da793610d96600180610ccc565b610cf8565b6001610d33565b6110ec565b565b610db16100f2565b632e7f3c7f60e11b815280610dc860048201610185565b0390fd5b610dd46100f2565b62dc149f60e41b815280610dea60048201610185565b0390fd5b90610df891610c5d565b565b90602091610e066109f2565b50610e3c610e1c610e176001610a0f565b6102f0565b91610e4763e3f756de919496610e306100f2565b97889687958695610a81565b855260048501610ac8565b03915afa908115610e8b575f91610e5d575b5090565b610e7e915060203d8111610e84575b610e768183610a58565b810190610aaa565b5f610e59565b503d610e6c565b610af0565b610e986111f7565b610ea0610ea2565b565b610eb3610eae5f610a38565b61126f565b565b610ebd610e90565b565b5f90565b60018060a01b031690565b610eda610edf916109f6565b610ec3565b90565b610eec9054610ece565b90565b610ef7610ebf565b50610f015f610ee2565b90565b610f0f5f80926107cb565b0190565b90610f3691610f2960408201925f8301906105a1565b6020818303910152610f04565b90565b6020610f8191610f476109f2565b50610f5a610f556001610a0f565b6102f0565b610f7663e3f756de610f6a6100f2565b95869485938493610a81565b835260048301610f13565b03915afa908115610fc5575f91610f97575b5090565b610fb8915060203d8111610fbe575b610fb08183610a58565b810190610aaa565b5f610f93565b503d610fa6565b610af0565b610fdb90610fd66111f7565b610fdd565b565b80610ff8610ff2610fed5f610a38565b6103e4565b916103e4565b146110525761101061100982610cf8565b6001610d33565b61103a7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916107bb565b906110436100f2565b8061104d81610185565b0390a2565b61105a6100f2565b632e7f3c7f60e11b81528061107160048201610185565b0390fd5b61107e90610fca565b565b6110919061108c6111f7565b611093565b565b806110ae6110a86110a35f610a38565b6103e4565b916103e4565b146110be576110bc9061126f565b565b6110e86110ca5f610a38565b6110d26100f2565b918291631e4fbdf760e01b8352600483016105ae565b0390fd5b6110f590611080565b565b61110a9161110491610b00565b15610353565b61111057565b6111186100f2565b6360c054b160e11b81528061112f60048201610185565b0390fd5b606090565b60ff60f81b1690565b60f81b90565b61115b61115661116092610706565b611141565b611138565b90565b90565b61117261117791611138565b611163565b9052565b905090565b909182611190816111979361117b565b8093610957565b0190565b806111ac6001926111b39694611166565b0191611180565b90565b6111f4906111c2611133565b506111e56111cf5f611147565b91936111d96100f2565b9485936020850161119b565b60208201810382520382610a58565b90565b6111ff610eef565b61121861121261120d6112ce565b6103e4565b916103e4565b0361121f57565b61124861122a6112ce565b6112326100f2565b91829163118cdaa760e01b8352600483016105ae565b0390fd5b90565b9061126461125f61126b926107bb565b61124c565b8254610d09565b9055565b6112785f610ee2565b611282825f61124f565b906112b66112b07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107bb565b916107bb565b916112bf6100f2565b806112c981610185565b0390a3565b6112d6610ebf565b50339056fea264697066735822122063efef5f2b12b87f411480aae1ac0a5a91cb92b070e45f697a1840cece619ef764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x06\xB1V[a\0\x1D_5a\0\xECV[\x80c\x0B\x83$\x9D\x14a\0\xE7W\x80c5\x14\xD3{\x14a\0\xE2W\x80c;\xB8:d\x14a\0\xDDW\x80c=\xFB^\xE7\x14a\0\xD8W\x80cF\xE2\xCC\t\x14a\0\xD3W\x80cH\\\xC9U\x14a\0\xCEW\x80ca\xDE\x91\xCC\x14a\0\xC9W\x80cqP\x18\xA6\x14a\0\xC4W\x80cw\xBF\xDD\x19\x14a\0\xBFW\x80c\x8D\xA5\xCB[\x14a\0\xBAW\x80c\xBA\xBC\xC59\x14a\0\xB5W\x80c\xD4\xF0\xEBM\x14a\0\xB0Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06~V[a\x06KV[a\x06\x16V[a\x05\xC3V[a\x05lV[a\x04\xF0V[a\x04\xBAV[a\x04@V[a\x03\xB0V[a\x03zV[a\x03\x1EV[a\x023V[a\x01\x8AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01JW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01EW` \x01\x92` \x83\x02\x84\x01\x11a\x01@WV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x01\x80W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01{Wa\x01w\x92\x01a\x01\x10V[\x90\x91V[a\x01\0V[a\0\xFCV[_\x01\x90V[4a\x01\xB9Wa\x01\xA3a\x01\x9D6`\x04a\x01OV[\x90a\x08\xE7V[a\x01\xABa\0\xF2V[\x80a\x01\xB5\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xF8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xF3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xEEWV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x02.W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02)Wa\x02%\x92\x01a\x01\xBEV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x02bWa\x02La\x02F6`\x04a\x01\xFDV[\x90a\t\xE6V[a\x02Ta\0\xF2V[\x80a\x02^\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x02qWV[a\0\xFCV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x95\x90`\x08a\x02\x9A\x93\x02a\x02vV[a\x02zV[\x90V[\x90a\x02\xA8\x91Ta\x02\x85V[\x90V[a\x02\xB7`\x01_\x90a\x02\x9DV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\xDCa\x02\xD7a\x02\xE1\x92a\x02\xBAV[a\x02\xC5V[a\x02\xBAV[\x90V[a\x02\xED\x90a\x02\xC8V[\x90V[a\x02\xF9\x90a\x02\xE4V[\x90V[a\x03\x05\x90a\x02\xF0V[\x90RV[\x91\x90a\x03\x1C\x90_` \x85\x01\x94\x01\x90a\x02\xFCV[V[4a\x03NWa\x03.6`\x04a\x02gV[a\x03Ja\x039a\x02\xABV[a\x03Aa\0\xF2V[\x91\x82\x91\x82a\x03\tV[\x03\x90\xF3[a\0\xF8V[\x15\x15\x90V[a\x03a\x90a\x03SV[\x90RV[\x91\x90a\x03x\x90_` \x85\x01\x94\x01\x90a\x03XV[V[4a\x03\xABWa\x03\xA7a\x03\x96a\x03\x906`\x04a\x01\xFDV[\x90a\x0B\0V[a\x03\x9Ea\0\xF2V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\0\xF8V[4a\x03\xDFWa\x03\xC9a\x03\xC36`\x04a\x01\xFDV[\x90a\x0CQV[a\x03\xD1a\0\xF2V[\x80a\x03\xDB\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[a\x03\xED\x90a\x02\xBAV[\x90V[a\x03\xF9\x81a\x03\xE4V[\x03a\x04\0WV[_\x80\xFD[\x90P5\x90a\x04\x11\x82a\x03\xF0V[V[\x91\x90`@\x83\x82\x03\x12a\x04;W\x80a\x04/a\x048\x92_\x86\x01a\x04\x04V[\x93` \x01a\x04\x04V[\x90V[a\0\xFCV[4a\x04oWa\x04Ya\x04S6`\x04a\x04\x13V[\x90a\r\xEEV[a\x04aa\0\xF2V[\x80a\x04k\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x91\x90\x91`@\x81\x84\x03\x12a\x04\xB5Wa\x04\x8D\x83_\x83\x01a\x04\x04V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xB0Wa\x04\xAC\x92\x01a\x01\xBEV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x04\xEBWa\x04\xE7a\x04\xD6a\x04\xD06`\x04a\x04tV[\x91a\r\xFAV[a\x04\xDEa\0\xF2V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\0\xF8V[4a\x05\x1EWa\x05\x006`\x04a\x02gV[a\x05\x08a\x0E\xB5V[a\x05\x10a\0\xF2V[\x80a\x05\x1A\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05S\x90a\x05GV[\x90RV[\x91\x90a\x05j\x90_` \x85\x01\x94\x01\x90a\x05JV[V[4a\x05\x9CWa\x05|6`\x04a\x02gV[a\x05\x98a\x05\x87a\x05#V[a\x05\x8Fa\0\xF2V[\x91\x82\x91\x82a\x05WV[\x03\x90\xF3[a\0\xF8V[a\x05\xAA\x90a\x03\xE4V[\x90RV[\x91\x90a\x05\xC1\x90_` \x85\x01\x94\x01\x90a\x05\xA1V[V[4a\x05\xF3Wa\x05\xD36`\x04a\x02gV[a\x05\xEFa\x05\xDEa\x0E\xEFV[a\x05\xE6a\0\xF2V[\x91\x82\x91\x82a\x05\xAEV[\x03\x90\xF3[a\0\xF8V[\x90` \x82\x82\x03\x12a\x06\x11Wa\x06\x0E\x91_\x01a\x04\x04V[\x90V[a\0\xFCV[4a\x06FWa\x06Ba\x061a\x06,6`\x04a\x05\xF8V[a\x0F9V[a\x069a\0\xF2V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\0\xF8V[4a\x06yWa\x06ca\x06^6`\x04a\x05\xF8V[a\x10uV[a\x06ka\0\xF2V[\x80a\x06u\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[4a\x06\xACWa\x06\x96a\x06\x916`\x04a\x05\xF8V[a\x10\xECV[a\x06\x9Ea\0\xF2V[\x80a\x06\xA8\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[\x91\x903\x92a\x06\xCBa\x06\xC5\x85a\x0F9V[\x15a\x03SV[a\x06\xDCWa\x06\xDA\x92\x93Pa\x082V[V[a\x06\xFE\x84a\x06\xE8a\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[P\x90V[\x90V[a\x07\x1Da\x07\x18a\x07\"\x92a\x07\x06V[a\x02\xC5V[a\x05GV[\x90V[`\x01a\x071\x91\x01a\x05GV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x07\x96W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07\x91W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x07\x8CWV[a\x07PV[a\x07LV[a\x07HV[\x90\x82\x10\x15a\x07\xB6W` a\x07\xB2\x92\x02\x81\x01\x90a\x07TV[\x90\x91V[a\x074V[a\x07\xC4\x90a\x02\xE4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x08\x08a\x08\x11` \x93a\x08\x16\x93a\x07\xFF\x81a\x07\xC7V[\x93\x84\x80\x93a\x07\xCBV[\x95\x86\x91\x01a\x07\xD4V[a\x07\xDFV[\x01\x90V[a\x08/\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\xE9V[\x90V[\x91\x90\x91a\x08@\x81\x84\x90a\x07\x02V[\x91a\x08J_a\x07\tV[[\x80a\x08^a\x08X\x86a\x05GV[\x91a\x05GV[\x10\x15a\x08\xE0Wa\x08\xDB\x90a\x08}a\x08w\x85\x88\x84\x91a\x07\x9BV[\x90a\x10\xF7V[3a\x08\x93a\x08\x8D\x86\x89\x85\x91a\x07\x9BV[\x90a\x11\xB6V[\x90a\x08\xD3a\x08\xC1\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xBBV[\x92a\x08\xCAa\0\xF2V[\x91\x82\x91\x82a\x08\x1AV[\x03\x90\xA2a\x07%V[a\x08KV[P\x92PPPV[\x90a\x08\xF1\x91a\x06\xB5V[V[\x91\x903\x92a\t\ta\t\x03\x85a\x0F9V[\x15a\x03SV[a\t\x1AWa\t\x18\x92\x93Pa\t@V[V[a\t<\x84a\t&a\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[\x90a\tU\x91a\tP\x81\x83\x90a\x10\xF7V[a\t\x9FV[V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\t|\x81a\tu\x81a\t\x81\x95a\x07\xCBV[\x80\x95a\tWV[a\x07\xDFV[\x01\x90V[\x90\x91a\t\x9C\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\tbV[\x90V[3\x90\x91a\t\xCC\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xBBV[\x92a\t\xE1a\t\xD8a\0\xF2V[\x92\x83\x92\x83a\t\x85V[\x03\x90\xA2V[\x90a\t\xF0\x91a\x08\xF3V[V[_\x90V[_\x1C\x90V[a\n\x07a\n\x0C\x91a\t\xF6V[a\x02zV[\x90V[a\n\x19\x90Ta\t\xFBV[\x90V[a\n0a\n+a\n5\x92a\x07\x06V[a\x02\xC5V[a\x02\xBAV[\x90V[a\nA\x90a\n\x1CV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\nb\x90a\x07\xDFV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n|W`@RV[a\nDV[`\xE0\x1B\x90V[a\n\x90\x81a\x03SV[\x03a\n\x97WV[_\x80\xFD[\x90PQ\x90a\n\xA8\x82a\n\x87V[V[\x90` \x82\x82\x03\x12a\n\xC3Wa\n\xC0\x91_\x01a\n\x9BV[\x90V[a\0\xFCV[\x91a\n\xED\x93\x91\x92a\n\xE0`@\x82\x01\x94_\x83\x01\x90a\x05\xA1V[` \x81\x85\x03\x91\x01Ra\tbV[\x90V[a\n\xF8a\0\xF2V[=_\x82>=\x90\xFD[` \x90a\x0B\x0Ba\t\xF2V[Pa\x0B\x1Ea\x0B\x19`\x01a\n\x0FV[a\x02\xF0V[a\x0BHc\xE3\xF7V\xDEa\x0BSa\x0B2_a\n8V[\x94\x96a\x0B<a\0\xF2V[\x97\x88\x96\x87\x95\x86\x95a\n\x81V[\x85R`\x04\x85\x01a\n\xC8V[\x03\x91Z\xFA\x90\x81\x15a\x0B\x97W_\x91a\x0BiW[P\x90V[a\x0B\x8A\x91P` =\x81\x11a\x0B\x90W[a\x0B\x82\x81\x83a\nXV[\x81\x01\x90a\n\xAAV[_a\x0BeV[P=a\x0BxV[a\n\xF0V[\x91\x903\x92a\x0B\xB2a\x0B\xAC\x85a\x0F9V[\x15a\x03SV[a\x0B\xC3Wa\x0B\xC1\x92\x93Pa\x0B\xE9V[V[a\x0B\xE5\x84a\x0B\xCFa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[\x90a\x0B\xFE\x91a\x0B\xF9\x81\x83\x90a\x10\xF7V[a\x0C\0V[V[\x90a\x0C\x0C\x903\x92a\x11\xB6V[\x90a\x0CLa\x0C:\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xBBV[\x92a\x0CCa\0\xF2V[\x91\x82\x91\x82a\x08\x1AV[\x03\x90\xA2V[\x90a\x0C[\x91a\x0B\x9CV[V[\x90a\x0Co\x91a\x0Cja\x11\xF7V[a\rSV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0C\x89a\x0C\x8E\x91a\x0CqV[a\x0CwV[\x90V[a\x0C\x9B\x90Ta\x0C}V[\x90V[`\xA0\x1B\x90V[\x90a\x0C\xB3`\xFF`\xA0\x1B\x91a\x0C\x9EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xC6\x90a\x03SV[\x90V[\x90V[\x90a\x0C\xE1a\x0C\xDCa\x0C\xE8\x92a\x0C\xBDV[a\x0C\xC9V[\x82Ta\x0C\xA4V[\x90UV[a\x0C\xF5\x90a\x02\xC8V[\x90V[a\r\x01\x90a\x0C\xECV[\x90V[_\x1B\x90V[\x90a\r\x1A`\x01\x80`\xA0\x1B\x03\x91a\r\x04V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r-\x90a\x0C\xECV[\x90V[\x90V[\x90a\rHa\rCa\rO\x92a\r$V[a\r0V[\x82Ta\r\tV[\x90UV[a\r]`\x01a\x0C\x91V[a\r\xCCW\x81a\r|a\rva\rq_a\n8V[a\x03\xE4V[\x91a\x03\xE4V[\x14a\r\xA9Wa\r\xA2a\r\x9Ba\r\xA7\x93a\r\x96`\x01\x80a\x0C\xCCV[a\x0C\xF8V[`\x01a\r3V[a\x10\xECV[V[a\r\xB1a\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\r\xC8`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\r\xD4a\0\xF2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\r\xEA`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[\x90a\r\xF8\x91a\x0C]V[V[\x90` \x91a\x0E\x06a\t\xF2V[Pa\x0E<a\x0E\x1Ca\x0E\x17`\x01a\n\x0FV[a\x02\xF0V[\x91a\x0EGc\xE3\xF7V\xDE\x91\x94\x96a\x0E0a\0\xF2V[\x97\x88\x96\x87\x95\x86\x95a\n\x81V[\x85R`\x04\x85\x01a\n\xC8V[\x03\x91Z\xFA\x90\x81\x15a\x0E\x8BW_\x91a\x0E]W[P\x90V[a\x0E~\x91P` =\x81\x11a\x0E\x84W[a\x0Ev\x81\x83a\nXV[\x81\x01\x90a\n\xAAV[_a\x0EYV[P=a\x0ElV[a\n\xF0V[a\x0E\x98a\x11\xF7V[a\x0E\xA0a\x0E\xA2V[V[a\x0E\xB3a\x0E\xAE_a\n8V[a\x12oV[V[a\x0E\xBDa\x0E\x90V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\xDAa\x0E\xDF\x91a\t\xF6V[a\x0E\xC3V[\x90V[a\x0E\xEC\x90Ta\x0E\xCEV[\x90V[a\x0E\xF7a\x0E\xBFV[Pa\x0F\x01_a\x0E\xE2V[\x90V[a\x0F\x0F_\x80\x92a\x07\xCBV[\x01\x90V[\x90a\x0F6\x91a\x0F)`@\x82\x01\x92_\x83\x01\x90a\x05\xA1V[` \x81\x83\x03\x91\x01Ra\x0F\x04V[\x90V[` a\x0F\x81\x91a\x0FGa\t\xF2V[Pa\x0FZa\x0FU`\x01a\n\x0FV[a\x02\xF0V[a\x0Fvc\xE3\xF7V\xDEa\x0Fja\0\xF2V[\x95\x86\x94\x85\x93\x84\x93a\n\x81V[\x83R`\x04\x83\x01a\x0F\x13V[\x03\x91Z\xFA\x90\x81\x15a\x0F\xC5W_\x91a\x0F\x97W[P\x90V[a\x0F\xB8\x91P` =\x81\x11a\x0F\xBEW[a\x0F\xB0\x81\x83a\nXV[\x81\x01\x90a\n\xAAV[_a\x0F\x93V[P=a\x0F\xA6V[a\n\xF0V[a\x0F\xDB\x90a\x0F\xD6a\x11\xF7V[a\x0F\xDDV[V[\x80a\x0F\xF8a\x0F\xF2a\x0F\xED_a\n8V[a\x03\xE4V[\x91a\x03\xE4V[\x14a\x10RWa\x10\x10a\x10\t\x82a\x0C\xF8V[`\x01a\r3V[a\x10:\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x07\xBBV[\x90a\x10Ca\0\xF2V[\x80a\x10M\x81a\x01\x85V[\x03\x90\xA2V[a\x10Za\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10q`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\x10~\x90a\x0F\xCAV[V[a\x10\x91\x90a\x10\x8Ca\x11\xF7V[a\x10\x93V[V[\x80a\x10\xAEa\x10\xA8a\x10\xA3_a\n8V[a\x03\xE4V[\x91a\x03\xE4V[\x14a\x10\xBEWa\x10\xBC\x90a\x12oV[V[a\x10\xE8a\x10\xCA_a\n8V[a\x10\xD2a\0\xF2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[a\x10\xF5\x90a\x10\x80V[V[a\x11\n\x91a\x11\x04\x91a\x0B\0V[\x15a\x03SV[a\x11\x10WV[a\x11\x18a\0\xF2V[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\x11/`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x11[a\x11Va\x11`\x92a\x07\x06V[a\x11AV[a\x118V[\x90V[\x90V[a\x11ra\x11w\x91a\x118V[a\x11cV[\x90RV[\x90P\x90V[\x90\x91\x82a\x11\x90\x81a\x11\x97\x93a\x11{V[\x80\x93a\tWV[\x01\x90V[\x80a\x11\xAC`\x01\x92a\x11\xB3\x96\x94a\x11fV[\x01\x91a\x11\x80V[\x90V[a\x11\xF4\x90a\x11\xC2a\x113V[Pa\x11\xE5a\x11\xCF_a\x11GV[\x91\x93a\x11\xD9a\0\xF2V[\x94\x85\x93` \x85\x01a\x11\x9BV[` \x82\x01\x81\x03\x82R\x03\x82a\nXV[\x90V[a\x11\xFFa\x0E\xEFV[a\x12\x18a\x12\x12a\x12\ra\x12\xCEV[a\x03\xE4V[\x91a\x03\xE4V[\x03a\x12\x1FWV[a\x12Ha\x12*a\x12\xCEV[a\x122a\0\xF2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xAEV[\x03\x90\xFD[\x90V[\x90a\x12da\x12_a\x12k\x92a\x07\xBBV[a\x12LV[\x82Ta\r\tV[\x90UV[a\x12x_a\x0E\xE2V[a\x12\x82\x82_a\x12OV[\x90a\x12\xB6a\x12\xB0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x07\xBBV[\x91a\x07\xBBV[\x91a\x12\xBFa\0\xF2V[\x80a\x12\xC9\x81a\x01\x85V[\x03\x90\xA3V[a\x12\xD6a\x0E\xBFV[P3\x90V\xFE\xA2dipfsX\"\x12 c\xEF\xEF_+\x12\xB8\x7FA\x14\x80\xAA\xE1\xAC\nZ\x91\xCB\x92\xB0p\xE4_iz\x18@\xCE\xCEa\x9E\xF7dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CalldataNotAllowed()` and selector `0xc180a962`.
```solidity
error CalldataNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataNotAllowed()";
            const SELECTOR: [u8; 4] = [193u8, 128u8, 169u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _l3ChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._l3ChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _l3ChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._l3ChainId),
                )
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowedWithCalldata(address,bytes)` and selector `0x61de91cc`.
```solidity
function isAllowedWithCalldata(address proposer, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedWithCalldataCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowedWithCalldata(address,bytes)`](isAllowedWithCalldataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedWithCalldataReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedWithCalldataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedWithCalldataCall) -> Self {
                    (value.proposer, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAllowedWithCalldataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedWithCalldataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedWithCalldataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAllowedWithCalldataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedWithCalldataCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedWithCalldataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowedWithCalldata(address,bytes)";
            const SELECTOR: [u8; 4] = [97u8, 222u8, 145u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l3ChainId()` and selector `0x77bfdd19`.
```solidity
function l3ChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdCall {}
    ///Container type for the return parameters of the [`l3ChainId()`](l3ChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l3ChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l3ChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l3ChainId()";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 221u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `requirementModule()` and selector `0x3bb83a64`.
```solidity
function requirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleCall {}
    ///Container type for the return parameters of the [`requirementModule()`](requirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requirementModule()";
            const SELECTOR: [u8; 4] = [59u8, 184u8, 58u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OptionOneMetabasedSequencerChain`](self) function calls.
    pub enum OptionOneMetabasedSequencerChainCalls {
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isAllowedWithCalldata(isAllowedWithCalldataCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        l3ChainId(l3ChainIdCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        requirementModule(requirementModuleCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl OptionOneMetabasedSequencerChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [53u8, 20u8, 211u8, 123u8],
            [59u8, 184u8, 58u8, 100u8],
            [61u8, 251u8, 94u8, 231u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [97u8, 222u8, 145u8, 204u8],
            [113u8, 80u8, 24u8, 166u8],
            [119u8, 191u8, 221u8, 25u8],
            [141u8, 165u8, 203u8, 91u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OptionOneMetabasedSequencerChainCalls {
        const NAME: &'static str = "OptionOneMetabasedSequencerChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowedWithCalldata(_) => {
                    <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l3ChainId(_) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requirementModule(_) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::processBulkTransactions,
                            )
                    }
                    processBulkTransactions
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::processTransactionRaw,
                            )
                    }
                    processTransactionRaw
                },
                {
                    fn requirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <requirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::requirementModule,
                            )
                    }
                    requirementModule
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::isCalldataAllowed,
                            )
                    }
                    isCalldataAllowed
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::processTransaction,
                            )
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn isAllowedWithCalldata(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::isAllowedWithCalldata,
                            )
                    }
                    isAllowedWithCalldata
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn l3ChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <l3ChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::l3ChainId)
                    }
                    l3ChainId
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::owner)
                    }
                    owner
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowedWithCalldata(inner) => {
                    <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowedWithCalldata(inner) => {
                    <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`OptionOneMetabasedSequencerChain`](self) custom errors.
    pub enum OptionOneMetabasedSequencerChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        CalldataNotAllowed(CalldataNotAllowed),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl OptionOneMetabasedSequencerChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [193u8, 128u8, 169u8, 98u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OptionOneMetabasedSequencerChainErrors {
        const NAME: &'static str = "OptionOneMetabasedSequencerChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataNotAllowed(_) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn CalldataNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <CalldataNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::CalldataNotAllowed,
                            )
                    }
                    CalldataNotAllowed
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainErrors::NotAllowed)
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`OptionOneMetabasedSequencerChain`](self) events.
    pub enum OptionOneMetabasedSequencerChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl OptionOneMetabasedSequencerChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for OptionOneMetabasedSequencerChainEvents {
        const NAME: &'static str = "OptionOneMetabasedSequencerChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for OptionOneMetabasedSequencerChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OptionOneMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`OptionOneMetabasedSequencerChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OptionOneMetabasedSequencerChainInstance<T, P, N> {
        OptionOneMetabasedSequencerChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            OptionOneMetabasedSequencerChainInstance<T, P, N>,
        >,
    > {
        OptionOneMetabasedSequencerChainInstance::<T, P, N>::deploy(provider, _l3ChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        OptionOneMetabasedSequencerChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _l3ChainId)
    }
    /**A [`OptionOneMetabasedSequencerChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OptionOneMetabasedSequencerChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OptionOneMetabasedSequencerChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for OptionOneMetabasedSequencerChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OptionOneMetabasedSequencerChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptionOneMetabasedSequencerChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OptionOneMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`OptionOneMetabasedSequencerChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<OptionOneMetabasedSequencerChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _l3ChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _l3ChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > OptionOneMetabasedSequencerChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> OptionOneMetabasedSequencerChainInstance<T, P, N> {
            OptionOneMetabasedSequencerChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptionOneMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isAllowedWithCalldata`] function.
        pub fn isAllowedWithCalldata(
            &self,
            proposer: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedWithCalldataCall, N> {
            self.call_builder(
                &isAllowedWithCalldataCall {
                    proposer,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`l3ChainId`] function.
        pub fn l3ChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l3ChainIdCall, N> {
            self.call_builder(&l3ChainIdCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`requirementModule`] function.
        pub fn requirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, requirementModuleCall, N> {
            self.call_builder(&requirementModuleCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptionOneMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
