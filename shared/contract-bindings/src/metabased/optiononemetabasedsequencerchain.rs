/**

Generated by the following Solidity interface...
```solidity
interface OptionOneMetabasedSequencerChain {
    error AlreadyInitialized();
    error CalldataNotAllowed();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _l3ChainId);

    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function isAllowed(address proposer, bytes memory data) external view returns (bool);
    function isAllowedWithCalldata(address proposer, bytes memory data) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function l3ChainId() external view returns (uint256);
    function owner() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function requirementModule() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_l3ChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowedWithCalldata",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l3ChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "requirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ConsolidatedPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OptionOneMetabasedSequencerChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b61129461041c823960805181610535015261129490f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b6101076116b0803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f4c3320636861696e2049442063616e6e6f742062652030000000000000000000910152565b610169601760209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf610234565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60a01b90565b906101f660ff60a01b916101e1565b9181191691161790565b151590565b61020e90610200565b90565b90565b9061022961022461023092610205565b610211565b82546101e7565b9055565b61023d3361024a565b6102485f6001610214565b565b610253906102b6565b565b60018060a01b031690565b61027461026f6102799261010a565b61010d565b610255565b90565b61028590610260565b90565b61029190610255565b90565b61029d90610288565b9052565b91906102b4905f60208501940190610294565b565b806102d16102cb6102c65f61027c565b610288565b91610288565b146102e1576102df906103bc565b565b61030b6102ed5f61027c565b6102f561003d565b918291631e4fbdf760e01b8352600483016102a1565b0390fd5b5f1c90565b60018060a01b031690565b61032b6103309161030f565b610314565b90565b61033d905461031f565b90565b5f1b90565b9061035660018060a01b0391610340565b9181191691161790565b61037461036f61037992610255565b61010d565b610255565b90565b61038590610360565b90565b6103919061037c565b90565b90565b906103ac6103a76103b392610388565b610394565b8254610345565b9055565b5f0190565b6103c55f610333565b6103cf825f610397565b906104036103fd7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610388565b91610388565b9161040c61003d565b80610416816103b7565b0390a356fe60806040526004361015610013575b6106f7565b61001d5f356100fc565b80630b83249d146100f75780633514d37b146100f25780633bb83a64146100ed5780633dfb5ee7146100e857806346e2cc09146100e3578063485cc955146100de57806361de91cc146100d9578063715018a6146100d457806377bfdd19146100cf5780638da5cb5b146100ca578063babcc539146100c5578063d4f0eb4d146100c0578063e3f756de146100bb5763f2fde38b0361000e576106c4565b61068e565b61065b565b610626565b6105d3565b61057c565b610500565b6104ca565b610450565b6103c0565b61038a565b61032e565b610243565b61019a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561015a5781359167ffffffffffffffff831161015557602001926020830284011161015057565b61011c565b610118565b610114565b90602082820312610190575f82013567ffffffffffffffff811161018b576101879201610120565b9091565b610110565b61010c565b5f0190565b346101c9576101b36101ad36600461015f565b9061082b565b6101bb610102565b806101c581610195565b0390f35b610108565b909182601f830112156102085781359167ffffffffffffffff83116102035760200192600183028401116101fe57565b61011c565b610118565b610114565b9060208282031261023e575f82013567ffffffffffffffff81116102395761023592016101ce565b9091565b610110565b61010c565b346102725761025c61025636600461020d565b9061092a565b610264610102565b8061026e81610195565b0390f35b610108565b5f91031261028157565b61010c565b1c90565b60018060a01b031690565b6102a59060086102aa9302610286565b61028a565b90565b906102b89154610295565b90565b6102c760015f906102ad565b90565b60018060a01b031690565b90565b6102ec6102e76102f1926102ca565b6102d5565b6102ca565b90565b6102fd906102d8565b90565b610309906102f4565b90565b61031590610300565b9052565b919061032c905f6020850194019061030c565b565b3461035e5761033e366004610277565b61035a6103496102bb565b610351610102565b91829182610319565b0390f35b610108565b151590565b61037190610363565b9052565b9190610388905f60208501940190610368565b565b346103bb576103b76103a66103a036600461020d565b90610a8c565b6103ae610102565b91829182610375565b0390f35b610108565b346103ef576103d96103d336600461020d565b90610b28565b6103e1610102565b806103eb81610195565b0390f35b610108565b6103fd906102ca565b90565b610409816103f4565b0361041057565b5f80fd5b9050359061042182610400565b565b919060408382031261044b578061043f610448925f8601610414565b93602001610414565b90565b61010c565b3461047f57610469610463366004610423565b90610d17565b610471610102565b8061047b81610195565b0390f35b610108565b9190916040818403126104c55761049d835f8301610414565b92602082013567ffffffffffffffff81116104c0576104bc92016101ce565b9091565b610110565b61010c565b346104fb576104f76104e66104e0366004610484565b91610d23565b6104ee610102565b91829182610375565b0390f35b610108565b3461052e57610510366004610277565b610518610dde565b610520610102565b8061052a81610195565b0390f35b610108565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61056390610557565b9052565b919061057a905f6020850194019061055a565b565b346105ac5761058c366004610277565b6105a8610597610533565b61059f610102565b91829182610567565b0390f35b610108565b6105ba906103f4565b9052565b91906105d1905f602085019401906105b1565b565b34610603576105e3366004610277565b6105ff6105ee610e18565b6105f6610102565b918291826105be565b0390f35b610108565b906020828203126106215761061e915f01610414565b90565b61010c565b346106565761065261064161063c366004610608565b610e62565b610649610102565b91829182610375565b0390f35b610108565b346106895761067361066e366004610608565b610f9e565b61067b610102565b8061068581610195565b0390f35b610108565b346106bf576106bb6106aa6106a4366004610484565b91610fa9565b6106b2610102565b91829182610375565b0390f35b610108565b346106f2576106dc6106d7366004610608565b6110ab565b6106e4610102565b806106ee81610195565b0390f35b610108565b5f80fd5b5090565b90565b61071661071161071b926106ff565b6102d5565b610557565b90565b600161072a9101610557565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561078f570180359067ffffffffffffffff821161078a5760200191600182023603831361078557565b610749565b610745565b610741565b908210156107af5760206107ab920281019061074d565b9091565b61072d565b6107bd906102f4565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61080161080a60209361080f936107f8816107c0565b938480936107c4565b958691016107cd565b6107d8565b0190565b6108289160208201915f8184039101526107e2565b90565b9190916108398184906106fb565b916108435f610702565b5b8061085761085186610557565b91610557565b10156108db576108d6906108773361087186898591610794565b91610fa9565b503361088e61088886898591610794565b90611139565b906108ce6108bc7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107b4565b926108c5610102565b91829182610813565b0390a261071e565b610844565b5092505050565b90825f939282370152565b9190610907816109008161090c956107c4565b80956108e2565b6107d8565b0190565b90916109279260208301925f8185039101526108ed565b90565b61093633828491610fa9565b503390916109647f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107b4565b92610979610970610102565b92839283610910565b0390a2565b5f90565b5f1c90565b61099361099891610982565b61028a565b90565b6109a59054610987565b90565b6109bc6109b76109c1926106ff565b6102d5565b6102ca565b90565b6109cd906109a8565b90565b634e487b7160e01b5f52604160045260245ffd5b906109ee906107d8565b810190811067ffffffffffffffff821117610a0857604052565b6109d0565b60e01b90565b610a1c81610363565b03610a2357565b5f80fd5b90505190610a3482610a13565b565b90602082820312610a4f57610a4c915f01610a27565b90565b61010c565b91610a79939192610a6c60408201945f8301906105b1565b60208185039101526108ed565b90565b610a84610102565b3d5f823e3d90fd5b602090610a9761097e565b50610aaa610aa5600161099b565b610300565b610ad463e3f756de610adf610abe5f6109c4565b9496610ac8610102565b97889687958695610a0d565b855260048501610a54565b03915afa908115610b23575f91610af5575b5090565b610b16915060203d8111610b1c575b610b0e81836109e4565b810190610a36565b5f610af1565b503d610b04565b610a7c565b90610b4190610b3933848391610fa9565b503392611139565b90610b81610b6f7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107b4565b92610b78610102565b91829182610813565b0390a2565b90610b9891610b9361117a565b610c7c565b565b60a01c90565b60ff1690565b610bb2610bb791610b9a565b610ba0565b90565b610bc49054610ba6565b90565b60a01b90565b90610bdc60ff60a01b91610bc7565b9181191691161790565b610bef90610363565b90565b90565b90610c0a610c05610c1192610be6565b610bf2565b8254610bcd565b9055565b610c1e906102d8565b90565b610c2a90610c15565b90565b5f1b90565b90610c4360018060a01b0391610c2d565b9181191691161790565b610c5690610c15565b90565b90565b90610c71610c6c610c7892610c4d565b610c59565b8254610c32565b9055565b610c866001610bba565b610cf55781610ca5610c9f610c9a5f6109c4565b6103f4565b916103f4565b14610cd257610ccb610cc4610cd093610cbf600180610bf5565b610c21565b6001610c5c565b6110ab565b565b610cda610102565b632e7f3c7f60e11b815280610cf160048201610195565b0390fd5b610cfd610102565b62dc149f60e41b815280610d1360048201610195565b0390fd5b90610d2191610b86565b565b90602091610d2f61097e565b50610d65610d45610d40600161099b565b610300565b91610d7063e3f756de919496610d59610102565b97889687958695610a0d565b855260048501610a54565b03915afa908115610db4575f91610d86575b5090565b610da7915060203d8111610dad575b610d9f81836109e4565b810190610a36565b5f610d82565b503d610d95565b610a7c565b610dc161117a565b610dc9610dcb565b565b610ddc610dd75f6109c4565b6111f2565b565b610de6610db9565b565b5f90565b60018060a01b031690565b610e03610e0891610982565b610dec565b90565b610e159054610df7565b90565b610e20610de8565b50610e2a5f610e0b565b90565b610e385f80926107c4565b0190565b90610e5f91610e5260408201925f8301906105b1565b6020818303910152610e2d565b90565b6020610eaa91610e7061097e565b50610e83610e7e600161099b565b610300565b610e9f63e3f756de610e93610102565b95869485938493610a0d565b835260048301610e3c565b03915afa908115610eee575f91610ec0575b5090565b610ee1915060203d8111610ee7575b610ed981836109e4565b810190610a36565b5f610ebc565b503d610ecf565b610a7c565b610f0490610eff61117a565b610f06565b565b80610f21610f1b610f165f6109c4565b6103f4565b916103f4565b14610f7b57610f39610f3282610c21565b6001610c5c565b610f637f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916107b4565b90610f6c610102565b80610f7681610195565b0390a2565b610f83610102565b632e7f3c7f60e11b815280610f9a60048201610195565b0390fd5b610fa790610ef3565b565b90602091610fb561097e565b50610feb610fcb610fc6600161099b565b610300565b91610ff663e3f756de919496610fdf610102565b97889687958695610a0d565b855260048501610a54565b03915afa90811561103a575f9161100c575b5090565b61102d915060203d8111611033575b61102581836109e4565b810190610a36565b5f611008565b503d61101b565b610a7c565b6110509061104b61117a565b611052565b565b8061106d6110676110625f6109c4565b6103f4565b916103f4565b1461107d5761107b906111f2565b565b6110a76110895f6109c4565b611091610102565b918291631e4fbdf760e01b8352600483016105be565b0390fd5b6110b49061103f565b565b606090565b60ff60f81b1690565b60f81b90565b6110de6110d96110e3926106ff565b6110c4565b6110bb565b90565b90565b6110f56110fa916110bb565b6110e6565b9052565b905090565b9091826111138161111a936110fe565b80936108e2565b0190565b8061112f60019261113696946110e9565b0191611103565b90565b611177906111456110b6565b506111686111525f6110ca565b919361115c610102565b9485936020850161111e565b602082018103825203826109e4565b90565b611182610e18565b61119b611195611190611251565b6103f4565b916103f4565b036111a257565b6111cb6111ad611251565b6111b5610102565b91829163118cdaa760e01b8352600483016105be565b0390fd5b90565b906111e76111e26111ee926107b4565b6111cf565b8254610c32565b9055565b6111fb5f610e0b565b611205825f6111d2565b906112396112337f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107b4565b916107b4565b91611242610102565b8061124c81610195565b0390a3565b611259610de8565b50339056fea26469706673582212204cf614bf44bf6732ca5fb411c5cf88dd1505166772f2fc4dc8f26495602cb03564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x12\x94a\x04\x1C\x829`\x80Q\x81a\x055\x01Ra\x12\x94\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x16\xB0\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FL3 chain ID cannot be 0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x17` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x024V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\xA0\x1B\x90V[\x90a\x01\xF6`\xFF`\xA0\x1B\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0E\x90a\x02\0V[\x90V[\x90V[\x90a\x02)a\x02$a\x020\x92a\x02\x05V[a\x02\x11V[\x82Ta\x01\xE7V[\x90UV[a\x02=3a\x02JV[a\x02H_`\x01a\x02\x14V[V[a\x02S\x90a\x02\xB6V[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ta\x02oa\x02y\x92a\x01\nV[a\x01\rV[a\x02UV[\x90V[a\x02\x85\x90a\x02`V[\x90V[a\x02\x91\x90a\x02UV[\x90V[a\x02\x9D\x90a\x02\x88V[\x90RV[\x91\x90a\x02\xB4\x90_` \x85\x01\x94\x01\x90a\x02\x94V[V[\x80a\x02\xD1a\x02\xCBa\x02\xC6_a\x02|V[a\x02\x88V[\x91a\x02\x88V[\x14a\x02\xE1Wa\x02\xDF\x90a\x03\xBCV[V[a\x03\x0Ba\x02\xED_a\x02|V[a\x02\xF5a\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02\xA1V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03+a\x030\x91a\x03\x0FV[a\x03\x14V[\x90V[a\x03=\x90Ta\x03\x1FV[\x90V[_\x1B\x90V[\x90a\x03V`\x01\x80`\xA0\x1B\x03\x91a\x03@V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03ta\x03oa\x03y\x92a\x02UV[a\x01\rV[a\x02UV[\x90V[a\x03\x85\x90a\x03`V[\x90V[a\x03\x91\x90a\x03|V[\x90V[\x90V[\x90a\x03\xACa\x03\xA7a\x03\xB3\x92a\x03\x88V[a\x03\x94V[\x82Ta\x03EV[\x90UV[_\x01\x90V[a\x03\xC5_a\x033V[a\x03\xCF\x82_a\x03\x97V[\x90a\x04\x03a\x03\xFD\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x03\x88V[\x91a\x03\x88V[\x91a\x04\x0Ca\0=V[\x80a\x04\x16\x81a\x03\xB7V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x06\xF7V[a\0\x1D_5a\0\xFCV[\x80c\x0B\x83$\x9D\x14a\0\xF7W\x80c5\x14\xD3{\x14a\0\xF2W\x80c;\xB8:d\x14a\0\xEDW\x80c=\xFB^\xE7\x14a\0\xE8W\x80cF\xE2\xCC\t\x14a\0\xE3W\x80cH\\\xC9U\x14a\0\xDEW\x80ca\xDE\x91\xCC\x14a\0\xD9W\x80cqP\x18\xA6\x14a\0\xD4W\x80cw\xBF\xDD\x19\x14a\0\xCFW\x80c\x8D\xA5\xCB[\x14a\0\xCAW\x80c\xBA\xBC\xC59\x14a\0\xC5W\x80c\xD4\xF0\xEBM\x14a\0\xC0W\x80c\xE3\xF7V\xDE\x14a\0\xBBWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06\xC4V[a\x06\x8EV[a\x06[V[a\x06&V[a\x05\xD3V[a\x05|V[a\x05\0V[a\x04\xCAV[a\x04PV[a\x03\xC0V[a\x03\x8AV[a\x03.V[a\x02CV[a\x01\x9AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01ZW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01UW` \x01\x92` \x83\x02\x84\x01\x11a\x01PWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x01\x90W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x8BWa\x01\x87\x92\x01a\x01 V[\x90\x91V[a\x01\x10V[a\x01\x0CV[_\x01\x90V[4a\x01\xC9Wa\x01\xB3a\x01\xAD6`\x04a\x01_V[\x90a\x08+V[a\x01\xBBa\x01\x02V[\x80a\x01\xC5\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x08W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x03W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xFEWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x02>W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x029Wa\x025\x92\x01a\x01\xCEV[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x02rWa\x02\\a\x02V6`\x04a\x02\rV[\x90a\t*V[a\x02da\x01\x02V[\x80a\x02n\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x02\x81WV[a\x01\x0CV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xA5\x90`\x08a\x02\xAA\x93\x02a\x02\x86V[a\x02\x8AV[\x90V[\x90a\x02\xB8\x91Ta\x02\x95V[\x90V[a\x02\xC7`\x01_\x90a\x02\xADV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\xECa\x02\xE7a\x02\xF1\x92a\x02\xCAV[a\x02\xD5V[a\x02\xCAV[\x90V[a\x02\xFD\x90a\x02\xD8V[\x90V[a\x03\t\x90a\x02\xF4V[\x90V[a\x03\x15\x90a\x03\0V[\x90RV[\x91\x90a\x03,\x90_` \x85\x01\x94\x01\x90a\x03\x0CV[V[4a\x03^Wa\x03>6`\x04a\x02wV[a\x03Za\x03Ia\x02\xBBV[a\x03Qa\x01\x02V[\x91\x82\x91\x82a\x03\x19V[\x03\x90\xF3[a\x01\x08V[\x15\x15\x90V[a\x03q\x90a\x03cV[\x90RV[\x91\x90a\x03\x88\x90_` \x85\x01\x94\x01\x90a\x03hV[V[4a\x03\xBBWa\x03\xB7a\x03\xA6a\x03\xA06`\x04a\x02\rV[\x90a\n\x8CV[a\x03\xAEa\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x03\xEFWa\x03\xD9a\x03\xD36`\x04a\x02\rV[\x90a\x0B(V[a\x03\xE1a\x01\x02V[\x80a\x03\xEB\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[a\x03\xFD\x90a\x02\xCAV[\x90V[a\x04\t\x81a\x03\xF4V[\x03a\x04\x10WV[_\x80\xFD[\x90P5\x90a\x04!\x82a\x04\0V[V[\x91\x90`@\x83\x82\x03\x12a\x04KW\x80a\x04?a\x04H\x92_\x86\x01a\x04\x14V[\x93` \x01a\x04\x14V[\x90V[a\x01\x0CV[4a\x04\x7FWa\x04ia\x04c6`\x04a\x04#V[\x90a\r\x17V[a\x04qa\x01\x02V[\x80a\x04{\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x91\x90\x91`@\x81\x84\x03\x12a\x04\xC5Wa\x04\x9D\x83_\x83\x01a\x04\x14V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xC0Wa\x04\xBC\x92\x01a\x01\xCEV[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x04\xFBWa\x04\xF7a\x04\xE6a\x04\xE06`\x04a\x04\x84V[\x91a\r#V[a\x04\xEEa\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x05.Wa\x05\x106`\x04a\x02wV[a\x05\x18a\r\xDEV[a\x05 a\x01\x02V[\x80a\x05*\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05c\x90a\x05WV[\x90RV[\x91\x90a\x05z\x90_` \x85\x01\x94\x01\x90a\x05ZV[V[4a\x05\xACWa\x05\x8C6`\x04a\x02wV[a\x05\xA8a\x05\x97a\x053V[a\x05\x9Fa\x01\x02V[\x91\x82\x91\x82a\x05gV[\x03\x90\xF3[a\x01\x08V[a\x05\xBA\x90a\x03\xF4V[\x90RV[\x91\x90a\x05\xD1\x90_` \x85\x01\x94\x01\x90a\x05\xB1V[V[4a\x06\x03Wa\x05\xE36`\x04a\x02wV[a\x05\xFFa\x05\xEEa\x0E\x18V[a\x05\xF6a\x01\x02V[\x91\x82\x91\x82a\x05\xBEV[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x06!Wa\x06\x1E\x91_\x01a\x04\x14V[\x90V[a\x01\x0CV[4a\x06VWa\x06Ra\x06Aa\x06<6`\x04a\x06\x08V[a\x0EbV[a\x06Ia\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x06\x89Wa\x06sa\x06n6`\x04a\x06\x08V[a\x0F\x9EV[a\x06{a\x01\x02V[\x80a\x06\x85\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[4a\x06\xBFWa\x06\xBBa\x06\xAAa\x06\xA46`\x04a\x04\x84V[\x91a\x0F\xA9V[a\x06\xB2a\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x06\xF2Wa\x06\xDCa\x06\xD76`\x04a\x06\x08V[a\x10\xABV[a\x06\xE4a\x01\x02V[\x80a\x06\xEE\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[P\x90V[\x90V[a\x07\x16a\x07\x11a\x07\x1B\x92a\x06\xFFV[a\x02\xD5V[a\x05WV[\x90V[`\x01a\x07*\x91\x01a\x05WV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x07\x8FW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07\x8AW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x07\x85WV[a\x07IV[a\x07EV[a\x07AV[\x90\x82\x10\x15a\x07\xAFW` a\x07\xAB\x92\x02\x81\x01\x90a\x07MV[\x90\x91V[a\x07-V[a\x07\xBD\x90a\x02\xF4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x08\x01a\x08\n` \x93a\x08\x0F\x93a\x07\xF8\x81a\x07\xC0V[\x93\x84\x80\x93a\x07\xC4V[\x95\x86\x91\x01a\x07\xCDV[a\x07\xD8V[\x01\x90V[a\x08(\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\xE2V[\x90V[\x91\x90\x91a\x089\x81\x84\x90a\x06\xFBV[\x91a\x08C_a\x07\x02V[[\x80a\x08Wa\x08Q\x86a\x05WV[\x91a\x05WV[\x10\x15a\x08\xDBWa\x08\xD6\x90a\x08w3a\x08q\x86\x89\x85\x91a\x07\x94V[\x91a\x0F\xA9V[P3a\x08\x8Ea\x08\x88\x86\x89\x85\x91a\x07\x94V[\x90a\x119V[\x90a\x08\xCEa\x08\xBC\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xB4V[\x92a\x08\xC5a\x01\x02V[\x91\x82\x91\x82a\x08\x13V[\x03\x90\xA2a\x07\x1EV[a\x08DV[P\x92PPPV[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\t\x07\x81a\t\0\x81a\t\x0C\x95a\x07\xC4V[\x80\x95a\x08\xE2V[a\x07\xD8V[\x01\x90V[\x90\x91a\t'\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08\xEDV[\x90V[a\t63\x82\x84\x91a\x0F\xA9V[P3\x90\x91a\td\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xB4V[\x92a\tya\tpa\x01\x02V[\x92\x83\x92\x83a\t\x10V[\x03\x90\xA2V[_\x90V[_\x1C\x90V[a\t\x93a\t\x98\x91a\t\x82V[a\x02\x8AV[\x90V[a\t\xA5\x90Ta\t\x87V[\x90V[a\t\xBCa\t\xB7a\t\xC1\x92a\x06\xFFV[a\x02\xD5V[a\x02\xCAV[\x90V[a\t\xCD\x90a\t\xA8V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\t\xEE\x90a\x07\xD8V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\x08W`@RV[a\t\xD0V[`\xE0\x1B\x90V[a\n\x1C\x81a\x03cV[\x03a\n#WV[_\x80\xFD[\x90PQ\x90a\n4\x82a\n\x13V[V[\x90` \x82\x82\x03\x12a\nOWa\nL\x91_\x01a\n'V[\x90V[a\x01\x0CV[\x91a\ny\x93\x91\x92a\nl`@\x82\x01\x94_\x83\x01\x90a\x05\xB1V[` \x81\x85\x03\x91\x01Ra\x08\xEDV[\x90V[a\n\x84a\x01\x02V[=_\x82>=\x90\xFD[` \x90a\n\x97a\t~V[Pa\n\xAAa\n\xA5`\x01a\t\x9BV[a\x03\0V[a\n\xD4c\xE3\xF7V\xDEa\n\xDFa\n\xBE_a\t\xC4V[\x94\x96a\n\xC8a\x01\x02V[\x97\x88\x96\x87\x95\x86\x95a\n\rV[\x85R`\x04\x85\x01a\nTV[\x03\x91Z\xFA\x90\x81\x15a\x0B#W_\x91a\n\xF5W[P\x90V[a\x0B\x16\x91P` =\x81\x11a\x0B\x1CW[a\x0B\x0E\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\n\xF1V[P=a\x0B\x04V[a\n|V[\x90a\x0BA\x90a\x0B93\x84\x83\x91a\x0F\xA9V[P3\x92a\x119V[\x90a\x0B\x81a\x0Bo\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xB4V[\x92a\x0Bxa\x01\x02V[\x91\x82\x91\x82a\x08\x13V[\x03\x90\xA2V[\x90a\x0B\x98\x91a\x0B\x93a\x11zV[a\x0C|V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0B\xB2a\x0B\xB7\x91a\x0B\x9AV[a\x0B\xA0V[\x90V[a\x0B\xC4\x90Ta\x0B\xA6V[\x90V[`\xA0\x1B\x90V[\x90a\x0B\xDC`\xFF`\xA0\x1B\x91a\x0B\xC7V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xEF\x90a\x03cV[\x90V[\x90V[\x90a\x0C\na\x0C\x05a\x0C\x11\x92a\x0B\xE6V[a\x0B\xF2V[\x82Ta\x0B\xCDV[\x90UV[a\x0C\x1E\x90a\x02\xD8V[\x90V[a\x0C*\x90a\x0C\x15V[\x90V[_\x1B\x90V[\x90a\x0CC`\x01\x80`\xA0\x1B\x03\x91a\x0C-V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0CV\x90a\x0C\x15V[\x90V[\x90V[\x90a\x0Cqa\x0Cla\x0Cx\x92a\x0CMV[a\x0CYV[\x82Ta\x0C2V[\x90UV[a\x0C\x86`\x01a\x0B\xBAV[a\x0C\xF5W\x81a\x0C\xA5a\x0C\x9Fa\x0C\x9A_a\t\xC4V[a\x03\xF4V[\x91a\x03\xF4V[\x14a\x0C\xD2Wa\x0C\xCBa\x0C\xC4a\x0C\xD0\x93a\x0C\xBF`\x01\x80a\x0B\xF5V[a\x0C!V[`\x01a\x0C\\V[a\x10\xABV[V[a\x0C\xDAa\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C\xF1`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0C\xFDa\x01\x02V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\r\x13`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[\x90a\r!\x91a\x0B\x86V[V[\x90` \x91a\r/a\t~V[Pa\rea\rEa\r@`\x01a\t\x9BV[a\x03\0V[\x91a\rpc\xE3\xF7V\xDE\x91\x94\x96a\rYa\x01\x02V[\x97\x88\x96\x87\x95\x86\x95a\n\rV[\x85R`\x04\x85\x01a\nTV[\x03\x91Z\xFA\x90\x81\x15a\r\xB4W_\x91a\r\x86W[P\x90V[a\r\xA7\x91P` =\x81\x11a\r\xADW[a\r\x9F\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\r\x82V[P=a\r\x95V[a\n|V[a\r\xC1a\x11zV[a\r\xC9a\r\xCBV[V[a\r\xDCa\r\xD7_a\t\xC4V[a\x11\xF2V[V[a\r\xE6a\r\xB9V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\x03a\x0E\x08\x91a\t\x82V[a\r\xECV[\x90V[a\x0E\x15\x90Ta\r\xF7V[\x90V[a\x0E a\r\xE8V[Pa\x0E*_a\x0E\x0BV[\x90V[a\x0E8_\x80\x92a\x07\xC4V[\x01\x90V[\x90a\x0E_\x91a\x0ER`@\x82\x01\x92_\x83\x01\x90a\x05\xB1V[` \x81\x83\x03\x91\x01Ra\x0E-V[\x90V[` a\x0E\xAA\x91a\x0Epa\t~V[Pa\x0E\x83a\x0E~`\x01a\t\x9BV[a\x03\0V[a\x0E\x9Fc\xE3\xF7V\xDEa\x0E\x93a\x01\x02V[\x95\x86\x94\x85\x93\x84\x93a\n\rV[\x83R`\x04\x83\x01a\x0E<V[\x03\x91Z\xFA\x90\x81\x15a\x0E\xEEW_\x91a\x0E\xC0W[P\x90V[a\x0E\xE1\x91P` =\x81\x11a\x0E\xE7W[a\x0E\xD9\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\x0E\xBCV[P=a\x0E\xCFV[a\n|V[a\x0F\x04\x90a\x0E\xFFa\x11zV[a\x0F\x06V[V[\x80a\x0F!a\x0F\x1Ba\x0F\x16_a\t\xC4V[a\x03\xF4V[\x91a\x03\xF4V[\x14a\x0F{Wa\x0F9a\x0F2\x82a\x0C!V[`\x01a\x0C\\V[a\x0Fc\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x07\xB4V[\x90a\x0Fla\x01\x02V[\x80a\x0Fv\x81a\x01\x95V[\x03\x90\xA2V[a\x0F\x83a\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0F\x9A`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0F\xA7\x90a\x0E\xF3V[V[\x90` \x91a\x0F\xB5a\t~V[Pa\x0F\xEBa\x0F\xCBa\x0F\xC6`\x01a\t\x9BV[a\x03\0V[\x91a\x0F\xF6c\xE3\xF7V\xDE\x91\x94\x96a\x0F\xDFa\x01\x02V[\x97\x88\x96\x87\x95\x86\x95a\n\rV[\x85R`\x04\x85\x01a\nTV[\x03\x91Z\xFA\x90\x81\x15a\x10:W_\x91a\x10\x0CW[P\x90V[a\x10-\x91P` =\x81\x11a\x103W[a\x10%\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\x10\x08V[P=a\x10\x1BV[a\n|V[a\x10P\x90a\x10Ka\x11zV[a\x10RV[V[\x80a\x10ma\x10ga\x10b_a\t\xC4V[a\x03\xF4V[\x91a\x03\xF4V[\x14a\x10}Wa\x10{\x90a\x11\xF2V[V[a\x10\xA7a\x10\x89_a\t\xC4V[a\x10\x91a\x01\x02V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x10\xB4\x90a\x10?V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10\xDEa\x10\xD9a\x10\xE3\x92a\x06\xFFV[a\x10\xC4V[a\x10\xBBV[\x90V[\x90V[a\x10\xF5a\x10\xFA\x91a\x10\xBBV[a\x10\xE6V[\x90RV[\x90P\x90V[\x90\x91\x82a\x11\x13\x81a\x11\x1A\x93a\x10\xFEV[\x80\x93a\x08\xE2V[\x01\x90V[\x80a\x11/`\x01\x92a\x116\x96\x94a\x10\xE9V[\x01\x91a\x11\x03V[\x90V[a\x11w\x90a\x11Ea\x10\xB6V[Pa\x11ha\x11R_a\x10\xCAV[\x91\x93a\x11\\a\x01\x02V[\x94\x85\x93` \x85\x01a\x11\x1EV[` \x82\x01\x81\x03\x82R\x03\x82a\t\xE4V[\x90V[a\x11\x82a\x0E\x18V[a\x11\x9Ba\x11\x95a\x11\x90a\x12QV[a\x03\xF4V[\x91a\x03\xF4V[\x03a\x11\xA2WV[a\x11\xCBa\x11\xADa\x12QV[a\x11\xB5a\x01\x02V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[\x90V[\x90a\x11\xE7a\x11\xE2a\x11\xEE\x92a\x07\xB4V[a\x11\xCFV[\x82Ta\x0C2V[\x90UV[a\x11\xFB_a\x0E\x0BV[a\x12\x05\x82_a\x11\xD2V[\x90a\x129a\x123\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x07\xB4V[\x91a\x07\xB4V[\x91a\x12Ba\x01\x02V[\x80a\x12L\x81a\x01\x95V[\x03\x90\xA3V[a\x12Ya\r\xE8V[P3\x90V\xFE\xA2dipfsX\"\x12 L\xF6\x14\xBFD\xBFg2\xCA_\xB4\x11\xC5\xCF\x88\xDD\x15\x05\x16gr\xF2\xFCM\xC8\xF2d\x95`,\xB05dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6106f7565b61001d5f356100fc565b80630b83249d146100f75780633514d37b146100f25780633bb83a64146100ed5780633dfb5ee7146100e857806346e2cc09146100e3578063485cc955146100de57806361de91cc146100d9578063715018a6146100d457806377bfdd19146100cf5780638da5cb5b146100ca578063babcc539146100c5578063d4f0eb4d146100c0578063e3f756de146100bb5763f2fde38b0361000e576106c4565b61068e565b61065b565b610626565b6105d3565b61057c565b610500565b6104ca565b610450565b6103c0565b61038a565b61032e565b610243565b61019a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561015a5781359167ffffffffffffffff831161015557602001926020830284011161015057565b61011c565b610118565b610114565b90602082820312610190575f82013567ffffffffffffffff811161018b576101879201610120565b9091565b610110565b61010c565b5f0190565b346101c9576101b36101ad36600461015f565b9061082b565b6101bb610102565b806101c581610195565b0390f35b610108565b909182601f830112156102085781359167ffffffffffffffff83116102035760200192600183028401116101fe57565b61011c565b610118565b610114565b9060208282031261023e575f82013567ffffffffffffffff81116102395761023592016101ce565b9091565b610110565b61010c565b346102725761025c61025636600461020d565b9061092a565b610264610102565b8061026e81610195565b0390f35b610108565b5f91031261028157565b61010c565b1c90565b60018060a01b031690565b6102a59060086102aa9302610286565b61028a565b90565b906102b89154610295565b90565b6102c760015f906102ad565b90565b60018060a01b031690565b90565b6102ec6102e76102f1926102ca565b6102d5565b6102ca565b90565b6102fd906102d8565b90565b610309906102f4565b90565b61031590610300565b9052565b919061032c905f6020850194019061030c565b565b3461035e5761033e366004610277565b61035a6103496102bb565b610351610102565b91829182610319565b0390f35b610108565b151590565b61037190610363565b9052565b9190610388905f60208501940190610368565b565b346103bb576103b76103a66103a036600461020d565b90610a8c565b6103ae610102565b91829182610375565b0390f35b610108565b346103ef576103d96103d336600461020d565b90610b28565b6103e1610102565b806103eb81610195565b0390f35b610108565b6103fd906102ca565b90565b610409816103f4565b0361041057565b5f80fd5b9050359061042182610400565b565b919060408382031261044b578061043f610448925f8601610414565b93602001610414565b90565b61010c565b3461047f57610469610463366004610423565b90610d17565b610471610102565b8061047b81610195565b0390f35b610108565b9190916040818403126104c55761049d835f8301610414565b92602082013567ffffffffffffffff81116104c0576104bc92016101ce565b9091565b610110565b61010c565b346104fb576104f76104e66104e0366004610484565b91610d23565b6104ee610102565b91829182610375565b0390f35b610108565b3461052e57610510366004610277565b610518610dde565b610520610102565b8061052a81610195565b0390f35b610108565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61056390610557565b9052565b919061057a905f6020850194019061055a565b565b346105ac5761058c366004610277565b6105a8610597610533565b61059f610102565b91829182610567565b0390f35b610108565b6105ba906103f4565b9052565b91906105d1905f602085019401906105b1565b565b34610603576105e3366004610277565b6105ff6105ee610e18565b6105f6610102565b918291826105be565b0390f35b610108565b906020828203126106215761061e915f01610414565b90565b61010c565b346106565761065261064161063c366004610608565b610e62565b610649610102565b91829182610375565b0390f35b610108565b346106895761067361066e366004610608565b610f9e565b61067b610102565b8061068581610195565b0390f35b610108565b346106bf576106bb6106aa6106a4366004610484565b91610fa9565b6106b2610102565b91829182610375565b0390f35b610108565b346106f2576106dc6106d7366004610608565b6110ab565b6106e4610102565b806106ee81610195565b0390f35b610108565b5f80fd5b5090565b90565b61071661071161071b926106ff565b6102d5565b610557565b90565b600161072a9101610557565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561078f570180359067ffffffffffffffff821161078a5760200191600182023603831361078557565b610749565b610745565b610741565b908210156107af5760206107ab920281019061074d565b9091565b61072d565b6107bd906102f4565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61080161080a60209361080f936107f8816107c0565b938480936107c4565b958691016107cd565b6107d8565b0190565b6108289160208201915f8184039101526107e2565b90565b9190916108398184906106fb565b916108435f610702565b5b8061085761085186610557565b91610557565b10156108db576108d6906108773361087186898591610794565b91610fa9565b503361088e61088886898591610794565b90611139565b906108ce6108bc7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107b4565b926108c5610102565b91829182610813565b0390a261071e565b610844565b5092505050565b90825f939282370152565b9190610907816109008161090c956107c4565b80956108e2565b6107d8565b0190565b90916109279260208301925f8185039101526108ed565b90565b61093633828491610fa9565b503390916109647f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107b4565b92610979610970610102565b92839283610910565b0390a2565b5f90565b5f1c90565b61099361099891610982565b61028a565b90565b6109a59054610987565b90565b6109bc6109b76109c1926106ff565b6102d5565b6102ca565b90565b6109cd906109a8565b90565b634e487b7160e01b5f52604160045260245ffd5b906109ee906107d8565b810190811067ffffffffffffffff821117610a0857604052565b6109d0565b60e01b90565b610a1c81610363565b03610a2357565b5f80fd5b90505190610a3482610a13565b565b90602082820312610a4f57610a4c915f01610a27565b90565b61010c565b91610a79939192610a6c60408201945f8301906105b1565b60208185039101526108ed565b90565b610a84610102565b3d5f823e3d90fd5b602090610a9761097e565b50610aaa610aa5600161099b565b610300565b610ad463e3f756de610adf610abe5f6109c4565b9496610ac8610102565b97889687958695610a0d565b855260048501610a54565b03915afa908115610b23575f91610af5575b5090565b610b16915060203d8111610b1c575b610b0e81836109e4565b810190610a36565b5f610af1565b503d610b04565b610a7c565b90610b4190610b3933848391610fa9565b503392611139565b90610b81610b6f7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107b4565b92610b78610102565b91829182610813565b0390a2565b90610b9891610b9361117a565b610c7c565b565b60a01c90565b60ff1690565b610bb2610bb791610b9a565b610ba0565b90565b610bc49054610ba6565b90565b60a01b90565b90610bdc60ff60a01b91610bc7565b9181191691161790565b610bef90610363565b90565b90565b90610c0a610c05610c1192610be6565b610bf2565b8254610bcd565b9055565b610c1e906102d8565b90565b610c2a90610c15565b90565b5f1b90565b90610c4360018060a01b0391610c2d565b9181191691161790565b610c5690610c15565b90565b90565b90610c71610c6c610c7892610c4d565b610c59565b8254610c32565b9055565b610c866001610bba565b610cf55781610ca5610c9f610c9a5f6109c4565b6103f4565b916103f4565b14610cd257610ccb610cc4610cd093610cbf600180610bf5565b610c21565b6001610c5c565b6110ab565b565b610cda610102565b632e7f3c7f60e11b815280610cf160048201610195565b0390fd5b610cfd610102565b62dc149f60e41b815280610d1360048201610195565b0390fd5b90610d2191610b86565b565b90602091610d2f61097e565b50610d65610d45610d40600161099b565b610300565b91610d7063e3f756de919496610d59610102565b97889687958695610a0d565b855260048501610a54565b03915afa908115610db4575f91610d86575b5090565b610da7915060203d8111610dad575b610d9f81836109e4565b810190610a36565b5f610d82565b503d610d95565b610a7c565b610dc161117a565b610dc9610dcb565b565b610ddc610dd75f6109c4565b6111f2565b565b610de6610db9565b565b5f90565b60018060a01b031690565b610e03610e0891610982565b610dec565b90565b610e159054610df7565b90565b610e20610de8565b50610e2a5f610e0b565b90565b610e385f80926107c4565b0190565b90610e5f91610e5260408201925f8301906105b1565b6020818303910152610e2d565b90565b6020610eaa91610e7061097e565b50610e83610e7e600161099b565b610300565b610e9f63e3f756de610e93610102565b95869485938493610a0d565b835260048301610e3c565b03915afa908115610eee575f91610ec0575b5090565b610ee1915060203d8111610ee7575b610ed981836109e4565b810190610a36565b5f610ebc565b503d610ecf565b610a7c565b610f0490610eff61117a565b610f06565b565b80610f21610f1b610f165f6109c4565b6103f4565b916103f4565b14610f7b57610f39610f3282610c21565b6001610c5c565b610f637f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916107b4565b90610f6c610102565b80610f7681610195565b0390a2565b610f83610102565b632e7f3c7f60e11b815280610f9a60048201610195565b0390fd5b610fa790610ef3565b565b90602091610fb561097e565b50610feb610fcb610fc6600161099b565b610300565b91610ff663e3f756de919496610fdf610102565b97889687958695610a0d565b855260048501610a54565b03915afa90811561103a575f9161100c575b5090565b61102d915060203d8111611033575b61102581836109e4565b810190610a36565b5f611008565b503d61101b565b610a7c565b6110509061104b61117a565b611052565b565b8061106d6110676110625f6109c4565b6103f4565b916103f4565b1461107d5761107b906111f2565b565b6110a76110895f6109c4565b611091610102565b918291631e4fbdf760e01b8352600483016105be565b0390fd5b6110b49061103f565b565b606090565b60ff60f81b1690565b60f81b90565b6110de6110d96110e3926106ff565b6110c4565b6110bb565b90565b90565b6110f56110fa916110bb565b6110e6565b9052565b905090565b9091826111138161111a936110fe565b80936108e2565b0190565b8061112f60019261113696946110e9565b0191611103565b90565b611177906111456110b6565b506111686111525f6110ca565b919361115c610102565b9485936020850161111e565b602082018103825203826109e4565b90565b611182610e18565b61119b611195611190611251565b6103f4565b916103f4565b036111a257565b6111cb6111ad611251565b6111b5610102565b91829163118cdaa760e01b8352600483016105be565b0390fd5b90565b906111e76111e26111ee926107b4565b6111cf565b8254610c32565b9055565b6111fb5f610e0b565b611205825f6111d2565b906112396112337f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107b4565b916107b4565b91611242610102565b8061124c81610195565b0390a3565b611259610de8565b50339056fea26469706673582212204cf614bf44bf6732ca5fb411c5cf88dd1505166772f2fc4dc8f26495602cb03564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x06\xF7V[a\0\x1D_5a\0\xFCV[\x80c\x0B\x83$\x9D\x14a\0\xF7W\x80c5\x14\xD3{\x14a\0\xF2W\x80c;\xB8:d\x14a\0\xEDW\x80c=\xFB^\xE7\x14a\0\xE8W\x80cF\xE2\xCC\t\x14a\0\xE3W\x80cH\\\xC9U\x14a\0\xDEW\x80ca\xDE\x91\xCC\x14a\0\xD9W\x80cqP\x18\xA6\x14a\0\xD4W\x80cw\xBF\xDD\x19\x14a\0\xCFW\x80c\x8D\xA5\xCB[\x14a\0\xCAW\x80c\xBA\xBC\xC59\x14a\0\xC5W\x80c\xD4\xF0\xEBM\x14a\0\xC0W\x80c\xE3\xF7V\xDE\x14a\0\xBBWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06\xC4V[a\x06\x8EV[a\x06[V[a\x06&V[a\x05\xD3V[a\x05|V[a\x05\0V[a\x04\xCAV[a\x04PV[a\x03\xC0V[a\x03\x8AV[a\x03.V[a\x02CV[a\x01\x9AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01ZW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01UW` \x01\x92` \x83\x02\x84\x01\x11a\x01PWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x01\x90W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x8BWa\x01\x87\x92\x01a\x01 V[\x90\x91V[a\x01\x10V[a\x01\x0CV[_\x01\x90V[4a\x01\xC9Wa\x01\xB3a\x01\xAD6`\x04a\x01_V[\x90a\x08+V[a\x01\xBBa\x01\x02V[\x80a\x01\xC5\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x08W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x03W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xFEWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x02>W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x029Wa\x025\x92\x01a\x01\xCEV[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x02rWa\x02\\a\x02V6`\x04a\x02\rV[\x90a\t*V[a\x02da\x01\x02V[\x80a\x02n\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x02\x81WV[a\x01\x0CV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xA5\x90`\x08a\x02\xAA\x93\x02a\x02\x86V[a\x02\x8AV[\x90V[\x90a\x02\xB8\x91Ta\x02\x95V[\x90V[a\x02\xC7`\x01_\x90a\x02\xADV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\xECa\x02\xE7a\x02\xF1\x92a\x02\xCAV[a\x02\xD5V[a\x02\xCAV[\x90V[a\x02\xFD\x90a\x02\xD8V[\x90V[a\x03\t\x90a\x02\xF4V[\x90V[a\x03\x15\x90a\x03\0V[\x90RV[\x91\x90a\x03,\x90_` \x85\x01\x94\x01\x90a\x03\x0CV[V[4a\x03^Wa\x03>6`\x04a\x02wV[a\x03Za\x03Ia\x02\xBBV[a\x03Qa\x01\x02V[\x91\x82\x91\x82a\x03\x19V[\x03\x90\xF3[a\x01\x08V[\x15\x15\x90V[a\x03q\x90a\x03cV[\x90RV[\x91\x90a\x03\x88\x90_` \x85\x01\x94\x01\x90a\x03hV[V[4a\x03\xBBWa\x03\xB7a\x03\xA6a\x03\xA06`\x04a\x02\rV[\x90a\n\x8CV[a\x03\xAEa\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x03\xEFWa\x03\xD9a\x03\xD36`\x04a\x02\rV[\x90a\x0B(V[a\x03\xE1a\x01\x02V[\x80a\x03\xEB\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[a\x03\xFD\x90a\x02\xCAV[\x90V[a\x04\t\x81a\x03\xF4V[\x03a\x04\x10WV[_\x80\xFD[\x90P5\x90a\x04!\x82a\x04\0V[V[\x91\x90`@\x83\x82\x03\x12a\x04KW\x80a\x04?a\x04H\x92_\x86\x01a\x04\x14V[\x93` \x01a\x04\x14V[\x90V[a\x01\x0CV[4a\x04\x7FWa\x04ia\x04c6`\x04a\x04#V[\x90a\r\x17V[a\x04qa\x01\x02V[\x80a\x04{\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x91\x90\x91`@\x81\x84\x03\x12a\x04\xC5Wa\x04\x9D\x83_\x83\x01a\x04\x14V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xC0Wa\x04\xBC\x92\x01a\x01\xCEV[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x04\xFBWa\x04\xF7a\x04\xE6a\x04\xE06`\x04a\x04\x84V[\x91a\r#V[a\x04\xEEa\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x05.Wa\x05\x106`\x04a\x02wV[a\x05\x18a\r\xDEV[a\x05 a\x01\x02V[\x80a\x05*\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05c\x90a\x05WV[\x90RV[\x91\x90a\x05z\x90_` \x85\x01\x94\x01\x90a\x05ZV[V[4a\x05\xACWa\x05\x8C6`\x04a\x02wV[a\x05\xA8a\x05\x97a\x053V[a\x05\x9Fa\x01\x02V[\x91\x82\x91\x82a\x05gV[\x03\x90\xF3[a\x01\x08V[a\x05\xBA\x90a\x03\xF4V[\x90RV[\x91\x90a\x05\xD1\x90_` \x85\x01\x94\x01\x90a\x05\xB1V[V[4a\x06\x03Wa\x05\xE36`\x04a\x02wV[a\x05\xFFa\x05\xEEa\x0E\x18V[a\x05\xF6a\x01\x02V[\x91\x82\x91\x82a\x05\xBEV[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x06!Wa\x06\x1E\x91_\x01a\x04\x14V[\x90V[a\x01\x0CV[4a\x06VWa\x06Ra\x06Aa\x06<6`\x04a\x06\x08V[a\x0EbV[a\x06Ia\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x06\x89Wa\x06sa\x06n6`\x04a\x06\x08V[a\x0F\x9EV[a\x06{a\x01\x02V[\x80a\x06\x85\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[4a\x06\xBFWa\x06\xBBa\x06\xAAa\x06\xA46`\x04a\x04\x84V[\x91a\x0F\xA9V[a\x06\xB2a\x01\x02V[\x91\x82\x91\x82a\x03uV[\x03\x90\xF3[a\x01\x08V[4a\x06\xF2Wa\x06\xDCa\x06\xD76`\x04a\x06\x08V[a\x10\xABV[a\x06\xE4a\x01\x02V[\x80a\x06\xEE\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[P\x90V[\x90V[a\x07\x16a\x07\x11a\x07\x1B\x92a\x06\xFFV[a\x02\xD5V[a\x05WV[\x90V[`\x01a\x07*\x91\x01a\x05WV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x07\x8FW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07\x8AW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x07\x85WV[a\x07IV[a\x07EV[a\x07AV[\x90\x82\x10\x15a\x07\xAFW` a\x07\xAB\x92\x02\x81\x01\x90a\x07MV[\x90\x91V[a\x07-V[a\x07\xBD\x90a\x02\xF4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x08\x01a\x08\n` \x93a\x08\x0F\x93a\x07\xF8\x81a\x07\xC0V[\x93\x84\x80\x93a\x07\xC4V[\x95\x86\x91\x01a\x07\xCDV[a\x07\xD8V[\x01\x90V[a\x08(\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\xE2V[\x90V[\x91\x90\x91a\x089\x81\x84\x90a\x06\xFBV[\x91a\x08C_a\x07\x02V[[\x80a\x08Wa\x08Q\x86a\x05WV[\x91a\x05WV[\x10\x15a\x08\xDBWa\x08\xD6\x90a\x08w3a\x08q\x86\x89\x85\x91a\x07\x94V[\x91a\x0F\xA9V[P3a\x08\x8Ea\x08\x88\x86\x89\x85\x91a\x07\x94V[\x90a\x119V[\x90a\x08\xCEa\x08\xBC\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xB4V[\x92a\x08\xC5a\x01\x02V[\x91\x82\x91\x82a\x08\x13V[\x03\x90\xA2a\x07\x1EV[a\x08DV[P\x92PPPV[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\t\x07\x81a\t\0\x81a\t\x0C\x95a\x07\xC4V[\x80\x95a\x08\xE2V[a\x07\xD8V[\x01\x90V[\x90\x91a\t'\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08\xEDV[\x90V[a\t63\x82\x84\x91a\x0F\xA9V[P3\x90\x91a\td\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xB4V[\x92a\tya\tpa\x01\x02V[\x92\x83\x92\x83a\t\x10V[\x03\x90\xA2V[_\x90V[_\x1C\x90V[a\t\x93a\t\x98\x91a\t\x82V[a\x02\x8AV[\x90V[a\t\xA5\x90Ta\t\x87V[\x90V[a\t\xBCa\t\xB7a\t\xC1\x92a\x06\xFFV[a\x02\xD5V[a\x02\xCAV[\x90V[a\t\xCD\x90a\t\xA8V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\t\xEE\x90a\x07\xD8V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\x08W`@RV[a\t\xD0V[`\xE0\x1B\x90V[a\n\x1C\x81a\x03cV[\x03a\n#WV[_\x80\xFD[\x90PQ\x90a\n4\x82a\n\x13V[V[\x90` \x82\x82\x03\x12a\nOWa\nL\x91_\x01a\n'V[\x90V[a\x01\x0CV[\x91a\ny\x93\x91\x92a\nl`@\x82\x01\x94_\x83\x01\x90a\x05\xB1V[` \x81\x85\x03\x91\x01Ra\x08\xEDV[\x90V[a\n\x84a\x01\x02V[=_\x82>=\x90\xFD[` \x90a\n\x97a\t~V[Pa\n\xAAa\n\xA5`\x01a\t\x9BV[a\x03\0V[a\n\xD4c\xE3\xF7V\xDEa\n\xDFa\n\xBE_a\t\xC4V[\x94\x96a\n\xC8a\x01\x02V[\x97\x88\x96\x87\x95\x86\x95a\n\rV[\x85R`\x04\x85\x01a\nTV[\x03\x91Z\xFA\x90\x81\x15a\x0B#W_\x91a\n\xF5W[P\x90V[a\x0B\x16\x91P` =\x81\x11a\x0B\x1CW[a\x0B\x0E\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\n\xF1V[P=a\x0B\x04V[a\n|V[\x90a\x0BA\x90a\x0B93\x84\x83\x91a\x0F\xA9V[P3\x92a\x119V[\x90a\x0B\x81a\x0Bo\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xB4V[\x92a\x0Bxa\x01\x02V[\x91\x82\x91\x82a\x08\x13V[\x03\x90\xA2V[\x90a\x0B\x98\x91a\x0B\x93a\x11zV[a\x0C|V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0B\xB2a\x0B\xB7\x91a\x0B\x9AV[a\x0B\xA0V[\x90V[a\x0B\xC4\x90Ta\x0B\xA6V[\x90V[`\xA0\x1B\x90V[\x90a\x0B\xDC`\xFF`\xA0\x1B\x91a\x0B\xC7V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xEF\x90a\x03cV[\x90V[\x90V[\x90a\x0C\na\x0C\x05a\x0C\x11\x92a\x0B\xE6V[a\x0B\xF2V[\x82Ta\x0B\xCDV[\x90UV[a\x0C\x1E\x90a\x02\xD8V[\x90V[a\x0C*\x90a\x0C\x15V[\x90V[_\x1B\x90V[\x90a\x0CC`\x01\x80`\xA0\x1B\x03\x91a\x0C-V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0CV\x90a\x0C\x15V[\x90V[\x90V[\x90a\x0Cqa\x0Cla\x0Cx\x92a\x0CMV[a\x0CYV[\x82Ta\x0C2V[\x90UV[a\x0C\x86`\x01a\x0B\xBAV[a\x0C\xF5W\x81a\x0C\xA5a\x0C\x9Fa\x0C\x9A_a\t\xC4V[a\x03\xF4V[\x91a\x03\xF4V[\x14a\x0C\xD2Wa\x0C\xCBa\x0C\xC4a\x0C\xD0\x93a\x0C\xBF`\x01\x80a\x0B\xF5V[a\x0C!V[`\x01a\x0C\\V[a\x10\xABV[V[a\x0C\xDAa\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C\xF1`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0C\xFDa\x01\x02V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\r\x13`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[\x90a\r!\x91a\x0B\x86V[V[\x90` \x91a\r/a\t~V[Pa\rea\rEa\r@`\x01a\t\x9BV[a\x03\0V[\x91a\rpc\xE3\xF7V\xDE\x91\x94\x96a\rYa\x01\x02V[\x97\x88\x96\x87\x95\x86\x95a\n\rV[\x85R`\x04\x85\x01a\nTV[\x03\x91Z\xFA\x90\x81\x15a\r\xB4W_\x91a\r\x86W[P\x90V[a\r\xA7\x91P` =\x81\x11a\r\xADW[a\r\x9F\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\r\x82V[P=a\r\x95V[a\n|V[a\r\xC1a\x11zV[a\r\xC9a\r\xCBV[V[a\r\xDCa\r\xD7_a\t\xC4V[a\x11\xF2V[V[a\r\xE6a\r\xB9V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\x03a\x0E\x08\x91a\t\x82V[a\r\xECV[\x90V[a\x0E\x15\x90Ta\r\xF7V[\x90V[a\x0E a\r\xE8V[Pa\x0E*_a\x0E\x0BV[\x90V[a\x0E8_\x80\x92a\x07\xC4V[\x01\x90V[\x90a\x0E_\x91a\x0ER`@\x82\x01\x92_\x83\x01\x90a\x05\xB1V[` \x81\x83\x03\x91\x01Ra\x0E-V[\x90V[` a\x0E\xAA\x91a\x0Epa\t~V[Pa\x0E\x83a\x0E~`\x01a\t\x9BV[a\x03\0V[a\x0E\x9Fc\xE3\xF7V\xDEa\x0E\x93a\x01\x02V[\x95\x86\x94\x85\x93\x84\x93a\n\rV[\x83R`\x04\x83\x01a\x0E<V[\x03\x91Z\xFA\x90\x81\x15a\x0E\xEEW_\x91a\x0E\xC0W[P\x90V[a\x0E\xE1\x91P` =\x81\x11a\x0E\xE7W[a\x0E\xD9\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\x0E\xBCV[P=a\x0E\xCFV[a\n|V[a\x0F\x04\x90a\x0E\xFFa\x11zV[a\x0F\x06V[V[\x80a\x0F!a\x0F\x1Ba\x0F\x16_a\t\xC4V[a\x03\xF4V[\x91a\x03\xF4V[\x14a\x0F{Wa\x0F9a\x0F2\x82a\x0C!V[`\x01a\x0C\\V[a\x0Fc\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x07\xB4V[\x90a\x0Fla\x01\x02V[\x80a\x0Fv\x81a\x01\x95V[\x03\x90\xA2V[a\x0F\x83a\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0F\x9A`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0F\xA7\x90a\x0E\xF3V[V[\x90` \x91a\x0F\xB5a\t~V[Pa\x0F\xEBa\x0F\xCBa\x0F\xC6`\x01a\t\x9BV[a\x03\0V[\x91a\x0F\xF6c\xE3\xF7V\xDE\x91\x94\x96a\x0F\xDFa\x01\x02V[\x97\x88\x96\x87\x95\x86\x95a\n\rV[\x85R`\x04\x85\x01a\nTV[\x03\x91Z\xFA\x90\x81\x15a\x10:W_\x91a\x10\x0CW[P\x90V[a\x10-\x91P` =\x81\x11a\x103W[a\x10%\x81\x83a\t\xE4V[\x81\x01\x90a\n6V[_a\x10\x08V[P=a\x10\x1BV[a\n|V[a\x10P\x90a\x10Ka\x11zV[a\x10RV[V[\x80a\x10ma\x10ga\x10b_a\t\xC4V[a\x03\xF4V[\x91a\x03\xF4V[\x14a\x10}Wa\x10{\x90a\x11\xF2V[V[a\x10\xA7a\x10\x89_a\t\xC4V[a\x10\x91a\x01\x02V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x10\xB4\x90a\x10?V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10\xDEa\x10\xD9a\x10\xE3\x92a\x06\xFFV[a\x10\xC4V[a\x10\xBBV[\x90V[\x90V[a\x10\xF5a\x10\xFA\x91a\x10\xBBV[a\x10\xE6V[\x90RV[\x90P\x90V[\x90\x91\x82a\x11\x13\x81a\x11\x1A\x93a\x10\xFEV[\x80\x93a\x08\xE2V[\x01\x90V[\x80a\x11/`\x01\x92a\x116\x96\x94a\x10\xE9V[\x01\x91a\x11\x03V[\x90V[a\x11w\x90a\x11Ea\x10\xB6V[Pa\x11ha\x11R_a\x10\xCAV[\x91\x93a\x11\\a\x01\x02V[\x94\x85\x93` \x85\x01a\x11\x1EV[` \x82\x01\x81\x03\x82R\x03\x82a\t\xE4V[\x90V[a\x11\x82a\x0E\x18V[a\x11\x9Ba\x11\x95a\x11\x90a\x12QV[a\x03\xF4V[\x91a\x03\xF4V[\x03a\x11\xA2WV[a\x11\xCBa\x11\xADa\x12QV[a\x11\xB5a\x01\x02V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[\x90V[\x90a\x11\xE7a\x11\xE2a\x11\xEE\x92a\x07\xB4V[a\x11\xCFV[\x82Ta\x0C2V[\x90UV[a\x11\xFB_a\x0E\x0BV[a\x12\x05\x82_a\x11\xD2V[\x90a\x129a\x123\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x07\xB4V[\x91a\x07\xB4V[\x91a\x12Ba\x01\x02V[\x80a\x12L\x81a\x01\x95V[\x03\x90\xA3V[a\x12Ya\r\xE8V[P3\x90V\xFE\xA2dipfsX\"\x12 L\xF6\x14\xBFD\xBFg2\xCA_\xB4\x11\xC5\xCF\x88\xDD\x15\x05\x16gr\xF2\xFCM\xC8\xF2d\x95`,\xB05dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CalldataNotAllowed()` and selector `0xc180a962`.
```solidity
error CalldataNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataNotAllowed()";
            const SELECTOR: [u8; 4] = [193u8, 128u8, 169u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _l3ChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._l3ChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _l3ChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._l3ChainId),
                )
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowed_0Call {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowed_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowed_0Return {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowed_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowed_0Call) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowed_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowed_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowed_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowed_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowed_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowed_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,bytes)` and selector `0xe3f756de`.
```solidity
function isAllowed(address proposer, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowed_1Call {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,bytes)`](isAllowed_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowed_1Return {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowed_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowed_1Call) -> Self {
                    (value.proposer, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowed_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowed_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowed_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowed_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowed_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowed_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,bytes)";
            const SELECTOR: [u8; 4] = [227u8, 247u8, 86u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowedWithCalldata(address,bytes)` and selector `0x61de91cc`.
```solidity
function isAllowedWithCalldata(address proposer, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedWithCalldataCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowedWithCalldata(address,bytes)`](isAllowedWithCalldataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedWithCalldataReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedWithCalldataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedWithCalldataCall) -> Self {
                    (value.proposer, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAllowedWithCalldataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedWithCalldataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedWithCalldataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAllowedWithCalldataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedWithCalldataCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedWithCalldataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowedWithCalldata(address,bytes)";
            const SELECTOR: [u8; 4] = [97u8, 222u8, 145u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l3ChainId()` and selector `0x77bfdd19`.
```solidity
function l3ChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdCall {}
    ///Container type for the return parameters of the [`l3ChainId()`](l3ChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l3ChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l3ChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l3ChainId()";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 221u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `requirementModule()` and selector `0x3bb83a64`.
```solidity
function requirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleCall {}
    ///Container type for the return parameters of the [`requirementModule()`](requirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requirementModule()";
            const SELECTOR: [u8; 4] = [59u8, 184u8, 58u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OptionOneMetabasedSequencerChain`](self) function calls.
    pub enum OptionOneMetabasedSequencerChainCalls {
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed_0(isAllowed_0Call),
        #[allow(missing_docs)]
        isAllowed_1(isAllowed_1Call),
        #[allow(missing_docs)]
        isAllowedWithCalldata(isAllowedWithCalldataCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        l3ChainId(l3ChainIdCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        requirementModule(requirementModuleCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl OptionOneMetabasedSequencerChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [53u8, 20u8, 211u8, 123u8],
            [59u8, 184u8, 58u8, 100u8],
            [61u8, 251u8, 94u8, 231u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [97u8, 222u8, 145u8, 204u8],
            [113u8, 80u8, 24u8, 166u8],
            [119u8, 191u8, 221u8, 25u8],
            [141u8, 165u8, 203u8, 91u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [227u8, 247u8, 86u8, 222u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OptionOneMetabasedSequencerChainCalls {
        const NAME: &'static str = "OptionOneMetabasedSequencerChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed_0(_) => {
                    <isAllowed_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed_1(_) => {
                    <isAllowed_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowedWithCalldata(_) => {
                    <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l3ChainId(_) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requirementModule(_) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::processBulkTransactions,
                            )
                    }
                    processBulkTransactions
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::processTransactionRaw,
                            )
                    }
                    processTransactionRaw
                },
                {
                    fn requirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <requirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::requirementModule,
                            )
                    }
                    requirementModule
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::isCalldataAllowed,
                            )
                    }
                    isCalldataAllowed
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::processTransaction,
                            )
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn isAllowedWithCalldata(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::isAllowedWithCalldata,
                            )
                    }
                    isAllowedWithCalldata
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn l3ChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <l3ChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::l3ChainId)
                    }
                    l3ChainId
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::owner)
                    }
                    owner
                },
                {
                    fn isAllowed_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isAllowed_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::isAllowed_0)
                    }
                    isAllowed_0
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn isAllowed_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <isAllowed_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainCalls::isAllowed_1)
                    }
                    isAllowed_1
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed_0(inner) => {
                    <isAllowed_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed_1(inner) => {
                    <isAllowed_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowedWithCalldata(inner) => {
                    <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed_0(inner) => {
                    <isAllowed_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed_1(inner) => {
                    <isAllowed_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowedWithCalldata(inner) => {
                    <isAllowedWithCalldataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`OptionOneMetabasedSequencerChain`](self) custom errors.
    pub enum OptionOneMetabasedSequencerChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        CalldataNotAllowed(CalldataNotAllowed),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl OptionOneMetabasedSequencerChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [193u8, 128u8, 169u8, 98u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OptionOneMetabasedSequencerChainErrors {
        const NAME: &'static str = "OptionOneMetabasedSequencerChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataNotAllowed(_) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OptionOneMetabasedSequencerChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn CalldataNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <CalldataNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptionOneMetabasedSequencerChainErrors::CalldataNotAllowed,
                            )
                    }
                    CalldataNotAllowed
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        OptionOneMetabasedSequencerChainErrors,
                    > {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptionOneMetabasedSequencerChainErrors::NotAllowed)
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`OptionOneMetabasedSequencerChain`](self) events.
    pub enum OptionOneMetabasedSequencerChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl OptionOneMetabasedSequencerChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for OptionOneMetabasedSequencerChainEvents {
        const NAME: &'static str = "OptionOneMetabasedSequencerChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for OptionOneMetabasedSequencerChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OptionOneMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`OptionOneMetabasedSequencerChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OptionOneMetabasedSequencerChainInstance<T, P, N> {
        OptionOneMetabasedSequencerChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            OptionOneMetabasedSequencerChainInstance<T, P, N>,
        >,
    > {
        OptionOneMetabasedSequencerChainInstance::<T, P, N>::deploy(provider, _l3ChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        OptionOneMetabasedSequencerChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _l3ChainId)
    }
    /**A [`OptionOneMetabasedSequencerChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OptionOneMetabasedSequencerChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OptionOneMetabasedSequencerChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for OptionOneMetabasedSequencerChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OptionOneMetabasedSequencerChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptionOneMetabasedSequencerChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OptionOneMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`OptionOneMetabasedSequencerChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<OptionOneMetabasedSequencerChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _l3ChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _l3ChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > OptionOneMetabasedSequencerChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> OptionOneMetabasedSequencerChainInstance<T, P, N> {
            OptionOneMetabasedSequencerChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptionOneMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed_0`] function.
        pub fn isAllowed_0(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowed_0Call, N> {
            self.call_builder(&isAllowed_0Call { proposer })
        }
        ///Creates a new call builder for the [`isAllowed_1`] function.
        pub fn isAllowed_1(
            &self,
            proposer: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowed_1Call, N> {
            self.call_builder(&isAllowed_1Call { proposer, data })
        }
        ///Creates a new call builder for the [`isAllowedWithCalldata`] function.
        pub fn isAllowedWithCalldata(
            &self,
            proposer: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedWithCalldataCall, N> {
            self.call_builder(
                &isAllowedWithCalldataCall {
                    proposer,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`l3ChainId`] function.
        pub fn l3ChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l3ChainIdCall, N> {
            self.call_builder(&l3ChainIdCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`requirementModule`] function.
        pub fn requirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, requirementModuleCall, N> {
            self.call_builder(&requirementModuleCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptionOneMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
