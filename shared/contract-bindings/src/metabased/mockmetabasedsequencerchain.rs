/**

Generated by the following Solidity interface...
```solidity
interface MockMetabasedSequencerChain {
    function lastProcessedData() external view returns (bytes memory);
    function processTransaction(bytes memory data) external;
    function setRevertFlag(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "lastProcessedData",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setRevertFlag",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockMetabasedSequencerChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b6107d161002b82396107d190f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61046c565b61001d5f3561005c565b8063381ba1401461005757806346e2cc0914610052578063d3072d821461004d5763f352cd720361000e57610437565b610217565b610173565b6100bf565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61008281610074565b0361008957565b5f80fd5b9050359061009a82610079565b565b906020828203126100b5576100b2915f0161008d565b90565b61006c565b5f0190565b346100ed576100d76100d236600461009c565b6104ba565b6100df610062565b806100e9816100ba565b0390f35b610068565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101385781359167ffffffffffffffff831161013357602001926001830284011161012e57565b6100fa565b6100f6565b6100f2565b9060208282031261016e575f82013567ffffffffffffffff81116101695761016592016100fe565b9091565b610070565b61006c565b346101a25761018c61018636600461013d565b9061075e565b610194610062565b8061019e816100ba565b0390f35b610068565b5f9103126101b157565b61006c565b1c90565b60ff1690565b6101d09060086101d593026101b6565b6101ba565b90565b906101e391546101c0565b90565b6101f260015f906101d8565b90565b6101fe90610074565b9052565b9190610215905f602085019401906101f5565b565b34610247576102273660046101a7565b6102436102326101e6565b61023a610062565b91829182610202565b0390f35b610068565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610293575b602083101461028e57565b61025f565b91607f1691610283565b60209181520190565b5f5260205f2090565b905f92918054906102c96102c283610273565b809461029d565b916001811690815f1461032057506001146102e4575b505050565b6102f191929394506102a6565b915f925b81841061030857505001905f80806102df565b600181602092959395548486015201910192906102f5565b92949550505060ff19168252151560200201905f80806102df565b90610345916102af565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061037090610348565b810190811067ffffffffffffffff82111761038a57604052565b610352565b906103af6103a89261039f610062565b9384809261033b565b0383610366565b565b905f106103c4576103c19061038f565b90565b61024c565b6103d35f806103b1565b90565b5190565b60209181520190565b90825f9392825e0152565b61040d61041660209361041b93610404816103d6565b938480936103da565b958691016103e3565b610348565b0190565b6104349160208201915f8184039101526103ee565b90565b34610467576104473660046101a7565b6104636104526103c9565b61045a610062565b9182918261041f565b0390f35b610068565b5f80fd5b5f1b90565b9061048160ff91610470565b9181191691161790565b61049490610074565b90565b90565b906104af6104aa6104b69261048b565b610497565b8254610475565b9055565b6104c590600161049a565b565b5f1c90565b6104d86104dd916104c7565b6101ba565b90565b6104ea90546104cc565b90565b60209181520190565b5f7f53657175656e636572206572726f720000000000000000000000000000000000910152565b61052a600f6020926104ed565b610533816104f6565b0190565b61054c9060208101905f81830391015261051d565b90565b5090565b601f602091010490565b1b90565b9190600861057c9102916105765f198461055d565b9261055d565b9181191691161790565b90565b90565b6105a061059b6105a592610586565b610589565b610586565b90565b90565b91906105c16105bc6105c99361058c565b6105a8565b908354610561565b9055565b5f90565b6105e3916105dd6105cd565b916105ab565b565b5b8181106105f1575050565b806105fe5f6001936105d1565b016105e6565b9190601f8111610614575b505050565b610620610645936102a6565b90602061062c84610553565b8301931061064d575b61063e90610553565b01906105e5565b5f808061060f565b915061063e81929050610635565b9061066b905f19906008026101b6565b191690565b8161067a9161065b565b906002021790565b9161068d908261054f565b9067ffffffffffffffff821161074c576106b1826106ab8554610273565b85610604565b5f90601f83116001146106e4579180916106d3935f926106d8575b5050610670565b90555b565b90915001355f806106cc565b601f198316916106f3856102a6565b925f5b8181106107345750916002939185600196941061071a575b505050020190556106d6565b61072a910135601f84169061065b565b90555f808061070e565b919360206001819287870135815501950192016106f6565b610352565b9061075c9291610682565b565b9061076960016104e0565b61077957610777915f610751565b565b610781610062565b62461bcd60e51b81528061079760048201610537565b0390fdfea26469706673582212203f20f1a4f429e7d7a0d2a61c10d9cf4c8890be710c5921af38adf521cd2a3aa664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x07\xD1a\0+\x829a\x07\xD1\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04lV[a\0\x1D_5a\0\\V[\x80c8\x1B\xA1@\x14a\0WW\x80cF\xE2\xCC\t\x14a\0RW\x80c\xD3\x07-\x82\x14a\0MWc\xF3R\xCDr\x03a\0\x0EWa\x047V[a\x02\x17V[a\x01sV[a\0\xBFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0\x82\x81a\0tV[\x03a\0\x89WV[_\x80\xFD[\x90P5\x90a\0\x9A\x82a\0yV[V[\x90` \x82\x82\x03\x12a\0\xB5Wa\0\xB2\x91_\x01a\0\x8DV[\x90V[a\0lV[_\x01\x90V[4a\0\xEDWa\0\xD7a\0\xD26`\x04a\0\x9CV[a\x04\xBAV[a\0\xDFa\0bV[\x80a\0\xE9\x81a\0\xBAV[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x018W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x013W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01.WV[a\0\xFAV[a\0\xF6V[a\0\xF2V[\x90` \x82\x82\x03\x12a\x01nW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01iWa\x01e\x92\x01a\0\xFEV[\x90\x91V[a\0pV[a\0lV[4a\x01\xA2Wa\x01\x8Ca\x01\x866`\x04a\x01=V[\x90a\x07^V[a\x01\x94a\0bV[\x80a\x01\x9E\x81a\0\xBAV[\x03\x90\xF3[a\0hV[_\x91\x03\x12a\x01\xB1WV[a\0lV[\x1C\x90V[`\xFF\x16\x90V[a\x01\xD0\x90`\x08a\x01\xD5\x93\x02a\x01\xB6V[a\x01\xBAV[\x90V[\x90a\x01\xE3\x91Ta\x01\xC0V[\x90V[a\x01\xF2`\x01_\x90a\x01\xD8V[\x90V[a\x01\xFE\x90a\0tV[\x90RV[\x91\x90a\x02\x15\x90_` \x85\x01\x94\x01\x90a\x01\xF5V[V[4a\x02GWa\x02'6`\x04a\x01\xA7V[a\x02Ca\x022a\x01\xE6V[a\x02:a\0bV[\x91\x82\x91\x82a\x02\x02V[\x03\x90\xF3[a\0hV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x02\x93W[` \x83\x10\x14a\x02\x8EWV[a\x02_V[\x91`\x7F\x16\x91a\x02\x83V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x02\xC9a\x02\xC2\x83a\x02sV[\x80\x94a\x02\x9DV[\x91`\x01\x81\x16\x90\x81_\x14a\x03 WP`\x01\x14a\x02\xE4W[PPPV[a\x02\xF1\x91\x92\x93\x94Pa\x02\xA6V[\x91_\x92[\x81\x84\x10a\x03\x08WPP\x01\x90_\x80\x80a\x02\xDFV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\xF5V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\xDFV[\x90a\x03E\x91a\x02\xAFV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03p\x90a\x03HV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\x8AW`@RV[a\x03RV[\x90a\x03\xAFa\x03\xA8\x92a\x03\x9Fa\0bV[\x93\x84\x80\x92a\x03;V[\x03\x83a\x03fV[V[\x90_\x10a\x03\xC4Wa\x03\xC1\x90a\x03\x8FV[\x90V[a\x02LV[a\x03\xD3_\x80a\x03\xB1V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x04\ra\x04\x16` \x93a\x04\x1B\x93a\x04\x04\x81a\x03\xD6V[\x93\x84\x80\x93a\x03\xDAV[\x95\x86\x91\x01a\x03\xE3V[a\x03HV[\x01\x90V[a\x044\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xEEV[\x90V[4a\x04gWa\x04G6`\x04a\x01\xA7V[a\x04ca\x04Ra\x03\xC9V[a\x04Za\0bV[\x91\x82\x91\x82a\x04\x1FV[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x1B\x90V[\x90a\x04\x81`\xFF\x91a\x04pV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\x94\x90a\0tV[\x90V[\x90V[\x90a\x04\xAFa\x04\xAAa\x04\xB6\x92a\x04\x8BV[a\x04\x97V[\x82Ta\x04uV[\x90UV[a\x04\xC5\x90`\x01a\x04\x9AV[V[_\x1C\x90V[a\x04\xD8a\x04\xDD\x91a\x04\xC7V[a\x01\xBAV[\x90V[a\x04\xEA\x90Ta\x04\xCCV[\x90V[` \x91\x81R\x01\x90V[_\x7FSequencer error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05*`\x0F` \x92a\x04\xEDV[a\x053\x81a\x04\xF6V[\x01\x90V[a\x05L\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\x1DV[\x90V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x05|\x91\x02\x91a\x05v_\x19\x84a\x05]V[\x92a\x05]V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90V[a\x05\xA0a\x05\x9Ba\x05\xA5\x92a\x05\x86V[a\x05\x89V[a\x05\x86V[\x90V[\x90V[\x91\x90a\x05\xC1a\x05\xBCa\x05\xC9\x93a\x05\x8CV[a\x05\xA8V[\x90\x83Ta\x05aV[\x90UV[_\x90V[a\x05\xE3\x91a\x05\xDDa\x05\xCDV[\x91a\x05\xABV[V[[\x81\x81\x10a\x05\xF1WPPV[\x80a\x05\xFE_`\x01\x93a\x05\xD1V[\x01a\x05\xE6V[\x91\x90`\x1F\x81\x11a\x06\x14W[PPPV[a\x06 a\x06E\x93a\x02\xA6V[\x90` a\x06,\x84a\x05SV[\x83\x01\x93\x10a\x06MW[a\x06>\x90a\x05SV[\x01\x90a\x05\xE5V[_\x80\x80a\x06\x0FV[\x91Pa\x06>\x81\x92\x90Pa\x065V[\x90a\x06k\x90_\x19\x90`\x08\x02a\x01\xB6V[\x19\x16\x90V[\x81a\x06z\x91a\x06[V[\x90`\x02\x02\x17\x90V[\x91a\x06\x8D\x90\x82a\x05OV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07LWa\x06\xB1\x82a\x06\xAB\x85Ta\x02sV[\x85a\x06\x04V[_\x90`\x1F\x83\x11`\x01\x14a\x06\xE4W\x91\x80\x91a\x06\xD3\x93_\x92a\x06\xD8W[PPa\x06pV[\x90U[V[\x90\x91P\x015_\x80a\x06\xCCV[`\x1F\x19\x83\x16\x91a\x06\xF3\x85a\x02\xA6V[\x92_[\x81\x81\x10a\x074WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x07\x1AW[PPP\x02\x01\x90Ua\x06\xD6V[a\x07*\x91\x015`\x1F\x84\x16\x90a\x06[V[\x90U_\x80\x80a\x07\x0EV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x06\xF6V[a\x03RV[\x90a\x07\\\x92\x91a\x06\x82V[V[\x90a\x07i`\x01a\x04\xE0V[a\x07yWa\x07w\x91_a\x07QV[V[a\x07\x81a\0bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07\x97`\x04\x82\x01a\x057V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 ? \xF1\xA4\xF4)\xE7\xD7\xA0\xD2\xA6\x1C\x10\xD9\xCFL\x88\x90\xBEq\x0CY!\xAF8\xAD\xF5!\xCD*:\xA6dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61046c565b61001d5f3561005c565b8063381ba1401461005757806346e2cc0914610052578063d3072d821461004d5763f352cd720361000e57610437565b610217565b610173565b6100bf565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61008281610074565b0361008957565b5f80fd5b9050359061009a82610079565b565b906020828203126100b5576100b2915f0161008d565b90565b61006c565b5f0190565b346100ed576100d76100d236600461009c565b6104ba565b6100df610062565b806100e9816100ba565b0390f35b610068565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101385781359167ffffffffffffffff831161013357602001926001830284011161012e57565b6100fa565b6100f6565b6100f2565b9060208282031261016e575f82013567ffffffffffffffff81116101695761016592016100fe565b9091565b610070565b61006c565b346101a25761018c61018636600461013d565b9061075e565b610194610062565b8061019e816100ba565b0390f35b610068565b5f9103126101b157565b61006c565b1c90565b60ff1690565b6101d09060086101d593026101b6565b6101ba565b90565b906101e391546101c0565b90565b6101f260015f906101d8565b90565b6101fe90610074565b9052565b9190610215905f602085019401906101f5565b565b34610247576102273660046101a7565b6102436102326101e6565b61023a610062565b91829182610202565b0390f35b610068565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610293575b602083101461028e57565b61025f565b91607f1691610283565b60209181520190565b5f5260205f2090565b905f92918054906102c96102c283610273565b809461029d565b916001811690815f1461032057506001146102e4575b505050565b6102f191929394506102a6565b915f925b81841061030857505001905f80806102df565b600181602092959395548486015201910192906102f5565b92949550505060ff19168252151560200201905f80806102df565b90610345916102af565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061037090610348565b810190811067ffffffffffffffff82111761038a57604052565b610352565b906103af6103a89261039f610062565b9384809261033b565b0383610366565b565b905f106103c4576103c19061038f565b90565b61024c565b6103d35f806103b1565b90565b5190565b60209181520190565b90825f9392825e0152565b61040d61041660209361041b93610404816103d6565b938480936103da565b958691016103e3565b610348565b0190565b6104349160208201915f8184039101526103ee565b90565b34610467576104473660046101a7565b6104636104526103c9565b61045a610062565b9182918261041f565b0390f35b610068565b5f80fd5b5f1b90565b9061048160ff91610470565b9181191691161790565b61049490610074565b90565b90565b906104af6104aa6104b69261048b565b610497565b8254610475565b9055565b6104c590600161049a565b565b5f1c90565b6104d86104dd916104c7565b6101ba565b90565b6104ea90546104cc565b90565b60209181520190565b5f7f53657175656e636572206572726f720000000000000000000000000000000000910152565b61052a600f6020926104ed565b610533816104f6565b0190565b61054c9060208101905f81830391015261051d565b90565b5090565b601f602091010490565b1b90565b9190600861057c9102916105765f198461055d565b9261055d565b9181191691161790565b90565b90565b6105a061059b6105a592610586565b610589565b610586565b90565b90565b91906105c16105bc6105c99361058c565b6105a8565b908354610561565b9055565b5f90565b6105e3916105dd6105cd565b916105ab565b565b5b8181106105f1575050565b806105fe5f6001936105d1565b016105e6565b9190601f8111610614575b505050565b610620610645936102a6565b90602061062c84610553565b8301931061064d575b61063e90610553565b01906105e5565b5f808061060f565b915061063e81929050610635565b9061066b905f19906008026101b6565b191690565b8161067a9161065b565b906002021790565b9161068d908261054f565b9067ffffffffffffffff821161074c576106b1826106ab8554610273565b85610604565b5f90601f83116001146106e4579180916106d3935f926106d8575b5050610670565b90555b565b90915001355f806106cc565b601f198316916106f3856102a6565b925f5b8181106107345750916002939185600196941061071a575b505050020190556106d6565b61072a910135601f84169061065b565b90555f808061070e565b919360206001819287870135815501950192016106f6565b610352565b9061075c9291610682565b565b9061076960016104e0565b61077957610777915f610751565b565b610781610062565b62461bcd60e51b81528061079760048201610537565b0390fdfea26469706673582212203f20f1a4f429e7d7a0d2a61c10d9cf4c8890be710c5921af38adf521cd2a3aa664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04lV[a\0\x1D_5a\0\\V[\x80c8\x1B\xA1@\x14a\0WW\x80cF\xE2\xCC\t\x14a\0RW\x80c\xD3\x07-\x82\x14a\0MWc\xF3R\xCDr\x03a\0\x0EWa\x047V[a\x02\x17V[a\x01sV[a\0\xBFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0\x82\x81a\0tV[\x03a\0\x89WV[_\x80\xFD[\x90P5\x90a\0\x9A\x82a\0yV[V[\x90` \x82\x82\x03\x12a\0\xB5Wa\0\xB2\x91_\x01a\0\x8DV[\x90V[a\0lV[_\x01\x90V[4a\0\xEDWa\0\xD7a\0\xD26`\x04a\0\x9CV[a\x04\xBAV[a\0\xDFa\0bV[\x80a\0\xE9\x81a\0\xBAV[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x018W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x013W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01.WV[a\0\xFAV[a\0\xF6V[a\0\xF2V[\x90` \x82\x82\x03\x12a\x01nW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01iWa\x01e\x92\x01a\0\xFEV[\x90\x91V[a\0pV[a\0lV[4a\x01\xA2Wa\x01\x8Ca\x01\x866`\x04a\x01=V[\x90a\x07^V[a\x01\x94a\0bV[\x80a\x01\x9E\x81a\0\xBAV[\x03\x90\xF3[a\0hV[_\x91\x03\x12a\x01\xB1WV[a\0lV[\x1C\x90V[`\xFF\x16\x90V[a\x01\xD0\x90`\x08a\x01\xD5\x93\x02a\x01\xB6V[a\x01\xBAV[\x90V[\x90a\x01\xE3\x91Ta\x01\xC0V[\x90V[a\x01\xF2`\x01_\x90a\x01\xD8V[\x90V[a\x01\xFE\x90a\0tV[\x90RV[\x91\x90a\x02\x15\x90_` \x85\x01\x94\x01\x90a\x01\xF5V[V[4a\x02GWa\x02'6`\x04a\x01\xA7V[a\x02Ca\x022a\x01\xE6V[a\x02:a\0bV[\x91\x82\x91\x82a\x02\x02V[\x03\x90\xF3[a\0hV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x02\x93W[` \x83\x10\x14a\x02\x8EWV[a\x02_V[\x91`\x7F\x16\x91a\x02\x83V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x02\xC9a\x02\xC2\x83a\x02sV[\x80\x94a\x02\x9DV[\x91`\x01\x81\x16\x90\x81_\x14a\x03 WP`\x01\x14a\x02\xE4W[PPPV[a\x02\xF1\x91\x92\x93\x94Pa\x02\xA6V[\x91_\x92[\x81\x84\x10a\x03\x08WPP\x01\x90_\x80\x80a\x02\xDFV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\xF5V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\xDFV[\x90a\x03E\x91a\x02\xAFV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03p\x90a\x03HV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\x8AW`@RV[a\x03RV[\x90a\x03\xAFa\x03\xA8\x92a\x03\x9Fa\0bV[\x93\x84\x80\x92a\x03;V[\x03\x83a\x03fV[V[\x90_\x10a\x03\xC4Wa\x03\xC1\x90a\x03\x8FV[\x90V[a\x02LV[a\x03\xD3_\x80a\x03\xB1V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x04\ra\x04\x16` \x93a\x04\x1B\x93a\x04\x04\x81a\x03\xD6V[\x93\x84\x80\x93a\x03\xDAV[\x95\x86\x91\x01a\x03\xE3V[a\x03HV[\x01\x90V[a\x044\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xEEV[\x90V[4a\x04gWa\x04G6`\x04a\x01\xA7V[a\x04ca\x04Ra\x03\xC9V[a\x04Za\0bV[\x91\x82\x91\x82a\x04\x1FV[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x1B\x90V[\x90a\x04\x81`\xFF\x91a\x04pV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\x94\x90a\0tV[\x90V[\x90V[\x90a\x04\xAFa\x04\xAAa\x04\xB6\x92a\x04\x8BV[a\x04\x97V[\x82Ta\x04uV[\x90UV[a\x04\xC5\x90`\x01a\x04\x9AV[V[_\x1C\x90V[a\x04\xD8a\x04\xDD\x91a\x04\xC7V[a\x01\xBAV[\x90V[a\x04\xEA\x90Ta\x04\xCCV[\x90V[` \x91\x81R\x01\x90V[_\x7FSequencer error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05*`\x0F` \x92a\x04\xEDV[a\x053\x81a\x04\xF6V[\x01\x90V[a\x05L\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\x1DV[\x90V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x05|\x91\x02\x91a\x05v_\x19\x84a\x05]V[\x92a\x05]V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90V[a\x05\xA0a\x05\x9Ba\x05\xA5\x92a\x05\x86V[a\x05\x89V[a\x05\x86V[\x90V[\x90V[\x91\x90a\x05\xC1a\x05\xBCa\x05\xC9\x93a\x05\x8CV[a\x05\xA8V[\x90\x83Ta\x05aV[\x90UV[_\x90V[a\x05\xE3\x91a\x05\xDDa\x05\xCDV[\x91a\x05\xABV[V[[\x81\x81\x10a\x05\xF1WPPV[\x80a\x05\xFE_`\x01\x93a\x05\xD1V[\x01a\x05\xE6V[\x91\x90`\x1F\x81\x11a\x06\x14W[PPPV[a\x06 a\x06E\x93a\x02\xA6V[\x90` a\x06,\x84a\x05SV[\x83\x01\x93\x10a\x06MW[a\x06>\x90a\x05SV[\x01\x90a\x05\xE5V[_\x80\x80a\x06\x0FV[\x91Pa\x06>\x81\x92\x90Pa\x065V[\x90a\x06k\x90_\x19\x90`\x08\x02a\x01\xB6V[\x19\x16\x90V[\x81a\x06z\x91a\x06[V[\x90`\x02\x02\x17\x90V[\x91a\x06\x8D\x90\x82a\x05OV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07LWa\x06\xB1\x82a\x06\xAB\x85Ta\x02sV[\x85a\x06\x04V[_\x90`\x1F\x83\x11`\x01\x14a\x06\xE4W\x91\x80\x91a\x06\xD3\x93_\x92a\x06\xD8W[PPa\x06pV[\x90U[V[\x90\x91P\x015_\x80a\x06\xCCV[`\x1F\x19\x83\x16\x91a\x06\xF3\x85a\x02\xA6V[\x92_[\x81\x81\x10a\x074WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x07\x1AW[PPP\x02\x01\x90Ua\x06\xD6V[a\x07*\x91\x015`\x1F\x84\x16\x90a\x06[V[\x90U_\x80\x80a\x07\x0EV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x06\xF6V[a\x03RV[\x90a\x07\\\x92\x91a\x06\x82V[V[\x90a\x07i`\x01a\x04\xE0V[a\x07yWa\x07w\x91_a\x07QV[V[a\x07\x81a\0bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07\x97`\x04\x82\x01a\x057V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 ? \xF1\xA4\xF4)\xE7\xD7\xA0\xD2\xA6\x1C\x10\xD9\xCFL\x88\x90\xBEq\x0CY!\xAF8\xAD\xF5!\xCD*:\xA6dsolcC\0\x08\x19\x003",
    );
    /**Function with signature `lastProcessedData()` and selector `0xf352cd72`.
```solidity
function lastProcessedData() external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataCall {}
    ///Container type for the return parameters of the [`lastProcessedData()`](lastProcessedDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastProcessedDataCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastProcessedDataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastProcessedData()";
            const SELECTOR: [u8; 4] = [243u8, 82u8, 205u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setRevertFlag(bool)` and selector `0x381ba140`.
```solidity
function setRevertFlag(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setRevertFlag(bool)`](setRevertFlagCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagCall> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setRevertFlagCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setRevertFlagReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setRevertFlag(bool)";
            const SELECTOR: [u8; 4] = [56u8, 27u8, 161u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockMetabasedSequencerChain`](self) function calls.
    pub enum MockMetabasedSequencerChainCalls {
        #[allow(missing_docs)]
        lastProcessedData(lastProcessedDataCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        setRevertFlag(setRevertFlagCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockMetabasedSequencerChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [56u8, 27u8, 161u8, 64u8],
            [70u8, 226u8, 204u8, 9u8],
            [211u8, 7u8, 45u8, 130u8],
            [243u8, 82u8, 205u8, 114u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockMetabasedSequencerChainCalls {
        const NAME: &'static str = "MockMetabasedSequencerChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::lastProcessedData(_) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setRevertFlag(_) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls>] = &[
                {
                    fn setRevertFlag(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <setRevertFlagCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::setRevertFlag)
                    }
                    setRevertFlag
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn lastProcessedData(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::lastProcessedData)
                    }
                    lastProcessedData
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MockMetabasedSequencerChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockMetabasedSequencerChainInstance<T, P, N> {
        MockMetabasedSequencerChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockMetabasedSequencerChainInstance<T, P, N>>,
    > {
        MockMetabasedSequencerChainInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockMetabasedSequencerChainInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockMetabasedSequencerChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockMetabasedSequencerChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockMetabasedSequencerChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockMetabasedSequencerChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockMetabasedSequencerChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMetabasedSequencerChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MockMetabasedSequencerChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockMetabasedSequencerChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockMetabasedSequencerChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> MockMetabasedSequencerChainInstance<T, P, N> {
            MockMetabasedSequencerChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`lastProcessedData`] function.
        pub fn lastProcessedData(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastProcessedDataCall, N> {
            self.call_builder(&lastProcessedDataCall {})
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`setRevertFlag`] function.
        pub fn setRevertFlag(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setRevertFlagCall, N> {
            self.call_builder(&setRevertFlagCall { _shouldRevert })
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
