/**

Generated by the following Solidity interface...
```solidity
interface MetabasedSequencerChainWithDecayingPriority {
    error AlreadyInitialized();
    error CalldataNotAllowed();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _l3ChainId);

    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function calldataRequirementModule() external view returns (address);
    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function l3ChainId() external view returns (uint256);
    function owner() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processBulkTransactions(bytes[] memory data, uint256[] memory priorities) external;
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data, uint256 priority) external;
    function processTransactionRaw(bytes memory data) external;
    function proposerRequirementModule() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_l3ChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "calldataRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract CalldataPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l3ChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "proposerRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ProposerPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MetabasedSequencerChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b61010a565b61002161003d565b611a8a6104d58239608051816106600152611a8a90f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b6101076120a9803803806100fc8161008c565b9283398101906100cb565b90565b610113906101c2565b565b90565b90565b61012f61012a61013492610115565b610118565b6100a5565b90565b60209181520190565b5f7f4c3320636861696e2049442063616e6e6f742062652030000000000000000000910152565b6101746017602092610137565b61017d81610140565b0190565b6101969060208101905f818303910152610167565b90565b156101a057565b6101a861003d565b62461bcd60e51b8152806101be60048201610181565b0390fd5b6101ca6102e2565b6101e7816101e06101da5f61011b565b916100a5565b1415610199565b608052565b60a01b90565b9061020160ff60a01b916101ec565b9181191691161790565b151590565b6102199061020b565b90565b90565b9061023461022f61023b92610210565b61021c565b82546101f2565b9055565b5f0190565b61024c61003d565b3d5f823e3d90fd5b60018060a01b031690565b61027361026e61027892610254565b610118565b610254565b90565b6102849061025f565b90565b6102909061027b565b90565b5f1b90565b906102a960018060a01b0391610293565b9181191691161790565b6102bc9061027b565b90565b90565b906102d76102d26102de926102b3565b6102bf565b8254610298565b9055565b6102eb3361034f565b6102f65f600261021f565b6102fe61003d565b61014a810181811060018060401b0382111761034a57610326829161014a611f5f843961023f565b03905ff080156103455761033c61034391610287565b60016102c2565b565b610244565b610051565b610358906103b0565b565b61036e61036961037392610115565b610118565b610254565b90565b61037f9061035a565b90565b61038b90610254565b90565b61039790610382565b9052565b91906103ae905f6020850194019061038e565b565b806103cb6103c56103c05f610376565b610382565b91610382565b146103db576103d990610475565b565b6104056103e75f610376565b6103ef61003d565b918291631e4fbdf760e01b83526004830161039b565b0390fd5b5f1c90565b60018060a01b031690565b61042561042a91610409565b61040e565b90565b6104379054610419565b90565b6104439061025f565b90565b61044f9061043a565b90565b90565b9061046a61046561047192610446565b610452565b8254610298565b9055565b61047e5f61042d565b610488825f610455565b906104bc6104b67f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610446565b91610446565b916104c561003d565b806104cf8161023f565b0390a356fe60806040526004361015610013575b6109a9565b61001d5f3561013c565b80630b83249d146101375780631c0b636714610132578063333d87fe1461012d5780633514d37b146101285780633d44ae8b146101235780633dfb5ee71461011e57806346e2cc0914610119578063485cc955146101145780634fac3d441461010f578063715018a61461010a57806377bfdd191461010557806383d3c115146101005780638da5cb5b146100fb578063a830b643146100f6578063aaa60707146100f1578063babcc539146100ec578063d4f0eb4d146100e75763f2fde38b0361000e57610976565b610943565b61090e565b6108bb565b610818565b610749565b6106f1565b610682565b61062b565b6105f4565b610522565b610487565b610451565b6103f5565b610356565b6102ec565b6102b8565b6101da565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561019a5781359167ffffffffffffffff831161019557602001926020830284011161019057565b61015c565b610158565b610154565b906020828203126101d0575f82013567ffffffffffffffff81116101cb576101c79201610160565b9091565b610150565b61014c565b5f0190565b34610209576101f36101ed36600461019f565b90610bdf565b6101fb610142565b80610205816101d5565b0390f35b610148565b909182601f830112156102485781359167ffffffffffffffff831161024357602001926001830284011161023e57565b61015c565b610158565b610154565b90565b6102598161024d565b0361026057565b5f80fd5b9050359061027182610250565b565b916040838303126102b3575f83013567ffffffffffffffff81116102ae576102a0836102ab92860161020e565b939094602001610264565b90565b610150565b61014c565b346102e7576102d16102cb366004610273565b91610cd9565b6102d9610142565b806102e3816101d5565b0390f35b610148565b3461031b576103056102ff366004610273565b91610dfb565b61030d610142565b80610317816101d5565b0390f35b610148565b90602082820312610351575f82013567ffffffffffffffff811161034c57610348920161020e565b9091565b610150565b61014c565b346103855761036f610369366004610320565b90610ecd565b610377610142565b80610381816101d5565b0390f35b610148565b5f91031261039457565b61014c565b90565b90565b6103b36103ae6103b892610399565b61039c565b61024d565b90565b6103c5600a61039f565b90565b6103d06103bb565b90565b6103dc9061024d565b9052565b91906103f3905f602085019401906103d3565b565b346104255761040536600461038a565b6104216104106103c8565b610418610142565b918291826103e0565b0390f35b610148565b151590565b6104389061042a565b9052565b919061044f905f6020850194019061042f565b565b346104825761047e61046d610467366004610320565b90610f97565b610475610142565b9182918261043c565b0390f35b610148565b346104b6576104a061049a366004610320565b906110e1565b6104a8610142565b806104b2816101d5565b0390f35b610148565b60018060a01b031690565b6104cf906104bb565b90565b6104db816104c6565b036104e257565b5f80fd5b905035906104f3826104d2565b565b919060408382031261051d578061051161051a925f86016104e6565b936020016104e6565b90565b61014c565b346105515761053b6105353660046104f5565b90611301565b610543610142565b8061054d816101d5565b0390f35b610148565b909182601f830112156105905781359167ffffffffffffffff831161058b57602001926020830284011161058657565b61015c565b610158565b610154565b90916040828403126105ef575f82013567ffffffffffffffff81116105ea57836105c0918401610160565b929093602082013567ffffffffffffffff81116105e5576105e19201610556565b9091565b610150565b610150565b61014c565b3461062657610610610607366004610595565b92919091611527565b610618610142565b80610622816101d5565b0390f35b610148565b346106595761063b36600461038a565b61064361155a565b61064b610142565b80610655816101d5565b0390f35b610148565b7f000000000000000000000000000000000000000000000000000000000000000090565b346106b25761069236600461038a565b6106ae61069d61065e565b6106a5610142565b918291826103e0565b0390f35b610148565b90916060828403126106ec576106e96106d2845f8501610264565b936106e08160208601610264565b93604001610264565b90565b61014c565b346107225761071e61070d6107073660046106b7565b916115d6565b610715610142565b918291826103e0565b0390f35b610148565b610730906104c6565b9052565b9190610747905f60208501940190610727565b565b346107795761075936600461038a565b61077561076461167c565b61076c610142565b91829182610734565b0390f35b610148565b1c90565b60018060a01b031690565b61079d9060086107a2930261077e565b610782565b90565b906107b0915461078d565b90565b6107bf60015f906107a5565b90565b6107d66107d16107db926104bb565b61039c565b6104bb565b90565b6107e7906107c2565b90565b6107f3906107de565b90565b6107ff906107ea565b9052565b9190610816905f602085019401906107f6565b565b346108485761082836600461038a565b6108446108336107b3565b61083b610142565b91829182610803565b0390f35b610148565b60018060a01b031690565b61086890600861086d930261077e565b61084d565b90565b9061087b9154610858565b90565b61088a60025f90610870565b90565b610896906107de565b90565b6108a29061088d565b9052565b91906108b9905f60208501940190610899565b565b346108eb576108cb36600461038a565b6108e76108d661087e565b6108de610142565b918291826108a6565b0390f35b610148565b9060208282031261090957610906915f016104e6565b90565b61014c565b3461093e5761093a6109296109243660046108f0565b6116b2565b610931610142565b9182918261043c565b0390f35b610148565b346109715761095b6109563660046108f0565b6117ee565b610963610142565b8061096d816101d5565b0390f35b610148565b346109a45761098e6109893660046108f0565b611865565b610996610142565b806109a0816101d5565b0390f35b610148565b5f80fd5b919033926109c36109bd856116b2565b1561042a565b6109d4576109d2929350610b2a565b565b6109f6846109e0610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b5090565b90565b610a15610a10610a1a926109fe565b61039c565b61024d565b90565b6001610a29910161024d565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610a8e570180359067ffffffffffffffff8211610a8957602001916001820236038313610a8457565b610a48565b610a44565b610a40565b90821015610aae576020610aaa9202810190610a4c565b9091565b610a2c565b610abc906107de565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610b00610b09602093610b0e93610af781610abf565b93848093610ac3565b95869101610acc565b610ad7565b0190565b610b279160208201915f818403910152610ae1565b90565b919091610b388184906109fa565b91610b425f610a01565b5b80610b56610b508661024d565b9161024d565b1015610bd857610bd390610b75610b6f85888491610a93565b90611870565b33610b8b610b8586898591610a93565b9061192f565b90610bcb610bb97f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ab3565b92610bc2610142565b91829182610b12565b0390a2610a1d565b610b43565b5092505050565b90610be9916109ad565b565b9291903393610c02610bfc866116b2565b1561042a565b610c1357610c11939450610c39565b565b610c3585610c1f610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b90610c4f9291610c4a818390611870565b610c86565b565b604090610c7d610c72610c849597969460608401908482035f860152610ae1565b9660208301906103d3565b01906103d3565b565b90610c9290339261192f565b914292610cd4610cc27f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610ab3565b94610ccb610142565b93849384610c51565b0390a2565b90610ce49291610beb565b565b9291903393610cfd610cf7866116b2565b1561042a565b610d0e57610d0c939450610d34565b565b610d3085610d1a610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b90610d4a9291610d45818390611870565b610daf565b565b90825f939282370152565b9190610d7181610d6a81610d7695610ac3565b8095610d4c565b610ad7565b0190565b610da6610d9b604093610dad9698979560608501918583035f870152610d57565b9660208301906103d3565b01906103d3565b565b90913391929092610df642610de47f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610ab3565b95610ded610142565b94859485610d7a565b0390a2565b90610e069291610ce6565b565b91903392610e1e610e18856116b2565b1561042a565b610e2f57610e2d929350610e55565b565b610e5184610e3b610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b90610e6a91610e65818390611870565b610e86565b565b9091610e839260208301925f818503910152610d57565b90565b339091610eb37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ab3565b92610ec8610ebf610142565b92839283610e6c565b0390a2565b90610ed791610e08565b565b5f90565b5f1c90565b610eee610ef391610edd565b61084d565b90565b610f009054610ee2565b90565b634e487b7160e01b5f52604160045260245ffd5b90610f2190610ad7565b810190811067ffffffffffffffff821117610f3b57604052565b610f03565b60e01b90565b610f4f8161042a565b03610f5657565b5f80fd5b90505190610f6782610f46565b565b90602082820312610f8257610f7f915f01610f5a565b90565b61014c565b610f8f610142565b3d5f823e3d90fd5b90602090610fa3610ed9565b50610fb6610fb16002610ef6565b61088d565b610fd8633dfb5ee7949294610fe3610fcc610142565b96879586948594610f40565b845260048401610e6c565b03915afa908115611027575f91610ff9575b5090565b61101a915060203d8111611020575b6110128183610f17565b810190610f69565b5f610ff5565b503d611008565b610f87565b9190339261104261103c856116b2565b1561042a565b61105357611051929350611079565b565b6110758461105f610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b9061108e91611089818390611870565b611090565b565b9061109c90339261192f565b906110dc6110ca7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ab3565b926110d3610142565b91829182610b12565b0390a2565b906110eb9161102c565b565b906110ff916110fa611970565b611252565b565b60a01c90565b60ff1690565b61111961111e91611101565b611107565b90565b61112b905461110d565b90565b61114261113d611147926109fe565b61039c565b6104bb565b90565b6111539061112e565b90565b60a01b90565b9061116b60ff60a01b91611156565b9181191691161790565b61117e9061042a565b90565b90565b906111996111946111a092611175565b611181565b825461115c565b9055565b6111ad906107c2565b90565b6111b9906111a4565b90565b5f1b90565b906111d260018060a01b03916111bc565b9181191691161790565b6111e5906111a4565b90565b90565b906112006111fb611207926111dc565b6111e8565b82546111c1565b9055565b611214906107c2565b90565b6112209061120b565b90565b61122c9061120b565b90565b90565b9061124761124261124e92611223565b61122f565b82546111c1565b9055565b61125c6002611121565b6112df578161127b6112756112705f61114a565b6104c6565b916104c6565b146112bc576112b56112ae6112ba9361129660016002611184565b6112a96112a2826111b0565b60016111eb565b611217565b6002611232565b611865565b565b6112c4610142565b632e7f3c7f60e11b8152806112db600482016101d5565b0390fd5b6112e7610142565b62dc149f60e41b8152806112fd600482016101d5565b0390fd5b9061130b916110ed565b565b93929190339461132561131f876116b2565b1561042a565b61133657611334949550611433565b565b61135886611342610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b6113c36032604092611360565b6113cc81611369565b0190565b6113e59060208101905f8183039101526113b6565b90565b156113ef57565b6113f7610142565b62461bcd60e51b81528061140d600482016113d0565b0390fd5b9190811015611421576020020190565b610a2c565b3561143081610250565b90565b909392936114428282906109fa565b936114698561146361145d611458888b9061135c565b61024d565b9161024d565b146113e8565b6114725f610a01565b5b806114866114808861024d565b9161024d565b101561151e57611519906114a561149f86868491610a93565b90611870565b336114bb6114b587878591610a93565b9061192f565b906114d06114cb898c8691611411565b611426565b42926115116114ff7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610ab3565b94611508610142565b93849384610c51565b0390a2610a1d565b611473565b50945050505050565b9061153393929161130d565b565b61153d611970565b611545611547565b565b6115586115535f61114a565b6119e8565b565b611562611535565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61158b6115919193929361024d565b9261024d565b820391821161159c57565b611568565b6115b06115b69193929361024d565b9261024d565b916115c283820261024d565b9281840414901517156115d157565b611568565b916115df611564565b50806115f36115ed8461024d565b9161024d565b111561164757611614916116069161157c565b61160e6103bb565b906115a1565b806116276116218461024d565b9161024d565b1015611639576116369161157c565b90565b50506116445f610a01565b90565b505090565b5f90565b60018060a01b031690565b61166761166c91610edd565b611650565b90565b611679905461165b565b90565b61168461164c565b5061168e5f61166f565b90565b61169d6116a291610edd565b610782565b90565b6116af9054611691565b90565b60206116fa916116c0610ed9565b506116d36116ce60016116a5565b6107ea565b6116ef63babcc5396116e3610142565b95869485938493610f40565b835260048301610734565b03915afa90811561173e575f91611710575b5090565b611731915060203d8111611737575b6117298183610f17565b810190610f69565b5f61170c565b503d61171f565b610f87565b6117549061174f611970565b611756565b565b8061177161176b6117665f61114a565b6104c6565b916104c6565b146117cb57611789611782826111b0565b60016111eb565b6117b37f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610ab3565b906117bc610142565b806117c6816101d5565b0390a2565b6117d3610142565b632e7f3c7f60e11b8152806117ea600482016101d5565b0390fd5b6117f790611743565b565b61180a90611805611970565b61180c565b565b8061182761182161181c5f61114a565b6104c6565b916104c6565b1461183757611835906119e8565b565b6118616118435f61114a565b61184b610142565b918291631e4fbdf760e01b835260048301610734565b0390fd5b61186e906117f9565b565b6118839161187d91610f97565b1561042a565b61188957565b611891610142565b6360c054b160e11b8152806118a8600482016101d5565b0390fd5b606090565b60ff60f81b1690565b60f81b90565b6118d46118cf6118d9926109fe565b6118ba565b6118b1565b90565b90565b6118eb6118f0916118b1565b6118dc565b9052565b905090565b90918261190981611910936118f4565b8093610d4c565b0190565b8061192560019261192c96946118df565b01916118f9565b90565b61196d9061193b6118ac565b5061195e6119485f6118c0565b9193611952610142565b94859360208501611914565b60208201810382520382610f17565b90565b61197861167c565b61199161198b611986611a47565b6104c6565b916104c6565b0361199857565b6119c16119a3611a47565b6119ab610142565b91829163118cdaa760e01b835260048301610734565b0390fd5b90565b906119dd6119d86119e492610ab3565b6119c5565b82546111c1565b9055565b6119f15f61166f565b6119fb825f6119c8565b90611a2f611a297f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ab3565b91610ab3565b91611a38610142565b80611a42816101d5565b0390a3565b611a4f61164c565b50339056fea264697066735822122081c326e7c825309c48453f9b6b60dfae1b39752fab0fefeb59735e2301f1c73a64736f6c63430008190033608060405234601c57600e6020565b61011f61002b823961011f90f35b6026565b60405190565b5f80fdfe608060405260043610156011575b60d5565b60195f356026565b63babcc53903600d5760aa565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b604c90603a565b90565b6056816045565b03605c57565b5f80fd5b90503590606b82604f565b565b906020828203126083576080915f016060565b90565b6036565b151590565b6093906087565b9052565b919060a8905f60208501940190608c565b565b3460d15760cd60bf60bb366004606d565b60dd565b60c5602c565b918291826097565b0390f35b6032565b5f80fd5b5f90565b5060e460d9565b505f9056fea26469706673582212208d465723f619f3308f3fe4d0f80f54b50ae02995f177a2a01a2be11072dcb75164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\nV[a\0!a\0=V[a\x1A\x8Aa\x04\xD5\x829`\x80Q\x81a\x06`\x01Ra\x1A\x8A\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a \xA9\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[a\x01\x13\x90a\x01\xC2V[V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FL3 chain ID cannot be 0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01t`\x17` \x92a\x017V[a\x01}\x81a\x01@V[\x01\x90V[a\x01\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01gV[\x90V[\x15a\x01\xA0WV[a\x01\xA8a\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xBE`\x04\x82\x01a\x01\x81V[\x03\x90\xFD[a\x01\xCAa\x02\xE2V[a\x01\xE7\x81a\x01\xE0a\x01\xDA_a\x01\x1BV[\x91a\0\xA5V[\x14\x15a\x01\x99V[`\x80RV[`\xA0\x1B\x90V[\x90a\x02\x01`\xFF`\xA0\x1B\x91a\x01\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x19\x90a\x02\x0BV[\x90V[\x90V[\x90a\x024a\x02/a\x02;\x92a\x02\x10V[a\x02\x1CV[\x82Ta\x01\xF2V[\x90UV[_\x01\x90V[a\x02La\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02sa\x02na\x02x\x92a\x02TV[a\x01\x18V[a\x02TV[\x90V[a\x02\x84\x90a\x02_V[\x90V[a\x02\x90\x90a\x02{V[\x90V[_\x1B\x90V[\x90a\x02\xA9`\x01\x80`\xA0\x1B\x03\x91a\x02\x93V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xBC\x90a\x02{V[\x90V[\x90V[\x90a\x02\xD7a\x02\xD2a\x02\xDE\x92a\x02\xB3V[a\x02\xBFV[\x82Ta\x02\x98V[\x90UV[a\x02\xEB3a\x03OV[a\x02\xF6_`\x02a\x02\x1FV[a\x02\xFEa\0=V[a\x01J\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03JWa\x03&\x82\x91a\x01Ja\x1F_\x849a\x02?V[\x03\x90_\xF0\x80\x15a\x03EWa\x03<a\x03C\x91a\x02\x87V[`\x01a\x02\xC2V[V[a\x02DV[a\0QV[a\x03X\x90a\x03\xB0V[V[a\x03na\x03ia\x03s\x92a\x01\x15V[a\x01\x18V[a\x02TV[\x90V[a\x03\x7F\x90a\x03ZV[\x90V[a\x03\x8B\x90a\x02TV[\x90V[a\x03\x97\x90a\x03\x82V[\x90RV[\x91\x90a\x03\xAE\x90_` \x85\x01\x94\x01\x90a\x03\x8EV[V[\x80a\x03\xCBa\x03\xC5a\x03\xC0_a\x03vV[a\x03\x82V[\x91a\x03\x82V[\x14a\x03\xDBWa\x03\xD9\x90a\x04uV[V[a\x04\x05a\x03\xE7_a\x03vV[a\x03\xEFa\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x9BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04%a\x04*\x91a\x04\tV[a\x04\x0EV[\x90V[a\x047\x90Ta\x04\x19V[\x90V[a\x04C\x90a\x02_V[\x90V[a\x04O\x90a\x04:V[\x90V[\x90V[\x90a\x04ja\x04ea\x04q\x92a\x04FV[a\x04RV[\x82Ta\x02\x98V[\x90UV[a\x04~_a\x04-V[a\x04\x88\x82_a\x04UV[\x90a\x04\xBCa\x04\xB6\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04FV[\x91a\x04FV[\x91a\x04\xC5a\0=V[\x80a\x04\xCF\x81a\x02?V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\t\xA9V[a\0\x1D_5a\x01<V[\x80c\x0B\x83$\x9D\x14a\x017W\x80c\x1C\x0Bcg\x14a\x012W\x80c3=\x87\xFE\x14a\x01-W\x80c5\x14\xD3{\x14a\x01(W\x80c=D\xAE\x8B\x14a\x01#W\x80c=\xFB^\xE7\x14a\x01\x1EW\x80cF\xE2\xCC\t\x14a\x01\x19W\x80cH\\\xC9U\x14a\x01\x14W\x80cO\xAC=D\x14a\x01\x0FW\x80cqP\x18\xA6\x14a\x01\nW\x80cw\xBF\xDD\x19\x14a\x01\x05W\x80c\x83\xD3\xC1\x15\x14a\x01\0W\x80c\x8D\xA5\xCB[\x14a\0\xFBW\x80c\xA80\xB6C\x14a\0\xF6W\x80c\xAA\xA6\x07\x07\x14a\0\xF1W\x80c\xBA\xBC\xC59\x14a\0\xECW\x80c\xD4\xF0\xEBM\x14a\0\xE7Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\tvV[a\tCV[a\t\x0EV[a\x08\xBBV[a\x08\x18V[a\x07IV[a\x06\xF1V[a\x06\x82V[a\x06+V[a\x05\xF4V[a\x05\"V[a\x04\x87V[a\x04QV[a\x03\xF5V[a\x03VV[a\x02\xECV[a\x02\xB8V[a\x01\xDAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x9AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x95W` \x01\x92` \x83\x02\x84\x01\x11a\x01\x90WV[a\x01\\V[a\x01XV[a\x01TV[\x90` \x82\x82\x03\x12a\x01\xD0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xCBWa\x01\xC7\x92\x01a\x01`V[\x90\x91V[a\x01PV[a\x01LV[_\x01\x90V[4a\x02\tWa\x01\xF3a\x01\xED6`\x04a\x01\x9FV[\x90a\x0B\xDFV[a\x01\xFBa\x01BV[\x80a\x02\x05\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02HW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02CW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02>WV[a\x01\\V[a\x01XV[a\x01TV[\x90V[a\x02Y\x81a\x02MV[\x03a\x02`WV[_\x80\xFD[\x90P5\x90a\x02q\x82a\x02PV[V[\x91`@\x83\x83\x03\x12a\x02\xB3W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xAEWa\x02\xA0\x83a\x02\xAB\x92\x86\x01a\x02\x0EV[\x93\x90\x94` \x01a\x02dV[\x90V[a\x01PV[a\x01LV[4a\x02\xE7Wa\x02\xD1a\x02\xCB6`\x04a\x02sV[\x91a\x0C\xD9V[a\x02\xD9a\x01BV[\x80a\x02\xE3\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[4a\x03\x1BWa\x03\x05a\x02\xFF6`\x04a\x02sV[\x91a\r\xFBV[a\x03\ra\x01BV[\x80a\x03\x17\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x90` \x82\x82\x03\x12a\x03QW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03LWa\x03H\x92\x01a\x02\x0EV[\x90\x91V[a\x01PV[a\x01LV[4a\x03\x85Wa\x03oa\x03i6`\x04a\x03 V[\x90a\x0E\xCDV[a\x03wa\x01BV[\x80a\x03\x81\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[_\x91\x03\x12a\x03\x94WV[a\x01LV[\x90V[\x90V[a\x03\xB3a\x03\xAEa\x03\xB8\x92a\x03\x99V[a\x03\x9CV[a\x02MV[\x90V[a\x03\xC5`\na\x03\x9FV[\x90V[a\x03\xD0a\x03\xBBV[\x90V[a\x03\xDC\x90a\x02MV[\x90RV[\x91\x90a\x03\xF3\x90_` \x85\x01\x94\x01\x90a\x03\xD3V[V[4a\x04%Wa\x04\x056`\x04a\x03\x8AV[a\x04!a\x04\x10a\x03\xC8V[a\x04\x18a\x01BV[\x91\x82\x91\x82a\x03\xE0V[\x03\x90\xF3[a\x01HV[\x15\x15\x90V[a\x048\x90a\x04*V[\x90RV[\x91\x90a\x04O\x90_` \x85\x01\x94\x01\x90a\x04/V[V[4a\x04\x82Wa\x04~a\x04ma\x04g6`\x04a\x03 V[\x90a\x0F\x97V[a\x04ua\x01BV[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\x01HV[4a\x04\xB6Wa\x04\xA0a\x04\x9A6`\x04a\x03 V[\x90a\x10\xE1V[a\x04\xA8a\x01BV[\x80a\x04\xB2\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xCF\x90a\x04\xBBV[\x90V[a\x04\xDB\x81a\x04\xC6V[\x03a\x04\xE2WV[_\x80\xFD[\x90P5\x90a\x04\xF3\x82a\x04\xD2V[V[\x91\x90`@\x83\x82\x03\x12a\x05\x1DW\x80a\x05\x11a\x05\x1A\x92_\x86\x01a\x04\xE6V[\x93` \x01a\x04\xE6V[\x90V[a\x01LV[4a\x05QWa\x05;a\x0556`\x04a\x04\xF5V[\x90a\x13\x01V[a\x05Ca\x01BV[\x80a\x05M\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x90W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x8BW` \x01\x92` \x83\x02\x84\x01\x11a\x05\x86WV[a\x01\\V[a\x01XV[a\x01TV[\x90\x91`@\x82\x84\x03\x12a\x05\xEFW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xEAW\x83a\x05\xC0\x91\x84\x01a\x01`V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xE5Wa\x05\xE1\x92\x01a\x05VV[\x90\x91V[a\x01PV[a\x01PV[a\x01LV[4a\x06&Wa\x06\x10a\x06\x076`\x04a\x05\x95V[\x92\x91\x90\x91a\x15'V[a\x06\x18a\x01BV[\x80a\x06\"\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[4a\x06YWa\x06;6`\x04a\x03\x8AV[a\x06Ca\x15ZV[a\x06Ka\x01BV[\x80a\x06U\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x06\xB2Wa\x06\x926`\x04a\x03\x8AV[a\x06\xAEa\x06\x9Da\x06^V[a\x06\xA5a\x01BV[\x91\x82\x91\x82a\x03\xE0V[\x03\x90\xF3[a\x01HV[\x90\x91``\x82\x84\x03\x12a\x06\xECWa\x06\xE9a\x06\xD2\x84_\x85\x01a\x02dV[\x93a\x06\xE0\x81` \x86\x01a\x02dV[\x93`@\x01a\x02dV[\x90V[a\x01LV[4a\x07\"Wa\x07\x1Ea\x07\ra\x07\x076`\x04a\x06\xB7V[\x91a\x15\xD6V[a\x07\x15a\x01BV[\x91\x82\x91\x82a\x03\xE0V[\x03\x90\xF3[a\x01HV[a\x070\x90a\x04\xC6V[\x90RV[\x91\x90a\x07G\x90_` \x85\x01\x94\x01\x90a\x07'V[V[4a\x07yWa\x07Y6`\x04a\x03\x8AV[a\x07ua\x07da\x16|V[a\x07la\x01BV[\x91\x82\x91\x82a\x074V[\x03\x90\xF3[a\x01HV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07\x9D\x90`\x08a\x07\xA2\x93\x02a\x07~V[a\x07\x82V[\x90V[\x90a\x07\xB0\x91Ta\x07\x8DV[\x90V[a\x07\xBF`\x01_\x90a\x07\xA5V[\x90V[a\x07\xD6a\x07\xD1a\x07\xDB\x92a\x04\xBBV[a\x03\x9CV[a\x04\xBBV[\x90V[a\x07\xE7\x90a\x07\xC2V[\x90V[a\x07\xF3\x90a\x07\xDEV[\x90V[a\x07\xFF\x90a\x07\xEAV[\x90RV[\x91\x90a\x08\x16\x90_` \x85\x01\x94\x01\x90a\x07\xF6V[V[4a\x08HWa\x08(6`\x04a\x03\x8AV[a\x08Da\x083a\x07\xB3V[a\x08;a\x01BV[\x91\x82\x91\x82a\x08\x03V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x08h\x90`\x08a\x08m\x93\x02a\x07~V[a\x08MV[\x90V[\x90a\x08{\x91Ta\x08XV[\x90V[a\x08\x8A`\x02_\x90a\x08pV[\x90V[a\x08\x96\x90a\x07\xDEV[\x90V[a\x08\xA2\x90a\x08\x8DV[\x90RV[\x91\x90a\x08\xB9\x90_` \x85\x01\x94\x01\x90a\x08\x99V[V[4a\x08\xEBWa\x08\xCB6`\x04a\x03\x8AV[a\x08\xE7a\x08\xD6a\x08~V[a\x08\xDEa\x01BV[\x91\x82\x91\x82a\x08\xA6V[\x03\x90\xF3[a\x01HV[\x90` \x82\x82\x03\x12a\t\tWa\t\x06\x91_\x01a\x04\xE6V[\x90V[a\x01LV[4a\t>Wa\t:a\t)a\t$6`\x04a\x08\xF0V[a\x16\xB2V[a\t1a\x01BV[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\x01HV[4a\tqWa\t[a\tV6`\x04a\x08\xF0V[a\x17\xEEV[a\tca\x01BV[\x80a\tm\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[4a\t\xA4Wa\t\x8Ea\t\x896`\x04a\x08\xF0V[a\x18eV[a\t\x96a\x01BV[\x80a\t\xA0\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[_\x80\xFD[\x91\x903\x92a\t\xC3a\t\xBD\x85a\x16\xB2V[\x15a\x04*V[a\t\xD4Wa\t\xD2\x92\x93Pa\x0B*V[V[a\t\xF6\x84a\t\xE0a\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[P\x90V[\x90V[a\n\x15a\n\x10a\n\x1A\x92a\t\xFEV[a\x03\x9CV[a\x02MV[\x90V[`\x01a\n)\x91\x01a\x02MV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\n\x8EW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\x89W` \x01\x91`\x01\x82\x026\x03\x83\x13a\n\x84WV[a\nHV[a\nDV[a\n@V[\x90\x82\x10\x15a\n\xAEW` a\n\xAA\x92\x02\x81\x01\x90a\nLV[\x90\x91V[a\n,V[a\n\xBC\x90a\x07\xDEV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x0B\0a\x0B\t` \x93a\x0B\x0E\x93a\n\xF7\x81a\n\xBFV[\x93\x84\x80\x93a\n\xC3V[\x95\x86\x91\x01a\n\xCCV[a\n\xD7V[\x01\x90V[a\x0B'\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\n\xE1V[\x90V[\x91\x90\x91a\x0B8\x81\x84\x90a\t\xFAV[\x91a\x0BB_a\n\x01V[[\x80a\x0BVa\x0BP\x86a\x02MV[\x91a\x02MV[\x10\x15a\x0B\xD8Wa\x0B\xD3\x90a\x0Bua\x0Bo\x85\x88\x84\x91a\n\x93V[\x90a\x18pV[3a\x0B\x8Ba\x0B\x85\x86\x89\x85\x91a\n\x93V[\x90a\x19/V[\x90a\x0B\xCBa\x0B\xB9\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\xB3V[\x92a\x0B\xC2a\x01BV[\x91\x82\x91\x82a\x0B\x12V[\x03\x90\xA2a\n\x1DV[a\x0BCV[P\x92PPPV[\x90a\x0B\xE9\x91a\t\xADV[V[\x92\x91\x903\x93a\x0C\x02a\x0B\xFC\x86a\x16\xB2V[\x15a\x04*V[a\x0C\x13Wa\x0C\x11\x93\x94Pa\x0C9V[V[a\x0C5\x85a\x0C\x1Fa\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\x0CO\x92\x91a\x0CJ\x81\x83\x90a\x18pV[a\x0C\x86V[V[`@\x90a\x0C}a\x0Cra\x0C\x84\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\n\xE1V[\x96` \x83\x01\x90a\x03\xD3V[\x01\x90a\x03\xD3V[V[\x90a\x0C\x92\x903\x92a\x19/V[\x91B\x92a\x0C\xD4a\x0C\xC2\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\xB3V[\x94a\x0C\xCBa\x01BV[\x93\x84\x93\x84a\x0CQV[\x03\x90\xA2V[\x90a\x0C\xE4\x92\x91a\x0B\xEBV[V[\x92\x91\x903\x93a\x0C\xFDa\x0C\xF7\x86a\x16\xB2V[\x15a\x04*V[a\r\x0EWa\r\x0C\x93\x94Pa\r4V[V[a\r0\x85a\r\x1Aa\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\rJ\x92\x91a\rE\x81\x83\x90a\x18pV[a\r\xAFV[V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\rq\x81a\rj\x81a\rv\x95a\n\xC3V[\x80\x95a\rLV[a\n\xD7V[\x01\x90V[a\r\xA6a\r\x9B`@\x93a\r\xAD\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\rWV[\x96` \x83\x01\x90a\x03\xD3V[\x01\x90a\x03\xD3V[V[\x90\x913\x91\x92\x90\x92a\r\xF6Ba\r\xE4\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\n\xB3V[\x95a\r\xEDa\x01BV[\x94\x85\x94\x85a\rzV[\x03\x90\xA2V[\x90a\x0E\x06\x92\x91a\x0C\xE6V[V[\x91\x903\x92a\x0E\x1Ea\x0E\x18\x85a\x16\xB2V[\x15a\x04*V[a\x0E/Wa\x0E-\x92\x93Pa\x0EUV[V[a\x0EQ\x84a\x0E;a\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\x0Ej\x91a\x0Ee\x81\x83\x90a\x18pV[a\x0E\x86V[V[\x90\x91a\x0E\x83\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\rWV[\x90V[3\x90\x91a\x0E\xB3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\xB3V[\x92a\x0E\xC8a\x0E\xBFa\x01BV[\x92\x83\x92\x83a\x0ElV[\x03\x90\xA2V[\x90a\x0E\xD7\x91a\x0E\x08V[V[_\x90V[_\x1C\x90V[a\x0E\xEEa\x0E\xF3\x91a\x0E\xDDV[a\x08MV[\x90V[a\x0F\0\x90Ta\x0E\xE2V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0F!\x90a\n\xD7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0F;W`@RV[a\x0F\x03V[`\xE0\x1B\x90V[a\x0FO\x81a\x04*V[\x03a\x0FVWV[_\x80\xFD[\x90PQ\x90a\x0Fg\x82a\x0FFV[V[\x90` \x82\x82\x03\x12a\x0F\x82Wa\x0F\x7F\x91_\x01a\x0FZV[\x90V[a\x01LV[a\x0F\x8Fa\x01BV[=_\x82>=\x90\xFD[\x90` \x90a\x0F\xA3a\x0E\xD9V[Pa\x0F\xB6a\x0F\xB1`\x02a\x0E\xF6V[a\x08\x8DV[a\x0F\xD8c=\xFB^\xE7\x94\x92\x94a\x0F\xE3a\x0F\xCCa\x01BV[\x96\x87\x95\x86\x94\x85\x94a\x0F@V[\x84R`\x04\x84\x01a\x0ElV[\x03\x91Z\xFA\x90\x81\x15a\x10'W_\x91a\x0F\xF9W[P\x90V[a\x10\x1A\x91P` =\x81\x11a\x10 W[a\x10\x12\x81\x83a\x0F\x17V[\x81\x01\x90a\x0FiV[_a\x0F\xF5V[P=a\x10\x08V[a\x0F\x87V[\x91\x903\x92a\x10Ba\x10<\x85a\x16\xB2V[\x15a\x04*V[a\x10SWa\x10Q\x92\x93Pa\x10yV[V[a\x10u\x84a\x10_a\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\x10\x8E\x91a\x10\x89\x81\x83\x90a\x18pV[a\x10\x90V[V[\x90a\x10\x9C\x903\x92a\x19/V[\x90a\x10\xDCa\x10\xCA\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\xB3V[\x92a\x10\xD3a\x01BV[\x91\x82\x91\x82a\x0B\x12V[\x03\x90\xA2V[\x90a\x10\xEB\x91a\x10,V[V[\x90a\x10\xFF\x91a\x10\xFAa\x19pV[a\x12RV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x11\x19a\x11\x1E\x91a\x11\x01V[a\x11\x07V[\x90V[a\x11+\x90Ta\x11\rV[\x90V[a\x11Ba\x11=a\x11G\x92a\t\xFEV[a\x03\x9CV[a\x04\xBBV[\x90V[a\x11S\x90a\x11.V[\x90V[`\xA0\x1B\x90V[\x90a\x11k`\xFF`\xA0\x1B\x91a\x11VV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11~\x90a\x04*V[\x90V[\x90V[\x90a\x11\x99a\x11\x94a\x11\xA0\x92a\x11uV[a\x11\x81V[\x82Ta\x11\\V[\x90UV[a\x11\xAD\x90a\x07\xC2V[\x90V[a\x11\xB9\x90a\x11\xA4V[\x90V[_\x1B\x90V[\x90a\x11\xD2`\x01\x80`\xA0\x1B\x03\x91a\x11\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xE5\x90a\x11\xA4V[\x90V[\x90V[\x90a\x12\0a\x11\xFBa\x12\x07\x92a\x11\xDCV[a\x11\xE8V[\x82Ta\x11\xC1V[\x90UV[a\x12\x14\x90a\x07\xC2V[\x90V[a\x12 \x90a\x12\x0BV[\x90V[a\x12,\x90a\x12\x0BV[\x90V[\x90V[\x90a\x12Ga\x12Ba\x12N\x92a\x12#V[a\x12/V[\x82Ta\x11\xC1V[\x90UV[a\x12\\`\x02a\x11!V[a\x12\xDFW\x81a\x12{a\x12ua\x12p_a\x11JV[a\x04\xC6V[\x91a\x04\xC6V[\x14a\x12\xBCWa\x12\xB5a\x12\xAEa\x12\xBA\x93a\x12\x96`\x01`\x02a\x11\x84V[a\x12\xA9a\x12\xA2\x82a\x11\xB0V[`\x01a\x11\xEBV[a\x12\x17V[`\x02a\x122V[a\x18eV[V[a\x12\xC4a\x01BV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x12\xDB`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[a\x12\xE7a\x01BV[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x12\xFD`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[\x90a\x13\x0B\x91a\x10\xEDV[V[\x93\x92\x91\x903\x94a\x13%a\x13\x1F\x87a\x16\xB2V[\x15a\x04*V[a\x136Wa\x134\x94\x95Pa\x143V[V[a\x13X\x86a\x13Ba\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x13\xC3`2`@\x92a\x13`V[a\x13\xCC\x81a\x13iV[\x01\x90V[a\x13\xE5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xB6V[\x90V[\x15a\x13\xEFWV[a\x13\xF7a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\r`\x04\x82\x01a\x13\xD0V[\x03\x90\xFD[\x91\x90\x81\x10\x15a\x14!W` \x02\x01\x90V[a\n,V[5a\x140\x81a\x02PV[\x90V[\x90\x93\x92\x93a\x14B\x82\x82\x90a\t\xFAV[\x93a\x14i\x85a\x14ca\x14]a\x14X\x88\x8B\x90a\x13\\V[a\x02MV[\x91a\x02MV[\x14a\x13\xE8V[a\x14r_a\n\x01V[[\x80a\x14\x86a\x14\x80\x88a\x02MV[\x91a\x02MV[\x10\x15a\x15\x1EWa\x15\x19\x90a\x14\xA5a\x14\x9F\x86\x86\x84\x91a\n\x93V[\x90a\x18pV[3a\x14\xBBa\x14\xB5\x87\x87\x85\x91a\n\x93V[\x90a\x19/V[\x90a\x14\xD0a\x14\xCB\x89\x8C\x86\x91a\x14\x11V[a\x14&V[B\x92a\x15\x11a\x14\xFF\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\xB3V[\x94a\x15\x08a\x01BV[\x93\x84\x93\x84a\x0CQV[\x03\x90\xA2a\n\x1DV[a\x14sV[P\x94PPPPPV[\x90a\x153\x93\x92\x91a\x13\rV[V[a\x15=a\x19pV[a\x15Ea\x15GV[V[a\x15Xa\x15S_a\x11JV[a\x19\xE8V[V[a\x15ba\x155V[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\x8Ba\x15\x91\x91\x93\x92\x93a\x02MV[\x92a\x02MV[\x82\x03\x91\x82\x11a\x15\x9CWV[a\x15hV[a\x15\xB0a\x15\xB6\x91\x93\x92\x93a\x02MV[\x92a\x02MV[\x91a\x15\xC2\x83\x82\x02a\x02MV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\xD1WV[a\x15hV[\x91a\x15\xDFa\x15dV[P\x80a\x15\xF3a\x15\xED\x84a\x02MV[\x91a\x02MV[\x11\x15a\x16GWa\x16\x14\x91a\x16\x06\x91a\x15|V[a\x16\x0Ea\x03\xBBV[\x90a\x15\xA1V[\x80a\x16'a\x16!\x84a\x02MV[\x91a\x02MV[\x10\x15a\x169Wa\x166\x91a\x15|V[\x90V[PPa\x16D_a\n\x01V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16ga\x16l\x91a\x0E\xDDV[a\x16PV[\x90V[a\x16y\x90Ta\x16[V[\x90V[a\x16\x84a\x16LV[Pa\x16\x8E_a\x16oV[\x90V[a\x16\x9Da\x16\xA2\x91a\x0E\xDDV[a\x07\x82V[\x90V[a\x16\xAF\x90Ta\x16\x91V[\x90V[` a\x16\xFA\x91a\x16\xC0a\x0E\xD9V[Pa\x16\xD3a\x16\xCE`\x01a\x16\xA5V[a\x07\xEAV[a\x16\xEFc\xBA\xBC\xC59a\x16\xE3a\x01BV[\x95\x86\x94\x85\x93\x84\x93a\x0F@V[\x83R`\x04\x83\x01a\x074V[\x03\x91Z\xFA\x90\x81\x15a\x17>W_\x91a\x17\x10W[P\x90V[a\x171\x91P` =\x81\x11a\x177W[a\x17)\x81\x83a\x0F\x17V[\x81\x01\x90a\x0FiV[_a\x17\x0CV[P=a\x17\x1FV[a\x0F\x87V[a\x17T\x90a\x17Oa\x19pV[a\x17VV[V[\x80a\x17qa\x17ka\x17f_a\x11JV[a\x04\xC6V[\x91a\x04\xC6V[\x14a\x17\xCBWa\x17\x89a\x17\x82\x82a\x11\xB0V[`\x01a\x11\xEBV[a\x17\xB3\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\n\xB3V[\x90a\x17\xBCa\x01BV[\x80a\x17\xC6\x81a\x01\xD5V[\x03\x90\xA2V[a\x17\xD3a\x01BV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x17\xEA`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[a\x17\xF7\x90a\x17CV[V[a\x18\n\x90a\x18\x05a\x19pV[a\x18\x0CV[V[\x80a\x18'a\x18!a\x18\x1C_a\x11JV[a\x04\xC6V[\x91a\x04\xC6V[\x14a\x187Wa\x185\x90a\x19\xE8V[V[a\x18aa\x18C_a\x11JV[a\x18Ka\x01BV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[a\x18n\x90a\x17\xF9V[V[a\x18\x83\x91a\x18}\x91a\x0F\x97V[\x15a\x04*V[a\x18\x89WV[a\x18\x91a\x01BV[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\x18\xA8`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x18\xD4a\x18\xCFa\x18\xD9\x92a\t\xFEV[a\x18\xBAV[a\x18\xB1V[\x90V[\x90V[a\x18\xEBa\x18\xF0\x91a\x18\xB1V[a\x18\xDCV[\x90RV[\x90P\x90V[\x90\x91\x82a\x19\t\x81a\x19\x10\x93a\x18\xF4V[\x80\x93a\rLV[\x01\x90V[\x80a\x19%`\x01\x92a\x19,\x96\x94a\x18\xDFV[\x01\x91a\x18\xF9V[\x90V[a\x19m\x90a\x19;a\x18\xACV[Pa\x19^a\x19H_a\x18\xC0V[\x91\x93a\x19Ra\x01BV[\x94\x85\x93` \x85\x01a\x19\x14V[` \x82\x01\x81\x03\x82R\x03\x82a\x0F\x17V[\x90V[a\x19xa\x16|V[a\x19\x91a\x19\x8Ba\x19\x86a\x1AGV[a\x04\xC6V[\x91a\x04\xC6V[\x03a\x19\x98WV[a\x19\xC1a\x19\xA3a\x1AGV[a\x19\xABa\x01BV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90V[\x90a\x19\xDDa\x19\xD8a\x19\xE4\x92a\n\xB3V[a\x19\xC5V[\x82Ta\x11\xC1V[\x90UV[a\x19\xF1_a\x16oV[a\x19\xFB\x82_a\x19\xC8V[\x90a\x1A/a\x1A)\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\n\xB3V[\x91a\n\xB3V[\x91a\x1A8a\x01BV[\x80a\x1AB\x81a\x01\xD5V[\x03\x90\xA3V[a\x1AOa\x16LV[P3\x90V\xFE\xA2dipfsX\"\x12 \x81\xC3&\xE7\xC8%0\x9CHE?\x9Bk`\xDF\xAE\x1B9u/\xAB\x0F\xEF\xEBYs^#\x01\xF1\xC7:dsolcC\0\x08\x19\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\x1Fa\0+\x829a\x01\x1F\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15`\x11W[`\xD5V[`\x19_5`&V[c\xBA\xBC\xC59\x03`\rW`\xAAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[`L\x90`:V[\x90V[`V\x81`EV[\x03`\\WV[_\x80\xFD[\x90P5\x90`k\x82`OV[V[\x90` \x82\x82\x03\x12`\x83W`\x80\x91_\x01``V[\x90V[`6V[\x15\x15\x90V[`\x93\x90`\x87V[\x90RV[\x91\x90`\xA8\x90_` \x85\x01\x94\x01\x90`\x8CV[V[4`\xD1W`\xCD`\xBF`\xBB6`\x04`mV[`\xDDV[`\xC5`,V[\x91\x82\x91\x82`\x97V[\x03\x90\xF3[`2V[_\x80\xFD[_\x90V[P`\xE4`\xD9V[P_\x90V\xFE\xA2dipfsX\"\x12 \x8DFW#\xF6\x19\xF30\x8F?\xE4\xD0\xF8\x0FT\xB5\n\xE0)\x95\xF1w\xA2\xA0\x1A+\xE1\x10r\xDC\xB7QdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6109a9565b61001d5f3561013c565b80630b83249d146101375780631c0b636714610132578063333d87fe1461012d5780633514d37b146101285780633d44ae8b146101235780633dfb5ee71461011e57806346e2cc0914610119578063485cc955146101145780634fac3d441461010f578063715018a61461010a57806377bfdd191461010557806383d3c115146101005780638da5cb5b146100fb578063a830b643146100f6578063aaa60707146100f1578063babcc539146100ec578063d4f0eb4d146100e75763f2fde38b0361000e57610976565b610943565b61090e565b6108bb565b610818565b610749565b6106f1565b610682565b61062b565b6105f4565b610522565b610487565b610451565b6103f5565b610356565b6102ec565b6102b8565b6101da565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561019a5781359167ffffffffffffffff831161019557602001926020830284011161019057565b61015c565b610158565b610154565b906020828203126101d0575f82013567ffffffffffffffff81116101cb576101c79201610160565b9091565b610150565b61014c565b5f0190565b34610209576101f36101ed36600461019f565b90610bdf565b6101fb610142565b80610205816101d5565b0390f35b610148565b909182601f830112156102485781359167ffffffffffffffff831161024357602001926001830284011161023e57565b61015c565b610158565b610154565b90565b6102598161024d565b0361026057565b5f80fd5b9050359061027182610250565b565b916040838303126102b3575f83013567ffffffffffffffff81116102ae576102a0836102ab92860161020e565b939094602001610264565b90565b610150565b61014c565b346102e7576102d16102cb366004610273565b91610cd9565b6102d9610142565b806102e3816101d5565b0390f35b610148565b3461031b576103056102ff366004610273565b91610dfb565b61030d610142565b80610317816101d5565b0390f35b610148565b90602082820312610351575f82013567ffffffffffffffff811161034c57610348920161020e565b9091565b610150565b61014c565b346103855761036f610369366004610320565b90610ecd565b610377610142565b80610381816101d5565b0390f35b610148565b5f91031261039457565b61014c565b90565b90565b6103b36103ae6103b892610399565b61039c565b61024d565b90565b6103c5600a61039f565b90565b6103d06103bb565b90565b6103dc9061024d565b9052565b91906103f3905f602085019401906103d3565b565b346104255761040536600461038a565b6104216104106103c8565b610418610142565b918291826103e0565b0390f35b610148565b151590565b6104389061042a565b9052565b919061044f905f6020850194019061042f565b565b346104825761047e61046d610467366004610320565b90610f97565b610475610142565b9182918261043c565b0390f35b610148565b346104b6576104a061049a366004610320565b906110e1565b6104a8610142565b806104b2816101d5565b0390f35b610148565b60018060a01b031690565b6104cf906104bb565b90565b6104db816104c6565b036104e257565b5f80fd5b905035906104f3826104d2565b565b919060408382031261051d578061051161051a925f86016104e6565b936020016104e6565b90565b61014c565b346105515761053b6105353660046104f5565b90611301565b610543610142565b8061054d816101d5565b0390f35b610148565b909182601f830112156105905781359167ffffffffffffffff831161058b57602001926020830284011161058657565b61015c565b610158565b610154565b90916040828403126105ef575f82013567ffffffffffffffff81116105ea57836105c0918401610160565b929093602082013567ffffffffffffffff81116105e5576105e19201610556565b9091565b610150565b610150565b61014c565b3461062657610610610607366004610595565b92919091611527565b610618610142565b80610622816101d5565b0390f35b610148565b346106595761063b36600461038a565b61064361155a565b61064b610142565b80610655816101d5565b0390f35b610148565b7f000000000000000000000000000000000000000000000000000000000000000090565b346106b25761069236600461038a565b6106ae61069d61065e565b6106a5610142565b918291826103e0565b0390f35b610148565b90916060828403126106ec576106e96106d2845f8501610264565b936106e08160208601610264565b93604001610264565b90565b61014c565b346107225761071e61070d6107073660046106b7565b916115d6565b610715610142565b918291826103e0565b0390f35b610148565b610730906104c6565b9052565b9190610747905f60208501940190610727565b565b346107795761075936600461038a565b61077561076461167c565b61076c610142565b91829182610734565b0390f35b610148565b1c90565b60018060a01b031690565b61079d9060086107a2930261077e565b610782565b90565b906107b0915461078d565b90565b6107bf60015f906107a5565b90565b6107d66107d16107db926104bb565b61039c565b6104bb565b90565b6107e7906107c2565b90565b6107f3906107de565b90565b6107ff906107ea565b9052565b9190610816905f602085019401906107f6565b565b346108485761082836600461038a565b6108446108336107b3565b61083b610142565b91829182610803565b0390f35b610148565b60018060a01b031690565b61086890600861086d930261077e565b61084d565b90565b9061087b9154610858565b90565b61088a60025f90610870565b90565b610896906107de565b90565b6108a29061088d565b9052565b91906108b9905f60208501940190610899565b565b346108eb576108cb36600461038a565b6108e76108d661087e565b6108de610142565b918291826108a6565b0390f35b610148565b9060208282031261090957610906915f016104e6565b90565b61014c565b3461093e5761093a6109296109243660046108f0565b6116b2565b610931610142565b9182918261043c565b0390f35b610148565b346109715761095b6109563660046108f0565b6117ee565b610963610142565b8061096d816101d5565b0390f35b610148565b346109a45761098e6109893660046108f0565b611865565b610996610142565b806109a0816101d5565b0390f35b610148565b5f80fd5b919033926109c36109bd856116b2565b1561042a565b6109d4576109d2929350610b2a565b565b6109f6846109e0610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b5090565b90565b610a15610a10610a1a926109fe565b61039c565b61024d565b90565b6001610a29910161024d565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610a8e570180359067ffffffffffffffff8211610a8957602001916001820236038313610a8457565b610a48565b610a44565b610a40565b90821015610aae576020610aaa9202810190610a4c565b9091565b610a2c565b610abc906107de565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610b00610b09602093610b0e93610af781610abf565b93848093610ac3565b95869101610acc565b610ad7565b0190565b610b279160208201915f818403910152610ae1565b90565b919091610b388184906109fa565b91610b425f610a01565b5b80610b56610b508661024d565b9161024d565b1015610bd857610bd390610b75610b6f85888491610a93565b90611870565b33610b8b610b8586898591610a93565b9061192f565b90610bcb610bb97f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ab3565b92610bc2610142565b91829182610b12565b0390a2610a1d565b610b43565b5092505050565b90610be9916109ad565b565b9291903393610c02610bfc866116b2565b1561042a565b610c1357610c11939450610c39565b565b610c3585610c1f610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b90610c4f9291610c4a818390611870565b610c86565b565b604090610c7d610c72610c849597969460608401908482035f860152610ae1565b9660208301906103d3565b01906103d3565b565b90610c9290339261192f565b914292610cd4610cc27f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610ab3565b94610ccb610142565b93849384610c51565b0390a2565b90610ce49291610beb565b565b9291903393610cfd610cf7866116b2565b1561042a565b610d0e57610d0c939450610d34565b565b610d3085610d1a610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b90610d4a9291610d45818390611870565b610daf565b565b90825f939282370152565b9190610d7181610d6a81610d7695610ac3565b8095610d4c565b610ad7565b0190565b610da6610d9b604093610dad9698979560608501918583035f870152610d57565b9660208301906103d3565b01906103d3565b565b90913391929092610df642610de47f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610ab3565b95610ded610142565b94859485610d7a565b0390a2565b90610e069291610ce6565b565b91903392610e1e610e18856116b2565b1561042a565b610e2f57610e2d929350610e55565b565b610e5184610e3b610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b90610e6a91610e65818390611870565b610e86565b565b9091610e839260208301925f818503910152610d57565b90565b339091610eb37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ab3565b92610ec8610ebf610142565b92839283610e6c565b0390a2565b90610ed791610e08565b565b5f90565b5f1c90565b610eee610ef391610edd565b61084d565b90565b610f009054610ee2565b90565b634e487b7160e01b5f52604160045260245ffd5b90610f2190610ad7565b810190811067ffffffffffffffff821117610f3b57604052565b610f03565b60e01b90565b610f4f8161042a565b03610f5657565b5f80fd5b90505190610f6782610f46565b565b90602082820312610f8257610f7f915f01610f5a565b90565b61014c565b610f8f610142565b3d5f823e3d90fd5b90602090610fa3610ed9565b50610fb6610fb16002610ef6565b61088d565b610fd8633dfb5ee7949294610fe3610fcc610142565b96879586948594610f40565b845260048401610e6c565b03915afa908115611027575f91610ff9575b5090565b61101a915060203d8111611020575b6110128183610f17565b810190610f69565b5f610ff5565b503d611008565b610f87565b9190339261104261103c856116b2565b1561042a565b61105357611051929350611079565b565b6110758461105f610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b9061108e91611089818390611870565b611090565b565b9061109c90339261192f565b906110dc6110ca7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ab3565b926110d3610142565b91829182610b12565b0390a2565b906110eb9161102c565b565b906110ff916110fa611970565b611252565b565b60a01c90565b60ff1690565b61111961111e91611101565b611107565b90565b61112b905461110d565b90565b61114261113d611147926109fe565b61039c565b6104bb565b90565b6111539061112e565b90565b60a01b90565b9061116b60ff60a01b91611156565b9181191691161790565b61117e9061042a565b90565b90565b906111996111946111a092611175565b611181565b825461115c565b9055565b6111ad906107c2565b90565b6111b9906111a4565b90565b5f1b90565b906111d260018060a01b03916111bc565b9181191691161790565b6111e5906111a4565b90565b90565b906112006111fb611207926111dc565b6111e8565b82546111c1565b9055565b611214906107c2565b90565b6112209061120b565b90565b61122c9061120b565b90565b90565b9061124761124261124e92611223565b61122f565b82546111c1565b9055565b61125c6002611121565b6112df578161127b6112756112705f61114a565b6104c6565b916104c6565b146112bc576112b56112ae6112ba9361129660016002611184565b6112a96112a2826111b0565b60016111eb565b611217565b6002611232565b611865565b565b6112c4610142565b632e7f3c7f60e11b8152806112db600482016101d5565b0390fd5b6112e7610142565b62dc149f60e41b8152806112fd600482016101d5565b0390fd5b9061130b916110ed565b565b93929190339461132561131f876116b2565b1561042a565b61133657611334949550611433565b565b61135886611342610142565b91829163fa5cd00f60e01b835260048301610734565b0390fd5b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b6113c36032604092611360565b6113cc81611369565b0190565b6113e59060208101905f8183039101526113b6565b90565b156113ef57565b6113f7610142565b62461bcd60e51b81528061140d600482016113d0565b0390fd5b9190811015611421576020020190565b610a2c565b3561143081610250565b90565b909392936114428282906109fa565b936114698561146361145d611458888b9061135c565b61024d565b9161024d565b146113e8565b6114725f610a01565b5b806114866114808861024d565b9161024d565b101561151e57611519906114a561149f86868491610a93565b90611870565b336114bb6114b587878591610a93565b9061192f565b906114d06114cb898c8691611411565b611426565b42926115116114ff7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610ab3565b94611508610142565b93849384610c51565b0390a2610a1d565b611473565b50945050505050565b9061153393929161130d565b565b61153d611970565b611545611547565b565b6115586115535f61114a565b6119e8565b565b611562611535565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61158b6115919193929361024d565b9261024d565b820391821161159c57565b611568565b6115b06115b69193929361024d565b9261024d565b916115c283820261024d565b9281840414901517156115d157565b611568565b916115df611564565b50806115f36115ed8461024d565b9161024d565b111561164757611614916116069161157c565b61160e6103bb565b906115a1565b806116276116218461024d565b9161024d565b1015611639576116369161157c565b90565b50506116445f610a01565b90565b505090565b5f90565b60018060a01b031690565b61166761166c91610edd565b611650565b90565b611679905461165b565b90565b61168461164c565b5061168e5f61166f565b90565b61169d6116a291610edd565b610782565b90565b6116af9054611691565b90565b60206116fa916116c0610ed9565b506116d36116ce60016116a5565b6107ea565b6116ef63babcc5396116e3610142565b95869485938493610f40565b835260048301610734565b03915afa90811561173e575f91611710575b5090565b611731915060203d8111611737575b6117298183610f17565b810190610f69565b5f61170c565b503d61171f565b610f87565b6117549061174f611970565b611756565b565b8061177161176b6117665f61114a565b6104c6565b916104c6565b146117cb57611789611782826111b0565b60016111eb565b6117b37f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610ab3565b906117bc610142565b806117c6816101d5565b0390a2565b6117d3610142565b632e7f3c7f60e11b8152806117ea600482016101d5565b0390fd5b6117f790611743565b565b61180a90611805611970565b61180c565b565b8061182761182161181c5f61114a565b6104c6565b916104c6565b1461183757611835906119e8565b565b6118616118435f61114a565b61184b610142565b918291631e4fbdf760e01b835260048301610734565b0390fd5b61186e906117f9565b565b6118839161187d91610f97565b1561042a565b61188957565b611891610142565b6360c054b160e11b8152806118a8600482016101d5565b0390fd5b606090565b60ff60f81b1690565b60f81b90565b6118d46118cf6118d9926109fe565b6118ba565b6118b1565b90565b90565b6118eb6118f0916118b1565b6118dc565b9052565b905090565b90918261190981611910936118f4565b8093610d4c565b0190565b8061192560019261192c96946118df565b01916118f9565b90565b61196d9061193b6118ac565b5061195e6119485f6118c0565b9193611952610142565b94859360208501611914565b60208201810382520382610f17565b90565b61197861167c565b61199161198b611986611a47565b6104c6565b916104c6565b0361199857565b6119c16119a3611a47565b6119ab610142565b91829163118cdaa760e01b835260048301610734565b0390fd5b90565b906119dd6119d86119e492610ab3565b6119c5565b82546111c1565b9055565b6119f15f61166f565b6119fb825f6119c8565b90611a2f611a297f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ab3565b91610ab3565b91611a38610142565b80611a42816101d5565b0390a3565b611a4f61164c565b50339056fea264697066735822122081c326e7c825309c48453f9b6b60dfae1b39752fab0fefeb59735e2301f1c73a64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\t\xA9V[a\0\x1D_5a\x01<V[\x80c\x0B\x83$\x9D\x14a\x017W\x80c\x1C\x0Bcg\x14a\x012W\x80c3=\x87\xFE\x14a\x01-W\x80c5\x14\xD3{\x14a\x01(W\x80c=D\xAE\x8B\x14a\x01#W\x80c=\xFB^\xE7\x14a\x01\x1EW\x80cF\xE2\xCC\t\x14a\x01\x19W\x80cH\\\xC9U\x14a\x01\x14W\x80cO\xAC=D\x14a\x01\x0FW\x80cqP\x18\xA6\x14a\x01\nW\x80cw\xBF\xDD\x19\x14a\x01\x05W\x80c\x83\xD3\xC1\x15\x14a\x01\0W\x80c\x8D\xA5\xCB[\x14a\0\xFBW\x80c\xA80\xB6C\x14a\0\xF6W\x80c\xAA\xA6\x07\x07\x14a\0\xF1W\x80c\xBA\xBC\xC59\x14a\0\xECW\x80c\xD4\xF0\xEBM\x14a\0\xE7Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\tvV[a\tCV[a\t\x0EV[a\x08\xBBV[a\x08\x18V[a\x07IV[a\x06\xF1V[a\x06\x82V[a\x06+V[a\x05\xF4V[a\x05\"V[a\x04\x87V[a\x04QV[a\x03\xF5V[a\x03VV[a\x02\xECV[a\x02\xB8V[a\x01\xDAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x9AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x95W` \x01\x92` \x83\x02\x84\x01\x11a\x01\x90WV[a\x01\\V[a\x01XV[a\x01TV[\x90` \x82\x82\x03\x12a\x01\xD0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xCBWa\x01\xC7\x92\x01a\x01`V[\x90\x91V[a\x01PV[a\x01LV[_\x01\x90V[4a\x02\tWa\x01\xF3a\x01\xED6`\x04a\x01\x9FV[\x90a\x0B\xDFV[a\x01\xFBa\x01BV[\x80a\x02\x05\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02HW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02CW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02>WV[a\x01\\V[a\x01XV[a\x01TV[\x90V[a\x02Y\x81a\x02MV[\x03a\x02`WV[_\x80\xFD[\x90P5\x90a\x02q\x82a\x02PV[V[\x91`@\x83\x83\x03\x12a\x02\xB3W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xAEWa\x02\xA0\x83a\x02\xAB\x92\x86\x01a\x02\x0EV[\x93\x90\x94` \x01a\x02dV[\x90V[a\x01PV[a\x01LV[4a\x02\xE7Wa\x02\xD1a\x02\xCB6`\x04a\x02sV[\x91a\x0C\xD9V[a\x02\xD9a\x01BV[\x80a\x02\xE3\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[4a\x03\x1BWa\x03\x05a\x02\xFF6`\x04a\x02sV[\x91a\r\xFBV[a\x03\ra\x01BV[\x80a\x03\x17\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x90` \x82\x82\x03\x12a\x03QW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03LWa\x03H\x92\x01a\x02\x0EV[\x90\x91V[a\x01PV[a\x01LV[4a\x03\x85Wa\x03oa\x03i6`\x04a\x03 V[\x90a\x0E\xCDV[a\x03wa\x01BV[\x80a\x03\x81\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[_\x91\x03\x12a\x03\x94WV[a\x01LV[\x90V[\x90V[a\x03\xB3a\x03\xAEa\x03\xB8\x92a\x03\x99V[a\x03\x9CV[a\x02MV[\x90V[a\x03\xC5`\na\x03\x9FV[\x90V[a\x03\xD0a\x03\xBBV[\x90V[a\x03\xDC\x90a\x02MV[\x90RV[\x91\x90a\x03\xF3\x90_` \x85\x01\x94\x01\x90a\x03\xD3V[V[4a\x04%Wa\x04\x056`\x04a\x03\x8AV[a\x04!a\x04\x10a\x03\xC8V[a\x04\x18a\x01BV[\x91\x82\x91\x82a\x03\xE0V[\x03\x90\xF3[a\x01HV[\x15\x15\x90V[a\x048\x90a\x04*V[\x90RV[\x91\x90a\x04O\x90_` \x85\x01\x94\x01\x90a\x04/V[V[4a\x04\x82Wa\x04~a\x04ma\x04g6`\x04a\x03 V[\x90a\x0F\x97V[a\x04ua\x01BV[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\x01HV[4a\x04\xB6Wa\x04\xA0a\x04\x9A6`\x04a\x03 V[\x90a\x10\xE1V[a\x04\xA8a\x01BV[\x80a\x04\xB2\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xCF\x90a\x04\xBBV[\x90V[a\x04\xDB\x81a\x04\xC6V[\x03a\x04\xE2WV[_\x80\xFD[\x90P5\x90a\x04\xF3\x82a\x04\xD2V[V[\x91\x90`@\x83\x82\x03\x12a\x05\x1DW\x80a\x05\x11a\x05\x1A\x92_\x86\x01a\x04\xE6V[\x93` \x01a\x04\xE6V[\x90V[a\x01LV[4a\x05QWa\x05;a\x0556`\x04a\x04\xF5V[\x90a\x13\x01V[a\x05Ca\x01BV[\x80a\x05M\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x90W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x8BW` \x01\x92` \x83\x02\x84\x01\x11a\x05\x86WV[a\x01\\V[a\x01XV[a\x01TV[\x90\x91`@\x82\x84\x03\x12a\x05\xEFW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xEAW\x83a\x05\xC0\x91\x84\x01a\x01`V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xE5Wa\x05\xE1\x92\x01a\x05VV[\x90\x91V[a\x01PV[a\x01PV[a\x01LV[4a\x06&Wa\x06\x10a\x06\x076`\x04a\x05\x95V[\x92\x91\x90\x91a\x15'V[a\x06\x18a\x01BV[\x80a\x06\"\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[4a\x06YWa\x06;6`\x04a\x03\x8AV[a\x06Ca\x15ZV[a\x06Ka\x01BV[\x80a\x06U\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x06\xB2Wa\x06\x926`\x04a\x03\x8AV[a\x06\xAEa\x06\x9Da\x06^V[a\x06\xA5a\x01BV[\x91\x82\x91\x82a\x03\xE0V[\x03\x90\xF3[a\x01HV[\x90\x91``\x82\x84\x03\x12a\x06\xECWa\x06\xE9a\x06\xD2\x84_\x85\x01a\x02dV[\x93a\x06\xE0\x81` \x86\x01a\x02dV[\x93`@\x01a\x02dV[\x90V[a\x01LV[4a\x07\"Wa\x07\x1Ea\x07\ra\x07\x076`\x04a\x06\xB7V[\x91a\x15\xD6V[a\x07\x15a\x01BV[\x91\x82\x91\x82a\x03\xE0V[\x03\x90\xF3[a\x01HV[a\x070\x90a\x04\xC6V[\x90RV[\x91\x90a\x07G\x90_` \x85\x01\x94\x01\x90a\x07'V[V[4a\x07yWa\x07Y6`\x04a\x03\x8AV[a\x07ua\x07da\x16|V[a\x07la\x01BV[\x91\x82\x91\x82a\x074V[\x03\x90\xF3[a\x01HV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07\x9D\x90`\x08a\x07\xA2\x93\x02a\x07~V[a\x07\x82V[\x90V[\x90a\x07\xB0\x91Ta\x07\x8DV[\x90V[a\x07\xBF`\x01_\x90a\x07\xA5V[\x90V[a\x07\xD6a\x07\xD1a\x07\xDB\x92a\x04\xBBV[a\x03\x9CV[a\x04\xBBV[\x90V[a\x07\xE7\x90a\x07\xC2V[\x90V[a\x07\xF3\x90a\x07\xDEV[\x90V[a\x07\xFF\x90a\x07\xEAV[\x90RV[\x91\x90a\x08\x16\x90_` \x85\x01\x94\x01\x90a\x07\xF6V[V[4a\x08HWa\x08(6`\x04a\x03\x8AV[a\x08Da\x083a\x07\xB3V[a\x08;a\x01BV[\x91\x82\x91\x82a\x08\x03V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x08h\x90`\x08a\x08m\x93\x02a\x07~V[a\x08MV[\x90V[\x90a\x08{\x91Ta\x08XV[\x90V[a\x08\x8A`\x02_\x90a\x08pV[\x90V[a\x08\x96\x90a\x07\xDEV[\x90V[a\x08\xA2\x90a\x08\x8DV[\x90RV[\x91\x90a\x08\xB9\x90_` \x85\x01\x94\x01\x90a\x08\x99V[V[4a\x08\xEBWa\x08\xCB6`\x04a\x03\x8AV[a\x08\xE7a\x08\xD6a\x08~V[a\x08\xDEa\x01BV[\x91\x82\x91\x82a\x08\xA6V[\x03\x90\xF3[a\x01HV[\x90` \x82\x82\x03\x12a\t\tWa\t\x06\x91_\x01a\x04\xE6V[\x90V[a\x01LV[4a\t>Wa\t:a\t)a\t$6`\x04a\x08\xF0V[a\x16\xB2V[a\t1a\x01BV[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\x01HV[4a\tqWa\t[a\tV6`\x04a\x08\xF0V[a\x17\xEEV[a\tca\x01BV[\x80a\tm\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[4a\t\xA4Wa\t\x8Ea\t\x896`\x04a\x08\xF0V[a\x18eV[a\t\x96a\x01BV[\x80a\t\xA0\x81a\x01\xD5V[\x03\x90\xF3[a\x01HV[_\x80\xFD[\x91\x903\x92a\t\xC3a\t\xBD\x85a\x16\xB2V[\x15a\x04*V[a\t\xD4Wa\t\xD2\x92\x93Pa\x0B*V[V[a\t\xF6\x84a\t\xE0a\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[P\x90V[\x90V[a\n\x15a\n\x10a\n\x1A\x92a\t\xFEV[a\x03\x9CV[a\x02MV[\x90V[`\x01a\n)\x91\x01a\x02MV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\n\x8EW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\x89W` \x01\x91`\x01\x82\x026\x03\x83\x13a\n\x84WV[a\nHV[a\nDV[a\n@V[\x90\x82\x10\x15a\n\xAEW` a\n\xAA\x92\x02\x81\x01\x90a\nLV[\x90\x91V[a\n,V[a\n\xBC\x90a\x07\xDEV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x0B\0a\x0B\t` \x93a\x0B\x0E\x93a\n\xF7\x81a\n\xBFV[\x93\x84\x80\x93a\n\xC3V[\x95\x86\x91\x01a\n\xCCV[a\n\xD7V[\x01\x90V[a\x0B'\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\n\xE1V[\x90V[\x91\x90\x91a\x0B8\x81\x84\x90a\t\xFAV[\x91a\x0BB_a\n\x01V[[\x80a\x0BVa\x0BP\x86a\x02MV[\x91a\x02MV[\x10\x15a\x0B\xD8Wa\x0B\xD3\x90a\x0Bua\x0Bo\x85\x88\x84\x91a\n\x93V[\x90a\x18pV[3a\x0B\x8Ba\x0B\x85\x86\x89\x85\x91a\n\x93V[\x90a\x19/V[\x90a\x0B\xCBa\x0B\xB9\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\xB3V[\x92a\x0B\xC2a\x01BV[\x91\x82\x91\x82a\x0B\x12V[\x03\x90\xA2a\n\x1DV[a\x0BCV[P\x92PPPV[\x90a\x0B\xE9\x91a\t\xADV[V[\x92\x91\x903\x93a\x0C\x02a\x0B\xFC\x86a\x16\xB2V[\x15a\x04*V[a\x0C\x13Wa\x0C\x11\x93\x94Pa\x0C9V[V[a\x0C5\x85a\x0C\x1Fa\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\x0CO\x92\x91a\x0CJ\x81\x83\x90a\x18pV[a\x0C\x86V[V[`@\x90a\x0C}a\x0Cra\x0C\x84\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\n\xE1V[\x96` \x83\x01\x90a\x03\xD3V[\x01\x90a\x03\xD3V[V[\x90a\x0C\x92\x903\x92a\x19/V[\x91B\x92a\x0C\xD4a\x0C\xC2\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\xB3V[\x94a\x0C\xCBa\x01BV[\x93\x84\x93\x84a\x0CQV[\x03\x90\xA2V[\x90a\x0C\xE4\x92\x91a\x0B\xEBV[V[\x92\x91\x903\x93a\x0C\xFDa\x0C\xF7\x86a\x16\xB2V[\x15a\x04*V[a\r\x0EWa\r\x0C\x93\x94Pa\r4V[V[a\r0\x85a\r\x1Aa\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\rJ\x92\x91a\rE\x81\x83\x90a\x18pV[a\r\xAFV[V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\rq\x81a\rj\x81a\rv\x95a\n\xC3V[\x80\x95a\rLV[a\n\xD7V[\x01\x90V[a\r\xA6a\r\x9B`@\x93a\r\xAD\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\rWV[\x96` \x83\x01\x90a\x03\xD3V[\x01\x90a\x03\xD3V[V[\x90\x913\x91\x92\x90\x92a\r\xF6Ba\r\xE4\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\n\xB3V[\x95a\r\xEDa\x01BV[\x94\x85\x94\x85a\rzV[\x03\x90\xA2V[\x90a\x0E\x06\x92\x91a\x0C\xE6V[V[\x91\x903\x92a\x0E\x1Ea\x0E\x18\x85a\x16\xB2V[\x15a\x04*V[a\x0E/Wa\x0E-\x92\x93Pa\x0EUV[V[a\x0EQ\x84a\x0E;a\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\x0Ej\x91a\x0Ee\x81\x83\x90a\x18pV[a\x0E\x86V[V[\x90\x91a\x0E\x83\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\rWV[\x90V[3\x90\x91a\x0E\xB3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\xB3V[\x92a\x0E\xC8a\x0E\xBFa\x01BV[\x92\x83\x92\x83a\x0ElV[\x03\x90\xA2V[\x90a\x0E\xD7\x91a\x0E\x08V[V[_\x90V[_\x1C\x90V[a\x0E\xEEa\x0E\xF3\x91a\x0E\xDDV[a\x08MV[\x90V[a\x0F\0\x90Ta\x0E\xE2V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0F!\x90a\n\xD7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0F;W`@RV[a\x0F\x03V[`\xE0\x1B\x90V[a\x0FO\x81a\x04*V[\x03a\x0FVWV[_\x80\xFD[\x90PQ\x90a\x0Fg\x82a\x0FFV[V[\x90` \x82\x82\x03\x12a\x0F\x82Wa\x0F\x7F\x91_\x01a\x0FZV[\x90V[a\x01LV[a\x0F\x8Fa\x01BV[=_\x82>=\x90\xFD[\x90` \x90a\x0F\xA3a\x0E\xD9V[Pa\x0F\xB6a\x0F\xB1`\x02a\x0E\xF6V[a\x08\x8DV[a\x0F\xD8c=\xFB^\xE7\x94\x92\x94a\x0F\xE3a\x0F\xCCa\x01BV[\x96\x87\x95\x86\x94\x85\x94a\x0F@V[\x84R`\x04\x84\x01a\x0ElV[\x03\x91Z\xFA\x90\x81\x15a\x10'W_\x91a\x0F\xF9W[P\x90V[a\x10\x1A\x91P` =\x81\x11a\x10 W[a\x10\x12\x81\x83a\x0F\x17V[\x81\x01\x90a\x0FiV[_a\x0F\xF5V[P=a\x10\x08V[a\x0F\x87V[\x91\x903\x92a\x10Ba\x10<\x85a\x16\xB2V[\x15a\x04*V[a\x10SWa\x10Q\x92\x93Pa\x10yV[V[a\x10u\x84a\x10_a\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90a\x10\x8E\x91a\x10\x89\x81\x83\x90a\x18pV[a\x10\x90V[V[\x90a\x10\x9C\x903\x92a\x19/V[\x90a\x10\xDCa\x10\xCA\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\xB3V[\x92a\x10\xD3a\x01BV[\x91\x82\x91\x82a\x0B\x12V[\x03\x90\xA2V[\x90a\x10\xEB\x91a\x10,V[V[\x90a\x10\xFF\x91a\x10\xFAa\x19pV[a\x12RV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x11\x19a\x11\x1E\x91a\x11\x01V[a\x11\x07V[\x90V[a\x11+\x90Ta\x11\rV[\x90V[a\x11Ba\x11=a\x11G\x92a\t\xFEV[a\x03\x9CV[a\x04\xBBV[\x90V[a\x11S\x90a\x11.V[\x90V[`\xA0\x1B\x90V[\x90a\x11k`\xFF`\xA0\x1B\x91a\x11VV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11~\x90a\x04*V[\x90V[\x90V[\x90a\x11\x99a\x11\x94a\x11\xA0\x92a\x11uV[a\x11\x81V[\x82Ta\x11\\V[\x90UV[a\x11\xAD\x90a\x07\xC2V[\x90V[a\x11\xB9\x90a\x11\xA4V[\x90V[_\x1B\x90V[\x90a\x11\xD2`\x01\x80`\xA0\x1B\x03\x91a\x11\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xE5\x90a\x11\xA4V[\x90V[\x90V[\x90a\x12\0a\x11\xFBa\x12\x07\x92a\x11\xDCV[a\x11\xE8V[\x82Ta\x11\xC1V[\x90UV[a\x12\x14\x90a\x07\xC2V[\x90V[a\x12 \x90a\x12\x0BV[\x90V[a\x12,\x90a\x12\x0BV[\x90V[\x90V[\x90a\x12Ga\x12Ba\x12N\x92a\x12#V[a\x12/V[\x82Ta\x11\xC1V[\x90UV[a\x12\\`\x02a\x11!V[a\x12\xDFW\x81a\x12{a\x12ua\x12p_a\x11JV[a\x04\xC6V[\x91a\x04\xC6V[\x14a\x12\xBCWa\x12\xB5a\x12\xAEa\x12\xBA\x93a\x12\x96`\x01`\x02a\x11\x84V[a\x12\xA9a\x12\xA2\x82a\x11\xB0V[`\x01a\x11\xEBV[a\x12\x17V[`\x02a\x122V[a\x18eV[V[a\x12\xC4a\x01BV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x12\xDB`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[a\x12\xE7a\x01BV[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x12\xFD`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[\x90a\x13\x0B\x91a\x10\xEDV[V[\x93\x92\x91\x903\x94a\x13%a\x13\x1F\x87a\x16\xB2V[\x15a\x04*V[a\x136Wa\x134\x94\x95Pa\x143V[V[a\x13X\x86a\x13Ba\x01BV[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x13\xC3`2`@\x92a\x13`V[a\x13\xCC\x81a\x13iV[\x01\x90V[a\x13\xE5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xB6V[\x90V[\x15a\x13\xEFWV[a\x13\xF7a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\r`\x04\x82\x01a\x13\xD0V[\x03\x90\xFD[\x91\x90\x81\x10\x15a\x14!W` \x02\x01\x90V[a\n,V[5a\x140\x81a\x02PV[\x90V[\x90\x93\x92\x93a\x14B\x82\x82\x90a\t\xFAV[\x93a\x14i\x85a\x14ca\x14]a\x14X\x88\x8B\x90a\x13\\V[a\x02MV[\x91a\x02MV[\x14a\x13\xE8V[a\x14r_a\n\x01V[[\x80a\x14\x86a\x14\x80\x88a\x02MV[\x91a\x02MV[\x10\x15a\x15\x1EWa\x15\x19\x90a\x14\xA5a\x14\x9F\x86\x86\x84\x91a\n\x93V[\x90a\x18pV[3a\x14\xBBa\x14\xB5\x87\x87\x85\x91a\n\x93V[\x90a\x19/V[\x90a\x14\xD0a\x14\xCB\x89\x8C\x86\x91a\x14\x11V[a\x14&V[B\x92a\x15\x11a\x14\xFF\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\xB3V[\x94a\x15\x08a\x01BV[\x93\x84\x93\x84a\x0CQV[\x03\x90\xA2a\n\x1DV[a\x14sV[P\x94PPPPPV[\x90a\x153\x93\x92\x91a\x13\rV[V[a\x15=a\x19pV[a\x15Ea\x15GV[V[a\x15Xa\x15S_a\x11JV[a\x19\xE8V[V[a\x15ba\x155V[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\x8Ba\x15\x91\x91\x93\x92\x93a\x02MV[\x92a\x02MV[\x82\x03\x91\x82\x11a\x15\x9CWV[a\x15hV[a\x15\xB0a\x15\xB6\x91\x93\x92\x93a\x02MV[\x92a\x02MV[\x91a\x15\xC2\x83\x82\x02a\x02MV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\xD1WV[a\x15hV[\x91a\x15\xDFa\x15dV[P\x80a\x15\xF3a\x15\xED\x84a\x02MV[\x91a\x02MV[\x11\x15a\x16GWa\x16\x14\x91a\x16\x06\x91a\x15|V[a\x16\x0Ea\x03\xBBV[\x90a\x15\xA1V[\x80a\x16'a\x16!\x84a\x02MV[\x91a\x02MV[\x10\x15a\x169Wa\x166\x91a\x15|V[\x90V[PPa\x16D_a\n\x01V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16ga\x16l\x91a\x0E\xDDV[a\x16PV[\x90V[a\x16y\x90Ta\x16[V[\x90V[a\x16\x84a\x16LV[Pa\x16\x8E_a\x16oV[\x90V[a\x16\x9Da\x16\xA2\x91a\x0E\xDDV[a\x07\x82V[\x90V[a\x16\xAF\x90Ta\x16\x91V[\x90V[` a\x16\xFA\x91a\x16\xC0a\x0E\xD9V[Pa\x16\xD3a\x16\xCE`\x01a\x16\xA5V[a\x07\xEAV[a\x16\xEFc\xBA\xBC\xC59a\x16\xE3a\x01BV[\x95\x86\x94\x85\x93\x84\x93a\x0F@V[\x83R`\x04\x83\x01a\x074V[\x03\x91Z\xFA\x90\x81\x15a\x17>W_\x91a\x17\x10W[P\x90V[a\x171\x91P` =\x81\x11a\x177W[a\x17)\x81\x83a\x0F\x17V[\x81\x01\x90a\x0FiV[_a\x17\x0CV[P=a\x17\x1FV[a\x0F\x87V[a\x17T\x90a\x17Oa\x19pV[a\x17VV[V[\x80a\x17qa\x17ka\x17f_a\x11JV[a\x04\xC6V[\x91a\x04\xC6V[\x14a\x17\xCBWa\x17\x89a\x17\x82\x82a\x11\xB0V[`\x01a\x11\xEBV[a\x17\xB3\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\n\xB3V[\x90a\x17\xBCa\x01BV[\x80a\x17\xC6\x81a\x01\xD5V[\x03\x90\xA2V[a\x17\xD3a\x01BV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x17\xEA`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[a\x17\xF7\x90a\x17CV[V[a\x18\n\x90a\x18\x05a\x19pV[a\x18\x0CV[V[\x80a\x18'a\x18!a\x18\x1C_a\x11JV[a\x04\xC6V[\x91a\x04\xC6V[\x14a\x187Wa\x185\x90a\x19\xE8V[V[a\x18aa\x18C_a\x11JV[a\x18Ka\x01BV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[a\x18n\x90a\x17\xF9V[V[a\x18\x83\x91a\x18}\x91a\x0F\x97V[\x15a\x04*V[a\x18\x89WV[a\x18\x91a\x01BV[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\x18\xA8`\x04\x82\x01a\x01\xD5V[\x03\x90\xFD[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x18\xD4a\x18\xCFa\x18\xD9\x92a\t\xFEV[a\x18\xBAV[a\x18\xB1V[\x90V[\x90V[a\x18\xEBa\x18\xF0\x91a\x18\xB1V[a\x18\xDCV[\x90RV[\x90P\x90V[\x90\x91\x82a\x19\t\x81a\x19\x10\x93a\x18\xF4V[\x80\x93a\rLV[\x01\x90V[\x80a\x19%`\x01\x92a\x19,\x96\x94a\x18\xDFV[\x01\x91a\x18\xF9V[\x90V[a\x19m\x90a\x19;a\x18\xACV[Pa\x19^a\x19H_a\x18\xC0V[\x91\x93a\x19Ra\x01BV[\x94\x85\x93` \x85\x01a\x19\x14V[` \x82\x01\x81\x03\x82R\x03\x82a\x0F\x17V[\x90V[a\x19xa\x16|V[a\x19\x91a\x19\x8Ba\x19\x86a\x1AGV[a\x04\xC6V[\x91a\x04\xC6V[\x03a\x19\x98WV[a\x19\xC1a\x19\xA3a\x1AGV[a\x19\xABa\x01BV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x074V[\x03\x90\xFD[\x90V[\x90a\x19\xDDa\x19\xD8a\x19\xE4\x92a\n\xB3V[a\x19\xC5V[\x82Ta\x11\xC1V[\x90UV[a\x19\xF1_a\x16oV[a\x19\xFB\x82_a\x19\xC8V[\x90a\x1A/a\x1A)\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\n\xB3V[\x91a\n\xB3V[\x91a\x1A8a\x01BV[\x80a\x1AB\x81a\x01\xD5V[\x03\x90\xA3V[a\x1AOa\x16LV[P3\x90V\xFE\xA2dipfsX\"\x12 \x81\xC3&\xE7\xC8%0\x9CHE?\x9Bk`\xDF\xAE\x1B9u/\xAB\x0F\xEF\xEBYs^#\x01\xF1\xC7:dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CalldataNotAllowed()` and selector `0xc180a962`.
```solidity
error CalldataNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataNotAllowed()";
            const SELECTOR: [u8; 4] = [193u8, 128u8, 169u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _l3ChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._l3ChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _l3ChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._l3ChainId),
                )
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calldataRequirementModule()` and selector `0xaaa60707`.
```solidity
function calldataRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataRequirementModuleCall {}
    ///Container type for the return parameters of the [`calldataRequirementModule()`](calldataRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calldataRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calldataRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calldataRequirementModule()";
            const SELECTOR: [u8; 4] = [170u8, 166u8, 7u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l3ChainId()` and selector `0x77bfdd19`.
```solidity
function l3ChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdCall {}
    ///Container type for the return parameters of the [`l3ChainId()`](l3ChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l3ChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l3ChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l3ChainId()";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 221u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactions_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_0Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactions_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactions_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[],uint256[])` and selector `0x4fac3d44`.
```solidity
function processBulkTransactions(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[],uint256[])`](processBulkTransactions_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_1Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactions_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactions_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [79u8, 172u8, 61u8, 68u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes,uint256)` and selector `0x333d87fe`.
```solidity
function processTransactionRaw(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes,uint256)`](processTransactionRaw_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRaw_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRaw_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes,uint256)";
            const SELECTOR: [u8; 4] = [51u8, 61u8, 135u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRaw_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRaw_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRaw_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proposerRequirementModule()` and selector `0xa830b643`.
```solidity
function proposerRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposerRequirementModuleCall {}
    ///Container type for the return parameters of the [`proposerRequirementModule()`](proposerRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposerRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposerRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposerRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposerRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposerRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposerRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposerRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proposerRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proposerRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proposerRequirementModule()";
            const SELECTOR: [u8; 4] = [168u8, 48u8, 182u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MetabasedSequencerChainWithDecayingPriority`](self) function calls.
    pub enum MetabasedSequencerChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        calldataRequirementModule(calldataRequirementModuleCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        l3ChainId(l3ChainIdCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        processBulkTransactions_0(processBulkTransactions_0Call),
        #[allow(missing_docs)]
        processBulkTransactions_1(processBulkTransactions_1Call),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionRaw_0(processTransactionRaw_0Call),
        #[allow(missing_docs)]
        processTransactionRaw_1(processTransactionRaw_1Call),
        #[allow(missing_docs)]
        proposerRequirementModule(proposerRequirementModuleCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [28u8, 11u8, 99u8, 103u8],
            [51u8, 61u8, 135u8, 254u8],
            [53u8, 20u8, 211u8, 123u8],
            [61u8, 68u8, 174u8, 139u8],
            [61u8, 251u8, 94u8, 231u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [79u8, 172u8, 61u8, 68u8],
            [113u8, 80u8, 24u8, 166u8],
            [119u8, 191u8, 221u8, 25u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [168u8, 48u8, 182u8, 67u8],
            [170u8, 166u8, 7u8, 7u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for MetabasedSequencerChainWithDecayingPriorityCalls {
        const NAME: &'static str = "MetabasedSequencerChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calldataRequirementModule(_) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l3ChainId(_) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::processBulkTransactions_0(_) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions_1(_) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw_0(_) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw_1(_) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proposerRequirementModule(_) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                MetabasedSequencerChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn processBulkTransactions_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::processBulkTransactions_0,
                            )
                    }
                    processBulkTransactions_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn processTransactionRaw_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::processTransactionRaw_0,
                            )
                    }
                    processTransactionRaw_0
                },
                {
                    fn processTransactionRaw_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::processTransactionRaw_1,
                            )
                    }
                    processTransactionRaw_1
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::isCalldataAllowed,
                            )
                    }
                    isCalldataAllowed
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn processBulkTransactions_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::processBulkTransactions_1,
                            )
                    }
                    processBulkTransactions_1
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn l3ChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <l3ChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::l3ChainId,
                            )
                    }
                    l3ChainId
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainWithDecayingPriorityCalls::owner)
                    }
                    owner
                },
                {
                    fn proposerRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::proposerRequirementModule,
                            )
                    }
                    proposerRequirementModule
                },
                {
                    fn calldataRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::calldataRequirementModule,
                            )
                    }
                    calldataRequirementModule
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::calldataRequirementModule(inner) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions_0(inner) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions_1(inner) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw_0(inner) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw_1(inner) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proposerRequirementModule(inner) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calldataRequirementModule(inner) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::processBulkTransactions_0(inner) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions_1(inner) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw_0(inner) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw_1(inner) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proposerRequirementModule(inner) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MetabasedSequencerChainWithDecayingPriority`](self) custom errors.
    pub enum MetabasedSequencerChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        CalldataNotAllowed(CalldataNotAllowed),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [193u8, 128u8, 169u8, 98u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for MetabasedSequencerChainWithDecayingPriorityErrors {
        const NAME: &'static str = "MetabasedSequencerChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataNotAllowed(_) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                MetabasedSequencerChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn CalldataNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityErrors,
                    > {
                        <CalldataNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityErrors::CalldataNotAllowed,
                            )
                    }
                    CalldataNotAllowed
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        MetabasedSequencerChainWithDecayingPriorityErrors,
                    > {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainWithDecayingPriorityErrors::NotAllowed,
                            )
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MetabasedSequencerChainWithDecayingPriority`](self) events.
    pub enum MetabasedSequencerChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for MetabasedSequencerChainWithDecayingPriorityEvents {
        const NAME: &'static str = "MetabasedSequencerChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for MetabasedSequencerChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MetabasedSequencerChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`MetabasedSequencerChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N> {
        MetabasedSequencerChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        MetabasedSequencerChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _l3ChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MetabasedSequencerChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _l3ChainId)
    }
    /**A [`MetabasedSequencerChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MetabasedSequencerChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MetabasedSequencerChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MetabasedSequencerChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MetabasedSequencerChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`MetabasedSequencerChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _l3ChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _l3ChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > MetabasedSequencerChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N> {
            MetabasedSequencerChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`calldataRequirementModule`] function.
        pub fn calldataRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, calldataRequirementModuleCall, N> {
            self.call_builder(&calldataRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`l3ChainId`] function.
        pub fn l3ChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l3ChainIdCall, N> {
            self.call_builder(&l3ChainIdCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions_0`] function.
        pub fn processBulkTransactions_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactions_0Call, N> {
            self.call_builder(
                &processBulkTransactions_0Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processBulkTransactions_1`] function.
        pub fn processBulkTransactions_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactions_1Call, N> {
            self.call_builder(
                &processBulkTransactions_1Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw_0`] function.
        pub fn processTransactionRaw_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRaw_0Call, N> {
            self.call_builder(
                &processTransactionRaw_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionRaw_1`] function.
        pub fn processTransactionRaw_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRaw_1Call, N> {
            self.call_builder(
                &processTransactionRaw_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`proposerRequirementModule`] function.
        pub fn proposerRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proposerRequirementModuleCall, N> {
            self.call_builder(&proposerRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
