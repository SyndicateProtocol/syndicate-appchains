/**

Generated by the following Solidity interface...
```solidity
interface AllowlistSequencingModuleExtended {
    error AddressNotAllowed();
    error NotAdmin();

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
    event UserAdded(address indexed user);
    event UserRemoved(address indexed user);

    constructor(address _admin);

    function addToAllowlist(address user) external;
    function admin() external view returns (address);
    function allowlist(address user) external view returns (bool isAllowed);
    function isAllowed(address proposer) external view returns (bool);
    function isCalldataAllowed(bytes memory) external pure returns (bool);
    function removeFromAllowlist(address user) external;
    function transferAdmin(address newAdmin) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addToAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "removeFromAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminTransferred",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserRemoved",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AllowlistSequencingModuleExtended {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b6101bf565b610021610034565b6107d761020f82396107d790f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126109e68038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b5f1b90565b9061015e60018060a01b0391610148565b9181191691161790565b61017c6101776101819261009c565b610118565b61009c565b90565b61018d90610168565b90565b61019990610184565b90565b90565b906101b46101af6101bb92610190565b61019c565b825461014d565b9055565b806101da6101d46101cf5f610137565b6100a7565b916100a7565b146101eb576101e9905f61019f565b565b6101f3610034565b6315a9bc2760e11b81528061020a60048201610143565b0390fdfe60806040526004361015610013575b61041c565b61001d5f3561008c565b80633dfb5ee7146100875780635da93d7e1461008257806375829def1461007d578063a7cd52cb14610078578063babcc53914610073578063f851a4401461006e5763f8e86ece0361000e576103e9565b6103b4565b610310565b6102db565b610212565b6101df565b61014c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100ea5781359167ffffffffffffffff83116100e55760200192600183028401116100e057565b6100ac565b6100a8565b6100a4565b90602082820312610120575f82013567ffffffffffffffff811161011b5761011792016100b0565b9091565b6100a0565b61009c565b151590565b61013390610125565b9052565b919061014a905f6020850194019061012a565b565b3461017d576101796101686101623660046100ef565b90610424565b610170610092565b91829182610137565b0390f35b610098565b60018060a01b031690565b61019690610182565b90565b6101a28161018d565b036101a957565b5f80fd5b905035906101ba82610199565b565b906020828203126101d5576101d2915f016101ad565b90565b61009c565b5f0190565b3461020d576101f76101f23660046101bc565b610549565b6101ff610092565b80610209816101da565b0390f35b610098565b346102405761022a6102253660046101bc565b6106a5565b610232610092565b8061023c816101da565b0390f35b610098565b90565b61025c61025761026192610182565b610245565b610182565b90565b61026d90610248565b90565b61027990610264565b90565b9061028690610270565b5f5260205260405f2090565b1c90565b60ff1690565b6102ac9060086102b19302610292565b610296565b90565b906102bf915461029c565b90565b6102d8906102d36001915f9261027c565b6102b4565b90565b3461030b576103076102f66102f13660046101bc565b6102c2565b6102fe610092565b91829182610137565b0390f35b610098565b346103405761033c61032b6103263660046101bc565b6106d1565b610333610092565b91829182610137565b0390f35b610098565b5f91031261034f57565b61009c565b60018060a01b031690565b61036f9060086103749302610292565b610354565b90565b90610382915461035f565b90565b61038f5f80610377565b90565b61039b9061018d565b9052565b91906103b2905f60208501940190610392565b565b346103e4576103c4366004610345565b6103e06103cf610385565b6103d7610092565b9182918261039f565b0390f35b610098565b34610417576104016103fc3660046101bc565b610796565b610409610092565b80610413816101da565b0390f35b610098565b5f80fd5b5f90565b505061042e610420565b50600190565b5f1c90565b61044561044a91610434565b610354565b90565b6104579054610439565b90565b3361047561046f61046a5f61044d565b61018d565b9161018d565b0361048557610483906104f2565b565b61048d610092565b637bfa4b9f60e01b8152806104a4600482016101da565b0390fd5b5f1b90565b906104b960ff916104a8565b9181191691161790565b6104cc90610125565b90565b90565b906104e76104e26104ee926104c3565b6104cf565b82546104ad565b9055565b6105075f6105026001849061027c565b6104d2565b6105317fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610270565b9061053a610092565b80610544816101da565b0390a2565b6105529061045a565b565b3361056f6105696105645f61044d565b61018d565b9161018d565b0361057f5761057d9061060b565b565b610587610092565b637bfa4b9f60e01b81528061059e600482016101da565b0390fd5b90565b6105b96105b46105be926105a2565b610245565b610182565b90565b6105ca906105a5565b90565b906105de60018060a01b03916104a8565b9181191691161790565b90565b906106006105fb61060792610270565b6105e8565b82546105cd565b9055565b8061062661062061061b5f6105c1565b61018d565b9161018d565b1461068257610635815f6105eb565b339061066a6106647ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610270565b91610270565b91610673610092565b8061067d816101da565b0390a3565b61068a610092565b6315a9bc2760e11b8152806106a1600482016101da565b0390fd5b6106ae90610554565b565b6106bc6106c191610434565b610296565b90565b6106ce90546106b0565b90565b6106e86106ed916106e0610420565b50600161027c565b6106c4565b90565b3361070b6107056107005f61044d565b61018d565b9161018d565b0361071b576107199061073e565b565b610723610092565b637bfa4b9f60e01b81528061073a600482016101da565b0390fd5b610754600161074f6001849061027c565b6104d2565b61077e7f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610270565b90610787610092565b80610791816101da565b0390a2565b61079f906106f0565b56fea2646970667358221220b11a666298d97ec953fa7a80aafc44af5c5fb90067ba370933ed35947ab6334464736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\xBFV[a\0!a\x004V[a\x07\xD7a\x02\x0F\x829a\x07\xD7\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\t\xE6\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[_\x1B\x90V[\x90a\x01^`\x01\x80`\xA0\x1B\x03\x91a\x01HV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01|a\x01wa\x01\x81\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x01\x8D\x90a\x01hV[\x90V[a\x01\x99\x90a\x01\x84V[\x90V[\x90V[\x90a\x01\xB4a\x01\xAFa\x01\xBB\x92a\x01\x90V[a\x01\x9CV[\x82Ta\x01MV[\x90UV[\x80a\x01\xDAa\x01\xD4a\x01\xCF_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xEBWa\x01\xE9\x90_a\x01\x9FV[V[a\x01\xF3a\x004V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02\n`\x04\x82\x01a\x01CV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x1CV[a\0\x1D_5a\0\x8CV[\x80c=\xFB^\xE7\x14a\0\x87W\x80c]\xA9=~\x14a\0\x82W\x80cu\x82\x9D\xEF\x14a\0}W\x80c\xA7\xCDR\xCB\x14a\0xW\x80c\xBA\xBC\xC59\x14a\0sW\x80c\xF8Q\xA4@\x14a\0nWc\xF8\xE8n\xCE\x03a\0\x0EWa\x03\xE9V[a\x03\xB4V[a\x03\x10V[a\x02\xDBV[a\x02\x12V[a\x01\xDFV[a\x01LV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xEAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xE5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xE0WV[a\0\xACV[a\0\xA8V[a\0\xA4V[\x90` \x82\x82\x03\x12a\x01 W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x1BWa\x01\x17\x92\x01a\0\xB0V[\x90\x91V[a\0\xA0V[a\0\x9CV[\x15\x15\x90V[a\x013\x90a\x01%V[\x90RV[\x91\x90a\x01J\x90_` \x85\x01\x94\x01\x90a\x01*V[V[4a\x01}Wa\x01ya\x01ha\x01b6`\x04a\0\xEFV[\x90a\x04$V[a\x01pa\0\x92V[\x91\x82\x91\x82a\x017V[\x03\x90\xF3[a\0\x98V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x96\x90a\x01\x82V[\x90V[a\x01\xA2\x81a\x01\x8DV[\x03a\x01\xA9WV[_\x80\xFD[\x90P5\x90a\x01\xBA\x82a\x01\x99V[V[\x90` \x82\x82\x03\x12a\x01\xD5Wa\x01\xD2\x91_\x01a\x01\xADV[\x90V[a\0\x9CV[_\x01\x90V[4a\x02\rWa\x01\xF7a\x01\xF26`\x04a\x01\xBCV[a\x05IV[a\x01\xFFa\0\x92V[\x80a\x02\t\x81a\x01\xDAV[\x03\x90\xF3[a\0\x98V[4a\x02@Wa\x02*a\x02%6`\x04a\x01\xBCV[a\x06\xA5V[a\x022a\0\x92V[\x80a\x02<\x81a\x01\xDAV[\x03\x90\xF3[a\0\x98V[\x90V[a\x02\\a\x02Wa\x02a\x92a\x01\x82V[a\x02EV[a\x01\x82V[\x90V[a\x02m\x90a\x02HV[\x90V[a\x02y\x90a\x02dV[\x90V[\x90a\x02\x86\x90a\x02pV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x02\xAC\x90`\x08a\x02\xB1\x93\x02a\x02\x92V[a\x02\x96V[\x90V[\x90a\x02\xBF\x91Ta\x02\x9CV[\x90V[a\x02\xD8\x90a\x02\xD3`\x01\x91_\x92a\x02|V[a\x02\xB4V[\x90V[4a\x03\x0BWa\x03\x07a\x02\xF6a\x02\xF16`\x04a\x01\xBCV[a\x02\xC2V[a\x02\xFEa\0\x92V[\x91\x82\x91\x82a\x017V[\x03\x90\xF3[a\0\x98V[4a\x03@Wa\x03<a\x03+a\x03&6`\x04a\x01\xBCV[a\x06\xD1V[a\x033a\0\x92V[\x91\x82\x91\x82a\x017V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x03OWV[a\0\x9CV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03o\x90`\x08a\x03t\x93\x02a\x02\x92V[a\x03TV[\x90V[\x90a\x03\x82\x91Ta\x03_V[\x90V[a\x03\x8F_\x80a\x03wV[\x90V[a\x03\x9B\x90a\x01\x8DV[\x90RV[\x91\x90a\x03\xB2\x90_` \x85\x01\x94\x01\x90a\x03\x92V[V[4a\x03\xE4Wa\x03\xC46`\x04a\x03EV[a\x03\xE0a\x03\xCFa\x03\x85V[a\x03\xD7a\0\x92V[\x91\x82\x91\x82a\x03\x9FV[\x03\x90\xF3[a\0\x98V[4a\x04\x17Wa\x04\x01a\x03\xFC6`\x04a\x01\xBCV[a\x07\x96V[a\x04\ta\0\x92V[\x80a\x04\x13\x81a\x01\xDAV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x90V[PPa\x04.a\x04 V[P`\x01\x90V[_\x1C\x90V[a\x04Ea\x04J\x91a\x044V[a\x03TV[\x90V[a\x04W\x90Ta\x049V[\x90V[3a\x04ua\x04oa\x04j_a\x04MV[a\x01\x8DV[\x91a\x01\x8DV[\x03a\x04\x85Wa\x04\x83\x90a\x04\xF2V[V[a\x04\x8Da\0\x92V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x04\xA4`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[_\x1B\x90V[\x90a\x04\xB9`\xFF\x91a\x04\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xCC\x90a\x01%V[\x90V[\x90V[\x90a\x04\xE7a\x04\xE2a\x04\xEE\x92a\x04\xC3V[a\x04\xCFV[\x82Ta\x04\xADV[\x90UV[a\x05\x07_a\x05\x02`\x01\x84\x90a\x02|V[a\x04\xD2V[a\x051\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x02pV[\x90a\x05:a\0\x92V[\x80a\x05D\x81a\x01\xDAV[\x03\x90\xA2V[a\x05R\x90a\x04ZV[V[3a\x05oa\x05ia\x05d_a\x04MV[a\x01\x8DV[\x91a\x01\x8DV[\x03a\x05\x7FWa\x05}\x90a\x06\x0BV[V[a\x05\x87a\0\x92V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x05\x9E`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[\x90V[a\x05\xB9a\x05\xB4a\x05\xBE\x92a\x05\xA2V[a\x02EV[a\x01\x82V[\x90V[a\x05\xCA\x90a\x05\xA5V[\x90V[\x90a\x05\xDE`\x01\x80`\xA0\x1B\x03\x91a\x04\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x06\0a\x05\xFBa\x06\x07\x92a\x02pV[a\x05\xE8V[\x82Ta\x05\xCDV[\x90UV[\x80a\x06&a\x06 a\x06\x1B_a\x05\xC1V[a\x01\x8DV[\x91a\x01\x8DV[\x14a\x06\x82Wa\x065\x81_a\x05\xEBV[3\x90a\x06ja\x06d\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x02pV[\x91a\x02pV[\x91a\x06sa\0\x92V[\x80a\x06}\x81a\x01\xDAV[\x03\x90\xA3V[a\x06\x8Aa\0\x92V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x06\xA1`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[a\x06\xAE\x90a\x05TV[V[a\x06\xBCa\x06\xC1\x91a\x044V[a\x02\x96V[\x90V[a\x06\xCE\x90Ta\x06\xB0V[\x90V[a\x06\xE8a\x06\xED\x91a\x06\xE0a\x04 V[P`\x01a\x02|V[a\x06\xC4V[\x90V[3a\x07\x0Ba\x07\x05a\x07\0_a\x04MV[a\x01\x8DV[\x91a\x01\x8DV[\x03a\x07\x1BWa\x07\x19\x90a\x07>V[V[a\x07#a\0\x92V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x07:`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[a\x07T`\x01a\x07O`\x01\x84\x90a\x02|V[a\x04\xD2V[a\x07~\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x02pV[\x90a\x07\x87a\0\x92V[\x80a\x07\x91\x81a\x01\xDAV[\x03\x90\xA2V[a\x07\x9F\x90a\x06\xF0V[V\xFE\xA2dipfsX\"\x12 \xB1\x1Afb\x98\xD9~\xC9S\xFAz\x80\xAA\xFCD\xAF\\_\xB9\0g\xBA7\t3\xED5\x94z\xB63DdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61041c565b61001d5f3561008c565b80633dfb5ee7146100875780635da93d7e1461008257806375829def1461007d578063a7cd52cb14610078578063babcc53914610073578063f851a4401461006e5763f8e86ece0361000e576103e9565b6103b4565b610310565b6102db565b610212565b6101df565b61014c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100ea5781359167ffffffffffffffff83116100e55760200192600183028401116100e057565b6100ac565b6100a8565b6100a4565b90602082820312610120575f82013567ffffffffffffffff811161011b5761011792016100b0565b9091565b6100a0565b61009c565b151590565b61013390610125565b9052565b919061014a905f6020850194019061012a565b565b3461017d576101796101686101623660046100ef565b90610424565b610170610092565b91829182610137565b0390f35b610098565b60018060a01b031690565b61019690610182565b90565b6101a28161018d565b036101a957565b5f80fd5b905035906101ba82610199565b565b906020828203126101d5576101d2915f016101ad565b90565b61009c565b5f0190565b3461020d576101f76101f23660046101bc565b610549565b6101ff610092565b80610209816101da565b0390f35b610098565b346102405761022a6102253660046101bc565b6106a5565b610232610092565b8061023c816101da565b0390f35b610098565b90565b61025c61025761026192610182565b610245565b610182565b90565b61026d90610248565b90565b61027990610264565b90565b9061028690610270565b5f5260205260405f2090565b1c90565b60ff1690565b6102ac9060086102b19302610292565b610296565b90565b906102bf915461029c565b90565b6102d8906102d36001915f9261027c565b6102b4565b90565b3461030b576103076102f66102f13660046101bc565b6102c2565b6102fe610092565b91829182610137565b0390f35b610098565b346103405761033c61032b6103263660046101bc565b6106d1565b610333610092565b91829182610137565b0390f35b610098565b5f91031261034f57565b61009c565b60018060a01b031690565b61036f9060086103749302610292565b610354565b90565b90610382915461035f565b90565b61038f5f80610377565b90565b61039b9061018d565b9052565b91906103b2905f60208501940190610392565b565b346103e4576103c4366004610345565b6103e06103cf610385565b6103d7610092565b9182918261039f565b0390f35b610098565b34610417576104016103fc3660046101bc565b610796565b610409610092565b80610413816101da565b0390f35b610098565b5f80fd5b5f90565b505061042e610420565b50600190565b5f1c90565b61044561044a91610434565b610354565b90565b6104579054610439565b90565b3361047561046f61046a5f61044d565b61018d565b9161018d565b0361048557610483906104f2565b565b61048d610092565b637bfa4b9f60e01b8152806104a4600482016101da565b0390fd5b5f1b90565b906104b960ff916104a8565b9181191691161790565b6104cc90610125565b90565b90565b906104e76104e26104ee926104c3565b6104cf565b82546104ad565b9055565b6105075f6105026001849061027c565b6104d2565b6105317fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610270565b9061053a610092565b80610544816101da565b0390a2565b6105529061045a565b565b3361056f6105696105645f61044d565b61018d565b9161018d565b0361057f5761057d9061060b565b565b610587610092565b637bfa4b9f60e01b81528061059e600482016101da565b0390fd5b90565b6105b96105b46105be926105a2565b610245565b610182565b90565b6105ca906105a5565b90565b906105de60018060a01b03916104a8565b9181191691161790565b90565b906106006105fb61060792610270565b6105e8565b82546105cd565b9055565b8061062661062061061b5f6105c1565b61018d565b9161018d565b1461068257610635815f6105eb565b339061066a6106647ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610270565b91610270565b91610673610092565b8061067d816101da565b0390a3565b61068a610092565b6315a9bc2760e11b8152806106a1600482016101da565b0390fd5b6106ae90610554565b565b6106bc6106c191610434565b610296565b90565b6106ce90546106b0565b90565b6106e86106ed916106e0610420565b50600161027c565b6106c4565b90565b3361070b6107056107005f61044d565b61018d565b9161018d565b0361071b576107199061073e565b565b610723610092565b637bfa4b9f60e01b81528061073a600482016101da565b0390fd5b610754600161074f6001849061027c565b6104d2565b61077e7f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610270565b90610787610092565b80610791816101da565b0390a2565b61079f906106f0565b56fea2646970667358221220b11a666298d97ec953fa7a80aafc44af5c5fb90067ba370933ed35947ab6334464736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x1CV[a\0\x1D_5a\0\x8CV[\x80c=\xFB^\xE7\x14a\0\x87W\x80c]\xA9=~\x14a\0\x82W\x80cu\x82\x9D\xEF\x14a\0}W\x80c\xA7\xCDR\xCB\x14a\0xW\x80c\xBA\xBC\xC59\x14a\0sW\x80c\xF8Q\xA4@\x14a\0nWc\xF8\xE8n\xCE\x03a\0\x0EWa\x03\xE9V[a\x03\xB4V[a\x03\x10V[a\x02\xDBV[a\x02\x12V[a\x01\xDFV[a\x01LV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xEAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xE5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xE0WV[a\0\xACV[a\0\xA8V[a\0\xA4V[\x90` \x82\x82\x03\x12a\x01 W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x1BWa\x01\x17\x92\x01a\0\xB0V[\x90\x91V[a\0\xA0V[a\0\x9CV[\x15\x15\x90V[a\x013\x90a\x01%V[\x90RV[\x91\x90a\x01J\x90_` \x85\x01\x94\x01\x90a\x01*V[V[4a\x01}Wa\x01ya\x01ha\x01b6`\x04a\0\xEFV[\x90a\x04$V[a\x01pa\0\x92V[\x91\x82\x91\x82a\x017V[\x03\x90\xF3[a\0\x98V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x96\x90a\x01\x82V[\x90V[a\x01\xA2\x81a\x01\x8DV[\x03a\x01\xA9WV[_\x80\xFD[\x90P5\x90a\x01\xBA\x82a\x01\x99V[V[\x90` \x82\x82\x03\x12a\x01\xD5Wa\x01\xD2\x91_\x01a\x01\xADV[\x90V[a\0\x9CV[_\x01\x90V[4a\x02\rWa\x01\xF7a\x01\xF26`\x04a\x01\xBCV[a\x05IV[a\x01\xFFa\0\x92V[\x80a\x02\t\x81a\x01\xDAV[\x03\x90\xF3[a\0\x98V[4a\x02@Wa\x02*a\x02%6`\x04a\x01\xBCV[a\x06\xA5V[a\x022a\0\x92V[\x80a\x02<\x81a\x01\xDAV[\x03\x90\xF3[a\0\x98V[\x90V[a\x02\\a\x02Wa\x02a\x92a\x01\x82V[a\x02EV[a\x01\x82V[\x90V[a\x02m\x90a\x02HV[\x90V[a\x02y\x90a\x02dV[\x90V[\x90a\x02\x86\x90a\x02pV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x02\xAC\x90`\x08a\x02\xB1\x93\x02a\x02\x92V[a\x02\x96V[\x90V[\x90a\x02\xBF\x91Ta\x02\x9CV[\x90V[a\x02\xD8\x90a\x02\xD3`\x01\x91_\x92a\x02|V[a\x02\xB4V[\x90V[4a\x03\x0BWa\x03\x07a\x02\xF6a\x02\xF16`\x04a\x01\xBCV[a\x02\xC2V[a\x02\xFEa\0\x92V[\x91\x82\x91\x82a\x017V[\x03\x90\xF3[a\0\x98V[4a\x03@Wa\x03<a\x03+a\x03&6`\x04a\x01\xBCV[a\x06\xD1V[a\x033a\0\x92V[\x91\x82\x91\x82a\x017V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x03OWV[a\0\x9CV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03o\x90`\x08a\x03t\x93\x02a\x02\x92V[a\x03TV[\x90V[\x90a\x03\x82\x91Ta\x03_V[\x90V[a\x03\x8F_\x80a\x03wV[\x90V[a\x03\x9B\x90a\x01\x8DV[\x90RV[\x91\x90a\x03\xB2\x90_` \x85\x01\x94\x01\x90a\x03\x92V[V[4a\x03\xE4Wa\x03\xC46`\x04a\x03EV[a\x03\xE0a\x03\xCFa\x03\x85V[a\x03\xD7a\0\x92V[\x91\x82\x91\x82a\x03\x9FV[\x03\x90\xF3[a\0\x98V[4a\x04\x17Wa\x04\x01a\x03\xFC6`\x04a\x01\xBCV[a\x07\x96V[a\x04\ta\0\x92V[\x80a\x04\x13\x81a\x01\xDAV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x90V[PPa\x04.a\x04 V[P`\x01\x90V[_\x1C\x90V[a\x04Ea\x04J\x91a\x044V[a\x03TV[\x90V[a\x04W\x90Ta\x049V[\x90V[3a\x04ua\x04oa\x04j_a\x04MV[a\x01\x8DV[\x91a\x01\x8DV[\x03a\x04\x85Wa\x04\x83\x90a\x04\xF2V[V[a\x04\x8Da\0\x92V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x04\xA4`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[_\x1B\x90V[\x90a\x04\xB9`\xFF\x91a\x04\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xCC\x90a\x01%V[\x90V[\x90V[\x90a\x04\xE7a\x04\xE2a\x04\xEE\x92a\x04\xC3V[a\x04\xCFV[\x82Ta\x04\xADV[\x90UV[a\x05\x07_a\x05\x02`\x01\x84\x90a\x02|V[a\x04\xD2V[a\x051\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x02pV[\x90a\x05:a\0\x92V[\x80a\x05D\x81a\x01\xDAV[\x03\x90\xA2V[a\x05R\x90a\x04ZV[V[3a\x05oa\x05ia\x05d_a\x04MV[a\x01\x8DV[\x91a\x01\x8DV[\x03a\x05\x7FWa\x05}\x90a\x06\x0BV[V[a\x05\x87a\0\x92V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x05\x9E`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[\x90V[a\x05\xB9a\x05\xB4a\x05\xBE\x92a\x05\xA2V[a\x02EV[a\x01\x82V[\x90V[a\x05\xCA\x90a\x05\xA5V[\x90V[\x90a\x05\xDE`\x01\x80`\xA0\x1B\x03\x91a\x04\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x06\0a\x05\xFBa\x06\x07\x92a\x02pV[a\x05\xE8V[\x82Ta\x05\xCDV[\x90UV[\x80a\x06&a\x06 a\x06\x1B_a\x05\xC1V[a\x01\x8DV[\x91a\x01\x8DV[\x14a\x06\x82Wa\x065\x81_a\x05\xEBV[3\x90a\x06ja\x06d\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x02pV[\x91a\x02pV[\x91a\x06sa\0\x92V[\x80a\x06}\x81a\x01\xDAV[\x03\x90\xA3V[a\x06\x8Aa\0\x92V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x06\xA1`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[a\x06\xAE\x90a\x05TV[V[a\x06\xBCa\x06\xC1\x91a\x044V[a\x02\x96V[\x90V[a\x06\xCE\x90Ta\x06\xB0V[\x90V[a\x06\xE8a\x06\xED\x91a\x06\xE0a\x04 V[P`\x01a\x02|V[a\x06\xC4V[\x90V[3a\x07\x0Ba\x07\x05a\x07\0_a\x04MV[a\x01\x8DV[\x91a\x01\x8DV[\x03a\x07\x1BWa\x07\x19\x90a\x07>V[V[a\x07#a\0\x92V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x07:`\x04\x82\x01a\x01\xDAV[\x03\x90\xFD[a\x07T`\x01a\x07O`\x01\x84\x90a\x02|V[a\x04\xD2V[a\x07~\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x02pV[\x90a\x07\x87a\0\x92V[\x80a\x07\x91\x81a\x01\xDAV[\x03\x90\xA2V[a\x07\x9F\x90a\x06\xF0V[V\xFE\xA2dipfsX\"\x12 \xB1\x1Afb\x98\xD9~\xC9S\xFAz\x80\xAA\xFCD\xAF\\_\xB9\0g\xBA7\t3\xED5\x94z\xB63DdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
```solidity
error NotAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminTransferred(address,address)` and selector `0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6`.
```solidity
event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminTransferred {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: topics.1,
                    newAdmin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousAdmin.clone(),
                    self.newAdmin.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousAdmin,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAdmin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address)` and selector `0x19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f`.
```solidity
event UserAdded(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserRemoved(address)` and selector `0xe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d`.
```solidity
event UserRemoved(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserRemoved {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addToAllowlist(address)` and selector `0xf8e86ece`.
```solidity
function addToAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addToAllowlist(address)`](addToAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToAllowlist(address)";
            const SELECTOR: [u8; 4] = [248u8, 232u8, 110u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowlist(address)` and selector `0xa7cd52cb`.
```solidity
function allowlist(address user) external view returns (bool isAllowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowlist(address)`](allowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistReturn {
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistReturn) -> Self {
                    (value.isAllowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isAllowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowlistReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowlist(address)";
            const SELECTOR: [u8; 4] = [167u8, 205u8, 82u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromAllowlist(address)` and selector `0x5da93d7e`.
```solidity
function removeFromAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeFromAllowlist(address)`](removeFromAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromAllowlist(address)";
            const SELECTOR: [u8; 4] = [93u8, 169u8, 61u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferAdmin(address)` and selector `0x75829def`.
```solidity
function transferAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminCall {
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferAdmin(address)`](transferAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferAdmin(address)";
            const SELECTOR: [u8; 4] = [117u8, 130u8, 157u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AllowlistSequencingModuleExtended`](self) function calls.
    pub enum AllowlistSequencingModuleExtendedCalls {
        #[allow(missing_docs)]
        addToAllowlist(addToAllowlistCall),
        #[allow(missing_docs)]
        admin(adminCall),
        #[allow(missing_docs)]
        allowlist(allowlistCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        removeFromAllowlist(removeFromAllowlistCall),
        #[allow(missing_docs)]
        transferAdmin(transferAdminCall),
    }
    #[automatically_derived]
    impl AllowlistSequencingModuleExtendedCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [61u8, 251u8, 94u8, 231u8],
            [93u8, 169u8, 61u8, 126u8],
            [117u8, 130u8, 157u8, 239u8],
            [167u8, 205u8, 82u8, 203u8],
            [186u8, 188u8, 197u8, 57u8],
            [248u8, 81u8, 164u8, 64u8],
            [248u8, 232u8, 110u8, 206u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AllowlistSequencingModuleExtendedCalls {
        const NAME: &'static str = "AllowlistSequencingModuleExtendedCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToAllowlist(_) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allowlist(_) => {
                    <allowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromAllowlist(_) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferAdmin(_) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AllowlistSequencingModuleExtendedCalls>] = &[
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AllowlistSequencingModuleExtendedCalls::isCalldataAllowed,
                            )
                    }
                    isCalldataAllowed
                },
                {
                    fn removeFromAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AllowlistSequencingModuleExtendedCalls::removeFromAllowlist,
                            )
                    }
                    removeFromAllowlist
                },
                {
                    fn transferAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <transferAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistSequencingModuleExtendedCalls::transferAdmin)
                    }
                    transferAdmin
                },
                {
                    fn allowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <allowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistSequencingModuleExtendedCalls::allowlist)
                    }
                    allowlist
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistSequencingModuleExtendedCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistSequencingModuleExtendedCalls::admin)
                    }
                    admin
                },
                {
                    fn addToAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedCalls,
                    > {
                        <addToAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistSequencingModuleExtendedCalls::addToAllowlist)
                    }
                    addToAllowlist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AllowlistSequencingModuleExtended`](self) custom errors.
    pub enum AllowlistSequencingModuleExtendedErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        NotAdmin(NotAdmin),
    }
    #[automatically_derived]
    impl AllowlistSequencingModuleExtendedErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [123u8, 250u8, 75u8, 159u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AllowlistSequencingModuleExtendedErrors {
        const NAME: &'static str = "AllowlistSequencingModuleExtendedErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AllowlistSequencingModuleExtendedErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedErrors,
                    > {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AllowlistSequencingModuleExtendedErrors::AddressNotAllowed,
                            )
                    }
                    AddressNotAllowed
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistSequencingModuleExtendedErrors,
                    > {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistSequencingModuleExtendedErrors::NotAdmin)
                    }
                    NotAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`AllowlistSequencingModuleExtended`](self) events.
    pub enum AllowlistSequencingModuleExtendedEvents {
        #[allow(missing_docs)]
        AdminTransferred(AdminTransferred),
        #[allow(missing_docs)]
        UserAdded(UserAdded),
        #[allow(missing_docs)]
        UserRemoved(UserRemoved),
    }
    #[automatically_derived]
    impl AllowlistSequencingModuleExtendedEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ],
            [
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ],
            [
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AllowlistSequencingModuleExtendedEvents {
        const NAME: &'static str = "AllowlistSequencingModuleExtendedEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminTransferred)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(<UserRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for AllowlistSequencingModuleExtendedEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AllowlistSequencingModuleExtended`](self) contract instance.

See the [wrapper's documentation](`AllowlistSequencingModuleExtendedInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AllowlistSequencingModuleExtendedInstance<T, P, N> {
        AllowlistSequencingModuleExtendedInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AllowlistSequencingModuleExtendedInstance<T, P, N>,
        >,
    > {
        AllowlistSequencingModuleExtendedInstance::<T, P, N>::deploy(provider, _admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AllowlistSequencingModuleExtendedInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _admin)
    }
    /**A [`AllowlistSequencingModuleExtended`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AllowlistSequencingModuleExtended`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AllowlistSequencingModuleExtendedInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for AllowlistSequencingModuleExtendedInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AllowlistSequencingModuleExtendedInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistSequencingModuleExtendedInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AllowlistSequencingModuleExtended`](self) contract instance.

See the [wrapper's documentation](`AllowlistSequencingModuleExtendedInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AllowlistSequencingModuleExtendedInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > AllowlistSequencingModuleExtendedInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AllowlistSequencingModuleExtendedInstance<T, P, N> {
            AllowlistSequencingModuleExtendedInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistSequencingModuleExtendedInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToAllowlist`] function.
        pub fn addToAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToAllowlistCall, N> {
            self.call_builder(&addToAllowlistCall { user })
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`allowlist`] function.
        pub fn allowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowlistCall, N> {
            self.call_builder(&allowlistCall { user })
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            _0: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { _0 })
        }
        ///Creates a new call builder for the [`removeFromAllowlist`] function.
        pub fn removeFromAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromAllowlistCall, N> {
            self.call_builder(&removeFromAllowlistCall { user })
        }
        ///Creates a new call builder for the [`transferAdmin`] function.
        pub fn transferAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferAdminCall, N> {
            self.call_builder(&transferAdminCall { newAdmin })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistSequencingModuleExtendedInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminTransferred`] event.
        pub fn AdminTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminTransferred, N> {
            self.event_filter::<AdminTransferred>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserRemoved`] event.
        pub fn UserRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserRemoved, N> {
            self.event_filter::<UserRemoved>()
        }
    }
}
