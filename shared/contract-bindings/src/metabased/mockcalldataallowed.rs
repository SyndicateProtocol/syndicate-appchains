/**

Generated by the following Solidity interface...
```solidity
interface MockCalldataAllowed {
    constructor(bool _allowed);

    function isCalldataAllowed(bytes memory) external view returns (bool);
    function setShouldAllowCalldata(bool _shouldAllow) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_allowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setShouldAllowCalldata",
    "inputs": [
      {
        "name": "_shouldAllow",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockCalldataAllowed {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100e2565b61014d565b610021610034565b61028161015a823961028190f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b151590565b6100aa8161009c565b036100b157565b5f80fd5b905051906100c2826100a1565b565b906020828203126100dd576100da915f016100b5565b90565b610098565b6101006103db803803806100f581610083565b9283398101906100c4565b90565b5f1b90565b9061011460ff91610103565b9181191691161790565b6101279061009c565b90565b90565b9061014261013d6101499261011e565b61012a565b8254610108565b9055565b610157905f61012d565b56fe60806040526004361015610013575b6101aa565b61001d5f3561003b565b8062c131a61461003657633dfb5ee70361000e57610174565b61009e565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61006181610053565b0361006857565b5f80fd5b9050359061007982610058565b565b9060208282031261009457610091915f0161006c565b90565b61004b565b5f0190565b346100cc576100b66100b136600461007b565b6101f8565b6100be610041565b806100c881610099565b0390f35b610047565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101175781359167ffffffffffffffff831161011257602001926001830284011161010d57565b6100d9565b6100d5565b6100d1565b9060208282031261014d575f82013567ffffffffffffffff81116101485761014492016100dd565b9091565b61004f565b61004b565b61015b90610053565b9052565b9190610172905f60208501940190610152565b565b346101a5576101a161019061018a36600461011c565b90610234565b610198610041565b9182918261015f565b0390f35b610047565b5f80fd5b5f1b90565b906101bf60ff916101ae565b9181191691161790565b6101d290610053565b90565b90565b906101ed6101e86101f4926101c9565b6101d5565b82546101b3565b9055565b610202905f6101d8565b565b5f90565b5f1c90565b60ff1690565b61021f61022491610208565b61020d565b90565b6102319054610213565b90565b505061023e610204565b506102485f610227565b9056fea26469706673582212209c7a2ebf6f0a72e8836e62f9b7508eba2514d744ba116c3a98afc5a3c3ac10b864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xE2V[a\x01MV[a\0!a\x004V[a\x02\x81a\x01Z\x829a\x02\x81\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[\x15\x15\x90V[a\0\xAA\x81a\0\x9CV[\x03a\0\xB1WV[_\x80\xFD[\x90PQ\x90a\0\xC2\x82a\0\xA1V[V[\x90` \x82\x82\x03\x12a\0\xDDWa\0\xDA\x91_\x01a\0\xB5V[\x90V[a\0\x98V[a\x01\0a\x03\xDB\x808\x03\x80a\0\xF5\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xC4V[\x90V[_\x1B\x90V[\x90a\x01\x14`\xFF\x91a\x01\x03V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01'\x90a\0\x9CV[\x90V[\x90V[\x90a\x01Ba\x01=a\x01I\x92a\x01\x1EV[a\x01*V[\x82Ta\x01\x08V[\x90UV[a\x01W\x90_a\x01-V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xAAV[a\0\x1D_5a\0;V[\x80b\xC11\xA6\x14a\x006Wc=\xFB^\xE7\x03a\0\x0EWa\x01tV[a\0\x9EV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0a\x81a\0SV[\x03a\0hWV[_\x80\xFD[\x90P5\x90a\0y\x82a\0XV[V[\x90` \x82\x82\x03\x12a\0\x94Wa\0\x91\x91_\x01a\0lV[\x90V[a\0KV[_\x01\x90V[4a\0\xCCWa\0\xB6a\0\xB16`\x04a\0{V[a\x01\xF8V[a\0\xBEa\0AV[\x80a\0\xC8\x81a\0\x99V[\x03\x90\xF3[a\0GV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x17W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x12W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\rWV[a\0\xD9V[a\0\xD5V[a\0\xD1V[\x90` \x82\x82\x03\x12a\x01MW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01HWa\x01D\x92\x01a\0\xDDV[\x90\x91V[a\0OV[a\0KV[a\x01[\x90a\0SV[\x90RV[\x91\x90a\x01r\x90_` \x85\x01\x94\x01\x90a\x01RV[V[4a\x01\xA5Wa\x01\xA1a\x01\x90a\x01\x8A6`\x04a\x01\x1CV[\x90a\x024V[a\x01\x98a\0AV[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0GV[_\x80\xFD[_\x1B\x90V[\x90a\x01\xBF`\xFF\x91a\x01\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xD2\x90a\0SV[\x90V[\x90V[\x90a\x01\xEDa\x01\xE8a\x01\xF4\x92a\x01\xC9V[a\x01\xD5V[\x82Ta\x01\xB3V[\x90UV[a\x02\x02\x90_a\x01\xD8V[V[_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x02\x1Fa\x02$\x91a\x02\x08V[a\x02\rV[\x90V[a\x021\x90Ta\x02\x13V[\x90V[PPa\x02>a\x02\x04V[Pa\x02H_a\x02'V[\x90V\xFE\xA2dipfsX\"\x12 \x9Cz.\xBFo\nr\xE8\x83nb\xF9\xB7P\x8E\xBA%\x14\xD7D\xBA\x11l:\x98\xAF\xC5\xA3\xC3\xAC\x10\xB8dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6101aa565b61001d5f3561003b565b8062c131a61461003657633dfb5ee70361000e57610174565b61009e565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61006181610053565b0361006857565b5f80fd5b9050359061007982610058565b565b9060208282031261009457610091915f0161006c565b90565b61004b565b5f0190565b346100cc576100b66100b136600461007b565b6101f8565b6100be610041565b806100c881610099565b0390f35b610047565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101175781359167ffffffffffffffff831161011257602001926001830284011161010d57565b6100d9565b6100d5565b6100d1565b9060208282031261014d575f82013567ffffffffffffffff81116101485761014492016100dd565b9091565b61004f565b61004b565b61015b90610053565b9052565b9190610172905f60208501940190610152565b565b346101a5576101a161019061018a36600461011c565b90610234565b610198610041565b9182918261015f565b0390f35b610047565b5f80fd5b5f1b90565b906101bf60ff916101ae565b9181191691161790565b6101d290610053565b90565b90565b906101ed6101e86101f4926101c9565b6101d5565b82546101b3565b9055565b610202905f6101d8565b565b5f90565b5f1c90565b60ff1690565b61021f61022491610208565b61020d565b90565b6102319054610213565b90565b505061023e610204565b506102485f610227565b9056fea26469706673582212209c7a2ebf6f0a72e8836e62f9b7508eba2514d744ba116c3a98afc5a3c3ac10b864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xAAV[a\0\x1D_5a\0;V[\x80b\xC11\xA6\x14a\x006Wc=\xFB^\xE7\x03a\0\x0EWa\x01tV[a\0\x9EV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0a\x81a\0SV[\x03a\0hWV[_\x80\xFD[\x90P5\x90a\0y\x82a\0XV[V[\x90` \x82\x82\x03\x12a\0\x94Wa\0\x91\x91_\x01a\0lV[\x90V[a\0KV[_\x01\x90V[4a\0\xCCWa\0\xB6a\0\xB16`\x04a\0{V[a\x01\xF8V[a\0\xBEa\0AV[\x80a\0\xC8\x81a\0\x99V[\x03\x90\xF3[a\0GV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x17W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x12W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\rWV[a\0\xD9V[a\0\xD5V[a\0\xD1V[\x90` \x82\x82\x03\x12a\x01MW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01HWa\x01D\x92\x01a\0\xDDV[\x90\x91V[a\0OV[a\0KV[a\x01[\x90a\0SV[\x90RV[\x91\x90a\x01r\x90_` \x85\x01\x94\x01\x90a\x01RV[V[4a\x01\xA5Wa\x01\xA1a\x01\x90a\x01\x8A6`\x04a\x01\x1CV[\x90a\x024V[a\x01\x98a\0AV[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0GV[_\x80\xFD[_\x1B\x90V[\x90a\x01\xBF`\xFF\x91a\x01\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xD2\x90a\0SV[\x90V[\x90V[\x90a\x01\xEDa\x01\xE8a\x01\xF4\x92a\x01\xC9V[a\x01\xD5V[\x82Ta\x01\xB3V[\x90UV[a\x02\x02\x90_a\x01\xD8V[V[_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x02\x1Fa\x02$\x91a\x02\x08V[a\x02\rV[\x90V[a\x021\x90Ta\x02\x13V[\x90V[PPa\x02>a\x02\x04V[Pa\x02H_a\x02'V[\x90V\xFE\xA2dipfsX\"\x12 \x9Cz.\xBFo\nr\xE8\x83nb\xF9\xB7P\x8E\xBA%\x14\xD7D\xBA\x11l:\x98\xAF\xC5\xA3\xC3\xAC\x10\xB8dsolcC\0\x08\x19\x003",
    );
    /**Constructor`.
```solidity
constructor(bool _allowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _allowed: bool,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._allowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _allowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._allowed,
                    ),
                )
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShouldAllowCalldata(bool)` and selector `0x00c131a6`.
```solidity
function setShouldAllowCalldata(bool _shouldAllow) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldAllowCalldataCall {
        #[allow(missing_docs)]
        pub _shouldAllow: bool,
    }
    ///Container type for the return parameters of the [`setShouldAllowCalldata(bool)`](setShouldAllowCalldataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldAllowCalldataReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldAllowCalldataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldAllowCalldataCall) -> Self {
                    (value._shouldAllow,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldAllowCalldataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldAllow: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldAllowCalldataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldAllowCalldataReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldAllowCalldataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldAllowCalldataCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldAllowCalldataReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldAllowCalldata(bool)";
            const SELECTOR: [u8; 4] = [0u8, 193u8, 49u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldAllow,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockCalldataAllowed`](self) function calls.
    pub enum MockCalldataAllowedCalls {
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        setShouldAllowCalldata(setShouldAllowCalldataCall),
    }
    #[automatically_derived]
    impl MockCalldataAllowedCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 193u8, 49u8, 166u8],
            [61u8, 251u8, 94u8, 231u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockCalldataAllowedCalls {
        const NAME: &'static str = "MockCalldataAllowedCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldAllowCalldata(_) => {
                    <setShouldAllowCalldataCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockCalldataAllowedCalls>] = &[
                {
                    fn setShouldAllowCalldata(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockCalldataAllowedCalls> {
                        <setShouldAllowCalldataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockCalldataAllowedCalls::setShouldAllowCalldata)
                    }
                    setShouldAllowCalldata
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockCalldataAllowedCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockCalldataAllowedCalls::isCalldataAllowed)
                    }
                    isCalldataAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldAllowCalldata(inner) => {
                    <setShouldAllowCalldataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldAllowCalldata(inner) => {
                    <setShouldAllowCalldataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockCalldataAllowed`](self) contract instance.

See the [wrapper's documentation](`MockCalldataAllowedInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockCalldataAllowedInstance<T, P, N> {
        MockCalldataAllowedInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _allowed: bool,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockCalldataAllowedInstance<T, P, N>>,
    > {
        MockCalldataAllowedInstance::<T, P, N>::deploy(provider, _allowed)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P, _allowed: bool) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockCalldataAllowedInstance::<T, P, N>::deploy_builder(provider, _allowed)
    }
    /**A [`MockCalldataAllowed`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockCalldataAllowed`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockCalldataAllowedInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockCalldataAllowedInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockCalldataAllowedInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockCalldataAllowedInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockCalldataAllowed`](self) contract instance.

See the [wrapper's documentation](`MockCalldataAllowedInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _allowed: bool,
        ) -> alloy_contract::Result<MockCalldataAllowedInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _allowed);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _allowed: bool,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _allowed },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockCalldataAllowedInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockCalldataAllowedInstance<T, P, N> {
            MockCalldataAllowedInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockCalldataAllowedInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            _0: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { _0 })
        }
        ///Creates a new call builder for the [`setShouldAllowCalldata`] function.
        pub fn setShouldAllowCalldata(
            &self,
            _shouldAllow: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShouldAllowCalldataCall, N> {
            self.call_builder(
                &setShouldAllowCalldataCall {
                    _shouldAllow,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockCalldataAllowedInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
