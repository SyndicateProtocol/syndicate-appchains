/**

Generated by the following Solidity interface...
```solidity
interface WalletPoolWrapperModule {
    error AddressNotAllowed();
    error NotAdmin();
    error ZeroSequencerAddressNotAllowed();

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
    event UserAdded(address indexed user);
    event UserRemoved(address indexed user);
    event WalletPoolWrapperBulkTransactionsSent(address indexed from, address indexed metabasedSequencerChain, uint256 count);
    event WalletPoolWrapperTransactionSent(address indexed from, address indexed metabasedSequencerChain);

    constructor(address _admin);

    function addToAllowlist(address user) external;
    function admin() external view returns (address);
    function allowlist(address user) external view returns (bool isAllowed);
    function isAllowed(address proposer) external view returns (bool);
    function processBulkTransactions(address _metabasedSequencerChain, bytes[] memory data) external;
    function processTransaction(address _metabasedSequencerChain, bytes memory data) external;
    function processTransactionRaw(address _metabasedSequencerChain, bytes memory data) external;
    function removeFromAllowlist(address user) external;
    function transferAdmin(address newAdmin) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addToAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "_metabasedSequencerChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "_metabasedSequencerChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "_metabasedSequencerChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeFromAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminTransferred",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserRemoved",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperBulkTransactionsSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "metabasedSequencerChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "count",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperTransactionSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "metabasedSequencerChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroSequencerAddressNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod WalletPoolWrapperModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b610fc461021a8239610fc490f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126111de8038038061010781610083565b9283398101906100d6565b90565b61011e906101ca565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b5f0190565b5f1b90565b9061016960018060a01b0391610153565b9181191691161790565b61018761018261018c9261009c565b610123565b61009c565b90565b61019890610173565b90565b6101a49061018f565b90565b90565b906101bf6101ba6101c69261019b565b6101a7565b8254610158565b9055565b806101e56101df6101da5f610142565b6100a7565b916100a7565b146101f6576101f4905f6101aa565b565b6101fe610034565b6315a9bc2760e11b8152806102156004820161014e565b0390fdfe60806040526004361015610013575b610537565b61001d5f356100ac565b8063180dee36146100a757806326cc4550146100a25780635da93d7e1461009d5780636ebca5f61461009857806375829def14610093578063a7cd52cb1461008e578063babcc53914610089578063f851a440146100845763f8e86ece0361000e57610504565b6104cf565b61042b565b6103f6565b610306565b6102d2565b61029f565b61024d565b610194565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100d8906100c4565b90565b6100e4816100cf565b036100eb57565b5f80fd5b905035906100fc826100db565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101445781359167ffffffffffffffff831161013f57602001926001830284011161013a57565b610106565b610102565b6100fe565b91909160408184031261018a57610162835f83016100ef565b92602082013567ffffffffffffffff811161018557610181920161010a565b9091565b6100c0565b6100bc565b5f0190565b346101c3576101ad6101a7366004610149565b916107f0565b6101b56100b2565b806101bf8161018f565b0390f35b6100b8565b909182601f830112156102025781359167ffffffffffffffff83116101fd5760200192602083028401116101f857565b610106565b610102565b6100fe565b91909160408184031261024857610220835f83016100ef565b92602082013567ffffffffffffffff81116102435761023f92016101c8565b9091565b6100c0565b6100bc565b3461027c57610266610260366004610207565b91610ad5565b61026e6100b2565b806102788161018f565b0390f35b6100b8565b9060208282031261029a57610297915f016100ef565b90565b6100bc565b346102cd576102b76102b2366004610281565b610bf2565b6102bf6100b2565b806102c98161018f565b0390f35b6100b8565b34610301576102eb6102e5366004610149565b91610d7c565b6102f36100b2565b806102fd8161018f565b0390f35b6100b8565b346103345761031e610319366004610281565b610eaf565b6103266100b2565b806103308161018f565b0390f35b6100b8565b90565b61035061034b610355926100c4565b610339565b6100c4565b90565b6103619061033c565b90565b61036d90610358565b90565b9061037a90610364565b5f5260205260405f2090565b1c90565b60ff1690565b6103a09060086103a59302610386565b61038a565b90565b906103b39154610390565b90565b6103cc906103c76001915f92610370565b6103a8565b90565b151590565b6103dd906103cf565b9052565b91906103f4905f602085019401906103d4565b565b346104265761042261041161040c366004610281565b6103b6565b6104196100b2565b918291826103e1565b0390f35b6100b8565b3461045b57610457610446610441366004610281565b610ebe565b61044e6100b2565b918291826103e1565b0390f35b6100b8565b5f91031261046a57565b6100bc565b60018060a01b031690565b61048a90600861048f9302610386565b61046f565b90565b9061049d915461047a565b90565b6104aa5f80610492565b90565b6104b6906100cf565b9052565b91906104cd905f602085019401906104ad565b565b346104ff576104df366004610460565b6104fb6104ea6104a0565b6104f26100b2565b918291826104ba565b0390f35b6100b8565b346105325761051c610517366004610281565b610f83565b6105246100b2565b8061052e8161018f565b0390f35b6100b8565b5f80fd5b5f1c90565b61054c6105519161053b565b61038a565b90565b61055e9054610540565b90565b919061058061057a61057560013390610370565b610554565b156103cf565b61058f5761058d926105dd565b565b6105976100b2565b6315a9bc2760e11b8152806105ae6004820161018f565b0390fd5b90565b6105c96105c46105ce926105b2565b610339565b6100c4565b90565b6105da906105b5565b90565b9190826105fa6105f46105ef5f6105d1565b6100cf565b916100cf565b1461060a5761060892610712565b565b6106126100b2565b6375ffcc2360e01b8152806106296004820161018f565b0390fd5b6106369061033c565b90565b6106429061062d565b90565b61064e90610358565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061067d90610655565b810190811067ffffffffffffffff82111761069757604052565b61065f565b60e01b90565b5f9103126106ac57565b6100bc565b60209181520190565b90825f939282370152565b91906106df816106d8816106e4956106b1565b80956106ba565b610655565b0190565b90916106ff9260208301925f8185039101526106c5565b90565b61070a6100b2565b3d5f823e3d90fd5b919061072561072084610639565b610645565b91633514d37b919092803b156107eb576107525f809461075d6107466100b2565b9788968795869461069c565b8452600484016106e8565b03925af180156107e6576107ba575b5033906107a261079c7f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610364565b91610364565b916107ab6100b2565b806107b58161018f565b0390a3565b6107d9905f3d81116107df575b6107d18183610673565b8101906106a2565b5f61076c565b503d6107c7565b610702565b610651565b906107fb9291610561565b565b919061081c61081661081160013390610370565b610554565b156103cf565b61082b576108299261084e565b565b6108336100b2565b6315a9bc2760e11b81528061084a6004820161018f565b0390fd5b91908261086b6108656108605f6105d1565b6100cf565b916100cf565b1461087b57610879926109ea565b565b6108836100b2565b6375ffcc2360e01b81528061089a6004820161018f565b0390fd5b60209181520190565b90565b60209181520190565b91906108cd816108c6816108d2956108aa565b80956106ba565b610655565b0190565b906108e192916108b3565b90565b5f80fd5b5f80fd5b5f80fd5b903560016020038236030381121561093157016020813591019167ffffffffffffffff821161092c57600182023603831361092757565b6108e8565b6108e4565b6108ec565b60200190565b91816109479161089e565b9081610958602083028401946108a7565b92835f925b84841061096d5750505050505090565b9091929394956020610999610993838560019503885261098d8b886108f0565b906108d6565b98610936565b94019401929493919061095d565b90916109be9260208301925f81850391015261093c565b90565b5090565b90565b6109d1906109c5565b9052565b91906109e8905f602085019401906109c8565b565b916109fc6109f784610639565b610645565b90630b83249d838293803b15610ad057610a295f8094610a34610a1d6100b2565b9889968795869461069c565b8452600484016109a7565b03925af1918215610acb57610a5192610a9f575b503393926109c1565b91610a9a610a88610a827f586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d93610364565b93610364565b93610a916100b2565b918291826109d5565b0390a3565b610abe905f3d8111610ac4575b610ab68183610673565b8101906106a2565b5f610a48565b503d610aac565b610702565b610651565b90610ae092916107fd565b565b610aee610af39161053b565b61046f565b90565b610b009054610ae2565b90565b33610b1e610b18610b135f610af6565b6100cf565b916100cf565b03610b2e57610b2c90610b9b565b565b610b366100b2565b637bfa4b9f60e01b815280610b4d6004820161018f565b0390fd5b5f1b90565b90610b6260ff91610b51565b9181191691161790565b610b75906103cf565b90565b90565b90610b90610b8b610b9792610b6c565b610b78565b8254610b56565b9055565b610bb05f610bab60018490610370565b610b7b565b610bda7fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610364565b90610be36100b2565b80610bed8161018f565b0390a2565b610bfb90610b03565b565b9190610c1c610c16610c1160013390610370565b610554565b156103cf565b610c2b57610c2992610c4e565b565b610c336100b2565b6315a9bc2760e11b815280610c4a6004820161018f565b0390fd5b919082610c6b610c65610c605f6105d1565b6100cf565b916100cf565b14610c7b57610c7992610c9e565b565b610c836100b2565b6375ffcc2360e01b815280610c9a6004820161018f565b0390fd5b9190610cb1610cac84610639565b610645565b916346e2cc09919092803b15610d7757610cde5f8094610ce9610cd26100b2565b9788968795869461069c565b8452600484016106e8565b03925af18015610d7257610d46575b503390610d2e610d287f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610364565b91610364565b91610d376100b2565b80610d418161018f565b0390a3565b610d65905f3d8111610d6b575b610d5d8183610673565b8101906106a2565b5f610cf8565b503d610d53565b610702565b610651565b90610d879291610bfd565b565b33610da4610d9e610d995f610af6565b6100cf565b916100cf565b03610db457610db290610e15565b565b610dbc6100b2565b637bfa4b9f60e01b815280610dd36004820161018f565b0390fd5b90610de860018060a01b0391610b51565b9181191691161790565b90565b90610e0a610e05610e1192610364565b610df2565b8254610dd7565b9055565b80610e30610e2a610e255f6105d1565b6100cf565b916100cf565b14610e8c57610e3f815f610df5565b3390610e74610e6e7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610364565b91610364565b91610e7d6100b2565b80610e878161018f565b0390a3565b610e946100b2565b6315a9bc2760e11b815280610eab6004820161018f565b0390fd5b610eb890610d89565b565b5f90565b610ed5610eda91610ecd610eba565b506001610370565b610554565b90565b33610ef8610ef2610eed5f610af6565b6100cf565b916100cf565b03610f0857610f0690610f2b565b565b610f106100b2565b637bfa4b9f60e01b815280610f276004820161018f565b0390fd5b610f416001610f3c60018490610370565b610b7b565b610f6b7f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610364565b90610f746100b2565b80610f7e8161018f565b0390a2565b610f8c90610edd565b56fea264697066735822122049721118f28e3d02c64172f5a3d16d756862d56bd6c6304d252e02fb98042c9264736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x0F\xC4a\x02\x1A\x829a\x0F\xC4\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x11\xDE\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01\xCAV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[_\x01\x90V[_\x1B\x90V[\x90a\x01i`\x01\x80`\xA0\x1B\x03\x91a\x01SV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\x87a\x01\x82a\x01\x8C\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x01\x98\x90a\x01sV[\x90V[a\x01\xA4\x90a\x01\x8FV[\x90V[\x90V[\x90a\x01\xBFa\x01\xBAa\x01\xC6\x92a\x01\x9BV[a\x01\xA7V[\x82Ta\x01XV[\x90UV[\x80a\x01\xE5a\x01\xDFa\x01\xDA_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xF6Wa\x01\xF4\x90_a\x01\xAAV[V[a\x01\xFEa\x004V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02\x15`\x04\x82\x01a\x01NV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x057V[a\0\x1D_5a\0\xACV[\x80c\x18\r\xEE6\x14a\0\xA7W\x80c&\xCCEP\x14a\0\xA2W\x80c]\xA9=~\x14a\0\x9DW\x80cn\xBC\xA5\xF6\x14a\0\x98W\x80cu\x82\x9D\xEF\x14a\0\x93W\x80c\xA7\xCDR\xCB\x14a\0\x8EW\x80c\xBA\xBC\xC59\x14a\0\x89W\x80c\xF8Q\xA4@\x14a\0\x84Wc\xF8\xE8n\xCE\x03a\0\x0EWa\x05\x04V[a\x04\xCFV[a\x04+V[a\x03\xF6V[a\x03\x06V[a\x02\xD2V[a\x02\x9FV[a\x02MV[a\x01\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD8\x90a\0\xC4V[\x90V[a\0\xE4\x81a\0\xCFV[\x03a\0\xEBWV[_\x80\xFD[\x90P5\x90a\0\xFC\x82a\0\xDBV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01?W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01:WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x01\x8AWa\x01b\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x85Wa\x01\x81\x92\x01a\x01\nV[\x90\x91V[a\0\xC0V[a\0\xBCV[_\x01\x90V[4a\x01\xC3Wa\x01\xADa\x01\xA76`\x04a\x01IV[\x91a\x07\xF0V[a\x01\xB5a\0\xB2V[\x80a\x01\xBF\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x02W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xFDW` \x01\x92` \x83\x02\x84\x01\x11a\x01\xF8WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x02HWa\x02 \x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02CWa\x02?\x92\x01a\x01\xC8V[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x02|Wa\x02fa\x02`6`\x04a\x02\x07V[\x91a\n\xD5V[a\x02na\0\xB2V[\x80a\x02x\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90` \x82\x82\x03\x12a\x02\x9AWa\x02\x97\x91_\x01a\0\xEFV[\x90V[a\0\xBCV[4a\x02\xCDWa\x02\xB7a\x02\xB26`\x04a\x02\x81V[a\x0B\xF2V[a\x02\xBFa\0\xB2V[\x80a\x02\xC9\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x03\x01Wa\x02\xEBa\x02\xE56`\x04a\x01IV[\x91a\r|V[a\x02\xF3a\0\xB2V[\x80a\x02\xFD\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x034Wa\x03\x1Ea\x03\x196`\x04a\x02\x81V[a\x0E\xAFV[a\x03&a\0\xB2V[\x80a\x030\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90V[a\x03Pa\x03Ka\x03U\x92a\0\xC4V[a\x039V[a\0\xC4V[\x90V[a\x03a\x90a\x03<V[\x90V[a\x03m\x90a\x03XV[\x90V[\x90a\x03z\x90a\x03dV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\xA0\x90`\x08a\x03\xA5\x93\x02a\x03\x86V[a\x03\x8AV[\x90V[\x90a\x03\xB3\x91Ta\x03\x90V[\x90V[a\x03\xCC\x90a\x03\xC7`\x01\x91_\x92a\x03pV[a\x03\xA8V[\x90V[\x15\x15\x90V[a\x03\xDD\x90a\x03\xCFV[\x90RV[\x91\x90a\x03\xF4\x90_` \x85\x01\x94\x01\x90a\x03\xD4V[V[4a\x04&Wa\x04\"a\x04\x11a\x04\x0C6`\x04a\x02\x81V[a\x03\xB6V[a\x04\x19a\0\xB2V[\x91\x82\x91\x82a\x03\xE1V[\x03\x90\xF3[a\0\xB8V[4a\x04[Wa\x04Wa\x04Fa\x04A6`\x04a\x02\x81V[a\x0E\xBEV[a\x04Na\0\xB2V[\x91\x82\x91\x82a\x03\xE1V[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x04jWV[a\0\xBCV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x8A\x90`\x08a\x04\x8F\x93\x02a\x03\x86V[a\x04oV[\x90V[\x90a\x04\x9D\x91Ta\x04zV[\x90V[a\x04\xAA_\x80a\x04\x92V[\x90V[a\x04\xB6\x90a\0\xCFV[\x90RV[\x91\x90a\x04\xCD\x90_` \x85\x01\x94\x01\x90a\x04\xADV[V[4a\x04\xFFWa\x04\xDF6`\x04a\x04`V[a\x04\xFBa\x04\xEAa\x04\xA0V[a\x04\xF2a\0\xB2V[\x91\x82\x91\x82a\x04\xBAV[\x03\x90\xF3[a\0\xB8V[4a\x052Wa\x05\x1Ca\x05\x176`\x04a\x02\x81V[a\x0F\x83V[a\x05$a\0\xB2V[\x80a\x05.\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x1C\x90V[a\x05La\x05Q\x91a\x05;V[a\x03\x8AV[\x90V[a\x05^\x90Ta\x05@V[\x90V[\x91\x90a\x05\x80a\x05za\x05u`\x013\x90a\x03pV[a\x05TV[\x15a\x03\xCFV[a\x05\x8FWa\x05\x8D\x92a\x05\xDDV[V[a\x05\x97a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x05\xAE`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90V[a\x05\xC9a\x05\xC4a\x05\xCE\x92a\x05\xB2V[a\x039V[a\0\xC4V[\x90V[a\x05\xDA\x90a\x05\xB5V[\x90V[\x91\x90\x82a\x05\xFAa\x05\xF4a\x05\xEF_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x06\nWa\x06\x08\x92a\x07\x12V[V[a\x06\x12a\0\xB2V[cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x06)`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x066\x90a\x03<V[\x90V[a\x06B\x90a\x06-V[\x90V[a\x06N\x90a\x03XV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06}\x90a\x06UV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x97W`@RV[a\x06_V[`\xE0\x1B\x90V[_\x91\x03\x12a\x06\xACWV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x06\xDF\x81a\x06\xD8\x81a\x06\xE4\x95a\x06\xB1V[\x80\x95a\x06\xBAV[a\x06UV[\x01\x90V[\x90\x91a\x06\xFF\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x06\xC5V[\x90V[a\x07\na\0\xB2V[=_\x82>=\x90\xFD[\x91\x90a\x07%a\x07 \x84a\x069V[a\x06EV[\x91c5\x14\xD3{\x91\x90\x92\x80;\x15a\x07\xEBWa\x07R_\x80\x94a\x07]a\x07Fa\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\x9CV[\x84R`\x04\x84\x01a\x06\xE8V[\x03\x92Z\xF1\x80\x15a\x07\xE6Wa\x07\xBAW[P3\x90a\x07\xA2a\x07\x9C\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03dV[\x91a\x03dV[\x91a\x07\xABa\0\xB2V[\x80a\x07\xB5\x81a\x01\x8FV[\x03\x90\xA3V[a\x07\xD9\x90_=\x81\x11a\x07\xDFW[a\x07\xD1\x81\x83a\x06sV[\x81\x01\x90a\x06\xA2V[_a\x07lV[P=a\x07\xC7V[a\x07\x02V[a\x06QV[\x90a\x07\xFB\x92\x91a\x05aV[V[\x91\x90a\x08\x1Ca\x08\x16a\x08\x11`\x013\x90a\x03pV[a\x05TV[\x15a\x03\xCFV[a\x08+Wa\x08)\x92a\x08NV[V[a\x083a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x08J`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x08ka\x08ea\x08`_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x08{Wa\x08y\x92a\t\xEAV[V[a\x08\x83a\0\xB2V[cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x08\x9A`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[` \x91\x81R\x01\x90V[\x90V[` \x91\x81R\x01\x90V[\x91\x90a\x08\xCD\x81a\x08\xC6\x81a\x08\xD2\x95a\x08\xAAV[\x80\x95a\x06\xBAV[a\x06UV[\x01\x90V[\x90a\x08\xE1\x92\x91a\x08\xB3V[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905`\x01` \x03\x826\x03\x03\x81\x12\x15a\t1W\x01` \x815\x91\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\t,W`\x01\x82\x026\x03\x83\x13a\t'WV[a\x08\xE8V[a\x08\xE4V[a\x08\xECV[` \x01\x90V[\x91\x81a\tG\x91a\x08\x9EV[\x90\x81a\tX` \x83\x02\x84\x01\x94a\x08\xA7V[\x92\x83_\x92[\x84\x84\x10a\tmWPPPPPP\x90V[\x90\x91\x92\x93\x94\x95` a\t\x99a\t\x93\x83\x85`\x01\x95\x03\x88Ra\t\x8D\x8B\x88a\x08\xF0V[\x90a\x08\xD6V[\x98a\t6V[\x94\x01\x94\x01\x92\x94\x93\x91\x90a\t]V[\x90\x91a\t\xBE\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\t<V[\x90V[P\x90V[\x90V[a\t\xD1\x90a\t\xC5V[\x90RV[\x91\x90a\t\xE8\x90_` \x85\x01\x94\x01\x90a\t\xC8V[V[\x91a\t\xFCa\t\xF7\x84a\x069V[a\x06EV[\x90c\x0B\x83$\x9D\x83\x82\x93\x80;\x15a\n\xD0Wa\n)_\x80\x94a\n4a\n\x1Da\0\xB2V[\x98\x89\x96\x87\x95\x86\x94a\x06\x9CV[\x84R`\x04\x84\x01a\t\xA7V[\x03\x92Z\xF1\x91\x82\x15a\n\xCBWa\nQ\x92a\n\x9FW[P3\x93\x92a\t\xC1V[\x91a\n\x9Aa\n\x88a\n\x82\x7FXj\xC7,\xD4z\xC1\x0B\xE2\xC6B(\xBA\xC4\x8F\xEATPh20[\x9A\xB0\xFA\x077N\xD7\x9CW\r\x93a\x03dV[\x93a\x03dV[\x93a\n\x91a\0\xB2V[\x91\x82\x91\x82a\t\xD5V[\x03\x90\xA3V[a\n\xBE\x90_=\x81\x11a\n\xC4W[a\n\xB6\x81\x83a\x06sV[\x81\x01\x90a\x06\xA2V[_a\nHV[P=a\n\xACV[a\x07\x02V[a\x06QV[\x90a\n\xE0\x92\x91a\x07\xFDV[V[a\n\xEEa\n\xF3\x91a\x05;V[a\x04oV[\x90V[a\x0B\0\x90Ta\n\xE2V[\x90V[3a\x0B\x1Ea\x0B\x18a\x0B\x13_a\n\xF6V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0B.Wa\x0B,\x90a\x0B\x9BV[V[a\x0B6a\0\xB2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0BM`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0Bb`\xFF\x91a\x0BQV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Bu\x90a\x03\xCFV[\x90V[\x90V[\x90a\x0B\x90a\x0B\x8Ba\x0B\x97\x92a\x0BlV[a\x0BxV[\x82Ta\x0BVV[\x90UV[a\x0B\xB0_a\x0B\xAB`\x01\x84\x90a\x03pV[a\x0B{V[a\x0B\xDA\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x03dV[\x90a\x0B\xE3a\0\xB2V[\x80a\x0B\xED\x81a\x01\x8FV[\x03\x90\xA2V[a\x0B\xFB\x90a\x0B\x03V[V[\x91\x90a\x0C\x1Ca\x0C\x16a\x0C\x11`\x013\x90a\x03pV[a\x05TV[\x15a\x03\xCFV[a\x0C+Wa\x0C)\x92a\x0CNV[V[a\x0C3a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0CJ`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x0Cka\x0Cea\x0C`_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0C{Wa\x0Cy\x92a\x0C\x9EV[V[a\x0C\x83a\0\xB2V[cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0C\x9A`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90a\x0C\xB1a\x0C\xAC\x84a\x069V[a\x06EV[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\rwWa\x0C\xDE_\x80\x94a\x0C\xE9a\x0C\xD2a\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\x9CV[\x84R`\x04\x84\x01a\x06\xE8V[\x03\x92Z\xF1\x80\x15a\rrWa\rFW[P3\x90a\r.a\r(\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03dV[\x91a\x03dV[\x91a\r7a\0\xB2V[\x80a\rA\x81a\x01\x8FV[\x03\x90\xA3V[a\re\x90_=\x81\x11a\rkW[a\r]\x81\x83a\x06sV[\x81\x01\x90a\x06\xA2V[_a\x0C\xF8V[P=a\rSV[a\x07\x02V[a\x06QV[\x90a\r\x87\x92\x91a\x0B\xFDV[V[3a\r\xA4a\r\x9Ea\r\x99_a\n\xF6V[a\0\xCFV[\x91a\0\xCFV[\x03a\r\xB4Wa\r\xB2\x90a\x0E\x15V[V[a\r\xBCa\0\xB2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\r\xD3`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90a\r\xE8`\x01\x80`\xA0\x1B\x03\x91a\x0BQV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0E\na\x0E\x05a\x0E\x11\x92a\x03dV[a\r\xF2V[\x82Ta\r\xD7V[\x90UV[\x80a\x0E0a\x0E*a\x0E%_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0E\x8CWa\x0E?\x81_a\r\xF5V[3\x90a\x0Eta\x0En\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x03dV[\x91a\x03dV[\x91a\x0E}a\0\xB2V[\x80a\x0E\x87\x81a\x01\x8FV[\x03\x90\xA3V[a\x0E\x94a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0E\xAB`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0E\xB8\x90a\r\x89V[V[_\x90V[a\x0E\xD5a\x0E\xDA\x91a\x0E\xCDa\x0E\xBAV[P`\x01a\x03pV[a\x05TV[\x90V[3a\x0E\xF8a\x0E\xF2a\x0E\xED_a\n\xF6V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0F\x08Wa\x0F\x06\x90a\x0F+V[V[a\x0F\x10a\0\xB2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0F'`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0FA`\x01a\x0F<`\x01\x84\x90a\x03pV[a\x0B{V[a\x0Fk\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x03dV[\x90a\x0Fta\0\xB2V[\x80a\x0F~\x81a\x01\x8FV[\x03\x90\xA2V[a\x0F\x8C\x90a\x0E\xDDV[V\xFE\xA2dipfsX\"\x12 Ir\x11\x18\xF2\x8E=\x02\xC6Ar\xF5\xA3\xD1muhb\xD5k\xD6\xC60M%.\x02\xFB\x98\x04,\x92dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610537565b61001d5f356100ac565b8063180dee36146100a757806326cc4550146100a25780635da93d7e1461009d5780636ebca5f61461009857806375829def14610093578063a7cd52cb1461008e578063babcc53914610089578063f851a440146100845763f8e86ece0361000e57610504565b6104cf565b61042b565b6103f6565b610306565b6102d2565b61029f565b61024d565b610194565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100d8906100c4565b90565b6100e4816100cf565b036100eb57565b5f80fd5b905035906100fc826100db565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101445781359167ffffffffffffffff831161013f57602001926001830284011161013a57565b610106565b610102565b6100fe565b91909160408184031261018a57610162835f83016100ef565b92602082013567ffffffffffffffff811161018557610181920161010a565b9091565b6100c0565b6100bc565b5f0190565b346101c3576101ad6101a7366004610149565b916107f0565b6101b56100b2565b806101bf8161018f565b0390f35b6100b8565b909182601f830112156102025781359167ffffffffffffffff83116101fd5760200192602083028401116101f857565b610106565b610102565b6100fe565b91909160408184031261024857610220835f83016100ef565b92602082013567ffffffffffffffff81116102435761023f92016101c8565b9091565b6100c0565b6100bc565b3461027c57610266610260366004610207565b91610ad5565b61026e6100b2565b806102788161018f565b0390f35b6100b8565b9060208282031261029a57610297915f016100ef565b90565b6100bc565b346102cd576102b76102b2366004610281565b610bf2565b6102bf6100b2565b806102c98161018f565b0390f35b6100b8565b34610301576102eb6102e5366004610149565b91610d7c565b6102f36100b2565b806102fd8161018f565b0390f35b6100b8565b346103345761031e610319366004610281565b610eaf565b6103266100b2565b806103308161018f565b0390f35b6100b8565b90565b61035061034b610355926100c4565b610339565b6100c4565b90565b6103619061033c565b90565b61036d90610358565b90565b9061037a90610364565b5f5260205260405f2090565b1c90565b60ff1690565b6103a09060086103a59302610386565b61038a565b90565b906103b39154610390565b90565b6103cc906103c76001915f92610370565b6103a8565b90565b151590565b6103dd906103cf565b9052565b91906103f4905f602085019401906103d4565b565b346104265761042261041161040c366004610281565b6103b6565b6104196100b2565b918291826103e1565b0390f35b6100b8565b3461045b57610457610446610441366004610281565b610ebe565b61044e6100b2565b918291826103e1565b0390f35b6100b8565b5f91031261046a57565b6100bc565b60018060a01b031690565b61048a90600861048f9302610386565b61046f565b90565b9061049d915461047a565b90565b6104aa5f80610492565b90565b6104b6906100cf565b9052565b91906104cd905f602085019401906104ad565b565b346104ff576104df366004610460565b6104fb6104ea6104a0565b6104f26100b2565b918291826104ba565b0390f35b6100b8565b346105325761051c610517366004610281565b610f83565b6105246100b2565b8061052e8161018f565b0390f35b6100b8565b5f80fd5b5f1c90565b61054c6105519161053b565b61038a565b90565b61055e9054610540565b90565b919061058061057a61057560013390610370565b610554565b156103cf565b61058f5761058d926105dd565b565b6105976100b2565b6315a9bc2760e11b8152806105ae6004820161018f565b0390fd5b90565b6105c96105c46105ce926105b2565b610339565b6100c4565b90565b6105da906105b5565b90565b9190826105fa6105f46105ef5f6105d1565b6100cf565b916100cf565b1461060a5761060892610712565b565b6106126100b2565b6375ffcc2360e01b8152806106296004820161018f565b0390fd5b6106369061033c565b90565b6106429061062d565b90565b61064e90610358565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061067d90610655565b810190811067ffffffffffffffff82111761069757604052565b61065f565b60e01b90565b5f9103126106ac57565b6100bc565b60209181520190565b90825f939282370152565b91906106df816106d8816106e4956106b1565b80956106ba565b610655565b0190565b90916106ff9260208301925f8185039101526106c5565b90565b61070a6100b2565b3d5f823e3d90fd5b919061072561072084610639565b610645565b91633514d37b919092803b156107eb576107525f809461075d6107466100b2565b9788968795869461069c565b8452600484016106e8565b03925af180156107e6576107ba575b5033906107a261079c7f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610364565b91610364565b916107ab6100b2565b806107b58161018f565b0390a3565b6107d9905f3d81116107df575b6107d18183610673565b8101906106a2565b5f61076c565b503d6107c7565b610702565b610651565b906107fb9291610561565b565b919061081c61081661081160013390610370565b610554565b156103cf565b61082b576108299261084e565b565b6108336100b2565b6315a9bc2760e11b81528061084a6004820161018f565b0390fd5b91908261086b6108656108605f6105d1565b6100cf565b916100cf565b1461087b57610879926109ea565b565b6108836100b2565b6375ffcc2360e01b81528061089a6004820161018f565b0390fd5b60209181520190565b90565b60209181520190565b91906108cd816108c6816108d2956108aa565b80956106ba565b610655565b0190565b906108e192916108b3565b90565b5f80fd5b5f80fd5b5f80fd5b903560016020038236030381121561093157016020813591019167ffffffffffffffff821161092c57600182023603831361092757565b6108e8565b6108e4565b6108ec565b60200190565b91816109479161089e565b9081610958602083028401946108a7565b92835f925b84841061096d5750505050505090565b9091929394956020610999610993838560019503885261098d8b886108f0565b906108d6565b98610936565b94019401929493919061095d565b90916109be9260208301925f81850391015261093c565b90565b5090565b90565b6109d1906109c5565b9052565b91906109e8905f602085019401906109c8565b565b916109fc6109f784610639565b610645565b90630b83249d838293803b15610ad057610a295f8094610a34610a1d6100b2565b9889968795869461069c565b8452600484016109a7565b03925af1918215610acb57610a5192610a9f575b503393926109c1565b91610a9a610a88610a827f586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d93610364565b93610364565b93610a916100b2565b918291826109d5565b0390a3565b610abe905f3d8111610ac4575b610ab68183610673565b8101906106a2565b5f610a48565b503d610aac565b610702565b610651565b90610ae092916107fd565b565b610aee610af39161053b565b61046f565b90565b610b009054610ae2565b90565b33610b1e610b18610b135f610af6565b6100cf565b916100cf565b03610b2e57610b2c90610b9b565b565b610b366100b2565b637bfa4b9f60e01b815280610b4d6004820161018f565b0390fd5b5f1b90565b90610b6260ff91610b51565b9181191691161790565b610b75906103cf565b90565b90565b90610b90610b8b610b9792610b6c565b610b78565b8254610b56565b9055565b610bb05f610bab60018490610370565b610b7b565b610bda7fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610364565b90610be36100b2565b80610bed8161018f565b0390a2565b610bfb90610b03565b565b9190610c1c610c16610c1160013390610370565b610554565b156103cf565b610c2b57610c2992610c4e565b565b610c336100b2565b6315a9bc2760e11b815280610c4a6004820161018f565b0390fd5b919082610c6b610c65610c605f6105d1565b6100cf565b916100cf565b14610c7b57610c7992610c9e565b565b610c836100b2565b6375ffcc2360e01b815280610c9a6004820161018f565b0390fd5b9190610cb1610cac84610639565b610645565b916346e2cc09919092803b15610d7757610cde5f8094610ce9610cd26100b2565b9788968795869461069c565b8452600484016106e8565b03925af18015610d7257610d46575b503390610d2e610d287f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610364565b91610364565b91610d376100b2565b80610d418161018f565b0390a3565b610d65905f3d8111610d6b575b610d5d8183610673565b8101906106a2565b5f610cf8565b503d610d53565b610702565b610651565b90610d879291610bfd565b565b33610da4610d9e610d995f610af6565b6100cf565b916100cf565b03610db457610db290610e15565b565b610dbc6100b2565b637bfa4b9f60e01b815280610dd36004820161018f565b0390fd5b90610de860018060a01b0391610b51565b9181191691161790565b90565b90610e0a610e05610e1192610364565b610df2565b8254610dd7565b9055565b80610e30610e2a610e255f6105d1565b6100cf565b916100cf565b14610e8c57610e3f815f610df5565b3390610e74610e6e7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610364565b91610364565b91610e7d6100b2565b80610e878161018f565b0390a3565b610e946100b2565b6315a9bc2760e11b815280610eab6004820161018f565b0390fd5b610eb890610d89565b565b5f90565b610ed5610eda91610ecd610eba565b506001610370565b610554565b90565b33610ef8610ef2610eed5f610af6565b6100cf565b916100cf565b03610f0857610f0690610f2b565b565b610f106100b2565b637bfa4b9f60e01b815280610f276004820161018f565b0390fd5b610f416001610f3c60018490610370565b610b7b565b610f6b7f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610364565b90610f746100b2565b80610f7e8161018f565b0390a2565b610f8c90610edd565b56fea264697066735822122049721118f28e3d02c64172f5a3d16d756862d56bd6c6304d252e02fb98042c9264736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x057V[a\0\x1D_5a\0\xACV[\x80c\x18\r\xEE6\x14a\0\xA7W\x80c&\xCCEP\x14a\0\xA2W\x80c]\xA9=~\x14a\0\x9DW\x80cn\xBC\xA5\xF6\x14a\0\x98W\x80cu\x82\x9D\xEF\x14a\0\x93W\x80c\xA7\xCDR\xCB\x14a\0\x8EW\x80c\xBA\xBC\xC59\x14a\0\x89W\x80c\xF8Q\xA4@\x14a\0\x84Wc\xF8\xE8n\xCE\x03a\0\x0EWa\x05\x04V[a\x04\xCFV[a\x04+V[a\x03\xF6V[a\x03\x06V[a\x02\xD2V[a\x02\x9FV[a\x02MV[a\x01\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD8\x90a\0\xC4V[\x90V[a\0\xE4\x81a\0\xCFV[\x03a\0\xEBWV[_\x80\xFD[\x90P5\x90a\0\xFC\x82a\0\xDBV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01?W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01:WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x01\x8AWa\x01b\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x85Wa\x01\x81\x92\x01a\x01\nV[\x90\x91V[a\0\xC0V[a\0\xBCV[_\x01\x90V[4a\x01\xC3Wa\x01\xADa\x01\xA76`\x04a\x01IV[\x91a\x07\xF0V[a\x01\xB5a\0\xB2V[\x80a\x01\xBF\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x02W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xFDW` \x01\x92` \x83\x02\x84\x01\x11a\x01\xF8WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x02HWa\x02 \x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02CWa\x02?\x92\x01a\x01\xC8V[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x02|Wa\x02fa\x02`6`\x04a\x02\x07V[\x91a\n\xD5V[a\x02na\0\xB2V[\x80a\x02x\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90` \x82\x82\x03\x12a\x02\x9AWa\x02\x97\x91_\x01a\0\xEFV[\x90V[a\0\xBCV[4a\x02\xCDWa\x02\xB7a\x02\xB26`\x04a\x02\x81V[a\x0B\xF2V[a\x02\xBFa\0\xB2V[\x80a\x02\xC9\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x03\x01Wa\x02\xEBa\x02\xE56`\x04a\x01IV[\x91a\r|V[a\x02\xF3a\0\xB2V[\x80a\x02\xFD\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x034Wa\x03\x1Ea\x03\x196`\x04a\x02\x81V[a\x0E\xAFV[a\x03&a\0\xB2V[\x80a\x030\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90V[a\x03Pa\x03Ka\x03U\x92a\0\xC4V[a\x039V[a\0\xC4V[\x90V[a\x03a\x90a\x03<V[\x90V[a\x03m\x90a\x03XV[\x90V[\x90a\x03z\x90a\x03dV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\xA0\x90`\x08a\x03\xA5\x93\x02a\x03\x86V[a\x03\x8AV[\x90V[\x90a\x03\xB3\x91Ta\x03\x90V[\x90V[a\x03\xCC\x90a\x03\xC7`\x01\x91_\x92a\x03pV[a\x03\xA8V[\x90V[\x15\x15\x90V[a\x03\xDD\x90a\x03\xCFV[\x90RV[\x91\x90a\x03\xF4\x90_` \x85\x01\x94\x01\x90a\x03\xD4V[V[4a\x04&Wa\x04\"a\x04\x11a\x04\x0C6`\x04a\x02\x81V[a\x03\xB6V[a\x04\x19a\0\xB2V[\x91\x82\x91\x82a\x03\xE1V[\x03\x90\xF3[a\0\xB8V[4a\x04[Wa\x04Wa\x04Fa\x04A6`\x04a\x02\x81V[a\x0E\xBEV[a\x04Na\0\xB2V[\x91\x82\x91\x82a\x03\xE1V[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x04jWV[a\0\xBCV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x8A\x90`\x08a\x04\x8F\x93\x02a\x03\x86V[a\x04oV[\x90V[\x90a\x04\x9D\x91Ta\x04zV[\x90V[a\x04\xAA_\x80a\x04\x92V[\x90V[a\x04\xB6\x90a\0\xCFV[\x90RV[\x91\x90a\x04\xCD\x90_` \x85\x01\x94\x01\x90a\x04\xADV[V[4a\x04\xFFWa\x04\xDF6`\x04a\x04`V[a\x04\xFBa\x04\xEAa\x04\xA0V[a\x04\xF2a\0\xB2V[\x91\x82\x91\x82a\x04\xBAV[\x03\x90\xF3[a\0\xB8V[4a\x052Wa\x05\x1Ca\x05\x176`\x04a\x02\x81V[a\x0F\x83V[a\x05$a\0\xB2V[\x80a\x05.\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x1C\x90V[a\x05La\x05Q\x91a\x05;V[a\x03\x8AV[\x90V[a\x05^\x90Ta\x05@V[\x90V[\x91\x90a\x05\x80a\x05za\x05u`\x013\x90a\x03pV[a\x05TV[\x15a\x03\xCFV[a\x05\x8FWa\x05\x8D\x92a\x05\xDDV[V[a\x05\x97a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x05\xAE`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90V[a\x05\xC9a\x05\xC4a\x05\xCE\x92a\x05\xB2V[a\x039V[a\0\xC4V[\x90V[a\x05\xDA\x90a\x05\xB5V[\x90V[\x91\x90\x82a\x05\xFAa\x05\xF4a\x05\xEF_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x06\nWa\x06\x08\x92a\x07\x12V[V[a\x06\x12a\0\xB2V[cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x06)`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x066\x90a\x03<V[\x90V[a\x06B\x90a\x06-V[\x90V[a\x06N\x90a\x03XV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06}\x90a\x06UV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x97W`@RV[a\x06_V[`\xE0\x1B\x90V[_\x91\x03\x12a\x06\xACWV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x06\xDF\x81a\x06\xD8\x81a\x06\xE4\x95a\x06\xB1V[\x80\x95a\x06\xBAV[a\x06UV[\x01\x90V[\x90\x91a\x06\xFF\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x06\xC5V[\x90V[a\x07\na\0\xB2V[=_\x82>=\x90\xFD[\x91\x90a\x07%a\x07 \x84a\x069V[a\x06EV[\x91c5\x14\xD3{\x91\x90\x92\x80;\x15a\x07\xEBWa\x07R_\x80\x94a\x07]a\x07Fa\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\x9CV[\x84R`\x04\x84\x01a\x06\xE8V[\x03\x92Z\xF1\x80\x15a\x07\xE6Wa\x07\xBAW[P3\x90a\x07\xA2a\x07\x9C\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03dV[\x91a\x03dV[\x91a\x07\xABa\0\xB2V[\x80a\x07\xB5\x81a\x01\x8FV[\x03\x90\xA3V[a\x07\xD9\x90_=\x81\x11a\x07\xDFW[a\x07\xD1\x81\x83a\x06sV[\x81\x01\x90a\x06\xA2V[_a\x07lV[P=a\x07\xC7V[a\x07\x02V[a\x06QV[\x90a\x07\xFB\x92\x91a\x05aV[V[\x91\x90a\x08\x1Ca\x08\x16a\x08\x11`\x013\x90a\x03pV[a\x05TV[\x15a\x03\xCFV[a\x08+Wa\x08)\x92a\x08NV[V[a\x083a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x08J`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x08ka\x08ea\x08`_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x08{Wa\x08y\x92a\t\xEAV[V[a\x08\x83a\0\xB2V[cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x08\x9A`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[` \x91\x81R\x01\x90V[\x90V[` \x91\x81R\x01\x90V[\x91\x90a\x08\xCD\x81a\x08\xC6\x81a\x08\xD2\x95a\x08\xAAV[\x80\x95a\x06\xBAV[a\x06UV[\x01\x90V[\x90a\x08\xE1\x92\x91a\x08\xB3V[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905`\x01` \x03\x826\x03\x03\x81\x12\x15a\t1W\x01` \x815\x91\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\t,W`\x01\x82\x026\x03\x83\x13a\t'WV[a\x08\xE8V[a\x08\xE4V[a\x08\xECV[` \x01\x90V[\x91\x81a\tG\x91a\x08\x9EV[\x90\x81a\tX` \x83\x02\x84\x01\x94a\x08\xA7V[\x92\x83_\x92[\x84\x84\x10a\tmWPPPPPP\x90V[\x90\x91\x92\x93\x94\x95` a\t\x99a\t\x93\x83\x85`\x01\x95\x03\x88Ra\t\x8D\x8B\x88a\x08\xF0V[\x90a\x08\xD6V[\x98a\t6V[\x94\x01\x94\x01\x92\x94\x93\x91\x90a\t]V[\x90\x91a\t\xBE\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\t<V[\x90V[P\x90V[\x90V[a\t\xD1\x90a\t\xC5V[\x90RV[\x91\x90a\t\xE8\x90_` \x85\x01\x94\x01\x90a\t\xC8V[V[\x91a\t\xFCa\t\xF7\x84a\x069V[a\x06EV[\x90c\x0B\x83$\x9D\x83\x82\x93\x80;\x15a\n\xD0Wa\n)_\x80\x94a\n4a\n\x1Da\0\xB2V[\x98\x89\x96\x87\x95\x86\x94a\x06\x9CV[\x84R`\x04\x84\x01a\t\xA7V[\x03\x92Z\xF1\x91\x82\x15a\n\xCBWa\nQ\x92a\n\x9FW[P3\x93\x92a\t\xC1V[\x91a\n\x9Aa\n\x88a\n\x82\x7FXj\xC7,\xD4z\xC1\x0B\xE2\xC6B(\xBA\xC4\x8F\xEATPh20[\x9A\xB0\xFA\x077N\xD7\x9CW\r\x93a\x03dV[\x93a\x03dV[\x93a\n\x91a\0\xB2V[\x91\x82\x91\x82a\t\xD5V[\x03\x90\xA3V[a\n\xBE\x90_=\x81\x11a\n\xC4W[a\n\xB6\x81\x83a\x06sV[\x81\x01\x90a\x06\xA2V[_a\nHV[P=a\n\xACV[a\x07\x02V[a\x06QV[\x90a\n\xE0\x92\x91a\x07\xFDV[V[a\n\xEEa\n\xF3\x91a\x05;V[a\x04oV[\x90V[a\x0B\0\x90Ta\n\xE2V[\x90V[3a\x0B\x1Ea\x0B\x18a\x0B\x13_a\n\xF6V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0B.Wa\x0B,\x90a\x0B\x9BV[V[a\x0B6a\0\xB2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0BM`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0Bb`\xFF\x91a\x0BQV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Bu\x90a\x03\xCFV[\x90V[\x90V[\x90a\x0B\x90a\x0B\x8Ba\x0B\x97\x92a\x0BlV[a\x0BxV[\x82Ta\x0BVV[\x90UV[a\x0B\xB0_a\x0B\xAB`\x01\x84\x90a\x03pV[a\x0B{V[a\x0B\xDA\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x03dV[\x90a\x0B\xE3a\0\xB2V[\x80a\x0B\xED\x81a\x01\x8FV[\x03\x90\xA2V[a\x0B\xFB\x90a\x0B\x03V[V[\x91\x90a\x0C\x1Ca\x0C\x16a\x0C\x11`\x013\x90a\x03pV[a\x05TV[\x15a\x03\xCFV[a\x0C+Wa\x0C)\x92a\x0CNV[V[a\x0C3a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0CJ`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x0Cka\x0Cea\x0C`_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0C{Wa\x0Cy\x92a\x0C\x9EV[V[a\x0C\x83a\0\xB2V[cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0C\x9A`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90a\x0C\xB1a\x0C\xAC\x84a\x069V[a\x06EV[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\rwWa\x0C\xDE_\x80\x94a\x0C\xE9a\x0C\xD2a\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\x9CV[\x84R`\x04\x84\x01a\x06\xE8V[\x03\x92Z\xF1\x80\x15a\rrWa\rFW[P3\x90a\r.a\r(\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03dV[\x91a\x03dV[\x91a\r7a\0\xB2V[\x80a\rA\x81a\x01\x8FV[\x03\x90\xA3V[a\re\x90_=\x81\x11a\rkW[a\r]\x81\x83a\x06sV[\x81\x01\x90a\x06\xA2V[_a\x0C\xF8V[P=a\rSV[a\x07\x02V[a\x06QV[\x90a\r\x87\x92\x91a\x0B\xFDV[V[3a\r\xA4a\r\x9Ea\r\x99_a\n\xF6V[a\0\xCFV[\x91a\0\xCFV[\x03a\r\xB4Wa\r\xB2\x90a\x0E\x15V[V[a\r\xBCa\0\xB2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\r\xD3`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90a\r\xE8`\x01\x80`\xA0\x1B\x03\x91a\x0BQV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0E\na\x0E\x05a\x0E\x11\x92a\x03dV[a\r\xF2V[\x82Ta\r\xD7V[\x90UV[\x80a\x0E0a\x0E*a\x0E%_a\x05\xD1V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0E\x8CWa\x0E?\x81_a\r\xF5V[3\x90a\x0Eta\x0En\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x03dV[\x91a\x03dV[\x91a\x0E}a\0\xB2V[\x80a\x0E\x87\x81a\x01\x8FV[\x03\x90\xA3V[a\x0E\x94a\0\xB2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0E\xAB`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0E\xB8\x90a\r\x89V[V[_\x90V[a\x0E\xD5a\x0E\xDA\x91a\x0E\xCDa\x0E\xBAV[P`\x01a\x03pV[a\x05TV[\x90V[3a\x0E\xF8a\x0E\xF2a\x0E\xED_a\n\xF6V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0F\x08Wa\x0F\x06\x90a\x0F+V[V[a\x0F\x10a\0\xB2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0F'`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0FA`\x01a\x0F<`\x01\x84\x90a\x03pV[a\x0B{V[a\x0Fk\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x03dV[\x90a\x0Fta\0\xB2V[\x80a\x0F~\x81a\x01\x8FV[\x03\x90\xA2V[a\x0F\x8C\x90a\x0E\xDDV[V\xFE\xA2dipfsX\"\x12 Ir\x11\x18\xF2\x8E=\x02\xC6Ar\xF5\xA3\xD1muhb\xD5k\xD6\xC60M%.\x02\xFB\x98\x04,\x92dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
```solidity
error NotAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroSequencerAddressNotAllowed()` and selector `0x75ffcc23`.
```solidity
error ZeroSequencerAddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroSequencerAddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroSequencerAddressNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: ZeroSequencerAddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ZeroSequencerAddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroSequencerAddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroSequencerAddressNotAllowed()";
            const SELECTOR: [u8; 4] = [117u8, 255u8, 204u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminTransferred(address,address)` and selector `0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6`.
```solidity
event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminTransferred {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: topics.1,
                    newAdmin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousAdmin.clone(),
                    self.newAdmin.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousAdmin,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAdmin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address)` and selector `0x19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f`.
```solidity
event UserAdded(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserRemoved(address)` and selector `0xe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d`.
```solidity
event UserRemoved(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserRemoved {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperBulkTransactionsSent(address,address,uint256)` and selector `0x586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d`.
```solidity
event WalletPoolWrapperBulkTransactionsSent(address indexed from, address indexed metabasedSequencerChain, uint256 count);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperBulkTransactionsSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub metabasedSequencerChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperBulkTransactionsSent {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperBulkTransactionsSent(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                88u8,
                106u8,
                199u8,
                44u8,
                212u8,
                122u8,
                193u8,
                11u8,
                226u8,
                198u8,
                66u8,
                40u8,
                186u8,
                196u8,
                143u8,
                234u8,
                84u8,
                80u8,
                104u8,
                50u8,
                48u8,
                91u8,
                154u8,
                176u8,
                250u8,
                7u8,
                55u8,
                78u8,
                215u8,
                156u8,
                87u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    metabasedSequencerChain: topics.2,
                    count: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.count),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.metabasedSequencerChain.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.metabasedSequencerChain,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for WalletPoolWrapperBulkTransactionsSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperBulkTransactionsSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperBulkTransactionsSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperTransactionSent(address,address)` and selector `0x806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e252`.
```solidity
event WalletPoolWrapperTransactionSent(address indexed from, address indexed metabasedSequencerChain);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperTransactionSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub metabasedSequencerChain: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperTransactionSent {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperTransactionSent(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                128u8,
                108u8,
                134u8,
                201u8,
                217u8,
                99u8,
                125u8,
                182u8,
                80u8,
                254u8,
                67u8,
                52u8,
                144u8,
                113u8,
                70u8,
                177u8,
                40u8,
                90u8,
                177u8,
                38u8,
                71u8,
                105u8,
                104u8,
                189u8,
                129u8,
                22u8,
                219u8,
                46u8,
                201u8,
                84u8,
                226u8,
                82u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    metabasedSequencerChain: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.metabasedSequencerChain.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.metabasedSequencerChain,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperTransactionSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperTransactionSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperTransactionSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addToAllowlist(address)` and selector `0xf8e86ece`.
```solidity
function addToAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addToAllowlist(address)`](addToAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToAllowlist(address)";
            const SELECTOR: [u8; 4] = [248u8, 232u8, 110u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowlist(address)` and selector `0xa7cd52cb`.
```solidity
function allowlist(address user) external view returns (bool isAllowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowlist(address)`](allowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistReturn {
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistReturn) -> Self {
                    (value.isAllowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isAllowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowlistReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowlist(address)";
            const SELECTOR: [u8; 4] = [167u8, 205u8, 82u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(address,bytes[])` and selector `0x26cc4550`.
```solidity
function processBulkTransactions(address _metabasedSequencerChain, bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub _metabasedSequencerChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(address,bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value._metabasedSequencerChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _metabasedSequencerChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(address,bytes[])";
            const SELECTOR: [u8; 4] = [38u8, 204u8, 69u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._metabasedSequencerChain,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(address,bytes)` and selector `0x6ebca5f6`.
```solidity
function processTransaction(address _metabasedSequencerChain, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub _metabasedSequencerChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(address,bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value._metabasedSequencerChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _metabasedSequencerChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(address,bytes)";
            const SELECTOR: [u8; 4] = [110u8, 188u8, 165u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._metabasedSequencerChain,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(address,bytes)` and selector `0x180dee36`.
```solidity
function processTransactionRaw(address _metabasedSequencerChain, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub _metabasedSequencerChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(address,bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value._metabasedSequencerChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _metabasedSequencerChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(address,bytes)";
            const SELECTOR: [u8; 4] = [24u8, 13u8, 238u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._metabasedSequencerChain,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromAllowlist(address)` and selector `0x5da93d7e`.
```solidity
function removeFromAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeFromAllowlist(address)`](removeFromAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromAllowlist(address)";
            const SELECTOR: [u8; 4] = [93u8, 169u8, 61u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferAdmin(address)` and selector `0x75829def`.
```solidity
function transferAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminCall {
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferAdmin(address)`](transferAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferAdmin(address)";
            const SELECTOR: [u8; 4] = [117u8, 130u8, 157u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`WalletPoolWrapperModule`](self) function calls.
    pub enum WalletPoolWrapperModuleCalls {
        #[allow(missing_docs)]
        addToAllowlist(addToAllowlistCall),
        #[allow(missing_docs)]
        admin(adminCall),
        #[allow(missing_docs)]
        allowlist(allowlistCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        removeFromAllowlist(removeFromAllowlistCall),
        #[allow(missing_docs)]
        transferAdmin(transferAdminCall),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [24u8, 13u8, 238u8, 54u8],
            [38u8, 204u8, 69u8, 80u8],
            [93u8, 169u8, 61u8, 126u8],
            [110u8, 188u8, 165u8, 246u8],
            [117u8, 130u8, 157u8, 239u8],
            [167u8, 205u8, 82u8, 203u8],
            [186u8, 188u8, 197u8, 57u8],
            [248u8, 81u8, 164u8, 64u8],
            [248u8, 232u8, 110u8, 206u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleCalls {
        const NAME: &'static str = "WalletPoolWrapperModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToAllowlist(_) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allowlist(_) => {
                    <allowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromAllowlist(_) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferAdmin(_) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls>] = &[
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransactionRaw)
                    }
                    processTransactionRaw
                },
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processBulkTransactions)
                    }
                    processBulkTransactions
                },
                {
                    fn removeFromAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::removeFromAllowlist)
                    }
                    removeFromAllowlist
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn transferAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <transferAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::transferAdmin)
                    }
                    transferAdmin
                },
                {
                    fn allowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <allowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::allowlist)
                    }
                    allowlist
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::admin)
                    }
                    admin
                },
                {
                    fn addToAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <addToAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::addToAllowlist)
                    }
                    addToAllowlist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) custom errors.
    pub enum WalletPoolWrapperModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        NotAdmin(NotAdmin),
        #[allow(missing_docs)]
        ZeroSequencerAddressNotAllowed(ZeroSequencerAddressNotAllowed),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [117u8, 255u8, 204u8, 35u8],
            [123u8, 250u8, 75u8, 159u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleErrors {
        const NAME: &'static str = "WalletPoolWrapperModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
                Self::ZeroSequencerAddressNotAllowed(_) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::AddressNotAllowed)
                    }
                    AddressNotAllowed
                },
                {
                    fn ZeroSequencerAddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                WalletPoolWrapperModuleErrors::ZeroSequencerAddressNotAllowed,
                            )
                    }
                    ZeroSequencerAddressNotAllowed
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::NotAdmin)
                    }
                    NotAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroSequencerAddressNotAllowed(inner) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ZeroSequencerAddressNotAllowed(inner) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) events.
    pub enum WalletPoolWrapperModuleEvents {
        #[allow(missing_docs)]
        AdminTransferred(AdminTransferred),
        #[allow(missing_docs)]
        UserAdded(UserAdded),
        #[allow(missing_docs)]
        UserRemoved(UserRemoved),
        #[allow(missing_docs)]
        WalletPoolWrapperBulkTransactionsSent(WalletPoolWrapperBulkTransactionsSent),
        #[allow(missing_docs)]
        WalletPoolWrapperTransactionSent(WalletPoolWrapperTransactionSent),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ],
            [
                88u8,
                106u8,
                199u8,
                44u8,
                212u8,
                122u8,
                193u8,
                11u8,
                226u8,
                198u8,
                66u8,
                40u8,
                186u8,
                196u8,
                143u8,
                234u8,
                84u8,
                80u8,
                104u8,
                50u8,
                48u8,
                91u8,
                154u8,
                176u8,
                250u8,
                7u8,
                55u8,
                78u8,
                215u8,
                156u8,
                87u8,
                13u8,
            ],
            [
                128u8,
                108u8,
                134u8,
                201u8,
                217u8,
                99u8,
                125u8,
                182u8,
                80u8,
                254u8,
                67u8,
                52u8,
                144u8,
                113u8,
                70u8,
                177u8,
                40u8,
                90u8,
                177u8,
                38u8,
                71u8,
                105u8,
                104u8,
                189u8,
                129u8,
                22u8,
                219u8,
                46u8,
                201u8,
                84u8,
                226u8,
                82u8,
            ],
            [
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ],
            [
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for WalletPoolWrapperModuleEvents {
        const NAME: &'static str = "WalletPoolWrapperModuleEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminTransferred)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(<UserRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserRemoved)
                }
                Some(
                    <WalletPoolWrapperBulkTransactionsSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperBulkTransactionsSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperBulkTransactionsSent)
                }
                Some(
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperTransactionSent)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperBulkTransactionsSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperBulkTransactionsSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> WalletPoolWrapperModuleInstance<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>>,
    > {
        WalletPoolWrapperModuleInstance::<T, P, N>::deploy(provider, _admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::deploy_builder(provider, _admin)
    }
    /**A [`WalletPoolWrapperModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`WalletPoolWrapperModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct WalletPoolWrapperModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for WalletPoolWrapperModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("WalletPoolWrapperModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> WalletPoolWrapperModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> WalletPoolWrapperModuleInstance<T, P, N> {
            WalletPoolWrapperModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToAllowlist`] function.
        pub fn addToAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToAllowlistCall, N> {
            self.call_builder(&addToAllowlistCall { user })
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`allowlist`] function.
        pub fn allowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowlistCall, N> {
            self.call_builder(&allowlistCall { user })
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            _metabasedSequencerChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    _metabasedSequencerChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            _metabasedSequencerChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(
                &processTransactionCall {
                    _metabasedSequencerChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            _metabasedSequencerChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(
                &processTransactionRawCall {
                    _metabasedSequencerChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`removeFromAllowlist`] function.
        pub fn removeFromAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromAllowlistCall, N> {
            self.call_builder(&removeFromAllowlistCall { user })
        }
        ///Creates a new call builder for the [`transferAdmin`] function.
        pub fn transferAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferAdminCall, N> {
            self.call_builder(&transferAdminCall { newAdmin })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminTransferred`] event.
        pub fn AdminTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminTransferred, N> {
            self.event_filter::<AdminTransferred>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserRemoved`] event.
        pub fn UserRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserRemoved, N> {
            self.event_filter::<UserRemoved>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperBulkTransactionsSent`] event.
        pub fn WalletPoolWrapperBulkTransactionsSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperBulkTransactionsSent, N> {
            self.event_filter::<WalletPoolWrapperBulkTransactionsSent>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperTransactionSent`] event.
        pub fn WalletPoolWrapperTransactionSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperTransactionSent, N> {
            self.event_filter::<WalletPoolWrapperTransactionSent>()
        }
    }
}
