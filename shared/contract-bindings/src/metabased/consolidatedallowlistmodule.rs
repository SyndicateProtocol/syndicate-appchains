/**

Generated by the following Solidity interface...
```solidity
interface ConsolidatedAllowlistModule {
    error AddressNotAllowed();
    error CalldataNotAllowed();
    error NotAdmin();

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
    event CalldataChecksToggled(bool enabled);
    event UserAdded(address indexed user);
    event UserRemoved(address indexed user);

    constructor(address _admin);

    function addToAllowlist(address user) external;
    function admin() external view returns (address);
    function allowlist(address user) external view returns (bool isAllowed);
    function calldataChecksEnabled() external view returns (bool);
    function isAllowed(address proposer, bytes memory data) external view returns (bool);
    function removeFromAllowlist(address user) external;
    function toggleCalldataChecks(bool enabled) external;
    function transferAdmin(address newAdmin) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addToAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calldataChecksEnabled",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeFromAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "toggleCalldataChecks",
    "inputs": [
      {
        "name": "enabled",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminTransferred",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CalldataChecksToggled",
    "inputs": [
      {
        "name": "enabled",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserRemoved",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ConsolidatedAllowlistModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610209565b610021610034565b610ab86102648239610ab890f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b610112610d1c8038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b5f1b90565b9061015e60018060a01b0391610148565b9181191691161790565b61017c6101776101819261009c565b610118565b61009c565b90565b61018d90610168565b90565b61019990610184565b90565b90565b906101b46101af6101bb92610190565b61019c565b825461014d565b9055565b906101cb60ff91610148565b9181191691161790565b151590565b6101e3906101d5565b90565b90565b906101fe6101f9610205926101da565b6101e6565b82546101bf565b9055565b8061022461021e6102195f610137565b6100a7565b916100a7565b1461024057610233905f61019f565b61023e5f60026101e9565b565b610248610034565b6315a9bc2760e11b81528061025f60048201610143565b0390fdfe60806040526004361015610013575b6104bf565b61001d5f3561009c565b8063016f1654146100975780635da93d7e146100925780636f589f411461008d57806375829def14610088578063a7cd52cb14610083578063e3f756de1461007e578063f851a440146100795763f8e86ece0361000e5761048c565b610457565b6103c1565b6102fb565b610262565b61022d565b61018a565b6100ff565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b6100c2816100b4565b036100c957565b5f80fd5b905035906100da826100b9565b565b906020828203126100f5576100f2915f016100cd565b90565b6100ac565b5f0190565b3461012d576101176101123660046100dc565b6105c7565b61011f6100a2565b80610129816100fa565b0390f35b6100a8565b60018060a01b031690565b61014690610132565b90565b6101528161013d565b0361015957565b5f80fd5b9050359061016a82610149565b565b9060208282031261018557610182915f0161015d565b90565b6100ac565b346101b8576101a261019d36600461016c565b610677565b6101aa6100a2565b806101b4816100fa565b0390f35b6100a8565b5f9103126101c757565b6100ac565b1c90565b60ff1690565b6101e69060086101eb93026101cc565b6101d0565b90565b906101f991546101d6565b90565b61020860025f906101ee565b90565b610214906100b4565b9052565b919061022b905f6020850194019061020b565b565b3461025d5761023d3660046101bd565b6102596102486101fc565b6102506100a2565b91829182610218565b0390f35b6100a8565b346102905761027a61027536600461016c565b6107db565b6102826100a2565b8061028c816100fa565b0390f35b6100a8565b90565b6102ac6102a76102b192610132565b610295565b610132565b90565b6102bd90610298565b90565b6102c9906102b4565b90565b906102d6906102c0565b5f5260205260405f2090565b6102f8906102f36001915f926102cc565b6101ee565b90565b3461032b5761032761031661031136600461016c565b6102e2565b61031e6100a2565b91829182610218565b0390f35b6100a8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103765781359167ffffffffffffffff831161037157602001926001830284011161036c57565b610338565b610334565b610330565b9190916040818403126103bc57610394835f830161015d565b92602082013567ffffffffffffffff81116103b7576103b3920161033c565b9091565b6100b0565b6100ac565b346103f2576103ee6103dd6103d736600461037b565b91610885565b6103e56100a2565b91829182610218565b0390f35b6100a8565b60018060a01b031690565b61041290600861041793026101cc565b6103f7565b90565b906104259154610402565b90565b6104325f8061041a565b90565b61043e9061013d565b9052565b9190610455905f60208501940190610435565b565b34610487576104673660046101bd565b610483610472610428565b61047a6100a2565b91829182610442565b0390f35b6100a8565b346104ba576104a461049f36600461016c565b610a77565b6104ac6100a2565b806104b6816100fa565b0390f35b6100a8565b5f80fd5b5f1c90565b6104d46104d9916104c3565b6103f7565b90565b6104e690546104c8565b90565b336105046104fe6104f95f6104dc565b61013d565b9161013d565b036105145761051290610581565b565b61051c6100a2565b637bfa4b9f60e01b815280610533600482016100fa565b0390fd5b5f1b90565b9061054860ff91610537565b9181191691161790565b61055b906100b4565b90565b90565b9061057661057161057d92610552565b61055e565b825461053c565b9055565b61058c816002610561565b6105c27feebe63eb25083466887623def223ef3cfb66bc68e717121c21f4fef921f33eed916105b96100a2565b91829182610218565b0390a1565b6105d0906104e9565b565b336105ed6105e76105e25f6104dc565b61013d565b9161013d565b036105fd576105fb90610620565b565b6106056100a2565b637bfa4b9f60e01b81528061061c600482016100fa565b0390fd5b6106355f610630600184906102cc565b610561565b61065f7fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d916102c0565b906106686100a2565b80610672816100fa565b0390a2565b610680906105d2565b565b3361069d6106976106925f6104dc565b61013d565b9161013d565b036106ad576106ab90610739565b565b6106b56100a2565b637bfa4b9f60e01b8152806106cc600482016100fa565b0390fd5b90565b6106e76106e26106ec926106d0565b610295565b610132565b90565b6106f8906106d3565b90565b9061070c60018060a01b0391610537565b9181191691161790565b90565b9061072e610729610735926102c0565b610716565b82546106fb565b9055565b8061075461074e6107495f6106ef565b61013d565b9161013d565b146107b8576107625f6104dc565b61076c825f610719565b906107a061079a7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6936102c0565b916102c0565b916107a96100a2565b806107b3816100fa565b0390a3565b6107c06100a2565b6315a9bc2760e11b8152806107d7600482016100fa565b0390fd5b6107e490610682565b565b5f90565b6107f66107fb916104c3565b6101d0565b90565b61080890546107ea565b90565b5090565b90565b61082661082161082b926106d0565b610295565b61080f565b90565b634e487b7160e01b5f52603260045260245ffd5b9190811015610852576001020190565b61082e565b60ff60f81b1690565b90565b60f81b90565b61087d61087861088292610860565b610863565b610857565b90565b9190916108906107e6565b50806108ac6108a66108a15f6106ef565b61013d565b9161013d565b141590816109ad575b5061098a576108c460026107fe565b80610966575b6108d6575b5050600190565b6108e182829061080b565b6108f36108ed5f610812565b9161080f565b11918261092b575b5050610908575f806108cf565b6109106100a2565b6360c054b160e11b815280610927600482016100fa565b0390fd5b61094b925090610945919061093f5f610812565b91610842565b35610857565b61095e61095860ff610869565b91610857565b145f806108fb565b5061097282829061080b565b61098461097e5f610812565b9161080f565b116108ca565b6109926100a2565b6315a9bc2760e11b8152806109a9600482016100fa565b0390fd5b6109cb91506109c06109c59160016102cc565b6107fe565b156100b4565b5f6108b5565b336109ec6109e66109e15f6104dc565b61013d565b9161013d565b036109fc576109fa90610a1f565b565b610a046100a2565b637bfa4b9f60e01b815280610a1b600482016100fa565b0390fd5b610a356001610a30600184906102cc565b610561565b610a5f7f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f916102c0565b90610a686100a2565b80610a72816100fa565b0390a2565b610a80906109d1565b56fea264697066735822122014705d7634618dfd401ef926d6758db27351d6e36ca5d1282578a900da89526e64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x02\tV[a\0!a\x004V[a\n\xB8a\x02d\x829a\n\xB8\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\r\x1C\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[_\x1B\x90V[\x90a\x01^`\x01\x80`\xA0\x1B\x03\x91a\x01HV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01|a\x01wa\x01\x81\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x01\x8D\x90a\x01hV[\x90V[a\x01\x99\x90a\x01\x84V[\x90V[\x90V[\x90a\x01\xB4a\x01\xAFa\x01\xBB\x92a\x01\x90V[a\x01\x9CV[\x82Ta\x01MV[\x90UV[\x90a\x01\xCB`\xFF\x91a\x01HV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x01\xE3\x90a\x01\xD5V[\x90V[\x90V[\x90a\x01\xFEa\x01\xF9a\x02\x05\x92a\x01\xDAV[a\x01\xE6V[\x82Ta\x01\xBFV[\x90UV[\x80a\x02$a\x02\x1Ea\x02\x19_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x02@Wa\x023\x90_a\x01\x9FV[a\x02>_`\x02a\x01\xE9V[V[a\x02Ha\x004V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02_`\x04\x82\x01a\x01CV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\xBFV[a\0\x1D_5a\0\x9CV[\x80c\x01o\x16T\x14a\0\x97W\x80c]\xA9=~\x14a\0\x92W\x80coX\x9FA\x14a\0\x8DW\x80cu\x82\x9D\xEF\x14a\0\x88W\x80c\xA7\xCDR\xCB\x14a\0\x83W\x80c\xE3\xF7V\xDE\x14a\0~W\x80c\xF8Q\xA4@\x14a\0yWc\xF8\xE8n\xCE\x03a\0\x0EWa\x04\x8CV[a\x04WV[a\x03\xC1V[a\x02\xFBV[a\x02bV[a\x02-V[a\x01\x8AV[a\0\xFFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0\xC2\x81a\0\xB4V[\x03a\0\xC9WV[_\x80\xFD[\x90P5\x90a\0\xDA\x82a\0\xB9V[V[\x90` \x82\x82\x03\x12a\0\xF5Wa\0\xF2\x91_\x01a\0\xCDV[\x90V[a\0\xACV[_\x01\x90V[4a\x01-Wa\x01\x17a\x01\x126`\x04a\0\xDCV[a\x05\xC7V[a\x01\x1Fa\0\xA2V[\x80a\x01)\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01F\x90a\x012V[\x90V[a\x01R\x81a\x01=V[\x03a\x01YWV[_\x80\xFD[\x90P5\x90a\x01j\x82a\x01IV[V[\x90` \x82\x82\x03\x12a\x01\x85Wa\x01\x82\x91_\x01a\x01]V[\x90V[a\0\xACV[4a\x01\xB8Wa\x01\xA2a\x01\x9D6`\x04a\x01lV[a\x06wV[a\x01\xAAa\0\xA2V[\x80a\x01\xB4\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01\xC7WV[a\0\xACV[\x1C\x90V[`\xFF\x16\x90V[a\x01\xE6\x90`\x08a\x01\xEB\x93\x02a\x01\xCCV[a\x01\xD0V[\x90V[\x90a\x01\xF9\x91Ta\x01\xD6V[\x90V[a\x02\x08`\x02_\x90a\x01\xEEV[\x90V[a\x02\x14\x90a\0\xB4V[\x90RV[\x91\x90a\x02+\x90_` \x85\x01\x94\x01\x90a\x02\x0BV[V[4a\x02]Wa\x02=6`\x04a\x01\xBDV[a\x02Ya\x02Ha\x01\xFCV[a\x02Pa\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xF3[a\0\xA8V[4a\x02\x90Wa\x02za\x02u6`\x04a\x01lV[a\x07\xDBV[a\x02\x82a\0\xA2V[\x80a\x02\x8C\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[\x90V[a\x02\xACa\x02\xA7a\x02\xB1\x92a\x012V[a\x02\x95V[a\x012V[\x90V[a\x02\xBD\x90a\x02\x98V[\x90V[a\x02\xC9\x90a\x02\xB4V[\x90V[\x90a\x02\xD6\x90a\x02\xC0V[_R` R`@_ \x90V[a\x02\xF8\x90a\x02\xF3`\x01\x91_\x92a\x02\xCCV[a\x01\xEEV[\x90V[4a\x03+Wa\x03'a\x03\x16a\x03\x116`\x04a\x01lV[a\x02\xE2V[a\x03\x1Ea\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03vW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03qW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03lWV[a\x038V[a\x034V[a\x030V[\x91\x90\x91`@\x81\x84\x03\x12a\x03\xBCWa\x03\x94\x83_\x83\x01a\x01]V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xB7Wa\x03\xB3\x92\x01a\x03<V[\x90\x91V[a\0\xB0V[a\0\xACV[4a\x03\xF2Wa\x03\xEEa\x03\xDDa\x03\xD76`\x04a\x03{V[\x91a\x08\x85V[a\x03\xE5a\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x12\x90`\x08a\x04\x17\x93\x02a\x01\xCCV[a\x03\xF7V[\x90V[\x90a\x04%\x91Ta\x04\x02V[\x90V[a\x042_\x80a\x04\x1AV[\x90V[a\x04>\x90a\x01=V[\x90RV[\x91\x90a\x04U\x90_` \x85\x01\x94\x01\x90a\x045V[V[4a\x04\x87Wa\x04g6`\x04a\x01\xBDV[a\x04\x83a\x04ra\x04(V[a\x04za\0\xA2V[\x91\x82\x91\x82a\x04BV[\x03\x90\xF3[a\0\xA8V[4a\x04\xBAWa\x04\xA4a\x04\x9F6`\x04a\x01lV[a\nwV[a\x04\xACa\0\xA2V[\x80a\x04\xB6\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\xD4a\x04\xD9\x91a\x04\xC3V[a\x03\xF7V[\x90V[a\x04\xE6\x90Ta\x04\xC8V[\x90V[3a\x05\x04a\x04\xFEa\x04\xF9_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\x05\x14Wa\x05\x12\x90a\x05\x81V[V[a\x05\x1Ca\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x053`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[_\x1B\x90V[\x90a\x05H`\xFF\x91a\x057V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05[\x90a\0\xB4V[\x90V[\x90V[\x90a\x05va\x05qa\x05}\x92a\x05RV[a\x05^V[\x82Ta\x05<V[\x90UV[a\x05\x8C\x81`\x02a\x05aV[a\x05\xC2\x7F\xEE\xBEc\xEB%\x084f\x88v#\xDE\xF2#\xEF<\xFBf\xBCh\xE7\x17\x12\x1C!\xF4\xFE\xF9!\xF3>\xED\x91a\x05\xB9a\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xA1V[a\x05\xD0\x90a\x04\xE9V[V[3a\x05\xEDa\x05\xE7a\x05\xE2_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\x05\xFDWa\x05\xFB\x90a\x06 V[V[a\x06\x05a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x06\x1C`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\x065_a\x060`\x01\x84\x90a\x02\xCCV[a\x05aV[a\x06_\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x02\xC0V[\x90a\x06ha\0\xA2V[\x80a\x06r\x81a\0\xFAV[\x03\x90\xA2V[a\x06\x80\x90a\x05\xD2V[V[3a\x06\x9Da\x06\x97a\x06\x92_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\x06\xADWa\x06\xAB\x90a\x079V[V[a\x06\xB5a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x06\xCC`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[\x90V[a\x06\xE7a\x06\xE2a\x06\xEC\x92a\x06\xD0V[a\x02\x95V[a\x012V[\x90V[a\x06\xF8\x90a\x06\xD3V[\x90V[\x90a\x07\x0C`\x01\x80`\xA0\x1B\x03\x91a\x057V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x07.a\x07)a\x075\x92a\x02\xC0V[a\x07\x16V[\x82Ta\x06\xFBV[\x90UV[\x80a\x07Ta\x07Na\x07I_a\x06\xEFV[a\x01=V[\x91a\x01=V[\x14a\x07\xB8Wa\x07b_a\x04\xDCV[a\x07l\x82_a\x07\x19V[\x90a\x07\xA0a\x07\x9A\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x02\xC0V[\x91a\x02\xC0V[\x91a\x07\xA9a\0\xA2V[\x80a\x07\xB3\x81a\0\xFAV[\x03\x90\xA3V[a\x07\xC0a\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x07\xD7`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\x07\xE4\x90a\x06\x82V[V[_\x90V[a\x07\xF6a\x07\xFB\x91a\x04\xC3V[a\x01\xD0V[\x90V[a\x08\x08\x90Ta\x07\xEAV[\x90V[P\x90V[\x90V[a\x08&a\x08!a\x08+\x92a\x06\xD0V[a\x02\x95V[a\x08\x0FV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x91\x90\x81\x10\x15a\x08RW`\x01\x02\x01\x90V[a\x08.V[`\xFF`\xF8\x1B\x16\x90V[\x90V[`\xF8\x1B\x90V[a\x08}a\x08xa\x08\x82\x92a\x08`V[a\x08cV[a\x08WV[\x90V[\x91\x90\x91a\x08\x90a\x07\xE6V[P\x80a\x08\xACa\x08\xA6a\x08\xA1_a\x06\xEFV[a\x01=V[\x91a\x01=V[\x14\x15\x90\x81a\t\xADW[Pa\t\x8AWa\x08\xC4`\x02a\x07\xFEV[\x80a\tfW[a\x08\xD6W[PP`\x01\x90V[a\x08\xE1\x82\x82\x90a\x08\x0BV[a\x08\xF3a\x08\xED_a\x08\x12V[\x91a\x08\x0FV[\x11\x91\x82a\t+W[PPa\t\x08W_\x80a\x08\xCFV[a\t\x10a\0\xA2V[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\t'`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\tK\x92P\x90a\tE\x91\x90a\t?_a\x08\x12V[\x91a\x08BV[5a\x08WV[a\t^a\tX`\xFFa\x08iV[\x91a\x08WV[\x14_\x80a\x08\xFBV[Pa\tr\x82\x82\x90a\x08\x0BV[a\t\x84a\t~_a\x08\x12V[\x91a\x08\x0FV[\x11a\x08\xCAV[a\t\x92a\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\t\xA9`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\t\xCB\x91Pa\t\xC0a\t\xC5\x91`\x01a\x02\xCCV[a\x07\xFEV[\x15a\0\xB4V[_a\x08\xB5V[3a\t\xECa\t\xE6a\t\xE1_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\t\xFCWa\t\xFA\x90a\n\x1FV[V[a\n\x04a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\n\x1B`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\n5`\x01a\n0`\x01\x84\x90a\x02\xCCV[a\x05aV[a\n_\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x02\xC0V[\x90a\nha\0\xA2V[\x80a\nr\x81a\0\xFAV[\x03\x90\xA2V[a\n\x80\x90a\t\xD1V[V\xFE\xA2dipfsX\"\x12 \x14p]v4a\x8D\xFD@\x1E\xF9&\xD6u\x8D\xB2sQ\xD6\xE3l\xA5\xD1(%x\xA9\0\xDA\x89RndsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6104bf565b61001d5f3561009c565b8063016f1654146100975780635da93d7e146100925780636f589f411461008d57806375829def14610088578063a7cd52cb14610083578063e3f756de1461007e578063f851a440146100795763f8e86ece0361000e5761048c565b610457565b6103c1565b6102fb565b610262565b61022d565b61018a565b6100ff565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b6100c2816100b4565b036100c957565b5f80fd5b905035906100da826100b9565b565b906020828203126100f5576100f2915f016100cd565b90565b6100ac565b5f0190565b3461012d576101176101123660046100dc565b6105c7565b61011f6100a2565b80610129816100fa565b0390f35b6100a8565b60018060a01b031690565b61014690610132565b90565b6101528161013d565b0361015957565b5f80fd5b9050359061016a82610149565b565b9060208282031261018557610182915f0161015d565b90565b6100ac565b346101b8576101a261019d36600461016c565b610677565b6101aa6100a2565b806101b4816100fa565b0390f35b6100a8565b5f9103126101c757565b6100ac565b1c90565b60ff1690565b6101e69060086101eb93026101cc565b6101d0565b90565b906101f991546101d6565b90565b61020860025f906101ee565b90565b610214906100b4565b9052565b919061022b905f6020850194019061020b565b565b3461025d5761023d3660046101bd565b6102596102486101fc565b6102506100a2565b91829182610218565b0390f35b6100a8565b346102905761027a61027536600461016c565b6107db565b6102826100a2565b8061028c816100fa565b0390f35b6100a8565b90565b6102ac6102a76102b192610132565b610295565b610132565b90565b6102bd90610298565b90565b6102c9906102b4565b90565b906102d6906102c0565b5f5260205260405f2090565b6102f8906102f36001915f926102cc565b6101ee565b90565b3461032b5761032761031661031136600461016c565b6102e2565b61031e6100a2565b91829182610218565b0390f35b6100a8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103765781359167ffffffffffffffff831161037157602001926001830284011161036c57565b610338565b610334565b610330565b9190916040818403126103bc57610394835f830161015d565b92602082013567ffffffffffffffff81116103b7576103b3920161033c565b9091565b6100b0565b6100ac565b346103f2576103ee6103dd6103d736600461037b565b91610885565b6103e56100a2565b91829182610218565b0390f35b6100a8565b60018060a01b031690565b61041290600861041793026101cc565b6103f7565b90565b906104259154610402565b90565b6104325f8061041a565b90565b61043e9061013d565b9052565b9190610455905f60208501940190610435565b565b34610487576104673660046101bd565b610483610472610428565b61047a6100a2565b91829182610442565b0390f35b6100a8565b346104ba576104a461049f36600461016c565b610a77565b6104ac6100a2565b806104b6816100fa565b0390f35b6100a8565b5f80fd5b5f1c90565b6104d46104d9916104c3565b6103f7565b90565b6104e690546104c8565b90565b336105046104fe6104f95f6104dc565b61013d565b9161013d565b036105145761051290610581565b565b61051c6100a2565b637bfa4b9f60e01b815280610533600482016100fa565b0390fd5b5f1b90565b9061054860ff91610537565b9181191691161790565b61055b906100b4565b90565b90565b9061057661057161057d92610552565b61055e565b825461053c565b9055565b61058c816002610561565b6105c27feebe63eb25083466887623def223ef3cfb66bc68e717121c21f4fef921f33eed916105b96100a2565b91829182610218565b0390a1565b6105d0906104e9565b565b336105ed6105e76105e25f6104dc565b61013d565b9161013d565b036105fd576105fb90610620565b565b6106056100a2565b637bfa4b9f60e01b81528061061c600482016100fa565b0390fd5b6106355f610630600184906102cc565b610561565b61065f7fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d916102c0565b906106686100a2565b80610672816100fa565b0390a2565b610680906105d2565b565b3361069d6106976106925f6104dc565b61013d565b9161013d565b036106ad576106ab90610739565b565b6106b56100a2565b637bfa4b9f60e01b8152806106cc600482016100fa565b0390fd5b90565b6106e76106e26106ec926106d0565b610295565b610132565b90565b6106f8906106d3565b90565b9061070c60018060a01b0391610537565b9181191691161790565b90565b9061072e610729610735926102c0565b610716565b82546106fb565b9055565b8061075461074e6107495f6106ef565b61013d565b9161013d565b146107b8576107625f6104dc565b61076c825f610719565b906107a061079a7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6936102c0565b916102c0565b916107a96100a2565b806107b3816100fa565b0390a3565b6107c06100a2565b6315a9bc2760e11b8152806107d7600482016100fa565b0390fd5b6107e490610682565b565b5f90565b6107f66107fb916104c3565b6101d0565b90565b61080890546107ea565b90565b5090565b90565b61082661082161082b926106d0565b610295565b61080f565b90565b634e487b7160e01b5f52603260045260245ffd5b9190811015610852576001020190565b61082e565b60ff60f81b1690565b90565b60f81b90565b61087d61087861088292610860565b610863565b610857565b90565b9190916108906107e6565b50806108ac6108a66108a15f6106ef565b61013d565b9161013d565b141590816109ad575b5061098a576108c460026107fe565b80610966575b6108d6575b5050600190565b6108e182829061080b565b6108f36108ed5f610812565b9161080f565b11918261092b575b5050610908575f806108cf565b6109106100a2565b6360c054b160e11b815280610927600482016100fa565b0390fd5b61094b925090610945919061093f5f610812565b91610842565b35610857565b61095e61095860ff610869565b91610857565b145f806108fb565b5061097282829061080b565b61098461097e5f610812565b9161080f565b116108ca565b6109926100a2565b6315a9bc2760e11b8152806109a9600482016100fa565b0390fd5b6109cb91506109c06109c59160016102cc565b6107fe565b156100b4565b5f6108b5565b336109ec6109e66109e15f6104dc565b61013d565b9161013d565b036109fc576109fa90610a1f565b565b610a046100a2565b637bfa4b9f60e01b815280610a1b600482016100fa565b0390fd5b610a356001610a30600184906102cc565b610561565b610a5f7f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f916102c0565b90610a686100a2565b80610a72816100fa565b0390a2565b610a80906109d1565b56fea264697066735822122014705d7634618dfd401ef926d6758db27351d6e36ca5d1282578a900da89526e64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\xBFV[a\0\x1D_5a\0\x9CV[\x80c\x01o\x16T\x14a\0\x97W\x80c]\xA9=~\x14a\0\x92W\x80coX\x9FA\x14a\0\x8DW\x80cu\x82\x9D\xEF\x14a\0\x88W\x80c\xA7\xCDR\xCB\x14a\0\x83W\x80c\xE3\xF7V\xDE\x14a\0~W\x80c\xF8Q\xA4@\x14a\0yWc\xF8\xE8n\xCE\x03a\0\x0EWa\x04\x8CV[a\x04WV[a\x03\xC1V[a\x02\xFBV[a\x02bV[a\x02-V[a\x01\x8AV[a\0\xFFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0\xC2\x81a\0\xB4V[\x03a\0\xC9WV[_\x80\xFD[\x90P5\x90a\0\xDA\x82a\0\xB9V[V[\x90` \x82\x82\x03\x12a\0\xF5Wa\0\xF2\x91_\x01a\0\xCDV[\x90V[a\0\xACV[_\x01\x90V[4a\x01-Wa\x01\x17a\x01\x126`\x04a\0\xDCV[a\x05\xC7V[a\x01\x1Fa\0\xA2V[\x80a\x01)\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01F\x90a\x012V[\x90V[a\x01R\x81a\x01=V[\x03a\x01YWV[_\x80\xFD[\x90P5\x90a\x01j\x82a\x01IV[V[\x90` \x82\x82\x03\x12a\x01\x85Wa\x01\x82\x91_\x01a\x01]V[\x90V[a\0\xACV[4a\x01\xB8Wa\x01\xA2a\x01\x9D6`\x04a\x01lV[a\x06wV[a\x01\xAAa\0\xA2V[\x80a\x01\xB4\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01\xC7WV[a\0\xACV[\x1C\x90V[`\xFF\x16\x90V[a\x01\xE6\x90`\x08a\x01\xEB\x93\x02a\x01\xCCV[a\x01\xD0V[\x90V[\x90a\x01\xF9\x91Ta\x01\xD6V[\x90V[a\x02\x08`\x02_\x90a\x01\xEEV[\x90V[a\x02\x14\x90a\0\xB4V[\x90RV[\x91\x90a\x02+\x90_` \x85\x01\x94\x01\x90a\x02\x0BV[V[4a\x02]Wa\x02=6`\x04a\x01\xBDV[a\x02Ya\x02Ha\x01\xFCV[a\x02Pa\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xF3[a\0\xA8V[4a\x02\x90Wa\x02za\x02u6`\x04a\x01lV[a\x07\xDBV[a\x02\x82a\0\xA2V[\x80a\x02\x8C\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[\x90V[a\x02\xACa\x02\xA7a\x02\xB1\x92a\x012V[a\x02\x95V[a\x012V[\x90V[a\x02\xBD\x90a\x02\x98V[\x90V[a\x02\xC9\x90a\x02\xB4V[\x90V[\x90a\x02\xD6\x90a\x02\xC0V[_R` R`@_ \x90V[a\x02\xF8\x90a\x02\xF3`\x01\x91_\x92a\x02\xCCV[a\x01\xEEV[\x90V[4a\x03+Wa\x03'a\x03\x16a\x03\x116`\x04a\x01lV[a\x02\xE2V[a\x03\x1Ea\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03vW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03qW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03lWV[a\x038V[a\x034V[a\x030V[\x91\x90\x91`@\x81\x84\x03\x12a\x03\xBCWa\x03\x94\x83_\x83\x01a\x01]V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xB7Wa\x03\xB3\x92\x01a\x03<V[\x90\x91V[a\0\xB0V[a\0\xACV[4a\x03\xF2Wa\x03\xEEa\x03\xDDa\x03\xD76`\x04a\x03{V[\x91a\x08\x85V[a\x03\xE5a\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x12\x90`\x08a\x04\x17\x93\x02a\x01\xCCV[a\x03\xF7V[\x90V[\x90a\x04%\x91Ta\x04\x02V[\x90V[a\x042_\x80a\x04\x1AV[\x90V[a\x04>\x90a\x01=V[\x90RV[\x91\x90a\x04U\x90_` \x85\x01\x94\x01\x90a\x045V[V[4a\x04\x87Wa\x04g6`\x04a\x01\xBDV[a\x04\x83a\x04ra\x04(V[a\x04za\0\xA2V[\x91\x82\x91\x82a\x04BV[\x03\x90\xF3[a\0\xA8V[4a\x04\xBAWa\x04\xA4a\x04\x9F6`\x04a\x01lV[a\nwV[a\x04\xACa\0\xA2V[\x80a\x04\xB6\x81a\0\xFAV[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\xD4a\x04\xD9\x91a\x04\xC3V[a\x03\xF7V[\x90V[a\x04\xE6\x90Ta\x04\xC8V[\x90V[3a\x05\x04a\x04\xFEa\x04\xF9_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\x05\x14Wa\x05\x12\x90a\x05\x81V[V[a\x05\x1Ca\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x053`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[_\x1B\x90V[\x90a\x05H`\xFF\x91a\x057V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05[\x90a\0\xB4V[\x90V[\x90V[\x90a\x05va\x05qa\x05}\x92a\x05RV[a\x05^V[\x82Ta\x05<V[\x90UV[a\x05\x8C\x81`\x02a\x05aV[a\x05\xC2\x7F\xEE\xBEc\xEB%\x084f\x88v#\xDE\xF2#\xEF<\xFBf\xBCh\xE7\x17\x12\x1C!\xF4\xFE\xF9!\xF3>\xED\x91a\x05\xB9a\0\xA2V[\x91\x82\x91\x82a\x02\x18V[\x03\x90\xA1V[a\x05\xD0\x90a\x04\xE9V[V[3a\x05\xEDa\x05\xE7a\x05\xE2_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\x05\xFDWa\x05\xFB\x90a\x06 V[V[a\x06\x05a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x06\x1C`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\x065_a\x060`\x01\x84\x90a\x02\xCCV[a\x05aV[a\x06_\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x02\xC0V[\x90a\x06ha\0\xA2V[\x80a\x06r\x81a\0\xFAV[\x03\x90\xA2V[a\x06\x80\x90a\x05\xD2V[V[3a\x06\x9Da\x06\x97a\x06\x92_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\x06\xADWa\x06\xAB\x90a\x079V[V[a\x06\xB5a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x06\xCC`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[\x90V[a\x06\xE7a\x06\xE2a\x06\xEC\x92a\x06\xD0V[a\x02\x95V[a\x012V[\x90V[a\x06\xF8\x90a\x06\xD3V[\x90V[\x90a\x07\x0C`\x01\x80`\xA0\x1B\x03\x91a\x057V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x07.a\x07)a\x075\x92a\x02\xC0V[a\x07\x16V[\x82Ta\x06\xFBV[\x90UV[\x80a\x07Ta\x07Na\x07I_a\x06\xEFV[a\x01=V[\x91a\x01=V[\x14a\x07\xB8Wa\x07b_a\x04\xDCV[a\x07l\x82_a\x07\x19V[\x90a\x07\xA0a\x07\x9A\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x02\xC0V[\x91a\x02\xC0V[\x91a\x07\xA9a\0\xA2V[\x80a\x07\xB3\x81a\0\xFAV[\x03\x90\xA3V[a\x07\xC0a\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x07\xD7`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\x07\xE4\x90a\x06\x82V[V[_\x90V[a\x07\xF6a\x07\xFB\x91a\x04\xC3V[a\x01\xD0V[\x90V[a\x08\x08\x90Ta\x07\xEAV[\x90V[P\x90V[\x90V[a\x08&a\x08!a\x08+\x92a\x06\xD0V[a\x02\x95V[a\x08\x0FV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x91\x90\x81\x10\x15a\x08RW`\x01\x02\x01\x90V[a\x08.V[`\xFF`\xF8\x1B\x16\x90V[\x90V[`\xF8\x1B\x90V[a\x08}a\x08xa\x08\x82\x92a\x08`V[a\x08cV[a\x08WV[\x90V[\x91\x90\x91a\x08\x90a\x07\xE6V[P\x80a\x08\xACa\x08\xA6a\x08\xA1_a\x06\xEFV[a\x01=V[\x91a\x01=V[\x14\x15\x90\x81a\t\xADW[Pa\t\x8AWa\x08\xC4`\x02a\x07\xFEV[\x80a\tfW[a\x08\xD6W[PP`\x01\x90V[a\x08\xE1\x82\x82\x90a\x08\x0BV[a\x08\xF3a\x08\xED_a\x08\x12V[\x91a\x08\x0FV[\x11\x91\x82a\t+W[PPa\t\x08W_\x80a\x08\xCFV[a\t\x10a\0\xA2V[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\t'`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\tK\x92P\x90a\tE\x91\x90a\t?_a\x08\x12V[\x91a\x08BV[5a\x08WV[a\t^a\tX`\xFFa\x08iV[\x91a\x08WV[\x14_\x80a\x08\xFBV[Pa\tr\x82\x82\x90a\x08\x0BV[a\t\x84a\t~_a\x08\x12V[\x91a\x08\x0FV[\x11a\x08\xCAV[a\t\x92a\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\t\xA9`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\t\xCB\x91Pa\t\xC0a\t\xC5\x91`\x01a\x02\xCCV[a\x07\xFEV[\x15a\0\xB4V[_a\x08\xB5V[3a\t\xECa\t\xE6a\t\xE1_a\x04\xDCV[a\x01=V[\x91a\x01=V[\x03a\t\xFCWa\t\xFA\x90a\n\x1FV[V[a\n\x04a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\n\x1B`\x04\x82\x01a\0\xFAV[\x03\x90\xFD[a\n5`\x01a\n0`\x01\x84\x90a\x02\xCCV[a\x05aV[a\n_\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x02\xC0V[\x90a\nha\0\xA2V[\x80a\nr\x81a\0\xFAV[\x03\x90\xA2V[a\n\x80\x90a\t\xD1V[V\xFE\xA2dipfsX\"\x12 \x14p]v4a\x8D\xFD@\x1E\xF9&\xD6u\x8D\xB2sQ\xD6\xE3l\xA5\xD1(%x\xA9\0\xDA\x89RndsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CalldataNotAllowed()` and selector `0xc180a962`.
```solidity
error CalldataNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataNotAllowed()";
            const SELECTOR: [u8; 4] = [193u8, 128u8, 169u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
```solidity
error NotAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminTransferred(address,address)` and selector `0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6`.
```solidity
event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminTransferred {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: topics.1,
                    newAdmin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousAdmin.clone(),
                    self.newAdmin.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousAdmin,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAdmin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CalldataChecksToggled(bool)` and selector `0xeebe63eb25083466887623def223ef3cfb66bc68e717121c21f4fef921f33eed`.
```solidity
event CalldataChecksToggled(bool enabled);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CalldataChecksToggled {
        #[allow(missing_docs)]
        pub enabled: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CalldataChecksToggled {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CalldataChecksToggled(bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                238u8,
                190u8,
                99u8,
                235u8,
                37u8,
                8u8,
                52u8,
                102u8,
                136u8,
                118u8,
                35u8,
                222u8,
                242u8,
                35u8,
                239u8,
                60u8,
                251u8,
                102u8,
                188u8,
                104u8,
                231u8,
                23u8,
                18u8,
                28u8,
                33u8,
                244u8,
                254u8,
                249u8,
                33u8,
                243u8,
                62u8,
                237u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { enabled: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.enabled,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CalldataChecksToggled {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CalldataChecksToggled> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CalldataChecksToggled) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address)` and selector `0x19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f`.
```solidity
event UserAdded(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserRemoved(address)` and selector `0xe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d`.
```solidity
event UserRemoved(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserRemoved {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addToAllowlist(address)` and selector `0xf8e86ece`.
```solidity
function addToAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addToAllowlist(address)`](addToAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToAllowlist(address)";
            const SELECTOR: [u8; 4] = [248u8, 232u8, 110u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowlist(address)` and selector `0xa7cd52cb`.
```solidity
function allowlist(address user) external view returns (bool isAllowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowlist(address)`](allowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistReturn {
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistReturn) -> Self {
                    (value.isAllowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isAllowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowlistReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowlist(address)";
            const SELECTOR: [u8; 4] = [167u8, 205u8, 82u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calldataChecksEnabled()` and selector `0x6f589f41`.
```solidity
function calldataChecksEnabled() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataChecksEnabledCall {}
    ///Container type for the return parameters of the [`calldataChecksEnabled()`](calldataChecksEnabledCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataChecksEnabledReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataChecksEnabledCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataChecksEnabledCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataChecksEnabledCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataChecksEnabledReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataChecksEnabledReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataChecksEnabledReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calldataChecksEnabledCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calldataChecksEnabledReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calldataChecksEnabled()";
            const SELECTOR: [u8; 4] = [111u8, 88u8, 159u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,bytes)` and selector `0xe3f756de`.
```solidity
function isAllowed(address proposer, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,bytes)";
            const SELECTOR: [u8; 4] = [227u8, 247u8, 86u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromAllowlist(address)` and selector `0x5da93d7e`.
```solidity
function removeFromAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeFromAllowlist(address)`](removeFromAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromAllowlist(address)";
            const SELECTOR: [u8; 4] = [93u8, 169u8, 61u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `toggleCalldataChecks(bool)` and selector `0x016f1654`.
```solidity
function toggleCalldataChecks(bool enabled) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toggleCalldataChecksCall {
        #[allow(missing_docs)]
        pub enabled: bool,
    }
    ///Container type for the return parameters of the [`toggleCalldataChecks(bool)`](toggleCalldataChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toggleCalldataChecksReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toggleCalldataChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: toggleCalldataChecksCall) -> Self {
                    (value.enabled,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for toggleCalldataChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { enabled: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toggleCalldataChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: toggleCalldataChecksReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for toggleCalldataChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for toggleCalldataChecksCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = toggleCalldataChecksReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "toggleCalldataChecks(bool)";
            const SELECTOR: [u8; 4] = [1u8, 111u8, 22u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.enabled,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferAdmin(address)` and selector `0x75829def`.
```solidity
function transferAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminCall {
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferAdmin(address)`](transferAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferAdmin(address)";
            const SELECTOR: [u8; 4] = [117u8, 130u8, 157u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ConsolidatedAllowlistModule`](self) function calls.
    pub enum ConsolidatedAllowlistModuleCalls {
        #[allow(missing_docs)]
        addToAllowlist(addToAllowlistCall),
        #[allow(missing_docs)]
        admin(adminCall),
        #[allow(missing_docs)]
        allowlist(allowlistCall),
        #[allow(missing_docs)]
        calldataChecksEnabled(calldataChecksEnabledCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        removeFromAllowlist(removeFromAllowlistCall),
        #[allow(missing_docs)]
        toggleCalldataChecks(toggleCalldataChecksCall),
        #[allow(missing_docs)]
        transferAdmin(transferAdminCall),
    }
    #[automatically_derived]
    impl ConsolidatedAllowlistModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 111u8, 22u8, 84u8],
            [93u8, 169u8, 61u8, 126u8],
            [111u8, 88u8, 159u8, 65u8],
            [117u8, 130u8, 157u8, 239u8],
            [167u8, 205u8, 82u8, 203u8],
            [227u8, 247u8, 86u8, 222u8],
            [248u8, 81u8, 164u8, 64u8],
            [248u8, 232u8, 110u8, 206u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConsolidatedAllowlistModuleCalls {
        const NAME: &'static str = "ConsolidatedAllowlistModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToAllowlist(_) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allowlist(_) => {
                    <allowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calldataChecksEnabled(_) => {
                    <calldataChecksEnabledCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromAllowlist(_) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::toggleCalldataChecks(_) => {
                    <toggleCalldataChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferAdmin(_) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls>] = &[
                {
                    fn toggleCalldataChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <toggleCalldataChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::toggleCalldataChecks)
                    }
                    toggleCalldataChecks
                },
                {
                    fn removeFromAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::removeFromAllowlist)
                    }
                    removeFromAllowlist
                },
                {
                    fn calldataChecksEnabled(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <calldataChecksEnabledCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::calldataChecksEnabled)
                    }
                    calldataChecksEnabled
                },
                {
                    fn transferAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <transferAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::transferAdmin)
                    }
                    transferAdmin
                },
                {
                    fn allowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <allowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::allowlist)
                    }
                    allowlist
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::admin)
                    }
                    admin
                },
                {
                    fn addToAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleCalls> {
                        <addToAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleCalls::addToAllowlist)
                    }
                    addToAllowlist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calldataChecksEnabled(inner) => {
                    <calldataChecksEnabledCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::toggleCalldataChecks(inner) => {
                    <toggleCalldataChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calldataChecksEnabled(inner) => {
                    <calldataChecksEnabledCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::toggleCalldataChecks(inner) => {
                    <toggleCalldataChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ConsolidatedAllowlistModule`](self) custom errors.
    pub enum ConsolidatedAllowlistModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        CalldataNotAllowed(CalldataNotAllowed),
        #[allow(missing_docs)]
        NotAdmin(NotAdmin),
    }
    #[automatically_derived]
    impl ConsolidatedAllowlistModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [123u8, 250u8, 75u8, 159u8],
            [193u8, 128u8, 169u8, 98u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConsolidatedAllowlistModuleErrors {
        const NAME: &'static str = "ConsolidatedAllowlistModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataNotAllowed(_) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleErrors> {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleErrors::AddressNotAllowed)
                    }
                    AddressNotAllowed
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleErrors> {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleErrors::NotAdmin)
                    }
                    NotAdmin
                },
                {
                    fn CalldataNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConsolidatedAllowlistModuleErrors> {
                        <CalldataNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConsolidatedAllowlistModuleErrors::CalldataNotAllowed)
                    }
                    CalldataNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`ConsolidatedAllowlistModule`](self) events.
    pub enum ConsolidatedAllowlistModuleEvents {
        #[allow(missing_docs)]
        AdminTransferred(AdminTransferred),
        #[allow(missing_docs)]
        CalldataChecksToggled(CalldataChecksToggled),
        #[allow(missing_docs)]
        UserAdded(UserAdded),
        #[allow(missing_docs)]
        UserRemoved(UserRemoved),
    }
    #[automatically_derived]
    impl ConsolidatedAllowlistModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ],
            [
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ],
            [
                238u8,
                190u8,
                99u8,
                235u8,
                37u8,
                8u8,
                52u8,
                102u8,
                136u8,
                118u8,
                35u8,
                222u8,
                242u8,
                35u8,
                239u8,
                60u8,
                251u8,
                102u8,
                188u8,
                104u8,
                231u8,
                23u8,
                18u8,
                28u8,
                33u8,
                244u8,
                254u8,
                249u8,
                33u8,
                243u8,
                62u8,
                237u8,
            ],
            [
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ConsolidatedAllowlistModuleEvents {
        const NAME: &'static str = "ConsolidatedAllowlistModuleEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminTransferred)
                }
                Some(
                    <CalldataChecksToggled as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CalldataChecksToggled as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CalldataChecksToggled)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(<UserRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ConsolidatedAllowlistModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CalldataChecksToggled(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CalldataChecksToggled(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ConsolidatedAllowlistModule`](self) contract instance.

See the [wrapper's documentation](`ConsolidatedAllowlistModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ConsolidatedAllowlistModuleInstance<T, P, N> {
        ConsolidatedAllowlistModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ConsolidatedAllowlistModuleInstance<T, P, N>>,
    > {
        ConsolidatedAllowlistModuleInstance::<T, P, N>::deploy(provider, _admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ConsolidatedAllowlistModuleInstance::<T, P, N>::deploy_builder(provider, _admin)
    }
    /**A [`ConsolidatedAllowlistModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ConsolidatedAllowlistModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ConsolidatedAllowlistModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ConsolidatedAllowlistModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ConsolidatedAllowlistModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConsolidatedAllowlistModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ConsolidatedAllowlistModule`](self) contract instance.

See the [wrapper's documentation](`ConsolidatedAllowlistModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ConsolidatedAllowlistModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ConsolidatedAllowlistModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> ConsolidatedAllowlistModuleInstance<T, P, N> {
            ConsolidatedAllowlistModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConsolidatedAllowlistModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToAllowlist`] function.
        pub fn addToAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToAllowlistCall, N> {
            self.call_builder(&addToAllowlistCall { user })
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`allowlist`] function.
        pub fn allowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowlistCall, N> {
            self.call_builder(&allowlistCall { user })
        }
        ///Creates a new call builder for the [`calldataChecksEnabled`] function.
        pub fn calldataChecksEnabled(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, calldataChecksEnabledCall, N> {
            self.call_builder(&calldataChecksEnabledCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer, data })
        }
        ///Creates a new call builder for the [`removeFromAllowlist`] function.
        pub fn removeFromAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromAllowlistCall, N> {
            self.call_builder(&removeFromAllowlistCall { user })
        }
        ///Creates a new call builder for the [`toggleCalldataChecks`] function.
        pub fn toggleCalldataChecks(
            &self,
            enabled: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, toggleCalldataChecksCall, N> {
            self.call_builder(
                &toggleCalldataChecksCall {
                    enabled,
                },
            )
        }
        ///Creates a new call builder for the [`transferAdmin`] function.
        pub fn transferAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferAdminCall, N> {
            self.call_builder(&transferAdminCall { newAdmin })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConsolidatedAllowlistModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminTransferred`] event.
        pub fn AdminTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminTransferred, N> {
            self.event_filter::<AdminTransferred>()
        }
        ///Creates a new event filter for the [`CalldataChecksToggled`] event.
        pub fn CalldataChecksToggled_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CalldataChecksToggled, N> {
            self.event_filter::<CalldataChecksToggled>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserRemoved`] event.
        pub fn UserRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserRemoved, N> {
            self.event_filter::<UserRemoved>()
        }
    }
}
