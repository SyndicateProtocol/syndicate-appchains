/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();

    event AllowedSettlementAddressesUpdated(address[] newAllowedSettlementAddresses);
    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
    function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CHAIN_ID() external view returns (uint256);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
    function owner() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateAllowedSettlementAddresses(address[] memory newAllowedSettlementAddresses) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ALLOWED_SETTLEMENT_ADDRESSES",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "APPCHAIN_BLOCK_EXPLORER_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "appchainBlockExplorerUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "allowedSettlementAddresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAllowedSettlementAddresses",
    "inputs": [
      {
        "name": "newAllowedSettlementAddresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AllowedSettlementAddressesUpdated",
    "inputs": [
      {
        "name": "newAllowedSettlementAddresses",
        "type": "address[]",
        "indexed": false,
        "internalType": "address[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a!\xF2a\x02\x16\x829a!\xF2\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x012V[V[`@\x1C\x90V[`\xFF\x16\x90V[a\0Xa\0]\x91a\0@V[a\0FV[\x90V[a\0j\x90Ta\0LV[\x90V[_\x01\x90V[_\x1C\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\0\x8Ea\0\x93\x91a\0rV[a\0wV[\x90V[a\0\xA0\x90Ta\0\x82V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[_\x1B\x90V[\x90a\0\xC4`\x01\x80`@\x1B\x03\x91a\0\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xA3V[a\0\xCEV[a\0\xA3V[\x90V[\x90V[\x90a\x01\x05a\x01\0a\x01\x0C\x92a\0\xD1V[a\0\xEDV[\x82Ta\0\xB3V[\x90UV[a\x01\x19\x90a\0\xA3V[\x90RV[\x91\x90a\x010\x90_` \x85\x01\x94\x01\x90a\x01\x10V[V[a\x01:a\x01\xF1V[a\x01E_\x82\x01a\0`V[a\x01\xCEWa\x01T_\x82\x01a\0\x96V[a\x01la\x01f`\x01\x80`@\x1B\x03a\0\xA3V[\x91a\0\xA3V[\x03a\x01uW[PV[a\x01\x88\x90_`\x01\x80`@\x1B\x03\x91\x01a\0\xF0V[`\x01\x80`@\x1B\x03a\x01\xC5\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x01\xBCa\0,V[\x91\x82\x91\x82a\x01\x1DV[\x03\x90\xA1_a\x01rV[a\x01\xD6a\0,V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x01\xED`\x04\x82\x01a\0mV[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V\xFE`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\x8CV[a\0\x1D_5a\x01LV[\x80c\x07C\xBFn\x14a\x01GW\x80c*\x84\xB0\xF0\x14a\x01BW\x80cA\xFCq-\x14a\x01=W\x80cW\xD1\xBA%\x14a\x018W\x80cZ-\x9C\x18\x14a\x013W\x80cb\xC7<\xAA\x14a\x01.W\x80cf\xA1\xD1\x08\x14a\x01)W\x80cn\xDDl\t\x14a\x01$W\x80c\x85\xE1\xF4\xD0\x14a\x01\x1FW\x80c\x8D\xA5\xCB[\x14a\x01\x1AW\x80c\xA3\xC6\xE1\xE7\x14a\x01\x15W\x80c\xAAjC\xD8\x14a\x01\x10W\x80c\xBFm\xB6\xF8\x14a\x01\x0BW\x80c\xCB`\x84\x08\x14a\x01\x06W\x80c\xD1\xF4s|\x14a\x01\x01W\x80c\xE7\x93\x88\xE6\x14a\0\xFCW\x80c\xF2\xFD\xE3\x8B\x14a\0\xF7W\x80c\xF8\x81\xAF\xAF\x14a\0\xF2Wc\xF8\xA1D\xBE\x03a\0\x0EWa\rWV[a\r\x13V[a\x0CMV[a\x0C\x18V[a\x0B\x85V[a\x0BBV[a\n\x98V[a\nTV[a\n\x10V[a\t\xCCV[a\t\x8AV[a\tFV[a\t\x02V[a\x08\xBFV[a\x08\0V[a\x05\x1DV[a\x04\x8BV[a\x03\xF2V[a\x03\\V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xB6W[` \x83\x10\x14a\x01\xB1WV[a\x01\x82V[\x91`\x7F\x16\x91a\x01\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xECa\x01\xE5\x83a\x01\x96V[\x80\x94a\x01\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02CWP`\x01\x14a\x02\x07W[PPPV[a\x02\x14\x91\x92\x93\x94Pa\x01\xC9V[\x91_\x92[\x81\x84\x10a\x02+WPP\x01\x90_\x80\x80a\x02\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x02V[\x90a\x02h\x91a\x01\xD2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x93\x90a\x02kV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xADW`@RV[a\x02uV[\x90a\x02\xD2a\x02\xCB\x92a\x02\xC2a\x01RV[\x93\x84\x80\x92a\x02^V[\x03\x83a\x02\x89V[V[\x90_\x10a\x02\xE7Wa\x02\xE4\x90a\x02\xB2V[\x90V[a\x01oV[a\x02\xF8`\x0B_\x90a\x02\xD4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x032a\x03;` \x93a\x03@\x93a\x03)\x81a\x02\xFBV[\x93\x84\x80\x93a\x02\xFFV[\x95\x86\x91\x01a\x03\x08V[a\x02kV[\x01\x90V[a\x03Y\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x13V[\x90V[4a\x03\x8CWa\x03l6`\x04a\x01`V[a\x03\x88a\x03wa\x02\xECV[a\x03\x7Fa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA9\x90a\x03\x95V[\x90V[a\x03\xB5\x81a\x03\xA0V[\x03a\x03\xBCWV[_\x80\xFD[\x90P5\x90a\x03\xCD\x82a\x03\xACV[V[\x90` \x82\x82\x03\x12a\x03\xE8Wa\x03\xE5\x91_\x01a\x03\xC0V[\x90V[a\x01\\V[_\x01\x90V[4a\x04 Wa\x04\na\x04\x056`\x04a\x03\xCFV[a\x10&V[a\x04\x12a\x01RV[\x80a\x04\x1C\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04D\x90`\x08a\x04I\x93\x02a\x04%V[a\x04)V[\x90V[\x90a\x04W\x91Ta\x044V[\x90V[a\x04f`\t_\x90a\x04LV[\x90V[a\x04r\x90a\x03\xA0V[\x90RV[\x91\x90a\x04\x89\x90_` \x85\x01\x94\x01\x90a\x04iV[V[4a\x04\xBBWa\x04\x9B6`\x04a\x01`V[a\x04\xB7a\x04\xA6a\x04ZV[a\x04\xAEa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[\x90V[a\x04\xD3\x90`\x08a\x04\xD8\x93\x02a\x04%V[a\x04\xC0V[\x90V[\x90a\x04\xE6\x91Ta\x04\xC3V[\x90V[a\x04\xF5`\x06_\x90a\x04\xDBV[\x90V[\x90V[a\x05\x04\x90a\x04\xF8V[\x90RV[\x91\x90a\x05\x1B\x90_` \x85\x01\x94\x01\x90a\x04\xFBV[V[4a\x05MWa\x05-6`\x04a\x01`V[a\x05Ia\x058a\x04\xE9V[a\x05@a\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[a\x05[\x81a\x04\xF8V[\x03a\x05bWV[_\x80\xFD[\x90P5\x90a\x05s\x82a\x05RV[V[\x15\x15\x90V[a\x05\x83\x81a\x05uV[\x03a\x05\x8AWV[_\x80\xFD[\x90P5\x90a\x05\x9B\x82a\x05zV[V[_\x80\xFD[_\x80\xFD[\x90a\x05\xB8a\x05\xB1a\x01RV[\x92\x83a\x02\x89V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xD8Wa\x05\xD4` \x91a\x02kV[\x01\x90V[a\x02uV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x05\xFDa\x05\xF8\x82a\x05\xBAV[a\x05\xA5V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x06\x19Wa\x06\x17\x92a\x05\xDDV[V[a\x05\xA1V[\x90\x80`\x1F\x83\x01\x12\x15a\x06<W\x81` a\x069\x935\x91\x01a\x05\xE8V[\x90V[a\x05\x9DV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06YW` \x80\x91\x02\x01\x90V[a\x02uV[_\x80\xFD[\x90\x92\x91\x92a\x06wa\x06r\x82a\x06AV[a\x05\xA5V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x06\xB4W\x91[\x83\x83\x10a\x06\x9BWPPPPV[` \x80\x91a\x06\xA9\x84\x86a\x03\xC0V[\x81R\x01\x92\x01\x91a\x06\x8EV[a\x06^V[\x90\x80`\x1F\x83\x01\x12\x15a\x06\xD7W\x81` a\x06\xD4\x935\x91\x01a\x06bV[\x90V[a\x05\x9DV[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\x07\xFBWa\x06\xF6\x83_\x83\x01a\x03\xC0V[\x92a\x07\x04\x81` \x84\x01a\x05fV[\x92a\x07\x12\x82`@\x85\x01a\x05fV[\x92a\x07 \x83``\x83\x01a\x03\xC0V[\x92a\x07.\x81`\x80\x84\x01a\x03\xC0V[\x92a\x07<\x82`\xA0\x85\x01a\x05\x8EV[\x92a\x07J\x83`\xC0\x83\x01a\x05fV[\x92a\x07X\x81`\xE0\x84\x01a\x05fV[\x92a\x07g\x82a\x01\0\x85\x01a\x03\xC0V[\x92a\x07v\x83a\x01 \x83\x01a\x05fV[\x92a\x07\x85\x81a\x01@\x84\x01a\x03\xC0V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xF6W\x82a\x07\xA7\x91\x85\x01a\x06\x1EV[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xF1W\x83a\x07\xC9\x91\x83\x01a\x06\x1EV[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xECWa\x07\xE9\x92\x01a\x06\xB9V[\x90V[a\x03\x91V[a\x03\x91V[a\x03\x91V[a\x01\\V[4a\x08AWa\x08+a\x08\x136`\x04a\x06\xDCV[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1C\xCDV[a\x083a\x01RV[\x80a\x08=\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x08\x84W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x08\x7FW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x08zWV[a\x06^V[a\x08FV[a\x05\x9DV[\x90` \x82\x82\x03\x12a\x08\xBAW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xB5Wa\x08\xB1\x92\x01a\x08JV[\x90\x91V[a\x03\x91V[a\x01\\V[4a\x08\xEEWa\x08\xD8a\x08\xD26`\x04a\x08\x89V[\x90a\x1E{V[a\x08\xE0a\x01RV[\x80a\x08\xEA\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[a\x08\xFF`\n_\x90a\x02\xD4V[\x90V[4a\t2Wa\t\x126`\x04a\x01`V[a\t.a\t\x1Da\x08\xF3V[a\t%a\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[a\tC`\x01_\x90a\x04LV[\x90V[4a\tvWa\tV6`\x04a\x01`V[a\tra\taa\t7V[a\tia\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\t\x87`\x04_\x90a\x04\xDBV[\x90V[4a\t\xBAWa\t\x9A6`\x04a\x01`V[a\t\xB6a\t\xA5a\t{V[a\t\xADa\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[a\t\xC9_\x80a\x04LV[\x90V[4a\t\xFCWa\t\xDC6`\x04a\x01`V[a\t\xF8a\t\xE7a\t\xBFV[a\t\xEFa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\n\r`\x08_\x90a\x04\xDBV[\x90V[4a\n@Wa\n 6`\x04a\x01`V[a\n<a\n+a\n\x01V[a\n3a\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[a\nQ`\x02_\x90a\x04LV[\x90V[4a\n\x84Wa\nd6`\x04a\x01`V[a\n\x80a\noa\nEV[a\nwa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\n\x95`\x03_\x90a\x04LV[\x90V[4a\n\xC8Wa\n\xA86`\x04a\x01`V[a\n\xC4a\n\xB3a\n\x89V[a\n\xBBa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x0B\x07W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x0B\x02W` \x01\x92` \x83\x02\x84\x01\x11a\n\xFDWV[a\x06^V[a\x08FV[a\x05\x9DV[\x90` \x82\x82\x03\x12a\x0B=W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B8Wa\x0B4\x92\x01a\n\xCDV[\x90\x91V[a\x03\x91V[a\x01\\V[4a\x0BqWa\x0B[a\x0BU6`\x04a\x0B\x0CV[\x90a BV[a\x0Bca\x01RV[\x80a\x0Bm\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[a\x0B\x82`\x07_\x90a\x04\xDBV[\x90V[4a\x0B\xB5Wa\x0B\x956`\x04a\x01`V[a\x0B\xB1a\x0B\xA0a\x0BvV[a\x0B\xA8a\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[`\xFF\x16\x90V[a\x0B\xD0\x90`\x08a\x0B\xD5\x93\x02a\x04%V[a\x0B\xBAV[\x90V[\x90a\x0B\xE3\x91Ta\x0B\xC0V[\x90V[a\x0B\xF3`\x03`\x14\x90a\x0B\xD8V[\x90V[a\x0B\xFF\x90a\x05uV[\x90RV[\x91\x90a\x0C\x16\x90_` \x85\x01\x94\x01\x90a\x0B\xF6V[V[4a\x0CHWa\x0C(6`\x04a\x01`V[a\x0CDa\x0C3a\x0B\xE6V[a\x0C;a\x01RV[\x91\x82\x91\x82a\x0C\x03V[\x03\x90\xF3[a\x01XV[4a\x0C{Wa\x0Cea\x0C`6`\x04a\x03\xCFV[a!.V[a\x0Cma\x01RV[\x80a\x0Cw\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0C\x99Wa\x0C\x96\x91_\x01a\x05fV[\x90V[a\x01\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x0C\xC8\x81a\x0C\xB2V[\x82\x10\x15a\x0C\xE2Wa\x0C\xDA`\x01\x91a\x0C\xB6V[\x91\x02\x01\x90_\x90V[a\x0C\x9EV[`\x0Ca\x0C\xF2\x81a\x0C\xB2V[\x82\x10\x15a\r\x0FWa\r\x0C\x91a\r\x06\x91a\x0C\xBFV[\x90a\x04LV[\x90V[_\x80\xFD[4a\rCWa\r?a\r.a\r)6`\x04a\x0C\x80V[a\x0C\xE7V[a\r6a\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\rT`\x05_\x90a\x04\xDBV[\x90V[4a\r\x87Wa\rg6`\x04a\x01`V[a\r\x83a\rra\rHV[a\rza\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x1C\x90V[a\r\xA1a\r\xA6\x91a\r\x90V[a\x04)V[\x90V[a\r\xB3\x90Ta\r\x95V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\r\xEA`\x17` \x92a\x02\xFFV[a\r\xF3\x81a\r\xB6V[\x01\x90V[a\x0E\x0C\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\xDDV[\x90V[\x15a\x0E\x16WV[a\x0E\x1Ea\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E4`\x04\x82\x01a\r\xF7V[\x03\x90\xFD[a\x0Ee\x90a\x0E`3a\x0EZa\x0ETa\x0EO_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a\x0F\xB4V[V[\x90V[\x90V[a\x0E\x81a\x0E|a\x0E\x86\x92a\x0EgV[a\x0EjV[a\x03\x95V[\x90V[a\x0E\x92\x90a\x0EmV[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0E\xEF`'`@\x92a\x02\xFFV[a\x0E\xF8\x81a\x0E\x95V[\x01\x90V[a\x0F\x11\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xE2V[\x90V[\x15a\x0F\x1BWV[a\x0F#a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0F9`\x04\x82\x01a\x0E\xFCV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0FS`\x01\x80`\xA0\x1B\x03\x91a\x0F=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Fqa\x0Fla\x0Fv\x92a\x03\x95V[a\x0EjV[a\x03\x95V[\x90V[a\x0F\x82\x90a\x0F]V[\x90V[a\x0F\x8E\x90a\x0FyV[\x90V[\x90V[\x90a\x0F\xA9a\x0F\xA4a\x0F\xB0\x92a\x0F\x85V[a\x0F\x91V[\x82Ta\x0FBV[\x90UV[a\x0F\xD9\x81a\x0F\xD2a\x0F\xCCa\x0F\xC7_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x0F\x14V[a\x0F\xE4\x81`\ta\x0F\x94V[a\x10\x0E\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0F\x85V[\x90a\x10\x17a\x01RV[\x80a\x10!\x81a\x03\xEDV[\x03\x90\xA2V[a\x10/\x90a\x0E8V[V[`@\x1C\x90V[a\x10Ca\x10H\x91a\x101V[a\x0B\xBAV[\x90V[a\x10U\x90Ta\x107V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10qa\x10v\x91a\r\x90V[a\x10XV[\x90V[a\x10\x83\x90Ta\x10eV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\xA7a\x10\xA2a\x10\xAC\x92a\x0EgV[a\x0EjV[a\x10\x86V[\x90V[\x90V[a\x10\xC6a\x10\xC1a\x10\xCB\x92a\x10\xAFV[a\x0EjV[a\x10\x86V[\x90V[a\x10\xD7\x90a\x0FyV[\x90V[a\x10\xEEa\x10\xE9a\x10\xF3\x92a\x0EgV[a\x0EjV[a\x04\xF8V[\x90V[\x90a\x11\tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0F=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11'a\x11\"a\x11,\x92a\x10\x86V[a\x0EjV[a\x10\x86V[\x90V[\x90V[\x90a\x11Ga\x11Ba\x11N\x92a\x11\x13V[a\x11/V[\x82Ta\x10\xF6V[\x90UV[`@\x1B\x90V[\x90a\x11lh\xFF\0\0\0\0\0\0\0\0\x91a\x11RV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\x7F\x90a\x05uV[\x90V[\x90V[\x90a\x11\x9Aa\x11\x95a\x11\xA1\x92a\x11vV[a\x11\x82V[\x82Ta\x11XV[\x90UV[a\x11\xAE\x90a\x10\xB2V[\x90RV[\x91\x90a\x11\xC5\x90_` \x85\x01\x94\x01\x90a\x11\xA5V[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x11\xDCa!9V[`\x80Ra\x11\xF5a\x11\xEF_`\x80Q\x01a\x10KV[\x15a\x05uV[`\xA0Ra\x12\x05_`\x80Q\x01a\x10yV[\x80a\x12\x18a\x12\x12_a\x10\x93V[\x91a\x10\x86V[\x14\x80a\x13AW[\x90a\x123a\x12-`\x01a\x10\xB2V[\x91a\x10\x86V[\x14\x80a\x13\x19W[a\x12E\x90\x91\x15a\x05uV[\x90\x81a\x13\x08W[Pa\x12\xE5Wa\x12y\x9Da\x12la\x12b`\x01a\x10\xB2V[_`\x80Q\x01a\x112V[`\xA0Qa\x12\xD1W[a\x1B;V[`\xA0Qa\x12\x83W[V[a\x12\x91_\x80`\x80Q\x01a\x11\x85V[`\x01a\x12\xC9\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x12\xC0a\x01RV[\x91\x82\x91\x82a\x11\xB2V[\x03\x90\xA1a\x12\x81V[a\x12\xE0`\x01_`\x80Q\x01a\x11\x85V[a\x12tV[a\x12\xEDa\x01RV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x13\x04`\x04\x82\x01a\x03\xEDV[\x03\x90\xFD[a\x13\x13\x91P\x15a\x05uV[_a\x12LV[Pa\x12Ea\x13&0a\x10\xCEV[;a\x139a\x133_a\x10\xDAV[\x91a\x04\xF8V[\x14\x90Pa\x12:V[P`\xA0Qa\x12\x1FV[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x13~`\x1C` \x92a\x02\xFFV[a\x13\x87\x81a\x13JV[\x01\x90V[a\x13\xA0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13qV[\x90V[\x15a\x13\xAAWV[a\x13\xB2a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13\xC8`\x04\x82\x01a\x13\x8BV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x14\0`\x17` \x92a\x02\xFFV[a\x14\t\x81a\x13\xCCV[\x01\x90V[a\x14\"\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xF3V[\x90V[\x15a\x14,WV[a\x144a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14J`\x04\x82\x01a\x14\rV[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x14\xA8`\"`@\x92a\x02\xFFV[a\x14\xB1\x81a\x14NV[\x01\x90V[a\x14\xCA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14\x9BV[\x90V[\x15a\x14\xD4WV[a\x14\xDCa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xF2`\x04\x82\x01a\x14\xB5V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x15P`&`@\x92a\x02\xFFV[a\x15Y\x81a\x14\xF6V[\x01\x90V[a\x15r\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15CV[\x90V[\x15a\x15|WV[a\x15\x84a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\x9A`\x04\x82\x01a\x15]V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x15\xF8`%`@\x92a\x02\xFFV[a\x16\x01\x81a\x15\x9EV[\x01\x90V[a\x16\x1A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xEBV[\x90V[\x15a\x16$WV[a\x16,a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16B`\x04\x82\x01a\x16\x05V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x16\xA0`*`@\x92a\x02\xFFV[a\x16\xA9\x81a\x16FV[\x01\x90V[a\x16\xC2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\x93V[\x90V[\x15a\x16\xCCWV[a\x16\xD4a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xEA`\x04\x82\x01a\x16\xADV[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x17H`#`@\x92a\x02\xFFV[a\x17Q\x81a\x16\xEEV[\x01\x90V[a\x17j\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17;V[\x90V[\x15a\x17tWV[a\x17|a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x92`\x04\x82\x01a\x17UV[\x03\x90\xFD[\x90a\x17\xA2_\x19\x91a\x0F=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x17\xC0a\x17\xBBa\x17\xC5\x92a\x04\xF8V[a\x0EjV[a\x04\xF8V[\x90V[\x90V[\x90a\x17\xE0a\x17\xDBa\x17\xE7\x92a\x17\xACV[a\x17\xC8V[\x82Ta\x17\x96V[\x90UV[`\xA0\x1B\x90V[\x90a\x18\0`\xFF`\xA0\x1B\x91a\x17\xEBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x18\x1Fa\x18\x1Aa\x18&\x92a\x11vV[a\x11\x82V[\x82Ta\x17\xF1V[\x90UV[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x18S\x91\x02\x91a\x18M_\x19\x84a\x184V[\x92a\x184V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x18sa\x18na\x18{\x93a\x17\xACV[a\x17\xC8V[\x90\x83Ta\x188V[\x90UV[_\x90V[a\x18\x95\x91a\x18\x8Fa\x18\x7FV[\x91a\x18]V[V[[\x81\x81\x10a\x18\xA3WPPV[\x80a\x18\xB0_`\x01\x93a\x18\x83V[\x01a\x18\x98V[\x91\x90`\x1F\x81\x11a\x18\xC6W[PPPV[a\x18\xD2a\x18\xF7\x93a\x01\xC9V[\x90` a\x18\xDE\x84a\x18*V[\x83\x01\x93\x10a\x18\xFFW[a\x18\xF0\x90a\x18*V[\x01\x90a\x18\x97V[_\x80\x80a\x18\xC1V[\x91Pa\x18\xF0\x81\x92\x90Pa\x18\xE7V[\x90a\x19\x1D\x90_\x19\x90`\x08\x02a\x04%V[\x19\x16\x90V[\x81a\x19,\x91a\x19\rV[\x90`\x02\x02\x17\x90V[\x90a\x19>\x81a\x02\xFBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x19\xFEWa\x19b\x82a\x19\\\x85Ta\x01\x96V[\x85a\x18\xB6V[` \x90`\x1F\x83\x11`\x01\x14a\x19\x96W\x91\x80\x91a\x19\x85\x93_\x92a\x19\x8AW[PPa\x19\"V[\x90U[V[\x90\x91P\x01Q_\x80a\x19~V[`\x1F\x19\x83\x16\x91a\x19\xA5\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x19\xE6WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x19\xCCW[PPP\x02\x01\x90Ua\x19\x88V[a\x19\xDC\x91\x01Q`\x1F\x84\x16\x90a\x19\rV[\x90U_\x80\x80a\x19\xC0V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x19\xA8V[a\x02uV[\x90a\x1A\r\x91a\x194V[V[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1A&WPPV[\x80a\x1A3_`\x01\x93a\x18\x83V[\x01a\x1A\x1BV[\x90\x91\x82\x81\x10a\x1AHW[PPPV[a\x1Afa\x1A`a\x1AZa\x1Aq\x95a\x1A\x0FV[\x92a\x1A\x0FV[\x92a\x0C\xB6V[\x91\x82\x01\x91\x01\x90a\x1A\x1AV[_\x80\x80a\x1ACV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1A\xA2W\x81a\x1A\x97a\x1A\xA0\x93a\x0C\xB2V[\x90\x82\x81Ua\x1A9V[V[a\x02uV[Q\x90V[a\x1A\xB5\x90Qa\x03\xA0V[\x90V[` \x01\x90V[a\x1A\xC7\x82a\x1A\xA7V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1B*Wa\x1A\xF5a\x1A\xEF`\x01\x92a\x1A\xEA\x86\x86a\x1AyV[a\x1A\xB8V[\x92a\x0C\xB6V[\x92\x04\x91_[\x83\x81\x10a\x1B\x07WPPPPV[`\x01\x90` a\x1B\x1Da\x1B\x18\x86a\x1A\xABV[a\x0F\x91V[\x94\x01\x93\x81\x84\x01U\x01a\x1A\xFAV[a\x02uV[\x90a\x1B9\x91a\x1A\xBEV[V[\x9B\x97a\x1C\x9Ca\x1C\xB8\x98a\x1C\xCB\x9F\x9C\x96\x8F\x99a\x1C\xC6\x9F\x9Aa\x1C\xB1\x9Aa\x1C\xBF\x9F\x98a\x1C\x95\x94a\x1C\x80a\x1C\xAA\x9Ca\x1Cy\x8F\x94a\x1Cra\x1C\xA3\x9Ea\x1Ck\x8F\x98a\x1CJa\x1C\x87\x9Aa\x1B\xA5a\x1C\x8E\x9Ea\x1B\x9Ea\x1B\x98a\x1B\x93_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x13\xA3V[a\x1B\xC2\x85a\x1B\xBBa\x1B\xB5_a\x10\xDAV[\x91a\x04\xF8V[\x14\x15a\x14%V[a\x1B\xDF\x87a\x1B\xD8a\x1B\xD2_a\x10\xDAV[\x91a\x04\xF8V[\x14\x15a\x14\xCDV[a\x1C\x04\x89a\x1B\xFDa\x1B\xF7a\x1B\xF2_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x15uV[a\x1C)\x8Ba\x1C\"a\x1C\x1Ca\x1C\x17_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x16\x1DV[a\x1CCa\x1C=a\x1C8_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x16\xC5V[a\x1Cda\x1C^a\x1CY_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x17mV[`\x04a\x17\xCBV[`\x05a\x17\xCBV[`\x01a\x0F\x94V[`\x02a\x0F\x94V[`\x03a\x18\nV[`\x06a\x17\xCBV[`\x07a\x17\xCBV[`\x03a\x0F\x94V[`\x08a\x17\xCBV[`\ta\x0F\x94V[`\na\x1A\x03V[`\x0Ba\x1A\x03V[`\x0Ca\x1B/V[a!]V[V[\x90a\x1C\xE3\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x11\xC7V[V[\x90a\x1D\x13\x91a\x1D\x0E3a\x1D\x08a\x1D\x02a\x1C\xFD_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a\x1E2V[V[P\x90V[\x91a\x1D$\x90\x82a\x1D\x15V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1D\xE3Wa\x1DH\x82a\x1DB\x85Ta\x01\x96V[\x85a\x18\xB6V[_\x90`\x1F\x83\x11`\x01\x14a\x1D{W\x91\x80\x91a\x1Dj\x93_\x92a\x1DoW[PPa\x19\"V[\x90U[V[\x90\x91P\x015_\x80a\x1DcV[`\x1F\x19\x83\x16\x91a\x1D\x8A\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x1D\xCBWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1D\xB1W[PPP\x02\x01\x90Ua\x1DmV[a\x1D\xC1\x91\x015`\x1F\x84\x16\x90a\x19\rV[\x90U_\x80\x80a\x1D\xA5V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x1D\x8DV[a\x02uV[\x90a\x1D\xF3\x92\x91a\x1D\x19V[V[\x91\x90a\x1E\x0F\x81a\x1E\x08\x81a\x1E\x14\x95a\x02\xFFV[\x80\x95a\x05\xDDV[a\x02kV[\x01\x90V[\x90\x91a\x1E/\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x1D\xF5V[\x90V[a\x1E?\x81\x83\x90`\na\x1D\xE8V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1Eva\x1Ema\x01RV[\x92\x83\x92\x83a\x1E\x18V[\x03\x90\xA1V[\x90a\x1E\x85\x91a\x1C\xE5V[V[\x90a\x1E\xB5\x91a\x1E\xB03a\x1E\xAAa\x1E\xA4a\x1E\x9F_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a\x1F\xF9V[V[P\x90V[5a\x1E\xC5\x81a\x03\xACV[\x90V[\x90V[\x90\x91a\x1E\xD7\x90\x83a\x1E\xB7V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1F:Wa\x1F\x05a\x1E\xFF`\x01\x92a\x1E\xFA\x86\x86a\x1AyV[a\x1E\xC8V[\x92a\x0C\xB6V[\x92\x04\x91_[\x83\x81\x10a\x1F\x17WPPPPV[`\x01\x90` a\x1F-a\x1F(\x86a\x1E\xBBV[a\x0F\x91V[\x94\x01\x93\x81\x84\x01U\x01a\x1F\nV[a\x02uV[\x90a\x1FJ\x92\x91a\x1E\xCBV[V[` \x91\x81R\x01\x90V[a\x1F^\x90a\x03\xA0V[\x90RV[\x90a\x1Fo\x81` \x93a\x1FUV[\x01\x90V[Pa\x1F\x82\x90` \x81\x01\x90a\x03\xC0V[\x90V[` \x01\x90V[\x91a\x1F\x99\x82a\x1F\x9F\x92a\x1FLV[\x92a\x1E\xC8V[\x90\x81_\x90[\x82\x82\x10a\x1F\xB2WPPPP\x90V[\x90\x91\x92\x93a\x1F\xD4a\x1F\xCE`\x01\x92a\x1F\xC9\x88\x86a\x1FsV[a\x1FbV[\x95a\x1F\x85V[\x92\x01\x90\x92\x91\x92a\x1F\xA4V[\x90\x91a\x1F\xF6\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x1F\x8BV[\x90V[a \x06\x81\x83\x90`\x0Ca\x1F?V[\x90\x7F\xB4\xA2\x86jX6\x99\xC6\xED{w\xA1R\x1F\xADBO\x8E\xDC\xCA0`\x1FD,*[v\xA0\x10[\xE2\x91a =a 4a\x01RV[\x92\x83\x92\x83a\x1F\xDFV[\x03\x90\xA1V[\x90a L\x91a\x1E\x87V[V[a {\x90a v3a pa ja e_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a \xFEV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a \xB0` \x80\x92a\x02\xFFV[a \xB9\x81a }V[\x01\x90V[a \xD2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra \xA4V[\x90V[\x15a \xDCWV[a \xE4a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a \xFA`\x04\x82\x01a \xBDV[\x03\x90\xFD[a!,\x90a!'\x81a! a!\x1Aa!\x15_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a \xD5V[a!]V[V[a!7\x90a NV[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a!f_a\r\xA9V[a!p\x82_a\x0F\x94V[\x90a!\xA4a!\x9E\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\x85V[\x91a\x0F\x85V[\x91a!\xADa\x01RV[\x80a!\xB7\x81a\x03\xEDV[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 _B\x18/8?P\xDF\x98\xB2D/\x9Fi\x9E5\x85<\xB1aN9\xA4D\xBD\xC4\x9D\xCC\n\xFF\xE3adsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60c06040526004361015610013575b610d8c565b61001d5f3561014c565b80630743bf6e146101475780632a84b0f01461014257806341fc712d1461013d57806357d1ba25146101385780635a2d9c181461013357806362c73caa1461012e57806366a1d108146101295780636edd6c091461012457806385e1f4d01461011f5780638da5cb5b1461011a578063a3c6e1e714610115578063aa6a43d814610110578063bf6db6f81461010b578063cb60840814610106578063d1f4737c14610101578063e79388e6146100fc578063f2fde38b146100f7578063f881afaf146100f25763f8a144be0361000e57610d57565b610d13565b610c4d565b610c18565b610b85565b610b42565b610a98565b610a54565b610a10565b6109cc565b61098a565b610946565b610902565b6108bf565b610800565b61051d565b61048b565b6103f2565b61035c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101b6575b60208310146101b157565b610182565b91607f16916101a6565b60209181520190565b5f5260205f2090565b905f92918054906101ec6101e583610196565b80946101c0565b916001811690815f146102435750600114610207575b505050565b61021491929394506101c9565b915f925b81841061022b57505001905f8080610202565b60018160209295939554848601520191019290610218565b92949550505060ff19168252151560200201905f8080610202565b90610268916101d2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102939061026b565b810190811067ffffffffffffffff8211176102ad57604052565b610275565b906102d26102cb926102c2610152565b9384809261025e565b0383610289565b565b905f106102e7576102e4906102b2565b90565b61016f565b6102f8600b5f906102d4565b90565b5190565b60209181520190565b90825f9392825e0152565b61033261033b60209361034093610329816102fb565b938480936102ff565b95869101610308565b61026b565b0190565b6103599160208201915f818403910152610313565b90565b3461038c5761036c366004610160565b6103886103776102ec565b61037f610152565b91829182610344565b0390f35b610158565b5f80fd5b60018060a01b031690565b6103a990610395565b90565b6103b5816103a0565b036103bc57565b5f80fd5b905035906103cd826103ac565b565b906020828203126103e8576103e5915f016103c0565b90565b61015c565b5f0190565b346104205761040a6104053660046103cf565b611026565b610412610152565b8061041c816103ed565b0390f35b610158565b1c90565b60018060a01b031690565b6104449060086104499302610425565b610429565b90565b906104579154610434565b90565b61046660095f9061044c565b90565b610472906103a0565b9052565b9190610489905f60208501940190610469565b565b346104bb5761049b366004610160565b6104b76104a661045a565b6104ae610152565b91829182610476565b0390f35b610158565b90565b6104d39060086104d89302610425565b6104c0565b90565b906104e691546104c3565b90565b6104f560065f906104db565b90565b90565b610504906104f8565b9052565b919061051b905f602085019401906104fb565b565b3461054d5761052d366004610160565b6105496105386104e9565b610540610152565b91829182610508565b0390f35b610158565b61055b816104f8565b0361056257565b5f80fd5b9050359061057382610552565b565b151590565b61058381610575565b0361058a57565b5f80fd5b9050359061059b8261057a565b565b5f80fd5b5f80fd5b906105b86105b1610152565b9283610289565b565b67ffffffffffffffff81116105d8576105d460209161026b565b0190565b610275565b90825f939282370152565b909291926105fd6105f8826105ba565b6105a5565b9381855260208501908284011161061957610617926105dd565b565b6105a1565b9080601f8301121561063c57816020610639933591016105e8565b90565b61059d565b67ffffffffffffffff81116106595760208091020190565b610275565b5f80fd5b9092919261067761067282610641565b6105a5565b93818552602080860192028301928184116106b457915b83831061069b5750505050565b602080916106a984866103c0565b81520192019161068e565b61065e565b9080601f830112156106d7578160206106d493359101610662565b90565b61059d565b9190916101c0818403126107fb576106f6835f83016103c0565b926107048160208401610566565b926107128260408501610566565b9261072083606083016103c0565b9261072e81608084016103c0565b9261073c8260a0850161058e565b9261074a8360c08301610566565b926107588160e08401610566565b926107678261010085016103c0565b92610776836101208301610566565b926107858161014084016103c0565b9261016083013567ffffffffffffffff81116107f657826107a791850161061e565b9261018081013567ffffffffffffffff81116107f157836107c991830161061e565b926101a082013567ffffffffffffffff81116107ec576107e992016106b9565b90565b610391565b610391565b610391565b61015c565b346108415761082b6108133660046106dc565b9c9b909b9a919a999299989398979497969596611ccd565b610833610152565b8061083d816103ed565b0390f35b610158565b5f80fd5b909182601f830112156108845781359167ffffffffffffffff831161087f57602001926001830284011161087a57565b61065e565b610846565b61059d565b906020828203126108ba575f82013567ffffffffffffffff81116108b5576108b1920161084a565b9091565b610391565b61015c565b346108ee576108d86108d2366004610889565b90611e7b565b6108e0610152565b806108ea816103ed565b0390f35b610158565b6108ff600a5f906102d4565b90565b3461093257610912366004610160565b61092e61091d6108f3565b610925610152565b91829182610344565b0390f35b610158565b61094360015f9061044c565b90565b3461097657610956366004610160565b610972610961610937565b610969610152565b91829182610476565b0390f35b610158565b61098760045f906104db565b90565b346109ba5761099a366004610160565b6109b66109a561097b565b6109ad610152565b91829182610508565b0390f35b610158565b6109c95f8061044c565b90565b346109fc576109dc366004610160565b6109f86109e76109bf565b6109ef610152565b91829182610476565b0390f35b610158565b610a0d60085f906104db565b90565b34610a4057610a20366004610160565b610a3c610a2b610a01565b610a33610152565b91829182610508565b0390f35b610158565b610a5160025f9061044c565b90565b34610a8457610a64366004610160565b610a80610a6f610a45565b610a77610152565b91829182610476565b0390f35b610158565b610a9560035f9061044c565b90565b34610ac857610aa8366004610160565b610ac4610ab3610a89565b610abb610152565b91829182610476565b0390f35b610158565b909182601f83011215610b075781359167ffffffffffffffff8311610b02576020019260208302840111610afd57565b61065e565b610846565b61059d565b90602082820312610b3d575f82013567ffffffffffffffff8111610b3857610b349201610acd565b9091565b610391565b61015c565b34610b7157610b5b610b55366004610b0c565b90612042565b610b63610152565b80610b6d816103ed565b0390f35b610158565b610b8260075f906104db565b90565b34610bb557610b95366004610160565b610bb1610ba0610b76565b610ba8610152565b91829182610508565b0390f35b610158565b60ff1690565b610bd0906008610bd59302610425565b610bba565b90565b90610be39154610bc0565b90565b610bf36003601490610bd8565b90565b610bff90610575565b9052565b9190610c16905f60208501940190610bf6565b565b34610c4857610c28366004610160565b610c44610c33610be6565b610c3b610152565b91829182610c03565b0390f35b610158565b34610c7b57610c65610c603660046103cf565b61212e565b610c6d610152565b80610c77816103ed565b0390f35b610158565b90602082820312610c9957610c96915f01610566565b90565b61015c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610cc881610cb2565b821015610ce257610cda600191610cb6565b910201905f90565b610c9e565b600c610cf281610cb2565b821015610d0f57610d0c91610d0691610cbf565b9061044c565b90565b5f80fd5b34610d4357610d3f610d2e610d29366004610c80565b610ce7565b610d36610152565b91829182610476565b0390f35b610158565b610d5460055f906104db565b90565b34610d8757610d67366004610160565b610d83610d72610d48565b610d7a610152565b91829182610508565b0390f35b610158565b5f80fd5b5f1c90565b610da1610da691610d90565b610429565b90565b610db39054610d95565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610dea60176020926102ff565b610df381610db6565b0190565b610e0c9060208101905f818303910152610ddd565b90565b15610e1657565b610e1e610152565b62461bcd60e51b815280610e3460048201610df7565b0390fd5b610e6590610e6033610e5a610e54610e4f5f610da9565b6103a0565b916103a0565b14610e0f565b610fb4565b565b90565b90565b610e81610e7c610e8692610e67565b610e6a565b610395565b90565b610e9290610e6d565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610eef60276040926102ff565b610ef881610e95565b0190565b610f119060208101905f818303910152610ee2565b90565b15610f1b57565b610f23610152565b62461bcd60e51b815280610f3960048201610efc565b0390fd5b5f1b90565b90610f5360018060a01b0391610f3d565b9181191691161790565b610f71610f6c610f7692610395565b610e6a565b610395565b90565b610f8290610f5d565b90565b610f8e90610f79565b90565b90565b90610fa9610fa4610fb092610f85565b610f91565b8254610f42565b9055565b610fd981610fd2610fcc610fc75f610e89565b6103a0565b916103a0565b1415610f14565b610fe4816009610f94565b61100e7f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610f85565b90611017610152565b80611021816103ed565b0390a2565b61102f90610e38565b565b60401c90565b61104361104891611031565b610bba565b90565b6110559054611037565b90565b67ffffffffffffffff1690565b61107161107691610d90565b611058565b90565b6110839054611065565b90565b67ffffffffffffffff1690565b6110a76110a26110ac92610e67565b610e6a565b611086565b90565b90565b6110c66110c16110cb926110af565b610e6a565b611086565b90565b6110d790610f79565b90565b6110ee6110e96110f392610e67565b610e6a565b6104f8565b90565b9061110967ffffffffffffffff91610f3d565b9181191691161790565b61112761112261112c92611086565b610e6a565b611086565b90565b90565b9061114761114261114e92611113565b61112f565b82546110f6565b9055565b60401b90565b9061116c68ff000000000000000091611152565b9181191691161790565b61117f90610575565b90565b90565b9061119a6111956111a192611176565b611182565b8254611158565b9055565b6111ae906110b2565b9052565b91906111c5905f602085019401906111a5565b565b9c9b9a999897969594939291906111dc612139565b6080526111f56111ef5f6080510161104b565b15610575565b60a0526112055f60805101611079565b806112186112125f611093565b91611086565b1480611341575b9061123361122d60016110b2565b91611086565b1480611319575b611245909115610575565b9081611308575b506112e5576112799d61126c61126260016110b2565b5f60805101611132565b60a0516112d1575b611b3b565b60a051611283575b565b6112915f8060805101611185565b60016112c97fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916112c0610152565b918291826111b2565b0390a1611281565b6112e060015f60805101611185565b611274565b6112ed610152565b63f92ee8a960e01b815280611304600482016103ed565b0390fd5b611313915015610575565b5f61124c565b50611245611326306110ce565b3b6113396113335f6110da565b916104f8565b14905061123a565b5060a05161121f565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b61137e601c6020926102ff565b6113878161134a565b0190565b6113a09060208101905f818303910152611371565b90565b156113aa57565b6113b2610152565b62461bcd60e51b8152806113c86004820161138b565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61140060176020926102ff565b611409816113cc565b0190565b6114229060208101905f8183039101526113f3565b90565b1561142c57565b611434610152565b62461bcd60e51b81528061144a6004820161140d565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6114a860226040926102ff565b6114b18161144e565b0190565b6114ca9060208101905f81830391015261149b565b90565b156114d457565b6114dc610152565b62461bcd60e51b8152806114f2600482016114b5565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b61155060266040926102ff565b611559816114f6565b0190565b6115729060208101905f818303910152611543565b90565b1561157c57565b611584610152565b62461bcd60e51b81528061159a6004820161155d565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6115f860256040926102ff565b6116018161159e565b0190565b61161a9060208101905f8183039101526115eb565b90565b1561162457565b61162c610152565b62461bcd60e51b81528061164260048201611605565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6116a0602a6040926102ff565b6116a981611646565b0190565b6116c29060208101905f818303910152611693565b90565b156116cc57565b6116d4610152565b62461bcd60e51b8152806116ea600482016116ad565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61174860236040926102ff565b611751816116ee565b0190565b61176a9060208101905f81830391015261173b565b90565b1561177457565b61177c610152565b62461bcd60e51b81528061179260048201611755565b0390fd5b906117a25f1991610f3d565b9181191691161790565b6117c06117bb6117c5926104f8565b610e6a565b6104f8565b90565b90565b906117e06117db6117e7926117ac565b6117c8565b8254611796565b9055565b60a01b90565b9061180060ff60a01b916117eb565b9181191691161790565b9061181f61181a61182692611176565b611182565b82546117f1565b9055565b601f602091010490565b1b90565b9190600861185391029161184d5f1984611834565b92611834565b9181191691161790565b919061187361186e61187b936117ac565b6117c8565b908354611838565b9055565b5f90565b6118959161188f61187f565b9161185d565b565b5b8181106118a3575050565b806118b05f600193611883565b01611898565b9190601f81116118c6575b505050565b6118d26118f7936101c9565b9060206118de8461182a565b830193106118ff575b6118f09061182a565b0190611897565b5f80806118c1565b91506118f0819290506118e7565b9061191d905f1990600802610425565b191690565b8161192c9161190d565b906002021790565b9061193e816102fb565b9067ffffffffffffffff82116119fe576119628261195c8554610196565b856118b6565b602090601f831160011461199657918091611985935f9261198a575b5050611922565b90555b565b90915001515f8061197e565b601f198316916119a5856101c9565b925f5b8181106119e6575091600293918560019694106119cc575b50505002019055611988565b6119dc910151601f84169061190d565b90555f80806119c0565b919360206001819287870151815501950192016119a8565b610275565b90611a0d91611934565b565b600190818003010490565b5b818110611a26575050565b80611a335f600193611883565b01611a1b565b9091828110611a48575b505050565b611a66611a60611a5a611a7195611a0f565b92611a0f565b92610cb6565b918201910190611a1a565b5f8080611a43565b90680100000000000000008111611aa25781611a97611aa093610cb2565b90828155611a39565b565b610275565b5190565b611ab590516103a0565b90565b60200190565b611ac782611aa7565b9167ffffffffffffffff8311611b2a57611af5611aef600192611aea8686611a79565b611ab8565b92610cb6565b9204915f5b838110611b075750505050565b6001906020611b1d611b1886611aab565b610f91565b9401938184015501611afa565b610275565b90611b3991611abe565b565b9b97611c9c611cb898611ccb9f9c968f99611cc69f9a611cb19a611cbf9f98611c9594611c80611caa9c611c798f94611c72611ca39e611c6b8f98611c4a611c879a611ba5611c8e9e611b9e611b98611b935f610e89565b6103a0565b916103a0565b14156113a3565b611bc285611bbb611bb55f6110da565b916104f8565b1415611425565b611bdf87611bd8611bd25f6110da565b916104f8565b14156114cd565b611c0489611bfd611bf7611bf25f610e89565b6103a0565b916103a0565b1415611575565b611c298b611c22611c1c611c175f610e89565b6103a0565b916103a0565b141561161d565b611c43611c3d611c385f610e89565b6103a0565b916103a0565b14156116c5565b611c64611c5e611c595f610e89565b6103a0565b916103a0565b141561176d565b60046117cb565b60056117cb565b6001610f94565b6002610f94565b600361180a565b60066117cb565b60076117cb565b6003610f94565b60086117cb565b6009610f94565b600a611a03565b600b611a03565b600c611b2f565b61215d565b565b90611ce39d9c9b9a9998979695949392916111c7565b565b90611d1391611d0e33611d08611d02611cfd5f610da9565b6103a0565b916103a0565b14610e0f565b611e32565b565b5090565b91611d249082611d15565b9067ffffffffffffffff8211611de357611d4882611d428554610196565b856118b6565b5f90601f8311600114611d7b57918091611d6a935f92611d6f575b5050611922565b90555b565b90915001355f80611d63565b601f19831691611d8a856101c9565b925f5b818110611dcb57509160029391856001969410611db1575b50505002019055611d6d565b611dc1910135601f84169061190d565b90555f8080611da5565b91936020600181928787013581550195019201611d8d565b610275565b90611df39291611d19565b565b9190611e0f81611e0881611e14956102ff565b80956105dd565b61026b565b0190565b9091611e2f9260208301925f818503910152611df5565b90565b611e3f818390600a611de8565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611e76611e6d610152565b92839283611e18565b0390a1565b90611e8591611ce5565b565b90611eb591611eb033611eaa611ea4611e9f5f610da9565b6103a0565b916103a0565b14610e0f565b611ff9565b565b5090565b35611ec5816103ac565b90565b90565b9091611ed79083611eb7565b9167ffffffffffffffff8311611f3a57611f05611eff600192611efa8686611a79565b611ec8565b92610cb6565b9204915f5b838110611f175750505050565b6001906020611f2d611f2886611ebb565b610f91565b9401938184015501611f0a565b610275565b90611f4a9291611ecb565b565b60209181520190565b611f5e906103a0565b9052565b90611f6f81602093611f55565b0190565b50611f829060208101906103c0565b90565b60200190565b91611f9982611f9f92611f4c565b92611ec8565b90815f905b828210611fb2575050505090565b90919293611fd4611fce600192611fc98886611f73565b611f62565b95611f85565b920190929192611fa4565b9091611ff69260208301925f818503910152611f8b565b90565b612006818390600c611f3f565b907fb4a2866a583699c6ed7b77a1521fad424f8edcca30601f442c2a5b76a0105be29161203d612034610152565b92839283611fdf565b0390a1565b9061204c91611e87565b565b61207b906120763361207061206a6120655f610da9565b6103a0565b916103a0565b14610e0f565b6120fe565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b6120b0602080926102ff565b6120b98161207d565b0190565b6120d29060208101905f8183039101526120a4565b90565b156120dc57565b6120e4610152565b62461bcd60e51b8152806120fa600482016120bd565b0390fd5b61212c906121278161212061211a6121155f610e89565b6103a0565b916103a0565b14156120d5565b61215d565b565b6121379061204e565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6121665f610da9565b612170825f610f94565b906121a461219e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f85565b91610f85565b916121ad610152565b806121b7816103ed565b0390a356fea26469706673582212205f42182f383f50df98b2442f9f699e35853cb1614e39a444bdc49dcc0affe36164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\x8CV[a\0\x1D_5a\x01LV[\x80c\x07C\xBFn\x14a\x01GW\x80c*\x84\xB0\xF0\x14a\x01BW\x80cA\xFCq-\x14a\x01=W\x80cW\xD1\xBA%\x14a\x018W\x80cZ-\x9C\x18\x14a\x013W\x80cb\xC7<\xAA\x14a\x01.W\x80cf\xA1\xD1\x08\x14a\x01)W\x80cn\xDDl\t\x14a\x01$W\x80c\x85\xE1\xF4\xD0\x14a\x01\x1FW\x80c\x8D\xA5\xCB[\x14a\x01\x1AW\x80c\xA3\xC6\xE1\xE7\x14a\x01\x15W\x80c\xAAjC\xD8\x14a\x01\x10W\x80c\xBFm\xB6\xF8\x14a\x01\x0BW\x80c\xCB`\x84\x08\x14a\x01\x06W\x80c\xD1\xF4s|\x14a\x01\x01W\x80c\xE7\x93\x88\xE6\x14a\0\xFCW\x80c\xF2\xFD\xE3\x8B\x14a\0\xF7W\x80c\xF8\x81\xAF\xAF\x14a\0\xF2Wc\xF8\xA1D\xBE\x03a\0\x0EWa\rWV[a\r\x13V[a\x0CMV[a\x0C\x18V[a\x0B\x85V[a\x0BBV[a\n\x98V[a\nTV[a\n\x10V[a\t\xCCV[a\t\x8AV[a\tFV[a\t\x02V[a\x08\xBFV[a\x08\0V[a\x05\x1DV[a\x04\x8BV[a\x03\xF2V[a\x03\\V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xB6W[` \x83\x10\x14a\x01\xB1WV[a\x01\x82V[\x91`\x7F\x16\x91a\x01\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xECa\x01\xE5\x83a\x01\x96V[\x80\x94a\x01\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02CWP`\x01\x14a\x02\x07W[PPPV[a\x02\x14\x91\x92\x93\x94Pa\x01\xC9V[\x91_\x92[\x81\x84\x10a\x02+WPP\x01\x90_\x80\x80a\x02\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x02V[\x90a\x02h\x91a\x01\xD2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x93\x90a\x02kV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xADW`@RV[a\x02uV[\x90a\x02\xD2a\x02\xCB\x92a\x02\xC2a\x01RV[\x93\x84\x80\x92a\x02^V[\x03\x83a\x02\x89V[V[\x90_\x10a\x02\xE7Wa\x02\xE4\x90a\x02\xB2V[\x90V[a\x01oV[a\x02\xF8`\x0B_\x90a\x02\xD4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x032a\x03;` \x93a\x03@\x93a\x03)\x81a\x02\xFBV[\x93\x84\x80\x93a\x02\xFFV[\x95\x86\x91\x01a\x03\x08V[a\x02kV[\x01\x90V[a\x03Y\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x13V[\x90V[4a\x03\x8CWa\x03l6`\x04a\x01`V[a\x03\x88a\x03wa\x02\xECV[a\x03\x7Fa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA9\x90a\x03\x95V[\x90V[a\x03\xB5\x81a\x03\xA0V[\x03a\x03\xBCWV[_\x80\xFD[\x90P5\x90a\x03\xCD\x82a\x03\xACV[V[\x90` \x82\x82\x03\x12a\x03\xE8Wa\x03\xE5\x91_\x01a\x03\xC0V[\x90V[a\x01\\V[_\x01\x90V[4a\x04 Wa\x04\na\x04\x056`\x04a\x03\xCFV[a\x10&V[a\x04\x12a\x01RV[\x80a\x04\x1C\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04D\x90`\x08a\x04I\x93\x02a\x04%V[a\x04)V[\x90V[\x90a\x04W\x91Ta\x044V[\x90V[a\x04f`\t_\x90a\x04LV[\x90V[a\x04r\x90a\x03\xA0V[\x90RV[\x91\x90a\x04\x89\x90_` \x85\x01\x94\x01\x90a\x04iV[V[4a\x04\xBBWa\x04\x9B6`\x04a\x01`V[a\x04\xB7a\x04\xA6a\x04ZV[a\x04\xAEa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[\x90V[a\x04\xD3\x90`\x08a\x04\xD8\x93\x02a\x04%V[a\x04\xC0V[\x90V[\x90a\x04\xE6\x91Ta\x04\xC3V[\x90V[a\x04\xF5`\x06_\x90a\x04\xDBV[\x90V[\x90V[a\x05\x04\x90a\x04\xF8V[\x90RV[\x91\x90a\x05\x1B\x90_` \x85\x01\x94\x01\x90a\x04\xFBV[V[4a\x05MWa\x05-6`\x04a\x01`V[a\x05Ia\x058a\x04\xE9V[a\x05@a\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[a\x05[\x81a\x04\xF8V[\x03a\x05bWV[_\x80\xFD[\x90P5\x90a\x05s\x82a\x05RV[V[\x15\x15\x90V[a\x05\x83\x81a\x05uV[\x03a\x05\x8AWV[_\x80\xFD[\x90P5\x90a\x05\x9B\x82a\x05zV[V[_\x80\xFD[_\x80\xFD[\x90a\x05\xB8a\x05\xB1a\x01RV[\x92\x83a\x02\x89V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xD8Wa\x05\xD4` \x91a\x02kV[\x01\x90V[a\x02uV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x05\xFDa\x05\xF8\x82a\x05\xBAV[a\x05\xA5V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x06\x19Wa\x06\x17\x92a\x05\xDDV[V[a\x05\xA1V[\x90\x80`\x1F\x83\x01\x12\x15a\x06<W\x81` a\x069\x935\x91\x01a\x05\xE8V[\x90V[a\x05\x9DV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06YW` \x80\x91\x02\x01\x90V[a\x02uV[_\x80\xFD[\x90\x92\x91\x92a\x06wa\x06r\x82a\x06AV[a\x05\xA5V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x06\xB4W\x91[\x83\x83\x10a\x06\x9BWPPPPV[` \x80\x91a\x06\xA9\x84\x86a\x03\xC0V[\x81R\x01\x92\x01\x91a\x06\x8EV[a\x06^V[\x90\x80`\x1F\x83\x01\x12\x15a\x06\xD7W\x81` a\x06\xD4\x935\x91\x01a\x06bV[\x90V[a\x05\x9DV[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\x07\xFBWa\x06\xF6\x83_\x83\x01a\x03\xC0V[\x92a\x07\x04\x81` \x84\x01a\x05fV[\x92a\x07\x12\x82`@\x85\x01a\x05fV[\x92a\x07 \x83``\x83\x01a\x03\xC0V[\x92a\x07.\x81`\x80\x84\x01a\x03\xC0V[\x92a\x07<\x82`\xA0\x85\x01a\x05\x8EV[\x92a\x07J\x83`\xC0\x83\x01a\x05fV[\x92a\x07X\x81`\xE0\x84\x01a\x05fV[\x92a\x07g\x82a\x01\0\x85\x01a\x03\xC0V[\x92a\x07v\x83a\x01 \x83\x01a\x05fV[\x92a\x07\x85\x81a\x01@\x84\x01a\x03\xC0V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xF6W\x82a\x07\xA7\x91\x85\x01a\x06\x1EV[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xF1W\x83a\x07\xC9\x91\x83\x01a\x06\x1EV[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xECWa\x07\xE9\x92\x01a\x06\xB9V[\x90V[a\x03\x91V[a\x03\x91V[a\x03\x91V[a\x01\\V[4a\x08AWa\x08+a\x08\x136`\x04a\x06\xDCV[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1C\xCDV[a\x083a\x01RV[\x80a\x08=\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x08\x84W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x08\x7FW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x08zWV[a\x06^V[a\x08FV[a\x05\x9DV[\x90` \x82\x82\x03\x12a\x08\xBAW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xB5Wa\x08\xB1\x92\x01a\x08JV[\x90\x91V[a\x03\x91V[a\x01\\V[4a\x08\xEEWa\x08\xD8a\x08\xD26`\x04a\x08\x89V[\x90a\x1E{V[a\x08\xE0a\x01RV[\x80a\x08\xEA\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[a\x08\xFF`\n_\x90a\x02\xD4V[\x90V[4a\t2Wa\t\x126`\x04a\x01`V[a\t.a\t\x1Da\x08\xF3V[a\t%a\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[a\tC`\x01_\x90a\x04LV[\x90V[4a\tvWa\tV6`\x04a\x01`V[a\tra\taa\t7V[a\tia\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\t\x87`\x04_\x90a\x04\xDBV[\x90V[4a\t\xBAWa\t\x9A6`\x04a\x01`V[a\t\xB6a\t\xA5a\t{V[a\t\xADa\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[a\t\xC9_\x80a\x04LV[\x90V[4a\t\xFCWa\t\xDC6`\x04a\x01`V[a\t\xF8a\t\xE7a\t\xBFV[a\t\xEFa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\n\r`\x08_\x90a\x04\xDBV[\x90V[4a\n@Wa\n 6`\x04a\x01`V[a\n<a\n+a\n\x01V[a\n3a\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[a\nQ`\x02_\x90a\x04LV[\x90V[4a\n\x84Wa\nd6`\x04a\x01`V[a\n\x80a\noa\nEV[a\nwa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\n\x95`\x03_\x90a\x04LV[\x90V[4a\n\xC8Wa\n\xA86`\x04a\x01`V[a\n\xC4a\n\xB3a\n\x89V[a\n\xBBa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x0B\x07W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x0B\x02W` \x01\x92` \x83\x02\x84\x01\x11a\n\xFDWV[a\x06^V[a\x08FV[a\x05\x9DV[\x90` \x82\x82\x03\x12a\x0B=W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B8Wa\x0B4\x92\x01a\n\xCDV[\x90\x91V[a\x03\x91V[a\x01\\V[4a\x0BqWa\x0B[a\x0BU6`\x04a\x0B\x0CV[\x90a BV[a\x0Bca\x01RV[\x80a\x0Bm\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[a\x0B\x82`\x07_\x90a\x04\xDBV[\x90V[4a\x0B\xB5Wa\x0B\x956`\x04a\x01`V[a\x0B\xB1a\x0B\xA0a\x0BvV[a\x0B\xA8a\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[`\xFF\x16\x90V[a\x0B\xD0\x90`\x08a\x0B\xD5\x93\x02a\x04%V[a\x0B\xBAV[\x90V[\x90a\x0B\xE3\x91Ta\x0B\xC0V[\x90V[a\x0B\xF3`\x03`\x14\x90a\x0B\xD8V[\x90V[a\x0B\xFF\x90a\x05uV[\x90RV[\x91\x90a\x0C\x16\x90_` \x85\x01\x94\x01\x90a\x0B\xF6V[V[4a\x0CHWa\x0C(6`\x04a\x01`V[a\x0CDa\x0C3a\x0B\xE6V[a\x0C;a\x01RV[\x91\x82\x91\x82a\x0C\x03V[\x03\x90\xF3[a\x01XV[4a\x0C{Wa\x0Cea\x0C`6`\x04a\x03\xCFV[a!.V[a\x0Cma\x01RV[\x80a\x0Cw\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0C\x99Wa\x0C\x96\x91_\x01a\x05fV[\x90V[a\x01\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x0C\xC8\x81a\x0C\xB2V[\x82\x10\x15a\x0C\xE2Wa\x0C\xDA`\x01\x91a\x0C\xB6V[\x91\x02\x01\x90_\x90V[a\x0C\x9EV[`\x0Ca\x0C\xF2\x81a\x0C\xB2V[\x82\x10\x15a\r\x0FWa\r\x0C\x91a\r\x06\x91a\x0C\xBFV[\x90a\x04LV[\x90V[_\x80\xFD[4a\rCWa\r?a\r.a\r)6`\x04a\x0C\x80V[a\x0C\xE7V[a\r6a\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\rT`\x05_\x90a\x04\xDBV[\x90V[4a\r\x87Wa\rg6`\x04a\x01`V[a\r\x83a\rra\rHV[a\rza\x01RV[\x91\x82\x91\x82a\x05\x08V[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x1C\x90V[a\r\xA1a\r\xA6\x91a\r\x90V[a\x04)V[\x90V[a\r\xB3\x90Ta\r\x95V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\r\xEA`\x17` \x92a\x02\xFFV[a\r\xF3\x81a\r\xB6V[\x01\x90V[a\x0E\x0C\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\xDDV[\x90V[\x15a\x0E\x16WV[a\x0E\x1Ea\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E4`\x04\x82\x01a\r\xF7V[\x03\x90\xFD[a\x0Ee\x90a\x0E`3a\x0EZa\x0ETa\x0EO_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a\x0F\xB4V[V[\x90V[\x90V[a\x0E\x81a\x0E|a\x0E\x86\x92a\x0EgV[a\x0EjV[a\x03\x95V[\x90V[a\x0E\x92\x90a\x0EmV[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0E\xEF`'`@\x92a\x02\xFFV[a\x0E\xF8\x81a\x0E\x95V[\x01\x90V[a\x0F\x11\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xE2V[\x90V[\x15a\x0F\x1BWV[a\x0F#a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0F9`\x04\x82\x01a\x0E\xFCV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0FS`\x01\x80`\xA0\x1B\x03\x91a\x0F=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Fqa\x0Fla\x0Fv\x92a\x03\x95V[a\x0EjV[a\x03\x95V[\x90V[a\x0F\x82\x90a\x0F]V[\x90V[a\x0F\x8E\x90a\x0FyV[\x90V[\x90V[\x90a\x0F\xA9a\x0F\xA4a\x0F\xB0\x92a\x0F\x85V[a\x0F\x91V[\x82Ta\x0FBV[\x90UV[a\x0F\xD9\x81a\x0F\xD2a\x0F\xCCa\x0F\xC7_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x0F\x14V[a\x0F\xE4\x81`\ta\x0F\x94V[a\x10\x0E\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0F\x85V[\x90a\x10\x17a\x01RV[\x80a\x10!\x81a\x03\xEDV[\x03\x90\xA2V[a\x10/\x90a\x0E8V[V[`@\x1C\x90V[a\x10Ca\x10H\x91a\x101V[a\x0B\xBAV[\x90V[a\x10U\x90Ta\x107V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10qa\x10v\x91a\r\x90V[a\x10XV[\x90V[a\x10\x83\x90Ta\x10eV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\xA7a\x10\xA2a\x10\xAC\x92a\x0EgV[a\x0EjV[a\x10\x86V[\x90V[\x90V[a\x10\xC6a\x10\xC1a\x10\xCB\x92a\x10\xAFV[a\x0EjV[a\x10\x86V[\x90V[a\x10\xD7\x90a\x0FyV[\x90V[a\x10\xEEa\x10\xE9a\x10\xF3\x92a\x0EgV[a\x0EjV[a\x04\xF8V[\x90V[\x90a\x11\tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0F=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11'a\x11\"a\x11,\x92a\x10\x86V[a\x0EjV[a\x10\x86V[\x90V[\x90V[\x90a\x11Ga\x11Ba\x11N\x92a\x11\x13V[a\x11/V[\x82Ta\x10\xF6V[\x90UV[`@\x1B\x90V[\x90a\x11lh\xFF\0\0\0\0\0\0\0\0\x91a\x11RV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\x7F\x90a\x05uV[\x90V[\x90V[\x90a\x11\x9Aa\x11\x95a\x11\xA1\x92a\x11vV[a\x11\x82V[\x82Ta\x11XV[\x90UV[a\x11\xAE\x90a\x10\xB2V[\x90RV[\x91\x90a\x11\xC5\x90_` \x85\x01\x94\x01\x90a\x11\xA5V[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x11\xDCa!9V[`\x80Ra\x11\xF5a\x11\xEF_`\x80Q\x01a\x10KV[\x15a\x05uV[`\xA0Ra\x12\x05_`\x80Q\x01a\x10yV[\x80a\x12\x18a\x12\x12_a\x10\x93V[\x91a\x10\x86V[\x14\x80a\x13AW[\x90a\x123a\x12-`\x01a\x10\xB2V[\x91a\x10\x86V[\x14\x80a\x13\x19W[a\x12E\x90\x91\x15a\x05uV[\x90\x81a\x13\x08W[Pa\x12\xE5Wa\x12y\x9Da\x12la\x12b`\x01a\x10\xB2V[_`\x80Q\x01a\x112V[`\xA0Qa\x12\xD1W[a\x1B;V[`\xA0Qa\x12\x83W[V[a\x12\x91_\x80`\x80Q\x01a\x11\x85V[`\x01a\x12\xC9\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x12\xC0a\x01RV[\x91\x82\x91\x82a\x11\xB2V[\x03\x90\xA1a\x12\x81V[a\x12\xE0`\x01_`\x80Q\x01a\x11\x85V[a\x12tV[a\x12\xEDa\x01RV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x13\x04`\x04\x82\x01a\x03\xEDV[\x03\x90\xFD[a\x13\x13\x91P\x15a\x05uV[_a\x12LV[Pa\x12Ea\x13&0a\x10\xCEV[;a\x139a\x133_a\x10\xDAV[\x91a\x04\xF8V[\x14\x90Pa\x12:V[P`\xA0Qa\x12\x1FV[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x13~`\x1C` \x92a\x02\xFFV[a\x13\x87\x81a\x13JV[\x01\x90V[a\x13\xA0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13qV[\x90V[\x15a\x13\xAAWV[a\x13\xB2a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13\xC8`\x04\x82\x01a\x13\x8BV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x14\0`\x17` \x92a\x02\xFFV[a\x14\t\x81a\x13\xCCV[\x01\x90V[a\x14\"\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xF3V[\x90V[\x15a\x14,WV[a\x144a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14J`\x04\x82\x01a\x14\rV[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x14\xA8`\"`@\x92a\x02\xFFV[a\x14\xB1\x81a\x14NV[\x01\x90V[a\x14\xCA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14\x9BV[\x90V[\x15a\x14\xD4WV[a\x14\xDCa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xF2`\x04\x82\x01a\x14\xB5V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x15P`&`@\x92a\x02\xFFV[a\x15Y\x81a\x14\xF6V[\x01\x90V[a\x15r\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15CV[\x90V[\x15a\x15|WV[a\x15\x84a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\x9A`\x04\x82\x01a\x15]V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x15\xF8`%`@\x92a\x02\xFFV[a\x16\x01\x81a\x15\x9EV[\x01\x90V[a\x16\x1A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xEBV[\x90V[\x15a\x16$WV[a\x16,a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16B`\x04\x82\x01a\x16\x05V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x16\xA0`*`@\x92a\x02\xFFV[a\x16\xA9\x81a\x16FV[\x01\x90V[a\x16\xC2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\x93V[\x90V[\x15a\x16\xCCWV[a\x16\xD4a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xEA`\x04\x82\x01a\x16\xADV[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x17H`#`@\x92a\x02\xFFV[a\x17Q\x81a\x16\xEEV[\x01\x90V[a\x17j\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17;V[\x90V[\x15a\x17tWV[a\x17|a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x92`\x04\x82\x01a\x17UV[\x03\x90\xFD[\x90a\x17\xA2_\x19\x91a\x0F=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x17\xC0a\x17\xBBa\x17\xC5\x92a\x04\xF8V[a\x0EjV[a\x04\xF8V[\x90V[\x90V[\x90a\x17\xE0a\x17\xDBa\x17\xE7\x92a\x17\xACV[a\x17\xC8V[\x82Ta\x17\x96V[\x90UV[`\xA0\x1B\x90V[\x90a\x18\0`\xFF`\xA0\x1B\x91a\x17\xEBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x18\x1Fa\x18\x1Aa\x18&\x92a\x11vV[a\x11\x82V[\x82Ta\x17\xF1V[\x90UV[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x18S\x91\x02\x91a\x18M_\x19\x84a\x184V[\x92a\x184V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x18sa\x18na\x18{\x93a\x17\xACV[a\x17\xC8V[\x90\x83Ta\x188V[\x90UV[_\x90V[a\x18\x95\x91a\x18\x8Fa\x18\x7FV[\x91a\x18]V[V[[\x81\x81\x10a\x18\xA3WPPV[\x80a\x18\xB0_`\x01\x93a\x18\x83V[\x01a\x18\x98V[\x91\x90`\x1F\x81\x11a\x18\xC6W[PPPV[a\x18\xD2a\x18\xF7\x93a\x01\xC9V[\x90` a\x18\xDE\x84a\x18*V[\x83\x01\x93\x10a\x18\xFFW[a\x18\xF0\x90a\x18*V[\x01\x90a\x18\x97V[_\x80\x80a\x18\xC1V[\x91Pa\x18\xF0\x81\x92\x90Pa\x18\xE7V[\x90a\x19\x1D\x90_\x19\x90`\x08\x02a\x04%V[\x19\x16\x90V[\x81a\x19,\x91a\x19\rV[\x90`\x02\x02\x17\x90V[\x90a\x19>\x81a\x02\xFBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x19\xFEWa\x19b\x82a\x19\\\x85Ta\x01\x96V[\x85a\x18\xB6V[` \x90`\x1F\x83\x11`\x01\x14a\x19\x96W\x91\x80\x91a\x19\x85\x93_\x92a\x19\x8AW[PPa\x19\"V[\x90U[V[\x90\x91P\x01Q_\x80a\x19~V[`\x1F\x19\x83\x16\x91a\x19\xA5\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x19\xE6WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x19\xCCW[PPP\x02\x01\x90Ua\x19\x88V[a\x19\xDC\x91\x01Q`\x1F\x84\x16\x90a\x19\rV[\x90U_\x80\x80a\x19\xC0V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x19\xA8V[a\x02uV[\x90a\x1A\r\x91a\x194V[V[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1A&WPPV[\x80a\x1A3_`\x01\x93a\x18\x83V[\x01a\x1A\x1BV[\x90\x91\x82\x81\x10a\x1AHW[PPPV[a\x1Afa\x1A`a\x1AZa\x1Aq\x95a\x1A\x0FV[\x92a\x1A\x0FV[\x92a\x0C\xB6V[\x91\x82\x01\x91\x01\x90a\x1A\x1AV[_\x80\x80a\x1ACV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1A\xA2W\x81a\x1A\x97a\x1A\xA0\x93a\x0C\xB2V[\x90\x82\x81Ua\x1A9V[V[a\x02uV[Q\x90V[a\x1A\xB5\x90Qa\x03\xA0V[\x90V[` \x01\x90V[a\x1A\xC7\x82a\x1A\xA7V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1B*Wa\x1A\xF5a\x1A\xEF`\x01\x92a\x1A\xEA\x86\x86a\x1AyV[a\x1A\xB8V[\x92a\x0C\xB6V[\x92\x04\x91_[\x83\x81\x10a\x1B\x07WPPPPV[`\x01\x90` a\x1B\x1Da\x1B\x18\x86a\x1A\xABV[a\x0F\x91V[\x94\x01\x93\x81\x84\x01U\x01a\x1A\xFAV[a\x02uV[\x90a\x1B9\x91a\x1A\xBEV[V[\x9B\x97a\x1C\x9Ca\x1C\xB8\x98a\x1C\xCB\x9F\x9C\x96\x8F\x99a\x1C\xC6\x9F\x9Aa\x1C\xB1\x9Aa\x1C\xBF\x9F\x98a\x1C\x95\x94a\x1C\x80a\x1C\xAA\x9Ca\x1Cy\x8F\x94a\x1Cra\x1C\xA3\x9Ea\x1Ck\x8F\x98a\x1CJa\x1C\x87\x9Aa\x1B\xA5a\x1C\x8E\x9Ea\x1B\x9Ea\x1B\x98a\x1B\x93_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x13\xA3V[a\x1B\xC2\x85a\x1B\xBBa\x1B\xB5_a\x10\xDAV[\x91a\x04\xF8V[\x14\x15a\x14%V[a\x1B\xDF\x87a\x1B\xD8a\x1B\xD2_a\x10\xDAV[\x91a\x04\xF8V[\x14\x15a\x14\xCDV[a\x1C\x04\x89a\x1B\xFDa\x1B\xF7a\x1B\xF2_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x15uV[a\x1C)\x8Ba\x1C\"a\x1C\x1Ca\x1C\x17_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x16\x1DV[a\x1CCa\x1C=a\x1C8_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x16\xC5V[a\x1Cda\x1C^a\x1CY_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x17mV[`\x04a\x17\xCBV[`\x05a\x17\xCBV[`\x01a\x0F\x94V[`\x02a\x0F\x94V[`\x03a\x18\nV[`\x06a\x17\xCBV[`\x07a\x17\xCBV[`\x03a\x0F\x94V[`\x08a\x17\xCBV[`\ta\x0F\x94V[`\na\x1A\x03V[`\x0Ba\x1A\x03V[`\x0Ca\x1B/V[a!]V[V[\x90a\x1C\xE3\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x11\xC7V[V[\x90a\x1D\x13\x91a\x1D\x0E3a\x1D\x08a\x1D\x02a\x1C\xFD_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a\x1E2V[V[P\x90V[\x91a\x1D$\x90\x82a\x1D\x15V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1D\xE3Wa\x1DH\x82a\x1DB\x85Ta\x01\x96V[\x85a\x18\xB6V[_\x90`\x1F\x83\x11`\x01\x14a\x1D{W\x91\x80\x91a\x1Dj\x93_\x92a\x1DoW[PPa\x19\"V[\x90U[V[\x90\x91P\x015_\x80a\x1DcV[`\x1F\x19\x83\x16\x91a\x1D\x8A\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x1D\xCBWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1D\xB1W[PPP\x02\x01\x90Ua\x1DmV[a\x1D\xC1\x91\x015`\x1F\x84\x16\x90a\x19\rV[\x90U_\x80\x80a\x1D\xA5V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x1D\x8DV[a\x02uV[\x90a\x1D\xF3\x92\x91a\x1D\x19V[V[\x91\x90a\x1E\x0F\x81a\x1E\x08\x81a\x1E\x14\x95a\x02\xFFV[\x80\x95a\x05\xDDV[a\x02kV[\x01\x90V[\x90\x91a\x1E/\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x1D\xF5V[\x90V[a\x1E?\x81\x83\x90`\na\x1D\xE8V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1Eva\x1Ema\x01RV[\x92\x83\x92\x83a\x1E\x18V[\x03\x90\xA1V[\x90a\x1E\x85\x91a\x1C\xE5V[V[\x90a\x1E\xB5\x91a\x1E\xB03a\x1E\xAAa\x1E\xA4a\x1E\x9F_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a\x1F\xF9V[V[P\x90V[5a\x1E\xC5\x81a\x03\xACV[\x90V[\x90V[\x90\x91a\x1E\xD7\x90\x83a\x1E\xB7V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1F:Wa\x1F\x05a\x1E\xFF`\x01\x92a\x1E\xFA\x86\x86a\x1AyV[a\x1E\xC8V[\x92a\x0C\xB6V[\x92\x04\x91_[\x83\x81\x10a\x1F\x17WPPPPV[`\x01\x90` a\x1F-a\x1F(\x86a\x1E\xBBV[a\x0F\x91V[\x94\x01\x93\x81\x84\x01U\x01a\x1F\nV[a\x02uV[\x90a\x1FJ\x92\x91a\x1E\xCBV[V[` \x91\x81R\x01\x90V[a\x1F^\x90a\x03\xA0V[\x90RV[\x90a\x1Fo\x81` \x93a\x1FUV[\x01\x90V[Pa\x1F\x82\x90` \x81\x01\x90a\x03\xC0V[\x90V[` \x01\x90V[\x91a\x1F\x99\x82a\x1F\x9F\x92a\x1FLV[\x92a\x1E\xC8V[\x90\x81_\x90[\x82\x82\x10a\x1F\xB2WPPPP\x90V[\x90\x91\x92\x93a\x1F\xD4a\x1F\xCE`\x01\x92a\x1F\xC9\x88\x86a\x1FsV[a\x1FbV[\x95a\x1F\x85V[\x92\x01\x90\x92\x91\x92a\x1F\xA4V[\x90\x91a\x1F\xF6\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x1F\x8BV[\x90V[a \x06\x81\x83\x90`\x0Ca\x1F?V[\x90\x7F\xB4\xA2\x86jX6\x99\xC6\xED{w\xA1R\x1F\xADBO\x8E\xDC\xCA0`\x1FD,*[v\xA0\x10[\xE2\x91a =a 4a\x01RV[\x92\x83\x92\x83a\x1F\xDFV[\x03\x90\xA1V[\x90a L\x91a\x1E\x87V[V[a {\x90a v3a pa ja e_a\r\xA9V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\x0E\x0FV[a \xFEV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a \xB0` \x80\x92a\x02\xFFV[a \xB9\x81a }V[\x01\x90V[a \xD2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra \xA4V[\x90V[\x15a \xDCWV[a \xE4a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a \xFA`\x04\x82\x01a \xBDV[\x03\x90\xFD[a!,\x90a!'\x81a! a!\x1Aa!\x15_a\x0E\x89V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a \xD5V[a!]V[V[a!7\x90a NV[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a!f_a\r\xA9V[a!p\x82_a\x0F\x94V[\x90a!\xA4a!\x9E\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\x85V[\x91a\x0F\x85V[\x91a!\xADa\x01RV[\x80a!\xB7\x81a\x03\xEDV[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 _B\x18/8?P\xDF\x98\xB2D/\x9Fi\x9E5\x85<\xB1aN9\xA4D\xBD\xC4\x9D\xCC\n\xFF\xE3adsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AllowedSettlementAddressesUpdated(address[])` and selector `0xb4a2866a583699c6ed7b77a1521fad424f8edcca30601f442c2a5b76a0105be2`.
```solidity
event AllowedSettlementAddressesUpdated(address[] newAllowedSettlementAddresses);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AllowedSettlementAddressesUpdated {
        #[allow(missing_docs)]
        pub newAllowedSettlementAddresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AllowedSettlementAddressesUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AllowedSettlementAddressesUpdated(address[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                180u8,
                162u8,
                134u8,
                106u8,
                88u8,
                54u8,
                153u8,
                198u8,
                237u8,
                123u8,
                119u8,
                161u8,
                82u8,
                31u8,
                173u8,
                66u8,
                79u8,
                142u8,
                220u8,
                202u8,
                48u8,
                96u8,
                31u8,
                68u8,
                44u8,
                42u8,
                91u8,
                118u8,
                160u8,
                16u8,
                91u8,
                226u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newAllowedSettlementAddresses: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.newAllowedSettlementAddresses,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for AllowedSettlementAddressesUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AllowedSettlementAddressesUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AllowedSettlementAddressesUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ALLOWED_SETTLEMENT_ADDRESSES(uint256)` and selector `0xf881afaf`.
```solidity
function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ALLOWED_SETTLEMENT_ADDRESSES(uint256)`](ALLOWED_SETTLEMENT_ADDRESSESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ALLOWED_SETTLEMENT_ADDRESSESCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ALLOWED_SETTLEMENT_ADDRESSESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ALLOWED_SETTLEMENT_ADDRESSES(uint256)";
            const SELECTOR: [u8; 4] = [248u8, 129u8, 175u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `APPCHAIN_BLOCK_EXPLORER_URL()` and selector `0x0743bf6e`.
```solidity
function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLCall {}
    ///Container type for the return parameters of the [`APPCHAIN_BLOCK_EXPLORER_URL()`](APPCHAIN_BLOCK_EXPLORER_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for APPCHAIN_BLOCK_EXPLORER_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = APPCHAIN_BLOCK_EXPLORER_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "APPCHAIN_BLOCK_EXPLORER_URL()";
            const SELECTOR: [u8; 4] = [7u8, 67u8, 191u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CHAIN_ID()` and selector `0xf8a144be`.
```solidity
function SEQUENCING_CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CHAIN_ID()`](SEQUENCING_CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CHAIN_ID()";
            const SELECTOR: [u8; 4] = [248u8, 161u8, 68u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])` and selector `0x5a2d9c18`.
```solidity
function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub appchainBlockExplorerUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub allowedSettlementAddresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value._owner,
                        value.chainId,
                        value.sequencingChainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                        value.appchainBlockExplorerUrl,
                        value.allowedSettlementAddresses,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        chainId: tuple.1,
                        sequencingChainId: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                        appchainBlockExplorerUrl: tuple.12,
                        allowedSettlementAddresses: tuple.13,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])";
            const SELECTOR: [u8; 4] = [90u8, 45u8, 156u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.appchainBlockExplorerUrl,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.allowedSettlementAddresses,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAllowedSettlementAddresses(address[])` and selector `0xcb608408`.
```solidity
function updateAllowedSettlementAddresses(address[] memory newAllowedSettlementAddresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAllowedSettlementAddressesCall {
        #[allow(missing_docs)]
        pub newAllowedSettlementAddresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`updateAllowedSettlementAddresses(address[])`](updateAllowedSettlementAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAllowedSettlementAddressesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAllowedSettlementAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAllowedSettlementAddressesCall) -> Self {
                    (value.newAllowedSettlementAddresses,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAllowedSettlementAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newAllowedSettlementAddresses: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAllowedSettlementAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAllowedSettlementAddressesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAllowedSettlementAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAllowedSettlementAddressesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAllowedSettlementAddressesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAllowedSettlementAddresses(address[])";
            const SELECTOR: [u8; 4] = [203u8, 96u8, 132u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.newAllowedSettlementAddresses,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        ALLOWED_SETTLEMENT_ADDRESSES(ALLOWED_SETTLEMENT_ADDRESSESCall),
        #[allow(missing_docs)]
        APPCHAIN_BLOCK_EXPLORER_URL(APPCHAIN_BLOCK_EXPLORER_URLCall),
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CHAIN_ID(SEQUENCING_CHAIN_IDCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAllowedSettlementAddresses(updateAllowedSettlementAddressesCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 67u8, 191u8, 110u8],
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [87u8, 209u8, 186u8, 37u8],
            [90u8, 45u8, 156u8, 24u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [203u8, 96u8, 132u8, 8u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
            [248u8, 129u8, 175u8, 175u8],
            [248u8, 161u8, 68u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(_) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(_) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CHAIN_ID(_) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAllowedSettlementAddresses(_) => {
                    <updateAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn APPCHAIN_BLOCK_EXPLORER_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::APPCHAIN_BLOCK_EXPLORER_URL)
                    }
                    APPCHAIN_BLOCK_EXPLORER_URL
                },
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn updateAllowedSettlementAddresses(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateAllowedSettlementAddresses)
                    }
                    updateAllowedSettlementAddresses
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn ALLOWED_SETTLEMENT_ADDRESSES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ALLOWED_SETTLEMENT_ADDRESSES)
                    }
                    ALLOWED_SETTLEMENT_ADDRESSES
                },
                {
                    fn SEQUENCING_CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CHAIN_ID)
                    }
                    SEQUENCING_CHAIN_ID
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAllowedSettlementAddresses(inner) => {
                    <updateAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAllowedSettlementAddresses(inner) => {
                    <updateAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        AllowedSettlementAddressesUpdated(AllowedSettlementAddressesUpdated),
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                180u8,
                162u8,
                134u8,
                106u8,
                88u8,
                54u8,
                153u8,
                198u8,
                237u8,
                123u8,
                119u8,
                161u8,
                82u8,
                31u8,
                173u8,
                66u8,
                79u8,
                142u8,
                220u8,
                202u8,
                48u8,
                96u8,
                31u8,
                68u8,
                44u8,
                42u8,
                91u8,
                118u8,
                160u8,
                16u8,
                91u8,
                226u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AllowedSettlementAddressesUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AllowedSettlementAddressesUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AllowedSettlementAddressesUpdated)
                }
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AllowedSettlementAddressesUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AllowedSettlementAddressesUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ALLOWED_SETTLEMENT_ADDRESSES`] function.
        pub fn ALLOWED_SETTLEMENT_ADDRESSES(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ALLOWED_SETTLEMENT_ADDRESSESCall, N> {
            self.call_builder(
                &ALLOWED_SETTLEMENT_ADDRESSESCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`APPCHAIN_BLOCK_EXPLORER_URL`] function.
        pub fn APPCHAIN_BLOCK_EXPLORER_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, APPCHAIN_BLOCK_EXPLORER_URLCall, N> {
            self.call_builder(&APPCHAIN_BLOCK_EXPLORER_URLCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CHAIN_ID`] function.
        pub fn SEQUENCING_CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CHAIN_IDCall, N> {
            self.call_builder(&SEQUENCING_CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _owner: alloy::sol_types::private::Address,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
            appchainBlockExplorerUrl: alloy::sol_types::private::String,
            allowedSettlementAddresses: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _owner,
                    chainId,
                    sequencingChainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                    appchainBlockExplorerUrl,
                    allowedSettlementAddresses,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAllowedSettlementAddresses`] function.
        pub fn updateAllowedSettlementAddresses(
            &self,
            newAllowedSettlementAddresses: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateAllowedSettlementAddressesCall,
            N,
        > {
            self.call_builder(
                &updateAllowedSettlementAddressesCall {
                    newAllowedSettlementAddresses,
                },
            )
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AllowedSettlementAddressesUpdated`] event.
        pub fn AllowedSettlementAddressesUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AllowedSettlementAddressesUpdated, N> {
            self.event_filter::<AllowedSettlementAddressesUpdated>()
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
