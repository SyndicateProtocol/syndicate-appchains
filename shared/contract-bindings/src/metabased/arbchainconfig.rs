/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();

    event AppchainBlockExplorerUrlUpdated(string newUrl);
    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
    function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CHAIN_ID() external view returns (uint256);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
    function owner() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateAppchainBlockExplorerUrl(string memory newUrl) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ALLOWED_SETTLEMENT_ADDRESSES",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "APPCHAIN_BLOCK_EXPLORER_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "appchainBlockExplorerUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "allowedSettlementAddresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAppchainBlockExplorerUrl",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AppchainBlockExplorerUrlUpdated",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b61203d610216823961203d90f35b610032565b60405190565b5f80fd5b61003e610132565b565b60401c90565b60ff1690565b61005861005d91610040565b610046565b90565b61006a905461004c565b90565b5f0190565b5f1c90565b60018060401b031690565b61008e61009391610072565b610077565b90565b6100a09054610082565b90565b60018060401b031690565b5f1b90565b906100c460018060401b03916100ae565b9181191691161790565b90565b6100e56100e06100ea926100a3565b6100ce565b6100a3565b90565b90565b9061010561010061010c926100d1565b6100ed565b82546100b3565b9055565b610119906100a3565b9052565b9190610130905f60208501940190610110565b565b61013a6101f1565b6101455f8201610060565b6101ce576101545f8201610096565b61016c61016660018060401b036100a3565b916100a3565b03610175575b50565b610188905f60018060401b0391016100f0565b60018060401b036101c57fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916101bc61002c565b9182918261011d565b0390a15f610172565b6101d661002c565b63f92ee8a960e01b8152806101ed6004820161006d565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60c06040526004361015610013575b610d17565b61001d5f3561014c565b80630743bf6e146101475780632a84b0f01461014257806341fc712d1461013d5780634b8be3f71461013857806357d1ba25146101335780635a2d9c181461012e57806362c73caa1461012957806366a1d108146101245780636edd6c091461011f57806385e1f4d01461011a5780638da5cb5b14610115578063a3c6e1e714610110578063aa6a43d81461010b578063bf6db6f814610106578063d1f4737c14610101578063e79388e6146100fc578063f2fde38b146100f7578063f881afaf146100f25763f8a144be0361000e57610ce2565b610c9e565b610bd8565b610ba3565b610b10565b610acc565b610a88565b610a44565b610a00565b6109be565b61097a565b610936565b6108f3565b6108ad565b6105d2565b610541565b61048b565b6103f2565b61035c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101b6575b60208310146101b157565b610182565b91607f16916101a6565b60209181520190565b5f5260205f2090565b905f92918054906101ec6101e583610196565b80946101c0565b916001811690815f146102435750600114610207575b505050565b61021491929394506101c9565b915f925b81841061022b57505001905f8080610202565b60018160209295939554848601520191019290610218565b92949550505060ff19168252151560200201905f8080610202565b90610268916101d2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102939061026b565b810190811067ffffffffffffffff8211176102ad57604052565b610275565b906102d26102cb926102c2610152565b9384809261025e565b0383610289565b565b905f106102e7576102e4906102b2565b90565b61016f565b6102f8600c5f906102d4565b90565b5190565b60209181520190565b90825f9392825e0152565b61033261033b60209361034093610329816102fb565b938480936102ff565b95869101610308565b61026b565b0190565b6103599160208201915f818403910152610313565b90565b3461038c5761036c366004610160565b6103886103776102ec565b61037f610152565b91829182610344565b0390f35b610158565b5f80fd5b60018060a01b031690565b6103a990610395565b90565b6103b5816103a0565b036103bc57565b5f80fd5b905035906103cd826103ac565b565b906020828203126103e8576103e5915f016103c0565b90565b61015c565b5f0190565b346104205761040a6104053660046103cf565b610fb1565b610412610152565b8061041c816103ed565b0390f35b610158565b1c90565b60018060a01b031690565b6104449060086104499302610425565b610429565b90565b906104579154610434565b90565b610466600a5f9061044c565b90565b610472906103a0565b9052565b9190610489905f60208501940190610469565b565b346104bb5761049b366004610160565b6104b76104a661045a565b6104ae610152565b91829182610476565b0390f35b610158565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156105065781359167ffffffffffffffff83116105015760200192600183028401116104fc57565b6104c8565b6104c4565b6104c0565b9060208282031261053c575f82013567ffffffffffffffff81116105375761053392016104cc565b9091565b610391565b61015c565b346105705761055a61055436600461050b565b9061127b565b610562610152565b8061056c816103ed565b0390f35b610158565b90565b61058890600861058d9302610425565b610575565b90565b9061059b9154610578565b90565b6105aa60065f90610590565b90565b90565b6105b9906105ad565b9052565b91906105d0905f602085019401906105b0565b565b34610602576105e2366004610160565b6105fe6105ed61059e565b6105f5610152565b918291826105bd565b0390f35b610158565b610610816105ad565b0361061757565b5f80fd5b9050359061062882610607565b565b151590565b6106388161062a565b0361063f57565b5f80fd5b905035906106508261062f565b565b5f80fd5b90610669610662610152565b9283610289565b565b67ffffffffffffffff81116106895761068560209161026b565b0190565b610275565b90825f939282370152565b909291926106ae6106a98261066b565b610656565b938185526020850190828401116106ca576106c89261068e565b565b610652565b9080601f830112156106ed578160206106ea93359101610699565b90565b6104c0565b67ffffffffffffffff811161070a5760208091020190565b610275565b9092919261072461071f826106f2565b610656565b938185526020808601920283019281841161076157915b8383106107485750505050565b6020809161075684866103c0565b81520192019161073b565b6104c8565b9080601f83011215610784578160206107819335910161070f565b90565b6104c0565b9190916101c0818403126108a8576107a3835f83016103c0565b926107b1816020840161061b565b926107bf826040850161061b565b926107cd83606083016103c0565b926107db81608084016103c0565b926107e98260a08501610643565b926107f78360c0830161061b565b926108058160e0840161061b565b926108148261010085016103c0565b9261082383610120830161061b565b926108328161014084016103c0565b9261016083013567ffffffffffffffff81116108a357826108549185016106cf565b9261018081013567ffffffffffffffff811161089e57836108769183016106cf565b926101a082013567ffffffffffffffff8111610899576108969201610766565b90565b610391565b610391565b610391565b61015c565b346108ee576108d86108c0366004610789565b9c9b909b9a919a999299989398979497969596611dfc565b6108e0610152565b806108ea816103ed565b0390f35b610158565b346109225761090c61090636600461050b565b90611e8d565b610914610152565b8061091e816103ed565b0390f35b610158565b610933600b5f906102d4565b90565b3461096657610946366004610160565b610962610951610927565b610959610152565b91829182610344565b0390f35b610158565b61097760015f9061044c565b90565b346109aa5761098a366004610160565b6109a661099561096b565b61099d610152565b91829182610476565b0390f35b610158565b6109bb60045f90610590565b90565b346109ee576109ce366004610160565b6109ea6109d96109af565b6109e1610152565b918291826105bd565b0390f35b610158565b6109fd5f8061044c565b90565b34610a3057610a10366004610160565b610a2c610a1b6109f3565b610a23610152565b91829182610476565b0390f35b610158565b610a4160085f90610590565b90565b34610a7457610a54366004610160565b610a70610a5f610a35565b610a67610152565b918291826105bd565b0390f35b610158565b610a8560025f9061044c565b90565b34610ab857610a98366004610160565b610ab4610aa3610a79565b610aab610152565b91829182610476565b0390f35b610158565b610ac960035f9061044c565b90565b34610afc57610adc366004610160565b610af8610ae7610abd565b610aef610152565b91829182610476565b0390f35b610158565b610b0d60075f90610590565b90565b34610b4057610b20366004610160565b610b3c610b2b610b01565b610b33610152565b918291826105bd565b0390f35b610158565b60ff1690565b610b5b906008610b609302610425565b610b45565b90565b90610b6e9154610b4b565b90565b610b7e6003601490610b63565b90565b610b8a9061062a565b9052565b9190610ba1905f60208501940190610b81565b565b34610bd357610bb3366004610160565b610bcf610bbe610b71565b610bc6610152565b91829182610b8e565b0390f35b610158565b34610c0657610bf0610beb3660046103cf565b611f79565b610bf8610152565b80610c02816103ed565b0390f35b610158565b90602082820312610c2457610c21915f0161061b565b90565b61015c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610c5381610c3d565b821015610c6d57610c65600191610c41565b910201905f90565b610c29565b6009610c7d81610c3d565b821015610c9a57610c9791610c9191610c4a565b9061044c565b90565b5f80fd5b34610cce57610cca610cb9610cb4366004610c0b565b610c72565b610cc1610152565b91829182610476565b0390f35b610158565b610cdf60055f90610590565b90565b34610d1257610cf2366004610160565b610d0e610cfd610cd3565b610d05610152565b918291826105bd565b0390f35b610158565b5f80fd5b5f1c90565b610d2c610d3191610d1b565b610429565b90565b610d3e9054610d20565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610d7560176020926102ff565b610d7e81610d41565b0190565b610d979060208101905f818303910152610d68565b90565b15610da157565b610da9610152565b62461bcd60e51b815280610dbf60048201610d82565b0390fd5b610df090610deb33610de5610ddf610dda5f610d34565b6103a0565b916103a0565b14610d9a565b610f3f565b565b90565b90565b610e0c610e07610e1192610df2565b610df5565b610395565b90565b610e1d90610df8565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610e7a60276040926102ff565b610e8381610e20565b0190565b610e9c9060208101905f818303910152610e6d565b90565b15610ea657565b610eae610152565b62461bcd60e51b815280610ec460048201610e87565b0390fd5b5f1b90565b90610ede60018060a01b0391610ec8565b9181191691161790565b610efc610ef7610f0192610395565b610df5565b610395565b90565b610f0d90610ee8565b90565b610f1990610f04565b90565b90565b90610f34610f2f610f3b92610f10565b610f1c565b8254610ecd565b9055565b610f6481610f5d610f57610f525f610e14565b6103a0565b916103a0565b1415610e9f565b610f6f81600a610f1f565b610f997f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610f10565b90610fa2610152565b80610fac816103ed565b0390a2565b610fba90610dc3565b565b90610fea91610fe533610fdf610fd9610fd45f610d34565b6103a0565b916103a0565b14610d9a565b611232565b565b5090565b601f602091010490565b1b90565b919060086110199102916110135f1984610ffa565b92610ffa565b9181191691161790565b61103761103261103c926105ad565b610df5565b6105ad565b90565b90565b919061105861105361106093611023565b61103f565b908354610ffe565b9055565b5f90565b61107a91611074611064565b91611042565b565b5b818110611088575050565b806110955f600193611068565b0161107d565b9190601f81116110ab575b505050565b6110b76110dc936101c9565b9060206110c384610ff0565b830193106110e4575b6110d590610ff0565b019061107c565b5f80806110a6565b91506110d5819290506110cc565b90611102905f1990600802610425565b191690565b81611111916110f2565b906002021790565b916111249082610fec565b9067ffffffffffffffff82116111e357611148826111428554610196565b8561109b565b5f90601f831160011461117b5791809161116a935f9261116f575b5050611107565b90555b565b90915001355f80611163565b601f1983169161118a856101c9565b925f5b8181106111cb575091600293918560019694106111b1575b5050500201905561116d565b6111c1910135601f8416906110f2565b90555f80806111a5565b9193602060018192878701358155019501920161118d565b610275565b906111f39291611119565b565b919061120f8161120881611214956102ff565b809561068e565b61026b565b0190565b909161122f9260208301925f8185039101526111f5565b90565b61123f818390600c6111e8565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a79161127661126d610152565b92839283611218565b0390a1565b9061128591610fbc565b565b60401c90565b61129961129e91611287565b610b45565b90565b6112ab905461128d565b90565b67ffffffffffffffff1690565b6112c76112cc91610d1b565b6112ae565b90565b6112d990546112bb565b90565b67ffffffffffffffff1690565b6112fd6112f861130292610df2565b610df5565b6112dc565b90565b90565b61131c61131761132192611305565b610df5565b6112dc565b90565b61132d90610f04565b90565b61134461133f61134992610df2565b610df5565b6105ad565b90565b9061135f67ffffffffffffffff91610ec8565b9181191691161790565b61137d611378611382926112dc565b610df5565b6112dc565b90565b90565b9061139d6113986113a492611369565b611385565b825461134c565b9055565b60401b90565b906113c268ff0000000000000000916113a8565b9181191691161790565b6113d59061062a565b90565b90565b906113f06113eb6113f7926113cc565b6113d8565b82546113ae565b9055565b61140490611308565b9052565b919061141b905f602085019401906113fb565b565b9c9b9a99989796959493929190611432611f84565b60805261144b6114455f608051016112a1565b1561062a565b60a05261145b5f608051016112cf565b8061146e6114685f6112e9565b916112dc565b1480611597575b906114896114836001611308565b916112dc565b148061156f575b61149b90911561062a565b908161155e575b5061153b576114cf9d6114c26114b86001611308565b5f60805101611388565b60a051611527575b611c68565b60a0516114d9575b565b6114e75f80608051016113db565b600161151f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611516610152565b91829182611408565b0390a16114d7565b61153660015f608051016113db565b6114ca565b611543610152565b63f92ee8a960e01b81528061155a600482016103ed565b0390fd5b61156991501561062a565b5f6114a2565b5061149b61157c30611324565b3b61158f6115895f611330565b916105ad565b149050611490565b5060a051611475565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b6115d4601c6020926102ff565b6115dd816115a0565b0190565b6115f69060208101905f8183039101526115c7565b90565b1561160057565b611608610152565b62461bcd60e51b81528061161e600482016115e1565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61165660176020926102ff565b61165f81611622565b0190565b6116789060208101905f818303910152611649565b90565b1561168257565b61168a610152565b62461bcd60e51b8152806116a060048201611663565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6116fe60226040926102ff565b611707816116a4565b0190565b6117209060208101905f8183039101526116f1565b90565b1561172a57565b611732610152565b62461bcd60e51b8152806117486004820161170b565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6117a660266040926102ff565b6117af8161174c565b0190565b6117c89060208101905f818303910152611799565b90565b156117d257565b6117da610152565b62461bcd60e51b8152806117f0600482016117b3565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61184e60256040926102ff565b611857816117f4565b0190565b6118709060208101905f818303910152611841565b90565b1561187a57565b611882610152565b62461bcd60e51b8152806118986004820161185b565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6118f6602a6040926102ff565b6118ff8161189c565b0190565b6119189060208101905f8183039101526118e9565b90565b1561192257565b61192a610152565b62461bcd60e51b81528061194060048201611903565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61199e60236040926102ff565b6119a781611944565b0190565b6119c09060208101905f818303910152611991565b90565b156119ca57565b6119d2610152565b62461bcd60e51b8152806119e8600482016119ab565b0390fd5b906119f85f1991610ec8565b9181191691161790565b90611a17611a12611a1e92611023565b61103f565b82546119ec565b9055565b60a01b90565b90611a3760ff60a01b91611a22565b9181191691161790565b90611a56611a51611a5d926113cc565b6113d8565b8254611a28565b9055565b600190818003010490565b5b818110611a78575050565b80611a855f600193611068565b01611a6d565b9091828110611a9a575b505050565b611ab8611ab2611aac611ac395611a61565b92611a61565b92610c41565b918201910190611a6c565b5f8080611a95565b90680100000000000000008111611af45781611ae9611af293610c3d565b90828155611a8b565b565b610275565b5190565b611b0790516103a0565b90565b60200190565b611b1982611af9565b9167ffffffffffffffff8311611b7c57611b47611b41600192611b3c8686611acb565b611b0a565b92610c41565b9204915f5b838110611b595750505050565b6001906020611b6f611b6a86611afd565b610f1c565b9401938184015501611b4c565b610275565b90611b8b91611b10565b565b90611b97816102fb565b9067ffffffffffffffff8211611c5757611bbb82611bb58554610196565b8561109b565b602090601f8311600114611bef57918091611bde935f92611be3575b5050611107565b90555b565b90915001515f80611bd7565b601f19831691611bfe856101c9565b925f5b818110611c3f57509160029391856001969410611c25575b50505002019055611be1565b611c35910151601f8416906110f2565b90555f8080611c19565b91936020600181928787015181550195019201611c01565b610275565b90611c6691611b8d565b565b9b999597611dcb611de798611dfa9f968f9b611df59f9c611de09a611dee9f98611dc494611daf8f9c611da8611db694611dd99f611dd29e611d9a8f92611d79611da194611cd4611dbd9e611ccd611cc7611cc25f610e14565b6103a0565b916103a0565b14156115f9565b611cf185611cea611ce45f611330565b916105ad565b141561167b565b611d0e87611d07611d015f611330565b916105ad565b1415611723565b611d3389611d2c611d26611d215f610e14565b6103a0565b916103a0565b14156117cb565b611d588b611d51611d4b611d465f610e14565b6103a0565b916103a0565b1415611873565b611d72611d6c611d675f610e14565b6103a0565b916103a0565b141561191b565b611d93611d8d611d885f610e14565b6103a0565b916103a0565b14156119c3565b6004611a02565b6005611a02565b6001610f1f565b6002610f1f565b6003611a41565b6006611a02565b6007611a02565b6003610f1f565b6008611a02565b6009611b81565b600a610f1f565b600b611c5c565b600c611c5c565b611fa8565b565b90611e129d9c9b9a99989796959493929161141d565b565b90611e4291611e3d33611e37611e31611e2c5f610d34565b6103a0565b916103a0565b14610d9a565b611e44565b565b611e51818390600b6111e8565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611e88611e7f610152565b92839283611218565b0390a1565b90611e9791611e14565b565b611ec690611ec133611ebb611eb5611eb05f610d34565b6103a0565b916103a0565b14610d9a565b611f49565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b611efb602080926102ff565b611f0481611ec8565b0190565b611f1d9060208101905f818303910152611eef565b90565b15611f2757565b611f2f610152565b62461bcd60e51b815280611f4560048201611f08565b0390fd5b611f7790611f7281611f6b611f65611f605f610e14565b6103a0565b916103a0565b1415611f20565b611fa8565b565b611f8290611e99565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611fb15f610d34565b611fbb825f610f1f565b90611fef611fe97f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f10565b91610f10565b91611ff8610152565b80612002816103ed565b0390a356fea2646970667358221220d35c9c56adf80400e3e5b5b061ffefb8bf82ec01c5732ff6ca06d3a6e080962b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a =a\x02\x16\x829a =\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x012V[V[`@\x1C\x90V[`\xFF\x16\x90V[a\0Xa\0]\x91a\0@V[a\0FV[\x90V[a\0j\x90Ta\0LV[\x90V[_\x01\x90V[_\x1C\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\0\x8Ea\0\x93\x91a\0rV[a\0wV[\x90V[a\0\xA0\x90Ta\0\x82V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[_\x1B\x90V[\x90a\0\xC4`\x01\x80`@\x1B\x03\x91a\0\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xA3V[a\0\xCEV[a\0\xA3V[\x90V[\x90V[\x90a\x01\x05a\x01\0a\x01\x0C\x92a\0\xD1V[a\0\xEDV[\x82Ta\0\xB3V[\x90UV[a\x01\x19\x90a\0\xA3V[\x90RV[\x91\x90a\x010\x90_` \x85\x01\x94\x01\x90a\x01\x10V[V[a\x01:a\x01\xF1V[a\x01E_\x82\x01a\0`V[a\x01\xCEWa\x01T_\x82\x01a\0\x96V[a\x01la\x01f`\x01\x80`@\x1B\x03a\0\xA3V[\x91a\0\xA3V[\x03a\x01uW[PV[a\x01\x88\x90_`\x01\x80`@\x1B\x03\x91\x01a\0\xF0V[`\x01\x80`@\x1B\x03a\x01\xC5\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x01\xBCa\0,V[\x91\x82\x91\x82a\x01\x1DV[\x03\x90\xA1_a\x01rV[a\x01\xD6a\0,V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x01\xED`\x04\x82\x01a\0mV[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V\xFE`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\x17V[a\0\x1D_5a\x01LV[\x80c\x07C\xBFn\x14a\x01GW\x80c*\x84\xB0\xF0\x14a\x01BW\x80cA\xFCq-\x14a\x01=W\x80cK\x8B\xE3\xF7\x14a\x018W\x80cW\xD1\xBA%\x14a\x013W\x80cZ-\x9C\x18\x14a\x01.W\x80cb\xC7<\xAA\x14a\x01)W\x80cf\xA1\xD1\x08\x14a\x01$W\x80cn\xDDl\t\x14a\x01\x1FW\x80c\x85\xE1\xF4\xD0\x14a\x01\x1AW\x80c\x8D\xA5\xCB[\x14a\x01\x15W\x80c\xA3\xC6\xE1\xE7\x14a\x01\x10W\x80c\xAAjC\xD8\x14a\x01\x0BW\x80c\xBFm\xB6\xF8\x14a\x01\x06W\x80c\xD1\xF4s|\x14a\x01\x01W\x80c\xE7\x93\x88\xE6\x14a\0\xFCW\x80c\xF2\xFD\xE3\x8B\x14a\0\xF7W\x80c\xF8\x81\xAF\xAF\x14a\0\xF2Wc\xF8\xA1D\xBE\x03a\0\x0EWa\x0C\xE2V[a\x0C\x9EV[a\x0B\xD8V[a\x0B\xA3V[a\x0B\x10V[a\n\xCCV[a\n\x88V[a\nDV[a\n\0V[a\t\xBEV[a\tzV[a\t6V[a\x08\xF3V[a\x08\xADV[a\x05\xD2V[a\x05AV[a\x04\x8BV[a\x03\xF2V[a\x03\\V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xB6W[` \x83\x10\x14a\x01\xB1WV[a\x01\x82V[\x91`\x7F\x16\x91a\x01\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xECa\x01\xE5\x83a\x01\x96V[\x80\x94a\x01\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02CWP`\x01\x14a\x02\x07W[PPPV[a\x02\x14\x91\x92\x93\x94Pa\x01\xC9V[\x91_\x92[\x81\x84\x10a\x02+WPP\x01\x90_\x80\x80a\x02\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x02V[\x90a\x02h\x91a\x01\xD2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x93\x90a\x02kV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xADW`@RV[a\x02uV[\x90a\x02\xD2a\x02\xCB\x92a\x02\xC2a\x01RV[\x93\x84\x80\x92a\x02^V[\x03\x83a\x02\x89V[V[\x90_\x10a\x02\xE7Wa\x02\xE4\x90a\x02\xB2V[\x90V[a\x01oV[a\x02\xF8`\x0C_\x90a\x02\xD4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x032a\x03;` \x93a\x03@\x93a\x03)\x81a\x02\xFBV[\x93\x84\x80\x93a\x02\xFFV[\x95\x86\x91\x01a\x03\x08V[a\x02kV[\x01\x90V[a\x03Y\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x13V[\x90V[4a\x03\x8CWa\x03l6`\x04a\x01`V[a\x03\x88a\x03wa\x02\xECV[a\x03\x7Fa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA9\x90a\x03\x95V[\x90V[a\x03\xB5\x81a\x03\xA0V[\x03a\x03\xBCWV[_\x80\xFD[\x90P5\x90a\x03\xCD\x82a\x03\xACV[V[\x90` \x82\x82\x03\x12a\x03\xE8Wa\x03\xE5\x91_\x01a\x03\xC0V[\x90V[a\x01\\V[_\x01\x90V[4a\x04 Wa\x04\na\x04\x056`\x04a\x03\xCFV[a\x0F\xB1V[a\x04\x12a\x01RV[\x80a\x04\x1C\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04D\x90`\x08a\x04I\x93\x02a\x04%V[a\x04)V[\x90V[\x90a\x04W\x91Ta\x044V[\x90V[a\x04f`\n_\x90a\x04LV[\x90V[a\x04r\x90a\x03\xA0V[\x90RV[\x91\x90a\x04\x89\x90_` \x85\x01\x94\x01\x90a\x04iV[V[4a\x04\xBBWa\x04\x9B6`\x04a\x01`V[a\x04\xB7a\x04\xA6a\x04ZV[a\x04\xAEa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x06W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x01W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xFCWV[a\x04\xC8V[a\x04\xC4V[a\x04\xC0V[\x90` \x82\x82\x03\x12a\x05<W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x057Wa\x053\x92\x01a\x04\xCCV[\x90\x91V[a\x03\x91V[a\x01\\V[4a\x05pWa\x05Za\x05T6`\x04a\x05\x0BV[\x90a\x12{V[a\x05ba\x01RV[\x80a\x05l\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x90V[a\x05\x88\x90`\x08a\x05\x8D\x93\x02a\x04%V[a\x05uV[\x90V[\x90a\x05\x9B\x91Ta\x05xV[\x90V[a\x05\xAA`\x06_\x90a\x05\x90V[\x90V[\x90V[a\x05\xB9\x90a\x05\xADV[\x90RV[\x91\x90a\x05\xD0\x90_` \x85\x01\x94\x01\x90a\x05\xB0V[V[4a\x06\x02Wa\x05\xE26`\x04a\x01`V[a\x05\xFEa\x05\xEDa\x05\x9EV[a\x05\xF5a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[a\x06\x10\x81a\x05\xADV[\x03a\x06\x17WV[_\x80\xFD[\x90P5\x90a\x06(\x82a\x06\x07V[V[\x15\x15\x90V[a\x068\x81a\x06*V[\x03a\x06?WV[_\x80\xFD[\x90P5\x90a\x06P\x82a\x06/V[V[_\x80\xFD[\x90a\x06ia\x06ba\x01RV[\x92\x83a\x02\x89V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\x89Wa\x06\x85` \x91a\x02kV[\x01\x90V[a\x02uV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x06\xAEa\x06\xA9\x82a\x06kV[a\x06VV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x06\xCAWa\x06\xC8\x92a\x06\x8EV[V[a\x06RV[\x90\x80`\x1F\x83\x01\x12\x15a\x06\xEDW\x81` a\x06\xEA\x935\x91\x01a\x06\x99V[\x90V[a\x04\xC0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\nW` \x80\x91\x02\x01\x90V[a\x02uV[\x90\x92\x91\x92a\x07$a\x07\x1F\x82a\x06\xF2V[a\x06VV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x07aW\x91[\x83\x83\x10a\x07HWPPPPV[` \x80\x91a\x07V\x84\x86a\x03\xC0V[\x81R\x01\x92\x01\x91a\x07;V[a\x04\xC8V[\x90\x80`\x1F\x83\x01\x12\x15a\x07\x84W\x81` a\x07\x81\x935\x91\x01a\x07\x0FV[\x90V[a\x04\xC0V[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\x08\xA8Wa\x07\xA3\x83_\x83\x01a\x03\xC0V[\x92a\x07\xB1\x81` \x84\x01a\x06\x1BV[\x92a\x07\xBF\x82`@\x85\x01a\x06\x1BV[\x92a\x07\xCD\x83``\x83\x01a\x03\xC0V[\x92a\x07\xDB\x81`\x80\x84\x01a\x03\xC0V[\x92a\x07\xE9\x82`\xA0\x85\x01a\x06CV[\x92a\x07\xF7\x83`\xC0\x83\x01a\x06\x1BV[\x92a\x08\x05\x81`\xE0\x84\x01a\x06\x1BV[\x92a\x08\x14\x82a\x01\0\x85\x01a\x03\xC0V[\x92a\x08#\x83a\x01 \x83\x01a\x06\x1BV[\x92a\x082\x81a\x01@\x84\x01a\x03\xC0V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xA3W\x82a\x08T\x91\x85\x01a\x06\xCFV[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x9EW\x83a\x08v\x91\x83\x01a\x06\xCFV[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x99Wa\x08\x96\x92\x01a\x07fV[\x90V[a\x03\x91V[a\x03\x91V[a\x03\x91V[a\x01\\V[4a\x08\xEEWa\x08\xD8a\x08\xC06`\x04a\x07\x89V[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1D\xFCV[a\x08\xE0a\x01RV[\x80a\x08\xEA\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[4a\t\"Wa\t\x0Ca\t\x066`\x04a\x05\x0BV[\x90a\x1E\x8DV[a\t\x14a\x01RV[\x80a\t\x1E\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[a\t3`\x0B_\x90a\x02\xD4V[\x90V[4a\tfWa\tF6`\x04a\x01`V[a\tba\tQa\t'V[a\tYa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[a\tw`\x01_\x90a\x04LV[\x90V[4a\t\xAAWa\t\x8A6`\x04a\x01`V[a\t\xA6a\t\x95a\tkV[a\t\x9Da\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\t\xBB`\x04_\x90a\x05\x90V[\x90V[4a\t\xEEWa\t\xCE6`\x04a\x01`V[a\t\xEAa\t\xD9a\t\xAFV[a\t\xE1a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[a\t\xFD_\x80a\x04LV[\x90V[4a\n0Wa\n\x106`\x04a\x01`V[a\n,a\n\x1Ba\t\xF3V[a\n#a\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\nA`\x08_\x90a\x05\x90V[\x90V[4a\ntWa\nT6`\x04a\x01`V[a\npa\n_a\n5V[a\nga\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[a\n\x85`\x02_\x90a\x04LV[\x90V[4a\n\xB8Wa\n\x986`\x04a\x01`V[a\n\xB4a\n\xA3a\nyV[a\n\xABa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\n\xC9`\x03_\x90a\x04LV[\x90V[4a\n\xFCWa\n\xDC6`\x04a\x01`V[a\n\xF8a\n\xE7a\n\xBDV[a\n\xEFa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\x0B\r`\x07_\x90a\x05\x90V[\x90V[4a\x0B@Wa\x0B 6`\x04a\x01`V[a\x0B<a\x0B+a\x0B\x01V[a\x0B3a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[`\xFF\x16\x90V[a\x0B[\x90`\x08a\x0B`\x93\x02a\x04%V[a\x0BEV[\x90V[\x90a\x0Bn\x91Ta\x0BKV[\x90V[a\x0B~`\x03`\x14\x90a\x0BcV[\x90V[a\x0B\x8A\x90a\x06*V[\x90RV[\x91\x90a\x0B\xA1\x90_` \x85\x01\x94\x01\x90a\x0B\x81V[V[4a\x0B\xD3Wa\x0B\xB36`\x04a\x01`V[a\x0B\xCFa\x0B\xBEa\x0BqV[a\x0B\xC6a\x01RV[\x91\x82\x91\x82a\x0B\x8EV[\x03\x90\xF3[a\x01XV[4a\x0C\x06Wa\x0B\xF0a\x0B\xEB6`\x04a\x03\xCFV[a\x1FyV[a\x0B\xF8a\x01RV[\x80a\x0C\x02\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0C$Wa\x0C!\x91_\x01a\x06\x1BV[\x90V[a\x01\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x0CS\x81a\x0C=V[\x82\x10\x15a\x0CmWa\x0Ce`\x01\x91a\x0CAV[\x91\x02\x01\x90_\x90V[a\x0C)V[`\ta\x0C}\x81a\x0C=V[\x82\x10\x15a\x0C\x9AWa\x0C\x97\x91a\x0C\x91\x91a\x0CJV[\x90a\x04LV[\x90V[_\x80\xFD[4a\x0C\xCEWa\x0C\xCAa\x0C\xB9a\x0C\xB46`\x04a\x0C\x0BV[a\x0CrV[a\x0C\xC1a\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\x0C\xDF`\x05_\x90a\x05\x90V[\x90V[4a\r\x12Wa\x0C\xF26`\x04a\x01`V[a\r\x0Ea\x0C\xFDa\x0C\xD3V[a\r\x05a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x1C\x90V[a\r,a\r1\x91a\r\x1BV[a\x04)V[\x90V[a\r>\x90Ta\r V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\ru`\x17` \x92a\x02\xFFV[a\r~\x81a\rAV[\x01\x90V[a\r\x97\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\rhV[\x90V[\x15a\r\xA1WV[a\r\xA9a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xBF`\x04\x82\x01a\r\x82V[\x03\x90\xFD[a\r\xF0\x90a\r\xEB3a\r\xE5a\r\xDFa\r\xDA_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x0F?V[V[\x90V[\x90V[a\x0E\x0Ca\x0E\x07a\x0E\x11\x92a\r\xF2V[a\r\xF5V[a\x03\x95V[\x90V[a\x0E\x1D\x90a\r\xF8V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0Ez`'`@\x92a\x02\xFFV[a\x0E\x83\x81a\x0E V[\x01\x90V[a\x0E\x9C\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0EmV[\x90V[\x15a\x0E\xA6WV[a\x0E\xAEa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\xC4`\x04\x82\x01a\x0E\x87V[\x03\x90\xFD[_\x1B\x90V[\x90a\x0E\xDE`\x01\x80`\xA0\x1B\x03\x91a\x0E\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xFCa\x0E\xF7a\x0F\x01\x92a\x03\x95V[a\r\xF5V[a\x03\x95V[\x90V[a\x0F\r\x90a\x0E\xE8V[\x90V[a\x0F\x19\x90a\x0F\x04V[\x90V[\x90V[\x90a\x0F4a\x0F/a\x0F;\x92a\x0F\x10V[a\x0F\x1CV[\x82Ta\x0E\xCDV[\x90UV[a\x0Fd\x81a\x0F]a\x0FWa\x0FR_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x0E\x9FV[a\x0Fo\x81`\na\x0F\x1FV[a\x0F\x99\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0F\x10V[\x90a\x0F\xA2a\x01RV[\x80a\x0F\xAC\x81a\x03\xEDV[\x03\x90\xA2V[a\x0F\xBA\x90a\r\xC3V[V[\x90a\x0F\xEA\x91a\x0F\xE53a\x0F\xDFa\x0F\xD9a\x0F\xD4_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x122V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x10\x19\x91\x02\x91a\x10\x13_\x19\x84a\x0F\xFAV[\x92a\x0F\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x107a\x102a\x10<\x92a\x05\xADV[a\r\xF5V[a\x05\xADV[\x90V[\x90V[\x91\x90a\x10Xa\x10Sa\x10`\x93a\x10#V[a\x10?V[\x90\x83Ta\x0F\xFEV[\x90UV[_\x90V[a\x10z\x91a\x10ta\x10dV[\x91a\x10BV[V[[\x81\x81\x10a\x10\x88WPPV[\x80a\x10\x95_`\x01\x93a\x10hV[\x01a\x10}V[\x91\x90`\x1F\x81\x11a\x10\xABW[PPPV[a\x10\xB7a\x10\xDC\x93a\x01\xC9V[\x90` a\x10\xC3\x84a\x0F\xF0V[\x83\x01\x93\x10a\x10\xE4W[a\x10\xD5\x90a\x0F\xF0V[\x01\x90a\x10|V[_\x80\x80a\x10\xA6V[\x91Pa\x10\xD5\x81\x92\x90Pa\x10\xCCV[\x90a\x11\x02\x90_\x19\x90`\x08\x02a\x04%V[\x19\x16\x90V[\x81a\x11\x11\x91a\x10\xF2V[\x90`\x02\x02\x17\x90V[\x91a\x11$\x90\x82a\x0F\xECV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11\xE3Wa\x11H\x82a\x11B\x85Ta\x01\x96V[\x85a\x10\x9BV[_\x90`\x1F\x83\x11`\x01\x14a\x11{W\x91\x80\x91a\x11j\x93_\x92a\x11oW[PPa\x11\x07V[\x90U[V[\x90\x91P\x015_\x80a\x11cV[`\x1F\x19\x83\x16\x91a\x11\x8A\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x11\xCBWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x11\xB1W[PPP\x02\x01\x90Ua\x11mV[a\x11\xC1\x91\x015`\x1F\x84\x16\x90a\x10\xF2V[\x90U_\x80\x80a\x11\xA5V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x11\x8DV[a\x02uV[\x90a\x11\xF3\x92\x91a\x11\x19V[V[\x91\x90a\x12\x0F\x81a\x12\x08\x81a\x12\x14\x95a\x02\xFFV[\x80\x95a\x06\x8EV[a\x02kV[\x01\x90V[\x90\x91a\x12/\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x11\xF5V[\x90V[a\x12?\x81\x83\x90`\x0Ca\x11\xE8V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\x12va\x12ma\x01RV[\x92\x83\x92\x83a\x12\x18V[\x03\x90\xA1V[\x90a\x12\x85\x91a\x0F\xBCV[V[`@\x1C\x90V[a\x12\x99a\x12\x9E\x91a\x12\x87V[a\x0BEV[\x90V[a\x12\xAB\x90Ta\x12\x8DV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x12\xC7a\x12\xCC\x91a\r\x1BV[a\x12\xAEV[\x90V[a\x12\xD9\x90Ta\x12\xBBV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x12\xFDa\x12\xF8a\x13\x02\x92a\r\xF2V[a\r\xF5V[a\x12\xDCV[\x90V[\x90V[a\x13\x1Ca\x13\x17a\x13!\x92a\x13\x05V[a\r\xF5V[a\x12\xDCV[\x90V[a\x13-\x90a\x0F\x04V[\x90V[a\x13Da\x13?a\x13I\x92a\r\xF2V[a\r\xF5V[a\x05\xADV[\x90V[\x90a\x13_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0E\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13}a\x13xa\x13\x82\x92a\x12\xDCV[a\r\xF5V[a\x12\xDCV[\x90V[\x90V[\x90a\x13\x9Da\x13\x98a\x13\xA4\x92a\x13iV[a\x13\x85V[\x82Ta\x13LV[\x90UV[`@\x1B\x90V[\x90a\x13\xC2h\xFF\0\0\0\0\0\0\0\0\x91a\x13\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\xD5\x90a\x06*V[\x90V[\x90V[\x90a\x13\xF0a\x13\xEBa\x13\xF7\x92a\x13\xCCV[a\x13\xD8V[\x82Ta\x13\xAEV[\x90UV[a\x14\x04\x90a\x13\x08V[\x90RV[\x91\x90a\x14\x1B\x90_` \x85\x01\x94\x01\x90a\x13\xFBV[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x142a\x1F\x84V[`\x80Ra\x14Ka\x14E_`\x80Q\x01a\x12\xA1V[\x15a\x06*V[`\xA0Ra\x14[_`\x80Q\x01a\x12\xCFV[\x80a\x14na\x14h_a\x12\xE9V[\x91a\x12\xDCV[\x14\x80a\x15\x97W[\x90a\x14\x89a\x14\x83`\x01a\x13\x08V[\x91a\x12\xDCV[\x14\x80a\x15oW[a\x14\x9B\x90\x91\x15a\x06*V[\x90\x81a\x15^W[Pa\x15;Wa\x14\xCF\x9Da\x14\xC2a\x14\xB8`\x01a\x13\x08V[_`\x80Q\x01a\x13\x88V[`\xA0Qa\x15'W[a\x1ChV[`\xA0Qa\x14\xD9W[V[a\x14\xE7_\x80`\x80Q\x01a\x13\xDBV[`\x01a\x15\x1F\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x15\x16a\x01RV[\x91\x82\x91\x82a\x14\x08V[\x03\x90\xA1a\x14\xD7V[a\x156`\x01_`\x80Q\x01a\x13\xDBV[a\x14\xCAV[a\x15Ca\x01RV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x15Z`\x04\x82\x01a\x03\xEDV[\x03\x90\xFD[a\x15i\x91P\x15a\x06*V[_a\x14\xA2V[Pa\x14\x9Ba\x15|0a\x13$V[;a\x15\x8Fa\x15\x89_a\x130V[\x91a\x05\xADV[\x14\x90Pa\x14\x90V[P`\xA0Qa\x14uV[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x15\xD4`\x1C` \x92a\x02\xFFV[a\x15\xDD\x81a\x15\xA0V[\x01\x90V[a\x15\xF6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xC7V[\x90V[\x15a\x16\0WV[a\x16\x08a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x1E`\x04\x82\x01a\x15\xE1V[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x16V`\x17` \x92a\x02\xFFV[a\x16_\x81a\x16\"V[\x01\x90V[a\x16x\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16IV[\x90V[\x15a\x16\x82WV[a\x16\x8Aa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xA0`\x04\x82\x01a\x16cV[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x16\xFE`\"`@\x92a\x02\xFFV[a\x17\x07\x81a\x16\xA4V[\x01\x90V[a\x17 \x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xF1V[\x90V[\x15a\x17*WV[a\x172a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17H`\x04\x82\x01a\x17\x0BV[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x17\xA6`&`@\x92a\x02\xFFV[a\x17\xAF\x81a\x17LV[\x01\x90V[a\x17\xC8\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\x99V[\x90V[\x15a\x17\xD2WV[a\x17\xDAa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xF0`\x04\x82\x01a\x17\xB3V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x18N`%`@\x92a\x02\xFFV[a\x18W\x81a\x17\xF4V[\x01\x90V[a\x18p\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18AV[\x90V[\x15a\x18zWV[a\x18\x82a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\x98`\x04\x82\x01a\x18[V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x18\xF6`*`@\x92a\x02\xFFV[a\x18\xFF\x81a\x18\x9CV[\x01\x90V[a\x19\x18\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\xE9V[\x90V[\x15a\x19\"WV[a\x19*a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19@`\x04\x82\x01a\x19\x03V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x19\x9E`#`@\x92a\x02\xFFV[a\x19\xA7\x81a\x19DV[\x01\x90V[a\x19\xC0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19\x91V[\x90V[\x15a\x19\xCAWV[a\x19\xD2a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xE8`\x04\x82\x01a\x19\xABV[\x03\x90\xFD[\x90a\x19\xF8_\x19\x91a\x0E\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1A\x17a\x1A\x12a\x1A\x1E\x92a\x10#V[a\x10?V[\x82Ta\x19\xECV[\x90UV[`\xA0\x1B\x90V[\x90a\x1A7`\xFF`\xA0\x1B\x91a\x1A\"V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1AVa\x1AQa\x1A]\x92a\x13\xCCV[a\x13\xD8V[\x82Ta\x1A(V[\x90UV[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1AxWPPV[\x80a\x1A\x85_`\x01\x93a\x10hV[\x01a\x1AmV[\x90\x91\x82\x81\x10a\x1A\x9AW[PPPV[a\x1A\xB8a\x1A\xB2a\x1A\xACa\x1A\xC3\x95a\x1AaV[\x92a\x1AaV[\x92a\x0CAV[\x91\x82\x01\x91\x01\x90a\x1AlV[_\x80\x80a\x1A\x95V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1A\xF4W\x81a\x1A\xE9a\x1A\xF2\x93a\x0C=V[\x90\x82\x81Ua\x1A\x8BV[V[a\x02uV[Q\x90V[a\x1B\x07\x90Qa\x03\xA0V[\x90V[` \x01\x90V[a\x1B\x19\x82a\x1A\xF9V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1B|Wa\x1BGa\x1BA`\x01\x92a\x1B<\x86\x86a\x1A\xCBV[a\x1B\nV[\x92a\x0CAV[\x92\x04\x91_[\x83\x81\x10a\x1BYWPPPPV[`\x01\x90` a\x1Boa\x1Bj\x86a\x1A\xFDV[a\x0F\x1CV[\x94\x01\x93\x81\x84\x01U\x01a\x1BLV[a\x02uV[\x90a\x1B\x8B\x91a\x1B\x10V[V[\x90a\x1B\x97\x81a\x02\xFBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1CWWa\x1B\xBB\x82a\x1B\xB5\x85Ta\x01\x96V[\x85a\x10\x9BV[` \x90`\x1F\x83\x11`\x01\x14a\x1B\xEFW\x91\x80\x91a\x1B\xDE\x93_\x92a\x1B\xE3W[PPa\x11\x07V[\x90U[V[\x90\x91P\x01Q_\x80a\x1B\xD7V[`\x1F\x19\x83\x16\x91a\x1B\xFE\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x1C?WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1C%W[PPP\x02\x01\x90Ua\x1B\xE1V[a\x1C5\x91\x01Q`\x1F\x84\x16\x90a\x10\xF2V[\x90U_\x80\x80a\x1C\x19V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x1C\x01V[a\x02uV[\x90a\x1Cf\x91a\x1B\x8DV[V[\x9B\x99\x95\x97a\x1D\xCBa\x1D\xE7\x98a\x1D\xFA\x9F\x96\x8F\x9Ba\x1D\xF5\x9F\x9Ca\x1D\xE0\x9Aa\x1D\xEE\x9F\x98a\x1D\xC4\x94a\x1D\xAF\x8F\x9Ca\x1D\xA8a\x1D\xB6\x94a\x1D\xD9\x9Fa\x1D\xD2\x9Ea\x1D\x9A\x8F\x92a\x1Dya\x1D\xA1\x94a\x1C\xD4a\x1D\xBD\x9Ea\x1C\xCDa\x1C\xC7a\x1C\xC2_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x15\xF9V[a\x1C\xF1\x85a\x1C\xEAa\x1C\xE4_a\x130V[\x91a\x05\xADV[\x14\x15a\x16{V[a\x1D\x0E\x87a\x1D\x07a\x1D\x01_a\x130V[\x91a\x05\xADV[\x14\x15a\x17#V[a\x1D3\x89a\x1D,a\x1D&a\x1D!_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x17\xCBV[a\x1DX\x8Ba\x1DQa\x1DKa\x1DF_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x18sV[a\x1Dra\x1Dla\x1Dg_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x19\x1BV[a\x1D\x93a\x1D\x8Da\x1D\x88_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x19\xC3V[`\x04a\x1A\x02V[`\x05a\x1A\x02V[`\x01a\x0F\x1FV[`\x02a\x0F\x1FV[`\x03a\x1AAV[`\x06a\x1A\x02V[`\x07a\x1A\x02V[`\x03a\x0F\x1FV[`\x08a\x1A\x02V[`\ta\x1B\x81V[`\na\x0F\x1FV[`\x0Ba\x1C\\V[`\x0Ca\x1C\\V[a\x1F\xA8V[V[\x90a\x1E\x12\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x14\x1DV[V[\x90a\x1EB\x91a\x1E=3a\x1E7a\x1E1a\x1E,_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x1EDV[V[a\x1EQ\x81\x83\x90`\x0Ba\x11\xE8V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1E\x88a\x1E\x7Fa\x01RV[\x92\x83\x92\x83a\x12\x18V[\x03\x90\xA1V[\x90a\x1E\x97\x91a\x1E\x14V[V[a\x1E\xC6\x90a\x1E\xC13a\x1E\xBBa\x1E\xB5a\x1E\xB0_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x1FIV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a\x1E\xFB` \x80\x92a\x02\xFFV[a\x1F\x04\x81a\x1E\xC8V[\x01\x90V[a\x1F\x1D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1E\xEFV[\x90V[\x15a\x1F'WV[a\x1F/a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1FE`\x04\x82\x01a\x1F\x08V[\x03\x90\xFD[a\x1Fw\x90a\x1Fr\x81a\x1Fka\x1Fea\x1F`_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x1F V[a\x1F\xA8V[V[a\x1F\x82\x90a\x1E\x99V[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1F\xB1_a\r4V[a\x1F\xBB\x82_a\x0F\x1FV[\x90a\x1F\xEFa\x1F\xE9\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\x10V[\x91a\x0F\x10V[\x91a\x1F\xF8a\x01RV[\x80a \x02\x81a\x03\xEDV[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 \xD3\\\x9CV\xAD\xF8\x04\0\xE3\xE5\xB5\xB0a\xFF\xEF\xB8\xBF\x82\xEC\x01\xC5s/\xF6\xCA\x06\xD3\xA6\xE0\x80\x96+dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60c06040526004361015610013575b610d17565b61001d5f3561014c565b80630743bf6e146101475780632a84b0f01461014257806341fc712d1461013d5780634b8be3f71461013857806357d1ba25146101335780635a2d9c181461012e57806362c73caa1461012957806366a1d108146101245780636edd6c091461011f57806385e1f4d01461011a5780638da5cb5b14610115578063a3c6e1e714610110578063aa6a43d81461010b578063bf6db6f814610106578063d1f4737c14610101578063e79388e6146100fc578063f2fde38b146100f7578063f881afaf146100f25763f8a144be0361000e57610ce2565b610c9e565b610bd8565b610ba3565b610b10565b610acc565b610a88565b610a44565b610a00565b6109be565b61097a565b610936565b6108f3565b6108ad565b6105d2565b610541565b61048b565b6103f2565b61035c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101b6575b60208310146101b157565b610182565b91607f16916101a6565b60209181520190565b5f5260205f2090565b905f92918054906101ec6101e583610196565b80946101c0565b916001811690815f146102435750600114610207575b505050565b61021491929394506101c9565b915f925b81841061022b57505001905f8080610202565b60018160209295939554848601520191019290610218565b92949550505060ff19168252151560200201905f8080610202565b90610268916101d2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102939061026b565b810190811067ffffffffffffffff8211176102ad57604052565b610275565b906102d26102cb926102c2610152565b9384809261025e565b0383610289565b565b905f106102e7576102e4906102b2565b90565b61016f565b6102f8600c5f906102d4565b90565b5190565b60209181520190565b90825f9392825e0152565b61033261033b60209361034093610329816102fb565b938480936102ff565b95869101610308565b61026b565b0190565b6103599160208201915f818403910152610313565b90565b3461038c5761036c366004610160565b6103886103776102ec565b61037f610152565b91829182610344565b0390f35b610158565b5f80fd5b60018060a01b031690565b6103a990610395565b90565b6103b5816103a0565b036103bc57565b5f80fd5b905035906103cd826103ac565b565b906020828203126103e8576103e5915f016103c0565b90565b61015c565b5f0190565b346104205761040a6104053660046103cf565b610fb1565b610412610152565b8061041c816103ed565b0390f35b610158565b1c90565b60018060a01b031690565b6104449060086104499302610425565b610429565b90565b906104579154610434565b90565b610466600a5f9061044c565b90565b610472906103a0565b9052565b9190610489905f60208501940190610469565b565b346104bb5761049b366004610160565b6104b76104a661045a565b6104ae610152565b91829182610476565b0390f35b610158565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156105065781359167ffffffffffffffff83116105015760200192600183028401116104fc57565b6104c8565b6104c4565b6104c0565b9060208282031261053c575f82013567ffffffffffffffff81116105375761053392016104cc565b9091565b610391565b61015c565b346105705761055a61055436600461050b565b9061127b565b610562610152565b8061056c816103ed565b0390f35b610158565b90565b61058890600861058d9302610425565b610575565b90565b9061059b9154610578565b90565b6105aa60065f90610590565b90565b90565b6105b9906105ad565b9052565b91906105d0905f602085019401906105b0565b565b34610602576105e2366004610160565b6105fe6105ed61059e565b6105f5610152565b918291826105bd565b0390f35b610158565b610610816105ad565b0361061757565b5f80fd5b9050359061062882610607565b565b151590565b6106388161062a565b0361063f57565b5f80fd5b905035906106508261062f565b565b5f80fd5b90610669610662610152565b9283610289565b565b67ffffffffffffffff81116106895761068560209161026b565b0190565b610275565b90825f939282370152565b909291926106ae6106a98261066b565b610656565b938185526020850190828401116106ca576106c89261068e565b565b610652565b9080601f830112156106ed578160206106ea93359101610699565b90565b6104c0565b67ffffffffffffffff811161070a5760208091020190565b610275565b9092919261072461071f826106f2565b610656565b938185526020808601920283019281841161076157915b8383106107485750505050565b6020809161075684866103c0565b81520192019161073b565b6104c8565b9080601f83011215610784578160206107819335910161070f565b90565b6104c0565b9190916101c0818403126108a8576107a3835f83016103c0565b926107b1816020840161061b565b926107bf826040850161061b565b926107cd83606083016103c0565b926107db81608084016103c0565b926107e98260a08501610643565b926107f78360c0830161061b565b926108058160e0840161061b565b926108148261010085016103c0565b9261082383610120830161061b565b926108328161014084016103c0565b9261016083013567ffffffffffffffff81116108a357826108549185016106cf565b9261018081013567ffffffffffffffff811161089e57836108769183016106cf565b926101a082013567ffffffffffffffff8111610899576108969201610766565b90565b610391565b610391565b610391565b61015c565b346108ee576108d86108c0366004610789565b9c9b909b9a919a999299989398979497969596611dfc565b6108e0610152565b806108ea816103ed565b0390f35b610158565b346109225761090c61090636600461050b565b90611e8d565b610914610152565b8061091e816103ed565b0390f35b610158565b610933600b5f906102d4565b90565b3461096657610946366004610160565b610962610951610927565b610959610152565b91829182610344565b0390f35b610158565b61097760015f9061044c565b90565b346109aa5761098a366004610160565b6109a661099561096b565b61099d610152565b91829182610476565b0390f35b610158565b6109bb60045f90610590565b90565b346109ee576109ce366004610160565b6109ea6109d96109af565b6109e1610152565b918291826105bd565b0390f35b610158565b6109fd5f8061044c565b90565b34610a3057610a10366004610160565b610a2c610a1b6109f3565b610a23610152565b91829182610476565b0390f35b610158565b610a4160085f90610590565b90565b34610a7457610a54366004610160565b610a70610a5f610a35565b610a67610152565b918291826105bd565b0390f35b610158565b610a8560025f9061044c565b90565b34610ab857610a98366004610160565b610ab4610aa3610a79565b610aab610152565b91829182610476565b0390f35b610158565b610ac960035f9061044c565b90565b34610afc57610adc366004610160565b610af8610ae7610abd565b610aef610152565b91829182610476565b0390f35b610158565b610b0d60075f90610590565b90565b34610b4057610b20366004610160565b610b3c610b2b610b01565b610b33610152565b918291826105bd565b0390f35b610158565b60ff1690565b610b5b906008610b609302610425565b610b45565b90565b90610b6e9154610b4b565b90565b610b7e6003601490610b63565b90565b610b8a9061062a565b9052565b9190610ba1905f60208501940190610b81565b565b34610bd357610bb3366004610160565b610bcf610bbe610b71565b610bc6610152565b91829182610b8e565b0390f35b610158565b34610c0657610bf0610beb3660046103cf565b611f79565b610bf8610152565b80610c02816103ed565b0390f35b610158565b90602082820312610c2457610c21915f0161061b565b90565b61015c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610c5381610c3d565b821015610c6d57610c65600191610c41565b910201905f90565b610c29565b6009610c7d81610c3d565b821015610c9a57610c9791610c9191610c4a565b9061044c565b90565b5f80fd5b34610cce57610cca610cb9610cb4366004610c0b565b610c72565b610cc1610152565b91829182610476565b0390f35b610158565b610cdf60055f90610590565b90565b34610d1257610cf2366004610160565b610d0e610cfd610cd3565b610d05610152565b918291826105bd565b0390f35b610158565b5f80fd5b5f1c90565b610d2c610d3191610d1b565b610429565b90565b610d3e9054610d20565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610d7560176020926102ff565b610d7e81610d41565b0190565b610d979060208101905f818303910152610d68565b90565b15610da157565b610da9610152565b62461bcd60e51b815280610dbf60048201610d82565b0390fd5b610df090610deb33610de5610ddf610dda5f610d34565b6103a0565b916103a0565b14610d9a565b610f3f565b565b90565b90565b610e0c610e07610e1192610df2565b610df5565b610395565b90565b610e1d90610df8565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610e7a60276040926102ff565b610e8381610e20565b0190565b610e9c9060208101905f818303910152610e6d565b90565b15610ea657565b610eae610152565b62461bcd60e51b815280610ec460048201610e87565b0390fd5b5f1b90565b90610ede60018060a01b0391610ec8565b9181191691161790565b610efc610ef7610f0192610395565b610df5565b610395565b90565b610f0d90610ee8565b90565b610f1990610f04565b90565b90565b90610f34610f2f610f3b92610f10565b610f1c565b8254610ecd565b9055565b610f6481610f5d610f57610f525f610e14565b6103a0565b916103a0565b1415610e9f565b610f6f81600a610f1f565b610f997f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610f10565b90610fa2610152565b80610fac816103ed565b0390a2565b610fba90610dc3565b565b90610fea91610fe533610fdf610fd9610fd45f610d34565b6103a0565b916103a0565b14610d9a565b611232565b565b5090565b601f602091010490565b1b90565b919060086110199102916110135f1984610ffa565b92610ffa565b9181191691161790565b61103761103261103c926105ad565b610df5565b6105ad565b90565b90565b919061105861105361106093611023565b61103f565b908354610ffe565b9055565b5f90565b61107a91611074611064565b91611042565b565b5b818110611088575050565b806110955f600193611068565b0161107d565b9190601f81116110ab575b505050565b6110b76110dc936101c9565b9060206110c384610ff0565b830193106110e4575b6110d590610ff0565b019061107c565b5f80806110a6565b91506110d5819290506110cc565b90611102905f1990600802610425565b191690565b81611111916110f2565b906002021790565b916111249082610fec565b9067ffffffffffffffff82116111e357611148826111428554610196565b8561109b565b5f90601f831160011461117b5791809161116a935f9261116f575b5050611107565b90555b565b90915001355f80611163565b601f1983169161118a856101c9565b925f5b8181106111cb575091600293918560019694106111b1575b5050500201905561116d565b6111c1910135601f8416906110f2565b90555f80806111a5565b9193602060018192878701358155019501920161118d565b610275565b906111f39291611119565b565b919061120f8161120881611214956102ff565b809561068e565b61026b565b0190565b909161122f9260208301925f8185039101526111f5565b90565b61123f818390600c6111e8565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a79161127661126d610152565b92839283611218565b0390a1565b9061128591610fbc565b565b60401c90565b61129961129e91611287565b610b45565b90565b6112ab905461128d565b90565b67ffffffffffffffff1690565b6112c76112cc91610d1b565b6112ae565b90565b6112d990546112bb565b90565b67ffffffffffffffff1690565b6112fd6112f861130292610df2565b610df5565b6112dc565b90565b90565b61131c61131761132192611305565b610df5565b6112dc565b90565b61132d90610f04565b90565b61134461133f61134992610df2565b610df5565b6105ad565b90565b9061135f67ffffffffffffffff91610ec8565b9181191691161790565b61137d611378611382926112dc565b610df5565b6112dc565b90565b90565b9061139d6113986113a492611369565b611385565b825461134c565b9055565b60401b90565b906113c268ff0000000000000000916113a8565b9181191691161790565b6113d59061062a565b90565b90565b906113f06113eb6113f7926113cc565b6113d8565b82546113ae565b9055565b61140490611308565b9052565b919061141b905f602085019401906113fb565b565b9c9b9a99989796959493929190611432611f84565b60805261144b6114455f608051016112a1565b1561062a565b60a05261145b5f608051016112cf565b8061146e6114685f6112e9565b916112dc565b1480611597575b906114896114836001611308565b916112dc565b148061156f575b61149b90911561062a565b908161155e575b5061153b576114cf9d6114c26114b86001611308565b5f60805101611388565b60a051611527575b611c68565b60a0516114d9575b565b6114e75f80608051016113db565b600161151f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611516610152565b91829182611408565b0390a16114d7565b61153660015f608051016113db565b6114ca565b611543610152565b63f92ee8a960e01b81528061155a600482016103ed565b0390fd5b61156991501561062a565b5f6114a2565b5061149b61157c30611324565b3b61158f6115895f611330565b916105ad565b149050611490565b5060a051611475565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b6115d4601c6020926102ff565b6115dd816115a0565b0190565b6115f69060208101905f8183039101526115c7565b90565b1561160057565b611608610152565b62461bcd60e51b81528061161e600482016115e1565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61165660176020926102ff565b61165f81611622565b0190565b6116789060208101905f818303910152611649565b90565b1561168257565b61168a610152565b62461bcd60e51b8152806116a060048201611663565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6116fe60226040926102ff565b611707816116a4565b0190565b6117209060208101905f8183039101526116f1565b90565b1561172a57565b611732610152565b62461bcd60e51b8152806117486004820161170b565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6117a660266040926102ff565b6117af8161174c565b0190565b6117c89060208101905f818303910152611799565b90565b156117d257565b6117da610152565b62461bcd60e51b8152806117f0600482016117b3565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61184e60256040926102ff565b611857816117f4565b0190565b6118709060208101905f818303910152611841565b90565b1561187a57565b611882610152565b62461bcd60e51b8152806118986004820161185b565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6118f6602a6040926102ff565b6118ff8161189c565b0190565b6119189060208101905f8183039101526118e9565b90565b1561192257565b61192a610152565b62461bcd60e51b81528061194060048201611903565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61199e60236040926102ff565b6119a781611944565b0190565b6119c09060208101905f818303910152611991565b90565b156119ca57565b6119d2610152565b62461bcd60e51b8152806119e8600482016119ab565b0390fd5b906119f85f1991610ec8565b9181191691161790565b90611a17611a12611a1e92611023565b61103f565b82546119ec565b9055565b60a01b90565b90611a3760ff60a01b91611a22565b9181191691161790565b90611a56611a51611a5d926113cc565b6113d8565b8254611a28565b9055565b600190818003010490565b5b818110611a78575050565b80611a855f600193611068565b01611a6d565b9091828110611a9a575b505050565b611ab8611ab2611aac611ac395611a61565b92611a61565b92610c41565b918201910190611a6c565b5f8080611a95565b90680100000000000000008111611af45781611ae9611af293610c3d565b90828155611a8b565b565b610275565b5190565b611b0790516103a0565b90565b60200190565b611b1982611af9565b9167ffffffffffffffff8311611b7c57611b47611b41600192611b3c8686611acb565b611b0a565b92610c41565b9204915f5b838110611b595750505050565b6001906020611b6f611b6a86611afd565b610f1c565b9401938184015501611b4c565b610275565b90611b8b91611b10565b565b90611b97816102fb565b9067ffffffffffffffff8211611c5757611bbb82611bb58554610196565b8561109b565b602090601f8311600114611bef57918091611bde935f92611be3575b5050611107565b90555b565b90915001515f80611bd7565b601f19831691611bfe856101c9565b925f5b818110611c3f57509160029391856001969410611c25575b50505002019055611be1565b611c35910151601f8416906110f2565b90555f8080611c19565b91936020600181928787015181550195019201611c01565b610275565b90611c6691611b8d565b565b9b999597611dcb611de798611dfa9f968f9b611df59f9c611de09a611dee9f98611dc494611daf8f9c611da8611db694611dd99f611dd29e611d9a8f92611d79611da194611cd4611dbd9e611ccd611cc7611cc25f610e14565b6103a0565b916103a0565b14156115f9565b611cf185611cea611ce45f611330565b916105ad565b141561167b565b611d0e87611d07611d015f611330565b916105ad565b1415611723565b611d3389611d2c611d26611d215f610e14565b6103a0565b916103a0565b14156117cb565b611d588b611d51611d4b611d465f610e14565b6103a0565b916103a0565b1415611873565b611d72611d6c611d675f610e14565b6103a0565b916103a0565b141561191b565b611d93611d8d611d885f610e14565b6103a0565b916103a0565b14156119c3565b6004611a02565b6005611a02565b6001610f1f565b6002610f1f565b6003611a41565b6006611a02565b6007611a02565b6003610f1f565b6008611a02565b6009611b81565b600a610f1f565b600b611c5c565b600c611c5c565b611fa8565b565b90611e129d9c9b9a99989796959493929161141d565b565b90611e4291611e3d33611e37611e31611e2c5f610d34565b6103a0565b916103a0565b14610d9a565b611e44565b565b611e51818390600b6111e8565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611e88611e7f610152565b92839283611218565b0390a1565b90611e9791611e14565b565b611ec690611ec133611ebb611eb5611eb05f610d34565b6103a0565b916103a0565b14610d9a565b611f49565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b611efb602080926102ff565b611f0481611ec8565b0190565b611f1d9060208101905f818303910152611eef565b90565b15611f2757565b611f2f610152565b62461bcd60e51b815280611f4560048201611f08565b0390fd5b611f7790611f7281611f6b611f65611f605f610e14565b6103a0565b916103a0565b1415611f20565b611fa8565b565b611f8290611e99565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611fb15f610d34565b611fbb825f610f1f565b90611fef611fe97f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f10565b91610f10565b91611ff8610152565b80612002816103ed565b0390a356fea2646970667358221220d35c9c56adf80400e3e5b5b061ffefb8bf82ec01c5732ff6ca06d3a6e080962b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\x17V[a\0\x1D_5a\x01LV[\x80c\x07C\xBFn\x14a\x01GW\x80c*\x84\xB0\xF0\x14a\x01BW\x80cA\xFCq-\x14a\x01=W\x80cK\x8B\xE3\xF7\x14a\x018W\x80cW\xD1\xBA%\x14a\x013W\x80cZ-\x9C\x18\x14a\x01.W\x80cb\xC7<\xAA\x14a\x01)W\x80cf\xA1\xD1\x08\x14a\x01$W\x80cn\xDDl\t\x14a\x01\x1FW\x80c\x85\xE1\xF4\xD0\x14a\x01\x1AW\x80c\x8D\xA5\xCB[\x14a\x01\x15W\x80c\xA3\xC6\xE1\xE7\x14a\x01\x10W\x80c\xAAjC\xD8\x14a\x01\x0BW\x80c\xBFm\xB6\xF8\x14a\x01\x06W\x80c\xD1\xF4s|\x14a\x01\x01W\x80c\xE7\x93\x88\xE6\x14a\0\xFCW\x80c\xF2\xFD\xE3\x8B\x14a\0\xF7W\x80c\xF8\x81\xAF\xAF\x14a\0\xF2Wc\xF8\xA1D\xBE\x03a\0\x0EWa\x0C\xE2V[a\x0C\x9EV[a\x0B\xD8V[a\x0B\xA3V[a\x0B\x10V[a\n\xCCV[a\n\x88V[a\nDV[a\n\0V[a\t\xBEV[a\tzV[a\t6V[a\x08\xF3V[a\x08\xADV[a\x05\xD2V[a\x05AV[a\x04\x8BV[a\x03\xF2V[a\x03\\V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xB6W[` \x83\x10\x14a\x01\xB1WV[a\x01\x82V[\x91`\x7F\x16\x91a\x01\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xECa\x01\xE5\x83a\x01\x96V[\x80\x94a\x01\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02CWP`\x01\x14a\x02\x07W[PPPV[a\x02\x14\x91\x92\x93\x94Pa\x01\xC9V[\x91_\x92[\x81\x84\x10a\x02+WPP\x01\x90_\x80\x80a\x02\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x02V[\x90a\x02h\x91a\x01\xD2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x93\x90a\x02kV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xADW`@RV[a\x02uV[\x90a\x02\xD2a\x02\xCB\x92a\x02\xC2a\x01RV[\x93\x84\x80\x92a\x02^V[\x03\x83a\x02\x89V[V[\x90_\x10a\x02\xE7Wa\x02\xE4\x90a\x02\xB2V[\x90V[a\x01oV[a\x02\xF8`\x0C_\x90a\x02\xD4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x032a\x03;` \x93a\x03@\x93a\x03)\x81a\x02\xFBV[\x93\x84\x80\x93a\x02\xFFV[\x95\x86\x91\x01a\x03\x08V[a\x02kV[\x01\x90V[a\x03Y\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x13V[\x90V[4a\x03\x8CWa\x03l6`\x04a\x01`V[a\x03\x88a\x03wa\x02\xECV[a\x03\x7Fa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA9\x90a\x03\x95V[\x90V[a\x03\xB5\x81a\x03\xA0V[\x03a\x03\xBCWV[_\x80\xFD[\x90P5\x90a\x03\xCD\x82a\x03\xACV[V[\x90` \x82\x82\x03\x12a\x03\xE8Wa\x03\xE5\x91_\x01a\x03\xC0V[\x90V[a\x01\\V[_\x01\x90V[4a\x04 Wa\x04\na\x04\x056`\x04a\x03\xCFV[a\x0F\xB1V[a\x04\x12a\x01RV[\x80a\x04\x1C\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04D\x90`\x08a\x04I\x93\x02a\x04%V[a\x04)V[\x90V[\x90a\x04W\x91Ta\x044V[\x90V[a\x04f`\n_\x90a\x04LV[\x90V[a\x04r\x90a\x03\xA0V[\x90RV[\x91\x90a\x04\x89\x90_` \x85\x01\x94\x01\x90a\x04iV[V[4a\x04\xBBWa\x04\x9B6`\x04a\x01`V[a\x04\xB7a\x04\xA6a\x04ZV[a\x04\xAEa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x06W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x01W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xFCWV[a\x04\xC8V[a\x04\xC4V[a\x04\xC0V[\x90` \x82\x82\x03\x12a\x05<W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x057Wa\x053\x92\x01a\x04\xCCV[\x90\x91V[a\x03\x91V[a\x01\\V[4a\x05pWa\x05Za\x05T6`\x04a\x05\x0BV[\x90a\x12{V[a\x05ba\x01RV[\x80a\x05l\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x90V[a\x05\x88\x90`\x08a\x05\x8D\x93\x02a\x04%V[a\x05uV[\x90V[\x90a\x05\x9B\x91Ta\x05xV[\x90V[a\x05\xAA`\x06_\x90a\x05\x90V[\x90V[\x90V[a\x05\xB9\x90a\x05\xADV[\x90RV[\x91\x90a\x05\xD0\x90_` \x85\x01\x94\x01\x90a\x05\xB0V[V[4a\x06\x02Wa\x05\xE26`\x04a\x01`V[a\x05\xFEa\x05\xEDa\x05\x9EV[a\x05\xF5a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[a\x06\x10\x81a\x05\xADV[\x03a\x06\x17WV[_\x80\xFD[\x90P5\x90a\x06(\x82a\x06\x07V[V[\x15\x15\x90V[a\x068\x81a\x06*V[\x03a\x06?WV[_\x80\xFD[\x90P5\x90a\x06P\x82a\x06/V[V[_\x80\xFD[\x90a\x06ia\x06ba\x01RV[\x92\x83a\x02\x89V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\x89Wa\x06\x85` \x91a\x02kV[\x01\x90V[a\x02uV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x06\xAEa\x06\xA9\x82a\x06kV[a\x06VV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x06\xCAWa\x06\xC8\x92a\x06\x8EV[V[a\x06RV[\x90\x80`\x1F\x83\x01\x12\x15a\x06\xEDW\x81` a\x06\xEA\x935\x91\x01a\x06\x99V[\x90V[a\x04\xC0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\nW` \x80\x91\x02\x01\x90V[a\x02uV[\x90\x92\x91\x92a\x07$a\x07\x1F\x82a\x06\xF2V[a\x06VV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x07aW\x91[\x83\x83\x10a\x07HWPPPPV[` \x80\x91a\x07V\x84\x86a\x03\xC0V[\x81R\x01\x92\x01\x91a\x07;V[a\x04\xC8V[\x90\x80`\x1F\x83\x01\x12\x15a\x07\x84W\x81` a\x07\x81\x935\x91\x01a\x07\x0FV[\x90V[a\x04\xC0V[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\x08\xA8Wa\x07\xA3\x83_\x83\x01a\x03\xC0V[\x92a\x07\xB1\x81` \x84\x01a\x06\x1BV[\x92a\x07\xBF\x82`@\x85\x01a\x06\x1BV[\x92a\x07\xCD\x83``\x83\x01a\x03\xC0V[\x92a\x07\xDB\x81`\x80\x84\x01a\x03\xC0V[\x92a\x07\xE9\x82`\xA0\x85\x01a\x06CV[\x92a\x07\xF7\x83`\xC0\x83\x01a\x06\x1BV[\x92a\x08\x05\x81`\xE0\x84\x01a\x06\x1BV[\x92a\x08\x14\x82a\x01\0\x85\x01a\x03\xC0V[\x92a\x08#\x83a\x01 \x83\x01a\x06\x1BV[\x92a\x082\x81a\x01@\x84\x01a\x03\xC0V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xA3W\x82a\x08T\x91\x85\x01a\x06\xCFV[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x9EW\x83a\x08v\x91\x83\x01a\x06\xCFV[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x99Wa\x08\x96\x92\x01a\x07fV[\x90V[a\x03\x91V[a\x03\x91V[a\x03\x91V[a\x01\\V[4a\x08\xEEWa\x08\xD8a\x08\xC06`\x04a\x07\x89V[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1D\xFCV[a\x08\xE0a\x01RV[\x80a\x08\xEA\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[4a\t\"Wa\t\x0Ca\t\x066`\x04a\x05\x0BV[\x90a\x1E\x8DV[a\t\x14a\x01RV[\x80a\t\x1E\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[a\t3`\x0B_\x90a\x02\xD4V[\x90V[4a\tfWa\tF6`\x04a\x01`V[a\tba\tQa\t'V[a\tYa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[a\tw`\x01_\x90a\x04LV[\x90V[4a\t\xAAWa\t\x8A6`\x04a\x01`V[a\t\xA6a\t\x95a\tkV[a\t\x9Da\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\t\xBB`\x04_\x90a\x05\x90V[\x90V[4a\t\xEEWa\t\xCE6`\x04a\x01`V[a\t\xEAa\t\xD9a\t\xAFV[a\t\xE1a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[a\t\xFD_\x80a\x04LV[\x90V[4a\n0Wa\n\x106`\x04a\x01`V[a\n,a\n\x1Ba\t\xF3V[a\n#a\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\nA`\x08_\x90a\x05\x90V[\x90V[4a\ntWa\nT6`\x04a\x01`V[a\npa\n_a\n5V[a\nga\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[a\n\x85`\x02_\x90a\x04LV[\x90V[4a\n\xB8Wa\n\x986`\x04a\x01`V[a\n\xB4a\n\xA3a\nyV[a\n\xABa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\n\xC9`\x03_\x90a\x04LV[\x90V[4a\n\xFCWa\n\xDC6`\x04a\x01`V[a\n\xF8a\n\xE7a\n\xBDV[a\n\xEFa\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\x0B\r`\x07_\x90a\x05\x90V[\x90V[4a\x0B@Wa\x0B 6`\x04a\x01`V[a\x0B<a\x0B+a\x0B\x01V[a\x0B3a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[`\xFF\x16\x90V[a\x0B[\x90`\x08a\x0B`\x93\x02a\x04%V[a\x0BEV[\x90V[\x90a\x0Bn\x91Ta\x0BKV[\x90V[a\x0B~`\x03`\x14\x90a\x0BcV[\x90V[a\x0B\x8A\x90a\x06*V[\x90RV[\x91\x90a\x0B\xA1\x90_` \x85\x01\x94\x01\x90a\x0B\x81V[V[4a\x0B\xD3Wa\x0B\xB36`\x04a\x01`V[a\x0B\xCFa\x0B\xBEa\x0BqV[a\x0B\xC6a\x01RV[\x91\x82\x91\x82a\x0B\x8EV[\x03\x90\xF3[a\x01XV[4a\x0C\x06Wa\x0B\xF0a\x0B\xEB6`\x04a\x03\xCFV[a\x1FyV[a\x0B\xF8a\x01RV[\x80a\x0C\x02\x81a\x03\xEDV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0C$Wa\x0C!\x91_\x01a\x06\x1BV[\x90V[a\x01\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x0CS\x81a\x0C=V[\x82\x10\x15a\x0CmWa\x0Ce`\x01\x91a\x0CAV[\x91\x02\x01\x90_\x90V[a\x0C)V[`\ta\x0C}\x81a\x0C=V[\x82\x10\x15a\x0C\x9AWa\x0C\x97\x91a\x0C\x91\x91a\x0CJV[\x90a\x04LV[\x90V[_\x80\xFD[4a\x0C\xCEWa\x0C\xCAa\x0C\xB9a\x0C\xB46`\x04a\x0C\x0BV[a\x0CrV[a\x0C\xC1a\x01RV[\x91\x82\x91\x82a\x04vV[\x03\x90\xF3[a\x01XV[a\x0C\xDF`\x05_\x90a\x05\x90V[\x90V[4a\r\x12Wa\x0C\xF26`\x04a\x01`V[a\r\x0Ea\x0C\xFDa\x0C\xD3V[a\r\x05a\x01RV[\x91\x82\x91\x82a\x05\xBDV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x1C\x90V[a\r,a\r1\x91a\r\x1BV[a\x04)V[\x90V[a\r>\x90Ta\r V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\ru`\x17` \x92a\x02\xFFV[a\r~\x81a\rAV[\x01\x90V[a\r\x97\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\rhV[\x90V[\x15a\r\xA1WV[a\r\xA9a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xBF`\x04\x82\x01a\r\x82V[\x03\x90\xFD[a\r\xF0\x90a\r\xEB3a\r\xE5a\r\xDFa\r\xDA_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x0F?V[V[\x90V[\x90V[a\x0E\x0Ca\x0E\x07a\x0E\x11\x92a\r\xF2V[a\r\xF5V[a\x03\x95V[\x90V[a\x0E\x1D\x90a\r\xF8V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0Ez`'`@\x92a\x02\xFFV[a\x0E\x83\x81a\x0E V[\x01\x90V[a\x0E\x9C\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0EmV[\x90V[\x15a\x0E\xA6WV[a\x0E\xAEa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\xC4`\x04\x82\x01a\x0E\x87V[\x03\x90\xFD[_\x1B\x90V[\x90a\x0E\xDE`\x01\x80`\xA0\x1B\x03\x91a\x0E\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xFCa\x0E\xF7a\x0F\x01\x92a\x03\x95V[a\r\xF5V[a\x03\x95V[\x90V[a\x0F\r\x90a\x0E\xE8V[\x90V[a\x0F\x19\x90a\x0F\x04V[\x90V[\x90V[\x90a\x0F4a\x0F/a\x0F;\x92a\x0F\x10V[a\x0F\x1CV[\x82Ta\x0E\xCDV[\x90UV[a\x0Fd\x81a\x0F]a\x0FWa\x0FR_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x0E\x9FV[a\x0Fo\x81`\na\x0F\x1FV[a\x0F\x99\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0F\x10V[\x90a\x0F\xA2a\x01RV[\x80a\x0F\xAC\x81a\x03\xEDV[\x03\x90\xA2V[a\x0F\xBA\x90a\r\xC3V[V[\x90a\x0F\xEA\x91a\x0F\xE53a\x0F\xDFa\x0F\xD9a\x0F\xD4_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x122V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x10\x19\x91\x02\x91a\x10\x13_\x19\x84a\x0F\xFAV[\x92a\x0F\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x107a\x102a\x10<\x92a\x05\xADV[a\r\xF5V[a\x05\xADV[\x90V[\x90V[\x91\x90a\x10Xa\x10Sa\x10`\x93a\x10#V[a\x10?V[\x90\x83Ta\x0F\xFEV[\x90UV[_\x90V[a\x10z\x91a\x10ta\x10dV[\x91a\x10BV[V[[\x81\x81\x10a\x10\x88WPPV[\x80a\x10\x95_`\x01\x93a\x10hV[\x01a\x10}V[\x91\x90`\x1F\x81\x11a\x10\xABW[PPPV[a\x10\xB7a\x10\xDC\x93a\x01\xC9V[\x90` a\x10\xC3\x84a\x0F\xF0V[\x83\x01\x93\x10a\x10\xE4W[a\x10\xD5\x90a\x0F\xF0V[\x01\x90a\x10|V[_\x80\x80a\x10\xA6V[\x91Pa\x10\xD5\x81\x92\x90Pa\x10\xCCV[\x90a\x11\x02\x90_\x19\x90`\x08\x02a\x04%V[\x19\x16\x90V[\x81a\x11\x11\x91a\x10\xF2V[\x90`\x02\x02\x17\x90V[\x91a\x11$\x90\x82a\x0F\xECV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11\xE3Wa\x11H\x82a\x11B\x85Ta\x01\x96V[\x85a\x10\x9BV[_\x90`\x1F\x83\x11`\x01\x14a\x11{W\x91\x80\x91a\x11j\x93_\x92a\x11oW[PPa\x11\x07V[\x90U[V[\x90\x91P\x015_\x80a\x11cV[`\x1F\x19\x83\x16\x91a\x11\x8A\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x11\xCBWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x11\xB1W[PPP\x02\x01\x90Ua\x11mV[a\x11\xC1\x91\x015`\x1F\x84\x16\x90a\x10\xF2V[\x90U_\x80\x80a\x11\xA5V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x11\x8DV[a\x02uV[\x90a\x11\xF3\x92\x91a\x11\x19V[V[\x91\x90a\x12\x0F\x81a\x12\x08\x81a\x12\x14\x95a\x02\xFFV[\x80\x95a\x06\x8EV[a\x02kV[\x01\x90V[\x90\x91a\x12/\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x11\xF5V[\x90V[a\x12?\x81\x83\x90`\x0Ca\x11\xE8V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\x12va\x12ma\x01RV[\x92\x83\x92\x83a\x12\x18V[\x03\x90\xA1V[\x90a\x12\x85\x91a\x0F\xBCV[V[`@\x1C\x90V[a\x12\x99a\x12\x9E\x91a\x12\x87V[a\x0BEV[\x90V[a\x12\xAB\x90Ta\x12\x8DV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x12\xC7a\x12\xCC\x91a\r\x1BV[a\x12\xAEV[\x90V[a\x12\xD9\x90Ta\x12\xBBV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x12\xFDa\x12\xF8a\x13\x02\x92a\r\xF2V[a\r\xF5V[a\x12\xDCV[\x90V[\x90V[a\x13\x1Ca\x13\x17a\x13!\x92a\x13\x05V[a\r\xF5V[a\x12\xDCV[\x90V[a\x13-\x90a\x0F\x04V[\x90V[a\x13Da\x13?a\x13I\x92a\r\xF2V[a\r\xF5V[a\x05\xADV[\x90V[\x90a\x13_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0E\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13}a\x13xa\x13\x82\x92a\x12\xDCV[a\r\xF5V[a\x12\xDCV[\x90V[\x90V[\x90a\x13\x9Da\x13\x98a\x13\xA4\x92a\x13iV[a\x13\x85V[\x82Ta\x13LV[\x90UV[`@\x1B\x90V[\x90a\x13\xC2h\xFF\0\0\0\0\0\0\0\0\x91a\x13\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\xD5\x90a\x06*V[\x90V[\x90V[\x90a\x13\xF0a\x13\xEBa\x13\xF7\x92a\x13\xCCV[a\x13\xD8V[\x82Ta\x13\xAEV[\x90UV[a\x14\x04\x90a\x13\x08V[\x90RV[\x91\x90a\x14\x1B\x90_` \x85\x01\x94\x01\x90a\x13\xFBV[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x142a\x1F\x84V[`\x80Ra\x14Ka\x14E_`\x80Q\x01a\x12\xA1V[\x15a\x06*V[`\xA0Ra\x14[_`\x80Q\x01a\x12\xCFV[\x80a\x14na\x14h_a\x12\xE9V[\x91a\x12\xDCV[\x14\x80a\x15\x97W[\x90a\x14\x89a\x14\x83`\x01a\x13\x08V[\x91a\x12\xDCV[\x14\x80a\x15oW[a\x14\x9B\x90\x91\x15a\x06*V[\x90\x81a\x15^W[Pa\x15;Wa\x14\xCF\x9Da\x14\xC2a\x14\xB8`\x01a\x13\x08V[_`\x80Q\x01a\x13\x88V[`\xA0Qa\x15'W[a\x1ChV[`\xA0Qa\x14\xD9W[V[a\x14\xE7_\x80`\x80Q\x01a\x13\xDBV[`\x01a\x15\x1F\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x15\x16a\x01RV[\x91\x82\x91\x82a\x14\x08V[\x03\x90\xA1a\x14\xD7V[a\x156`\x01_`\x80Q\x01a\x13\xDBV[a\x14\xCAV[a\x15Ca\x01RV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x15Z`\x04\x82\x01a\x03\xEDV[\x03\x90\xFD[a\x15i\x91P\x15a\x06*V[_a\x14\xA2V[Pa\x14\x9Ba\x15|0a\x13$V[;a\x15\x8Fa\x15\x89_a\x130V[\x91a\x05\xADV[\x14\x90Pa\x14\x90V[P`\xA0Qa\x14uV[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x15\xD4`\x1C` \x92a\x02\xFFV[a\x15\xDD\x81a\x15\xA0V[\x01\x90V[a\x15\xF6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xC7V[\x90V[\x15a\x16\0WV[a\x16\x08a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x1E`\x04\x82\x01a\x15\xE1V[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x16V`\x17` \x92a\x02\xFFV[a\x16_\x81a\x16\"V[\x01\x90V[a\x16x\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16IV[\x90V[\x15a\x16\x82WV[a\x16\x8Aa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xA0`\x04\x82\x01a\x16cV[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x16\xFE`\"`@\x92a\x02\xFFV[a\x17\x07\x81a\x16\xA4V[\x01\x90V[a\x17 \x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xF1V[\x90V[\x15a\x17*WV[a\x172a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17H`\x04\x82\x01a\x17\x0BV[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x17\xA6`&`@\x92a\x02\xFFV[a\x17\xAF\x81a\x17LV[\x01\x90V[a\x17\xC8\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\x99V[\x90V[\x15a\x17\xD2WV[a\x17\xDAa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xF0`\x04\x82\x01a\x17\xB3V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x18N`%`@\x92a\x02\xFFV[a\x18W\x81a\x17\xF4V[\x01\x90V[a\x18p\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18AV[\x90V[\x15a\x18zWV[a\x18\x82a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\x98`\x04\x82\x01a\x18[V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x18\xF6`*`@\x92a\x02\xFFV[a\x18\xFF\x81a\x18\x9CV[\x01\x90V[a\x19\x18\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\xE9V[\x90V[\x15a\x19\"WV[a\x19*a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19@`\x04\x82\x01a\x19\x03V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x19\x9E`#`@\x92a\x02\xFFV[a\x19\xA7\x81a\x19DV[\x01\x90V[a\x19\xC0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19\x91V[\x90V[\x15a\x19\xCAWV[a\x19\xD2a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xE8`\x04\x82\x01a\x19\xABV[\x03\x90\xFD[\x90a\x19\xF8_\x19\x91a\x0E\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1A\x17a\x1A\x12a\x1A\x1E\x92a\x10#V[a\x10?V[\x82Ta\x19\xECV[\x90UV[`\xA0\x1B\x90V[\x90a\x1A7`\xFF`\xA0\x1B\x91a\x1A\"V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1AVa\x1AQa\x1A]\x92a\x13\xCCV[a\x13\xD8V[\x82Ta\x1A(V[\x90UV[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1AxWPPV[\x80a\x1A\x85_`\x01\x93a\x10hV[\x01a\x1AmV[\x90\x91\x82\x81\x10a\x1A\x9AW[PPPV[a\x1A\xB8a\x1A\xB2a\x1A\xACa\x1A\xC3\x95a\x1AaV[\x92a\x1AaV[\x92a\x0CAV[\x91\x82\x01\x91\x01\x90a\x1AlV[_\x80\x80a\x1A\x95V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1A\xF4W\x81a\x1A\xE9a\x1A\xF2\x93a\x0C=V[\x90\x82\x81Ua\x1A\x8BV[V[a\x02uV[Q\x90V[a\x1B\x07\x90Qa\x03\xA0V[\x90V[` \x01\x90V[a\x1B\x19\x82a\x1A\xF9V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1B|Wa\x1BGa\x1BA`\x01\x92a\x1B<\x86\x86a\x1A\xCBV[a\x1B\nV[\x92a\x0CAV[\x92\x04\x91_[\x83\x81\x10a\x1BYWPPPPV[`\x01\x90` a\x1Boa\x1Bj\x86a\x1A\xFDV[a\x0F\x1CV[\x94\x01\x93\x81\x84\x01U\x01a\x1BLV[a\x02uV[\x90a\x1B\x8B\x91a\x1B\x10V[V[\x90a\x1B\x97\x81a\x02\xFBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1CWWa\x1B\xBB\x82a\x1B\xB5\x85Ta\x01\x96V[\x85a\x10\x9BV[` \x90`\x1F\x83\x11`\x01\x14a\x1B\xEFW\x91\x80\x91a\x1B\xDE\x93_\x92a\x1B\xE3W[PPa\x11\x07V[\x90U[V[\x90\x91P\x01Q_\x80a\x1B\xD7V[`\x1F\x19\x83\x16\x91a\x1B\xFE\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x1C?WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1C%W[PPP\x02\x01\x90Ua\x1B\xE1V[a\x1C5\x91\x01Q`\x1F\x84\x16\x90a\x10\xF2V[\x90U_\x80\x80a\x1C\x19V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x1C\x01V[a\x02uV[\x90a\x1Cf\x91a\x1B\x8DV[V[\x9B\x99\x95\x97a\x1D\xCBa\x1D\xE7\x98a\x1D\xFA\x9F\x96\x8F\x9Ba\x1D\xF5\x9F\x9Ca\x1D\xE0\x9Aa\x1D\xEE\x9F\x98a\x1D\xC4\x94a\x1D\xAF\x8F\x9Ca\x1D\xA8a\x1D\xB6\x94a\x1D\xD9\x9Fa\x1D\xD2\x9Ea\x1D\x9A\x8F\x92a\x1Dya\x1D\xA1\x94a\x1C\xD4a\x1D\xBD\x9Ea\x1C\xCDa\x1C\xC7a\x1C\xC2_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x15\xF9V[a\x1C\xF1\x85a\x1C\xEAa\x1C\xE4_a\x130V[\x91a\x05\xADV[\x14\x15a\x16{V[a\x1D\x0E\x87a\x1D\x07a\x1D\x01_a\x130V[\x91a\x05\xADV[\x14\x15a\x17#V[a\x1D3\x89a\x1D,a\x1D&a\x1D!_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x17\xCBV[a\x1DX\x8Ba\x1DQa\x1DKa\x1DF_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x18sV[a\x1Dra\x1Dla\x1Dg_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x19\x1BV[a\x1D\x93a\x1D\x8Da\x1D\x88_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x19\xC3V[`\x04a\x1A\x02V[`\x05a\x1A\x02V[`\x01a\x0F\x1FV[`\x02a\x0F\x1FV[`\x03a\x1AAV[`\x06a\x1A\x02V[`\x07a\x1A\x02V[`\x03a\x0F\x1FV[`\x08a\x1A\x02V[`\ta\x1B\x81V[`\na\x0F\x1FV[`\x0Ba\x1C\\V[`\x0Ca\x1C\\V[a\x1F\xA8V[V[\x90a\x1E\x12\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x14\x1DV[V[\x90a\x1EB\x91a\x1E=3a\x1E7a\x1E1a\x1E,_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x1EDV[V[a\x1EQ\x81\x83\x90`\x0Ba\x11\xE8V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1E\x88a\x1E\x7Fa\x01RV[\x92\x83\x92\x83a\x12\x18V[\x03\x90\xA1V[\x90a\x1E\x97\x91a\x1E\x14V[V[a\x1E\xC6\x90a\x1E\xC13a\x1E\xBBa\x1E\xB5a\x1E\xB0_a\r4V[a\x03\xA0V[\x91a\x03\xA0V[\x14a\r\x9AV[a\x1FIV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a\x1E\xFB` \x80\x92a\x02\xFFV[a\x1F\x04\x81a\x1E\xC8V[\x01\x90V[a\x1F\x1D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1E\xEFV[\x90V[\x15a\x1F'WV[a\x1F/a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1FE`\x04\x82\x01a\x1F\x08V[\x03\x90\xFD[a\x1Fw\x90a\x1Fr\x81a\x1Fka\x1Fea\x1F`_a\x0E\x14V[a\x03\xA0V[\x91a\x03\xA0V[\x14\x15a\x1F V[a\x1F\xA8V[V[a\x1F\x82\x90a\x1E\x99V[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1F\xB1_a\r4V[a\x1F\xBB\x82_a\x0F\x1FV[\x90a\x1F\xEFa\x1F\xE9\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\x10V[\x91a\x0F\x10V[\x91a\x1F\xF8a\x01RV[\x80a \x02\x81a\x03\xEDV[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 \xD3\\\x9CV\xAD\xF8\x04\0\xE3\xE5\xB5\xB0a\xFF\xEF\xB8\xBF\x82\xEC\x01\xC5s/\xF6\xCA\x06\xD3\xA6\xE0\x80\x96+dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AppchainBlockExplorerUrlUpdated(string)` and selector `0x02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a7`.
```solidity
event AppchainBlockExplorerUrlUpdated(string newUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AppchainBlockExplorerUrlUpdated {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AppchainBlockExplorerUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AppchainBlockExplorerUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AppchainBlockExplorerUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AppchainBlockExplorerUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AppchainBlockExplorerUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ALLOWED_SETTLEMENT_ADDRESSES(uint256)` and selector `0xf881afaf`.
```solidity
function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ALLOWED_SETTLEMENT_ADDRESSES(uint256)`](ALLOWED_SETTLEMENT_ADDRESSESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ALLOWED_SETTLEMENT_ADDRESSESCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ALLOWED_SETTLEMENT_ADDRESSESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ALLOWED_SETTLEMENT_ADDRESSES(uint256)";
            const SELECTOR: [u8; 4] = [248u8, 129u8, 175u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `APPCHAIN_BLOCK_EXPLORER_URL()` and selector `0x0743bf6e`.
```solidity
function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLCall {}
    ///Container type for the return parameters of the [`APPCHAIN_BLOCK_EXPLORER_URL()`](APPCHAIN_BLOCK_EXPLORER_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for APPCHAIN_BLOCK_EXPLORER_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = APPCHAIN_BLOCK_EXPLORER_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "APPCHAIN_BLOCK_EXPLORER_URL()";
            const SELECTOR: [u8; 4] = [7u8, 67u8, 191u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CHAIN_ID()` and selector `0xf8a144be`.
```solidity
function SEQUENCING_CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CHAIN_ID()`](SEQUENCING_CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CHAIN_ID()";
            const SELECTOR: [u8; 4] = [248u8, 161u8, 68u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])` and selector `0x5a2d9c18`.
```solidity
function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub appchainBlockExplorerUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub allowedSettlementAddresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value._owner,
                        value.chainId,
                        value.sequencingChainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                        value.appchainBlockExplorerUrl,
                        value.allowedSettlementAddresses,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        chainId: tuple.1,
                        sequencingChainId: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                        appchainBlockExplorerUrl: tuple.12,
                        allowedSettlementAddresses: tuple.13,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])";
            const SELECTOR: [u8; 4] = [90u8, 45u8, 156u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.appchainBlockExplorerUrl,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.allowedSettlementAddresses,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAppchainBlockExplorerUrl(string)` and selector `0x4b8be3f7`.
```solidity
function updateAppchainBlockExplorerUrl(string memory newUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlCall {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateAppchainBlockExplorerUrl(string)`](updateAppchainBlockExplorerUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlCall) -> Self {
                    (value.newUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAppchainBlockExplorerUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAppchainBlockExplorerUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAppchainBlockExplorerUrl(string)";
            const SELECTOR: [u8; 4] = [75u8, 139u8, 227u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        ALLOWED_SETTLEMENT_ADDRESSES(ALLOWED_SETTLEMENT_ADDRESSESCall),
        #[allow(missing_docs)]
        APPCHAIN_BLOCK_EXPLORER_URL(APPCHAIN_BLOCK_EXPLORER_URLCall),
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CHAIN_ID(SEQUENCING_CHAIN_IDCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAppchainBlockExplorerUrl(updateAppchainBlockExplorerUrlCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 67u8, 191u8, 110u8],
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [75u8, 139u8, 227u8, 247u8],
            [87u8, 209u8, 186u8, 37u8],
            [90u8, 45u8, 156u8, 24u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
            [248u8, 129u8, 175u8, 175u8],
            [248u8, 161u8, 68u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(_) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(_) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CHAIN_ID(_) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAppchainBlockExplorerUrl(_) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn APPCHAIN_BLOCK_EXPLORER_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::APPCHAIN_BLOCK_EXPLORER_URL)
                    }
                    APPCHAIN_BLOCK_EXPLORER_URL
                },
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn updateAppchainBlockExplorerUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateAppchainBlockExplorerUrl)
                    }
                    updateAppchainBlockExplorerUrl
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn ALLOWED_SETTLEMENT_ADDRESSES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ALLOWED_SETTLEMENT_ADDRESSES)
                    }
                    ALLOWED_SETTLEMENT_ADDRESSES
                },
                {
                    fn SEQUENCING_CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CHAIN_ID)
                    }
                    SEQUENCING_CHAIN_ID
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        AppchainBlockExplorerUrlUpdated(AppchainBlockExplorerUrlUpdated),
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AppchainBlockExplorerUrlUpdated)
                }
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ALLOWED_SETTLEMENT_ADDRESSES`] function.
        pub fn ALLOWED_SETTLEMENT_ADDRESSES(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ALLOWED_SETTLEMENT_ADDRESSESCall, N> {
            self.call_builder(
                &ALLOWED_SETTLEMENT_ADDRESSESCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`APPCHAIN_BLOCK_EXPLORER_URL`] function.
        pub fn APPCHAIN_BLOCK_EXPLORER_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, APPCHAIN_BLOCK_EXPLORER_URLCall, N> {
            self.call_builder(&APPCHAIN_BLOCK_EXPLORER_URLCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CHAIN_ID`] function.
        pub fn SEQUENCING_CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CHAIN_IDCall, N> {
            self.call_builder(&SEQUENCING_CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _owner: alloy::sol_types::private::Address,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
            appchainBlockExplorerUrl: alloy::sol_types::private::String,
            allowedSettlementAddresses: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _owner,
                    chainId,
                    sequencingChainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                    appchainBlockExplorerUrl,
                    allowedSettlementAddresses,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAppchainBlockExplorerUrl`] function.
        pub fn updateAppchainBlockExplorerUrl(
            &self,
            newUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateAppchainBlockExplorerUrlCall,
            N,
        > {
            self.call_builder(
                &updateAppchainBlockExplorerUrlCall {
                    newUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AppchainBlockExplorerUrlUpdated`] event.
        pub fn AppchainBlockExplorerUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AppchainBlockExplorerUrlUpdated, N> {
            self.event_filter::<AppchainBlockExplorerUrlUpdated>()
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
