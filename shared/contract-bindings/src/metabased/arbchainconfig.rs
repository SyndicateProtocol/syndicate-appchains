/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function initialize(uint256 chainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b6119c461020e82396119c490f35b610032565b60405190565b5f80fd5b61003f336100a8565b565b90565b60018060a01b031690565b90565b61006661006161006b92610041565b61004f565b610044565b90565b61007790610052565b90565b61008390610044565b90565b61008f9061007a565b9052565b91906100a6905f60208501940190610086565b565b806100c36100bd6100b85f61006e565b61007a565b9161007a565b146100d3576100d1906101ae565b565b6100fd6100df5f61006e565b6100e761002c565b918291631e4fbdf760e01b835260048301610093565b0390fd5b5f1c90565b60018060a01b031690565b61011d61012291610101565b610106565b90565b61012f9054610111565b90565b5f1b90565b9061014860018060a01b0391610132565b9181191691161790565b61016661016161016b92610044565b61004f565b610044565b90565b61017790610152565b90565b6101839061016e565b90565b90565b9061019e6101996101a59261017a565b610186565b8254610137565b9055565b5f0190565b6101b75f610125565b6101c1825f610189565b906101f56101ef7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361017a565b9161017a565b916101fe61002c565b80610208816101a9565b0390a356fe60806040526004361015610013575b610a7e565b61001d5f3561011c565b80632a84b0f01461011757806341fc712d1461011257806357d1ba251461010d57806362c73caa1461010857806366a1d108146101035780636edd6c09146100fe578063715018a6146100f95780638207a819146100f457806385e1f4d0146100ef5780638da5cb5b146100ea578063a3c6e1e7146100e5578063aa6a43d8146100e0578063bf6db6f8146100db578063d1f4737c146100d6578063e79388e6146100d15763f2fde38b0361000e57610a4b565b610a16565b610983565b61093f565b6108fb565b6108b7565b610873565b61083e565b6107ef565b61061b565b6105e6565b6105a2565b610381565b6102cb565b610239565b610191565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61014890610134565b90565b6101548161013f565b0361015b57565b5f80fd5b9050359061016c8261014b565b565b9060208282031261018757610184915f0161015f565b90565b61012c565b5f0190565b346101bf576101a96101a436600461016e565b610c54565b6101b1610122565b806101bb8161018c565b0390f35b610128565b5f9103126101ce57565b61012c565b1c90565b60018060a01b031690565b6101f29060086101f793026101d3565b6101d7565b90565b9061020591546101e2565b90565b61021460085f906101fa565b90565b6102209061013f565b9052565b9190610237905f60208501940190610217565b565b34610269576102493660046101c4565b610265610254610208565b61025c610122565b91829182610224565b0390f35b610128565b90565b61028190600861028693026101d3565b61026e565b90565b906102949154610271565b90565b6102a360045f90610289565b90565b90565b6102b2906102a6565b9052565b91906102c9905f602085019401906102a9565b565b346102fb576102db3660046101c4565b6102f76102e6610297565b6102ee610122565b918291826102b6565b0390f35b610128565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103465781359167ffffffffffffffff831161034157602001926001830284011161033c57565b610308565b610304565b610300565b9060208282031261037c575f82013567ffffffffffffffff811161037757610373920161030c565b9091565b610130565b61012c565b346103b05761039a61039436600461034b565b90610f02565b6103a2610122565b806103ac8161018c565b0390f35b610128565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156103fc575b60208310146103f757565b6103c8565b91607f16916103ec565b60209181520190565b5f5260205f2090565b905f929180549061043261042b836103dc565b8094610406565b916001811690815f14610489575060011461044d575b505050565b61045a919293945061040f565b915f925b81841061047157505001905f8080610448565b6001816020929593955484860152019101929061045e565b92949550505060ff19168252151560200201905f8080610448565b906104ae91610418565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104d9906104b1565b810190811067ffffffffffffffff8211176104f357604052565b6104bb565b9061051861051192610508610122565b938480926104a4565b03836104cf565b565b905f1061052d5761052a906104f8565b90565b6103b5565b61053e60095f9061051a565b90565b5190565b60209181520190565b90825f9392825e0152565b6105786105816020936105869361056f81610541565b93848093610545565b9586910161054e565b6104b1565b0190565b61059f9160208201915f818403910152610559565b90565b346105d2576105b23660046101c4565b6105ce6105bd610532565b6105c5610122565b9182918261058a565b0390f35b610128565b6105e360025f906101fa565b90565b34610616576105f63660046101c4565b6106126106016105d7565b610609610122565b91829182610224565b0390f35b610128565b346106495761062b3660046101c4565b610633610f33565b61063b610122565b806106458161018c565b0390f35b610128565b610657816102a6565b0361065e57565b5f80fd5b9050359061066f8261064e565b565b151590565b61067f81610671565b0361068657565b5f80fd5b9050359061069782610676565b565b5f80fd5b906106b06106a9610122565b92836104cf565b565b67ffffffffffffffff81116106d0576106cc6020916104b1565b0190565b6104bb565b90825f939282370152565b909291926106f56106f0826106b2565b61069d565b938185526020850190828401116107115761070f926106d5565b565b610699565b9080601f8301121561073457816020610731933591016106e0565b90565b610300565b90610140828203126107ea57610751815f8401610662565b9261075f826020850161015f565b9261076d836040830161015f565b9261077b816060840161068a565b926107898260808501610662565b926107978360a08301610662565b926107a58160c0840161015f565b926107b38260e08501610662565b926107c283610100830161015f565b9261012082013567ffffffffffffffff81116107e5576107e29201610716565b90565b610130565b61012c565b3461082a57610814610802366004610739565b989790979691969592959493946117e4565b61081c610122565b806108268161018c565b0390f35b610128565b61083b60015f90610289565b90565b3461086e5761084e3660046101c4565b61086a61085961082f565b610861610122565b918291826102b6565b0390f35b610128565b346108a3576108833660046101c4565b61089f61088e61181d565b610896610122565b91829182610224565b0390f35b610128565b6108b460075f90610289565b90565b346108e7576108c73660046101c4565b6108e36108d26108a8565b6108da610122565b918291826102b6565b0390f35b610128565b6108f860035f906101fa565b90565b3461092b5761090b3660046101c4565b6109276109166108ec565b61091e610122565b91829182610224565b0390f35b610128565b61093c60065f906101fa565b90565b3461096f5761094f3660046101c4565b61096b61095a610930565b610962610122565b91829182610224565b0390f35b610128565b61098060055f90610289565b90565b346109b3576109933660046101c4565b6109af61099e610974565b6109a6610122565b918291826102b6565b0390f35b610128565b60ff1690565b6109ce9060086109d393026101d3565b6109b8565b90565b906109e191546109be565b90565b6109f160036014906109d6565b90565b6109fd90610671565b9052565b9190610a14905f602085019401906109f4565b565b34610a4657610a263660046101c4565b610a42610a316109e4565b610a39610122565b91829182610a01565b0390f35b610128565b34610a7957610a63610a5e36600461016e565b61189e565b610a6b610122565b80610a758161018c565b0390f35b610128565b5f80fd5b610a9390610a8e6118a9565b610be2565b565b90565b90565b610aaf610aaa610ab492610a95565b610a98565b610134565b90565b610ac090610a9b565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610b1d6027604092610545565b610b2681610ac3565b0190565b610b3f9060208101905f818303910152610b10565b90565b15610b4957565b610b51610122565b62461bcd60e51b815280610b6760048201610b2a565b0390fd5b5f1b90565b90610b8160018060a01b0391610b6b565b9181191691161790565b610b9f610b9a610ba492610134565b610a98565b610134565b90565b610bb090610b8b565b90565b610bbc90610ba7565b90565b90565b90610bd7610bd2610bde92610bb3565b610bbf565b8254610b70565b9055565b610c0781610c00610bfa610bf55f610ab7565b61013f565b9161013f565b1415610b42565b610c12816008610bc2565b610c3c7f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610bb3565b90610c45610122565b80610c4f8161018c565b0390a2565b610c5d90610a82565b565b90610c7191610c6c6118a9565b610eb9565b565b5090565b601f602091010490565b1b90565b91906008610ca0910291610c9a5f1984610c81565b92610c81565b9181191691161790565b610cbe610cb9610cc3926102a6565b610a98565b6102a6565b90565b90565b9190610cdf610cda610ce793610caa565b610cc6565b908354610c85565b9055565b5f90565b610d0191610cfb610ceb565b91610cc9565b565b5b818110610d0f575050565b80610d1c5f600193610cef565b01610d04565b9190601f8111610d32575b505050565b610d3e610d639361040f565b906020610d4a84610c77565b83019310610d6b575b610d5c90610c77565b0190610d03565b5f8080610d2d565b9150610d5c81929050610d53565b90610d89905f19906008026101d3565b191690565b81610d9891610d79565b906002021790565b91610dab9082610c73565b9067ffffffffffffffff8211610e6a57610dcf82610dc985546103dc565b85610d22565b5f90601f8311600114610e0257918091610df1935f92610df6575b5050610d8e565b90555b565b90915001355f80610dea565b601f19831691610e118561040f565b925f5b818110610e5257509160029391856001969410610e38575b50505002019055610df4565b610e48910135601f841690610d79565b90555f8080610e2c565b91936020600181928787013581550195019201610e14565b6104bb565b90610e7a9291610da0565b565b9190610e9681610e8f81610e9b95610545565b80956106d5565b6104b1565b0190565b9091610eb69260208301925f818503910152610e7c565b90565b610ec68183906009610e6f565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291610efd610ef4610122565b92839283610e9f565b0390a1565b90610f0c91610c5f565b565b610f166118a9565b610f1e610f20565b565b610f31610f2c5f610ab7565b6118fe565b565b610f3b610f0e565b565b60401c90565b610f4f610f5491610f3d565b6109b8565b90565b610f619054610f43565b90565b5f1c90565b67ffffffffffffffff1690565b610f82610f8791610f64565b610f69565b90565b610f949054610f76565b90565b67ffffffffffffffff1690565b610fb8610fb3610fbd92610a95565b610a98565b610f97565b90565b90565b610fd7610fd2610fdc92610fc0565b610a98565b610f97565b90565b610fe890610ba7565b90565b610fff610ffa61100492610a95565b610a98565b6102a6565b90565b9061101a67ffffffffffffffff91610b6b565b9181191691161790565b61103861103361103d92610f97565b610a98565b610f97565b90565b90565b9061105861105361105f92611024565b611040565b8254611007565b9055565b60401b90565b9061107d68ff000000000000000091611063565b9181191691161790565b61109090610671565b90565b90565b906110ab6110a66110b292611087565b611093565b8254611069565b9055565b6110bf90610fc3565b9052565b91906110d6905f602085019401906110b6565b565b9693909794919895926110e961195d565b996110fe6110f85f8d01610f57565b15610671565b9961110a5f8d01610f8a565b8061111d6111175f610fa4565b91610f97565b1480611240575b906111386111326001610fc3565b91610f97565b1480611218575b61114a909115610671565b9081611207575b506111e45761117b996111708d5f6111696001610fc3565b9101611043565b8b6111d1575b6116b9565b611183575b50565b611190905f809101611096565b60016111c87fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916111bf610122565b918291826110c3565b0390a15f611180565b6111df8d5f60019101611096565b611176565b6111ec610122565b63f92ee8a960e01b8152806112036004820161018c565b0390fd5b611212915015610671565b5f611151565b5061114a61122530610fdf565b3b6112386112325f610feb565b916102a6565b14905061113f565b508b611124565b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61127b6017602092610545565b61128481611247565b0190565b61129d9060208101905f81830391015261126e565b90565b156112a757565b6112af610122565b62461bcd60e51b8152806112c560048201611288565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6113236026604092610545565b61132c816112c9565b0190565b6113459060208101905f818303910152611316565b90565b1561134f57565b611357610122565b62461bcd60e51b81528061136d60048201611330565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6113cb6025604092610545565b6113d481611371565b0190565b6113ed9060208101905f8183039101526113be565b90565b156113f757565b6113ff610122565b62461bcd60e51b815280611415600482016113d8565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b611473602a604092610545565b61147c81611419565b0190565b6114959060208101905f818303910152611466565b90565b1561149f57565b6114a7610122565b62461bcd60e51b8152806114bd60048201611480565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61151b6023604092610545565b611524816114c1565b0190565b61153d9060208101905f81830391015261150e565b90565b1561154757565b61154f610122565b62461bcd60e51b81528061156560048201611528565b0390fd5b906115755f1991610b6b565b9181191691161790565b9061159461158f61159b92610caa565b610cc6565b8254611569565b9055565b60a01b90565b906115b460ff60a01b9161159f565b9181191691161790565b906115d36115ce6115da92611087565b611093565b82546115a5565b9055565b906115e881610541565b9067ffffffffffffffff82116116a85761160c8261160685546103dc565b85610d22565b602090601f83116001146116405791809161162f935f92611634575b5050610d8e565b90555b565b90915001515f80611628565b601f1983169161164f8561040f565b925f5b81811061169057509160029391856001969410611676575b50505002019055611632565b611686910151601f841690610d79565b90555f808061166a565b91936020600181928787015181550195019201611652565b6104bb565b906116b7916115de565b565b946117b66117dd98956117af6117c4966117a88b976117e29f9c8f9861179a6117cb9e6117936117bd9c6117726117a196611707856117006116fa5f610feb565b916102a6565b14156112a0565b61172c8761172561171f61171a5f610ab7565b61013f565b9161013f565b1415611348565b6117518961174a61174461173f5f610ab7565b61013f565b9161013f565b14156113f0565b61176b6117656117605f610ab7565b61013f565b9161013f565b1415611498565b61178c6117866117815f610ab7565b61013f565b9161013f565b1415611540565b600161157f565b6002610bc2565b6003610bc2565b60036115be565b600461157f565b600561157f565b6006610bc2565b600761157f565b6117d6836008610bc2565b60096116ad565b6118fe565b565b906117f69998979695949392916110d8565b565b5f90565b61180861180d91610f64565b6101d7565b90565b61181a90546117fc565b90565b6118256117f8565b5061182f5f611810565b90565b6118439061183e6118a9565b611845565b565b8061186061185a6118555f610ab7565b61013f565b9161013f565b146118705761186e906118fe565b565b61189a61187c5f610ab7565b611884610122565b918291631e4fbdf760e01b835260048301610224565b0390fd5b6118a790611832565b565b6118b161181d565b6118ca6118c46118bf611981565b61013f565b9161013f565b036118d157565b6118fa6118dc611981565b6118e4610122565b91829163118cdaa760e01b835260048301610224565b0390fd5b6119075f611810565b611911825f610bc2565b9061194561193f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610bb3565b91610bb3565b9161194e610122565b806119588161018c565b0390a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6119896117f8565b50339056fea2646970667358221220470511ab71f4bce8bbb66fca6af17054b6b45b00b26fddab3415799c6eac158f64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x19\xC4a\x02\x0E\x829a\x19\xC4\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0?3a\0\xA8V[V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0fa\0aa\0k\x92a\0AV[a\0OV[a\0DV[\x90V[a\0w\x90a\0RV[\x90V[a\0\x83\x90a\0DV[\x90V[a\0\x8F\x90a\0zV[\x90RV[\x91\x90a\0\xA6\x90_` \x85\x01\x94\x01\x90a\0\x86V[V[\x80a\0\xC3a\0\xBDa\0\xB8_a\0nV[a\0zV[\x91a\0zV[\x14a\0\xD3Wa\0\xD1\x90a\x01\xAEV[V[a\0\xFDa\0\xDF_a\0nV[a\0\xE7a\0,V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\0\x93V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x1Da\x01\"\x91a\x01\x01V[a\x01\x06V[\x90V[a\x01/\x90Ta\x01\x11V[\x90V[_\x1B\x90V[\x90a\x01H`\x01\x80`\xA0\x1B\x03\x91a\x012V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01fa\x01aa\x01k\x92a\0DV[a\0OV[a\0DV[\x90V[a\x01w\x90a\x01RV[\x90V[a\x01\x83\x90a\x01nV[\x90V[\x90V[\x90a\x01\x9Ea\x01\x99a\x01\xA5\x92a\x01zV[a\x01\x86V[\x82Ta\x017V[\x90UV[_\x01\x90V[a\x01\xB7_a\x01%V[a\x01\xC1\x82_a\x01\x89V[\x90a\x01\xF5a\x01\xEF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x01zV[\x91a\x01zV[\x91a\x01\xFEa\0,V[\x80a\x02\x08\x81a\x01\xA9V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n~V[a\0\x1D_5a\x01\x1CV[\x80c*\x84\xB0\xF0\x14a\x01\x17W\x80cA\xFCq-\x14a\x01\x12W\x80cW\xD1\xBA%\x14a\x01\rW\x80cb\xC7<\xAA\x14a\x01\x08W\x80cf\xA1\xD1\x08\x14a\x01\x03W\x80cn\xDDl\t\x14a\0\xFEW\x80cqP\x18\xA6\x14a\0\xF9W\x80c\x82\x07\xA8\x19\x14a\0\xF4W\x80c\x85\xE1\xF4\xD0\x14a\0\xEFW\x80c\x8D\xA5\xCB[\x14a\0\xEAW\x80c\xA3\xC6\xE1\xE7\x14a\0\xE5W\x80c\xAAjC\xD8\x14a\0\xE0W\x80c\xBFm\xB6\xF8\x14a\0\xDBW\x80c\xD1\xF4s|\x14a\0\xD6W\x80c\xE7\x93\x88\xE6\x14a\0\xD1Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\nKV[a\n\x16V[a\t\x83V[a\t?V[a\x08\xFBV[a\x08\xB7V[a\x08sV[a\x08>V[a\x07\xEFV[a\x06\x1BV[a\x05\xE6V[a\x05\xA2V[a\x03\x81V[a\x02\xCBV[a\x029V[a\x01\x91V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01H\x90a\x014V[\x90V[a\x01T\x81a\x01?V[\x03a\x01[WV[_\x80\xFD[\x90P5\x90a\x01l\x82a\x01KV[V[\x90` \x82\x82\x03\x12a\x01\x87Wa\x01\x84\x91_\x01a\x01_V[\x90V[a\x01,V[_\x01\x90V[4a\x01\xBFWa\x01\xA9a\x01\xA46`\x04a\x01nV[a\x0CTV[a\x01\xB1a\x01\"V[\x80a\x01\xBB\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[_\x91\x03\x12a\x01\xCEWV[a\x01,V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xF2\x90`\x08a\x01\xF7\x93\x02a\x01\xD3V[a\x01\xD7V[\x90V[\x90a\x02\x05\x91Ta\x01\xE2V[\x90V[a\x02\x14`\x08_\x90a\x01\xFAV[\x90V[a\x02 \x90a\x01?V[\x90RV[\x91\x90a\x027\x90_` \x85\x01\x94\x01\x90a\x02\x17V[V[4a\x02iWa\x02I6`\x04a\x01\xC4V[a\x02ea\x02Ta\x02\x08V[a\x02\\a\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[\x90V[a\x02\x81\x90`\x08a\x02\x86\x93\x02a\x01\xD3V[a\x02nV[\x90V[\x90a\x02\x94\x91Ta\x02qV[\x90V[a\x02\xA3`\x04_\x90a\x02\x89V[\x90V[\x90V[a\x02\xB2\x90a\x02\xA6V[\x90RV[\x91\x90a\x02\xC9\x90_` \x85\x01\x94\x01\x90a\x02\xA9V[V[4a\x02\xFBWa\x02\xDB6`\x04a\x01\xC4V[a\x02\xF7a\x02\xE6a\x02\x97V[a\x02\xEEa\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03AW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03<WV[a\x03\x08V[a\x03\x04V[a\x03\0V[\x90` \x82\x82\x03\x12a\x03|W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03wWa\x03s\x92\x01a\x03\x0CV[\x90\x91V[a\x010V[a\x01,V[4a\x03\xB0Wa\x03\x9Aa\x03\x946`\x04a\x03KV[\x90a\x0F\x02V[a\x03\xA2a\x01\"V[\x80a\x03\xAC\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x03\xFCW[` \x83\x10\x14a\x03\xF7WV[a\x03\xC8V[\x91`\x7F\x16\x91a\x03\xECV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x042a\x04+\x83a\x03\xDCV[\x80\x94a\x04\x06V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\x89WP`\x01\x14a\x04MW[PPPV[a\x04Z\x91\x92\x93\x94Pa\x04\x0FV[\x91_\x92[\x81\x84\x10a\x04qWPP\x01\x90_\x80\x80a\x04HV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04^V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04HV[\x90a\x04\xAE\x91a\x04\x18V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xD9\x90a\x04\xB1V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xF3W`@RV[a\x04\xBBV[\x90a\x05\x18a\x05\x11\x92a\x05\x08a\x01\"V[\x93\x84\x80\x92a\x04\xA4V[\x03\x83a\x04\xCFV[V[\x90_\x10a\x05-Wa\x05*\x90a\x04\xF8V[\x90V[a\x03\xB5V[a\x05>`\t_\x90a\x05\x1AV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05xa\x05\x81` \x93a\x05\x86\x93a\x05o\x81a\x05AV[\x93\x84\x80\x93a\x05EV[\x95\x86\x91\x01a\x05NV[a\x04\xB1V[\x01\x90V[a\x05\x9F\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05YV[\x90V[4a\x05\xD2Wa\x05\xB26`\x04a\x01\xC4V[a\x05\xCEa\x05\xBDa\x052V[a\x05\xC5a\x01\"V[\x91\x82\x91\x82a\x05\x8AV[\x03\x90\xF3[a\x01(V[a\x05\xE3`\x02_\x90a\x01\xFAV[\x90V[4a\x06\x16Wa\x05\xF66`\x04a\x01\xC4V[a\x06\x12a\x06\x01a\x05\xD7V[a\x06\ta\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[4a\x06IWa\x06+6`\x04a\x01\xC4V[a\x063a\x0F3V[a\x06;a\x01\"V[\x80a\x06E\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[a\x06W\x81a\x02\xA6V[\x03a\x06^WV[_\x80\xFD[\x90P5\x90a\x06o\x82a\x06NV[V[\x15\x15\x90V[a\x06\x7F\x81a\x06qV[\x03a\x06\x86WV[_\x80\xFD[\x90P5\x90a\x06\x97\x82a\x06vV[V[_\x80\xFD[\x90a\x06\xB0a\x06\xA9a\x01\"V[\x92\x83a\x04\xCFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xD0Wa\x06\xCC` \x91a\x04\xB1V[\x01\x90V[a\x04\xBBV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x06\xF5a\x06\xF0\x82a\x06\xB2V[a\x06\x9DV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07\x11Wa\x07\x0F\x92a\x06\xD5V[V[a\x06\x99V[\x90\x80`\x1F\x83\x01\x12\x15a\x074W\x81` a\x071\x935\x91\x01a\x06\xE0V[\x90V[a\x03\0V[\x90a\x01@\x82\x82\x03\x12a\x07\xEAWa\x07Q\x81_\x84\x01a\x06bV[\x92a\x07_\x82` \x85\x01a\x01_V[\x92a\x07m\x83`@\x83\x01a\x01_V[\x92a\x07{\x81``\x84\x01a\x06\x8AV[\x92a\x07\x89\x82`\x80\x85\x01a\x06bV[\x92a\x07\x97\x83`\xA0\x83\x01a\x06bV[\x92a\x07\xA5\x81`\xC0\x84\x01a\x01_V[\x92a\x07\xB3\x82`\xE0\x85\x01a\x06bV[\x92a\x07\xC2\x83a\x01\0\x83\x01a\x01_V[\x92a\x01 \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xE5Wa\x07\xE2\x92\x01a\x07\x16V[\x90V[a\x010V[a\x01,V[4a\x08*Wa\x08\x14a\x08\x026`\x04a\x079V[\x98\x97\x90\x97\x96\x91\x96\x95\x92\x95\x94\x93\x94a\x17\xE4V[a\x08\x1Ca\x01\"V[\x80a\x08&\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[a\x08;`\x01_\x90a\x02\x89V[\x90V[4a\x08nWa\x08N6`\x04a\x01\xC4V[a\x08ja\x08Ya\x08/V[a\x08aa\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[4a\x08\xA3Wa\x08\x836`\x04a\x01\xC4V[a\x08\x9Fa\x08\x8Ea\x18\x1DV[a\x08\x96a\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[a\x08\xB4`\x07_\x90a\x02\x89V[\x90V[4a\x08\xE7Wa\x08\xC76`\x04a\x01\xC4V[a\x08\xE3a\x08\xD2a\x08\xA8V[a\x08\xDAa\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[a\x08\xF8`\x03_\x90a\x01\xFAV[\x90V[4a\t+Wa\t\x0B6`\x04a\x01\xC4V[a\t'a\t\x16a\x08\xECV[a\t\x1Ea\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[a\t<`\x06_\x90a\x01\xFAV[\x90V[4a\toWa\tO6`\x04a\x01\xC4V[a\tka\tZa\t0V[a\tba\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[a\t\x80`\x05_\x90a\x02\x89V[\x90V[4a\t\xB3Wa\t\x936`\x04a\x01\xC4V[a\t\xAFa\t\x9Ea\ttV[a\t\xA6a\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[`\xFF\x16\x90V[a\t\xCE\x90`\x08a\t\xD3\x93\x02a\x01\xD3V[a\t\xB8V[\x90V[\x90a\t\xE1\x91Ta\t\xBEV[\x90V[a\t\xF1`\x03`\x14\x90a\t\xD6V[\x90V[a\t\xFD\x90a\x06qV[\x90RV[\x91\x90a\n\x14\x90_` \x85\x01\x94\x01\x90a\t\xF4V[V[4a\nFWa\n&6`\x04a\x01\xC4V[a\nBa\n1a\t\xE4V[a\n9a\x01\"V[\x91\x82\x91\x82a\n\x01V[\x03\x90\xF3[a\x01(V[4a\nyWa\nca\n^6`\x04a\x01nV[a\x18\x9EV[a\nka\x01\"V[\x80a\nu\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[_\x80\xFD[a\n\x93\x90a\n\x8Ea\x18\xA9V[a\x0B\xE2V[V[\x90V[\x90V[a\n\xAFa\n\xAAa\n\xB4\x92a\n\x95V[a\n\x98V[a\x014V[\x90V[a\n\xC0\x90a\n\x9BV[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0B\x1D`'`@\x92a\x05EV[a\x0B&\x81a\n\xC3V[\x01\x90V[a\x0B?\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\x10V[\x90V[\x15a\x0BIWV[a\x0BQa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Bg`\x04\x82\x01a\x0B*V[\x03\x90\xFD[_\x1B\x90V[\x90a\x0B\x81`\x01\x80`\xA0\x1B\x03\x91a\x0BkV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x9Fa\x0B\x9Aa\x0B\xA4\x92a\x014V[a\n\x98V[a\x014V[\x90V[a\x0B\xB0\x90a\x0B\x8BV[\x90V[a\x0B\xBC\x90a\x0B\xA7V[\x90V[\x90V[\x90a\x0B\xD7a\x0B\xD2a\x0B\xDE\x92a\x0B\xB3V[a\x0B\xBFV[\x82Ta\x0BpV[\x90UV[a\x0C\x07\x81a\x0C\0a\x0B\xFAa\x0B\xF5_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x0BBV[a\x0C\x12\x81`\x08a\x0B\xC2V[a\x0C<\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0B\xB3V[\x90a\x0CEa\x01\"V[\x80a\x0CO\x81a\x01\x8CV[\x03\x90\xA2V[a\x0C]\x90a\n\x82V[V[\x90a\x0Cq\x91a\x0Cla\x18\xA9V[a\x0E\xB9V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0C\xA0\x91\x02\x91a\x0C\x9A_\x19\x84a\x0C\x81V[\x92a\x0C\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xBEa\x0C\xB9a\x0C\xC3\x92a\x02\xA6V[a\n\x98V[a\x02\xA6V[\x90V[\x90V[\x91\x90a\x0C\xDFa\x0C\xDAa\x0C\xE7\x93a\x0C\xAAV[a\x0C\xC6V[\x90\x83Ta\x0C\x85V[\x90UV[_\x90V[a\r\x01\x91a\x0C\xFBa\x0C\xEBV[\x91a\x0C\xC9V[V[[\x81\x81\x10a\r\x0FWPPV[\x80a\r\x1C_`\x01\x93a\x0C\xEFV[\x01a\r\x04V[\x91\x90`\x1F\x81\x11a\r2W[PPPV[a\r>a\rc\x93a\x04\x0FV[\x90` a\rJ\x84a\x0CwV[\x83\x01\x93\x10a\rkW[a\r\\\x90a\x0CwV[\x01\x90a\r\x03V[_\x80\x80a\r-V[\x91Pa\r\\\x81\x92\x90Pa\rSV[\x90a\r\x89\x90_\x19\x90`\x08\x02a\x01\xD3V[\x19\x16\x90V[\x81a\r\x98\x91a\ryV[\x90`\x02\x02\x17\x90V[\x91a\r\xAB\x90\x82a\x0CsV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0EjWa\r\xCF\x82a\r\xC9\x85Ta\x03\xDCV[\x85a\r\"V[_\x90`\x1F\x83\x11`\x01\x14a\x0E\x02W\x91\x80\x91a\r\xF1\x93_\x92a\r\xF6W[PPa\r\x8EV[\x90U[V[\x90\x91P\x015_\x80a\r\xEAV[`\x1F\x19\x83\x16\x91a\x0E\x11\x85a\x04\x0FV[\x92_[\x81\x81\x10a\x0ERWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0E8W[PPP\x02\x01\x90Ua\r\xF4V[a\x0EH\x91\x015`\x1F\x84\x16\x90a\ryV[\x90U_\x80\x80a\x0E,V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0E\x14V[a\x04\xBBV[\x90a\x0Ez\x92\x91a\r\xA0V[V[\x91\x90a\x0E\x96\x81a\x0E\x8F\x81a\x0E\x9B\x95a\x05EV[\x80\x95a\x06\xD5V[a\x04\xB1V[\x01\x90V[\x90\x91a\x0E\xB6\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0E|V[\x90V[a\x0E\xC6\x81\x83\x90`\ta\x0EoV[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x0E\xFDa\x0E\xF4a\x01\"V[\x92\x83\x92\x83a\x0E\x9FV[\x03\x90\xA1V[\x90a\x0F\x0C\x91a\x0C_V[V[a\x0F\x16a\x18\xA9V[a\x0F\x1Ea\x0F V[V[a\x0F1a\x0F,_a\n\xB7V[a\x18\xFEV[V[a\x0F;a\x0F\x0EV[V[`@\x1C\x90V[a\x0FOa\x0FT\x91a\x0F=V[a\t\xB8V[\x90V[a\x0Fa\x90Ta\x0FCV[\x90V[_\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\x82a\x0F\x87\x91a\x0FdV[a\x0FiV[\x90V[a\x0F\x94\x90Ta\x0FvV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\xB8a\x0F\xB3a\x0F\xBD\x92a\n\x95V[a\n\x98V[a\x0F\x97V[\x90V[\x90V[a\x0F\xD7a\x0F\xD2a\x0F\xDC\x92a\x0F\xC0V[a\n\x98V[a\x0F\x97V[\x90V[a\x0F\xE8\x90a\x0B\xA7V[\x90V[a\x0F\xFFa\x0F\xFAa\x10\x04\x92a\n\x95V[a\n\x98V[a\x02\xA6V[\x90V[\x90a\x10\x1Ag\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0BkV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x108a\x103a\x10=\x92a\x0F\x97V[a\n\x98V[a\x0F\x97V[\x90V[\x90V[\x90a\x10Xa\x10Sa\x10_\x92a\x10$V[a\x10@V[\x82Ta\x10\x07V[\x90UV[`@\x1B\x90V[\x90a\x10}h\xFF\0\0\0\0\0\0\0\0\x91a\x10cV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\x90\x90a\x06qV[\x90V[\x90V[\x90a\x10\xABa\x10\xA6a\x10\xB2\x92a\x10\x87V[a\x10\x93V[\x82Ta\x10iV[\x90UV[a\x10\xBF\x90a\x0F\xC3V[\x90RV[\x91\x90a\x10\xD6\x90_` \x85\x01\x94\x01\x90a\x10\xB6V[V[\x96\x93\x90\x97\x94\x91\x98\x95\x92a\x10\xE9a\x19]V[\x99a\x10\xFEa\x10\xF8_\x8D\x01a\x0FWV[\x15a\x06qV[\x99a\x11\n_\x8D\x01a\x0F\x8AV[\x80a\x11\x1Da\x11\x17_a\x0F\xA4V[\x91a\x0F\x97V[\x14\x80a\x12@W[\x90a\x118a\x112`\x01a\x0F\xC3V[\x91a\x0F\x97V[\x14\x80a\x12\x18W[a\x11J\x90\x91\x15a\x06qV[\x90\x81a\x12\x07W[Pa\x11\xE4Wa\x11{\x99a\x11p\x8D_a\x11i`\x01a\x0F\xC3V[\x91\x01a\x10CV[\x8Ba\x11\xD1W[a\x16\xB9V[a\x11\x83W[PV[a\x11\x90\x90_\x80\x91\x01a\x10\x96V[`\x01a\x11\xC8\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x11\xBFa\x01\"V[\x91\x82\x91\x82a\x10\xC3V[\x03\x90\xA1_a\x11\x80V[a\x11\xDF\x8D_`\x01\x91\x01a\x10\x96V[a\x11vV[a\x11\xECa\x01\"V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x12\x03`\x04\x82\x01a\x01\x8CV[\x03\x90\xFD[a\x12\x12\x91P\x15a\x06qV[_a\x11QV[Pa\x11Ja\x12%0a\x0F\xDFV[;a\x128a\x122_a\x0F\xEBV[\x91a\x02\xA6V[\x14\x90Pa\x11?V[P\x8Ba\x11$V[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12{`\x17` \x92a\x05EV[a\x12\x84\x81a\x12GV[\x01\x90V[a\x12\x9D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12nV[\x90V[\x15a\x12\xA7WV[a\x12\xAFa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xC5`\x04\x82\x01a\x12\x88V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x13#`&`@\x92a\x05EV[a\x13,\x81a\x12\xC9V[\x01\x90V[a\x13E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x16V[\x90V[\x15a\x13OWV[a\x13Wa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13m`\x04\x82\x01a\x130V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x13\xCB`%`@\x92a\x05EV[a\x13\xD4\x81a\x13qV[\x01\x90V[a\x13\xED\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xBEV[\x90V[\x15a\x13\xF7WV[a\x13\xFFa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x15`\x04\x82\x01a\x13\xD8V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x14s`*`@\x92a\x05EV[a\x14|\x81a\x14\x19V[\x01\x90V[a\x14\x95\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14fV[\x90V[\x15a\x14\x9FWV[a\x14\xA7a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xBD`\x04\x82\x01a\x14\x80V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x15\x1B`#`@\x92a\x05EV[a\x15$\x81a\x14\xC1V[\x01\x90V[a\x15=\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x0EV[\x90V[\x15a\x15GWV[a\x15Oa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15e`\x04\x82\x01a\x15(V[\x03\x90\xFD[\x90a\x15u_\x19\x91a\x0BkV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x15\x94a\x15\x8Fa\x15\x9B\x92a\x0C\xAAV[a\x0C\xC6V[\x82Ta\x15iV[\x90UV[`\xA0\x1B\x90V[\x90a\x15\xB4`\xFF`\xA0\x1B\x91a\x15\x9FV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x15\xD3a\x15\xCEa\x15\xDA\x92a\x10\x87V[a\x10\x93V[\x82Ta\x15\xA5V[\x90UV[\x90a\x15\xE8\x81a\x05AV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x16\xA8Wa\x16\x0C\x82a\x16\x06\x85Ta\x03\xDCV[\x85a\r\"V[` \x90`\x1F\x83\x11`\x01\x14a\x16@W\x91\x80\x91a\x16/\x93_\x92a\x164W[PPa\r\x8EV[\x90U[V[\x90\x91P\x01Q_\x80a\x16(V[`\x1F\x19\x83\x16\x91a\x16O\x85a\x04\x0FV[\x92_[\x81\x81\x10a\x16\x90WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x16vW[PPP\x02\x01\x90Ua\x162V[a\x16\x86\x91\x01Q`\x1F\x84\x16\x90a\ryV[\x90U_\x80\x80a\x16jV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x16RV[a\x04\xBBV[\x90a\x16\xB7\x91a\x15\xDEV[V[\x94a\x17\xB6a\x17\xDD\x98\x95a\x17\xAFa\x17\xC4\x96a\x17\xA8\x8B\x97a\x17\xE2\x9F\x9C\x8F\x98a\x17\x9Aa\x17\xCB\x9Ea\x17\x93a\x17\xBD\x9Ca\x17ra\x17\xA1\x96a\x17\x07\x85a\x17\0a\x16\xFA_a\x0F\xEBV[\x91a\x02\xA6V[\x14\x15a\x12\xA0V[a\x17,\x87a\x17%a\x17\x1Fa\x17\x1A_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x13HV[a\x17Q\x89a\x17Ja\x17Da\x17?_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x13\xF0V[a\x17ka\x17ea\x17`_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x14\x98V[a\x17\x8Ca\x17\x86a\x17\x81_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x15@V[`\x01a\x15\x7FV[`\x02a\x0B\xC2V[`\x03a\x0B\xC2V[`\x03a\x15\xBEV[`\x04a\x15\x7FV[`\x05a\x15\x7FV[`\x06a\x0B\xC2V[`\x07a\x15\x7FV[a\x17\xD6\x83`\x08a\x0B\xC2V[`\ta\x16\xADV[a\x18\xFEV[V[\x90a\x17\xF6\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x10\xD8V[V[_\x90V[a\x18\x08a\x18\r\x91a\x0FdV[a\x01\xD7V[\x90V[a\x18\x1A\x90Ta\x17\xFCV[\x90V[a\x18%a\x17\xF8V[Pa\x18/_a\x18\x10V[\x90V[a\x18C\x90a\x18>a\x18\xA9V[a\x18EV[V[\x80a\x18`a\x18Za\x18U_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14a\x18pWa\x18n\x90a\x18\xFEV[V[a\x18\x9Aa\x18|_a\n\xB7V[a\x18\x84a\x01\"V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02$V[\x03\x90\xFD[a\x18\xA7\x90a\x182V[V[a\x18\xB1a\x18\x1DV[a\x18\xCAa\x18\xC4a\x18\xBFa\x19\x81V[a\x01?V[\x91a\x01?V[\x03a\x18\xD1WV[a\x18\xFAa\x18\xDCa\x19\x81V[a\x18\xE4a\x01\"V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02$V[\x03\x90\xFD[a\x19\x07_a\x18\x10V[a\x19\x11\x82_a\x0B\xC2V[\x90a\x19Ea\x19?\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\xB3V[\x91a\x0B\xB3V[\x91a\x19Na\x01\"V[\x80a\x19X\x81a\x01\x8CV[\x03\x90\xA3V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x19\x89a\x17\xF8V[P3\x90V\xFE\xA2dipfsX\"\x12 G\x05\x11\xABq\xF4\xBC\xE8\xBB\xB6o\xCAj\xF1pT\xB6\xB4[\0\xB2o\xDD\xAB4\x15y\x9Cn\xAC\x15\x8FdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610a7e565b61001d5f3561011c565b80632a84b0f01461011757806341fc712d1461011257806357d1ba251461010d57806362c73caa1461010857806366a1d108146101035780636edd6c09146100fe578063715018a6146100f95780638207a819146100f457806385e1f4d0146100ef5780638da5cb5b146100ea578063a3c6e1e7146100e5578063aa6a43d8146100e0578063bf6db6f8146100db578063d1f4737c146100d6578063e79388e6146100d15763f2fde38b0361000e57610a4b565b610a16565b610983565b61093f565b6108fb565b6108b7565b610873565b61083e565b6107ef565b61061b565b6105e6565b6105a2565b610381565b6102cb565b610239565b610191565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61014890610134565b90565b6101548161013f565b0361015b57565b5f80fd5b9050359061016c8261014b565b565b9060208282031261018757610184915f0161015f565b90565b61012c565b5f0190565b346101bf576101a96101a436600461016e565b610c54565b6101b1610122565b806101bb8161018c565b0390f35b610128565b5f9103126101ce57565b61012c565b1c90565b60018060a01b031690565b6101f29060086101f793026101d3565b6101d7565b90565b9061020591546101e2565b90565b61021460085f906101fa565b90565b6102209061013f565b9052565b9190610237905f60208501940190610217565b565b34610269576102493660046101c4565b610265610254610208565b61025c610122565b91829182610224565b0390f35b610128565b90565b61028190600861028693026101d3565b61026e565b90565b906102949154610271565b90565b6102a360045f90610289565b90565b90565b6102b2906102a6565b9052565b91906102c9905f602085019401906102a9565b565b346102fb576102db3660046101c4565b6102f76102e6610297565b6102ee610122565b918291826102b6565b0390f35b610128565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103465781359167ffffffffffffffff831161034157602001926001830284011161033c57565b610308565b610304565b610300565b9060208282031261037c575f82013567ffffffffffffffff811161037757610373920161030c565b9091565b610130565b61012c565b346103b05761039a61039436600461034b565b90610f02565b6103a2610122565b806103ac8161018c565b0390f35b610128565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156103fc575b60208310146103f757565b6103c8565b91607f16916103ec565b60209181520190565b5f5260205f2090565b905f929180549061043261042b836103dc565b8094610406565b916001811690815f14610489575060011461044d575b505050565b61045a919293945061040f565b915f925b81841061047157505001905f8080610448565b6001816020929593955484860152019101929061045e565b92949550505060ff19168252151560200201905f8080610448565b906104ae91610418565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104d9906104b1565b810190811067ffffffffffffffff8211176104f357604052565b6104bb565b9061051861051192610508610122565b938480926104a4565b03836104cf565b565b905f1061052d5761052a906104f8565b90565b6103b5565b61053e60095f9061051a565b90565b5190565b60209181520190565b90825f9392825e0152565b6105786105816020936105869361056f81610541565b93848093610545565b9586910161054e565b6104b1565b0190565b61059f9160208201915f818403910152610559565b90565b346105d2576105b23660046101c4565b6105ce6105bd610532565b6105c5610122565b9182918261058a565b0390f35b610128565b6105e360025f906101fa565b90565b34610616576105f63660046101c4565b6106126106016105d7565b610609610122565b91829182610224565b0390f35b610128565b346106495761062b3660046101c4565b610633610f33565b61063b610122565b806106458161018c565b0390f35b610128565b610657816102a6565b0361065e57565b5f80fd5b9050359061066f8261064e565b565b151590565b61067f81610671565b0361068657565b5f80fd5b9050359061069782610676565b565b5f80fd5b906106b06106a9610122565b92836104cf565b565b67ffffffffffffffff81116106d0576106cc6020916104b1565b0190565b6104bb565b90825f939282370152565b909291926106f56106f0826106b2565b61069d565b938185526020850190828401116107115761070f926106d5565b565b610699565b9080601f8301121561073457816020610731933591016106e0565b90565b610300565b90610140828203126107ea57610751815f8401610662565b9261075f826020850161015f565b9261076d836040830161015f565b9261077b816060840161068a565b926107898260808501610662565b926107978360a08301610662565b926107a58160c0840161015f565b926107b38260e08501610662565b926107c283610100830161015f565b9261012082013567ffffffffffffffff81116107e5576107e29201610716565b90565b610130565b61012c565b3461082a57610814610802366004610739565b989790979691969592959493946117e4565b61081c610122565b806108268161018c565b0390f35b610128565b61083b60015f90610289565b90565b3461086e5761084e3660046101c4565b61086a61085961082f565b610861610122565b918291826102b6565b0390f35b610128565b346108a3576108833660046101c4565b61089f61088e61181d565b610896610122565b91829182610224565b0390f35b610128565b6108b460075f90610289565b90565b346108e7576108c73660046101c4565b6108e36108d26108a8565b6108da610122565b918291826102b6565b0390f35b610128565b6108f860035f906101fa565b90565b3461092b5761090b3660046101c4565b6109276109166108ec565b61091e610122565b91829182610224565b0390f35b610128565b61093c60065f906101fa565b90565b3461096f5761094f3660046101c4565b61096b61095a610930565b610962610122565b91829182610224565b0390f35b610128565b61098060055f90610289565b90565b346109b3576109933660046101c4565b6109af61099e610974565b6109a6610122565b918291826102b6565b0390f35b610128565b60ff1690565b6109ce9060086109d393026101d3565b6109b8565b90565b906109e191546109be565b90565b6109f160036014906109d6565b90565b6109fd90610671565b9052565b9190610a14905f602085019401906109f4565b565b34610a4657610a263660046101c4565b610a42610a316109e4565b610a39610122565b91829182610a01565b0390f35b610128565b34610a7957610a63610a5e36600461016e565b61189e565b610a6b610122565b80610a758161018c565b0390f35b610128565b5f80fd5b610a9390610a8e6118a9565b610be2565b565b90565b90565b610aaf610aaa610ab492610a95565b610a98565b610134565b90565b610ac090610a9b565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610b1d6027604092610545565b610b2681610ac3565b0190565b610b3f9060208101905f818303910152610b10565b90565b15610b4957565b610b51610122565b62461bcd60e51b815280610b6760048201610b2a565b0390fd5b5f1b90565b90610b8160018060a01b0391610b6b565b9181191691161790565b610b9f610b9a610ba492610134565b610a98565b610134565b90565b610bb090610b8b565b90565b610bbc90610ba7565b90565b90565b90610bd7610bd2610bde92610bb3565b610bbf565b8254610b70565b9055565b610c0781610c00610bfa610bf55f610ab7565b61013f565b9161013f565b1415610b42565b610c12816008610bc2565b610c3c7f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610bb3565b90610c45610122565b80610c4f8161018c565b0390a2565b610c5d90610a82565b565b90610c7191610c6c6118a9565b610eb9565b565b5090565b601f602091010490565b1b90565b91906008610ca0910291610c9a5f1984610c81565b92610c81565b9181191691161790565b610cbe610cb9610cc3926102a6565b610a98565b6102a6565b90565b90565b9190610cdf610cda610ce793610caa565b610cc6565b908354610c85565b9055565b5f90565b610d0191610cfb610ceb565b91610cc9565b565b5b818110610d0f575050565b80610d1c5f600193610cef565b01610d04565b9190601f8111610d32575b505050565b610d3e610d639361040f565b906020610d4a84610c77565b83019310610d6b575b610d5c90610c77565b0190610d03565b5f8080610d2d565b9150610d5c81929050610d53565b90610d89905f19906008026101d3565b191690565b81610d9891610d79565b906002021790565b91610dab9082610c73565b9067ffffffffffffffff8211610e6a57610dcf82610dc985546103dc565b85610d22565b5f90601f8311600114610e0257918091610df1935f92610df6575b5050610d8e565b90555b565b90915001355f80610dea565b601f19831691610e118561040f565b925f5b818110610e5257509160029391856001969410610e38575b50505002019055610df4565b610e48910135601f841690610d79565b90555f8080610e2c565b91936020600181928787013581550195019201610e14565b6104bb565b90610e7a9291610da0565b565b9190610e9681610e8f81610e9b95610545565b80956106d5565b6104b1565b0190565b9091610eb69260208301925f818503910152610e7c565b90565b610ec68183906009610e6f565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291610efd610ef4610122565b92839283610e9f565b0390a1565b90610f0c91610c5f565b565b610f166118a9565b610f1e610f20565b565b610f31610f2c5f610ab7565b6118fe565b565b610f3b610f0e565b565b60401c90565b610f4f610f5491610f3d565b6109b8565b90565b610f619054610f43565b90565b5f1c90565b67ffffffffffffffff1690565b610f82610f8791610f64565b610f69565b90565b610f949054610f76565b90565b67ffffffffffffffff1690565b610fb8610fb3610fbd92610a95565b610a98565b610f97565b90565b90565b610fd7610fd2610fdc92610fc0565b610a98565b610f97565b90565b610fe890610ba7565b90565b610fff610ffa61100492610a95565b610a98565b6102a6565b90565b9061101a67ffffffffffffffff91610b6b565b9181191691161790565b61103861103361103d92610f97565b610a98565b610f97565b90565b90565b9061105861105361105f92611024565b611040565b8254611007565b9055565b60401b90565b9061107d68ff000000000000000091611063565b9181191691161790565b61109090610671565b90565b90565b906110ab6110a66110b292611087565b611093565b8254611069565b9055565b6110bf90610fc3565b9052565b91906110d6905f602085019401906110b6565b565b9693909794919895926110e961195d565b996110fe6110f85f8d01610f57565b15610671565b9961110a5f8d01610f8a565b8061111d6111175f610fa4565b91610f97565b1480611240575b906111386111326001610fc3565b91610f97565b1480611218575b61114a909115610671565b9081611207575b506111e45761117b996111708d5f6111696001610fc3565b9101611043565b8b6111d1575b6116b9565b611183575b50565b611190905f809101611096565b60016111c87fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916111bf610122565b918291826110c3565b0390a15f611180565b6111df8d5f60019101611096565b611176565b6111ec610122565b63f92ee8a960e01b8152806112036004820161018c565b0390fd5b611212915015610671565b5f611151565b5061114a61122530610fdf565b3b6112386112325f610feb565b916102a6565b14905061113f565b508b611124565b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61127b6017602092610545565b61128481611247565b0190565b61129d9060208101905f81830391015261126e565b90565b156112a757565b6112af610122565b62461bcd60e51b8152806112c560048201611288565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6113236026604092610545565b61132c816112c9565b0190565b6113459060208101905f818303910152611316565b90565b1561134f57565b611357610122565b62461bcd60e51b81528061136d60048201611330565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6113cb6025604092610545565b6113d481611371565b0190565b6113ed9060208101905f8183039101526113be565b90565b156113f757565b6113ff610122565b62461bcd60e51b815280611415600482016113d8565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b611473602a604092610545565b61147c81611419565b0190565b6114959060208101905f818303910152611466565b90565b1561149f57565b6114a7610122565b62461bcd60e51b8152806114bd60048201611480565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61151b6023604092610545565b611524816114c1565b0190565b61153d9060208101905f81830391015261150e565b90565b1561154757565b61154f610122565b62461bcd60e51b81528061156560048201611528565b0390fd5b906115755f1991610b6b565b9181191691161790565b9061159461158f61159b92610caa565b610cc6565b8254611569565b9055565b60a01b90565b906115b460ff60a01b9161159f565b9181191691161790565b906115d36115ce6115da92611087565b611093565b82546115a5565b9055565b906115e881610541565b9067ffffffffffffffff82116116a85761160c8261160685546103dc565b85610d22565b602090601f83116001146116405791809161162f935f92611634575b5050610d8e565b90555b565b90915001515f80611628565b601f1983169161164f8561040f565b925f5b81811061169057509160029391856001969410611676575b50505002019055611632565b611686910151601f841690610d79565b90555f808061166a565b91936020600181928787015181550195019201611652565b6104bb565b906116b7916115de565b565b946117b66117dd98956117af6117c4966117a88b976117e29f9c8f9861179a6117cb9e6117936117bd9c6117726117a196611707856117006116fa5f610feb565b916102a6565b14156112a0565b61172c8761172561171f61171a5f610ab7565b61013f565b9161013f565b1415611348565b6117518961174a61174461173f5f610ab7565b61013f565b9161013f565b14156113f0565b61176b6117656117605f610ab7565b61013f565b9161013f565b1415611498565b61178c6117866117815f610ab7565b61013f565b9161013f565b1415611540565b600161157f565b6002610bc2565b6003610bc2565b60036115be565b600461157f565b600561157f565b6006610bc2565b600761157f565b6117d6836008610bc2565b60096116ad565b6118fe565b565b906117f69998979695949392916110d8565b565b5f90565b61180861180d91610f64565b6101d7565b90565b61181a90546117fc565b90565b6118256117f8565b5061182f5f611810565b90565b6118439061183e6118a9565b611845565b565b8061186061185a6118555f610ab7565b61013f565b9161013f565b146118705761186e906118fe565b565b61189a61187c5f610ab7565b611884610122565b918291631e4fbdf760e01b835260048301610224565b0390fd5b6118a790611832565b565b6118b161181d565b6118ca6118c46118bf611981565b61013f565b9161013f565b036118d157565b6118fa6118dc611981565b6118e4610122565b91829163118cdaa760e01b835260048301610224565b0390fd5b6119075f611810565b611911825f610bc2565b9061194561193f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610bb3565b91610bb3565b9161194e610122565b806119588161018c565b0390a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6119896117f8565b50339056fea2646970667358221220470511ab71f4bce8bbb66fca6af17054b6b45b00b26fddab3415799c6eac158f64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n~V[a\0\x1D_5a\x01\x1CV[\x80c*\x84\xB0\xF0\x14a\x01\x17W\x80cA\xFCq-\x14a\x01\x12W\x80cW\xD1\xBA%\x14a\x01\rW\x80cb\xC7<\xAA\x14a\x01\x08W\x80cf\xA1\xD1\x08\x14a\x01\x03W\x80cn\xDDl\t\x14a\0\xFEW\x80cqP\x18\xA6\x14a\0\xF9W\x80c\x82\x07\xA8\x19\x14a\0\xF4W\x80c\x85\xE1\xF4\xD0\x14a\0\xEFW\x80c\x8D\xA5\xCB[\x14a\0\xEAW\x80c\xA3\xC6\xE1\xE7\x14a\0\xE5W\x80c\xAAjC\xD8\x14a\0\xE0W\x80c\xBFm\xB6\xF8\x14a\0\xDBW\x80c\xD1\xF4s|\x14a\0\xD6W\x80c\xE7\x93\x88\xE6\x14a\0\xD1Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\nKV[a\n\x16V[a\t\x83V[a\t?V[a\x08\xFBV[a\x08\xB7V[a\x08sV[a\x08>V[a\x07\xEFV[a\x06\x1BV[a\x05\xE6V[a\x05\xA2V[a\x03\x81V[a\x02\xCBV[a\x029V[a\x01\x91V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01H\x90a\x014V[\x90V[a\x01T\x81a\x01?V[\x03a\x01[WV[_\x80\xFD[\x90P5\x90a\x01l\x82a\x01KV[V[\x90` \x82\x82\x03\x12a\x01\x87Wa\x01\x84\x91_\x01a\x01_V[\x90V[a\x01,V[_\x01\x90V[4a\x01\xBFWa\x01\xA9a\x01\xA46`\x04a\x01nV[a\x0CTV[a\x01\xB1a\x01\"V[\x80a\x01\xBB\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[_\x91\x03\x12a\x01\xCEWV[a\x01,V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xF2\x90`\x08a\x01\xF7\x93\x02a\x01\xD3V[a\x01\xD7V[\x90V[\x90a\x02\x05\x91Ta\x01\xE2V[\x90V[a\x02\x14`\x08_\x90a\x01\xFAV[\x90V[a\x02 \x90a\x01?V[\x90RV[\x91\x90a\x027\x90_` \x85\x01\x94\x01\x90a\x02\x17V[V[4a\x02iWa\x02I6`\x04a\x01\xC4V[a\x02ea\x02Ta\x02\x08V[a\x02\\a\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[\x90V[a\x02\x81\x90`\x08a\x02\x86\x93\x02a\x01\xD3V[a\x02nV[\x90V[\x90a\x02\x94\x91Ta\x02qV[\x90V[a\x02\xA3`\x04_\x90a\x02\x89V[\x90V[\x90V[a\x02\xB2\x90a\x02\xA6V[\x90RV[\x91\x90a\x02\xC9\x90_` \x85\x01\x94\x01\x90a\x02\xA9V[V[4a\x02\xFBWa\x02\xDB6`\x04a\x01\xC4V[a\x02\xF7a\x02\xE6a\x02\x97V[a\x02\xEEa\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03AW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03<WV[a\x03\x08V[a\x03\x04V[a\x03\0V[\x90` \x82\x82\x03\x12a\x03|W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03wWa\x03s\x92\x01a\x03\x0CV[\x90\x91V[a\x010V[a\x01,V[4a\x03\xB0Wa\x03\x9Aa\x03\x946`\x04a\x03KV[\x90a\x0F\x02V[a\x03\xA2a\x01\"V[\x80a\x03\xAC\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x03\xFCW[` \x83\x10\x14a\x03\xF7WV[a\x03\xC8V[\x91`\x7F\x16\x91a\x03\xECV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x042a\x04+\x83a\x03\xDCV[\x80\x94a\x04\x06V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\x89WP`\x01\x14a\x04MW[PPPV[a\x04Z\x91\x92\x93\x94Pa\x04\x0FV[\x91_\x92[\x81\x84\x10a\x04qWPP\x01\x90_\x80\x80a\x04HV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04^V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04HV[\x90a\x04\xAE\x91a\x04\x18V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xD9\x90a\x04\xB1V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xF3W`@RV[a\x04\xBBV[\x90a\x05\x18a\x05\x11\x92a\x05\x08a\x01\"V[\x93\x84\x80\x92a\x04\xA4V[\x03\x83a\x04\xCFV[V[\x90_\x10a\x05-Wa\x05*\x90a\x04\xF8V[\x90V[a\x03\xB5V[a\x05>`\t_\x90a\x05\x1AV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05xa\x05\x81` \x93a\x05\x86\x93a\x05o\x81a\x05AV[\x93\x84\x80\x93a\x05EV[\x95\x86\x91\x01a\x05NV[a\x04\xB1V[\x01\x90V[a\x05\x9F\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05YV[\x90V[4a\x05\xD2Wa\x05\xB26`\x04a\x01\xC4V[a\x05\xCEa\x05\xBDa\x052V[a\x05\xC5a\x01\"V[\x91\x82\x91\x82a\x05\x8AV[\x03\x90\xF3[a\x01(V[a\x05\xE3`\x02_\x90a\x01\xFAV[\x90V[4a\x06\x16Wa\x05\xF66`\x04a\x01\xC4V[a\x06\x12a\x06\x01a\x05\xD7V[a\x06\ta\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[4a\x06IWa\x06+6`\x04a\x01\xC4V[a\x063a\x0F3V[a\x06;a\x01\"V[\x80a\x06E\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[a\x06W\x81a\x02\xA6V[\x03a\x06^WV[_\x80\xFD[\x90P5\x90a\x06o\x82a\x06NV[V[\x15\x15\x90V[a\x06\x7F\x81a\x06qV[\x03a\x06\x86WV[_\x80\xFD[\x90P5\x90a\x06\x97\x82a\x06vV[V[_\x80\xFD[\x90a\x06\xB0a\x06\xA9a\x01\"V[\x92\x83a\x04\xCFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xD0Wa\x06\xCC` \x91a\x04\xB1V[\x01\x90V[a\x04\xBBV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x06\xF5a\x06\xF0\x82a\x06\xB2V[a\x06\x9DV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07\x11Wa\x07\x0F\x92a\x06\xD5V[V[a\x06\x99V[\x90\x80`\x1F\x83\x01\x12\x15a\x074W\x81` a\x071\x935\x91\x01a\x06\xE0V[\x90V[a\x03\0V[\x90a\x01@\x82\x82\x03\x12a\x07\xEAWa\x07Q\x81_\x84\x01a\x06bV[\x92a\x07_\x82` \x85\x01a\x01_V[\x92a\x07m\x83`@\x83\x01a\x01_V[\x92a\x07{\x81``\x84\x01a\x06\x8AV[\x92a\x07\x89\x82`\x80\x85\x01a\x06bV[\x92a\x07\x97\x83`\xA0\x83\x01a\x06bV[\x92a\x07\xA5\x81`\xC0\x84\x01a\x01_V[\x92a\x07\xB3\x82`\xE0\x85\x01a\x06bV[\x92a\x07\xC2\x83a\x01\0\x83\x01a\x01_V[\x92a\x01 \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xE5Wa\x07\xE2\x92\x01a\x07\x16V[\x90V[a\x010V[a\x01,V[4a\x08*Wa\x08\x14a\x08\x026`\x04a\x079V[\x98\x97\x90\x97\x96\x91\x96\x95\x92\x95\x94\x93\x94a\x17\xE4V[a\x08\x1Ca\x01\"V[\x80a\x08&\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[a\x08;`\x01_\x90a\x02\x89V[\x90V[4a\x08nWa\x08N6`\x04a\x01\xC4V[a\x08ja\x08Ya\x08/V[a\x08aa\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[4a\x08\xA3Wa\x08\x836`\x04a\x01\xC4V[a\x08\x9Fa\x08\x8Ea\x18\x1DV[a\x08\x96a\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[a\x08\xB4`\x07_\x90a\x02\x89V[\x90V[4a\x08\xE7Wa\x08\xC76`\x04a\x01\xC4V[a\x08\xE3a\x08\xD2a\x08\xA8V[a\x08\xDAa\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[a\x08\xF8`\x03_\x90a\x01\xFAV[\x90V[4a\t+Wa\t\x0B6`\x04a\x01\xC4V[a\t'a\t\x16a\x08\xECV[a\t\x1Ea\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[a\t<`\x06_\x90a\x01\xFAV[\x90V[4a\toWa\tO6`\x04a\x01\xC4V[a\tka\tZa\t0V[a\tba\x01\"V[\x91\x82\x91\x82a\x02$V[\x03\x90\xF3[a\x01(V[a\t\x80`\x05_\x90a\x02\x89V[\x90V[4a\t\xB3Wa\t\x936`\x04a\x01\xC4V[a\t\xAFa\t\x9Ea\ttV[a\t\xA6a\x01\"V[\x91\x82\x91\x82a\x02\xB6V[\x03\x90\xF3[a\x01(V[`\xFF\x16\x90V[a\t\xCE\x90`\x08a\t\xD3\x93\x02a\x01\xD3V[a\t\xB8V[\x90V[\x90a\t\xE1\x91Ta\t\xBEV[\x90V[a\t\xF1`\x03`\x14\x90a\t\xD6V[\x90V[a\t\xFD\x90a\x06qV[\x90RV[\x91\x90a\n\x14\x90_` \x85\x01\x94\x01\x90a\t\xF4V[V[4a\nFWa\n&6`\x04a\x01\xC4V[a\nBa\n1a\t\xE4V[a\n9a\x01\"V[\x91\x82\x91\x82a\n\x01V[\x03\x90\xF3[a\x01(V[4a\nyWa\nca\n^6`\x04a\x01nV[a\x18\x9EV[a\nka\x01\"V[\x80a\nu\x81a\x01\x8CV[\x03\x90\xF3[a\x01(V[_\x80\xFD[a\n\x93\x90a\n\x8Ea\x18\xA9V[a\x0B\xE2V[V[\x90V[\x90V[a\n\xAFa\n\xAAa\n\xB4\x92a\n\x95V[a\n\x98V[a\x014V[\x90V[a\n\xC0\x90a\n\x9BV[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0B\x1D`'`@\x92a\x05EV[a\x0B&\x81a\n\xC3V[\x01\x90V[a\x0B?\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\x10V[\x90V[\x15a\x0BIWV[a\x0BQa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Bg`\x04\x82\x01a\x0B*V[\x03\x90\xFD[_\x1B\x90V[\x90a\x0B\x81`\x01\x80`\xA0\x1B\x03\x91a\x0BkV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x9Fa\x0B\x9Aa\x0B\xA4\x92a\x014V[a\n\x98V[a\x014V[\x90V[a\x0B\xB0\x90a\x0B\x8BV[\x90V[a\x0B\xBC\x90a\x0B\xA7V[\x90V[\x90V[\x90a\x0B\xD7a\x0B\xD2a\x0B\xDE\x92a\x0B\xB3V[a\x0B\xBFV[\x82Ta\x0BpV[\x90UV[a\x0C\x07\x81a\x0C\0a\x0B\xFAa\x0B\xF5_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x0BBV[a\x0C\x12\x81`\x08a\x0B\xC2V[a\x0C<\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0B\xB3V[\x90a\x0CEa\x01\"V[\x80a\x0CO\x81a\x01\x8CV[\x03\x90\xA2V[a\x0C]\x90a\n\x82V[V[\x90a\x0Cq\x91a\x0Cla\x18\xA9V[a\x0E\xB9V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0C\xA0\x91\x02\x91a\x0C\x9A_\x19\x84a\x0C\x81V[\x92a\x0C\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xBEa\x0C\xB9a\x0C\xC3\x92a\x02\xA6V[a\n\x98V[a\x02\xA6V[\x90V[\x90V[\x91\x90a\x0C\xDFa\x0C\xDAa\x0C\xE7\x93a\x0C\xAAV[a\x0C\xC6V[\x90\x83Ta\x0C\x85V[\x90UV[_\x90V[a\r\x01\x91a\x0C\xFBa\x0C\xEBV[\x91a\x0C\xC9V[V[[\x81\x81\x10a\r\x0FWPPV[\x80a\r\x1C_`\x01\x93a\x0C\xEFV[\x01a\r\x04V[\x91\x90`\x1F\x81\x11a\r2W[PPPV[a\r>a\rc\x93a\x04\x0FV[\x90` a\rJ\x84a\x0CwV[\x83\x01\x93\x10a\rkW[a\r\\\x90a\x0CwV[\x01\x90a\r\x03V[_\x80\x80a\r-V[\x91Pa\r\\\x81\x92\x90Pa\rSV[\x90a\r\x89\x90_\x19\x90`\x08\x02a\x01\xD3V[\x19\x16\x90V[\x81a\r\x98\x91a\ryV[\x90`\x02\x02\x17\x90V[\x91a\r\xAB\x90\x82a\x0CsV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0EjWa\r\xCF\x82a\r\xC9\x85Ta\x03\xDCV[\x85a\r\"V[_\x90`\x1F\x83\x11`\x01\x14a\x0E\x02W\x91\x80\x91a\r\xF1\x93_\x92a\r\xF6W[PPa\r\x8EV[\x90U[V[\x90\x91P\x015_\x80a\r\xEAV[`\x1F\x19\x83\x16\x91a\x0E\x11\x85a\x04\x0FV[\x92_[\x81\x81\x10a\x0ERWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0E8W[PPP\x02\x01\x90Ua\r\xF4V[a\x0EH\x91\x015`\x1F\x84\x16\x90a\ryV[\x90U_\x80\x80a\x0E,V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0E\x14V[a\x04\xBBV[\x90a\x0Ez\x92\x91a\r\xA0V[V[\x91\x90a\x0E\x96\x81a\x0E\x8F\x81a\x0E\x9B\x95a\x05EV[\x80\x95a\x06\xD5V[a\x04\xB1V[\x01\x90V[\x90\x91a\x0E\xB6\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0E|V[\x90V[a\x0E\xC6\x81\x83\x90`\ta\x0EoV[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x0E\xFDa\x0E\xF4a\x01\"V[\x92\x83\x92\x83a\x0E\x9FV[\x03\x90\xA1V[\x90a\x0F\x0C\x91a\x0C_V[V[a\x0F\x16a\x18\xA9V[a\x0F\x1Ea\x0F V[V[a\x0F1a\x0F,_a\n\xB7V[a\x18\xFEV[V[a\x0F;a\x0F\x0EV[V[`@\x1C\x90V[a\x0FOa\x0FT\x91a\x0F=V[a\t\xB8V[\x90V[a\x0Fa\x90Ta\x0FCV[\x90V[_\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\x82a\x0F\x87\x91a\x0FdV[a\x0FiV[\x90V[a\x0F\x94\x90Ta\x0FvV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\xB8a\x0F\xB3a\x0F\xBD\x92a\n\x95V[a\n\x98V[a\x0F\x97V[\x90V[\x90V[a\x0F\xD7a\x0F\xD2a\x0F\xDC\x92a\x0F\xC0V[a\n\x98V[a\x0F\x97V[\x90V[a\x0F\xE8\x90a\x0B\xA7V[\x90V[a\x0F\xFFa\x0F\xFAa\x10\x04\x92a\n\x95V[a\n\x98V[a\x02\xA6V[\x90V[\x90a\x10\x1Ag\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0BkV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x108a\x103a\x10=\x92a\x0F\x97V[a\n\x98V[a\x0F\x97V[\x90V[\x90V[\x90a\x10Xa\x10Sa\x10_\x92a\x10$V[a\x10@V[\x82Ta\x10\x07V[\x90UV[`@\x1B\x90V[\x90a\x10}h\xFF\0\0\0\0\0\0\0\0\x91a\x10cV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\x90\x90a\x06qV[\x90V[\x90V[\x90a\x10\xABa\x10\xA6a\x10\xB2\x92a\x10\x87V[a\x10\x93V[\x82Ta\x10iV[\x90UV[a\x10\xBF\x90a\x0F\xC3V[\x90RV[\x91\x90a\x10\xD6\x90_` \x85\x01\x94\x01\x90a\x10\xB6V[V[\x96\x93\x90\x97\x94\x91\x98\x95\x92a\x10\xE9a\x19]V[\x99a\x10\xFEa\x10\xF8_\x8D\x01a\x0FWV[\x15a\x06qV[\x99a\x11\n_\x8D\x01a\x0F\x8AV[\x80a\x11\x1Da\x11\x17_a\x0F\xA4V[\x91a\x0F\x97V[\x14\x80a\x12@W[\x90a\x118a\x112`\x01a\x0F\xC3V[\x91a\x0F\x97V[\x14\x80a\x12\x18W[a\x11J\x90\x91\x15a\x06qV[\x90\x81a\x12\x07W[Pa\x11\xE4Wa\x11{\x99a\x11p\x8D_a\x11i`\x01a\x0F\xC3V[\x91\x01a\x10CV[\x8Ba\x11\xD1W[a\x16\xB9V[a\x11\x83W[PV[a\x11\x90\x90_\x80\x91\x01a\x10\x96V[`\x01a\x11\xC8\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x11\xBFa\x01\"V[\x91\x82\x91\x82a\x10\xC3V[\x03\x90\xA1_a\x11\x80V[a\x11\xDF\x8D_`\x01\x91\x01a\x10\x96V[a\x11vV[a\x11\xECa\x01\"V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x12\x03`\x04\x82\x01a\x01\x8CV[\x03\x90\xFD[a\x12\x12\x91P\x15a\x06qV[_a\x11QV[Pa\x11Ja\x12%0a\x0F\xDFV[;a\x128a\x122_a\x0F\xEBV[\x91a\x02\xA6V[\x14\x90Pa\x11?V[P\x8Ba\x11$V[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12{`\x17` \x92a\x05EV[a\x12\x84\x81a\x12GV[\x01\x90V[a\x12\x9D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12nV[\x90V[\x15a\x12\xA7WV[a\x12\xAFa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xC5`\x04\x82\x01a\x12\x88V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x13#`&`@\x92a\x05EV[a\x13,\x81a\x12\xC9V[\x01\x90V[a\x13E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x16V[\x90V[\x15a\x13OWV[a\x13Wa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13m`\x04\x82\x01a\x130V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x13\xCB`%`@\x92a\x05EV[a\x13\xD4\x81a\x13qV[\x01\x90V[a\x13\xED\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xBEV[\x90V[\x15a\x13\xF7WV[a\x13\xFFa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x15`\x04\x82\x01a\x13\xD8V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x14s`*`@\x92a\x05EV[a\x14|\x81a\x14\x19V[\x01\x90V[a\x14\x95\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14fV[\x90V[\x15a\x14\x9FWV[a\x14\xA7a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xBD`\x04\x82\x01a\x14\x80V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x15\x1B`#`@\x92a\x05EV[a\x15$\x81a\x14\xC1V[\x01\x90V[a\x15=\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x0EV[\x90V[\x15a\x15GWV[a\x15Oa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15e`\x04\x82\x01a\x15(V[\x03\x90\xFD[\x90a\x15u_\x19\x91a\x0BkV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x15\x94a\x15\x8Fa\x15\x9B\x92a\x0C\xAAV[a\x0C\xC6V[\x82Ta\x15iV[\x90UV[`\xA0\x1B\x90V[\x90a\x15\xB4`\xFF`\xA0\x1B\x91a\x15\x9FV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x15\xD3a\x15\xCEa\x15\xDA\x92a\x10\x87V[a\x10\x93V[\x82Ta\x15\xA5V[\x90UV[\x90a\x15\xE8\x81a\x05AV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x16\xA8Wa\x16\x0C\x82a\x16\x06\x85Ta\x03\xDCV[\x85a\r\"V[` \x90`\x1F\x83\x11`\x01\x14a\x16@W\x91\x80\x91a\x16/\x93_\x92a\x164W[PPa\r\x8EV[\x90U[V[\x90\x91P\x01Q_\x80a\x16(V[`\x1F\x19\x83\x16\x91a\x16O\x85a\x04\x0FV[\x92_[\x81\x81\x10a\x16\x90WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x16vW[PPP\x02\x01\x90Ua\x162V[a\x16\x86\x91\x01Q`\x1F\x84\x16\x90a\ryV[\x90U_\x80\x80a\x16jV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x16RV[a\x04\xBBV[\x90a\x16\xB7\x91a\x15\xDEV[V[\x94a\x17\xB6a\x17\xDD\x98\x95a\x17\xAFa\x17\xC4\x96a\x17\xA8\x8B\x97a\x17\xE2\x9F\x9C\x8F\x98a\x17\x9Aa\x17\xCB\x9Ea\x17\x93a\x17\xBD\x9Ca\x17ra\x17\xA1\x96a\x17\x07\x85a\x17\0a\x16\xFA_a\x0F\xEBV[\x91a\x02\xA6V[\x14\x15a\x12\xA0V[a\x17,\x87a\x17%a\x17\x1Fa\x17\x1A_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x13HV[a\x17Q\x89a\x17Ja\x17Da\x17?_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x13\xF0V[a\x17ka\x17ea\x17`_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x14\x98V[a\x17\x8Ca\x17\x86a\x17\x81_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14\x15a\x15@V[`\x01a\x15\x7FV[`\x02a\x0B\xC2V[`\x03a\x0B\xC2V[`\x03a\x15\xBEV[`\x04a\x15\x7FV[`\x05a\x15\x7FV[`\x06a\x0B\xC2V[`\x07a\x15\x7FV[a\x17\xD6\x83`\x08a\x0B\xC2V[`\ta\x16\xADV[a\x18\xFEV[V[\x90a\x17\xF6\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x10\xD8V[V[_\x90V[a\x18\x08a\x18\r\x91a\x0FdV[a\x01\xD7V[\x90V[a\x18\x1A\x90Ta\x17\xFCV[\x90V[a\x18%a\x17\xF8V[Pa\x18/_a\x18\x10V[\x90V[a\x18C\x90a\x18>a\x18\xA9V[a\x18EV[V[\x80a\x18`a\x18Za\x18U_a\n\xB7V[a\x01?V[\x91a\x01?V[\x14a\x18pWa\x18n\x90a\x18\xFEV[V[a\x18\x9Aa\x18|_a\n\xB7V[a\x18\x84a\x01\"V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02$V[\x03\x90\xFD[a\x18\xA7\x90a\x182V[V[a\x18\xB1a\x18\x1DV[a\x18\xCAa\x18\xC4a\x18\xBFa\x19\x81V[a\x01?V[\x91a\x01?V[\x03a\x18\xD1WV[a\x18\xFAa\x18\xDCa\x19\x81V[a\x18\xE4a\x01\"V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02$V[\x03\x90\xFD[a\x19\x07_a\x18\x10V[a\x19\x11\x82_a\x0B\xC2V[\x90a\x19Ea\x19?\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\xB3V[\x91a\x0B\xB3V[\x91a\x19Na\x01\"V[\x80a\x19X\x81a\x01\x8CV[\x03\x90\xA3V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x19\x89a\x17\xF8V[P3\x90V\xFE\xA2dipfsX\"\x12 G\x05\x11\xABq\xF4\xBC\xE8\xBB\xB6o\xCAj\xF1pT\xB6\xB4[\0\xB2o\xDD\xAB4\x15y\x9Cn\xAC\x15\x8FdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(uint256,address,address,bool,uint256,uint256,address,uint256,address,string)` and selector `0x8207a819`.
```solidity
function initialize(uint256 chainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(uint256,address,address,bool,uint256,uint256,address,uint256,address,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value.chainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainId: tuple.0,
                        arbitrumBridgeAddress: tuple.1,
                        arbitrumInboxAddress: tuple.2,
                        arbitrumIgnoreDelayedMessages: tuple.3,
                        settlementDelay: tuple.4,
                        settlementStartBlock: tuple.5,
                        sequencingContractAddress: tuple.6,
                        sequencingStartBlock: tuple.7,
                        rollupOwner: tuple.8,
                        sequencingChainRpcUrl: tuple.9,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint256,address,address,bool,uint256,uint256,address,uint256,address,string)";
            const SELECTOR: [u8; 4] = [130u8, 7u8, 168u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [87u8, 209u8, 186u8, 37u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [113u8, 80u8, 24u8, 166u8],
            [130u8, 7u8, 168u8, 25u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    chainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
