/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();

    event AppchainBlockExplorerUrlUpdated(string newUrl);
    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
    function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CHAIN_ID() external view returns (uint256);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function getAllowedSettlementAddresses() external view returns (address[] memory);
    function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
    function owner() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateAppchainBlockExplorerUrl(string memory newUrl) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ALLOWED_SETTLEMENT_ADDRESSES",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "APPCHAIN_BLOCK_EXPLORER_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllowedSettlementAddresses",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "appchainBlockExplorerUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "allowedSettlementAddresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAppchainBlockExplorerUrl",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AppchainBlockExplorerUrlUpdated",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b6121e061021682396121e090f35b610032565b60405190565b5f80fd5b61003e610132565b565b60401c90565b60ff1690565b61005861005d91610040565b610046565b90565b61006a905461004c565b90565b5f0190565b5f1c90565b60018060401b031690565b61008e61009391610072565b610077565b90565b6100a09054610082565b90565b60018060401b031690565b5f1b90565b906100c460018060401b03916100ae565b9181191691161790565b90565b6100e56100e06100ea926100a3565b6100ce565b6100a3565b90565b90565b9061010561010061010c926100d1565b6100ed565b82546100b3565b9055565b610119906100a3565b9052565b9190610130905f60208501940190610110565b565b61013a6101f1565b6101455f8201610060565b6101ce576101545f8201610096565b61016c61016660018060401b036100a3565b916100a3565b03610175575b50565b610188905f60018060401b0391016100f0565b60018060401b036101c57fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916101bc61002c565b9182918261011d565b0390a15f610172565b6101d661002c565b63f92ee8a960e01b8152806101ed6004820161006d565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60c06040526004361015610013575b610dfb565b61001d5f3561015c565b80630743bf6e146101575780631bc0afd6146101525780632a84b0f01461014d57806341fc712d146101485780634b8be3f71461014357806357d1ba251461013e5780635a2d9c181461013957806362c73caa1461013457806366a1d1081461012f5780636edd6c091461012a57806385e1f4d0146101255780638da5cb5b14610120578063a3c6e1e71461011b578063aa6a43d814610116578063bf6db6f814610111578063d1f4737c1461010c578063e79388e614610107578063f2fde38b14610102578063f881afaf146100fd5763f8a144be0361000e57610dc6565b610d82565b610cbc565b610c87565b610bf4565b610bb0565b610b6c565b610b28565b610ae4565b610aa2565b610a5e565b610a1a565b6109d7565b610991565b6106b6565b610625565b61056f565b6104d6565b610457565b61036c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261017a57565b61016c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101c6575b60208310146101c157565b610192565b91607f16916101b6565b60209181520190565b5f5260205f2090565b905f92918054906101fc6101f5836101a6565b80946101d0565b916001811690815f146102535750600114610217575b505050565b61022491929394506101d9565b915f925b81841061023b57505001905f8080610212565b60018160209295939554848601520191019290610228565b92949550505060ff19168252151560200201905f8080610212565b90610278916101e2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102a39061027b565b810190811067ffffffffffffffff8211176102bd57604052565b610285565b906102e26102db926102d2610162565b9384809261026e565b0383610299565b565b905f106102f7576102f4906102c2565b90565b61017f565b610308600c5f906102e4565b90565b5190565b60209181520190565b90825f9392825e0152565b61034261034b602093610350936103398161030b565b9384809361030f565b95869101610318565b61027b565b0190565b6103699160208201915f818403910152610323565b90565b3461039c5761037c366004610170565b6103986103876102fc565b61038f610162565b91829182610354565b0390f35b610168565b5190565b60209181520190565b60200190565b60018060a01b031690565b6103c8906103b4565b90565b6103d4906103bf565b9052565b906103e5816020936103cb565b0190565b60200190565b9061040c6104066103ff846103a1565b80936103a5565b926103ae565b905f5b81811061041c5750505090565b90919261043561042f60019286516103d8565b946103e9565b910191909161040f565b6104549160208201915f8184039101526103ef565b90565b3461048757610467366004610170565b610483610472610ecb565b61047a610162565b9182918261043f565b0390f35b610168565b5f80fd5b610499816103bf565b036104a057565b5f80fd5b905035906104b182610490565b565b906020828203126104cc576104c9915f016104a4565b90565b61016c565b5f0190565b34610504576104ee6104e93660046104b3565b61115e565b6104f6610162565b80610500816104d1565b0390f35b610168565b1c90565b60018060a01b031690565b61052890600861052d9302610509565b61050d565b90565b9061053b9154610518565b90565b61054a600a5f90610530565b90565b610556906103bf565b9052565b919061056d905f6020850194019061054d565b565b3461059f5761057f366004610170565b61059b61058a61053e565b610592610162565b9182918261055a565b0390f35b610168565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156105ea5781359167ffffffffffffffff83116105e55760200192600183028401116105e057565b6105ac565b6105a8565b6105a4565b90602082820312610620575f82013567ffffffffffffffff811161061b5761061792016105b0565b9091565b61048c565b61016c565b346106545761063e6106383660046105ef565b90611428565b610646610162565b80610650816104d1565b0390f35b610168565b90565b61066c9060086106719302610509565b610659565b90565b9061067f915461065c565b90565b61068e60065f90610674565b90565b90565b61069d90610691565b9052565b91906106b4905f60208501940190610694565b565b346106e6576106c6366004610170565b6106e26106d1610682565b6106d9610162565b918291826106a1565b0390f35b610168565b6106f481610691565b036106fb57565b5f80fd5b9050359061070c826106eb565b565b151590565b61071c8161070e565b0361072357565b5f80fd5b9050359061073482610713565b565b5f80fd5b9061074d610746610162565b9283610299565b565b67ffffffffffffffff811161076d5761076960209161027b565b0190565b610285565b90825f939282370152565b9092919261079261078d8261074f565b61073a565b938185526020850190828401116107ae576107ac92610772565b565b610736565b9080601f830112156107d1578160206107ce9335910161077d565b90565b6105a4565b67ffffffffffffffff81116107ee5760208091020190565b610285565b90929192610808610803826107d6565b61073a565b938185526020808601920283019281841161084557915b83831061082c5750505050565b6020809161083a84866104a4565b81520192019161081f565b6105ac565b9080601f8301121561086857816020610865933591016107f3565b90565b6105a4565b9190916101c08184031261098c57610887835f83016104a4565b9261089581602084016106ff565b926108a382604085016106ff565b926108b183606083016104a4565b926108bf81608084016104a4565b926108cd8260a08501610727565b926108db8360c083016106ff565b926108e98160e084016106ff565b926108f88261010085016104a4565b926109078361012083016106ff565b926109168161014084016104a4565b9261016083013567ffffffffffffffff811161098757826109389185016107b3565b9261018081013567ffffffffffffffff8111610982578361095a9183016107b3565b926101a082013567ffffffffffffffff811161097d5761097a920161084a565b90565b61048c565b61048c565b61048c565b61016c565b346109d2576109bc6109a436600461086d565b9c9b909b9a919a999299989398979497969596611f9f565b6109c4610162565b806109ce816104d1565b0390f35b610168565b34610a06576109f06109ea3660046105ef565b90612030565b6109f8610162565b80610a02816104d1565b0390f35b610168565b610a17600b5f906102e4565b90565b34610a4a57610a2a366004610170565b610a46610a35610a0b565b610a3d610162565b91829182610354565b0390f35b610168565b610a5b60015f90610530565b90565b34610a8e57610a6e366004610170565b610a8a610a79610a4f565b610a81610162565b9182918261055a565b0390f35b610168565b610a9f60045f90610674565b90565b34610ad257610ab2366004610170565b610ace610abd610a93565b610ac5610162565b918291826106a1565b0390f35b610168565b610ae15f80610530565b90565b34610b1457610af4366004610170565b610b10610aff610ad7565b610b07610162565b9182918261055a565b0390f35b610168565b610b2560085f90610674565b90565b34610b5857610b38366004610170565b610b54610b43610b19565b610b4b610162565b918291826106a1565b0390f35b610168565b610b6960025f90610530565b90565b34610b9c57610b7c366004610170565b610b98610b87610b5d565b610b8f610162565b9182918261055a565b0390f35b610168565b610bad60035f90610530565b90565b34610be057610bc0366004610170565b610bdc610bcb610ba1565b610bd3610162565b9182918261055a565b0390f35b610168565b610bf160075f90610674565b90565b34610c2457610c04366004610170565b610c20610c0f610be5565b610c17610162565b918291826106a1565b0390f35b610168565b60ff1690565b610c3f906008610c449302610509565b610c29565b90565b90610c529154610c2f565b90565b610c626003601490610c47565b90565b610c6e9061070e565b9052565b9190610c85905f60208501940190610c65565b565b34610cb757610c97366004610170565b610cb3610ca2610c55565b610caa610162565b91829182610c72565b0390f35b610168565b34610cea57610cd4610ccf3660046104b3565b61211c565b610cdc610162565b80610ce6816104d1565b0390f35b610168565b90602082820312610d0857610d05915f016106ff565b90565b61016c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610d3781610d21565b821015610d5157610d49600191610d25565b910201905f90565b610d0d565b6009610d6181610d21565b821015610d7e57610d7b91610d7591610d2e565b90610530565b90565b5f80fd5b34610db257610dae610d9d610d98366004610cef565b610d56565b610da5610162565b9182918261055a565b0390f35b610168565b610dc360055f90610674565b90565b34610df657610dd6366004610170565b610df2610de1610db7565b610de9610162565b918291826106a1565b0390f35b610168565b5f80fd5b606090565b60209181520190565b5f1c90565b610e1e610e2391610e0d565b61050d565b90565b610e309054610e12565b90565b60010190565b90610e56610e50610e4984610d21565b8093610e04565b92610d25565b905f5b818110610e665750505090565b909192610e86610e80600192610e7b87610e26565b6103d8565b94610e33565b9101919091610e59565b90610e9a91610e39565b90565b90610ebd610eb692610ead610162565b93848092610e90565b0383610299565b565b610ec890610e9d565b90565b610ed3610dff565b50610ede6009610ebf565b90565b610eeb9054610e12565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610f22601760209261030f565b610f2b81610eee565b0190565b610f449060208101905f818303910152610f15565b90565b15610f4e57565b610f56610162565b62461bcd60e51b815280610f6c60048201610f2f565b0390fd5b610f9d90610f9833610f92610f8c610f875f610ee1565b6103bf565b916103bf565b14610f47565b6110ec565b565b90565b90565b610fb9610fb4610fbe92610f9f565b610fa2565b6103b4565b90565b610fca90610fa5565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b611027602760409261030f565b61103081610fcd565b0190565b6110499060208101905f81830391015261101a565b90565b1561105357565b61105b610162565b62461bcd60e51b81528061107160048201611034565b0390fd5b5f1b90565b9061108b60018060a01b0391611075565b9181191691161790565b6110a96110a46110ae926103b4565b610fa2565b6103b4565b90565b6110ba90611095565b90565b6110c6906110b1565b90565b90565b906110e16110dc6110e8926110bd565b6110c9565b825461107a565b9055565b6111118161110a6111046110ff5f610fc1565b6103bf565b916103bf565b141561104c565b61111c81600a6110cc565b6111467f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9916110bd565b9061114f610162565b80611159816104d1565b0390a2565b61116790610f70565b565b90611197916111923361118c6111866111815f610ee1565b6103bf565b916103bf565b14610f47565b6113df565b565b5090565b601f602091010490565b1b90565b919060086111c69102916111c05f19846111a7565b926111a7565b9181191691161790565b6111e46111df6111e992610691565b610fa2565b610691565b90565b90565b919061120561120061120d936111d0565b6111ec565b9083546111ab565b9055565b5f90565b61122791611221611211565b916111ef565b565b5b818110611235575050565b806112425f600193611215565b0161122a565b9190601f8111611258575b505050565b611264611289936101d9565b9060206112708461119d565b83019310611291575b6112829061119d565b0190611229565b5f8080611253565b915061128281929050611279565b906112af905f1990600802610509565b191690565b816112be9161129f565b906002021790565b916112d19082611199565b9067ffffffffffffffff8211611390576112f5826112ef85546101a6565b85611248565b5f90601f831160011461132857918091611317935f9261131c575b50506112b4565b90555b565b90915001355f80611310565b601f19831691611337856101d9565b925f5b8181106113785750916002939185600196941061135e575b5050500201905561131a565b61136e910135601f84169061129f565b90555f8080611352565b9193602060018192878701358155019501920161133a565b610285565b906113a092916112c6565b565b91906113bc816113b5816113c19561030f565b8095610772565b61027b565b0190565b90916113dc9260208301925f8185039101526113a2565b90565b6113ec818390600c611395565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a79161142361141a610162565b928392836113c5565b0390a1565b9061143291611169565b565b60401c90565b61144661144b91611434565b610c29565b90565b611458905461143a565b90565b67ffffffffffffffff1690565b61147461147991610e0d565b61145b565b90565b6114869054611468565b90565b67ffffffffffffffff1690565b6114aa6114a56114af92610f9f565b610fa2565b611489565b90565b90565b6114c96114c46114ce926114b2565b610fa2565b611489565b90565b6114da906110b1565b90565b6114f16114ec6114f692610f9f565b610fa2565b610691565b90565b9061150c67ffffffffffffffff91611075565b9181191691161790565b61152a61152561152f92611489565b610fa2565b611489565b90565b90565b9061154a61154561155192611516565b611532565b82546114f9565b9055565b60401b90565b9061156f68ff000000000000000091611555565b9181191691161790565b6115829061070e565b90565b90565b9061159d6115986115a492611579565b611585565b825461155b565b9055565b6115b1906114b5565b9052565b91906115c8905f602085019401906115a8565b565b9c9b9a999897969594939291906115df612127565b6080526115f86115f25f6080510161144e565b1561070e565b60a0526116085f6080510161147c565b8061161b6116155f611496565b91611489565b1480611744575b9061163661163060016114b5565b91611489565b148061171c575b61164890911561070e565b908161170b575b506116e85761167c9d61166f61166560016114b5565b5f60805101611535565b60a0516116d4575b611e0b565b60a051611686575b565b6116945f8060805101611588565b60016116cc7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916116c3610162565b918291826115b5565b0390a1611684565b6116e360015f60805101611588565b611677565b6116f0610162565b63f92ee8a960e01b815280611707600482016104d1565b0390fd5b61171691501561070e565b5f61164f565b50611648611729306114d1565b3b61173c6117365f6114dd565b91610691565b14905061163d565b5060a051611622565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b611781601c60209261030f565b61178a8161174d565b0190565b6117a39060208101905f818303910152611774565b90565b156117ad57565b6117b5610162565b62461bcd60e51b8152806117cb6004820161178e565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b611803601760209261030f565b61180c816117cf565b0190565b6118259060208101905f8183039101526117f6565b90565b1561182f57565b611837610162565b62461bcd60e51b81528061184d60048201611810565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6118ab602260409261030f565b6118b481611851565b0190565b6118cd9060208101905f81830391015261189e565b90565b156118d757565b6118df610162565b62461bcd60e51b8152806118f5600482016118b8565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b611953602660409261030f565b61195c816118f9565b0190565b6119759060208101905f818303910152611946565b90565b1561197f57565b611987610162565b62461bcd60e51b81528061199d60048201611960565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6119fb602560409261030f565b611a04816119a1565b0190565b611a1d9060208101905f8183039101526119ee565b90565b15611a2757565b611a2f610162565b62461bcd60e51b815280611a4560048201611a08565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b611aa3602a60409261030f565b611aac81611a49565b0190565b611ac59060208101905f818303910152611a96565b90565b15611acf57565b611ad7610162565b62461bcd60e51b815280611aed60048201611ab0565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b611b4b602360409261030f565b611b5481611af1565b0190565b611b6d9060208101905f818303910152611b3e565b90565b15611b7757565b611b7f610162565b62461bcd60e51b815280611b9560048201611b58565b0390fd5b90611ba55f1991611075565b9181191691161790565b90611bc4611bbf611bcb926111d0565b6111ec565b8254611b99565b9055565b60a01b90565b90611be460ff60a01b91611bcf565b9181191691161790565b90611c03611bfe611c0a92611579565b611585565b8254611bd5565b9055565b600190818003010490565b5b818110611c25575050565b80611c325f600193611215565b01611c1a565b9091828110611c47575b505050565b611c65611c5f611c59611c7095611c0e565b92611c0e565b92610d25565b918201910190611c19565b5f8080611c42565b90680100000000000000008111611ca15781611c96611c9f93610d21565b90828155611c38565b565b610285565b611cb090516103bf565b90565b611cbc826103a1565b9167ffffffffffffffff8311611d1f57611cea611ce4600192611cdf8686611c78565b6103ae565b92610d25565b9204915f5b838110611cfc5750505050565b6001906020611d12611d0d86611ca6565b6110c9565b9401938184015501611cef565b610285565b90611d2e91611cb3565b565b90611d3a8161030b565b9067ffffffffffffffff8211611dfa57611d5e82611d5885546101a6565b85611248565b602090601f8311600114611d9257918091611d81935f92611d86575b50506112b4565b90555b565b90915001515f80611d7a565b601f19831691611da1856101d9565b925f5b818110611de257509160029391856001969410611dc8575b50505002019055611d84565b611dd8910151601f84169061129f565b90555f8080611dbc565b91936020600181928787015181550195019201611da4565b610285565b90611e0991611d30565b565b9b999597611f6e611f8a98611f9d9f968f9b611f989f9c611f839a611f919f98611f6794611f528f9c611f4b611f5994611f7c9f611f759e611f3d8f92611f1c611f4494611e77611f609e611e70611e6a611e655f610fc1565b6103bf565b916103bf565b14156117a6565b611e9485611e8d611e875f6114dd565b91610691565b1415611828565b611eb187611eaa611ea45f6114dd565b91610691565b14156118d0565b611ed689611ecf611ec9611ec45f610fc1565b6103bf565b916103bf565b1415611978565b611efb8b611ef4611eee611ee95f610fc1565b6103bf565b916103bf565b1415611a20565b611f15611f0f611f0a5f610fc1565b6103bf565b916103bf565b1415611ac8565b611f36611f30611f2b5f610fc1565b6103bf565b916103bf565b1415611b70565b6004611baf565b6005611baf565b60016110cc565b60026110cc565b6003611bee565b6006611baf565b6007611baf565b60036110cc565b6008611baf565b6009611d24565b600a6110cc565b600b611dff565b600c611dff565b61214b565b565b90611fb59d9c9b9a9998979695949392916115ca565b565b90611fe591611fe033611fda611fd4611fcf5f610ee1565b6103bf565b916103bf565b14610f47565b611fe7565b565b611ff4818390600b611395565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f29161202b612022610162565b928392836113c5565b0390a1565b9061203a91611fb7565b565b612069906120643361205e6120586120535f610ee1565b6103bf565b916103bf565b14610f47565b6120ec565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b61209e6020809261030f565b6120a78161206b565b0190565b6120c09060208101905f818303910152612092565b90565b156120ca57565b6120d2610162565b62461bcd60e51b8152806120e8600482016120ab565b0390fd5b61211a906121158161210e6121086121035f610fc1565b6103bf565b916103bf565b14156120c3565b61214b565b565b6121259061203c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6121545f610ee1565b61215e825f6110cc565b9061219261218c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936110bd565b916110bd565b9161219b610162565b806121a5816104d1565b0390a356fea2646970667358221220b72ee08af8b3a7605c2c88195b13f27cac8df0d7c8927c69983015819411f7be64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a!\xE0a\x02\x16\x829a!\xE0\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x012V[V[`@\x1C\x90V[`\xFF\x16\x90V[a\0Xa\0]\x91a\0@V[a\0FV[\x90V[a\0j\x90Ta\0LV[\x90V[_\x01\x90V[_\x1C\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\0\x8Ea\0\x93\x91a\0rV[a\0wV[\x90V[a\0\xA0\x90Ta\0\x82V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[_\x1B\x90V[\x90a\0\xC4`\x01\x80`@\x1B\x03\x91a\0\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xA3V[a\0\xCEV[a\0\xA3V[\x90V[\x90V[\x90a\x01\x05a\x01\0a\x01\x0C\x92a\0\xD1V[a\0\xEDV[\x82Ta\0\xB3V[\x90UV[a\x01\x19\x90a\0\xA3V[\x90RV[\x91\x90a\x010\x90_` \x85\x01\x94\x01\x90a\x01\x10V[V[a\x01:a\x01\xF1V[a\x01E_\x82\x01a\0`V[a\x01\xCEWa\x01T_\x82\x01a\0\x96V[a\x01la\x01f`\x01\x80`@\x1B\x03a\0\xA3V[\x91a\0\xA3V[\x03a\x01uW[PV[a\x01\x88\x90_`\x01\x80`@\x1B\x03\x91\x01a\0\xF0V[`\x01\x80`@\x1B\x03a\x01\xC5\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x01\xBCa\0,V[\x91\x82\x91\x82a\x01\x1DV[\x03\x90\xA1_a\x01rV[a\x01\xD6a\0,V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x01\xED`\x04\x82\x01a\0mV[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V\xFE`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\xFBV[a\0\x1D_5a\x01\\V[\x80c\x07C\xBFn\x14a\x01WW\x80c\x1B\xC0\xAF\xD6\x14a\x01RW\x80c*\x84\xB0\xF0\x14a\x01MW\x80cA\xFCq-\x14a\x01HW\x80cK\x8B\xE3\xF7\x14a\x01CW\x80cW\xD1\xBA%\x14a\x01>W\x80cZ-\x9C\x18\x14a\x019W\x80cb\xC7<\xAA\x14a\x014W\x80cf\xA1\xD1\x08\x14a\x01/W\x80cn\xDDl\t\x14a\x01*W\x80c\x85\xE1\xF4\xD0\x14a\x01%W\x80c\x8D\xA5\xCB[\x14a\x01 W\x80c\xA3\xC6\xE1\xE7\x14a\x01\x1BW\x80c\xAAjC\xD8\x14a\x01\x16W\x80c\xBFm\xB6\xF8\x14a\x01\x11W\x80c\xD1\xF4s|\x14a\x01\x0CW\x80c\xE7\x93\x88\xE6\x14a\x01\x07W\x80c\xF2\xFD\xE3\x8B\x14a\x01\x02W\x80c\xF8\x81\xAF\xAF\x14a\0\xFDWc\xF8\xA1D\xBE\x03a\0\x0EWa\r\xC6V[a\r\x82V[a\x0C\xBCV[a\x0C\x87V[a\x0B\xF4V[a\x0B\xB0V[a\x0BlV[a\x0B(V[a\n\xE4V[a\n\xA2V[a\n^V[a\n\x1AV[a\t\xD7V[a\t\x91V[a\x06\xB6V[a\x06%V[a\x05oV[a\x04\xD6V[a\x04WV[a\x03lV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01zWV[a\x01lV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xC6W[` \x83\x10\x14a\x01\xC1WV[a\x01\x92V[\x91`\x7F\x16\x91a\x01\xB6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xFCa\x01\xF5\x83a\x01\xA6V[\x80\x94a\x01\xD0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02SWP`\x01\x14a\x02\x17W[PPPV[a\x02$\x91\x92\x93\x94Pa\x01\xD9V[\x91_\x92[\x81\x84\x10a\x02;WPP\x01\x90_\x80\x80a\x02\x12V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02(V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x12V[\x90a\x02x\x91a\x01\xE2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\xA3\x90a\x02{V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xBDW`@RV[a\x02\x85V[\x90a\x02\xE2a\x02\xDB\x92a\x02\xD2a\x01bV[\x93\x84\x80\x92a\x02nV[\x03\x83a\x02\x99V[V[\x90_\x10a\x02\xF7Wa\x02\xF4\x90a\x02\xC2V[\x90V[a\x01\x7FV[a\x03\x08`\x0C_\x90a\x02\xE4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x03Ba\x03K` \x93a\x03P\x93a\x039\x81a\x03\x0BV[\x93\x84\x80\x93a\x03\x0FV[\x95\x86\x91\x01a\x03\x18V[a\x02{V[\x01\x90V[a\x03i\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03#V[\x90V[4a\x03\x9CWa\x03|6`\x04a\x01pV[a\x03\x98a\x03\x87a\x02\xFCV[a\x03\x8Fa\x01bV[\x91\x82\x91\x82a\x03TV[\x03\x90\xF3[a\x01hV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xC8\x90a\x03\xB4V[\x90V[a\x03\xD4\x90a\x03\xBFV[\x90RV[\x90a\x03\xE5\x81` \x93a\x03\xCBV[\x01\x90V[` \x01\x90V[\x90a\x04\x0Ca\x04\x06a\x03\xFF\x84a\x03\xA1V[\x80\x93a\x03\xA5V[\x92a\x03\xAEV[\x90_[\x81\x81\x10a\x04\x1CWPPP\x90V[\x90\x91\x92a\x045a\x04/`\x01\x92\x86Qa\x03\xD8V[\x94a\x03\xE9V[\x91\x01\x91\x90\x91a\x04\x0FV[a\x04T\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xEFV[\x90V[4a\x04\x87Wa\x04g6`\x04a\x01pV[a\x04\x83a\x04ra\x0E\xCBV[a\x04za\x01bV[\x91\x82\x91\x82a\x04?V[\x03\x90\xF3[a\x01hV[_\x80\xFD[a\x04\x99\x81a\x03\xBFV[\x03a\x04\xA0WV[_\x80\xFD[\x90P5\x90a\x04\xB1\x82a\x04\x90V[V[\x90` \x82\x82\x03\x12a\x04\xCCWa\x04\xC9\x91_\x01a\x04\xA4V[\x90V[a\x01lV[_\x01\x90V[4a\x05\x04Wa\x04\xEEa\x04\xE96`\x04a\x04\xB3V[a\x11^V[a\x04\xF6a\x01bV[\x80a\x05\0\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05(\x90`\x08a\x05-\x93\x02a\x05\tV[a\x05\rV[\x90V[\x90a\x05;\x91Ta\x05\x18V[\x90V[a\x05J`\n_\x90a\x050V[\x90V[a\x05V\x90a\x03\xBFV[\x90RV[\x91\x90a\x05m\x90_` \x85\x01\x94\x01\x90a\x05MV[V[4a\x05\x9FWa\x05\x7F6`\x04a\x01pV[a\x05\x9Ba\x05\x8Aa\x05>V[a\x05\x92a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\xEAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\xE5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05\xE0WV[a\x05\xACV[a\x05\xA8V[a\x05\xA4V[\x90` \x82\x82\x03\x12a\x06 W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\x1BWa\x06\x17\x92\x01a\x05\xB0V[\x90\x91V[a\x04\x8CV[a\x01lV[4a\x06TWa\x06>a\x0686`\x04a\x05\xEFV[\x90a\x14(V[a\x06Fa\x01bV[\x80a\x06P\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[\x90V[a\x06l\x90`\x08a\x06q\x93\x02a\x05\tV[a\x06YV[\x90V[\x90a\x06\x7F\x91Ta\x06\\V[\x90V[a\x06\x8E`\x06_\x90a\x06tV[\x90V[\x90V[a\x06\x9D\x90a\x06\x91V[\x90RV[\x91\x90a\x06\xB4\x90_` \x85\x01\x94\x01\x90a\x06\x94V[V[4a\x06\xE6Wa\x06\xC66`\x04a\x01pV[a\x06\xE2a\x06\xD1a\x06\x82V[a\x06\xD9a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[a\x06\xF4\x81a\x06\x91V[\x03a\x06\xFBWV[_\x80\xFD[\x90P5\x90a\x07\x0C\x82a\x06\xEBV[V[\x15\x15\x90V[a\x07\x1C\x81a\x07\x0EV[\x03a\x07#WV[_\x80\xFD[\x90P5\x90a\x074\x82a\x07\x13V[V[_\x80\xFD[\x90a\x07Ma\x07Fa\x01bV[\x92\x83a\x02\x99V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07mWa\x07i` \x91a\x02{V[\x01\x90V[a\x02\x85V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x07\x92a\x07\x8D\x82a\x07OV[a\x07:V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07\xAEWa\x07\xAC\x92a\x07rV[V[a\x076V[\x90\x80`\x1F\x83\x01\x12\x15a\x07\xD1W\x81` a\x07\xCE\x935\x91\x01a\x07}V[\x90V[a\x05\xA4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xEEW` \x80\x91\x02\x01\x90V[a\x02\x85V[\x90\x92\x91\x92a\x08\x08a\x08\x03\x82a\x07\xD6V[a\x07:V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x08EW\x91[\x83\x83\x10a\x08,WPPPPV[` \x80\x91a\x08:\x84\x86a\x04\xA4V[\x81R\x01\x92\x01\x91a\x08\x1FV[a\x05\xACV[\x90\x80`\x1F\x83\x01\x12\x15a\x08hW\x81` a\x08e\x935\x91\x01a\x07\xF3V[\x90V[a\x05\xA4V[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\t\x8CWa\x08\x87\x83_\x83\x01a\x04\xA4V[\x92a\x08\x95\x81` \x84\x01a\x06\xFFV[\x92a\x08\xA3\x82`@\x85\x01a\x06\xFFV[\x92a\x08\xB1\x83``\x83\x01a\x04\xA4V[\x92a\x08\xBF\x81`\x80\x84\x01a\x04\xA4V[\x92a\x08\xCD\x82`\xA0\x85\x01a\x07'V[\x92a\x08\xDB\x83`\xC0\x83\x01a\x06\xFFV[\x92a\x08\xE9\x81`\xE0\x84\x01a\x06\xFFV[\x92a\x08\xF8\x82a\x01\0\x85\x01a\x04\xA4V[\x92a\t\x07\x83a\x01 \x83\x01a\x06\xFFV[\x92a\t\x16\x81a\x01@\x84\x01a\x04\xA4V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\x87W\x82a\t8\x91\x85\x01a\x07\xB3V[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\x82W\x83a\tZ\x91\x83\x01a\x07\xB3V[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t}Wa\tz\x92\x01a\x08JV[\x90V[a\x04\x8CV[a\x04\x8CV[a\x04\x8CV[a\x01lV[4a\t\xD2Wa\t\xBCa\t\xA46`\x04a\x08mV[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1F\x9FV[a\t\xC4a\x01bV[\x80a\t\xCE\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[4a\n\x06Wa\t\xF0a\t\xEA6`\x04a\x05\xEFV[\x90a 0V[a\t\xF8a\x01bV[\x80a\n\x02\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[a\n\x17`\x0B_\x90a\x02\xE4V[\x90V[4a\nJWa\n*6`\x04a\x01pV[a\nFa\n5a\n\x0BV[a\n=a\x01bV[\x91\x82\x91\x82a\x03TV[\x03\x90\xF3[a\x01hV[a\n[`\x01_\x90a\x050V[\x90V[4a\n\x8EWa\nn6`\x04a\x01pV[a\n\x8Aa\nya\nOV[a\n\x81a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\n\x9F`\x04_\x90a\x06tV[\x90V[4a\n\xD2Wa\n\xB26`\x04a\x01pV[a\n\xCEa\n\xBDa\n\x93V[a\n\xC5a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[a\n\xE1_\x80a\x050V[\x90V[4a\x0B\x14Wa\n\xF46`\x04a\x01pV[a\x0B\x10a\n\xFFa\n\xD7V[a\x0B\x07a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\x0B%`\x08_\x90a\x06tV[\x90V[4a\x0BXWa\x0B86`\x04a\x01pV[a\x0BTa\x0BCa\x0B\x19V[a\x0BKa\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[a\x0Bi`\x02_\x90a\x050V[\x90V[4a\x0B\x9CWa\x0B|6`\x04a\x01pV[a\x0B\x98a\x0B\x87a\x0B]V[a\x0B\x8Fa\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\x0B\xAD`\x03_\x90a\x050V[\x90V[4a\x0B\xE0Wa\x0B\xC06`\x04a\x01pV[a\x0B\xDCa\x0B\xCBa\x0B\xA1V[a\x0B\xD3a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\x0B\xF1`\x07_\x90a\x06tV[\x90V[4a\x0C$Wa\x0C\x046`\x04a\x01pV[a\x0C a\x0C\x0Fa\x0B\xE5V[a\x0C\x17a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[`\xFF\x16\x90V[a\x0C?\x90`\x08a\x0CD\x93\x02a\x05\tV[a\x0C)V[\x90V[\x90a\x0CR\x91Ta\x0C/V[\x90V[a\x0Cb`\x03`\x14\x90a\x0CGV[\x90V[a\x0Cn\x90a\x07\x0EV[\x90RV[\x91\x90a\x0C\x85\x90_` \x85\x01\x94\x01\x90a\x0CeV[V[4a\x0C\xB7Wa\x0C\x976`\x04a\x01pV[a\x0C\xB3a\x0C\xA2a\x0CUV[a\x0C\xAAa\x01bV[\x91\x82\x91\x82a\x0CrV[\x03\x90\xF3[a\x01hV[4a\x0C\xEAWa\x0C\xD4a\x0C\xCF6`\x04a\x04\xB3V[a!\x1CV[a\x0C\xDCa\x01bV[\x80a\x0C\xE6\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\r\x08Wa\r\x05\x91_\x01a\x06\xFFV[\x90V[a\x01lV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\r7\x81a\r!V[\x82\x10\x15a\rQWa\rI`\x01\x91a\r%V[\x91\x02\x01\x90_\x90V[a\r\rV[`\ta\ra\x81a\r!V[\x82\x10\x15a\r~Wa\r{\x91a\ru\x91a\r.V[\x90a\x050V[\x90V[_\x80\xFD[4a\r\xB2Wa\r\xAEa\r\x9Da\r\x986`\x04a\x0C\xEFV[a\rVV[a\r\xA5a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\r\xC3`\x05_\x90a\x06tV[\x90V[4a\r\xF6Wa\r\xD66`\x04a\x01pV[a\r\xF2a\r\xE1a\r\xB7V[a\r\xE9a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[_\x80\xFD[``\x90V[` \x91\x81R\x01\x90V[_\x1C\x90V[a\x0E\x1Ea\x0E#\x91a\x0E\rV[a\x05\rV[\x90V[a\x0E0\x90Ta\x0E\x12V[\x90V[`\x01\x01\x90V[\x90a\x0EVa\x0EPa\x0EI\x84a\r!V[\x80\x93a\x0E\x04V[\x92a\r%V[\x90_[\x81\x81\x10a\x0EfWPPP\x90V[\x90\x91\x92a\x0E\x86a\x0E\x80`\x01\x92a\x0E{\x87a\x0E&V[a\x03\xD8V[\x94a\x0E3V[\x91\x01\x91\x90\x91a\x0EYV[\x90a\x0E\x9A\x91a\x0E9V[\x90V[\x90a\x0E\xBDa\x0E\xB6\x92a\x0E\xADa\x01bV[\x93\x84\x80\x92a\x0E\x90V[\x03\x83a\x02\x99V[V[a\x0E\xC8\x90a\x0E\x9DV[\x90V[a\x0E\xD3a\r\xFFV[Pa\x0E\xDE`\ta\x0E\xBFV[\x90V[a\x0E\xEB\x90Ta\x0E\x12V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\"`\x17` \x92a\x03\x0FV[a\x0F+\x81a\x0E\xEEV[\x01\x90V[a\x0FD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\x15V[\x90V[\x15a\x0FNWV[a\x0FVa\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Fl`\x04\x82\x01a\x0F/V[\x03\x90\xFD[a\x0F\x9D\x90a\x0F\x983a\x0F\x92a\x0F\x8Ca\x0F\x87_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a\x10\xECV[V[\x90V[\x90V[a\x0F\xB9a\x0F\xB4a\x0F\xBE\x92a\x0F\x9FV[a\x0F\xA2V[a\x03\xB4V[\x90V[a\x0F\xCA\x90a\x0F\xA5V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x10'`'`@\x92a\x03\x0FV[a\x100\x81a\x0F\xCDV[\x01\x90V[a\x10I\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x10\x1AV[\x90V[\x15a\x10SWV[a\x10[a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10q`\x04\x82\x01a\x104V[\x03\x90\xFD[_\x1B\x90V[\x90a\x10\x8B`\x01\x80`\xA0\x1B\x03\x91a\x10uV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xA9a\x10\xA4a\x10\xAE\x92a\x03\xB4V[a\x0F\xA2V[a\x03\xB4V[\x90V[a\x10\xBA\x90a\x10\x95V[\x90V[a\x10\xC6\x90a\x10\xB1V[\x90V[\x90V[\x90a\x10\xE1a\x10\xDCa\x10\xE8\x92a\x10\xBDV[a\x10\xC9V[\x82Ta\x10zV[\x90UV[a\x11\x11\x81a\x11\na\x11\x04a\x10\xFF_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x10LV[a\x11\x1C\x81`\na\x10\xCCV[a\x11F\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x10\xBDV[\x90a\x11Oa\x01bV[\x80a\x11Y\x81a\x04\xD1V[\x03\x90\xA2V[a\x11g\x90a\x0FpV[V[\x90a\x11\x97\x91a\x11\x923a\x11\x8Ca\x11\x86a\x11\x81_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a\x13\xDFV[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x11\xC6\x91\x02\x91a\x11\xC0_\x19\x84a\x11\xA7V[\x92a\x11\xA7V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xE4a\x11\xDFa\x11\xE9\x92a\x06\x91V[a\x0F\xA2V[a\x06\x91V[\x90V[\x90V[\x91\x90a\x12\x05a\x12\0a\x12\r\x93a\x11\xD0V[a\x11\xECV[\x90\x83Ta\x11\xABV[\x90UV[_\x90V[a\x12'\x91a\x12!a\x12\x11V[\x91a\x11\xEFV[V[[\x81\x81\x10a\x125WPPV[\x80a\x12B_`\x01\x93a\x12\x15V[\x01a\x12*V[\x91\x90`\x1F\x81\x11a\x12XW[PPPV[a\x12da\x12\x89\x93a\x01\xD9V[\x90` a\x12p\x84a\x11\x9DV[\x83\x01\x93\x10a\x12\x91W[a\x12\x82\x90a\x11\x9DV[\x01\x90a\x12)V[_\x80\x80a\x12SV[\x91Pa\x12\x82\x81\x92\x90Pa\x12yV[\x90a\x12\xAF\x90_\x19\x90`\x08\x02a\x05\tV[\x19\x16\x90V[\x81a\x12\xBE\x91a\x12\x9FV[\x90`\x02\x02\x17\x90V[\x91a\x12\xD1\x90\x82a\x11\x99V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x13\x90Wa\x12\xF5\x82a\x12\xEF\x85Ta\x01\xA6V[\x85a\x12HV[_\x90`\x1F\x83\x11`\x01\x14a\x13(W\x91\x80\x91a\x13\x17\x93_\x92a\x13\x1CW[PPa\x12\xB4V[\x90U[V[\x90\x91P\x015_\x80a\x13\x10V[`\x1F\x19\x83\x16\x91a\x137\x85a\x01\xD9V[\x92_[\x81\x81\x10a\x13xWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x13^W[PPP\x02\x01\x90Ua\x13\x1AV[a\x13n\x91\x015`\x1F\x84\x16\x90a\x12\x9FV[\x90U_\x80\x80a\x13RV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x13:V[a\x02\x85V[\x90a\x13\xA0\x92\x91a\x12\xC6V[V[\x91\x90a\x13\xBC\x81a\x13\xB5\x81a\x13\xC1\x95a\x03\x0FV[\x80\x95a\x07rV[a\x02{V[\x01\x90V[\x90\x91a\x13\xDC\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x13\xA2V[\x90V[a\x13\xEC\x81\x83\x90`\x0Ca\x13\x95V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\x14#a\x14\x1Aa\x01bV[\x92\x83\x92\x83a\x13\xC5V[\x03\x90\xA1V[\x90a\x142\x91a\x11iV[V[`@\x1C\x90V[a\x14Fa\x14K\x91a\x144V[a\x0C)V[\x90V[a\x14X\x90Ta\x14:V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x14ta\x14y\x91a\x0E\rV[a\x14[V[\x90V[a\x14\x86\x90Ta\x14hV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x14\xAAa\x14\xA5a\x14\xAF\x92a\x0F\x9FV[a\x0F\xA2V[a\x14\x89V[\x90V[\x90V[a\x14\xC9a\x14\xC4a\x14\xCE\x92a\x14\xB2V[a\x0F\xA2V[a\x14\x89V[\x90V[a\x14\xDA\x90a\x10\xB1V[\x90V[a\x14\xF1a\x14\xECa\x14\xF6\x92a\x0F\x9FV[a\x0F\xA2V[a\x06\x91V[\x90V[\x90a\x15\x0Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x10uV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15*a\x15%a\x15/\x92a\x14\x89V[a\x0F\xA2V[a\x14\x89V[\x90V[\x90V[\x90a\x15Ja\x15Ea\x15Q\x92a\x15\x16V[a\x152V[\x82Ta\x14\xF9V[\x90UV[`@\x1B\x90V[\x90a\x15oh\xFF\0\0\0\0\0\0\0\0\x91a\x15UV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\x82\x90a\x07\x0EV[\x90V[\x90V[\x90a\x15\x9Da\x15\x98a\x15\xA4\x92a\x15yV[a\x15\x85V[\x82Ta\x15[V[\x90UV[a\x15\xB1\x90a\x14\xB5V[\x90RV[\x91\x90a\x15\xC8\x90_` \x85\x01\x94\x01\x90a\x15\xA8V[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x15\xDFa!'V[`\x80Ra\x15\xF8a\x15\xF2_`\x80Q\x01a\x14NV[\x15a\x07\x0EV[`\xA0Ra\x16\x08_`\x80Q\x01a\x14|V[\x80a\x16\x1Ba\x16\x15_a\x14\x96V[\x91a\x14\x89V[\x14\x80a\x17DW[\x90a\x166a\x160`\x01a\x14\xB5V[\x91a\x14\x89V[\x14\x80a\x17\x1CW[a\x16H\x90\x91\x15a\x07\x0EV[\x90\x81a\x17\x0BW[Pa\x16\xE8Wa\x16|\x9Da\x16oa\x16e`\x01a\x14\xB5V[_`\x80Q\x01a\x155V[`\xA0Qa\x16\xD4W[a\x1E\x0BV[`\xA0Qa\x16\x86W[V[a\x16\x94_\x80`\x80Q\x01a\x15\x88V[`\x01a\x16\xCC\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x16\xC3a\x01bV[\x91\x82\x91\x82a\x15\xB5V[\x03\x90\xA1a\x16\x84V[a\x16\xE3`\x01_`\x80Q\x01a\x15\x88V[a\x16wV[a\x16\xF0a\x01bV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x17\x07`\x04\x82\x01a\x04\xD1V[\x03\x90\xFD[a\x17\x16\x91P\x15a\x07\x0EV[_a\x16OV[Pa\x16Ha\x17)0a\x14\xD1V[;a\x17<a\x176_a\x14\xDDV[\x91a\x06\x91V[\x14\x90Pa\x16=V[P`\xA0Qa\x16\"V[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x17\x81`\x1C` \x92a\x03\x0FV[a\x17\x8A\x81a\x17MV[\x01\x90V[a\x17\xA3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17tV[\x90V[\x15a\x17\xADWV[a\x17\xB5a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xCB`\x04\x82\x01a\x17\x8EV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x18\x03`\x17` \x92a\x03\x0FV[a\x18\x0C\x81a\x17\xCFV[\x01\x90V[a\x18%\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\xF6V[\x90V[\x15a\x18/WV[a\x187a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18M`\x04\x82\x01a\x18\x10V[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x18\xAB`\"`@\x92a\x03\x0FV[a\x18\xB4\x81a\x18QV[\x01\x90V[a\x18\xCD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\x9EV[\x90V[\x15a\x18\xD7WV[a\x18\xDFa\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\xF5`\x04\x82\x01a\x18\xB8V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x19S`&`@\x92a\x03\x0FV[a\x19\\\x81a\x18\xF9V[\x01\x90V[a\x19u\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19FV[\x90V[\x15a\x19\x7FWV[a\x19\x87a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\x9D`\x04\x82\x01a\x19`V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x19\xFB`%`@\x92a\x03\x0FV[a\x1A\x04\x81a\x19\xA1V[\x01\x90V[a\x1A\x1D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19\xEEV[\x90V[\x15a\x1A'WV[a\x1A/a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1AE`\x04\x82\x01a\x1A\x08V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x1A\xA3`*`@\x92a\x03\x0FV[a\x1A\xAC\x81a\x1AIV[\x01\x90V[a\x1A\xC5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1A\x96V[\x90V[\x15a\x1A\xCFWV[a\x1A\xD7a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1A\xED`\x04\x82\x01a\x1A\xB0V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x1BK`#`@\x92a\x03\x0FV[a\x1BT\x81a\x1A\xF1V[\x01\x90V[a\x1Bm\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1B>V[\x90V[\x15a\x1BwWV[a\x1B\x7Fa\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1B\x95`\x04\x82\x01a\x1BXV[\x03\x90\xFD[\x90a\x1B\xA5_\x19\x91a\x10uV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1B\xC4a\x1B\xBFa\x1B\xCB\x92a\x11\xD0V[a\x11\xECV[\x82Ta\x1B\x99V[\x90UV[`\xA0\x1B\x90V[\x90a\x1B\xE4`\xFF`\xA0\x1B\x91a\x1B\xCFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1C\x03a\x1B\xFEa\x1C\n\x92a\x15yV[a\x15\x85V[\x82Ta\x1B\xD5V[\x90UV[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1C%WPPV[\x80a\x1C2_`\x01\x93a\x12\x15V[\x01a\x1C\x1AV[\x90\x91\x82\x81\x10a\x1CGW[PPPV[a\x1Cea\x1C_a\x1CYa\x1Cp\x95a\x1C\x0EV[\x92a\x1C\x0EV[\x92a\r%V[\x91\x82\x01\x91\x01\x90a\x1C\x19V[_\x80\x80a\x1CBV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1C\xA1W\x81a\x1C\x96a\x1C\x9F\x93a\r!V[\x90\x82\x81Ua\x1C8V[V[a\x02\x85V[a\x1C\xB0\x90Qa\x03\xBFV[\x90V[a\x1C\xBC\x82a\x03\xA1V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1D\x1FWa\x1C\xEAa\x1C\xE4`\x01\x92a\x1C\xDF\x86\x86a\x1CxV[a\x03\xAEV[\x92a\r%V[\x92\x04\x91_[\x83\x81\x10a\x1C\xFCWPPPPV[`\x01\x90` a\x1D\x12a\x1D\r\x86a\x1C\xA6V[a\x10\xC9V[\x94\x01\x93\x81\x84\x01U\x01a\x1C\xEFV[a\x02\x85V[\x90a\x1D.\x91a\x1C\xB3V[V[\x90a\x1D:\x81a\x03\x0BV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1D\xFAWa\x1D^\x82a\x1DX\x85Ta\x01\xA6V[\x85a\x12HV[` \x90`\x1F\x83\x11`\x01\x14a\x1D\x92W\x91\x80\x91a\x1D\x81\x93_\x92a\x1D\x86W[PPa\x12\xB4V[\x90U[V[\x90\x91P\x01Q_\x80a\x1DzV[`\x1F\x19\x83\x16\x91a\x1D\xA1\x85a\x01\xD9V[\x92_[\x81\x81\x10a\x1D\xE2WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1D\xC8W[PPP\x02\x01\x90Ua\x1D\x84V[a\x1D\xD8\x91\x01Q`\x1F\x84\x16\x90a\x12\x9FV[\x90U_\x80\x80a\x1D\xBCV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x1D\xA4V[a\x02\x85V[\x90a\x1E\t\x91a\x1D0V[V[\x9B\x99\x95\x97a\x1Fna\x1F\x8A\x98a\x1F\x9D\x9F\x96\x8F\x9Ba\x1F\x98\x9F\x9Ca\x1F\x83\x9Aa\x1F\x91\x9F\x98a\x1Fg\x94a\x1FR\x8F\x9Ca\x1FKa\x1FY\x94a\x1F|\x9Fa\x1Fu\x9Ea\x1F=\x8F\x92a\x1F\x1Ca\x1FD\x94a\x1Ewa\x1F`\x9Ea\x1Epa\x1Eja\x1Ee_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x17\xA6V[a\x1E\x94\x85a\x1E\x8Da\x1E\x87_a\x14\xDDV[\x91a\x06\x91V[\x14\x15a\x18(V[a\x1E\xB1\x87a\x1E\xAAa\x1E\xA4_a\x14\xDDV[\x91a\x06\x91V[\x14\x15a\x18\xD0V[a\x1E\xD6\x89a\x1E\xCFa\x1E\xC9a\x1E\xC4_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x19xV[a\x1E\xFB\x8Ba\x1E\xF4a\x1E\xEEa\x1E\xE9_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x1A V[a\x1F\x15a\x1F\x0Fa\x1F\n_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x1A\xC8V[a\x1F6a\x1F0a\x1F+_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x1BpV[`\x04a\x1B\xAFV[`\x05a\x1B\xAFV[`\x01a\x10\xCCV[`\x02a\x10\xCCV[`\x03a\x1B\xEEV[`\x06a\x1B\xAFV[`\x07a\x1B\xAFV[`\x03a\x10\xCCV[`\x08a\x1B\xAFV[`\ta\x1D$V[`\na\x10\xCCV[`\x0Ba\x1D\xFFV[`\x0Ca\x1D\xFFV[a!KV[V[\x90a\x1F\xB5\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x15\xCAV[V[\x90a\x1F\xE5\x91a\x1F\xE03a\x1F\xDAa\x1F\xD4a\x1F\xCF_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a\x1F\xE7V[V[a\x1F\xF4\x81\x83\x90`\x0Ba\x13\x95V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a +a \"a\x01bV[\x92\x83\x92\x83a\x13\xC5V[\x03\x90\xA1V[\x90a :\x91a\x1F\xB7V[V[a i\x90a d3a ^a Xa S_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a \xECV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a \x9E` \x80\x92a\x03\x0FV[a \xA7\x81a kV[\x01\x90V[a \xC0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra \x92V[\x90V[\x15a \xCAWV[a \xD2a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a \xE8`\x04\x82\x01a \xABV[\x03\x90\xFD[a!\x1A\x90a!\x15\x81a!\x0Ea!\x08a!\x03_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a \xC3V[a!KV[V[a!%\x90a <V[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a!T_a\x0E\xE1V[a!^\x82_a\x10\xCCV[\x90a!\x92a!\x8C\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x10\xBDV[\x91a\x10\xBDV[\x91a!\x9Ba\x01bV[\x80a!\xA5\x81a\x04\xD1V[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 \xB7.\xE0\x8A\xF8\xB3\xA7`\\,\x88\x19[\x13\xF2|\xAC\x8D\xF0\xD7\xC8\x92|i\x980\x15\x81\x94\x11\xF7\xBEdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60c06040526004361015610013575b610dfb565b61001d5f3561015c565b80630743bf6e146101575780631bc0afd6146101525780632a84b0f01461014d57806341fc712d146101485780634b8be3f71461014357806357d1ba251461013e5780635a2d9c181461013957806362c73caa1461013457806366a1d1081461012f5780636edd6c091461012a57806385e1f4d0146101255780638da5cb5b14610120578063a3c6e1e71461011b578063aa6a43d814610116578063bf6db6f814610111578063d1f4737c1461010c578063e79388e614610107578063f2fde38b14610102578063f881afaf146100fd5763f8a144be0361000e57610dc6565b610d82565b610cbc565b610c87565b610bf4565b610bb0565b610b6c565b610b28565b610ae4565b610aa2565b610a5e565b610a1a565b6109d7565b610991565b6106b6565b610625565b61056f565b6104d6565b610457565b61036c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261017a57565b61016c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101c6575b60208310146101c157565b610192565b91607f16916101b6565b60209181520190565b5f5260205f2090565b905f92918054906101fc6101f5836101a6565b80946101d0565b916001811690815f146102535750600114610217575b505050565b61022491929394506101d9565b915f925b81841061023b57505001905f8080610212565b60018160209295939554848601520191019290610228565b92949550505060ff19168252151560200201905f8080610212565b90610278916101e2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102a39061027b565b810190811067ffffffffffffffff8211176102bd57604052565b610285565b906102e26102db926102d2610162565b9384809261026e565b0383610299565b565b905f106102f7576102f4906102c2565b90565b61017f565b610308600c5f906102e4565b90565b5190565b60209181520190565b90825f9392825e0152565b61034261034b602093610350936103398161030b565b9384809361030f565b95869101610318565b61027b565b0190565b6103699160208201915f818403910152610323565b90565b3461039c5761037c366004610170565b6103986103876102fc565b61038f610162565b91829182610354565b0390f35b610168565b5190565b60209181520190565b60200190565b60018060a01b031690565b6103c8906103b4565b90565b6103d4906103bf565b9052565b906103e5816020936103cb565b0190565b60200190565b9061040c6104066103ff846103a1565b80936103a5565b926103ae565b905f5b81811061041c5750505090565b90919261043561042f60019286516103d8565b946103e9565b910191909161040f565b6104549160208201915f8184039101526103ef565b90565b3461048757610467366004610170565b610483610472610ecb565b61047a610162565b9182918261043f565b0390f35b610168565b5f80fd5b610499816103bf565b036104a057565b5f80fd5b905035906104b182610490565b565b906020828203126104cc576104c9915f016104a4565b90565b61016c565b5f0190565b34610504576104ee6104e93660046104b3565b61115e565b6104f6610162565b80610500816104d1565b0390f35b610168565b1c90565b60018060a01b031690565b61052890600861052d9302610509565b61050d565b90565b9061053b9154610518565b90565b61054a600a5f90610530565b90565b610556906103bf565b9052565b919061056d905f6020850194019061054d565b565b3461059f5761057f366004610170565b61059b61058a61053e565b610592610162565b9182918261055a565b0390f35b610168565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156105ea5781359167ffffffffffffffff83116105e55760200192600183028401116105e057565b6105ac565b6105a8565b6105a4565b90602082820312610620575f82013567ffffffffffffffff811161061b5761061792016105b0565b9091565b61048c565b61016c565b346106545761063e6106383660046105ef565b90611428565b610646610162565b80610650816104d1565b0390f35b610168565b90565b61066c9060086106719302610509565b610659565b90565b9061067f915461065c565b90565b61068e60065f90610674565b90565b90565b61069d90610691565b9052565b91906106b4905f60208501940190610694565b565b346106e6576106c6366004610170565b6106e26106d1610682565b6106d9610162565b918291826106a1565b0390f35b610168565b6106f481610691565b036106fb57565b5f80fd5b9050359061070c826106eb565b565b151590565b61071c8161070e565b0361072357565b5f80fd5b9050359061073482610713565b565b5f80fd5b9061074d610746610162565b9283610299565b565b67ffffffffffffffff811161076d5761076960209161027b565b0190565b610285565b90825f939282370152565b9092919261079261078d8261074f565b61073a565b938185526020850190828401116107ae576107ac92610772565b565b610736565b9080601f830112156107d1578160206107ce9335910161077d565b90565b6105a4565b67ffffffffffffffff81116107ee5760208091020190565b610285565b90929192610808610803826107d6565b61073a565b938185526020808601920283019281841161084557915b83831061082c5750505050565b6020809161083a84866104a4565b81520192019161081f565b6105ac565b9080601f8301121561086857816020610865933591016107f3565b90565b6105a4565b9190916101c08184031261098c57610887835f83016104a4565b9261089581602084016106ff565b926108a382604085016106ff565b926108b183606083016104a4565b926108bf81608084016104a4565b926108cd8260a08501610727565b926108db8360c083016106ff565b926108e98160e084016106ff565b926108f88261010085016104a4565b926109078361012083016106ff565b926109168161014084016104a4565b9261016083013567ffffffffffffffff811161098757826109389185016107b3565b9261018081013567ffffffffffffffff8111610982578361095a9183016107b3565b926101a082013567ffffffffffffffff811161097d5761097a920161084a565b90565b61048c565b61048c565b61048c565b61016c565b346109d2576109bc6109a436600461086d565b9c9b909b9a919a999299989398979497969596611f9f565b6109c4610162565b806109ce816104d1565b0390f35b610168565b34610a06576109f06109ea3660046105ef565b90612030565b6109f8610162565b80610a02816104d1565b0390f35b610168565b610a17600b5f906102e4565b90565b34610a4a57610a2a366004610170565b610a46610a35610a0b565b610a3d610162565b91829182610354565b0390f35b610168565b610a5b60015f90610530565b90565b34610a8e57610a6e366004610170565b610a8a610a79610a4f565b610a81610162565b9182918261055a565b0390f35b610168565b610a9f60045f90610674565b90565b34610ad257610ab2366004610170565b610ace610abd610a93565b610ac5610162565b918291826106a1565b0390f35b610168565b610ae15f80610530565b90565b34610b1457610af4366004610170565b610b10610aff610ad7565b610b07610162565b9182918261055a565b0390f35b610168565b610b2560085f90610674565b90565b34610b5857610b38366004610170565b610b54610b43610b19565b610b4b610162565b918291826106a1565b0390f35b610168565b610b6960025f90610530565b90565b34610b9c57610b7c366004610170565b610b98610b87610b5d565b610b8f610162565b9182918261055a565b0390f35b610168565b610bad60035f90610530565b90565b34610be057610bc0366004610170565b610bdc610bcb610ba1565b610bd3610162565b9182918261055a565b0390f35b610168565b610bf160075f90610674565b90565b34610c2457610c04366004610170565b610c20610c0f610be5565b610c17610162565b918291826106a1565b0390f35b610168565b60ff1690565b610c3f906008610c449302610509565b610c29565b90565b90610c529154610c2f565b90565b610c626003601490610c47565b90565b610c6e9061070e565b9052565b9190610c85905f60208501940190610c65565b565b34610cb757610c97366004610170565b610cb3610ca2610c55565b610caa610162565b91829182610c72565b0390f35b610168565b34610cea57610cd4610ccf3660046104b3565b61211c565b610cdc610162565b80610ce6816104d1565b0390f35b610168565b90602082820312610d0857610d05915f016106ff565b90565b61016c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610d3781610d21565b821015610d5157610d49600191610d25565b910201905f90565b610d0d565b6009610d6181610d21565b821015610d7e57610d7b91610d7591610d2e565b90610530565b90565b5f80fd5b34610db257610dae610d9d610d98366004610cef565b610d56565b610da5610162565b9182918261055a565b0390f35b610168565b610dc360055f90610674565b90565b34610df657610dd6366004610170565b610df2610de1610db7565b610de9610162565b918291826106a1565b0390f35b610168565b5f80fd5b606090565b60209181520190565b5f1c90565b610e1e610e2391610e0d565b61050d565b90565b610e309054610e12565b90565b60010190565b90610e56610e50610e4984610d21565b8093610e04565b92610d25565b905f5b818110610e665750505090565b909192610e86610e80600192610e7b87610e26565b6103d8565b94610e33565b9101919091610e59565b90610e9a91610e39565b90565b90610ebd610eb692610ead610162565b93848092610e90565b0383610299565b565b610ec890610e9d565b90565b610ed3610dff565b50610ede6009610ebf565b90565b610eeb9054610e12565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610f22601760209261030f565b610f2b81610eee565b0190565b610f449060208101905f818303910152610f15565b90565b15610f4e57565b610f56610162565b62461bcd60e51b815280610f6c60048201610f2f565b0390fd5b610f9d90610f9833610f92610f8c610f875f610ee1565b6103bf565b916103bf565b14610f47565b6110ec565b565b90565b90565b610fb9610fb4610fbe92610f9f565b610fa2565b6103b4565b90565b610fca90610fa5565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b611027602760409261030f565b61103081610fcd565b0190565b6110499060208101905f81830391015261101a565b90565b1561105357565b61105b610162565b62461bcd60e51b81528061107160048201611034565b0390fd5b5f1b90565b9061108b60018060a01b0391611075565b9181191691161790565b6110a96110a46110ae926103b4565b610fa2565b6103b4565b90565b6110ba90611095565b90565b6110c6906110b1565b90565b90565b906110e16110dc6110e8926110bd565b6110c9565b825461107a565b9055565b6111118161110a6111046110ff5f610fc1565b6103bf565b916103bf565b141561104c565b61111c81600a6110cc565b6111467f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9916110bd565b9061114f610162565b80611159816104d1565b0390a2565b61116790610f70565b565b90611197916111923361118c6111866111815f610ee1565b6103bf565b916103bf565b14610f47565b6113df565b565b5090565b601f602091010490565b1b90565b919060086111c69102916111c05f19846111a7565b926111a7565b9181191691161790565b6111e46111df6111e992610691565b610fa2565b610691565b90565b90565b919061120561120061120d936111d0565b6111ec565b9083546111ab565b9055565b5f90565b61122791611221611211565b916111ef565b565b5b818110611235575050565b806112425f600193611215565b0161122a565b9190601f8111611258575b505050565b611264611289936101d9565b9060206112708461119d565b83019310611291575b6112829061119d565b0190611229565b5f8080611253565b915061128281929050611279565b906112af905f1990600802610509565b191690565b816112be9161129f565b906002021790565b916112d19082611199565b9067ffffffffffffffff8211611390576112f5826112ef85546101a6565b85611248565b5f90601f831160011461132857918091611317935f9261131c575b50506112b4565b90555b565b90915001355f80611310565b601f19831691611337856101d9565b925f5b8181106113785750916002939185600196941061135e575b5050500201905561131a565b61136e910135601f84169061129f565b90555f8080611352565b9193602060018192878701358155019501920161133a565b610285565b906113a092916112c6565b565b91906113bc816113b5816113c19561030f565b8095610772565b61027b565b0190565b90916113dc9260208301925f8185039101526113a2565b90565b6113ec818390600c611395565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a79161142361141a610162565b928392836113c5565b0390a1565b9061143291611169565b565b60401c90565b61144661144b91611434565b610c29565b90565b611458905461143a565b90565b67ffffffffffffffff1690565b61147461147991610e0d565b61145b565b90565b6114869054611468565b90565b67ffffffffffffffff1690565b6114aa6114a56114af92610f9f565b610fa2565b611489565b90565b90565b6114c96114c46114ce926114b2565b610fa2565b611489565b90565b6114da906110b1565b90565b6114f16114ec6114f692610f9f565b610fa2565b610691565b90565b9061150c67ffffffffffffffff91611075565b9181191691161790565b61152a61152561152f92611489565b610fa2565b611489565b90565b90565b9061154a61154561155192611516565b611532565b82546114f9565b9055565b60401b90565b9061156f68ff000000000000000091611555565b9181191691161790565b6115829061070e565b90565b90565b9061159d6115986115a492611579565b611585565b825461155b565b9055565b6115b1906114b5565b9052565b91906115c8905f602085019401906115a8565b565b9c9b9a999897969594939291906115df612127565b6080526115f86115f25f6080510161144e565b1561070e565b60a0526116085f6080510161147c565b8061161b6116155f611496565b91611489565b1480611744575b9061163661163060016114b5565b91611489565b148061171c575b61164890911561070e565b908161170b575b506116e85761167c9d61166f61166560016114b5565b5f60805101611535565b60a0516116d4575b611e0b565b60a051611686575b565b6116945f8060805101611588565b60016116cc7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916116c3610162565b918291826115b5565b0390a1611684565b6116e360015f60805101611588565b611677565b6116f0610162565b63f92ee8a960e01b815280611707600482016104d1565b0390fd5b61171691501561070e565b5f61164f565b50611648611729306114d1565b3b61173c6117365f6114dd565b91610691565b14905061163d565b5060a051611622565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b611781601c60209261030f565b61178a8161174d565b0190565b6117a39060208101905f818303910152611774565b90565b156117ad57565b6117b5610162565b62461bcd60e51b8152806117cb6004820161178e565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b611803601760209261030f565b61180c816117cf565b0190565b6118259060208101905f8183039101526117f6565b90565b1561182f57565b611837610162565b62461bcd60e51b81528061184d60048201611810565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6118ab602260409261030f565b6118b481611851565b0190565b6118cd9060208101905f81830391015261189e565b90565b156118d757565b6118df610162565b62461bcd60e51b8152806118f5600482016118b8565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b611953602660409261030f565b61195c816118f9565b0190565b6119759060208101905f818303910152611946565b90565b1561197f57565b611987610162565b62461bcd60e51b81528061199d60048201611960565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6119fb602560409261030f565b611a04816119a1565b0190565b611a1d9060208101905f8183039101526119ee565b90565b15611a2757565b611a2f610162565b62461bcd60e51b815280611a4560048201611a08565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b611aa3602a60409261030f565b611aac81611a49565b0190565b611ac59060208101905f818303910152611a96565b90565b15611acf57565b611ad7610162565b62461bcd60e51b815280611aed60048201611ab0565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b611b4b602360409261030f565b611b5481611af1565b0190565b611b6d9060208101905f818303910152611b3e565b90565b15611b7757565b611b7f610162565b62461bcd60e51b815280611b9560048201611b58565b0390fd5b90611ba55f1991611075565b9181191691161790565b90611bc4611bbf611bcb926111d0565b6111ec565b8254611b99565b9055565b60a01b90565b90611be460ff60a01b91611bcf565b9181191691161790565b90611c03611bfe611c0a92611579565b611585565b8254611bd5565b9055565b600190818003010490565b5b818110611c25575050565b80611c325f600193611215565b01611c1a565b9091828110611c47575b505050565b611c65611c5f611c59611c7095611c0e565b92611c0e565b92610d25565b918201910190611c19565b5f8080611c42565b90680100000000000000008111611ca15781611c96611c9f93610d21565b90828155611c38565b565b610285565b611cb090516103bf565b90565b611cbc826103a1565b9167ffffffffffffffff8311611d1f57611cea611ce4600192611cdf8686611c78565b6103ae565b92610d25565b9204915f5b838110611cfc5750505050565b6001906020611d12611d0d86611ca6565b6110c9565b9401938184015501611cef565b610285565b90611d2e91611cb3565b565b90611d3a8161030b565b9067ffffffffffffffff8211611dfa57611d5e82611d5885546101a6565b85611248565b602090601f8311600114611d9257918091611d81935f92611d86575b50506112b4565b90555b565b90915001515f80611d7a565b601f19831691611da1856101d9565b925f5b818110611de257509160029391856001969410611dc8575b50505002019055611d84565b611dd8910151601f84169061129f565b90555f8080611dbc565b91936020600181928787015181550195019201611da4565b610285565b90611e0991611d30565b565b9b999597611f6e611f8a98611f9d9f968f9b611f989f9c611f839a611f919f98611f6794611f528f9c611f4b611f5994611f7c9f611f759e611f3d8f92611f1c611f4494611e77611f609e611e70611e6a611e655f610fc1565b6103bf565b916103bf565b14156117a6565b611e9485611e8d611e875f6114dd565b91610691565b1415611828565b611eb187611eaa611ea45f6114dd565b91610691565b14156118d0565b611ed689611ecf611ec9611ec45f610fc1565b6103bf565b916103bf565b1415611978565b611efb8b611ef4611eee611ee95f610fc1565b6103bf565b916103bf565b1415611a20565b611f15611f0f611f0a5f610fc1565b6103bf565b916103bf565b1415611ac8565b611f36611f30611f2b5f610fc1565b6103bf565b916103bf565b1415611b70565b6004611baf565b6005611baf565b60016110cc565b60026110cc565b6003611bee565b6006611baf565b6007611baf565b60036110cc565b6008611baf565b6009611d24565b600a6110cc565b600b611dff565b600c611dff565b61214b565b565b90611fb59d9c9b9a9998979695949392916115ca565b565b90611fe591611fe033611fda611fd4611fcf5f610ee1565b6103bf565b916103bf565b14610f47565b611fe7565b565b611ff4818390600b611395565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f29161202b612022610162565b928392836113c5565b0390a1565b9061203a91611fb7565b565b612069906120643361205e6120586120535f610ee1565b6103bf565b916103bf565b14610f47565b6120ec565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b61209e6020809261030f565b6120a78161206b565b0190565b6120c09060208101905f818303910152612092565b90565b156120ca57565b6120d2610162565b62461bcd60e51b8152806120e8600482016120ab565b0390fd5b61211a906121158161210e6121086121035f610fc1565b6103bf565b916103bf565b14156120c3565b61214b565b565b6121259061203c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6121545f610ee1565b61215e825f6110cc565b9061219261218c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936110bd565b916110bd565b9161219b610162565b806121a5816104d1565b0390a356fea2646970667358221220b72ee08af8b3a7605c2c88195b13f27cac8df0d7c8927c69983015819411f7be64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\xFBV[a\0\x1D_5a\x01\\V[\x80c\x07C\xBFn\x14a\x01WW\x80c\x1B\xC0\xAF\xD6\x14a\x01RW\x80c*\x84\xB0\xF0\x14a\x01MW\x80cA\xFCq-\x14a\x01HW\x80cK\x8B\xE3\xF7\x14a\x01CW\x80cW\xD1\xBA%\x14a\x01>W\x80cZ-\x9C\x18\x14a\x019W\x80cb\xC7<\xAA\x14a\x014W\x80cf\xA1\xD1\x08\x14a\x01/W\x80cn\xDDl\t\x14a\x01*W\x80c\x85\xE1\xF4\xD0\x14a\x01%W\x80c\x8D\xA5\xCB[\x14a\x01 W\x80c\xA3\xC6\xE1\xE7\x14a\x01\x1BW\x80c\xAAjC\xD8\x14a\x01\x16W\x80c\xBFm\xB6\xF8\x14a\x01\x11W\x80c\xD1\xF4s|\x14a\x01\x0CW\x80c\xE7\x93\x88\xE6\x14a\x01\x07W\x80c\xF2\xFD\xE3\x8B\x14a\x01\x02W\x80c\xF8\x81\xAF\xAF\x14a\0\xFDWc\xF8\xA1D\xBE\x03a\0\x0EWa\r\xC6V[a\r\x82V[a\x0C\xBCV[a\x0C\x87V[a\x0B\xF4V[a\x0B\xB0V[a\x0BlV[a\x0B(V[a\n\xE4V[a\n\xA2V[a\n^V[a\n\x1AV[a\t\xD7V[a\t\x91V[a\x06\xB6V[a\x06%V[a\x05oV[a\x04\xD6V[a\x04WV[a\x03lV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01zWV[a\x01lV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xC6W[` \x83\x10\x14a\x01\xC1WV[a\x01\x92V[\x91`\x7F\x16\x91a\x01\xB6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xFCa\x01\xF5\x83a\x01\xA6V[\x80\x94a\x01\xD0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02SWP`\x01\x14a\x02\x17W[PPPV[a\x02$\x91\x92\x93\x94Pa\x01\xD9V[\x91_\x92[\x81\x84\x10a\x02;WPP\x01\x90_\x80\x80a\x02\x12V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02(V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x12V[\x90a\x02x\x91a\x01\xE2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\xA3\x90a\x02{V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xBDW`@RV[a\x02\x85V[\x90a\x02\xE2a\x02\xDB\x92a\x02\xD2a\x01bV[\x93\x84\x80\x92a\x02nV[\x03\x83a\x02\x99V[V[\x90_\x10a\x02\xF7Wa\x02\xF4\x90a\x02\xC2V[\x90V[a\x01\x7FV[a\x03\x08`\x0C_\x90a\x02\xE4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x03Ba\x03K` \x93a\x03P\x93a\x039\x81a\x03\x0BV[\x93\x84\x80\x93a\x03\x0FV[\x95\x86\x91\x01a\x03\x18V[a\x02{V[\x01\x90V[a\x03i\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03#V[\x90V[4a\x03\x9CWa\x03|6`\x04a\x01pV[a\x03\x98a\x03\x87a\x02\xFCV[a\x03\x8Fa\x01bV[\x91\x82\x91\x82a\x03TV[\x03\x90\xF3[a\x01hV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xC8\x90a\x03\xB4V[\x90V[a\x03\xD4\x90a\x03\xBFV[\x90RV[\x90a\x03\xE5\x81` \x93a\x03\xCBV[\x01\x90V[` \x01\x90V[\x90a\x04\x0Ca\x04\x06a\x03\xFF\x84a\x03\xA1V[\x80\x93a\x03\xA5V[\x92a\x03\xAEV[\x90_[\x81\x81\x10a\x04\x1CWPPP\x90V[\x90\x91\x92a\x045a\x04/`\x01\x92\x86Qa\x03\xD8V[\x94a\x03\xE9V[\x91\x01\x91\x90\x91a\x04\x0FV[a\x04T\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xEFV[\x90V[4a\x04\x87Wa\x04g6`\x04a\x01pV[a\x04\x83a\x04ra\x0E\xCBV[a\x04za\x01bV[\x91\x82\x91\x82a\x04?V[\x03\x90\xF3[a\x01hV[_\x80\xFD[a\x04\x99\x81a\x03\xBFV[\x03a\x04\xA0WV[_\x80\xFD[\x90P5\x90a\x04\xB1\x82a\x04\x90V[V[\x90` \x82\x82\x03\x12a\x04\xCCWa\x04\xC9\x91_\x01a\x04\xA4V[\x90V[a\x01lV[_\x01\x90V[4a\x05\x04Wa\x04\xEEa\x04\xE96`\x04a\x04\xB3V[a\x11^V[a\x04\xF6a\x01bV[\x80a\x05\0\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05(\x90`\x08a\x05-\x93\x02a\x05\tV[a\x05\rV[\x90V[\x90a\x05;\x91Ta\x05\x18V[\x90V[a\x05J`\n_\x90a\x050V[\x90V[a\x05V\x90a\x03\xBFV[\x90RV[\x91\x90a\x05m\x90_` \x85\x01\x94\x01\x90a\x05MV[V[4a\x05\x9FWa\x05\x7F6`\x04a\x01pV[a\x05\x9Ba\x05\x8Aa\x05>V[a\x05\x92a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\xEAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\xE5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05\xE0WV[a\x05\xACV[a\x05\xA8V[a\x05\xA4V[\x90` \x82\x82\x03\x12a\x06 W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\x1BWa\x06\x17\x92\x01a\x05\xB0V[\x90\x91V[a\x04\x8CV[a\x01lV[4a\x06TWa\x06>a\x0686`\x04a\x05\xEFV[\x90a\x14(V[a\x06Fa\x01bV[\x80a\x06P\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[\x90V[a\x06l\x90`\x08a\x06q\x93\x02a\x05\tV[a\x06YV[\x90V[\x90a\x06\x7F\x91Ta\x06\\V[\x90V[a\x06\x8E`\x06_\x90a\x06tV[\x90V[\x90V[a\x06\x9D\x90a\x06\x91V[\x90RV[\x91\x90a\x06\xB4\x90_` \x85\x01\x94\x01\x90a\x06\x94V[V[4a\x06\xE6Wa\x06\xC66`\x04a\x01pV[a\x06\xE2a\x06\xD1a\x06\x82V[a\x06\xD9a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[a\x06\xF4\x81a\x06\x91V[\x03a\x06\xFBWV[_\x80\xFD[\x90P5\x90a\x07\x0C\x82a\x06\xEBV[V[\x15\x15\x90V[a\x07\x1C\x81a\x07\x0EV[\x03a\x07#WV[_\x80\xFD[\x90P5\x90a\x074\x82a\x07\x13V[V[_\x80\xFD[\x90a\x07Ma\x07Fa\x01bV[\x92\x83a\x02\x99V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07mWa\x07i` \x91a\x02{V[\x01\x90V[a\x02\x85V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x07\x92a\x07\x8D\x82a\x07OV[a\x07:V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07\xAEWa\x07\xAC\x92a\x07rV[V[a\x076V[\x90\x80`\x1F\x83\x01\x12\x15a\x07\xD1W\x81` a\x07\xCE\x935\x91\x01a\x07}V[\x90V[a\x05\xA4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xEEW` \x80\x91\x02\x01\x90V[a\x02\x85V[\x90\x92\x91\x92a\x08\x08a\x08\x03\x82a\x07\xD6V[a\x07:V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x08EW\x91[\x83\x83\x10a\x08,WPPPPV[` \x80\x91a\x08:\x84\x86a\x04\xA4V[\x81R\x01\x92\x01\x91a\x08\x1FV[a\x05\xACV[\x90\x80`\x1F\x83\x01\x12\x15a\x08hW\x81` a\x08e\x935\x91\x01a\x07\xF3V[\x90V[a\x05\xA4V[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\t\x8CWa\x08\x87\x83_\x83\x01a\x04\xA4V[\x92a\x08\x95\x81` \x84\x01a\x06\xFFV[\x92a\x08\xA3\x82`@\x85\x01a\x06\xFFV[\x92a\x08\xB1\x83``\x83\x01a\x04\xA4V[\x92a\x08\xBF\x81`\x80\x84\x01a\x04\xA4V[\x92a\x08\xCD\x82`\xA0\x85\x01a\x07'V[\x92a\x08\xDB\x83`\xC0\x83\x01a\x06\xFFV[\x92a\x08\xE9\x81`\xE0\x84\x01a\x06\xFFV[\x92a\x08\xF8\x82a\x01\0\x85\x01a\x04\xA4V[\x92a\t\x07\x83a\x01 \x83\x01a\x06\xFFV[\x92a\t\x16\x81a\x01@\x84\x01a\x04\xA4V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\x87W\x82a\t8\x91\x85\x01a\x07\xB3V[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\x82W\x83a\tZ\x91\x83\x01a\x07\xB3V[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t}Wa\tz\x92\x01a\x08JV[\x90V[a\x04\x8CV[a\x04\x8CV[a\x04\x8CV[a\x01lV[4a\t\xD2Wa\t\xBCa\t\xA46`\x04a\x08mV[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1F\x9FV[a\t\xC4a\x01bV[\x80a\t\xCE\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[4a\n\x06Wa\t\xF0a\t\xEA6`\x04a\x05\xEFV[\x90a 0V[a\t\xF8a\x01bV[\x80a\n\x02\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[a\n\x17`\x0B_\x90a\x02\xE4V[\x90V[4a\nJWa\n*6`\x04a\x01pV[a\nFa\n5a\n\x0BV[a\n=a\x01bV[\x91\x82\x91\x82a\x03TV[\x03\x90\xF3[a\x01hV[a\n[`\x01_\x90a\x050V[\x90V[4a\n\x8EWa\nn6`\x04a\x01pV[a\n\x8Aa\nya\nOV[a\n\x81a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\n\x9F`\x04_\x90a\x06tV[\x90V[4a\n\xD2Wa\n\xB26`\x04a\x01pV[a\n\xCEa\n\xBDa\n\x93V[a\n\xC5a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[a\n\xE1_\x80a\x050V[\x90V[4a\x0B\x14Wa\n\xF46`\x04a\x01pV[a\x0B\x10a\n\xFFa\n\xD7V[a\x0B\x07a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\x0B%`\x08_\x90a\x06tV[\x90V[4a\x0BXWa\x0B86`\x04a\x01pV[a\x0BTa\x0BCa\x0B\x19V[a\x0BKa\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[a\x0Bi`\x02_\x90a\x050V[\x90V[4a\x0B\x9CWa\x0B|6`\x04a\x01pV[a\x0B\x98a\x0B\x87a\x0B]V[a\x0B\x8Fa\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\x0B\xAD`\x03_\x90a\x050V[\x90V[4a\x0B\xE0Wa\x0B\xC06`\x04a\x01pV[a\x0B\xDCa\x0B\xCBa\x0B\xA1V[a\x0B\xD3a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\x0B\xF1`\x07_\x90a\x06tV[\x90V[4a\x0C$Wa\x0C\x046`\x04a\x01pV[a\x0C a\x0C\x0Fa\x0B\xE5V[a\x0C\x17a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[`\xFF\x16\x90V[a\x0C?\x90`\x08a\x0CD\x93\x02a\x05\tV[a\x0C)V[\x90V[\x90a\x0CR\x91Ta\x0C/V[\x90V[a\x0Cb`\x03`\x14\x90a\x0CGV[\x90V[a\x0Cn\x90a\x07\x0EV[\x90RV[\x91\x90a\x0C\x85\x90_` \x85\x01\x94\x01\x90a\x0CeV[V[4a\x0C\xB7Wa\x0C\x976`\x04a\x01pV[a\x0C\xB3a\x0C\xA2a\x0CUV[a\x0C\xAAa\x01bV[\x91\x82\x91\x82a\x0CrV[\x03\x90\xF3[a\x01hV[4a\x0C\xEAWa\x0C\xD4a\x0C\xCF6`\x04a\x04\xB3V[a!\x1CV[a\x0C\xDCa\x01bV[\x80a\x0C\xE6\x81a\x04\xD1V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\r\x08Wa\r\x05\x91_\x01a\x06\xFFV[\x90V[a\x01lV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\r7\x81a\r!V[\x82\x10\x15a\rQWa\rI`\x01\x91a\r%V[\x91\x02\x01\x90_\x90V[a\r\rV[`\ta\ra\x81a\r!V[\x82\x10\x15a\r~Wa\r{\x91a\ru\x91a\r.V[\x90a\x050V[\x90V[_\x80\xFD[4a\r\xB2Wa\r\xAEa\r\x9Da\r\x986`\x04a\x0C\xEFV[a\rVV[a\r\xA5a\x01bV[\x91\x82\x91\x82a\x05ZV[\x03\x90\xF3[a\x01hV[a\r\xC3`\x05_\x90a\x06tV[\x90V[4a\r\xF6Wa\r\xD66`\x04a\x01pV[a\r\xF2a\r\xE1a\r\xB7V[a\r\xE9a\x01bV[\x91\x82\x91\x82a\x06\xA1V[\x03\x90\xF3[a\x01hV[_\x80\xFD[``\x90V[` \x91\x81R\x01\x90V[_\x1C\x90V[a\x0E\x1Ea\x0E#\x91a\x0E\rV[a\x05\rV[\x90V[a\x0E0\x90Ta\x0E\x12V[\x90V[`\x01\x01\x90V[\x90a\x0EVa\x0EPa\x0EI\x84a\r!V[\x80\x93a\x0E\x04V[\x92a\r%V[\x90_[\x81\x81\x10a\x0EfWPPP\x90V[\x90\x91\x92a\x0E\x86a\x0E\x80`\x01\x92a\x0E{\x87a\x0E&V[a\x03\xD8V[\x94a\x0E3V[\x91\x01\x91\x90\x91a\x0EYV[\x90a\x0E\x9A\x91a\x0E9V[\x90V[\x90a\x0E\xBDa\x0E\xB6\x92a\x0E\xADa\x01bV[\x93\x84\x80\x92a\x0E\x90V[\x03\x83a\x02\x99V[V[a\x0E\xC8\x90a\x0E\x9DV[\x90V[a\x0E\xD3a\r\xFFV[Pa\x0E\xDE`\ta\x0E\xBFV[\x90V[a\x0E\xEB\x90Ta\x0E\x12V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\"`\x17` \x92a\x03\x0FV[a\x0F+\x81a\x0E\xEEV[\x01\x90V[a\x0FD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\x15V[\x90V[\x15a\x0FNWV[a\x0FVa\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Fl`\x04\x82\x01a\x0F/V[\x03\x90\xFD[a\x0F\x9D\x90a\x0F\x983a\x0F\x92a\x0F\x8Ca\x0F\x87_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a\x10\xECV[V[\x90V[\x90V[a\x0F\xB9a\x0F\xB4a\x0F\xBE\x92a\x0F\x9FV[a\x0F\xA2V[a\x03\xB4V[\x90V[a\x0F\xCA\x90a\x0F\xA5V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x10'`'`@\x92a\x03\x0FV[a\x100\x81a\x0F\xCDV[\x01\x90V[a\x10I\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x10\x1AV[\x90V[\x15a\x10SWV[a\x10[a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10q`\x04\x82\x01a\x104V[\x03\x90\xFD[_\x1B\x90V[\x90a\x10\x8B`\x01\x80`\xA0\x1B\x03\x91a\x10uV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xA9a\x10\xA4a\x10\xAE\x92a\x03\xB4V[a\x0F\xA2V[a\x03\xB4V[\x90V[a\x10\xBA\x90a\x10\x95V[\x90V[a\x10\xC6\x90a\x10\xB1V[\x90V[\x90V[\x90a\x10\xE1a\x10\xDCa\x10\xE8\x92a\x10\xBDV[a\x10\xC9V[\x82Ta\x10zV[\x90UV[a\x11\x11\x81a\x11\na\x11\x04a\x10\xFF_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x10LV[a\x11\x1C\x81`\na\x10\xCCV[a\x11F\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x10\xBDV[\x90a\x11Oa\x01bV[\x80a\x11Y\x81a\x04\xD1V[\x03\x90\xA2V[a\x11g\x90a\x0FpV[V[\x90a\x11\x97\x91a\x11\x923a\x11\x8Ca\x11\x86a\x11\x81_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a\x13\xDFV[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x11\xC6\x91\x02\x91a\x11\xC0_\x19\x84a\x11\xA7V[\x92a\x11\xA7V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xE4a\x11\xDFa\x11\xE9\x92a\x06\x91V[a\x0F\xA2V[a\x06\x91V[\x90V[\x90V[\x91\x90a\x12\x05a\x12\0a\x12\r\x93a\x11\xD0V[a\x11\xECV[\x90\x83Ta\x11\xABV[\x90UV[_\x90V[a\x12'\x91a\x12!a\x12\x11V[\x91a\x11\xEFV[V[[\x81\x81\x10a\x125WPPV[\x80a\x12B_`\x01\x93a\x12\x15V[\x01a\x12*V[\x91\x90`\x1F\x81\x11a\x12XW[PPPV[a\x12da\x12\x89\x93a\x01\xD9V[\x90` a\x12p\x84a\x11\x9DV[\x83\x01\x93\x10a\x12\x91W[a\x12\x82\x90a\x11\x9DV[\x01\x90a\x12)V[_\x80\x80a\x12SV[\x91Pa\x12\x82\x81\x92\x90Pa\x12yV[\x90a\x12\xAF\x90_\x19\x90`\x08\x02a\x05\tV[\x19\x16\x90V[\x81a\x12\xBE\x91a\x12\x9FV[\x90`\x02\x02\x17\x90V[\x91a\x12\xD1\x90\x82a\x11\x99V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x13\x90Wa\x12\xF5\x82a\x12\xEF\x85Ta\x01\xA6V[\x85a\x12HV[_\x90`\x1F\x83\x11`\x01\x14a\x13(W\x91\x80\x91a\x13\x17\x93_\x92a\x13\x1CW[PPa\x12\xB4V[\x90U[V[\x90\x91P\x015_\x80a\x13\x10V[`\x1F\x19\x83\x16\x91a\x137\x85a\x01\xD9V[\x92_[\x81\x81\x10a\x13xWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x13^W[PPP\x02\x01\x90Ua\x13\x1AV[a\x13n\x91\x015`\x1F\x84\x16\x90a\x12\x9FV[\x90U_\x80\x80a\x13RV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x13:V[a\x02\x85V[\x90a\x13\xA0\x92\x91a\x12\xC6V[V[\x91\x90a\x13\xBC\x81a\x13\xB5\x81a\x13\xC1\x95a\x03\x0FV[\x80\x95a\x07rV[a\x02{V[\x01\x90V[\x90\x91a\x13\xDC\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x13\xA2V[\x90V[a\x13\xEC\x81\x83\x90`\x0Ca\x13\x95V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\x14#a\x14\x1Aa\x01bV[\x92\x83\x92\x83a\x13\xC5V[\x03\x90\xA1V[\x90a\x142\x91a\x11iV[V[`@\x1C\x90V[a\x14Fa\x14K\x91a\x144V[a\x0C)V[\x90V[a\x14X\x90Ta\x14:V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x14ta\x14y\x91a\x0E\rV[a\x14[V[\x90V[a\x14\x86\x90Ta\x14hV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x14\xAAa\x14\xA5a\x14\xAF\x92a\x0F\x9FV[a\x0F\xA2V[a\x14\x89V[\x90V[\x90V[a\x14\xC9a\x14\xC4a\x14\xCE\x92a\x14\xB2V[a\x0F\xA2V[a\x14\x89V[\x90V[a\x14\xDA\x90a\x10\xB1V[\x90V[a\x14\xF1a\x14\xECa\x14\xF6\x92a\x0F\x9FV[a\x0F\xA2V[a\x06\x91V[\x90V[\x90a\x15\x0Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x10uV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15*a\x15%a\x15/\x92a\x14\x89V[a\x0F\xA2V[a\x14\x89V[\x90V[\x90V[\x90a\x15Ja\x15Ea\x15Q\x92a\x15\x16V[a\x152V[\x82Ta\x14\xF9V[\x90UV[`@\x1B\x90V[\x90a\x15oh\xFF\0\0\0\0\0\0\0\0\x91a\x15UV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\x82\x90a\x07\x0EV[\x90V[\x90V[\x90a\x15\x9Da\x15\x98a\x15\xA4\x92a\x15yV[a\x15\x85V[\x82Ta\x15[V[\x90UV[a\x15\xB1\x90a\x14\xB5V[\x90RV[\x91\x90a\x15\xC8\x90_` \x85\x01\x94\x01\x90a\x15\xA8V[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x15\xDFa!'V[`\x80Ra\x15\xF8a\x15\xF2_`\x80Q\x01a\x14NV[\x15a\x07\x0EV[`\xA0Ra\x16\x08_`\x80Q\x01a\x14|V[\x80a\x16\x1Ba\x16\x15_a\x14\x96V[\x91a\x14\x89V[\x14\x80a\x17DW[\x90a\x166a\x160`\x01a\x14\xB5V[\x91a\x14\x89V[\x14\x80a\x17\x1CW[a\x16H\x90\x91\x15a\x07\x0EV[\x90\x81a\x17\x0BW[Pa\x16\xE8Wa\x16|\x9Da\x16oa\x16e`\x01a\x14\xB5V[_`\x80Q\x01a\x155V[`\xA0Qa\x16\xD4W[a\x1E\x0BV[`\xA0Qa\x16\x86W[V[a\x16\x94_\x80`\x80Q\x01a\x15\x88V[`\x01a\x16\xCC\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x16\xC3a\x01bV[\x91\x82\x91\x82a\x15\xB5V[\x03\x90\xA1a\x16\x84V[a\x16\xE3`\x01_`\x80Q\x01a\x15\x88V[a\x16wV[a\x16\xF0a\x01bV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x17\x07`\x04\x82\x01a\x04\xD1V[\x03\x90\xFD[a\x17\x16\x91P\x15a\x07\x0EV[_a\x16OV[Pa\x16Ha\x17)0a\x14\xD1V[;a\x17<a\x176_a\x14\xDDV[\x91a\x06\x91V[\x14\x90Pa\x16=V[P`\xA0Qa\x16\"V[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x17\x81`\x1C` \x92a\x03\x0FV[a\x17\x8A\x81a\x17MV[\x01\x90V[a\x17\xA3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17tV[\x90V[\x15a\x17\xADWV[a\x17\xB5a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xCB`\x04\x82\x01a\x17\x8EV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x18\x03`\x17` \x92a\x03\x0FV[a\x18\x0C\x81a\x17\xCFV[\x01\x90V[a\x18%\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\xF6V[\x90V[\x15a\x18/WV[a\x187a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18M`\x04\x82\x01a\x18\x10V[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x18\xAB`\"`@\x92a\x03\x0FV[a\x18\xB4\x81a\x18QV[\x01\x90V[a\x18\xCD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\x9EV[\x90V[\x15a\x18\xD7WV[a\x18\xDFa\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\xF5`\x04\x82\x01a\x18\xB8V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x19S`&`@\x92a\x03\x0FV[a\x19\\\x81a\x18\xF9V[\x01\x90V[a\x19u\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19FV[\x90V[\x15a\x19\x7FWV[a\x19\x87a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\x9D`\x04\x82\x01a\x19`V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x19\xFB`%`@\x92a\x03\x0FV[a\x1A\x04\x81a\x19\xA1V[\x01\x90V[a\x1A\x1D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19\xEEV[\x90V[\x15a\x1A'WV[a\x1A/a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1AE`\x04\x82\x01a\x1A\x08V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x1A\xA3`*`@\x92a\x03\x0FV[a\x1A\xAC\x81a\x1AIV[\x01\x90V[a\x1A\xC5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1A\x96V[\x90V[\x15a\x1A\xCFWV[a\x1A\xD7a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1A\xED`\x04\x82\x01a\x1A\xB0V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x1BK`#`@\x92a\x03\x0FV[a\x1BT\x81a\x1A\xF1V[\x01\x90V[a\x1Bm\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1B>V[\x90V[\x15a\x1BwWV[a\x1B\x7Fa\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1B\x95`\x04\x82\x01a\x1BXV[\x03\x90\xFD[\x90a\x1B\xA5_\x19\x91a\x10uV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1B\xC4a\x1B\xBFa\x1B\xCB\x92a\x11\xD0V[a\x11\xECV[\x82Ta\x1B\x99V[\x90UV[`\xA0\x1B\x90V[\x90a\x1B\xE4`\xFF`\xA0\x1B\x91a\x1B\xCFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1C\x03a\x1B\xFEa\x1C\n\x92a\x15yV[a\x15\x85V[\x82Ta\x1B\xD5V[\x90UV[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1C%WPPV[\x80a\x1C2_`\x01\x93a\x12\x15V[\x01a\x1C\x1AV[\x90\x91\x82\x81\x10a\x1CGW[PPPV[a\x1Cea\x1C_a\x1CYa\x1Cp\x95a\x1C\x0EV[\x92a\x1C\x0EV[\x92a\r%V[\x91\x82\x01\x91\x01\x90a\x1C\x19V[_\x80\x80a\x1CBV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1C\xA1W\x81a\x1C\x96a\x1C\x9F\x93a\r!V[\x90\x82\x81Ua\x1C8V[V[a\x02\x85V[a\x1C\xB0\x90Qa\x03\xBFV[\x90V[a\x1C\xBC\x82a\x03\xA1V[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1D\x1FWa\x1C\xEAa\x1C\xE4`\x01\x92a\x1C\xDF\x86\x86a\x1CxV[a\x03\xAEV[\x92a\r%V[\x92\x04\x91_[\x83\x81\x10a\x1C\xFCWPPPPV[`\x01\x90` a\x1D\x12a\x1D\r\x86a\x1C\xA6V[a\x10\xC9V[\x94\x01\x93\x81\x84\x01U\x01a\x1C\xEFV[a\x02\x85V[\x90a\x1D.\x91a\x1C\xB3V[V[\x90a\x1D:\x81a\x03\x0BV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1D\xFAWa\x1D^\x82a\x1DX\x85Ta\x01\xA6V[\x85a\x12HV[` \x90`\x1F\x83\x11`\x01\x14a\x1D\x92W\x91\x80\x91a\x1D\x81\x93_\x92a\x1D\x86W[PPa\x12\xB4V[\x90U[V[\x90\x91P\x01Q_\x80a\x1DzV[`\x1F\x19\x83\x16\x91a\x1D\xA1\x85a\x01\xD9V[\x92_[\x81\x81\x10a\x1D\xE2WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1D\xC8W[PPP\x02\x01\x90Ua\x1D\x84V[a\x1D\xD8\x91\x01Q`\x1F\x84\x16\x90a\x12\x9FV[\x90U_\x80\x80a\x1D\xBCV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x1D\xA4V[a\x02\x85V[\x90a\x1E\t\x91a\x1D0V[V[\x9B\x99\x95\x97a\x1Fna\x1F\x8A\x98a\x1F\x9D\x9F\x96\x8F\x9Ba\x1F\x98\x9F\x9Ca\x1F\x83\x9Aa\x1F\x91\x9F\x98a\x1Fg\x94a\x1FR\x8F\x9Ca\x1FKa\x1FY\x94a\x1F|\x9Fa\x1Fu\x9Ea\x1F=\x8F\x92a\x1F\x1Ca\x1FD\x94a\x1Ewa\x1F`\x9Ea\x1Epa\x1Eja\x1Ee_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x17\xA6V[a\x1E\x94\x85a\x1E\x8Da\x1E\x87_a\x14\xDDV[\x91a\x06\x91V[\x14\x15a\x18(V[a\x1E\xB1\x87a\x1E\xAAa\x1E\xA4_a\x14\xDDV[\x91a\x06\x91V[\x14\x15a\x18\xD0V[a\x1E\xD6\x89a\x1E\xCFa\x1E\xC9a\x1E\xC4_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x19xV[a\x1E\xFB\x8Ba\x1E\xF4a\x1E\xEEa\x1E\xE9_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x1A V[a\x1F\x15a\x1F\x0Fa\x1F\n_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x1A\xC8V[a\x1F6a\x1F0a\x1F+_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a\x1BpV[`\x04a\x1B\xAFV[`\x05a\x1B\xAFV[`\x01a\x10\xCCV[`\x02a\x10\xCCV[`\x03a\x1B\xEEV[`\x06a\x1B\xAFV[`\x07a\x1B\xAFV[`\x03a\x10\xCCV[`\x08a\x1B\xAFV[`\ta\x1D$V[`\na\x10\xCCV[`\x0Ba\x1D\xFFV[`\x0Ca\x1D\xFFV[a!KV[V[\x90a\x1F\xB5\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x15\xCAV[V[\x90a\x1F\xE5\x91a\x1F\xE03a\x1F\xDAa\x1F\xD4a\x1F\xCF_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a\x1F\xE7V[V[a\x1F\xF4\x81\x83\x90`\x0Ba\x13\x95V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a +a \"a\x01bV[\x92\x83\x92\x83a\x13\xC5V[\x03\x90\xA1V[\x90a :\x91a\x1F\xB7V[V[a i\x90a d3a ^a Xa S_a\x0E\xE1V[a\x03\xBFV[\x91a\x03\xBFV[\x14a\x0FGV[a \xECV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a \x9E` \x80\x92a\x03\x0FV[a \xA7\x81a kV[\x01\x90V[a \xC0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra \x92V[\x90V[\x15a \xCAWV[a \xD2a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a \xE8`\x04\x82\x01a \xABV[\x03\x90\xFD[a!\x1A\x90a!\x15\x81a!\x0Ea!\x08a!\x03_a\x0F\xC1V[a\x03\xBFV[\x91a\x03\xBFV[\x14\x15a \xC3V[a!KV[V[a!%\x90a <V[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a!T_a\x0E\xE1V[a!^\x82_a\x10\xCCV[\x90a!\x92a!\x8C\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x10\xBDV[\x91a\x10\xBDV[\x91a!\x9Ba\x01bV[\x80a!\xA5\x81a\x04\xD1V[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 \xB7.\xE0\x8A\xF8\xB3\xA7`\\,\x88\x19[\x13\xF2|\xAC\x8D\xF0\xD7\xC8\x92|i\x980\x15\x81\x94\x11\xF7\xBEdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AppchainBlockExplorerUrlUpdated(string)` and selector `0x02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a7`.
```solidity
event AppchainBlockExplorerUrlUpdated(string newUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AppchainBlockExplorerUrlUpdated {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AppchainBlockExplorerUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AppchainBlockExplorerUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AppchainBlockExplorerUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AppchainBlockExplorerUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AppchainBlockExplorerUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ALLOWED_SETTLEMENT_ADDRESSES(uint256)` and selector `0xf881afaf`.
```solidity
function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ALLOWED_SETTLEMENT_ADDRESSES(uint256)`](ALLOWED_SETTLEMENT_ADDRESSESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ALLOWED_SETTLEMENT_ADDRESSESCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ALLOWED_SETTLEMENT_ADDRESSESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ALLOWED_SETTLEMENT_ADDRESSES(uint256)";
            const SELECTOR: [u8; 4] = [248u8, 129u8, 175u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `APPCHAIN_BLOCK_EXPLORER_URL()` and selector `0x0743bf6e`.
```solidity
function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLCall {}
    ///Container type for the return parameters of the [`APPCHAIN_BLOCK_EXPLORER_URL()`](APPCHAIN_BLOCK_EXPLORER_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for APPCHAIN_BLOCK_EXPLORER_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = APPCHAIN_BLOCK_EXPLORER_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "APPCHAIN_BLOCK_EXPLORER_URL()";
            const SELECTOR: [u8; 4] = [7u8, 67u8, 191u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CHAIN_ID()` and selector `0xf8a144be`.
```solidity
function SEQUENCING_CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CHAIN_ID()`](SEQUENCING_CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CHAIN_ID()";
            const SELECTOR: [u8; 4] = [248u8, 161u8, 68u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllowedSettlementAddresses()` and selector `0x1bc0afd6`.
```solidity
function getAllowedSettlementAddresses() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllowedSettlementAddressesCall {}
    ///Container type for the return parameters of the [`getAllowedSettlementAddresses()`](getAllowedSettlementAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllowedSettlementAddressesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllowedSettlementAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllowedSettlementAddressesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllowedSettlementAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllowedSettlementAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllowedSettlementAddressesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllowedSettlementAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllowedSettlementAddressesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllowedSettlementAddressesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllowedSettlementAddresses()";
            const SELECTOR: [u8; 4] = [27u8, 192u8, 175u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])` and selector `0x5a2d9c18`.
```solidity
function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub appchainBlockExplorerUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub allowedSettlementAddresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value._owner,
                        value.chainId,
                        value.sequencingChainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                        value.appchainBlockExplorerUrl,
                        value.allowedSettlementAddresses,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        chainId: tuple.1,
                        sequencingChainId: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                        appchainBlockExplorerUrl: tuple.12,
                        allowedSettlementAddresses: tuple.13,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])";
            const SELECTOR: [u8; 4] = [90u8, 45u8, 156u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.appchainBlockExplorerUrl,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.allowedSettlementAddresses,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAppchainBlockExplorerUrl(string)` and selector `0x4b8be3f7`.
```solidity
function updateAppchainBlockExplorerUrl(string memory newUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlCall {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateAppchainBlockExplorerUrl(string)`](updateAppchainBlockExplorerUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlCall) -> Self {
                    (value.newUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAppchainBlockExplorerUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAppchainBlockExplorerUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAppchainBlockExplorerUrl(string)";
            const SELECTOR: [u8; 4] = [75u8, 139u8, 227u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        ALLOWED_SETTLEMENT_ADDRESSES(ALLOWED_SETTLEMENT_ADDRESSESCall),
        #[allow(missing_docs)]
        APPCHAIN_BLOCK_EXPLORER_URL(APPCHAIN_BLOCK_EXPLORER_URLCall),
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CHAIN_ID(SEQUENCING_CHAIN_IDCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        getAllowedSettlementAddresses(getAllowedSettlementAddressesCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAppchainBlockExplorerUrl(updateAppchainBlockExplorerUrlCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 67u8, 191u8, 110u8],
            [27u8, 192u8, 175u8, 214u8],
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [75u8, 139u8, 227u8, 247u8],
            [87u8, 209u8, 186u8, 37u8],
            [90u8, 45u8, 156u8, 24u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
            [248u8, 129u8, 175u8, 175u8],
            [248u8, 161u8, 68u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(_) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(_) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CHAIN_ID(_) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllowedSettlementAddresses(_) => {
                    <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAppchainBlockExplorerUrl(_) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn APPCHAIN_BLOCK_EXPLORER_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::APPCHAIN_BLOCK_EXPLORER_URL)
                    }
                    APPCHAIN_BLOCK_EXPLORER_URL
                },
                {
                    fn getAllowedSettlementAddresses(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::getAllowedSettlementAddresses)
                    }
                    getAllowedSettlementAddresses
                },
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn updateAppchainBlockExplorerUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateAppchainBlockExplorerUrl)
                    }
                    updateAppchainBlockExplorerUrl
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn ALLOWED_SETTLEMENT_ADDRESSES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ALLOWED_SETTLEMENT_ADDRESSES)
                    }
                    ALLOWED_SETTLEMENT_ADDRESSES
                },
                {
                    fn SEQUENCING_CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CHAIN_ID)
                    }
                    SEQUENCING_CHAIN_ID
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllowedSettlementAddresses(inner) => {
                    <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllowedSettlementAddresses(inner) => {
                    <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        AppchainBlockExplorerUrlUpdated(AppchainBlockExplorerUrlUpdated),
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AppchainBlockExplorerUrlUpdated)
                }
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ALLOWED_SETTLEMENT_ADDRESSES`] function.
        pub fn ALLOWED_SETTLEMENT_ADDRESSES(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ALLOWED_SETTLEMENT_ADDRESSESCall, N> {
            self.call_builder(
                &ALLOWED_SETTLEMENT_ADDRESSESCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`APPCHAIN_BLOCK_EXPLORER_URL`] function.
        pub fn APPCHAIN_BLOCK_EXPLORER_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, APPCHAIN_BLOCK_EXPLORER_URLCall, N> {
            self.call_builder(&APPCHAIN_BLOCK_EXPLORER_URLCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CHAIN_ID`] function.
        pub fn SEQUENCING_CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CHAIN_IDCall, N> {
            self.call_builder(&SEQUENCING_CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`getAllowedSettlementAddresses`] function.
        pub fn getAllowedSettlementAddresses(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getAllowedSettlementAddressesCall,
            N,
        > {
            self.call_builder(
                &getAllowedSettlementAddressesCall {
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _owner: alloy::sol_types::private::Address,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
            appchainBlockExplorerUrl: alloy::sol_types::private::String,
            allowedSettlementAddresses: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _owner,
                    chainId,
                    sequencingChainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                    appchainBlockExplorerUrl,
                    allowedSettlementAddresses,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAppchainBlockExplorerUrl`] function.
        pub fn updateAppchainBlockExplorerUrl(
            &self,
            newUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateAppchainBlockExplorerUrlCall,
            N,
        > {
            self.call_builder(
                &updateAppchainBlockExplorerUrlCall {
                    newUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AppchainBlockExplorerUrlUpdated`] event.
        pub fn AppchainBlockExplorerUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AppchainBlockExplorerUrlUpdated, N> {
            self.event_filter::<AppchainBlockExplorerUrlUpdated>()
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
