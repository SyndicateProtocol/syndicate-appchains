/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CHAIN_ID() external view returns (uint256);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function initialize(address owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "APPCHAIN_BLOCK_EXPLORER_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "appchainBlockExplorerUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611c4f61020e8239611c4f90f35b610032565b60405190565b5f80fd5b61003f336100a8565b565b90565b60018060a01b031690565b90565b61006661006161006b92610041565b61004f565b610044565b90565b61007790610052565b90565b61008390610044565b90565b61008f9061007a565b9052565b91906100a6905f60208501940190610086565b565b806100c36100bd6100b85f61006e565b61007a565b9161007a565b146100d3576100d1906101ae565b565b6100fd6100df5f61006e565b6100e761002c565b918291631e4fbdf760e01b835260048301610093565b0390fd5b5f1c90565b60018060a01b031690565b61011d61012291610101565b610106565b90565b61012f9054610111565b90565b5f1b90565b9061014860018060a01b0391610132565b9181191691161790565b61016661016161016b92610044565b61004f565b610044565b90565b61017790610152565b90565b6101839061016e565b90565b90565b9061019e6101996101a59261017a565b610186565b8254610137565b9055565b5f0190565b6101b75f610125565b6101c1825f610189565b906101f56101ef7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361017a565b9161017a565b916101fe61002c565b80610208816101a9565b0390a356fe60806040526004361015610013575b610b6e565b61001d5f3561013c565b80630743bf6e146101375780632a84b0f0146101325780633252c5fa1461012d57806341fc712d1461012857806357d1ba251461012357806362c73caa1461011e57806366a1d108146101195780636edd6c0914610114578063715018a61461010f57806385e1f4d01461010a5780638da5cb5b14610105578063a3c6e1e714610100578063aa6a43d8146100fb578063bf6db6f8146100f6578063d1f4737c146100f1578063e79388e6146100ec578063f2fde38b146100e75763f8a144be0361000e57610b39565b610af7565b610ac2565b610a2f565b6109eb565b6109a7565b610963565b61091f565b6108ea565b6108a8565b610873565b61082f565b6107ec565b61073a565b6106ab565b610602565b6103e2565b61034c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015a57565b61014c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101a6575b60208310146101a157565b610172565b91607f1691610196565b60209181520190565b5f5260205f2090565b905f92918054906101dc6101d583610186565b80946101b0565b916001811690815f1461023357506001146101f7575b505050565b61020491929394506101b9565b915f925b81841061021b57505001905f80806101f2565b60018160209295939554848601520191019290610208565b92949550505060ff19168252151560200201905f80806101f2565b90610258916101c2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102839061025b565b810190811067ffffffffffffffff82111761029d57604052565b610265565b906102c26102bb926102b2610142565b9384809261024e565b0383610279565b565b905f106102d7576102d4906102a2565b90565b61015f565b6102e8600b5f906102c4565b90565b5190565b60209181520190565b90825f9392825e0152565b61032261032b60209361033093610319816102eb565b938480936102ef565b958691016102f8565b61025b565b0190565b6103499160208201915f818403910152610303565b90565b3461037c5761035c366004610150565b6103786103676102dc565b61036f610142565b91829182610334565b0390f35b610148565b5f80fd5b60018060a01b031690565b61039990610385565b90565b6103a581610390565b036103ac57565b5f80fd5b905035906103bd8261039c565b565b906020828203126103d8576103d5915f016103b0565b90565b61014c565b5f0190565b34610410576103fa6103f53660046103bf565b610d44565b610402610142565b8061040c816103dd565b0390f35b610148565b90565b61042181610415565b0361042857565b5f80fd5b9050359061043982610418565b565b151590565b6104498161043b565b0361045057565b5f80fd5b9050359061046182610440565b565b5f80fd5b5f80fd5b9061047e610477610142565b9283610279565b565b67ffffffffffffffff811161049e5761049a60209161025b565b0190565b610265565b90825f939282370152565b909291926104c36104be82610480565b61046b565b938185526020850190828401116104df576104dd926104a3565b565b610467565b9080601f83011215610502578160206104ff933591016104ae565b90565b610463565b906101a0828203126105fd5761051f815f84016103b0565b9261052d826020850161042c565b9261053b836040830161042c565b9261054981606084016103b0565b9261055782608085016103b0565b926105658360a08301610454565b926105738160c0840161042c565b926105818260e0850161042c565b926105908361010083016103b0565b9261059f81610120840161042c565b926105ae8261014085016103b0565b9261016081013567ffffffffffffffff81116105f857836105d09183016104e4565b9261018082013567ffffffffffffffff81116105f3576105f092016104e4565b90565b610381565b610381565b61014c565b346106405761062a610615366004610507565b9b9a909a9991999892989793979694966118b7565b610632610142565b8061063c816103dd565b0390f35b610148565b1c90565b60018060a01b031690565b6106649060086106699302610645565b610649565b90565b906106779154610654565b90565b61068660095f9061066c565b90565b61069290610390565b9052565b91906106a9905f60208501940190610689565b565b346106db576106bb366004610150565b6106d76106c661067a565b6106ce610142565b91829182610696565b0390f35b610148565b90565b6106f39060086106f89302610645565b6106e0565b90565b9061070691546106e3565b90565b61071560065f906106fb565b90565b61072190610415565b9052565b9190610738905f60208501940190610718565b565b3461076a5761074a366004610150565b610766610755610709565b61075d610142565b91829182610725565b0390f35b610148565b5f80fd5b5f80fd5b909182601f830112156107b15781359167ffffffffffffffff83116107ac5760200192600183028401116107a757565b610773565b61076f565b610463565b906020828203126107e7575f82013567ffffffffffffffff81116107e2576107de9201610777565b9091565b610381565b61014c565b3461081b576108056107ff3660046107b6565b90611a48565b61080d610142565b80610817816103dd565b0390f35b610148565b61082c600a5f906102c4565b90565b3461085f5761083f366004610150565b61085b61084a610820565b610852610142565b91829182610334565b0390f35b610148565b61087060015f9061066c565b90565b346108a357610883366004610150565b61089f61088e610864565b610896610142565b91829182610696565b0390f35b610148565b346108d6576108b8366004610150565b6108c0611a79565b6108c8610142565b806108d2816103dd565b0390f35b610148565b6108e760045f906106fb565b90565b3461091a576108fa366004610150565b6109166109056108db565b61090d610142565b91829182610725565b0390f35b610148565b3461094f5761092f366004610150565b61094b61093a611aa8565b610942610142565b91829182610696565b0390f35b610148565b61096060085f906106fb565b90565b3461099357610973366004610150565b61098f61097e610954565b610986610142565b91829182610725565b0390f35b610148565b6109a460025f9061066c565b90565b346109d7576109b7366004610150565b6109d36109c2610998565b6109ca610142565b91829182610696565b0390f35b610148565b6109e860035f9061066c565b90565b34610a1b576109fb366004610150565b610a17610a066109dc565b610a0e610142565b91829182610696565b0390f35b610148565b610a2c60075f906106fb565b90565b34610a5f57610a3f366004610150565b610a5b610a4a610a20565b610a52610142565b91829182610725565b0390f35b610148565b60ff1690565b610a7a906008610a7f9302610645565b610a64565b90565b90610a8d9154610a6a565b90565b610a9d6003601490610a82565b90565b610aa99061043b565b9052565b9190610ac0905f60208501940190610aa0565b565b34610af257610ad2366004610150565b610aee610add610a90565b610ae5610142565b91829182610aad565b0390f35b610148565b34610b2557610b0f610b0a3660046103bf565b611b29565b610b17610142565b80610b21816103dd565b0390f35b610148565b610b3660055f906106fb565b90565b34610b6957610b49366004610150565b610b65610b54610b2a565b610b5c610142565b91829182610725565b0390f35b610148565b5f80fd5b610b8390610b7e611b34565b610cd2565b565b90565b90565b610b9f610b9a610ba492610b85565b610b88565b610385565b90565b610bb090610b8b565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610c0d60276040926102ef565b610c1681610bb3565b0190565b610c2f9060208101905f818303910152610c00565b90565b15610c3957565b610c41610142565b62461bcd60e51b815280610c5760048201610c1a565b0390fd5b5f1b90565b90610c7160018060a01b0391610c5b565b9181191691161790565b610c8f610c8a610c9492610385565b610b88565b610385565b90565b610ca090610c7b565b90565b610cac90610c97565b90565b90565b90610cc7610cc2610cce92610ca3565b610caf565b8254610c60565b9055565b610cf781610cf0610cea610ce55f610ba7565b610390565b91610390565b1415610c32565b610d02816009610cb2565b610d2c7f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610ca3565b90610d35610142565b80610d3f816103dd565b0390a2565b610d4d90610b72565b565b60401c90565b610d61610d6691610d4f565b610a64565b90565b610d739054610d55565b90565b5f1c90565b67ffffffffffffffff1690565b610d94610d9991610d76565b610d7b565b90565b610da69054610d88565b90565b67ffffffffffffffff1690565b610dca610dc5610dcf92610b85565b610b88565b610da9565b90565b90565b610de9610de4610dee92610dd2565b610b88565b610da9565b90565b610dfa90610c97565b90565b610e11610e0c610e1692610b85565b610b88565b610415565b90565b90610e2c67ffffffffffffffff91610c5b565b9181191691161790565b610e4a610e45610e4f92610da9565b610b88565b610da9565b90565b90565b90610e6a610e65610e7192610e36565b610e52565b8254610e19565b9055565b60401b90565b90610e8f68ff000000000000000091610e75565b9181191691161790565b610ea29061043b565b90565b90565b90610ebd610eb8610ec492610e99565b610ea5565b8254610e7b565b9055565b610ed190610dd5565b9052565b9190610ee8905f60208501940190610ec8565b565b999693909a9794919b989592610efe611b89565b9c8d9c8d5f01610f0d90610d69565b15610f179061043b565b809e5f01610f2490610d9c565b90815f610f3090610db6565b90610f3a90610da9565b149081611061575b5090610f57610f516001610dd5565b91610da9565b1480611039575b610f6990911561043b565b9081611028575b5061100557610f9b9c8f8f610f90610f886001610dd5565b5f8401610e55565b610ff1575b5061172e565b610fa3575b50565b610fb0905f809101610ea8565b6001610fe87fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610fdf610142565b91829182610ed5565b0390a15f610fa0565b610fff905f60019101610ea8565b8f610f95565b61100d610142565b63f92ee8a960e01b815280611024600482016103dd565b0390fd5b61103391501561043b565b5f610f70565b50610f6961104630610df1565b3b6110596110535f610dfd565b91610415565b149050610f5e565b90508f610f42565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b61109d601c6020926102ef565b6110a681611069565b0190565b6110bf9060208101905f818303910152611090565b90565b156110c957565b6110d1610142565b62461bcd60e51b8152806110e7600482016110aa565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61111f60176020926102ef565b611128816110eb565b0190565b6111419060208101905f818303910152611112565b90565b1561114b57565b611153610142565b62461bcd60e51b8152806111696004820161112c565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6111c760226040926102ef565b6111d08161116d565b0190565b6111e99060208101905f8183039101526111ba565b90565b156111f357565b6111fb610142565b62461bcd60e51b815280611211600482016111d4565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b61126f60266040926102ef565b61127881611215565b0190565b6112919060208101905f818303910152611262565b90565b1561129b57565b6112a3610142565b62461bcd60e51b8152806112b96004820161127c565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61131760256040926102ef565b611320816112bd565b0190565b6113399060208101905f81830391015261130a565b90565b1561134357565b61134b610142565b62461bcd60e51b81528061136160048201611324565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6113bf602a6040926102ef565b6113c881611365565b0190565b6113e19060208101905f8183039101526113b2565b90565b156113eb57565b6113f3610142565b62461bcd60e51b815280611409600482016113cc565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61146760236040926102ef565b6114708161140d565b0190565b6114899060208101905f81830391015261145a565b90565b1561149357565b61149b610142565b62461bcd60e51b8152806114b160048201611474565b0390fd5b906114c15f1991610c5b565b9181191691161790565b6114df6114da6114e492610415565b610b88565b610415565b90565b90565b906114ff6114fa611506926114cb565b6114e7565b82546114b5565b9055565b60a01b90565b9061151f60ff60a01b9161150a565b9181191691161790565b9061153e61153961154592610e99565b610ea5565b8254611510565b9055565b601f602091010490565b1b90565b9190600861157291029161156c5f1984611553565b92611553565b9181191691161790565b919061159261158d61159a936114cb565b6114e7565b908354611557565b9055565b5f90565b6115b4916115ae61159e565b9161157c565b565b5b8181106115c2575050565b806115cf5f6001936115a2565b016115b7565b9190601f81116115e5575b505050565b6115f1611616936101b9565b9060206115fd84611549565b8301931061161e575b61160f90611549565b01906115b6565b5f80806115e0565b915061160f81929050611606565b9061163c905f1990600802610645565b191690565b8161164b9161162c565b906002021790565b9061165d816102eb565b9067ffffffffffffffff821161171d576116818261167b8554610186565b856115d5565b602090601f83116001146116b5579180916116a4935f926116a9575b5050611641565b90555b565b90915001515f8061169d565b601f198316916116c4856101b9565b925f5b818110611705575091600293918560019694106116eb575b505050020190556116a7565b6116fb910151601f84169061162c565b90555f80806116df565b919360206001819287870151815501950192016116c7565b610265565b9061172c91611653565b565b9a9661188d906118866118a2986118b59f9c968f996118b09f9a61189b9a6118a99f9861187f9461186a8f9c611863611871946118949f8f9061183b61185c926117966118789c61178f6117896117845f610ba7565b610390565b91610390565b14156110c2565b6117b3856117ac6117a65f610dfd565b91610415565b1415611144565b6117d0876117c96117c35f610dfd565b91610415565b14156111ec565b6117f5896117ee6117e86117e35f610ba7565b610390565b91610390565b1415611294565b61181a8b61181361180d6118085f610ba7565b610390565b91610390565b141561133c565b61183461182e6118295f610ba7565b610390565b91610390565b14156113e4565b61185561184f61184a5f610ba7565b610390565b91610390565b141561148c565b60046114ea565b60056114ea565b6001610cb2565b6002610cb2565b6003611529565b60066114ea565b60076114ea565b6003610cb2565b60086114ea565b6009610cb2565b600a611722565b600b611722565b611bad565b565b906118cc9c9b9a999897969594939291610eea565b565b906118e0916118db611b34565b6119ff565b565b5090565b916118f190826118e2565b9067ffffffffffffffff82116119b0576119158261190f8554610186565b856115d5565b5f90601f831160011461194857918091611937935f9261193c575b5050611641565b90555b565b90915001355f80611930565b601f19831691611957856101b9565b925f5b8181106119985750916002939185600196941061197e575b5050500201905561193a565b61198e910135601f84169061162c565b90555f8080611972565b9193602060018192878701358155019501920161195a565b610265565b906119c092916118e6565b565b91906119dc816119d5816119e1956102ef565b80956104a3565b61025b565b0190565b90916119fc9260208301925f8185039101526119c2565b90565b611a0c818390600a6119b5565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611a43611a3a610142565b928392836119e5565b0390a1565b90611a52916118ce565b565b611a5c611b34565b611a64611a66565b565b611a77611a725f610ba7565b611bad565b565b611a81611a54565b565b5f90565b611a93611a9891610d76565b610649565b90565b611aa59054611a87565b90565b611ab0611a83565b50611aba5f611a9b565b90565b611ace90611ac9611b34565b611ad0565b565b80611aeb611ae5611ae05f610ba7565b610390565b91610390565b14611afb57611af990611bad565b565b611b25611b075f610ba7565b611b0f610142565b918291631e4fbdf760e01b835260048301610696565b0390fd5b611b3290611abd565b565b611b3c611aa8565b611b55611b4f611b4a611c0c565b610390565b91610390565b03611b5c57565b611b85611b67611c0c565b611b6f610142565b91829163118cdaa760e01b835260048301610696565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611bb65f611a9b565b611bc0825f610cb2565b90611bf4611bee7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ca3565b91610ca3565b91611bfd610142565b80611c07816103dd565b0390a3565b611c14611a83565b50339056fea2646970667358221220cc092d00e0cd5b0d89b762fccc0ff6c5f85dc78808d857a62c99712394a337c464736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x1COa\x02\x0E\x829a\x1CO\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0?3a\0\xA8V[V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0fa\0aa\0k\x92a\0AV[a\0OV[a\0DV[\x90V[a\0w\x90a\0RV[\x90V[a\0\x83\x90a\0DV[\x90V[a\0\x8F\x90a\0zV[\x90RV[\x91\x90a\0\xA6\x90_` \x85\x01\x94\x01\x90a\0\x86V[V[\x80a\0\xC3a\0\xBDa\0\xB8_a\0nV[a\0zV[\x91a\0zV[\x14a\0\xD3Wa\0\xD1\x90a\x01\xAEV[V[a\0\xFDa\0\xDF_a\0nV[a\0\xE7a\0,V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\0\x93V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x1Da\x01\"\x91a\x01\x01V[a\x01\x06V[\x90V[a\x01/\x90Ta\x01\x11V[\x90V[_\x1B\x90V[\x90a\x01H`\x01\x80`\xA0\x1B\x03\x91a\x012V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01fa\x01aa\x01k\x92a\0DV[a\0OV[a\0DV[\x90V[a\x01w\x90a\x01RV[\x90V[a\x01\x83\x90a\x01nV[\x90V[\x90V[\x90a\x01\x9Ea\x01\x99a\x01\xA5\x92a\x01zV[a\x01\x86V[\x82Ta\x017V[\x90UV[_\x01\x90V[a\x01\xB7_a\x01%V[a\x01\xC1\x82_a\x01\x89V[\x90a\x01\xF5a\x01\xEF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x01zV[\x91a\x01zV[\x91a\x01\xFEa\0,V[\x80a\x02\x08\x81a\x01\xA9V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0BnV[a\0\x1D_5a\x01<V[\x80c\x07C\xBFn\x14a\x017W\x80c*\x84\xB0\xF0\x14a\x012W\x80c2R\xC5\xFA\x14a\x01-W\x80cA\xFCq-\x14a\x01(W\x80cW\xD1\xBA%\x14a\x01#W\x80cb\xC7<\xAA\x14a\x01\x1EW\x80cf\xA1\xD1\x08\x14a\x01\x19W\x80cn\xDDl\t\x14a\x01\x14W\x80cqP\x18\xA6\x14a\x01\x0FW\x80c\x85\xE1\xF4\xD0\x14a\x01\nW\x80c\x8D\xA5\xCB[\x14a\x01\x05W\x80c\xA3\xC6\xE1\xE7\x14a\x01\0W\x80c\xAAjC\xD8\x14a\0\xFBW\x80c\xBFm\xB6\xF8\x14a\0\xF6W\x80c\xD1\xF4s|\x14a\0\xF1W\x80c\xE7\x93\x88\xE6\x14a\0\xECW\x80c\xF2\xFD\xE3\x8B\x14a\0\xE7Wc\xF8\xA1D\xBE\x03a\0\x0EWa\x0B9V[a\n\xF7V[a\n\xC2V[a\n/V[a\t\xEBV[a\t\xA7V[a\tcV[a\t\x1FV[a\x08\xEAV[a\x08\xA8V[a\x08sV[a\x08/V[a\x07\xECV[a\x07:V[a\x06\xABV[a\x06\x02V[a\x03\xE2V[a\x03LV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01ZWV[a\x01LV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xA6W[` \x83\x10\x14a\x01\xA1WV[a\x01rV[\x91`\x7F\x16\x91a\x01\x96V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xDCa\x01\xD5\x83a\x01\x86V[\x80\x94a\x01\xB0V[\x91`\x01\x81\x16\x90\x81_\x14a\x023WP`\x01\x14a\x01\xF7W[PPPV[a\x02\x04\x91\x92\x93\x94Pa\x01\xB9V[\x91_\x92[\x81\x84\x10a\x02\x1BWPP\x01\x90_\x80\x80a\x01\xF2V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x08V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x01\xF2V[\x90a\x02X\x91a\x01\xC2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x83\x90a\x02[V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\x9DW`@RV[a\x02eV[\x90a\x02\xC2a\x02\xBB\x92a\x02\xB2a\x01BV[\x93\x84\x80\x92a\x02NV[\x03\x83a\x02yV[V[\x90_\x10a\x02\xD7Wa\x02\xD4\x90a\x02\xA2V[\x90V[a\x01_V[a\x02\xE8`\x0B_\x90a\x02\xC4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x03\"a\x03+` \x93a\x030\x93a\x03\x19\x81a\x02\xEBV[\x93\x84\x80\x93a\x02\xEFV[\x95\x86\x91\x01a\x02\xF8V[a\x02[V[\x01\x90V[a\x03I\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x03V[\x90V[4a\x03|Wa\x03\\6`\x04a\x01PV[a\x03xa\x03ga\x02\xDCV[a\x03oa\x01BV[\x91\x82\x91\x82a\x034V[\x03\x90\xF3[a\x01HV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x99\x90a\x03\x85V[\x90V[a\x03\xA5\x81a\x03\x90V[\x03a\x03\xACWV[_\x80\xFD[\x90P5\x90a\x03\xBD\x82a\x03\x9CV[V[\x90` \x82\x82\x03\x12a\x03\xD8Wa\x03\xD5\x91_\x01a\x03\xB0V[\x90V[a\x01LV[_\x01\x90V[4a\x04\x10Wa\x03\xFAa\x03\xF56`\x04a\x03\xBFV[a\rDV[a\x04\x02a\x01BV[\x80a\x04\x0C\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[\x90V[a\x04!\x81a\x04\x15V[\x03a\x04(WV[_\x80\xFD[\x90P5\x90a\x049\x82a\x04\x18V[V[\x15\x15\x90V[a\x04I\x81a\x04;V[\x03a\x04PWV[_\x80\xFD[\x90P5\x90a\x04a\x82a\x04@V[V[_\x80\xFD[_\x80\xFD[\x90a\x04~a\x04wa\x01BV[\x92\x83a\x02yV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9EWa\x04\x9A` \x91a\x02[V[\x01\x90V[a\x02eV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x04\xC3a\x04\xBE\x82a\x04\x80V[a\x04kV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x04\xDFWa\x04\xDD\x92a\x04\xA3V[V[a\x04gV[\x90\x80`\x1F\x83\x01\x12\x15a\x05\x02W\x81` a\x04\xFF\x935\x91\x01a\x04\xAEV[\x90V[a\x04cV[\x90a\x01\xA0\x82\x82\x03\x12a\x05\xFDWa\x05\x1F\x81_\x84\x01a\x03\xB0V[\x92a\x05-\x82` \x85\x01a\x04,V[\x92a\x05;\x83`@\x83\x01a\x04,V[\x92a\x05I\x81``\x84\x01a\x03\xB0V[\x92a\x05W\x82`\x80\x85\x01a\x03\xB0V[\x92a\x05e\x83`\xA0\x83\x01a\x04TV[\x92a\x05s\x81`\xC0\x84\x01a\x04,V[\x92a\x05\x81\x82`\xE0\x85\x01a\x04,V[\x92a\x05\x90\x83a\x01\0\x83\x01a\x03\xB0V[\x92a\x05\x9F\x81a\x01 \x84\x01a\x04,V[\x92a\x05\xAE\x82a\x01@\x85\x01a\x03\xB0V[\x92a\x01`\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xF8W\x83a\x05\xD0\x91\x83\x01a\x04\xE4V[\x92a\x01\x80\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xF3Wa\x05\xF0\x92\x01a\x04\xE4V[\x90V[a\x03\x81V[a\x03\x81V[a\x01LV[4a\x06@Wa\x06*a\x06\x156`\x04a\x05\x07V[\x9B\x9A\x90\x9A\x99\x91\x99\x98\x92\x98\x97\x93\x97\x96\x94\x96a\x18\xB7V[a\x062a\x01BV[\x80a\x06<\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06d\x90`\x08a\x06i\x93\x02a\x06EV[a\x06IV[\x90V[\x90a\x06w\x91Ta\x06TV[\x90V[a\x06\x86`\t_\x90a\x06lV[\x90V[a\x06\x92\x90a\x03\x90V[\x90RV[\x91\x90a\x06\xA9\x90_` \x85\x01\x94\x01\x90a\x06\x89V[V[4a\x06\xDBWa\x06\xBB6`\x04a\x01PV[a\x06\xD7a\x06\xC6a\x06zV[a\x06\xCEa\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[\x90V[a\x06\xF3\x90`\x08a\x06\xF8\x93\x02a\x06EV[a\x06\xE0V[\x90V[\x90a\x07\x06\x91Ta\x06\xE3V[\x90V[a\x07\x15`\x06_\x90a\x06\xFBV[\x90V[a\x07!\x90a\x04\x15V[\x90RV[\x91\x90a\x078\x90_` \x85\x01\x94\x01\x90a\x07\x18V[V[4a\x07jWa\x07J6`\x04a\x01PV[a\x07fa\x07Ua\x07\tV[a\x07]a\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x07\xB1W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x07\xACW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x07\xA7WV[a\x07sV[a\x07oV[a\x04cV[\x90` \x82\x82\x03\x12a\x07\xE7W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xE2Wa\x07\xDE\x92\x01a\x07wV[\x90\x91V[a\x03\x81V[a\x01LV[4a\x08\x1BWa\x08\x05a\x07\xFF6`\x04a\x07\xB6V[\x90a\x1AHV[a\x08\ra\x01BV[\x80a\x08\x17\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[a\x08,`\n_\x90a\x02\xC4V[\x90V[4a\x08_Wa\x08?6`\x04a\x01PV[a\x08[a\x08Ja\x08 V[a\x08Ra\x01BV[\x91\x82\x91\x82a\x034V[\x03\x90\xF3[a\x01HV[a\x08p`\x01_\x90a\x06lV[\x90V[4a\x08\xA3Wa\x08\x836`\x04a\x01PV[a\x08\x9Fa\x08\x8Ea\x08dV[a\x08\x96a\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[4a\x08\xD6Wa\x08\xB86`\x04a\x01PV[a\x08\xC0a\x1AyV[a\x08\xC8a\x01BV[\x80a\x08\xD2\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[a\x08\xE7`\x04_\x90a\x06\xFBV[\x90V[4a\t\x1AWa\x08\xFA6`\x04a\x01PV[a\t\x16a\t\x05a\x08\xDBV[a\t\ra\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[4a\tOWa\t/6`\x04a\x01PV[a\tKa\t:a\x1A\xA8V[a\tBa\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[a\t``\x08_\x90a\x06\xFBV[\x90V[4a\t\x93Wa\ts6`\x04a\x01PV[a\t\x8Fa\t~a\tTV[a\t\x86a\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[a\t\xA4`\x02_\x90a\x06lV[\x90V[4a\t\xD7Wa\t\xB76`\x04a\x01PV[a\t\xD3a\t\xC2a\t\x98V[a\t\xCAa\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[a\t\xE8`\x03_\x90a\x06lV[\x90V[4a\n\x1BWa\t\xFB6`\x04a\x01PV[a\n\x17a\n\x06a\t\xDCV[a\n\x0Ea\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[a\n,`\x07_\x90a\x06\xFBV[\x90V[4a\n_Wa\n?6`\x04a\x01PV[a\n[a\nJa\n V[a\nRa\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[`\xFF\x16\x90V[a\nz\x90`\x08a\n\x7F\x93\x02a\x06EV[a\ndV[\x90V[\x90a\n\x8D\x91Ta\njV[\x90V[a\n\x9D`\x03`\x14\x90a\n\x82V[\x90V[a\n\xA9\x90a\x04;V[\x90RV[\x91\x90a\n\xC0\x90_` \x85\x01\x94\x01\x90a\n\xA0V[V[4a\n\xF2Wa\n\xD26`\x04a\x01PV[a\n\xEEa\n\xDDa\n\x90V[a\n\xE5a\x01BV[\x91\x82\x91\x82a\n\xADV[\x03\x90\xF3[a\x01HV[4a\x0B%Wa\x0B\x0Fa\x0B\n6`\x04a\x03\xBFV[a\x1B)V[a\x0B\x17a\x01BV[\x80a\x0B!\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[a\x0B6`\x05_\x90a\x06\xFBV[\x90V[4a\x0BiWa\x0BI6`\x04a\x01PV[a\x0Bea\x0BTa\x0B*V[a\x0B\\a\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[_\x80\xFD[a\x0B\x83\x90a\x0B~a\x1B4V[a\x0C\xD2V[V[\x90V[\x90V[a\x0B\x9Fa\x0B\x9Aa\x0B\xA4\x92a\x0B\x85V[a\x0B\x88V[a\x03\x85V[\x90V[a\x0B\xB0\x90a\x0B\x8BV[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0C\r`'`@\x92a\x02\xEFV[a\x0C\x16\x81a\x0B\xB3V[\x01\x90V[a\x0C/\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\0V[\x90V[\x15a\x0C9WV[a\x0CAa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0CW`\x04\x82\x01a\x0C\x1AV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0Cq`\x01\x80`\xA0\x1B\x03\x91a\x0C[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\x8Fa\x0C\x8Aa\x0C\x94\x92a\x03\x85V[a\x0B\x88V[a\x03\x85V[\x90V[a\x0C\xA0\x90a\x0C{V[\x90V[a\x0C\xAC\x90a\x0C\x97V[\x90V[\x90V[\x90a\x0C\xC7a\x0C\xC2a\x0C\xCE\x92a\x0C\xA3V[a\x0C\xAFV[\x82Ta\x0C`V[\x90UV[a\x0C\xF7\x81a\x0C\xF0a\x0C\xEAa\x0C\xE5_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x0C2V[a\r\x02\x81`\ta\x0C\xB2V[a\r,\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0C\xA3V[\x90a\r5a\x01BV[\x80a\r?\x81a\x03\xDDV[\x03\x90\xA2V[a\rM\x90a\x0BrV[V[`@\x1C\x90V[a\raa\rf\x91a\rOV[a\ndV[\x90V[a\rs\x90Ta\rUV[\x90V[_\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\r\x94a\r\x99\x91a\rvV[a\r{V[\x90V[a\r\xA6\x90Ta\r\x88V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\r\xCAa\r\xC5a\r\xCF\x92a\x0B\x85V[a\x0B\x88V[a\r\xA9V[\x90V[\x90V[a\r\xE9a\r\xE4a\r\xEE\x92a\r\xD2V[a\x0B\x88V[a\r\xA9V[\x90V[a\r\xFA\x90a\x0C\x97V[\x90V[a\x0E\x11a\x0E\x0Ca\x0E\x16\x92a\x0B\x85V[a\x0B\x88V[a\x04\x15V[\x90V[\x90a\x0E,g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0C[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0EJa\x0EEa\x0EO\x92a\r\xA9V[a\x0B\x88V[a\r\xA9V[\x90V[\x90V[\x90a\x0Eja\x0Eea\x0Eq\x92a\x0E6V[a\x0ERV[\x82Ta\x0E\x19V[\x90UV[`@\x1B\x90V[\x90a\x0E\x8Fh\xFF\0\0\0\0\0\0\0\0\x91a\x0EuV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xA2\x90a\x04;V[\x90V[\x90V[\x90a\x0E\xBDa\x0E\xB8a\x0E\xC4\x92a\x0E\x99V[a\x0E\xA5V[\x82Ta\x0E{V[\x90UV[a\x0E\xD1\x90a\r\xD5V[\x90RV[\x91\x90a\x0E\xE8\x90_` \x85\x01\x94\x01\x90a\x0E\xC8V[V[\x99\x96\x93\x90\x9A\x97\x94\x91\x9B\x98\x95\x92a\x0E\xFEa\x1B\x89V[\x9C\x8D\x9C\x8D_\x01a\x0F\r\x90a\riV[\x15a\x0F\x17\x90a\x04;V[\x80\x9E_\x01a\x0F$\x90a\r\x9CV[\x90\x81_a\x0F0\x90a\r\xB6V[\x90a\x0F:\x90a\r\xA9V[\x14\x90\x81a\x10aW[P\x90a\x0FWa\x0FQ`\x01a\r\xD5V[\x91a\r\xA9V[\x14\x80a\x109W[a\x0Fi\x90\x91\x15a\x04;V[\x90\x81a\x10(W[Pa\x10\x05Wa\x0F\x9B\x9C\x8F\x8Fa\x0F\x90a\x0F\x88`\x01a\r\xD5V[_\x84\x01a\x0EUV[a\x0F\xF1W[Pa\x17.V[a\x0F\xA3W[PV[a\x0F\xB0\x90_\x80\x91\x01a\x0E\xA8V[`\x01a\x0F\xE8\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x0F\xDFa\x01BV[\x91\x82\x91\x82a\x0E\xD5V[\x03\x90\xA1_a\x0F\xA0V[a\x0F\xFF\x90_`\x01\x91\x01a\x0E\xA8V[\x8Fa\x0F\x95V[a\x10\ra\x01BV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x10$`\x04\x82\x01a\x03\xDDV[\x03\x90\xFD[a\x103\x91P\x15a\x04;V[_a\x0FpV[Pa\x0Fia\x10F0a\r\xF1V[;a\x10Ya\x10S_a\r\xFDV[\x91a\x04\x15V[\x14\x90Pa\x0F^V[\x90P\x8Fa\x0FBV[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x10\x9D`\x1C` \x92a\x02\xEFV[a\x10\xA6\x81a\x10iV[\x01\x90V[a\x10\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x10\x90V[\x90V[\x15a\x10\xC9WV[a\x10\xD1a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10\xE7`\x04\x82\x01a\x10\xAAV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\x1F`\x17` \x92a\x02\xEFV[a\x11(\x81a\x10\xEBV[\x01\x90V[a\x11A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\x12V[\x90V[\x15a\x11KWV[a\x11Sa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x11i`\x04\x82\x01a\x11,V[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x11\xC7`\"`@\x92a\x02\xEFV[a\x11\xD0\x81a\x11mV[\x01\x90V[a\x11\xE9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xBAV[\x90V[\x15a\x11\xF3WV[a\x11\xFBa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\x11`\x04\x82\x01a\x11\xD4V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x12o`&`@\x92a\x02\xEFV[a\x12x\x81a\x12\x15V[\x01\x90V[a\x12\x91\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12bV[\x90V[\x15a\x12\x9BWV[a\x12\xA3a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xB9`\x04\x82\x01a\x12|V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x13\x17`%`@\x92a\x02\xEFV[a\x13 \x81a\x12\xBDV[\x01\x90V[a\x139\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\nV[\x90V[\x15a\x13CWV[a\x13Ka\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13a`\x04\x82\x01a\x13$V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x13\xBF`*`@\x92a\x02\xEFV[a\x13\xC8\x81a\x13eV[\x01\x90V[a\x13\xE1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xB2V[\x90V[\x15a\x13\xEBWV[a\x13\xF3a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\t`\x04\x82\x01a\x13\xCCV[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x14g`#`@\x92a\x02\xEFV[a\x14p\x81a\x14\rV[\x01\x90V[a\x14\x89\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14ZV[\x90V[\x15a\x14\x93WV[a\x14\x9Ba\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xB1`\x04\x82\x01a\x14tV[\x03\x90\xFD[\x90a\x14\xC1_\x19\x91a\x0C[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x14\xDFa\x14\xDAa\x14\xE4\x92a\x04\x15V[a\x0B\x88V[a\x04\x15V[\x90V[\x90V[\x90a\x14\xFFa\x14\xFAa\x15\x06\x92a\x14\xCBV[a\x14\xE7V[\x82Ta\x14\xB5V[\x90UV[`\xA0\x1B\x90V[\x90a\x15\x1F`\xFF`\xA0\x1B\x91a\x15\nV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x15>a\x159a\x15E\x92a\x0E\x99V[a\x0E\xA5V[\x82Ta\x15\x10V[\x90UV[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x15r\x91\x02\x91a\x15l_\x19\x84a\x15SV[\x92a\x15SV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x15\x92a\x15\x8Da\x15\x9A\x93a\x14\xCBV[a\x14\xE7V[\x90\x83Ta\x15WV[\x90UV[_\x90V[a\x15\xB4\x91a\x15\xAEa\x15\x9EV[\x91a\x15|V[V[[\x81\x81\x10a\x15\xC2WPPV[\x80a\x15\xCF_`\x01\x93a\x15\xA2V[\x01a\x15\xB7V[\x91\x90`\x1F\x81\x11a\x15\xE5W[PPPV[a\x15\xF1a\x16\x16\x93a\x01\xB9V[\x90` a\x15\xFD\x84a\x15IV[\x83\x01\x93\x10a\x16\x1EW[a\x16\x0F\x90a\x15IV[\x01\x90a\x15\xB6V[_\x80\x80a\x15\xE0V[\x91Pa\x16\x0F\x81\x92\x90Pa\x16\x06V[\x90a\x16<\x90_\x19\x90`\x08\x02a\x06EV[\x19\x16\x90V[\x81a\x16K\x91a\x16,V[\x90`\x02\x02\x17\x90V[\x90a\x16]\x81a\x02\xEBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17\x1DWa\x16\x81\x82a\x16{\x85Ta\x01\x86V[\x85a\x15\xD5V[` \x90`\x1F\x83\x11`\x01\x14a\x16\xB5W\x91\x80\x91a\x16\xA4\x93_\x92a\x16\xA9W[PPa\x16AV[\x90U[V[\x90\x91P\x01Q_\x80a\x16\x9DV[`\x1F\x19\x83\x16\x91a\x16\xC4\x85a\x01\xB9V[\x92_[\x81\x81\x10a\x17\x05WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x16\xEBW[PPP\x02\x01\x90Ua\x16\xA7V[a\x16\xFB\x91\x01Q`\x1F\x84\x16\x90a\x16,V[\x90U_\x80\x80a\x16\xDFV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x16\xC7V[a\x02eV[\x90a\x17,\x91a\x16SV[V[\x9A\x96a\x18\x8D\x90a\x18\x86a\x18\xA2\x98a\x18\xB5\x9F\x9C\x96\x8F\x99a\x18\xB0\x9F\x9Aa\x18\x9B\x9Aa\x18\xA9\x9F\x98a\x18\x7F\x94a\x18j\x8F\x9Ca\x18ca\x18q\x94a\x18\x94\x9F\x8F\x90a\x18;a\x18\\\x92a\x17\x96a\x18x\x9Ca\x17\x8Fa\x17\x89a\x17\x84_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x10\xC2V[a\x17\xB3\x85a\x17\xACa\x17\xA6_a\r\xFDV[\x91a\x04\x15V[\x14\x15a\x11DV[a\x17\xD0\x87a\x17\xC9a\x17\xC3_a\r\xFDV[\x91a\x04\x15V[\x14\x15a\x11\xECV[a\x17\xF5\x89a\x17\xEEa\x17\xE8a\x17\xE3_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x12\x94V[a\x18\x1A\x8Ba\x18\x13a\x18\ra\x18\x08_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x13<V[a\x184a\x18.a\x18)_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x13\xE4V[a\x18Ua\x18Oa\x18J_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x14\x8CV[`\x04a\x14\xEAV[`\x05a\x14\xEAV[`\x01a\x0C\xB2V[`\x02a\x0C\xB2V[`\x03a\x15)V[`\x06a\x14\xEAV[`\x07a\x14\xEAV[`\x03a\x0C\xB2V[`\x08a\x14\xEAV[`\ta\x0C\xB2V[`\na\x17\"V[`\x0Ba\x17\"V[a\x1B\xADV[V[\x90a\x18\xCC\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x0E\xEAV[V[\x90a\x18\xE0\x91a\x18\xDBa\x1B4V[a\x19\xFFV[V[P\x90V[\x91a\x18\xF1\x90\x82a\x18\xE2V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x19\xB0Wa\x19\x15\x82a\x19\x0F\x85Ta\x01\x86V[\x85a\x15\xD5V[_\x90`\x1F\x83\x11`\x01\x14a\x19HW\x91\x80\x91a\x197\x93_\x92a\x19<W[PPa\x16AV[\x90U[V[\x90\x91P\x015_\x80a\x190V[`\x1F\x19\x83\x16\x91a\x19W\x85a\x01\xB9V[\x92_[\x81\x81\x10a\x19\x98WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x19~W[PPP\x02\x01\x90Ua\x19:V[a\x19\x8E\x91\x015`\x1F\x84\x16\x90a\x16,V[\x90U_\x80\x80a\x19rV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x19ZV[a\x02eV[\x90a\x19\xC0\x92\x91a\x18\xE6V[V[\x91\x90a\x19\xDC\x81a\x19\xD5\x81a\x19\xE1\x95a\x02\xEFV[\x80\x95a\x04\xA3V[a\x02[V[\x01\x90V[\x90\x91a\x19\xFC\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x19\xC2V[\x90V[a\x1A\x0C\x81\x83\x90`\na\x19\xB5V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1ACa\x1A:a\x01BV[\x92\x83\x92\x83a\x19\xE5V[\x03\x90\xA1V[\x90a\x1AR\x91a\x18\xCEV[V[a\x1A\\a\x1B4V[a\x1Ada\x1AfV[V[a\x1Awa\x1Ar_a\x0B\xA7V[a\x1B\xADV[V[a\x1A\x81a\x1ATV[V[_\x90V[a\x1A\x93a\x1A\x98\x91a\rvV[a\x06IV[\x90V[a\x1A\xA5\x90Ta\x1A\x87V[\x90V[a\x1A\xB0a\x1A\x83V[Pa\x1A\xBA_a\x1A\x9BV[\x90V[a\x1A\xCE\x90a\x1A\xC9a\x1B4V[a\x1A\xD0V[V[\x80a\x1A\xEBa\x1A\xE5a\x1A\xE0_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14a\x1A\xFBWa\x1A\xF9\x90a\x1B\xADV[V[a\x1B%a\x1B\x07_a\x0B\xA7V[a\x1B\x0Fa\x01BV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x96V[\x03\x90\xFD[a\x1B2\x90a\x1A\xBDV[V[a\x1B<a\x1A\xA8V[a\x1BUa\x1BOa\x1BJa\x1C\x0CV[a\x03\x90V[\x91a\x03\x90V[\x03a\x1B\\WV[a\x1B\x85a\x1Bga\x1C\x0CV[a\x1Boa\x01BV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x96V[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1B\xB6_a\x1A\x9BV[a\x1B\xC0\x82_a\x0C\xB2V[\x90a\x1B\xF4a\x1B\xEE\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\xA3V[\x91a\x0C\xA3V[\x91a\x1B\xFDa\x01BV[\x80a\x1C\x07\x81a\x03\xDDV[\x03\x90\xA3V[a\x1C\x14a\x1A\x83V[P3\x90V\xFE\xA2dipfsX\"\x12 \xCC\t-\0\xE0\xCD[\r\x89\xB7b\xFC\xCC\x0F\xF6\xC5\xF8]\xC7\x88\x08\xD8W\xA6,\x99q#\x94\xA37\xC4dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610b6e565b61001d5f3561013c565b80630743bf6e146101375780632a84b0f0146101325780633252c5fa1461012d57806341fc712d1461012857806357d1ba251461012357806362c73caa1461011e57806366a1d108146101195780636edd6c0914610114578063715018a61461010f57806385e1f4d01461010a5780638da5cb5b14610105578063a3c6e1e714610100578063aa6a43d8146100fb578063bf6db6f8146100f6578063d1f4737c146100f1578063e79388e6146100ec578063f2fde38b146100e75763f8a144be0361000e57610b39565b610af7565b610ac2565b610a2f565b6109eb565b6109a7565b610963565b61091f565b6108ea565b6108a8565b610873565b61082f565b6107ec565b61073a565b6106ab565b610602565b6103e2565b61034c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015a57565b61014c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101a6575b60208310146101a157565b610172565b91607f1691610196565b60209181520190565b5f5260205f2090565b905f92918054906101dc6101d583610186565b80946101b0565b916001811690815f1461023357506001146101f7575b505050565b61020491929394506101b9565b915f925b81841061021b57505001905f80806101f2565b60018160209295939554848601520191019290610208565b92949550505060ff19168252151560200201905f80806101f2565b90610258916101c2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102839061025b565b810190811067ffffffffffffffff82111761029d57604052565b610265565b906102c26102bb926102b2610142565b9384809261024e565b0383610279565b565b905f106102d7576102d4906102a2565b90565b61015f565b6102e8600b5f906102c4565b90565b5190565b60209181520190565b90825f9392825e0152565b61032261032b60209361033093610319816102eb565b938480936102ef565b958691016102f8565b61025b565b0190565b6103499160208201915f818403910152610303565b90565b3461037c5761035c366004610150565b6103786103676102dc565b61036f610142565b91829182610334565b0390f35b610148565b5f80fd5b60018060a01b031690565b61039990610385565b90565b6103a581610390565b036103ac57565b5f80fd5b905035906103bd8261039c565b565b906020828203126103d8576103d5915f016103b0565b90565b61014c565b5f0190565b34610410576103fa6103f53660046103bf565b610d44565b610402610142565b8061040c816103dd565b0390f35b610148565b90565b61042181610415565b0361042857565b5f80fd5b9050359061043982610418565b565b151590565b6104498161043b565b0361045057565b5f80fd5b9050359061046182610440565b565b5f80fd5b5f80fd5b9061047e610477610142565b9283610279565b565b67ffffffffffffffff811161049e5761049a60209161025b565b0190565b610265565b90825f939282370152565b909291926104c36104be82610480565b61046b565b938185526020850190828401116104df576104dd926104a3565b565b610467565b9080601f83011215610502578160206104ff933591016104ae565b90565b610463565b906101a0828203126105fd5761051f815f84016103b0565b9261052d826020850161042c565b9261053b836040830161042c565b9261054981606084016103b0565b9261055782608085016103b0565b926105658360a08301610454565b926105738160c0840161042c565b926105818260e0850161042c565b926105908361010083016103b0565b9261059f81610120840161042c565b926105ae8261014085016103b0565b9261016081013567ffffffffffffffff81116105f857836105d09183016104e4565b9261018082013567ffffffffffffffff81116105f3576105f092016104e4565b90565b610381565b610381565b61014c565b346106405761062a610615366004610507565b9b9a909a9991999892989793979694966118b7565b610632610142565b8061063c816103dd565b0390f35b610148565b1c90565b60018060a01b031690565b6106649060086106699302610645565b610649565b90565b906106779154610654565b90565b61068660095f9061066c565b90565b61069290610390565b9052565b91906106a9905f60208501940190610689565b565b346106db576106bb366004610150565b6106d76106c661067a565b6106ce610142565b91829182610696565b0390f35b610148565b90565b6106f39060086106f89302610645565b6106e0565b90565b9061070691546106e3565b90565b61071560065f906106fb565b90565b61072190610415565b9052565b9190610738905f60208501940190610718565b565b3461076a5761074a366004610150565b610766610755610709565b61075d610142565b91829182610725565b0390f35b610148565b5f80fd5b5f80fd5b909182601f830112156107b15781359167ffffffffffffffff83116107ac5760200192600183028401116107a757565b610773565b61076f565b610463565b906020828203126107e7575f82013567ffffffffffffffff81116107e2576107de9201610777565b9091565b610381565b61014c565b3461081b576108056107ff3660046107b6565b90611a48565b61080d610142565b80610817816103dd565b0390f35b610148565b61082c600a5f906102c4565b90565b3461085f5761083f366004610150565b61085b61084a610820565b610852610142565b91829182610334565b0390f35b610148565b61087060015f9061066c565b90565b346108a357610883366004610150565b61089f61088e610864565b610896610142565b91829182610696565b0390f35b610148565b346108d6576108b8366004610150565b6108c0611a79565b6108c8610142565b806108d2816103dd565b0390f35b610148565b6108e760045f906106fb565b90565b3461091a576108fa366004610150565b6109166109056108db565b61090d610142565b91829182610725565b0390f35b610148565b3461094f5761092f366004610150565b61094b61093a611aa8565b610942610142565b91829182610696565b0390f35b610148565b61096060085f906106fb565b90565b3461099357610973366004610150565b61098f61097e610954565b610986610142565b91829182610725565b0390f35b610148565b6109a460025f9061066c565b90565b346109d7576109b7366004610150565b6109d36109c2610998565b6109ca610142565b91829182610696565b0390f35b610148565b6109e860035f9061066c565b90565b34610a1b576109fb366004610150565b610a17610a066109dc565b610a0e610142565b91829182610696565b0390f35b610148565b610a2c60075f906106fb565b90565b34610a5f57610a3f366004610150565b610a5b610a4a610a20565b610a52610142565b91829182610725565b0390f35b610148565b60ff1690565b610a7a906008610a7f9302610645565b610a64565b90565b90610a8d9154610a6a565b90565b610a9d6003601490610a82565b90565b610aa99061043b565b9052565b9190610ac0905f60208501940190610aa0565b565b34610af257610ad2366004610150565b610aee610add610a90565b610ae5610142565b91829182610aad565b0390f35b610148565b34610b2557610b0f610b0a3660046103bf565b611b29565b610b17610142565b80610b21816103dd565b0390f35b610148565b610b3660055f906106fb565b90565b34610b6957610b49366004610150565b610b65610b54610b2a565b610b5c610142565b91829182610725565b0390f35b610148565b5f80fd5b610b8390610b7e611b34565b610cd2565b565b90565b90565b610b9f610b9a610ba492610b85565b610b88565b610385565b90565b610bb090610b8b565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610c0d60276040926102ef565b610c1681610bb3565b0190565b610c2f9060208101905f818303910152610c00565b90565b15610c3957565b610c41610142565b62461bcd60e51b815280610c5760048201610c1a565b0390fd5b5f1b90565b90610c7160018060a01b0391610c5b565b9181191691161790565b610c8f610c8a610c9492610385565b610b88565b610385565b90565b610ca090610c7b565b90565b610cac90610c97565b90565b90565b90610cc7610cc2610cce92610ca3565b610caf565b8254610c60565b9055565b610cf781610cf0610cea610ce55f610ba7565b610390565b91610390565b1415610c32565b610d02816009610cb2565b610d2c7f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610ca3565b90610d35610142565b80610d3f816103dd565b0390a2565b610d4d90610b72565b565b60401c90565b610d61610d6691610d4f565b610a64565b90565b610d739054610d55565b90565b5f1c90565b67ffffffffffffffff1690565b610d94610d9991610d76565b610d7b565b90565b610da69054610d88565b90565b67ffffffffffffffff1690565b610dca610dc5610dcf92610b85565b610b88565b610da9565b90565b90565b610de9610de4610dee92610dd2565b610b88565b610da9565b90565b610dfa90610c97565b90565b610e11610e0c610e1692610b85565b610b88565b610415565b90565b90610e2c67ffffffffffffffff91610c5b565b9181191691161790565b610e4a610e45610e4f92610da9565b610b88565b610da9565b90565b90565b90610e6a610e65610e7192610e36565b610e52565b8254610e19565b9055565b60401b90565b90610e8f68ff000000000000000091610e75565b9181191691161790565b610ea29061043b565b90565b90565b90610ebd610eb8610ec492610e99565b610ea5565b8254610e7b565b9055565b610ed190610dd5565b9052565b9190610ee8905f60208501940190610ec8565b565b999693909a9794919b989592610efe611b89565b9c8d9c8d5f01610f0d90610d69565b15610f179061043b565b809e5f01610f2490610d9c565b90815f610f3090610db6565b90610f3a90610da9565b149081611061575b5090610f57610f516001610dd5565b91610da9565b1480611039575b610f6990911561043b565b9081611028575b5061100557610f9b9c8f8f610f90610f886001610dd5565b5f8401610e55565b610ff1575b5061172e565b610fa3575b50565b610fb0905f809101610ea8565b6001610fe87fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610fdf610142565b91829182610ed5565b0390a15f610fa0565b610fff905f60019101610ea8565b8f610f95565b61100d610142565b63f92ee8a960e01b815280611024600482016103dd565b0390fd5b61103391501561043b565b5f610f70565b50610f6961104630610df1565b3b6110596110535f610dfd565b91610415565b149050610f5e565b90508f610f42565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b61109d601c6020926102ef565b6110a681611069565b0190565b6110bf9060208101905f818303910152611090565b90565b156110c957565b6110d1610142565b62461bcd60e51b8152806110e7600482016110aa565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61111f60176020926102ef565b611128816110eb565b0190565b6111419060208101905f818303910152611112565b90565b1561114b57565b611153610142565b62461bcd60e51b8152806111696004820161112c565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6111c760226040926102ef565b6111d08161116d565b0190565b6111e99060208101905f8183039101526111ba565b90565b156111f357565b6111fb610142565b62461bcd60e51b815280611211600482016111d4565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b61126f60266040926102ef565b61127881611215565b0190565b6112919060208101905f818303910152611262565b90565b1561129b57565b6112a3610142565b62461bcd60e51b8152806112b96004820161127c565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61131760256040926102ef565b611320816112bd565b0190565b6113399060208101905f81830391015261130a565b90565b1561134357565b61134b610142565b62461bcd60e51b81528061136160048201611324565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6113bf602a6040926102ef565b6113c881611365565b0190565b6113e19060208101905f8183039101526113b2565b90565b156113eb57565b6113f3610142565b62461bcd60e51b815280611409600482016113cc565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61146760236040926102ef565b6114708161140d565b0190565b6114899060208101905f81830391015261145a565b90565b1561149357565b61149b610142565b62461bcd60e51b8152806114b160048201611474565b0390fd5b906114c15f1991610c5b565b9181191691161790565b6114df6114da6114e492610415565b610b88565b610415565b90565b90565b906114ff6114fa611506926114cb565b6114e7565b82546114b5565b9055565b60a01b90565b9061151f60ff60a01b9161150a565b9181191691161790565b9061153e61153961154592610e99565b610ea5565b8254611510565b9055565b601f602091010490565b1b90565b9190600861157291029161156c5f1984611553565b92611553565b9181191691161790565b919061159261158d61159a936114cb565b6114e7565b908354611557565b9055565b5f90565b6115b4916115ae61159e565b9161157c565b565b5b8181106115c2575050565b806115cf5f6001936115a2565b016115b7565b9190601f81116115e5575b505050565b6115f1611616936101b9565b9060206115fd84611549565b8301931061161e575b61160f90611549565b01906115b6565b5f80806115e0565b915061160f81929050611606565b9061163c905f1990600802610645565b191690565b8161164b9161162c565b906002021790565b9061165d816102eb565b9067ffffffffffffffff821161171d576116818261167b8554610186565b856115d5565b602090601f83116001146116b5579180916116a4935f926116a9575b5050611641565b90555b565b90915001515f8061169d565b601f198316916116c4856101b9565b925f5b818110611705575091600293918560019694106116eb575b505050020190556116a7565b6116fb910151601f84169061162c565b90555f80806116df565b919360206001819287870151815501950192016116c7565b610265565b9061172c91611653565b565b9a9661188d906118866118a2986118b59f9c968f996118b09f9a61189b9a6118a99f9861187f9461186a8f9c611863611871946118949f8f9061183b61185c926117966118789c61178f6117896117845f610ba7565b610390565b91610390565b14156110c2565b6117b3856117ac6117a65f610dfd565b91610415565b1415611144565b6117d0876117c96117c35f610dfd565b91610415565b14156111ec565b6117f5896117ee6117e86117e35f610ba7565b610390565b91610390565b1415611294565b61181a8b61181361180d6118085f610ba7565b610390565b91610390565b141561133c565b61183461182e6118295f610ba7565b610390565b91610390565b14156113e4565b61185561184f61184a5f610ba7565b610390565b91610390565b141561148c565b60046114ea565b60056114ea565b6001610cb2565b6002610cb2565b6003611529565b60066114ea565b60076114ea565b6003610cb2565b60086114ea565b6009610cb2565b600a611722565b600b611722565b611bad565b565b906118cc9c9b9a999897969594939291610eea565b565b906118e0916118db611b34565b6119ff565b565b5090565b916118f190826118e2565b9067ffffffffffffffff82116119b0576119158261190f8554610186565b856115d5565b5f90601f831160011461194857918091611937935f9261193c575b5050611641565b90555b565b90915001355f80611930565b601f19831691611957856101b9565b925f5b8181106119985750916002939185600196941061197e575b5050500201905561193a565b61198e910135601f84169061162c565b90555f8080611972565b9193602060018192878701358155019501920161195a565b610265565b906119c092916118e6565b565b91906119dc816119d5816119e1956102ef565b80956104a3565b61025b565b0190565b90916119fc9260208301925f8185039101526119c2565b90565b611a0c818390600a6119b5565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611a43611a3a610142565b928392836119e5565b0390a1565b90611a52916118ce565b565b611a5c611b34565b611a64611a66565b565b611a77611a725f610ba7565b611bad565b565b611a81611a54565b565b5f90565b611a93611a9891610d76565b610649565b90565b611aa59054611a87565b90565b611ab0611a83565b50611aba5f611a9b565b90565b611ace90611ac9611b34565b611ad0565b565b80611aeb611ae5611ae05f610ba7565b610390565b91610390565b14611afb57611af990611bad565b565b611b25611b075f610ba7565b611b0f610142565b918291631e4fbdf760e01b835260048301610696565b0390fd5b611b3290611abd565b565b611b3c611aa8565b611b55611b4f611b4a611c0c565b610390565b91610390565b03611b5c57565b611b85611b67611c0c565b611b6f610142565b91829163118cdaa760e01b835260048301610696565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611bb65f611a9b565b611bc0825f610cb2565b90611bf4611bee7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ca3565b91610ca3565b91611bfd610142565b80611c07816103dd565b0390a3565b611c14611a83565b50339056fea2646970667358221220cc092d00e0cd5b0d89b762fccc0ff6c5f85dc78808d857a62c99712394a337c464736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0BnV[a\0\x1D_5a\x01<V[\x80c\x07C\xBFn\x14a\x017W\x80c*\x84\xB0\xF0\x14a\x012W\x80c2R\xC5\xFA\x14a\x01-W\x80cA\xFCq-\x14a\x01(W\x80cW\xD1\xBA%\x14a\x01#W\x80cb\xC7<\xAA\x14a\x01\x1EW\x80cf\xA1\xD1\x08\x14a\x01\x19W\x80cn\xDDl\t\x14a\x01\x14W\x80cqP\x18\xA6\x14a\x01\x0FW\x80c\x85\xE1\xF4\xD0\x14a\x01\nW\x80c\x8D\xA5\xCB[\x14a\x01\x05W\x80c\xA3\xC6\xE1\xE7\x14a\x01\0W\x80c\xAAjC\xD8\x14a\0\xFBW\x80c\xBFm\xB6\xF8\x14a\0\xF6W\x80c\xD1\xF4s|\x14a\0\xF1W\x80c\xE7\x93\x88\xE6\x14a\0\xECW\x80c\xF2\xFD\xE3\x8B\x14a\0\xE7Wc\xF8\xA1D\xBE\x03a\0\x0EWa\x0B9V[a\n\xF7V[a\n\xC2V[a\n/V[a\t\xEBV[a\t\xA7V[a\tcV[a\t\x1FV[a\x08\xEAV[a\x08\xA8V[a\x08sV[a\x08/V[a\x07\xECV[a\x07:V[a\x06\xABV[a\x06\x02V[a\x03\xE2V[a\x03LV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01ZWV[a\x01LV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xA6W[` \x83\x10\x14a\x01\xA1WV[a\x01rV[\x91`\x7F\x16\x91a\x01\x96V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xDCa\x01\xD5\x83a\x01\x86V[\x80\x94a\x01\xB0V[\x91`\x01\x81\x16\x90\x81_\x14a\x023WP`\x01\x14a\x01\xF7W[PPPV[a\x02\x04\x91\x92\x93\x94Pa\x01\xB9V[\x91_\x92[\x81\x84\x10a\x02\x1BWPP\x01\x90_\x80\x80a\x01\xF2V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x08V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x01\xF2V[\x90a\x02X\x91a\x01\xC2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x83\x90a\x02[V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\x9DW`@RV[a\x02eV[\x90a\x02\xC2a\x02\xBB\x92a\x02\xB2a\x01BV[\x93\x84\x80\x92a\x02NV[\x03\x83a\x02yV[V[\x90_\x10a\x02\xD7Wa\x02\xD4\x90a\x02\xA2V[\x90V[a\x01_V[a\x02\xE8`\x0B_\x90a\x02\xC4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x03\"a\x03+` \x93a\x030\x93a\x03\x19\x81a\x02\xEBV[\x93\x84\x80\x93a\x02\xEFV[\x95\x86\x91\x01a\x02\xF8V[a\x02[V[\x01\x90V[a\x03I\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x03V[\x90V[4a\x03|Wa\x03\\6`\x04a\x01PV[a\x03xa\x03ga\x02\xDCV[a\x03oa\x01BV[\x91\x82\x91\x82a\x034V[\x03\x90\xF3[a\x01HV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x99\x90a\x03\x85V[\x90V[a\x03\xA5\x81a\x03\x90V[\x03a\x03\xACWV[_\x80\xFD[\x90P5\x90a\x03\xBD\x82a\x03\x9CV[V[\x90` \x82\x82\x03\x12a\x03\xD8Wa\x03\xD5\x91_\x01a\x03\xB0V[\x90V[a\x01LV[_\x01\x90V[4a\x04\x10Wa\x03\xFAa\x03\xF56`\x04a\x03\xBFV[a\rDV[a\x04\x02a\x01BV[\x80a\x04\x0C\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[\x90V[a\x04!\x81a\x04\x15V[\x03a\x04(WV[_\x80\xFD[\x90P5\x90a\x049\x82a\x04\x18V[V[\x15\x15\x90V[a\x04I\x81a\x04;V[\x03a\x04PWV[_\x80\xFD[\x90P5\x90a\x04a\x82a\x04@V[V[_\x80\xFD[_\x80\xFD[\x90a\x04~a\x04wa\x01BV[\x92\x83a\x02yV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9EWa\x04\x9A` \x91a\x02[V[\x01\x90V[a\x02eV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x04\xC3a\x04\xBE\x82a\x04\x80V[a\x04kV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x04\xDFWa\x04\xDD\x92a\x04\xA3V[V[a\x04gV[\x90\x80`\x1F\x83\x01\x12\x15a\x05\x02W\x81` a\x04\xFF\x935\x91\x01a\x04\xAEV[\x90V[a\x04cV[\x90a\x01\xA0\x82\x82\x03\x12a\x05\xFDWa\x05\x1F\x81_\x84\x01a\x03\xB0V[\x92a\x05-\x82` \x85\x01a\x04,V[\x92a\x05;\x83`@\x83\x01a\x04,V[\x92a\x05I\x81``\x84\x01a\x03\xB0V[\x92a\x05W\x82`\x80\x85\x01a\x03\xB0V[\x92a\x05e\x83`\xA0\x83\x01a\x04TV[\x92a\x05s\x81`\xC0\x84\x01a\x04,V[\x92a\x05\x81\x82`\xE0\x85\x01a\x04,V[\x92a\x05\x90\x83a\x01\0\x83\x01a\x03\xB0V[\x92a\x05\x9F\x81a\x01 \x84\x01a\x04,V[\x92a\x05\xAE\x82a\x01@\x85\x01a\x03\xB0V[\x92a\x01`\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xF8W\x83a\x05\xD0\x91\x83\x01a\x04\xE4V[\x92a\x01\x80\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xF3Wa\x05\xF0\x92\x01a\x04\xE4V[\x90V[a\x03\x81V[a\x03\x81V[a\x01LV[4a\x06@Wa\x06*a\x06\x156`\x04a\x05\x07V[\x9B\x9A\x90\x9A\x99\x91\x99\x98\x92\x98\x97\x93\x97\x96\x94\x96a\x18\xB7V[a\x062a\x01BV[\x80a\x06<\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06d\x90`\x08a\x06i\x93\x02a\x06EV[a\x06IV[\x90V[\x90a\x06w\x91Ta\x06TV[\x90V[a\x06\x86`\t_\x90a\x06lV[\x90V[a\x06\x92\x90a\x03\x90V[\x90RV[\x91\x90a\x06\xA9\x90_` \x85\x01\x94\x01\x90a\x06\x89V[V[4a\x06\xDBWa\x06\xBB6`\x04a\x01PV[a\x06\xD7a\x06\xC6a\x06zV[a\x06\xCEa\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[\x90V[a\x06\xF3\x90`\x08a\x06\xF8\x93\x02a\x06EV[a\x06\xE0V[\x90V[\x90a\x07\x06\x91Ta\x06\xE3V[\x90V[a\x07\x15`\x06_\x90a\x06\xFBV[\x90V[a\x07!\x90a\x04\x15V[\x90RV[\x91\x90a\x078\x90_` \x85\x01\x94\x01\x90a\x07\x18V[V[4a\x07jWa\x07J6`\x04a\x01PV[a\x07fa\x07Ua\x07\tV[a\x07]a\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x07\xB1W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x07\xACW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x07\xA7WV[a\x07sV[a\x07oV[a\x04cV[\x90` \x82\x82\x03\x12a\x07\xE7W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xE2Wa\x07\xDE\x92\x01a\x07wV[\x90\x91V[a\x03\x81V[a\x01LV[4a\x08\x1BWa\x08\x05a\x07\xFF6`\x04a\x07\xB6V[\x90a\x1AHV[a\x08\ra\x01BV[\x80a\x08\x17\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[a\x08,`\n_\x90a\x02\xC4V[\x90V[4a\x08_Wa\x08?6`\x04a\x01PV[a\x08[a\x08Ja\x08 V[a\x08Ra\x01BV[\x91\x82\x91\x82a\x034V[\x03\x90\xF3[a\x01HV[a\x08p`\x01_\x90a\x06lV[\x90V[4a\x08\xA3Wa\x08\x836`\x04a\x01PV[a\x08\x9Fa\x08\x8Ea\x08dV[a\x08\x96a\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[4a\x08\xD6Wa\x08\xB86`\x04a\x01PV[a\x08\xC0a\x1AyV[a\x08\xC8a\x01BV[\x80a\x08\xD2\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[a\x08\xE7`\x04_\x90a\x06\xFBV[\x90V[4a\t\x1AWa\x08\xFA6`\x04a\x01PV[a\t\x16a\t\x05a\x08\xDBV[a\t\ra\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[4a\tOWa\t/6`\x04a\x01PV[a\tKa\t:a\x1A\xA8V[a\tBa\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[a\t``\x08_\x90a\x06\xFBV[\x90V[4a\t\x93Wa\ts6`\x04a\x01PV[a\t\x8Fa\t~a\tTV[a\t\x86a\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[a\t\xA4`\x02_\x90a\x06lV[\x90V[4a\t\xD7Wa\t\xB76`\x04a\x01PV[a\t\xD3a\t\xC2a\t\x98V[a\t\xCAa\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[a\t\xE8`\x03_\x90a\x06lV[\x90V[4a\n\x1BWa\t\xFB6`\x04a\x01PV[a\n\x17a\n\x06a\t\xDCV[a\n\x0Ea\x01BV[\x91\x82\x91\x82a\x06\x96V[\x03\x90\xF3[a\x01HV[a\n,`\x07_\x90a\x06\xFBV[\x90V[4a\n_Wa\n?6`\x04a\x01PV[a\n[a\nJa\n V[a\nRa\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[`\xFF\x16\x90V[a\nz\x90`\x08a\n\x7F\x93\x02a\x06EV[a\ndV[\x90V[\x90a\n\x8D\x91Ta\njV[\x90V[a\n\x9D`\x03`\x14\x90a\n\x82V[\x90V[a\n\xA9\x90a\x04;V[\x90RV[\x91\x90a\n\xC0\x90_` \x85\x01\x94\x01\x90a\n\xA0V[V[4a\n\xF2Wa\n\xD26`\x04a\x01PV[a\n\xEEa\n\xDDa\n\x90V[a\n\xE5a\x01BV[\x91\x82\x91\x82a\n\xADV[\x03\x90\xF3[a\x01HV[4a\x0B%Wa\x0B\x0Fa\x0B\n6`\x04a\x03\xBFV[a\x1B)V[a\x0B\x17a\x01BV[\x80a\x0B!\x81a\x03\xDDV[\x03\x90\xF3[a\x01HV[a\x0B6`\x05_\x90a\x06\xFBV[\x90V[4a\x0BiWa\x0BI6`\x04a\x01PV[a\x0Bea\x0BTa\x0B*V[a\x0B\\a\x01BV[\x91\x82\x91\x82a\x07%V[\x03\x90\xF3[a\x01HV[_\x80\xFD[a\x0B\x83\x90a\x0B~a\x1B4V[a\x0C\xD2V[V[\x90V[\x90V[a\x0B\x9Fa\x0B\x9Aa\x0B\xA4\x92a\x0B\x85V[a\x0B\x88V[a\x03\x85V[\x90V[a\x0B\xB0\x90a\x0B\x8BV[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0C\r`'`@\x92a\x02\xEFV[a\x0C\x16\x81a\x0B\xB3V[\x01\x90V[a\x0C/\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\0V[\x90V[\x15a\x0C9WV[a\x0CAa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0CW`\x04\x82\x01a\x0C\x1AV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0Cq`\x01\x80`\xA0\x1B\x03\x91a\x0C[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\x8Fa\x0C\x8Aa\x0C\x94\x92a\x03\x85V[a\x0B\x88V[a\x03\x85V[\x90V[a\x0C\xA0\x90a\x0C{V[\x90V[a\x0C\xAC\x90a\x0C\x97V[\x90V[\x90V[\x90a\x0C\xC7a\x0C\xC2a\x0C\xCE\x92a\x0C\xA3V[a\x0C\xAFV[\x82Ta\x0C`V[\x90UV[a\x0C\xF7\x81a\x0C\xF0a\x0C\xEAa\x0C\xE5_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x0C2V[a\r\x02\x81`\ta\x0C\xB2V[a\r,\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0C\xA3V[\x90a\r5a\x01BV[\x80a\r?\x81a\x03\xDDV[\x03\x90\xA2V[a\rM\x90a\x0BrV[V[`@\x1C\x90V[a\raa\rf\x91a\rOV[a\ndV[\x90V[a\rs\x90Ta\rUV[\x90V[_\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\r\x94a\r\x99\x91a\rvV[a\r{V[\x90V[a\r\xA6\x90Ta\r\x88V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\r\xCAa\r\xC5a\r\xCF\x92a\x0B\x85V[a\x0B\x88V[a\r\xA9V[\x90V[\x90V[a\r\xE9a\r\xE4a\r\xEE\x92a\r\xD2V[a\x0B\x88V[a\r\xA9V[\x90V[a\r\xFA\x90a\x0C\x97V[\x90V[a\x0E\x11a\x0E\x0Ca\x0E\x16\x92a\x0B\x85V[a\x0B\x88V[a\x04\x15V[\x90V[\x90a\x0E,g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0C[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0EJa\x0EEa\x0EO\x92a\r\xA9V[a\x0B\x88V[a\r\xA9V[\x90V[\x90V[\x90a\x0Eja\x0Eea\x0Eq\x92a\x0E6V[a\x0ERV[\x82Ta\x0E\x19V[\x90UV[`@\x1B\x90V[\x90a\x0E\x8Fh\xFF\0\0\0\0\0\0\0\0\x91a\x0EuV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xA2\x90a\x04;V[\x90V[\x90V[\x90a\x0E\xBDa\x0E\xB8a\x0E\xC4\x92a\x0E\x99V[a\x0E\xA5V[\x82Ta\x0E{V[\x90UV[a\x0E\xD1\x90a\r\xD5V[\x90RV[\x91\x90a\x0E\xE8\x90_` \x85\x01\x94\x01\x90a\x0E\xC8V[V[\x99\x96\x93\x90\x9A\x97\x94\x91\x9B\x98\x95\x92a\x0E\xFEa\x1B\x89V[\x9C\x8D\x9C\x8D_\x01a\x0F\r\x90a\riV[\x15a\x0F\x17\x90a\x04;V[\x80\x9E_\x01a\x0F$\x90a\r\x9CV[\x90\x81_a\x0F0\x90a\r\xB6V[\x90a\x0F:\x90a\r\xA9V[\x14\x90\x81a\x10aW[P\x90a\x0FWa\x0FQ`\x01a\r\xD5V[\x91a\r\xA9V[\x14\x80a\x109W[a\x0Fi\x90\x91\x15a\x04;V[\x90\x81a\x10(W[Pa\x10\x05Wa\x0F\x9B\x9C\x8F\x8Fa\x0F\x90a\x0F\x88`\x01a\r\xD5V[_\x84\x01a\x0EUV[a\x0F\xF1W[Pa\x17.V[a\x0F\xA3W[PV[a\x0F\xB0\x90_\x80\x91\x01a\x0E\xA8V[`\x01a\x0F\xE8\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x0F\xDFa\x01BV[\x91\x82\x91\x82a\x0E\xD5V[\x03\x90\xA1_a\x0F\xA0V[a\x0F\xFF\x90_`\x01\x91\x01a\x0E\xA8V[\x8Fa\x0F\x95V[a\x10\ra\x01BV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x10$`\x04\x82\x01a\x03\xDDV[\x03\x90\xFD[a\x103\x91P\x15a\x04;V[_a\x0FpV[Pa\x0Fia\x10F0a\r\xF1V[;a\x10Ya\x10S_a\r\xFDV[\x91a\x04\x15V[\x14\x90Pa\x0F^V[\x90P\x8Fa\x0FBV[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x10\x9D`\x1C` \x92a\x02\xEFV[a\x10\xA6\x81a\x10iV[\x01\x90V[a\x10\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x10\x90V[\x90V[\x15a\x10\xC9WV[a\x10\xD1a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10\xE7`\x04\x82\x01a\x10\xAAV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\x1F`\x17` \x92a\x02\xEFV[a\x11(\x81a\x10\xEBV[\x01\x90V[a\x11A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\x12V[\x90V[\x15a\x11KWV[a\x11Sa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x11i`\x04\x82\x01a\x11,V[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x11\xC7`\"`@\x92a\x02\xEFV[a\x11\xD0\x81a\x11mV[\x01\x90V[a\x11\xE9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xBAV[\x90V[\x15a\x11\xF3WV[a\x11\xFBa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\x11`\x04\x82\x01a\x11\xD4V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x12o`&`@\x92a\x02\xEFV[a\x12x\x81a\x12\x15V[\x01\x90V[a\x12\x91\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12bV[\x90V[\x15a\x12\x9BWV[a\x12\xA3a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xB9`\x04\x82\x01a\x12|V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x13\x17`%`@\x92a\x02\xEFV[a\x13 \x81a\x12\xBDV[\x01\x90V[a\x139\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\nV[\x90V[\x15a\x13CWV[a\x13Ka\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13a`\x04\x82\x01a\x13$V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x13\xBF`*`@\x92a\x02\xEFV[a\x13\xC8\x81a\x13eV[\x01\x90V[a\x13\xE1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xB2V[\x90V[\x15a\x13\xEBWV[a\x13\xF3a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\t`\x04\x82\x01a\x13\xCCV[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x14g`#`@\x92a\x02\xEFV[a\x14p\x81a\x14\rV[\x01\x90V[a\x14\x89\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14ZV[\x90V[\x15a\x14\x93WV[a\x14\x9Ba\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xB1`\x04\x82\x01a\x14tV[\x03\x90\xFD[\x90a\x14\xC1_\x19\x91a\x0C[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x14\xDFa\x14\xDAa\x14\xE4\x92a\x04\x15V[a\x0B\x88V[a\x04\x15V[\x90V[\x90V[\x90a\x14\xFFa\x14\xFAa\x15\x06\x92a\x14\xCBV[a\x14\xE7V[\x82Ta\x14\xB5V[\x90UV[`\xA0\x1B\x90V[\x90a\x15\x1F`\xFF`\xA0\x1B\x91a\x15\nV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x15>a\x159a\x15E\x92a\x0E\x99V[a\x0E\xA5V[\x82Ta\x15\x10V[\x90UV[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x15r\x91\x02\x91a\x15l_\x19\x84a\x15SV[\x92a\x15SV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x15\x92a\x15\x8Da\x15\x9A\x93a\x14\xCBV[a\x14\xE7V[\x90\x83Ta\x15WV[\x90UV[_\x90V[a\x15\xB4\x91a\x15\xAEa\x15\x9EV[\x91a\x15|V[V[[\x81\x81\x10a\x15\xC2WPPV[\x80a\x15\xCF_`\x01\x93a\x15\xA2V[\x01a\x15\xB7V[\x91\x90`\x1F\x81\x11a\x15\xE5W[PPPV[a\x15\xF1a\x16\x16\x93a\x01\xB9V[\x90` a\x15\xFD\x84a\x15IV[\x83\x01\x93\x10a\x16\x1EW[a\x16\x0F\x90a\x15IV[\x01\x90a\x15\xB6V[_\x80\x80a\x15\xE0V[\x91Pa\x16\x0F\x81\x92\x90Pa\x16\x06V[\x90a\x16<\x90_\x19\x90`\x08\x02a\x06EV[\x19\x16\x90V[\x81a\x16K\x91a\x16,V[\x90`\x02\x02\x17\x90V[\x90a\x16]\x81a\x02\xEBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17\x1DWa\x16\x81\x82a\x16{\x85Ta\x01\x86V[\x85a\x15\xD5V[` \x90`\x1F\x83\x11`\x01\x14a\x16\xB5W\x91\x80\x91a\x16\xA4\x93_\x92a\x16\xA9W[PPa\x16AV[\x90U[V[\x90\x91P\x01Q_\x80a\x16\x9DV[`\x1F\x19\x83\x16\x91a\x16\xC4\x85a\x01\xB9V[\x92_[\x81\x81\x10a\x17\x05WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x16\xEBW[PPP\x02\x01\x90Ua\x16\xA7V[a\x16\xFB\x91\x01Q`\x1F\x84\x16\x90a\x16,V[\x90U_\x80\x80a\x16\xDFV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x16\xC7V[a\x02eV[\x90a\x17,\x91a\x16SV[V[\x9A\x96a\x18\x8D\x90a\x18\x86a\x18\xA2\x98a\x18\xB5\x9F\x9C\x96\x8F\x99a\x18\xB0\x9F\x9Aa\x18\x9B\x9Aa\x18\xA9\x9F\x98a\x18\x7F\x94a\x18j\x8F\x9Ca\x18ca\x18q\x94a\x18\x94\x9F\x8F\x90a\x18;a\x18\\\x92a\x17\x96a\x18x\x9Ca\x17\x8Fa\x17\x89a\x17\x84_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x10\xC2V[a\x17\xB3\x85a\x17\xACa\x17\xA6_a\r\xFDV[\x91a\x04\x15V[\x14\x15a\x11DV[a\x17\xD0\x87a\x17\xC9a\x17\xC3_a\r\xFDV[\x91a\x04\x15V[\x14\x15a\x11\xECV[a\x17\xF5\x89a\x17\xEEa\x17\xE8a\x17\xE3_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x12\x94V[a\x18\x1A\x8Ba\x18\x13a\x18\ra\x18\x08_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x13<V[a\x184a\x18.a\x18)_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x13\xE4V[a\x18Ua\x18Oa\x18J_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14\x15a\x14\x8CV[`\x04a\x14\xEAV[`\x05a\x14\xEAV[`\x01a\x0C\xB2V[`\x02a\x0C\xB2V[`\x03a\x15)V[`\x06a\x14\xEAV[`\x07a\x14\xEAV[`\x03a\x0C\xB2V[`\x08a\x14\xEAV[`\ta\x0C\xB2V[`\na\x17\"V[`\x0Ba\x17\"V[a\x1B\xADV[V[\x90a\x18\xCC\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x0E\xEAV[V[\x90a\x18\xE0\x91a\x18\xDBa\x1B4V[a\x19\xFFV[V[P\x90V[\x91a\x18\xF1\x90\x82a\x18\xE2V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x19\xB0Wa\x19\x15\x82a\x19\x0F\x85Ta\x01\x86V[\x85a\x15\xD5V[_\x90`\x1F\x83\x11`\x01\x14a\x19HW\x91\x80\x91a\x197\x93_\x92a\x19<W[PPa\x16AV[\x90U[V[\x90\x91P\x015_\x80a\x190V[`\x1F\x19\x83\x16\x91a\x19W\x85a\x01\xB9V[\x92_[\x81\x81\x10a\x19\x98WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x19~W[PPP\x02\x01\x90Ua\x19:V[a\x19\x8E\x91\x015`\x1F\x84\x16\x90a\x16,V[\x90U_\x80\x80a\x19rV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x19ZV[a\x02eV[\x90a\x19\xC0\x92\x91a\x18\xE6V[V[\x91\x90a\x19\xDC\x81a\x19\xD5\x81a\x19\xE1\x95a\x02\xEFV[\x80\x95a\x04\xA3V[a\x02[V[\x01\x90V[\x90\x91a\x19\xFC\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x19\xC2V[\x90V[a\x1A\x0C\x81\x83\x90`\na\x19\xB5V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1ACa\x1A:a\x01BV[\x92\x83\x92\x83a\x19\xE5V[\x03\x90\xA1V[\x90a\x1AR\x91a\x18\xCEV[V[a\x1A\\a\x1B4V[a\x1Ada\x1AfV[V[a\x1Awa\x1Ar_a\x0B\xA7V[a\x1B\xADV[V[a\x1A\x81a\x1ATV[V[_\x90V[a\x1A\x93a\x1A\x98\x91a\rvV[a\x06IV[\x90V[a\x1A\xA5\x90Ta\x1A\x87V[\x90V[a\x1A\xB0a\x1A\x83V[Pa\x1A\xBA_a\x1A\x9BV[\x90V[a\x1A\xCE\x90a\x1A\xC9a\x1B4V[a\x1A\xD0V[V[\x80a\x1A\xEBa\x1A\xE5a\x1A\xE0_a\x0B\xA7V[a\x03\x90V[\x91a\x03\x90V[\x14a\x1A\xFBWa\x1A\xF9\x90a\x1B\xADV[V[a\x1B%a\x1B\x07_a\x0B\xA7V[a\x1B\x0Fa\x01BV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x96V[\x03\x90\xFD[a\x1B2\x90a\x1A\xBDV[V[a\x1B<a\x1A\xA8V[a\x1BUa\x1BOa\x1BJa\x1C\x0CV[a\x03\x90V[\x91a\x03\x90V[\x03a\x1B\\WV[a\x1B\x85a\x1Bga\x1C\x0CV[a\x1Boa\x01BV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x96V[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1B\xB6_a\x1A\x9BV[a\x1B\xC0\x82_a\x0C\xB2V[\x90a\x1B\xF4a\x1B\xEE\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\xA3V[\x91a\x0C\xA3V[\x91a\x1B\xFDa\x01BV[\x80a\x1C\x07\x81a\x03\xDDV[\x03\x90\xA3V[a\x1C\x14a\x1A\x83V[P3\x90V\xFE\xA2dipfsX\"\x12 \xCC\t-\0\xE0\xCD[\r\x89\xB7b\xFC\xCC\x0F\xF6\xC5\xF8]\xC7\x88\x08\xD8W\xA6,\x99q#\x94\xA37\xC4dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `APPCHAIN_BLOCK_EXPLORER_URL()` and selector `0x0743bf6e`.
```solidity
function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLCall {}
    ///Container type for the return parameters of the [`APPCHAIN_BLOCK_EXPLORER_URL()`](APPCHAIN_BLOCK_EXPLORER_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for APPCHAIN_BLOCK_EXPLORER_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = APPCHAIN_BLOCK_EXPLORER_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "APPCHAIN_BLOCK_EXPLORER_URL()";
            const SELECTOR: [u8; 4] = [7u8, 67u8, 191u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CHAIN_ID()` and selector `0xf8a144be`.
```solidity
function SEQUENCING_CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CHAIN_ID()`](SEQUENCING_CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CHAIN_ID()";
            const SELECTOR: [u8; 4] = [248u8, 161u8, 68u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string)` and selector `0x3252c5fa`.
```solidity
function initialize(address owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub appchainBlockExplorerUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value.owner,
                        value.chainId,
                        value.sequencingChainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                        value.appchainBlockExplorerUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        chainId: tuple.1,
                        sequencingChainId: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                        appchainBlockExplorerUrl: tuple.12,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string)";
            const SELECTOR: [u8; 4] = [50u8, 82u8, 197u8, 250u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.appchainBlockExplorerUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        APPCHAIN_BLOCK_EXPLORER_URL(APPCHAIN_BLOCK_EXPLORER_URLCall),
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CHAIN_ID(SEQUENCING_CHAIN_IDCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 67u8, 191u8, 110u8],
            [42u8, 132u8, 176u8, 240u8],
            [50u8, 82u8, 197u8, 250u8],
            [65u8, 252u8, 113u8, 45u8],
            [87u8, 209u8, 186u8, 37u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [113u8, 80u8, 24u8, 166u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
            [248u8, 161u8, 68u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::APPCHAIN_BLOCK_EXPLORER_URL(_) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CHAIN_ID(_) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn APPCHAIN_BLOCK_EXPLORER_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::APPCHAIN_BLOCK_EXPLORER_URL)
                    }
                    APPCHAIN_BLOCK_EXPLORER_URL
                },
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn SEQUENCING_CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CHAIN_ID)
                    }
                    SEQUENCING_CHAIN_ID
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`APPCHAIN_BLOCK_EXPLORER_URL`] function.
        pub fn APPCHAIN_BLOCK_EXPLORER_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, APPCHAIN_BLOCK_EXPLORER_URLCall, N> {
            self.call_builder(&APPCHAIN_BLOCK_EXPLORER_URLCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CHAIN_ID`] function.
        pub fn SEQUENCING_CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CHAIN_IDCall, N> {
            self.call_builder(&SEQUENCING_CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            owner: alloy::sol_types::private::Address,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
            appchainBlockExplorerUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    owner,
                    chainId,
                    sequencingChainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                    appchainBlockExplorerUrl,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
