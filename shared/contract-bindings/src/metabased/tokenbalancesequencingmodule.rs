/**

Generated by the following Solidity interface...
```solidity
interface TokenBalanceSequencingModule {
    constructor(address _tokenAddress, uint256 _minimumBalance);

    function isAllowed(address proposer) external view returns (bool);
    function minimumBalance() external view returns (uint256);
    function tokenAddress() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_tokenAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_minimumBalance",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "minimumBalance",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenAddress",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TokenBalanceSequencingModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c06040523461004f5761001a610014610149565b9061030e565b610022610054565b61042b610358823960805181818160710152610328015260a0518181816101030152610393015261042b90f35b61005a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100869061005e565b810190811060018060401b0382111761009e57604052565b610068565b906100b66100af610054565b928361007c565b565b5f80fd5b60018060a01b031690565b6100d0906100bc565b90565b6100dc816100c7565b036100e357565b5f80fd5b905051906100f4826100d3565b565b90565b610102816100f6565b0361010957565b5f80fd5b9050519061011a826100f9565b565b91906040838203126101445780610138610141925f86016100e7565b9360200161010d565b90565b6100b8565b6101676107838038038061015c816100a3565b92833981019061011c565b9091565b90565b90565b61018561018061018a9261016b565b61016e565b6100bc565b90565b61019690610171565b90565b60209181520190565b60207f726f206164647265737300000000000000000000000000000000000000000000917f546f6b656e42616c616e636553657175656e63696e674d6f64756c653a207a655f8201520152565b6101fc602a604092610199565b610205816101a2565b0190565b61021e9060208101905f8183039101526101ef565b90565b1561022857565b610230610054565b62461bcd60e51b81528061024660048201610209565b0390fd5b61025e6102596102639261016b565b61016e565b6100f6565b90565b60207f726f2062616c616e636500000000000000000000000000000000000000000000917f546f6b656e42616c616e636553657175656e63696e674d6f64756c653a207a655f8201520152565b6102c0602a604092610199565b6102c981610266565b0190565b6102e29060208101905f8183039101526102b3565b90565b156102ec57565b6102f4610054565b62461bcd60e51b81528061030a600482016102cd565b0390fd5b6103338161032c6103266103215f61018d565b6100c7565b916100c7565b1415610221565b61034f826103496103435f61024a565b916100f6565b116102e5565b60805260a05256fe60806040526004361015610013575b61021c565b61001d5f3561004c565b80639d76ea5814610047578063b9d1d49b146100425763babcc5390361000e576101e7565b61014a565b6100cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b6100a790610093565b90565b6100b39061009e565b9052565b91906100ca905f602085019401906100aa565b565b346100fc576100dc366004610060565b6100f86100e761006f565b6100ef610052565b918291826100b7565b0390f35b610058565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61013190610125565b9052565b9190610148905f60208501940190610128565b565b3461017a5761015a366004610060565b610176610165610101565b61016d610052565b91829182610135565b0390f35b610058565b6101888161009e565b0361018f57565b5f80fd5b905035906101a08261017f565b565b906020828203126101bb576101b8915f01610193565b90565b61005c565b151590565b6101ce906101c0565b9052565b91906101e5905f602085019401906101c5565b565b34610217576102136102026101fd3660046101a2565b610311565b61020a610052565b918291826101d2565b0390f35b610058565b5f80fd5b5f90565b90565b61023b61023661024092610093565b610224565b610093565b90565b61024c90610227565b90565b61025890610243565b90565b61026490610227565b90565b6102709061025b565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061029b90610273565b810190811067ffffffffffffffff8211176102b557604052565b61027d565b60e01b90565b6102c981610125565b036102d057565b5f80fd5b905051906102e1826102c0565b565b906020828203126102fc576102f9915f016102d4565b90565b61005c565b610309610052565b3d5f823e3d90fd5b60206103789161031f610220565b5061035161034c7f000000000000000000000000000000000000000000000000000000000000000061024f565b610267565b61036d6370a08231610361610052565b958694859384936102ba565b8352600483016100b7565b03915afa9081156103f0575f916103c2575b506103bd6103b77f0000000000000000000000000000000000000000000000000000000000000000610125565b91610125565b101590565b6103e3915060203d81116103e9575b6103db8183610291565b8101906102e3565b5f61038a565b503d6103d1565b61030156fea26469706673582212201da4f17a0dc4361b27d537d72a750c969e703bcda326f975092fa918db7d887c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4a\0OWa\0\x1Aa\0\x14a\x01IV[\x90a\x03\x0EV[a\0\"a\0TV[a\x04+a\x03X\x829`\x80Q\x81\x81\x81`q\x01Ra\x03(\x01R`\xA0Q\x81\x81\x81a\x01\x03\x01Ra\x03\x93\x01Ra\x04+\x90\xF3[a\0ZV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x86\x90a\0^V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x9EW`@RV[a\0hV[\x90a\0\xB6a\0\xAFa\0TV[\x92\x83a\0|V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD0\x90a\0\xBCV[\x90V[a\0\xDC\x81a\0\xC7V[\x03a\0\xE3WV[_\x80\xFD[\x90PQ\x90a\0\xF4\x82a\0\xD3V[V[\x90V[a\x01\x02\x81a\0\xF6V[\x03a\x01\tWV[_\x80\xFD[\x90PQ\x90a\x01\x1A\x82a\0\xF9V[V[\x91\x90`@\x83\x82\x03\x12a\x01DW\x80a\x018a\x01A\x92_\x86\x01a\0\xE7V[\x93` \x01a\x01\rV[\x90V[a\0\xB8V[a\x01ga\x07\x83\x808\x03\x80a\x01\\\x81a\0\xA3V[\x92\x839\x81\x01\x90a\x01\x1CV[\x90\x91V[\x90V[\x90V[a\x01\x85a\x01\x80a\x01\x8A\x92a\x01kV[a\x01nV[a\0\xBCV[\x90V[a\x01\x96\x90a\x01qV[\x90V[` \x91\x81R\x01\x90V[` \x7Fro address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTokenBalanceSequencingModule: ze_\x82\x01R\x01RV[a\x01\xFC`*`@\x92a\x01\x99V[a\x02\x05\x81a\x01\xA2V[\x01\x90V[a\x02\x1E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xEFV[\x90V[\x15a\x02(WV[a\x020a\0TV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02F`\x04\x82\x01a\x02\tV[\x03\x90\xFD[a\x02^a\x02Ya\x02c\x92a\x01kV[a\x01nV[a\0\xF6V[\x90V[` \x7Fro balance\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTokenBalanceSequencingModule: ze_\x82\x01R\x01RV[a\x02\xC0`*`@\x92a\x01\x99V[a\x02\xC9\x81a\x02fV[\x01\x90V[a\x02\xE2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xB3V[\x90V[\x15a\x02\xECWV[a\x02\xF4a\0TV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\n`\x04\x82\x01a\x02\xCDV[\x03\x90\xFD[a\x033\x81a\x03,a\x03&a\x03!_a\x01\x8DV[a\0\xC7V[\x91a\0\xC7V[\x14\x15a\x02!V[a\x03O\x82a\x03Ia\x03C_a\x02JV[\x91a\0\xF6V[\x11a\x02\xE5V[`\x80R`\xA0RV\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1CV[a\0\x1D_5a\0LV[\x80c\x9Dv\xEAX\x14a\0GW\x80c\xB9\xD1\xD4\x9B\x14a\0BWc\xBA\xBC\xC59\x03a\0\x0EWa\x01\xE7V[a\x01JV[a\0\xCCV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xA7\x90a\0\x93V[\x90V[a\0\xB3\x90a\0\x9EV[\x90RV[\x91\x90a\0\xCA\x90_` \x85\x01\x94\x01\x90a\0\xAAV[V[4a\0\xFCWa\0\xDC6`\x04a\0`V[a\0\xF8a\0\xE7a\0oV[a\0\xEFa\0RV[\x91\x82\x91\x82a\0\xB7V[\x03\x90\xF3[a\0XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x011\x90a\x01%V[\x90RV[\x91\x90a\x01H\x90_` \x85\x01\x94\x01\x90a\x01(V[V[4a\x01zWa\x01Z6`\x04a\0`V[a\x01va\x01ea\x01\x01V[a\x01ma\0RV[\x91\x82\x91\x82a\x015V[\x03\x90\xF3[a\0XV[a\x01\x88\x81a\0\x9EV[\x03a\x01\x8FWV[_\x80\xFD[\x90P5\x90a\x01\xA0\x82a\x01\x7FV[V[\x90` \x82\x82\x03\x12a\x01\xBBWa\x01\xB8\x91_\x01a\x01\x93V[\x90V[a\0\\V[\x15\x15\x90V[a\x01\xCE\x90a\x01\xC0V[\x90RV[\x91\x90a\x01\xE5\x90_` \x85\x01\x94\x01\x90a\x01\xC5V[V[4a\x02\x17Wa\x02\x13a\x02\x02a\x01\xFD6`\x04a\x01\xA2V[a\x03\x11V[a\x02\na\0RV[\x91\x82\x91\x82a\x01\xD2V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[\x90V[a\x02;a\x026a\x02@\x92a\0\x93V[a\x02$V[a\0\x93V[\x90V[a\x02L\x90a\x02'V[\x90V[a\x02X\x90a\x02CV[\x90V[a\x02d\x90a\x02'V[\x90V[a\x02p\x90a\x02[V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x9B\x90a\x02sV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xB5W`@RV[a\x02}V[`\xE0\x1B\x90V[a\x02\xC9\x81a\x01%V[\x03a\x02\xD0WV[_\x80\xFD[\x90PQ\x90a\x02\xE1\x82a\x02\xC0V[V[\x90` \x82\x82\x03\x12a\x02\xFCWa\x02\xF9\x91_\x01a\x02\xD4V[\x90V[a\0\\V[a\x03\ta\0RV[=_\x82>=\x90\xFD[` a\x03x\x91a\x03\x1Fa\x02 V[Pa\x03Qa\x03L\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02OV[a\x02gV[a\x03mcp\xA0\x821a\x03aa\0RV[\x95\x86\x94\x85\x93\x84\x93a\x02\xBAV[\x83R`\x04\x83\x01a\0\xB7V[\x03\x91Z\xFA\x90\x81\x15a\x03\xF0W_\x91a\x03\xC2W[Pa\x03\xBDa\x03\xB7\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01%V[\x91a\x01%V[\x10\x15\x90V[a\x03\xE3\x91P` =\x81\x11a\x03\xE9W[a\x03\xDB\x81\x83a\x02\x91V[\x81\x01\x90a\x02\xE3V[_a\x03\x8AV[P=a\x03\xD1V[a\x03\x01V\xFE\xA2dipfsX\"\x12 \x1D\xA4\xF1z\r\xC46\x1B'\xD57\xD7*u\x0C\x96\x9Ep;\xCD\xA3&\xF9u\t/\xA9\x18\xDB}\x88|dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61021c565b61001d5f3561004c565b80639d76ea5814610047578063b9d1d49b146100425763babcc5390361000e576101e7565b61014a565b6100cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b6100a790610093565b90565b6100b39061009e565b9052565b91906100ca905f602085019401906100aa565b565b346100fc576100dc366004610060565b6100f86100e761006f565b6100ef610052565b918291826100b7565b0390f35b610058565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61013190610125565b9052565b9190610148905f60208501940190610128565b565b3461017a5761015a366004610060565b610176610165610101565b61016d610052565b91829182610135565b0390f35b610058565b6101888161009e565b0361018f57565b5f80fd5b905035906101a08261017f565b565b906020828203126101bb576101b8915f01610193565b90565b61005c565b151590565b6101ce906101c0565b9052565b91906101e5905f602085019401906101c5565b565b34610217576102136102026101fd3660046101a2565b610311565b61020a610052565b918291826101d2565b0390f35b610058565b5f80fd5b5f90565b90565b61023b61023661024092610093565b610224565b610093565b90565b61024c90610227565b90565b61025890610243565b90565b61026490610227565b90565b6102709061025b565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061029b90610273565b810190811067ffffffffffffffff8211176102b557604052565b61027d565b60e01b90565b6102c981610125565b036102d057565b5f80fd5b905051906102e1826102c0565b565b906020828203126102fc576102f9915f016102d4565b90565b61005c565b610309610052565b3d5f823e3d90fd5b60206103789161031f610220565b5061035161034c7f000000000000000000000000000000000000000000000000000000000000000061024f565b610267565b61036d6370a08231610361610052565b958694859384936102ba565b8352600483016100b7565b03915afa9081156103f0575f916103c2575b506103bd6103b77f0000000000000000000000000000000000000000000000000000000000000000610125565b91610125565b101590565b6103e3915060203d81116103e9575b6103db8183610291565b8101906102e3565b5f61038a565b503d6103d1565b61030156fea26469706673582212201da4f17a0dc4361b27d537d72a750c969e703bcda326f975092fa918db7d887c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1CV[a\0\x1D_5a\0LV[\x80c\x9Dv\xEAX\x14a\0GW\x80c\xB9\xD1\xD4\x9B\x14a\0BWc\xBA\xBC\xC59\x03a\0\x0EWa\x01\xE7V[a\x01JV[a\0\xCCV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xA7\x90a\0\x93V[\x90V[a\0\xB3\x90a\0\x9EV[\x90RV[\x91\x90a\0\xCA\x90_` \x85\x01\x94\x01\x90a\0\xAAV[V[4a\0\xFCWa\0\xDC6`\x04a\0`V[a\0\xF8a\0\xE7a\0oV[a\0\xEFa\0RV[\x91\x82\x91\x82a\0\xB7V[\x03\x90\xF3[a\0XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x011\x90a\x01%V[\x90RV[\x91\x90a\x01H\x90_` \x85\x01\x94\x01\x90a\x01(V[V[4a\x01zWa\x01Z6`\x04a\0`V[a\x01va\x01ea\x01\x01V[a\x01ma\0RV[\x91\x82\x91\x82a\x015V[\x03\x90\xF3[a\0XV[a\x01\x88\x81a\0\x9EV[\x03a\x01\x8FWV[_\x80\xFD[\x90P5\x90a\x01\xA0\x82a\x01\x7FV[V[\x90` \x82\x82\x03\x12a\x01\xBBWa\x01\xB8\x91_\x01a\x01\x93V[\x90V[a\0\\V[\x15\x15\x90V[a\x01\xCE\x90a\x01\xC0V[\x90RV[\x91\x90a\x01\xE5\x90_` \x85\x01\x94\x01\x90a\x01\xC5V[V[4a\x02\x17Wa\x02\x13a\x02\x02a\x01\xFD6`\x04a\x01\xA2V[a\x03\x11V[a\x02\na\0RV[\x91\x82\x91\x82a\x01\xD2V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[\x90V[a\x02;a\x026a\x02@\x92a\0\x93V[a\x02$V[a\0\x93V[\x90V[a\x02L\x90a\x02'V[\x90V[a\x02X\x90a\x02CV[\x90V[a\x02d\x90a\x02'V[\x90V[a\x02p\x90a\x02[V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x9B\x90a\x02sV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xB5W`@RV[a\x02}V[`\xE0\x1B\x90V[a\x02\xC9\x81a\x01%V[\x03a\x02\xD0WV[_\x80\xFD[\x90PQ\x90a\x02\xE1\x82a\x02\xC0V[V[\x90` \x82\x82\x03\x12a\x02\xFCWa\x02\xF9\x91_\x01a\x02\xD4V[\x90V[a\0\\V[a\x03\ta\0RV[=_\x82>=\x90\xFD[` a\x03x\x91a\x03\x1Fa\x02 V[Pa\x03Qa\x03L\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02OV[a\x02gV[a\x03mcp\xA0\x821a\x03aa\0RV[\x95\x86\x94\x85\x93\x84\x93a\x02\xBAV[\x83R`\x04\x83\x01a\0\xB7V[\x03\x91Z\xFA\x90\x81\x15a\x03\xF0W_\x91a\x03\xC2W[Pa\x03\xBDa\x03\xB7\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01%V[\x91a\x01%V[\x10\x15\x90V[a\x03\xE3\x91P` =\x81\x11a\x03\xE9W[a\x03\xDB\x81\x83a\x02\x91V[\x81\x01\x90a\x02\xE3V[_a\x03\x8AV[P=a\x03\xD1V[a\x03\x01V\xFE\xA2dipfsX\"\x12 \x1D\xA4\xF1z\r\xC46\x1B'\xD57\xD7*u\x0C\x96\x9Ep;\xCD\xA3&\xF9u\t/\xA9\x18\xDB}\x88|dsolcC\0\x08\x19\x003",
    );
    /**Constructor`.
```solidity
constructor(address _tokenAddress, uint256 _minimumBalance);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _tokenAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._tokenAddress, value._minimumBalance)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _tokenAddress: tuple.0,
                        _minimumBalance: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._tokenAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._minimumBalance),
                )
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `minimumBalance()` and selector `0xb9d1d49b`.
```solidity
function minimumBalance() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumBalanceCall {}
    ///Container type for the return parameters of the [`minimumBalance()`](minimumBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumBalanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumBalanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: minimumBalanceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minimumBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumBalanceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: minimumBalanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for minimumBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minimumBalanceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = minimumBalanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minimumBalance()";
            const SELECTOR: [u8; 4] = [185u8, 209u8, 212u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenAddress()` and selector `0x9d76ea58`.
```solidity
function tokenAddress() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenAddressCall {}
    ///Container type for the return parameters of the [`tokenAddress()`](tokenAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenAddressCall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenAddressCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenAddressReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenAddressCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenAddress()";
            const SELECTOR: [u8; 4] = [157u8, 118u8, 234u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TokenBalanceSequencingModule`](self) function calls.
    pub enum TokenBalanceSequencingModuleCalls {
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        minimumBalance(minimumBalanceCall),
        #[allow(missing_docs)]
        tokenAddress(tokenAddressCall),
    }
    #[automatically_derived]
    impl TokenBalanceSequencingModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [157u8, 118u8, 234u8, 88u8],
            [185u8, 209u8, 212u8, 155u8],
            [186u8, 188u8, 197u8, 57u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TokenBalanceSequencingModuleCalls {
        const NAME: &'static str = "TokenBalanceSequencingModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::minimumBalance(_) => {
                    <minimumBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tokenAddress(_) => {
                    <tokenAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls>] = &[
                {
                    fn tokenAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls> {
                        <tokenAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TokenBalanceSequencingModuleCalls::tokenAddress)
                    }
                    tokenAddress
                },
                {
                    fn minimumBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls> {
                        <minimumBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TokenBalanceSequencingModuleCalls::minimumBalance)
                    }
                    minimumBalance
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TokenBalanceSequencingModuleCalls::isAllowed)
                    }
                    isAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::minimumBalance(inner) => {
                    <minimumBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tokenAddress(inner) => {
                    <tokenAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minimumBalance(inner) => {
                    <minimumBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tokenAddress(inner) => {
                    <tokenAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TokenBalanceSequencingModule`](self) contract instance.

See the [wrapper's documentation](`TokenBalanceSequencingModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TokenBalanceSequencingModuleInstance<T, P, N> {
        TokenBalanceSequencingModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _tokenAddress: alloy::sol_types::private::Address,
        _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TokenBalanceSequencingModuleInstance<T, P, N>>,
    > {
        TokenBalanceSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _tokenAddress, _minimumBalance)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _tokenAddress: alloy::sol_types::private::Address,
        _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TokenBalanceSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _tokenAddress, _minimumBalance)
    }
    /**A [`TokenBalanceSequencingModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TokenBalanceSequencingModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TokenBalanceSequencingModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TokenBalanceSequencingModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TokenBalanceSequencingModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TokenBalanceSequencingModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TokenBalanceSequencingModule`](self) contract instance.

See the [wrapper's documentation](`TokenBalanceSequencingModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _tokenAddress: alloy::sol_types::private::Address,
            _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<TokenBalanceSequencingModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _tokenAddress,
                _minimumBalance,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _tokenAddress: alloy::sol_types::private::Address,
            _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _tokenAddress,
                            _minimumBalance,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TokenBalanceSequencingModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> TokenBalanceSequencingModuleInstance<T, P, N> {
            TokenBalanceSequencingModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TokenBalanceSequencingModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`minimumBalance`] function.
        pub fn minimumBalance(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, minimumBalanceCall, N> {
            self.call_builder(&minimumBalanceCall {})
        }
        ///Creates a new call builder for the [`tokenAddress`] function.
        pub fn tokenAddress(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenAddressCall, N> {
            self.call_builder(&tokenAddressCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TokenBalanceSequencingModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
