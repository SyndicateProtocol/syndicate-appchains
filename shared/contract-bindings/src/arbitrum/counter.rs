
use alloy::{
    primitives::{Address, Bytes, U256},
    providers::Provider,
    sol_types::{SolCall, SolConstructor, SolValue},
};

#[derive(Debug, Clone)]
pub struct Counter<P> {
    pub address: Address,
    pub provider: P,
}

impl<P: Provider> Counter<P> {
    pub fn new(address: Address, provider: P) -> Self {
        Self { address, provider }
    }

    pub fn number(&self) -> NumberCall<P> {
        NumberCall {
            contract: self.clone(),
        }
    }

    pub fn increment(&self) -> IncrementCall<P> {
        IncrementCall {
            contract: self.clone(),
        }
    }
}

#[derive(Debug, Clone)]
pub struct NumberCall<P> {
    contract: Counter<P>,
}

impl<P: Provider> NumberCall<P> {
    pub async fn call(&self) -> Result<NumberReturn, P::Error> {
        let data = self.calldata();
        let result = self.contract.provider.call(
            self.contract.address,
            data,
        ).await?;
        
        Ok(NumberReturn { _0: U256::from(0) })
    }

    pub fn calldata(&self) -> Bytes {
        Bytes::from(hex::decode("8381f58a").unwrap())
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct NumberReturn {
    pub _0: U256,
}

#[derive(Debug, Clone)]
pub struct IncrementCall<P> {
    contract: Counter<P>,
}

impl<P: Provider> IncrementCall<P> {
    pub async fn call(&self) -> Result<IncrementReturn, P::Error> {
        let data = self.calldata();
        let result = self.contract.provider.call(
            self.contract.address,
            data,
        ).await?;
        
        Ok(IncrementReturn {})
    }

    pub fn calldata(&self) -> Bytes {
        Bytes::from(hex::decode("d09de08a").unwrap())
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct IncrementReturn {}

pub static BYTECODE: &[u8] = &[
    0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x00, 0x60, 0x00, 0x55, 0x60, 0x8e, 0x80, 0x60, 0x0e, 0x60, 
    0x00, 0x39, 0x60, 0x00, 0xf3, 0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15, 0x60, 0x10, 0x57, 
    0x60, 0x00, 0x80, 0xfd, 0x5b, 0x50, 0x60, 0x04, 0x36, 0x10, 0x60, 0x2c, 0x57, 0x60, 0x00, 0x35, 
    0x60, 0xe0, 0x1c, 0x80, 0x63, 0x83, 0x81, 0xf5, 0x8a, 0x14, 0x60, 0x31, 0x57, 0x80, 0x63, 0xd0, 
    0x9d, 0xe0, 0x8a, 0x14, 0x60, 0x4d, 0x57, 0x5b, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x60, 0x37, 0x60, 
    0x67, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x80, 
    0x91, 0x03, 0x90, 0xf3, 0x5b, 0x60, 0x53, 0x60, 0x7f, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x00, 0x54, 
    0x81, 0x56, 0x5b, 0x60, 0x00, 0x80, 0x54, 0x60, 0x01, 0x01, 0x90, 0x55, 0x56, 0xfe, 0xa2, 0x64, 
    0x69, 0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20, 0x9f, 0x86, 0xd0, 0x81, 0x88, 0x4c, 0x04, 0xd1, 
    0xa5, 0x94, 0x5b, 0xc9, 0x9e, 0x7a, 0x8f, 0x93, 0x02, 0x0e, 0xfe, 0x99, 0xe2, 0x8c, 0x1e, 0xc2, 
    0x9b, 0x8d, 0xce, 0xb1, 0x11, 0x69, 0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x00, 0x08, 0x0d, 0x00, 
    0x33
];
