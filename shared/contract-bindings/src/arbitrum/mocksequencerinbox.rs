/**

Generated by the following Solidity interface...
```solidity
interface MockSequencerInbox {
    event BatchPosterSet(address poster, bool authorized);
    event SequencerBatchAdded(uint256 sequenceNumber);

    constructor(address bridge_);

    function addSequencerL2Batch(uint256 sequenceNumber, bytes memory, uint256, address, uint256, uint256) external;
    function isBatchPoster(address poster) external view returns (bool);
    function setIsBatchPoster(address poster, bool authorized) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "bridge_",
        "type": "address",
        "internalType": "contract MockBridge"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addSequencerL2Batch",
    "inputs": [
      {
        "name": "sequenceNumber",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "contract IGasRefunder"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isBatchPoster",
    "inputs": [
      {
        "name": "poster",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setIsBatchPoster",
    "inputs": [
      {
        "name": "poster",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "authorized",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BatchPosterSet",
    "inputs": [
      {
        "name": "poster",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "authorized",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SequencerBatchAdded",
    "inputs": [
      {
        "name": "sequenceNumber",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockSequencerInbox {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506040516106cc3803806106cc833981810160405281019061003191906100e6565b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a48261007b565b9050919050565b5f6100b58261009a565b9050919050565b6100c5816100ab565b81146100cf575f5ffd5b50565b5f815190506100e0816100bc565b92915050565b5f602082840312156100fb576100fa610077565b5b5f610108848285016100d2565b91505092915050565b6105ae8061011e5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80636e7df3e71461004357806371c3e6fe1461005f578063e0bc97291461008f575b5f5ffd5b61005d600480360381019061005891906102eb565b6100ab565b005b61007960048036038101906100749190610329565b61013b565b6040516100869190610363565b60405180910390f35b6100a960048036038101906100a4919061044b565b61018c565b005b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055507f28bcc5626d357efe966b4b0876aa1ee8ab99e26da4f131f6a2623f1800701c21828260405161012f929190610504565b60405180910390a15050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d202deaa60026040518263ffffffff1660e01b81526004016101e7919061056d565b5f604051808303815f87803b1580156101fe575f5ffd5b505af1158015610210573d5f5f3e3d5ffd5b505050507f1eb13a7f15212b56ad60574a2b0ad542f125db9cf126374b72e84c8b9d953ec3876040516102439190610595565b60405180910390a150505050505050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102858261025c565b9050919050565b6102958161027b565b811461029f575f5ffd5b50565b5f813590506102b08161028c565b92915050565b5f8115159050919050565b6102ca816102b6565b81146102d4575f5ffd5b50565b5f813590506102e5816102c1565b92915050565b5f5f6040838503121561030157610300610254565b5b5f61030e858286016102a2565b925050602061031f858286016102d7565b9150509250929050565b5f6020828403121561033e5761033d610254565b5b5f61034b848285016102a2565b91505092915050565b61035d816102b6565b82525050565b5f6020820190506103765f830184610354565b92915050565b5f819050919050565b61038e8161037c565b8114610398575f5ffd5b50565b5f813590506103a981610385565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126103d0576103cf6103af565b5b8235905067ffffffffffffffff8111156103ed576103ec6103b3565b5b602083019150836001820283011115610409576104086103b7565b5b9250929050565b5f61041a8261027b565b9050919050565b61042a81610410565b8114610434575f5ffd5b50565b5f8135905061044581610421565b92915050565b5f5f5f5f5f5f5f60c0888a03121561046657610465610254565b5b5f6104738a828b0161039b565b975050602088013567ffffffffffffffff81111561049457610493610258565b5b6104a08a828b016103bb565b965096505060406104b38a828b0161039b565b94505060606104c48a828b01610437565b93505060806104d58a828b0161039b565b92505060a06104e68a828b0161039b565b91505092959891949750929550565b6104fe8161027b565b82525050565b5f6040820190506105175f8301856104f5565b6105246020830184610354565b9392505050565b5f819050919050565b5f819050919050565b5f61055761055261054d8461052b565b610534565b61037c565b9050919050565b6105678161053d565b82525050565b5f6020820190506105805f83018461055e565b92915050565b61058f8161037c565b82525050565b5f6020820190506105a85f830184610586565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x06\xCC8\x03\x80a\x06\xCC\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\0\xE6V[\x80`\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPa\x01\x11V[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\0\xA4\x82a\0{V[\x90P\x91\x90PV[_a\0\xB5\x82a\0\x9AV[\x90P\x91\x90PV[a\0\xC5\x81a\0\xABV[\x81\x14a\0\xCFW__\xFD[PV[_\x81Q\x90Pa\0\xE0\x81a\0\xBCV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\0\xFBWa\0\xFAa\0wV[[_a\x01\x08\x84\x82\x85\x01a\0\xD2V[\x91PP\x92\x91PPV[a\x05\xAE\x80a\x01\x1E_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80cn}\xF3\xE7\x14a\0CW\x80cq\xC3\xE6\xFE\x14a\0_W\x80c\xE0\xBC\x97)\x14a\0\x8FW[__\xFD[a\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\x02\xEBV[a\0\xABV[\0[a\0y`\x04\x806\x03\x81\x01\x90a\0t\x91\x90a\x03)V[a\x01;V[`@Qa\0\x86\x91\x90a\x03cV[`@Q\x80\x91\x03\x90\xF3[a\0\xA9`\x04\x806\x03\x81\x01\x90a\0\xA4\x91\x90a\x04KV[a\x01\x8CV[\0[\x80__\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F(\xBC\xC5bm5~\xFE\x96kK\x08v\xAA\x1E\xE8\xAB\x99\xE2m\xA4\xF11\xF6\xA2b?\x18\0p\x1C!\x82\x82`@Qa\x01/\x92\x91\x90a\x05\x04V[`@Q\x80\x91\x03\x90\xA1PPV[___\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x91\x90PV[`\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x02\xDE\xAA`\x02`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xE7\x91\x90a\x05mV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xFEW__\xFD[PZ\xF1\x15\x80\x15a\x02\x10W=__>=_\xFD[PPPP\x7F\x1E\xB1:\x7F\x15!+V\xAD`WJ+\n\xD5B\xF1%\xDB\x9C\xF1&7Kr\xE8L\x8B\x9D\x95>\xC3\x87`@Qa\x02C\x91\x90a\x05\x95V[`@Q\x80\x91\x03\x90\xA1PPPPPPPV[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x02\x85\x82a\x02\\V[\x90P\x91\x90PV[a\x02\x95\x81a\x02{V[\x81\x14a\x02\x9FW__\xFD[PV[_\x815\x90Pa\x02\xB0\x81a\x02\x8CV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x02\xCA\x81a\x02\xB6V[\x81\x14a\x02\xD4W__\xFD[PV[_\x815\x90Pa\x02\xE5\x81a\x02\xC1V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x03\x01Wa\x03\0a\x02TV[[_a\x03\x0E\x85\x82\x86\x01a\x02\xA2V[\x92PP` a\x03\x1F\x85\x82\x86\x01a\x02\xD7V[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x03>Wa\x03=a\x02TV[[_a\x03K\x84\x82\x85\x01a\x02\xA2V[\x91PP\x92\x91PPV[a\x03]\x81a\x02\xB6V[\x82RPPV[_` \x82\x01\x90Pa\x03v_\x83\x01\x84a\x03TV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x03\x8E\x81a\x03|V[\x81\x14a\x03\x98W__\xFD[PV[_\x815\x90Pa\x03\xA9\x81a\x03\x85V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x03\xD0Wa\x03\xCFa\x03\xAFV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xEDWa\x03\xECa\x03\xB3V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x04\tWa\x04\x08a\x03\xB7V[[\x92P\x92\x90PV[_a\x04\x1A\x82a\x02{V[\x90P\x91\x90PV[a\x04*\x81a\x04\x10V[\x81\x14a\x044W__\xFD[PV[_\x815\x90Pa\x04E\x81a\x04!V[\x92\x91PPV[_______`\xC0\x88\x8A\x03\x12\x15a\x04fWa\x04ea\x02TV[[_a\x04s\x8A\x82\x8B\x01a\x03\x9BV[\x97PP` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x94Wa\x04\x93a\x02XV[[a\x04\xA0\x8A\x82\x8B\x01a\x03\xBBV[\x96P\x96PP`@a\x04\xB3\x8A\x82\x8B\x01a\x03\x9BV[\x94PP``a\x04\xC4\x8A\x82\x8B\x01a\x047V[\x93PP`\x80a\x04\xD5\x8A\x82\x8B\x01a\x03\x9BV[\x92PP`\xA0a\x04\xE6\x8A\x82\x8B\x01a\x03\x9BV[\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[a\x04\xFE\x81a\x02{V[\x82RPPV[_`@\x82\x01\x90Pa\x05\x17_\x83\x01\x85a\x04\xF5V[a\x05$` \x83\x01\x84a\x03TV[\x93\x92PPPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x05Wa\x05Ra\x05M\x84a\x05+V[a\x054V[a\x03|V[\x90P\x91\x90PV[a\x05g\x81a\x05=V[\x82RPPV[_` \x82\x01\x90Pa\x05\x80_\x83\x01\x84a\x05^V[\x92\x91PPV[a\x05\x8F\x81a\x03|V[\x82RPPV[_` \x82\x01\x90Pa\x05\xA8_\x83\x01\x84a\x05\x86V[\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80636e7df3e71461004357806371c3e6fe1461005f578063e0bc97291461008f575b5f5ffd5b61005d600480360381019061005891906102eb565b6100ab565b005b61007960048036038101906100749190610329565b61013b565b6040516100869190610363565b60405180910390f35b6100a960048036038101906100a4919061044b565b61018c565b005b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055507f28bcc5626d357efe966b4b0876aa1ee8ab99e26da4f131f6a2623f1800701c21828260405161012f929190610504565b60405180910390a15050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d202deaa60026040518263ffffffff1660e01b81526004016101e7919061056d565b5f604051808303815f87803b1580156101fe575f5ffd5b505af1158015610210573d5f5f3e3d5ffd5b505050507f1eb13a7f15212b56ad60574a2b0ad542f125db9cf126374b72e84c8b9d953ec3876040516102439190610595565b60405180910390a150505050505050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102858261025c565b9050919050565b6102958161027b565b811461029f575f5ffd5b50565b5f813590506102b08161028c565b92915050565b5f8115159050919050565b6102ca816102b6565b81146102d4575f5ffd5b50565b5f813590506102e5816102c1565b92915050565b5f5f6040838503121561030157610300610254565b5b5f61030e858286016102a2565b925050602061031f858286016102d7565b9150509250929050565b5f6020828403121561033e5761033d610254565b5b5f61034b848285016102a2565b91505092915050565b61035d816102b6565b82525050565b5f6020820190506103765f830184610354565b92915050565b5f819050919050565b61038e8161037c565b8114610398575f5ffd5b50565b5f813590506103a981610385565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126103d0576103cf6103af565b5b8235905067ffffffffffffffff8111156103ed576103ec6103b3565b5b602083019150836001820283011115610409576104086103b7565b5b9250929050565b5f61041a8261027b565b9050919050565b61042a81610410565b8114610434575f5ffd5b50565b5f8135905061044581610421565b92915050565b5f5f5f5f5f5f5f60c0888a03121561046657610465610254565b5b5f6104738a828b0161039b565b975050602088013567ffffffffffffffff81111561049457610493610258565b5b6104a08a828b016103bb565b965096505060406104b38a828b0161039b565b94505060606104c48a828b01610437565b93505060806104d58a828b0161039b565b92505060a06104e68a828b0161039b565b91505092959891949750929550565b6104fe8161027b565b82525050565b5f6040820190506105175f8301856104f5565b6105246020830184610354565b9392505050565b5f819050919050565b5f819050919050565b5f61055761055261054d8461052b565b610534565b61037c565b9050919050565b6105678161053d565b82525050565b5f6020820190506105805f83018461055e565b92915050565b61058f8161037c565b82525050565b5f6020820190506105a85f830184610586565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80cn}\xF3\xE7\x14a\0CW\x80cq\xC3\xE6\xFE\x14a\0_W\x80c\xE0\xBC\x97)\x14a\0\x8FW[__\xFD[a\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\x02\xEBV[a\0\xABV[\0[a\0y`\x04\x806\x03\x81\x01\x90a\0t\x91\x90a\x03)V[a\x01;V[`@Qa\0\x86\x91\x90a\x03cV[`@Q\x80\x91\x03\x90\xF3[a\0\xA9`\x04\x806\x03\x81\x01\x90a\0\xA4\x91\x90a\x04KV[a\x01\x8CV[\0[\x80__\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F(\xBC\xC5bm5~\xFE\x96kK\x08v\xAA\x1E\xE8\xAB\x99\xE2m\xA4\xF11\xF6\xA2b?\x18\0p\x1C!\x82\x82`@Qa\x01/\x92\x91\x90a\x05\x04V[`@Q\x80\x91\x03\x90\xA1PPV[___\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x91\x90PV[`\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x02\xDE\xAA`\x02`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xE7\x91\x90a\x05mV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xFEW__\xFD[PZ\xF1\x15\x80\x15a\x02\x10W=__>=_\xFD[PPPP\x7F\x1E\xB1:\x7F\x15!+V\xAD`WJ+\n\xD5B\xF1%\xDB\x9C\xF1&7Kr\xE8L\x8B\x9D\x95>\xC3\x87`@Qa\x02C\x91\x90a\x05\x95V[`@Q\x80\x91\x03\x90\xA1PPPPPPPV[__\xFD[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x02\x85\x82a\x02\\V[\x90P\x91\x90PV[a\x02\x95\x81a\x02{V[\x81\x14a\x02\x9FW__\xFD[PV[_\x815\x90Pa\x02\xB0\x81a\x02\x8CV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x02\xCA\x81a\x02\xB6V[\x81\x14a\x02\xD4W__\xFD[PV[_\x815\x90Pa\x02\xE5\x81a\x02\xC1V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\x03\x01Wa\x03\0a\x02TV[[_a\x03\x0E\x85\x82\x86\x01a\x02\xA2V[\x92PP` a\x03\x1F\x85\x82\x86\x01a\x02\xD7V[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x03>Wa\x03=a\x02TV[[_a\x03K\x84\x82\x85\x01a\x02\xA2V[\x91PP\x92\x91PPV[a\x03]\x81a\x02\xB6V[\x82RPPV[_` \x82\x01\x90Pa\x03v_\x83\x01\x84a\x03TV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x03\x8E\x81a\x03|V[\x81\x14a\x03\x98W__\xFD[PV[_\x815\x90Pa\x03\xA9\x81a\x03\x85V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x03\xD0Wa\x03\xCFa\x03\xAFV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xEDWa\x03\xECa\x03\xB3V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x04\tWa\x04\x08a\x03\xB7V[[\x92P\x92\x90PV[_a\x04\x1A\x82a\x02{V[\x90P\x91\x90PV[a\x04*\x81a\x04\x10V[\x81\x14a\x044W__\xFD[PV[_\x815\x90Pa\x04E\x81a\x04!V[\x92\x91PPV[_______`\xC0\x88\x8A\x03\x12\x15a\x04fWa\x04ea\x02TV[[_a\x04s\x8A\x82\x8B\x01a\x03\x9BV[\x97PP` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x94Wa\x04\x93a\x02XV[[a\x04\xA0\x8A\x82\x8B\x01a\x03\xBBV[\x96P\x96PP`@a\x04\xB3\x8A\x82\x8B\x01a\x03\x9BV[\x94PP``a\x04\xC4\x8A\x82\x8B\x01a\x047V[\x93PP`\x80a\x04\xD5\x8A\x82\x8B\x01a\x03\x9BV[\x92PP`\xA0a\x04\xE6\x8A\x82\x8B\x01a\x03\x9BV[\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[a\x04\xFE\x81a\x02{V[\x82RPPV[_`@\x82\x01\x90Pa\x05\x17_\x83\x01\x85a\x04\xF5V[a\x05$` \x83\x01\x84a\x03TV[\x93\x92PPPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x05Wa\x05Ra\x05M\x84a\x05+V[a\x054V[a\x03|V[\x90P\x91\x90PV[a\x05g\x81a\x05=V[\x82RPPV[_` \x82\x01\x90Pa\x05\x80_\x83\x01\x84a\x05^V[\x92\x91PPV[a\x05\x8F\x81a\x03|V[\x82RPPV[_` \x82\x01\x90Pa\x05\xA8_\x83\x01\x84a\x05\x86V[\x92\x91PPV",
    );
    /**Event with signature `BatchPosterSet(address,bool)` and selector `0x28bcc5626d357efe966b4b0876aa1ee8ab99e26da4f131f6a2623f1800701c21`.
```solidity
event BatchPosterSet(address poster, bool authorized);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BatchPosterSet {
        #[allow(missing_docs)]
        pub poster: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub authorized: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BatchPosterSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "BatchPosterSet(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                40u8,
                188u8,
                197u8,
                98u8,
                109u8,
                53u8,
                126u8,
                254u8,
                150u8,
                107u8,
                75u8,
                8u8,
                118u8,
                170u8,
                30u8,
                232u8,
                171u8,
                153u8,
                226u8,
                109u8,
                164u8,
                241u8,
                49u8,
                246u8,
                162u8,
                98u8,
                63u8,
                24u8,
                0u8,
                112u8,
                28u8,
                33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    poster: data.0,
                    authorized: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.poster,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.authorized,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BatchPosterSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BatchPosterSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BatchPosterSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SequencerBatchAdded(uint256)` and selector `0x1eb13a7f15212b56ad60574a2b0ad542f125db9cf126374b72e84c8b9d953ec3`.
```solidity
event SequencerBatchAdded(uint256 sequenceNumber);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SequencerBatchAdded {
        #[allow(missing_docs)]
        pub sequenceNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SequencerBatchAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SequencerBatchAdded(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                30u8,
                177u8,
                58u8,
                127u8,
                21u8,
                33u8,
                43u8,
                86u8,
                173u8,
                96u8,
                87u8,
                74u8,
                43u8,
                10u8,
                213u8,
                66u8,
                241u8,
                37u8,
                219u8,
                156u8,
                241u8,
                38u8,
                55u8,
                75u8,
                114u8,
                232u8,
                76u8,
                139u8,
                157u8,
                149u8,
                62u8,
                195u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { sequenceNumber: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequenceNumber),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SequencerBatchAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SequencerBatchAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SequencerBatchAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address bridge_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub bridge_: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.bridge_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge_: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge_,
                    ),
                )
            }
        }
    };
    /**Function with signature `addSequencerL2Batch(uint256,bytes,uint256,address,uint256,uint256)` and selector `0xe0bc9729`.
```solidity
function addSequencerL2Batch(uint256 sequenceNumber, bytes memory, uint256, address, uint256, uint256) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencerL2BatchCall {
        #[allow(missing_docs)]
        pub sequenceNumber: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _3: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _4: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _5: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`addSequencerL2Batch(uint256,bytes,uint256,address,uint256,uint256)`](addSequencerL2BatchCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencerL2BatchReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencerL2BatchCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencerL2BatchCall) -> Self {
                    (
                        value.sequenceNumber,
                        value._1,
                        value._2,
                        value._3,
                        value._4,
                        value._5,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencerL2BatchCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sequenceNumber: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                        _4: tuple.4,
                        _5: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencerL2BatchReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencerL2BatchReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencerL2BatchReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addSequencerL2BatchCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addSequencerL2BatchReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addSequencerL2Batch(uint256,bytes,uint256,address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [224u8, 188u8, 151u8, 41u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequenceNumber),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._2),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._3,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._4),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._5),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isBatchPoster(address)` and selector `0x71c3e6fe`.
```solidity
function isBatchPoster(address poster) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBatchPosterCall {
        #[allow(missing_docs)]
        pub poster: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isBatchPoster(address)`](isBatchPosterCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBatchPosterReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBatchPosterCall> for UnderlyingRustTuple<'_> {
                fn from(value: isBatchPosterCall) -> Self {
                    (value.poster,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isBatchPosterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { poster: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBatchPosterReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isBatchPosterReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isBatchPosterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isBatchPosterCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isBatchPosterReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isBatchPoster(address)";
            const SELECTOR: [u8; 4] = [113u8, 195u8, 230u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.poster,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setIsBatchPoster(address,bool)` and selector `0x6e7df3e7`.
```solidity
function setIsBatchPoster(address poster, bool authorized) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setIsBatchPosterCall {
        #[allow(missing_docs)]
        pub poster: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub authorized: bool,
    }
    ///Container type for the return parameters of the [`setIsBatchPoster(address,bool)`](setIsBatchPosterCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setIsBatchPosterReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setIsBatchPosterCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setIsBatchPosterCall) -> Self {
                    (value.poster, value.authorized)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setIsBatchPosterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        poster: tuple.0,
                        authorized: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setIsBatchPosterReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setIsBatchPosterReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setIsBatchPosterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setIsBatchPosterCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setIsBatchPosterReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setIsBatchPoster(address,bool)";
            const SELECTOR: [u8; 4] = [110u8, 125u8, 243u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.poster,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.authorized,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockSequencerInbox`](self) function calls.
    pub enum MockSequencerInboxCalls {
        #[allow(missing_docs)]
        addSequencerL2Batch(addSequencerL2BatchCall),
        #[allow(missing_docs)]
        isBatchPoster(isBatchPosterCall),
        #[allow(missing_docs)]
        setIsBatchPoster(setIsBatchPosterCall),
    }
    #[automatically_derived]
    impl MockSequencerInboxCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [110u8, 125u8, 243u8, 231u8],
            [113u8, 195u8, 230u8, 254u8],
            [224u8, 188u8, 151u8, 41u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockSequencerInboxCalls {
        const NAME: &'static str = "MockSequencerInboxCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addSequencerL2Batch(_) => {
                    <addSequencerL2BatchCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isBatchPoster(_) => {
                    <isBatchPosterCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setIsBatchPoster(_) => {
                    <setIsBatchPosterCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockSequencerInboxCalls>] = &[
                {
                    fn setIsBatchPoster(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSequencerInboxCalls> {
                        <setIsBatchPosterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSequencerInboxCalls::setIsBatchPoster)
                    }
                    setIsBatchPoster
                },
                {
                    fn isBatchPoster(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSequencerInboxCalls> {
                        <isBatchPosterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSequencerInboxCalls::isBatchPoster)
                    }
                    isBatchPoster
                },
                {
                    fn addSequencerL2Batch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSequencerInboxCalls> {
                        <addSequencerL2BatchCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSequencerInboxCalls::addSequencerL2Batch)
                    }
                    addSequencerL2Batch
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addSequencerL2Batch(inner) => {
                    <addSequencerL2BatchCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isBatchPoster(inner) => {
                    <isBatchPosterCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setIsBatchPoster(inner) => {
                    <setIsBatchPosterCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addSequencerL2Batch(inner) => {
                    <addSequencerL2BatchCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isBatchPoster(inner) => {
                    <isBatchPosterCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setIsBatchPoster(inner) => {
                    <setIsBatchPosterCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MockSequencerInbox`](self) events.
    pub enum MockSequencerInboxEvents {
        #[allow(missing_docs)]
        BatchPosterSet(BatchPosterSet),
        #[allow(missing_docs)]
        SequencerBatchAdded(SequencerBatchAdded),
    }
    #[automatically_derived]
    impl MockSequencerInboxEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                30u8,
                177u8,
                58u8,
                127u8,
                21u8,
                33u8,
                43u8,
                86u8,
                173u8,
                96u8,
                87u8,
                74u8,
                43u8,
                10u8,
                213u8,
                66u8,
                241u8,
                37u8,
                219u8,
                156u8,
                241u8,
                38u8,
                55u8,
                75u8,
                114u8,
                232u8,
                76u8,
                139u8,
                157u8,
                149u8,
                62u8,
                195u8,
            ],
            [
                40u8,
                188u8,
                197u8,
                98u8,
                109u8,
                53u8,
                126u8,
                254u8,
                150u8,
                107u8,
                75u8,
                8u8,
                118u8,
                170u8,
                30u8,
                232u8,
                171u8,
                153u8,
                226u8,
                109u8,
                164u8,
                241u8,
                49u8,
                246u8,
                162u8,
                98u8,
                63u8,
                24u8,
                0u8,
                112u8,
                28u8,
                33u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MockSequencerInboxEvents {
        const NAME: &'static str = "MockSequencerInboxEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BatchPosterSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BatchPosterSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BatchPosterSet)
                }
                Some(
                    <SequencerBatchAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SequencerBatchAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SequencerBatchAdded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MockSequencerInboxEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BatchPosterSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SequencerBatchAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BatchPosterSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SequencerBatchAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockSequencerInbox`](self) contract instance.

See the [wrapper's documentation](`MockSequencerInboxInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockSequencerInboxInstance<T, P, N> {
        MockSequencerInboxInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        bridge_: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockSequencerInboxInstance<T, P, N>>,
    > {
        MockSequencerInboxInstance::<T, P, N>::deploy(provider, bridge_)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        bridge_: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockSequencerInboxInstance::<T, P, N>::deploy_builder(provider, bridge_)
    }
    /**A [`MockSequencerInbox`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockSequencerInbox`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockSequencerInboxInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockSequencerInboxInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockSequencerInboxInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockSequencerInboxInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockSequencerInbox`](self) contract instance.

See the [wrapper's documentation](`MockSequencerInboxInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            bridge_: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<MockSequencerInboxInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, bridge_);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            bridge_: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { bridge_ },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockSequencerInboxInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockSequencerInboxInstance<T, P, N> {
            MockSequencerInboxInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockSequencerInboxInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addSequencerL2Batch`] function.
        pub fn addSequencerL2Batch(
            &self,
            sequenceNumber: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::Bytes,
            _2: alloy::sol_types::private::primitives::aliases::U256,
            _3: alloy::sol_types::private::Address,
            _4: alloy::sol_types::private::primitives::aliases::U256,
            _5: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, addSequencerL2BatchCall, N> {
            self.call_builder(
                &addSequencerL2BatchCall {
                    sequenceNumber,
                    _1,
                    _2,
                    _3,
                    _4,
                    _5,
                },
            )
        }
        ///Creates a new call builder for the [`isBatchPoster`] function.
        pub fn isBatchPoster(
            &self,
            poster: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isBatchPosterCall, N> {
            self.call_builder(&isBatchPosterCall { poster })
        }
        ///Creates a new call builder for the [`setIsBatchPoster`] function.
        pub fn setIsBatchPoster(
            &self,
            poster: alloy::sol_types::private::Address,
            authorized: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setIsBatchPosterCall, N> {
            self.call_builder(
                &setIsBatchPosterCall {
                    poster,
                    authorized,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockSequencerInboxInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BatchPosterSet`] event.
        pub fn BatchPosterSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BatchPosterSet, N> {
            self.event_filter::<BatchPosterSet>()
        }
        ///Creates a new event filter for the [`SequencerBatchAdded`] event.
        pub fn SequencerBatchAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SequencerBatchAdded, N> {
            self.event_filter::<SequencerBatchAdded>()
        }
    }
}
