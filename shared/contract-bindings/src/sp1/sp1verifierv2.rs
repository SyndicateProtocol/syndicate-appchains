/**

Generated by the following Solidity interface...
```solidity
interface SP1VerifierV2 {
    function VERIFIER_HASH() external pure returns (bytes32);
    function VERSION() external pure returns (string memory);
    function verifyProof(bytes32, bytes memory, bytes memory proofBytes) external pure;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "VERIFIER_HASH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "verifyProof",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SP1VerifierV2 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506104bd8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632a5104361461004357806341493c6014610061578063ffa1ad741461007d575b5f80fd5b61004b61009b565b6040516100589190610192565b60405180910390f35b61007b6004803603810190610076919061023e565b6100c4565b005b61008561013d565b6040516100929190610359565b60405180910390f35b5f7ffd4b4d23a917e7d7d75deec81f86b55b1c86689a5e3a3c8ae054741af2a7fea85f1b905090565b6100cc61009b565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191682825f906004926100fe93929190610381565b9061010991906103fc565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146101365761013561045a565b5b5050505050565b60606040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250905090565b5f819050919050565b61018c8161017a565b82525050565b5f6020820190506101a55f830184610183565b92915050565b5f80fd5b5f80fd5b6101bc8161017a565b81146101c6575f80fd5b50565b5f813590506101d7816101b3565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126101fe576101fd6101dd565b5b8235905067ffffffffffffffff81111561021b5761021a6101e1565b5b602083019150836001820283011115610237576102366101e5565b5b9250929050565b5f805f805f60608688031215610257576102566101ab565b5b5f610264888289016101c9565b955050602086013567ffffffffffffffff811115610285576102846101af565b5b610291888289016101e9565b9450945050604086013567ffffffffffffffff8111156102b4576102b36101af565b5b6102c0888289016101e9565b92509250509295509295909350565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156103065780820151818401526020810190506102eb565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61032b826102cf565b61033581856102d9565b93506103458185602086016102e9565b61034e81610311565b840191505092915050565b5f6020820190508181035f8301526103718184610321565b905092915050565b5f80fd5b5f80fd5b5f808585111561039457610393610379565b5b838611156103a5576103a461037d565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b5f82821b905092915050565b5f61040783836103bb565b8261041281356103c5565b925060048210156104525761044d7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026103f0565b831692505b505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea264697066735822122022f2853597dcf79ff1f9aaa0012c2d1c2de520141d8dcb529c3780e365402c2c64736f6c63430008140033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\x04\xBD\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c*Q\x046\x14a\0CW\x80cAI<`\x14a\0aW\x80c\xFF\xA1\xADt\x14a\0}W[_\x80\xFD[a\0Ka\0\x9BV[`@Qa\0X\x91\x90a\x01\x92V[`@Q\x80\x91\x03\x90\xF3[a\0{`\x04\x806\x03\x81\x01\x90a\0v\x91\x90a\x02>V[a\0\xC4V[\0[a\0\x85a\x01=V[`@Qa\0\x92\x91\x90a\x03YV[`@Q\x80\x91\x03\x90\xF3[_\x7F\xFDKM#\xA9\x17\xE7\xD7\xD7]\xEE\xC8\x1F\x86\xB5[\x1C\x86h\x9A^:<\x8A\xE0Tt\x1A\xF2\xA7\xFE\xA8_\x1B\x90P\x90V[a\0\xCCa\0\x9BV[{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x82\x82_\x90`\x04\x92a\0\xFE\x93\x92\x91\x90a\x03\x81V[\x90a\x01\t\x91\x90a\x03\xFCV[{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x14a\x016Wa\x015a\x04ZV[[PPPPPV[```@Q\x80`@\x01`@R\x80`\x01\x81R` \x01\x7F2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P\x90V[_\x81\x90P\x91\x90PV[a\x01\x8C\x81a\x01zV[\x82RPPV[_` \x82\x01\x90Pa\x01\xA5_\x83\x01\x84a\x01\x83V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[a\x01\xBC\x81a\x01zV[\x81\x14a\x01\xC6W_\x80\xFD[PV[_\x815\x90Pa\x01\xD7\x81a\x01\xB3V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x01\xFEWa\x01\xFDa\x01\xDDV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x1BWa\x02\x1Aa\x01\xE1V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x027Wa\x026a\x01\xE5V[[\x92P\x92\x90PV[_\x80_\x80_``\x86\x88\x03\x12\x15a\x02WWa\x02Va\x01\xABV[[_a\x02d\x88\x82\x89\x01a\x01\xC9V[\x95PP` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x85Wa\x02\x84a\x01\xAFV[[a\x02\x91\x88\x82\x89\x01a\x01\xE9V[\x94P\x94PP`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\xB4Wa\x02\xB3a\x01\xAFV[[a\x02\xC0\x88\x82\x89\x01a\x01\xE9V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x03\x06W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x02\xEBV[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x03+\x82a\x02\xCFV[a\x035\x81\x85a\x02\xD9V[\x93Pa\x03E\x81\x85` \x86\x01a\x02\xE9V[a\x03N\x81a\x03\x11V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x03q\x81\x84a\x03!V[\x90P\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x85\x85\x11\x15a\x03\x94Wa\x03\x93a\x03yV[[\x83\x86\x11\x15a\x03\xA5Wa\x03\xA4a\x03}V[[`\x01\x85\x02\x83\x01\x91P\x84\x86\x03\x90P\x94P\x94\x92PPPV[_\x82\x90P\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_a\x04\x07\x83\x83a\x03\xBBV[\x82a\x04\x12\x815a\x03\xC5V[\x92P`\x04\x82\x10\x15a\x04RWa\x04M\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83`\x04\x03`\x08\x02a\x03\xF0V[\x83\x16\x92P[PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \"\xF2\x855\x97\xDC\xF7\x9F\xF1\xF9\xAA\xA0\x01,-\x1C-\xE5 \x14\x1D\x8D\xCBR\x9C7\x80\xE3e@,,dsolcC\0\x08\x14\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632a5104361461004357806341493c6014610061578063ffa1ad741461007d575b5f80fd5b61004b61009b565b6040516100589190610192565b60405180910390f35b61007b6004803603810190610076919061023e565b6100c4565b005b61008561013d565b6040516100929190610359565b60405180910390f35b5f7ffd4b4d23a917e7d7d75deec81f86b55b1c86689a5e3a3c8ae054741af2a7fea85f1b905090565b6100cc61009b565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191682825f906004926100fe93929190610381565b9061010991906103fc565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146101365761013561045a565b5b5050505050565b60606040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250905090565b5f819050919050565b61018c8161017a565b82525050565b5f6020820190506101a55f830184610183565b92915050565b5f80fd5b5f80fd5b6101bc8161017a565b81146101c6575f80fd5b50565b5f813590506101d7816101b3565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126101fe576101fd6101dd565b5b8235905067ffffffffffffffff81111561021b5761021a6101e1565b5b602083019150836001820283011115610237576102366101e5565b5b9250929050565b5f805f805f60608688031215610257576102566101ab565b5b5f610264888289016101c9565b955050602086013567ffffffffffffffff811115610285576102846101af565b5b610291888289016101e9565b9450945050604086013567ffffffffffffffff8111156102b4576102b36101af565b5b6102c0888289016101e9565b92509250509295509295909350565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156103065780820151818401526020810190506102eb565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61032b826102cf565b61033581856102d9565b93506103458185602086016102e9565b61034e81610311565b840191505092915050565b5f6020820190508181035f8301526103718184610321565b905092915050565b5f80fd5b5f80fd5b5f808585111561039457610393610379565b5b838611156103a5576103a461037d565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b5f82821b905092915050565b5f61040783836103bb565b8261041281356103c5565b925060048210156104525761044d7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026103f0565b831692505b505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea264697066735822122022f2853597dcf79ff1f9aaa0012c2d1c2de520141d8dcb529c3780e365402c2c64736f6c63430008140033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c*Q\x046\x14a\0CW\x80cAI<`\x14a\0aW\x80c\xFF\xA1\xADt\x14a\0}W[_\x80\xFD[a\0Ka\0\x9BV[`@Qa\0X\x91\x90a\x01\x92V[`@Q\x80\x91\x03\x90\xF3[a\0{`\x04\x806\x03\x81\x01\x90a\0v\x91\x90a\x02>V[a\0\xC4V[\0[a\0\x85a\x01=V[`@Qa\0\x92\x91\x90a\x03YV[`@Q\x80\x91\x03\x90\xF3[_\x7F\xFDKM#\xA9\x17\xE7\xD7\xD7]\xEE\xC8\x1F\x86\xB5[\x1C\x86h\x9A^:<\x8A\xE0Tt\x1A\xF2\xA7\xFE\xA8_\x1B\x90P\x90V[a\0\xCCa\0\x9BV[{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x82\x82_\x90`\x04\x92a\0\xFE\x93\x92\x91\x90a\x03\x81V[\x90a\x01\t\x91\x90a\x03\xFCV[{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x14a\x016Wa\x015a\x04ZV[[PPPPPV[```@Q\x80`@\x01`@R\x80`\x01\x81R` \x01\x7F2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P\x90V[_\x81\x90P\x91\x90PV[a\x01\x8C\x81a\x01zV[\x82RPPV[_` \x82\x01\x90Pa\x01\xA5_\x83\x01\x84a\x01\x83V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[a\x01\xBC\x81a\x01zV[\x81\x14a\x01\xC6W_\x80\xFD[PV[_\x815\x90Pa\x01\xD7\x81a\x01\xB3V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x01\xFEWa\x01\xFDa\x01\xDDV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x1BWa\x02\x1Aa\x01\xE1V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x027Wa\x026a\x01\xE5V[[\x92P\x92\x90PV[_\x80_\x80_``\x86\x88\x03\x12\x15a\x02WWa\x02Va\x01\xABV[[_a\x02d\x88\x82\x89\x01a\x01\xC9V[\x95PP` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\x85Wa\x02\x84a\x01\xAFV[[a\x02\x91\x88\x82\x89\x01a\x01\xE9V[\x94P\x94PP`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\xB4Wa\x02\xB3a\x01\xAFV[[a\x02\xC0\x88\x82\x89\x01a\x01\xE9V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x03\x06W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x02\xEBV[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x03+\x82a\x02\xCFV[a\x035\x81\x85a\x02\xD9V[\x93Pa\x03E\x81\x85` \x86\x01a\x02\xE9V[a\x03N\x81a\x03\x11V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x03q\x81\x84a\x03!V[\x90P\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x85\x85\x11\x15a\x03\x94Wa\x03\x93a\x03yV[[\x83\x86\x11\x15a\x03\xA5Wa\x03\xA4a\x03}V[[`\x01\x85\x02\x83\x01\x91P\x84\x86\x03\x90P\x94P\x94\x92PPPV[_\x82\x90P\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_a\x04\x07\x83\x83a\x03\xBBV[\x82a\x04\x12\x815a\x03\xC5V[\x92P`\x04\x82\x10\x15a\x04RWa\x04M\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83`\x04\x03`\x08\x02a\x03\xF0V[\x83\x16\x92P[PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \"\xF2\x855\x97\xDC\xF7\x9F\xF1\xF9\xAA\xA0\x01,-\x1C-\xE5 \x14\x1D\x8D\xCBR\x9C7\x80\xE3e@,,dsolcC\0\x08\x14\x003",
    );
    /**Function with signature `VERIFIER_HASH()` and selector `0x2a510436`.
```solidity
function VERIFIER_HASH() external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERIFIER_HASHCall {}
    ///Container type for the return parameters of the [`VERIFIER_HASH()`](VERIFIER_HASHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERIFIER_HASHReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERIFIER_HASHCall> for UnderlyingRustTuple<'_> {
                fn from(value: VERIFIER_HASHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERIFIER_HASHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERIFIER_HASHReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VERIFIER_HASHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERIFIER_HASHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VERIFIER_HASHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = VERIFIER_HASHReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VERIFIER_HASH()";
            const SELECTOR: [u8; 4] = [42u8, 81u8, 4u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `VERSION()` and selector `0xffa1ad74`.
```solidity
function VERSION() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERSIONCall {}
    ///Container type for the return parameters of the [`VERSION()`](VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERSIONCall> for UnderlyingRustTuple<'_> {
                fn from(value: VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERSIONReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = VERSIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VERSION()";
            const SELECTOR: [u8; 4] = [255u8, 161u8, 173u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `verifyProof(bytes32,bytes,bytes)` and selector `0x41493c60`.
```solidity
function verifyProof(bytes32, bytes memory, bytes memory proofBytes) external pure;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub proofBytes: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`verifyProof(bytes32,bytes,bytes)`](verifyProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofCall) -> Self {
                    (value._0, value._1, value.proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        proofBytes: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyProof(bytes32,bytes,bytes)";
            const SELECTOR: [u8; 4] = [65u8, 73u8, 60u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proofBytes,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SP1VerifierV2`](self) function calls.
    pub enum SP1VerifierV2Calls {
        #[allow(missing_docs)]
        VERIFIER_HASH(VERIFIER_HASHCall),
        #[allow(missing_docs)]
        VERSION(VERSIONCall),
        #[allow(missing_docs)]
        verifyProof(verifyProofCall),
    }
    #[automatically_derived]
    impl SP1VerifierV2Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [42u8, 81u8, 4u8, 54u8],
            [65u8, 73u8, 60u8, 96u8],
            [255u8, 161u8, 173u8, 116u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SP1VerifierV2Calls {
        const NAME: &'static str = "SP1VerifierV2Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::VERIFIER_HASH(_) => {
                    <VERIFIER_HASHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::VERSION(_) => <VERSIONCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyProof(_) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SP1VerifierV2Calls>] = &[
                {
                    fn VERIFIER_HASH(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SP1VerifierV2Calls> {
                        <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SP1VerifierV2Calls::VERIFIER_HASH)
                    }
                    VERIFIER_HASH
                },
                {
                    fn verifyProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SP1VerifierV2Calls> {
                        <verifyProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SP1VerifierV2Calls::verifyProof)
                    }
                    verifyProof
                },
                {
                    fn VERSION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SP1VerifierV2Calls> {
                        <VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SP1VerifierV2Calls::VERSION)
                    }
                    VERSION
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::VERIFIER_HASH(inner) => {
                    <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::VERSION(inner) => {
                    <VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::VERIFIER_HASH(inner) => {
                    <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::VERSION(inner) => {
                    <VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SP1VerifierV2`](self) contract instance.

See the [wrapper's documentation](`SP1VerifierV2Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SP1VerifierV2Instance<T, P, N> {
        SP1VerifierV2Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SP1VerifierV2Instance<T, P, N>>,
    > {
        SP1VerifierV2Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SP1VerifierV2Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SP1VerifierV2`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SP1VerifierV2`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SP1VerifierV2Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SP1VerifierV2Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SP1VerifierV2Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SP1VerifierV2Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SP1VerifierV2`](self) contract instance.

See the [wrapper's documentation](`SP1VerifierV2Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SP1VerifierV2Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SP1VerifierV2Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SP1VerifierV2Instance<T, P, N> {
            SP1VerifierV2Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SP1VerifierV2Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`VERIFIER_HASH`] function.
        pub fn VERIFIER_HASH(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, VERIFIER_HASHCall, N> {
            self.call_builder(&VERIFIER_HASHCall {})
        }
        ///Creates a new call builder for the [`VERSION`] function.
        pub fn VERSION(&self) -> alloy_contract::SolCallBuilder<T, &P, VERSIONCall, N> {
            self.call_builder(&VERSIONCall {})
        }
        ///Creates a new call builder for the [`verifyProof`] function.
        pub fn verifyProof(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
            _1: alloy::sol_types::private::Bytes,
            proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyProofCall, N> {
            self.call_builder(
                &verifyProofCall {
                    _0,
                    _1,
                    proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SP1VerifierV2Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
