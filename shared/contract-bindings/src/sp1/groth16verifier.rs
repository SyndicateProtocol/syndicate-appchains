/**

Generated by the following Solidity interface...
```solidity
interface Groth16Verifier {
    error ProofInvalid();
    error PublicInputNotInField();

    function Verify(uint256[8] memory proof, uint256[2] memory input) external view;
    function compressProof(uint256[8] memory proof) external view returns (uint256[4] memory compressed);
    function verifyCompressedProof(uint256[4] memory compressedProof, uint256[2] memory input) external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "Verify",
    "inputs": [
      {
        "name": "proof",
        "type": "uint256[8]",
        "internalType": "uint256[8]"
      },
      {
        "name": "input",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "compressProof",
    "inputs": [
      {
        "name": "proof",
        "type": "uint256[8]",
        "internalType": "uint256[8]"
      }
    ],
    "outputs": [
      {
        "name": "compressed",
        "type": "uint256[4]",
        "internalType": "uint256[4]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyCompressedProof",
    "inputs": [
      {
        "name": "compressedProof",
        "type": "uint256[4]",
        "internalType": "uint256[4]"
      },
      {
        "name": "input",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "ProofInvalid",
    "inputs": []
  },
  {
    "type": "error",
    "name": "PublicInputNotInField",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Groth16Verifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5061218e8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806344f6369214610043578063eddf243c14610073578063f11817b21461008f575b5f80fd5b61005d60048036038101906100589190611eeb565b6100ab565b60405161006a9190611fc5565b60405180910390f35b61008d60048036038101906100889190611fff565b61020a565b005b6100a960048036038101906100a49190612060565b6104a4565b005b6100b3611e5b565b6100ec825f600881106100c9576100c861209e565b5b6020020135836001600881106100e2576100e161209e565b5b6020020135610a5f565b815f600481106100ff576100fe61209e565b5b6020020181815250506101748260036008811061011f5761011e61209e565b5b6020020135836002600881106101385761013761209e565b5b6020020135846005600881106101515761015061209e565b5b60200201358560046008811061016a5761016961209e565b5b6020020135610c0d565b826002600481106101885761018761209e565b5b60200201836001600481106101a05761019f61209e565b5b60200201828152508281525050506101e8826006600881106101c5576101c461209e565b5b6020020135836007600881106101de576101dd61209e565b5b6020020135610a5f565b816003600481106101fc576101fb61209e565b5b602002018181525050919050565b5f80610215836111d9565b915091505f6040516101008682377f2d607dbe189b63f10ec9b8feb0168610ae0e44812738677c9a90d8ed0f6906956101008201527f031945137210f1179473d48e78fb4b6e4460532d1a9d63d631ba7409e6d0d7dc6101208201527f0a567a74c478d33f2a91fdd39609da291a31b12cf39928763be50dd77d5ea5326101408201527f206c49315f5f89813278cb4176b1aabb9bdb7d66200128d6e6757e9cea1f77436101608201527f2532784eb9331a8b7acee80e5e941f050efdbdfa4b28677d01ad98f3ecebd13e6101808201527f19d4e81989ace8f20cc2793c8cdc1aa8a0c6ae595df8e5b8cad044baa8f671116101a08201527f0de8f097ec1a910b5c40bf1dbb070e4eb01240c269ed6d6421196d4e15dee7696101c08201527f0d4ac963b78b91429d5d0c4534f9fe5493d3411accd4d894fceed33f4ef0c0b16101e08201527f039c8a9c09855dcfd2e4292273cf75cc0816ed475612c4e7255db164f991d8b36102008201527f12bf6e699f3055557b29cfd9e3fabaacd1cc2fba5536e26975ff819dcc428b5761022082015283610240820152826102608201527f277239c9d98a5e999c1856c84f05540a86696a5d8b3d68975faf8af742286bf26102808201527f0928c30680044b2ee8a0317a949e1ca4d17062504b30ac85eacb33a677ed1d906102a08201527eb086d54acb43ea62111dc22e7547f753d1550e0e60c2fb5b7d292c2a2240e96102c08201527f1907404559d12f9eea3f4ea7b687d32193ab79824c93828818e2bdb67e9121d46102e08201526020816103008360085afa9150805182169150508061049d576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6104ac611e7d565b5f806104ce855f600481106104c4576104c361209e565b5b60200201356113ab565b915091505f805f80610510896002600481106104ed576104ec61209e565b5b60200201358a6001600481106105065761050561209e565b5b60200201356114e0565b93509350935093505f8061053b8b6003600481106105315761053061209e565b5b60200201356113ab565b915091505f8061054a8c6111d9565b91509150898b5f601881106105625761056161209e565b5b602002018181525050888b6001601881106105805761057f61209e565b5b602002018181525050868b60026018811061059e5761059d61209e565b5b602002018181525050878b6003601881106105bc576105bb61209e565b5b602002018181525050848b6004601881106105da576105d961209e565b5b602002018181525050858b6005601881106105f8576105f761209e565b5b602002018181525050838b6006601881106106165761061561209e565b5b602002018181525050828b6007601881106106345761063361209e565b5b6020020181815250507f2d607dbe189b63f10ec9b8feb0168610ae0e44812738677c9a90d8ed0f6906958b6008601881106106725761067161209e565b5b6020020181815250507f031945137210f1179473d48e78fb4b6e4460532d1a9d63d631ba7409e6d0d7dc8b6009601881106106b0576106af61209e565b5b6020020181815250507f0a567a74c478d33f2a91fdd39609da291a31b12cf39928763be50dd77d5ea5328b600a601881106106ee576106ed61209e565b5b6020020181815250507f206c49315f5f89813278cb4176b1aabb9bdb7d66200128d6e6757e9cea1f77438b600b6018811061072c5761072b61209e565b5b6020020181815250507f2532784eb9331a8b7acee80e5e941f050efdbdfa4b28677d01ad98f3ecebd13e8b600c6018811061076a5761076961209e565b5b6020020181815250507f19d4e81989ace8f20cc2793c8cdc1aa8a0c6ae595df8e5b8cad044baa8f671118b600d601881106107a8576107a761209e565b5b6020020181815250507f0de8f097ec1a910b5c40bf1dbb070e4eb01240c269ed6d6421196d4e15dee7698b600e601881106107e6576107e561209e565b5b6020020181815250507f0d4ac963b78b91429d5d0c4534f9fe5493d3411accd4d894fceed33f4ef0c0b18b600f601881106108245761082361209e565b5b6020020181815250507f039c8a9c09855dcfd2e4292273cf75cc0816ed475612c4e7255db164f991d8b38b6010601881106108625761086161209e565b5b6020020181815250507f12bf6e699f3055557b29cfd9e3fabaacd1cc2fba5536e26975ff819dcc428b578b6011601881106108a05761089f61209e565b5b602002018181525050818b6012601881106108be576108bd61209e565b5b602002018181525050808b6013601881106108dc576108db61209e565b5b6020020181815250507f277239c9d98a5e999c1856c84f05540a86696a5d8b3d68975faf8af742286bf28b60146018811061091a5761091961209e565b5b6020020181815250507f0928c30680044b2ee8a0317a949e1ca4d17062504b30ac85eacb33a677ed1d908b6015601881106109585761095761209e565b5b6020020181815250507eb086d54acb43ea62111dc22e7547f753d1550e0e60c2fb5b7d292c2a2240e98b6016601881106109955761099461209e565b5b6020020181815250507f1907404559d12f9eea3f4ea7b687d32193ab79824c93828818e2bdb67e9121d48b6017601881106109d3576109d261209e565b5b6020020181815250505f6109e5611ea0565b6020816103008f60085afa9150811580610a1757506001815f60018110610a0f57610a0e61209e565b5b602002015114155b15610a4e576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050505050505050565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783101580610aaf57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210155b15610ae6576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83148015610af457505f82145b15610b01575f9050610c07565b5f610b9f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610b3457610b336120cb565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610b6557610b646120cb565b5b877f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610b9557610b946120cb565b5b898a0909086118bb565b9050808303610bb7575f600185901b17915050610c07565b610bc081611957565b8303610bd55760018085901b17915050610c07565b6040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b5f807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786101580610c5e57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b80610c8957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478410155b80610cb457507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310155b15610ceb576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8385878917171703610d03575f80915091506111d0565b5f805f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610d3557610d346120cb565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d629190612125565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610d9157610d906120cb565b5b8a8c090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610dc757610dc66120cb565b5b8a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610df757610df66120cb565b5b8c8d090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610e2d57610e2c6120cb565b5b8a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610e5d57610e5c6120cb565b5b8c8d090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610e9257610e916120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610ec157610ec06120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610ef057610eef6120cb565b5b8c860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5089450610fd57f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610f4b57610f4a6120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610f7a57610f796120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610fa957610fa86120cb565b5b8e870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e77508611957565b93505050505f806110787f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061100e5761100d6120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061103d5761103c6120cb565b5b8586097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061106f5761106e6120cb565b5b878809086118bb565b90506111057f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806110ac576110ab6120cb565b5b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806110fc576110fb6120cb565b5b848808096119c2565b15915050611114838383611a2c565b8093508194505050828714801561112a57508186145b15611152575f8161113b575f61113e565b60025b60ff1660028b901b171794508793506111cc565b61115b83611957565b87148015611170575061116d82611957565b86145b1561119957600181611182575f611185565b60025b60ff1660028b901b171794508793506111cb565b6040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5050505b94509492505050565b5f805f60019050604051604081015f7f125f86b8f05072082832868e9f344edc8393964fb3772aab87b499a1576a68a183527f2f2fc8fb4a3d871123f5ec56e95789edc1332fe8afd2f83b6ae94a1d89c7403b60208401527f1453175db10a715beb24933f762d3b39e7cbbc8851a2f099e1ec61e13c8dd14482527f02b8210f6b3bd267cab35bc71e0656fea8d6f4a0bd248de944276da4ca7ff6256020830152863590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f149145ba3502d0e90843154371dadc5851136e048014d6be5ca67134a098176a82527f19222d26f931086825b4b697211d583b519fe168b2b7913593ef0b5fdd345e386020830152602087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693508251955060208301519450505050806113a5576040517fa54f8e2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50915091565b5f805f83036113bf575f80915091506114db565b5f6001808516149050600184901c92507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310611428576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114c57f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061145a576114596120cb565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061148b5761148a6120cb565b5b867f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806114bb576114ba6120cb565b5b88890909086118bb565b915080156114d9576114d682611957565b91505b505b915091565b5f805f805f861480156114f257505f85145b15611508575f805f8093509350935093506118b2565b5f60018088161490505f6002808916149050600288901c95508694507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478610158061157357507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b156115aa576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115da576115d96120cb565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476116079190612125565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611636576116356120cb565b5b888a090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061166c5761166b6120cb565b5b887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061169c5761169b6120cb565b5b8a8b090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116d2576116d16120cb565b5b887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611702576117016120cb565b5b8a8b090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611737576117366120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611766576117656120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611795576117946120cb565b5b8a860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e508965061187a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806117f0576117ef6120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061181f5761181e6120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061184e5761184d6120cb565b5b8c870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e77508611957565b9550611887878786611a2c565b809750819850505084156118ac5761189e87611957565b96506118a986611957565b95505b50505050505b92959194509250565b5f6118e6827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52611d27565b9050817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611918576119176120cb565b5b82830914611952576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808381611989576119886120cb565b5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703816119ba576119b96120cb565b5b069050919050565b5f806119ee837f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52611d27565b9050827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611a2057611a1f6120cb565b5b82830914915050919050565b5f805f611acb7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611a6157611a606120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611a9057611a8f6120cb565b5b8788097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611ac257611ac16120cb565b5b898a09086118bb565b90508315611adf57611adc81611957565b90505b611b6a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611b1157611b106120cb565b5b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611b6157611b606120cb565b5b848a08096118bb565b92507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611b9b57611b9a6120cb565b5b611bd67f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611bcd57611bcc6120cb565b5b60028609611dbe565b860991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c0957611c086120cb565b5b611c437f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c3b57611c3a6120cb565b5b848509611957565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c7257611c716120cb565b5b8586090886141580611ce757507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611cae57611cad6120cb565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611cdd57611cdc6120cb565b5b8385096002098514155b15611d1e576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50935093915050565b5f8060405160208152602080820152602060408201528460608201528360808201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a082015260208160c08360055afa9150805192505080611db7576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5092915050565b5f611de9827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45611d27565b905060017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611e1c57611e1b6120cb565b5b82840914611e56576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6040518060800160405280600490602082028036833780820191505090505090565b604051806103000160405280601890602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b5f80fd5b5f80fd5b5f81905082602060080282011115611ee557611ee4611ec6565b5b92915050565b5f6101008284031215611f0157611f00611ec2565b5b5f611f0e84828501611eca565b91505092915050565b5f60049050919050565b5f81905092915050565b5f819050919050565b5f819050919050565b611f4681611f34565b82525050565b5f611f578383611f3d565b60208301905092915050565b5f602082019050919050565b611f7881611f17565b611f828184611f21565b9250611f8d82611f2b565b805f5b83811015611fbd578151611fa48782611f4c565b9650611faf83611f63565b925050600181019050611f90565b505050505050565b5f608082019050611fd85f830184611f6f565b92915050565b5f81905082602060020282011115611ff957611ff8611ec6565b5b92915050565b5f80610140838503121561201657612015611ec2565b5b5f61202385828601611eca565b92505061010061203585828601611fde565b9150509250929050565b5f8190508260206004028201111561205a57612059611ec6565b5b92915050565b5f8060c0838503121561207657612075611ec2565b5b5f6120838582860161203f565b925050608061209485828601611fde565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61212f82611f34565b915061213a83611f34565b9250828203905081811115612152576121516120f8565b5b9291505056fea26469706673582212200f998ff277c8af7ca40bf1942446d887d75deece0bb8c4c95df652e4d3ab938364736f6c63430008140033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa!\x8E\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80cD\xF66\x92\x14a\0CW\x80c\xED\xDF$<\x14a\0sW\x80c\xF1\x18\x17\xB2\x14a\0\x8FW[_\x80\xFD[a\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\x1E\xEBV[a\0\xABV[`@Qa\0j\x91\x90a\x1F\xC5V[`@Q\x80\x91\x03\x90\xF3[a\0\x8D`\x04\x806\x03\x81\x01\x90a\0\x88\x91\x90a\x1F\xFFV[a\x02\nV[\0[a\0\xA9`\x04\x806\x03\x81\x01\x90a\0\xA4\x91\x90a `V[a\x04\xA4V[\0[a\0\xB3a\x1E[V[a\0\xEC\x82_`\x08\x81\x10a\0\xC9Wa\0\xC8a \x9EV[[` \x02\x015\x83`\x01`\x08\x81\x10a\0\xE2Wa\0\xE1a \x9EV[[` \x02\x015a\n_V[\x81_`\x04\x81\x10a\0\xFFWa\0\xFEa \x9EV[[` \x02\x01\x81\x81RPPa\x01t\x82`\x03`\x08\x81\x10a\x01\x1FWa\x01\x1Ea \x9EV[[` \x02\x015\x83`\x02`\x08\x81\x10a\x018Wa\x017a \x9EV[[` \x02\x015\x84`\x05`\x08\x81\x10a\x01QWa\x01Pa \x9EV[[` \x02\x015\x85`\x04`\x08\x81\x10a\x01jWa\x01ia \x9EV[[` \x02\x015a\x0C\rV[\x82`\x02`\x04\x81\x10a\x01\x88Wa\x01\x87a \x9EV[[` \x02\x01\x83`\x01`\x04\x81\x10a\x01\xA0Wa\x01\x9Fa \x9EV[[` \x02\x01\x82\x81RP\x82\x81RPPPa\x01\xE8\x82`\x06`\x08\x81\x10a\x01\xC5Wa\x01\xC4a \x9EV[[` \x02\x015\x83`\x07`\x08\x81\x10a\x01\xDEWa\x01\xDDa \x9EV[[` \x02\x015a\n_V[\x81`\x03`\x04\x81\x10a\x01\xFCWa\x01\xFBa \x9EV[[` \x02\x01\x81\x81RPP\x91\x90PV[_\x80a\x02\x15\x83a\x11\xD9V[\x91P\x91P_`@Qa\x01\0\x86\x827\x7F-`}\xBE\x18\x9Bc\xF1\x0E\xC9\xB8\xFE\xB0\x16\x86\x10\xAE\x0ED\x81'8g|\x9A\x90\xD8\xED\x0Fi\x06\x95a\x01\0\x82\x01R\x7F\x03\x19E\x13r\x10\xF1\x17\x94s\xD4\x8Ex\xFBKnD`S-\x1A\x9Dc\xD61\xBAt\t\xE6\xD0\xD7\xDCa\x01 \x82\x01R\x7F\nVzt\xC4x\xD3?*\x91\xFD\xD3\x96\t\xDA)\x1A1\xB1,\xF3\x99(v;\xE5\r\xD7}^\xA52a\x01@\x82\x01R\x7F lI1__\x89\x812x\xCBAv\xB1\xAA\xBB\x9B\xDB}f \x01(\xD6\xE6u~\x9C\xEA\x1FwCa\x01`\x82\x01R\x7F%2xN\xB93\x1A\x8Bz\xCE\xE8\x0E^\x94\x1F\x05\x0E\xFD\xBD\xFAK(g}\x01\xAD\x98\xF3\xEC\xEB\xD1>a\x01\x80\x82\x01R\x7F\x19\xD4\xE8\x19\x89\xAC\xE8\xF2\x0C\xC2y<\x8C\xDC\x1A\xA8\xA0\xC6\xAEY]\xF8\xE5\xB8\xCA\xD0D\xBA\xA8\xF6q\x11a\x01\xA0\x82\x01R\x7F\r\xE8\xF0\x97\xEC\x1A\x91\x0B\\@\xBF\x1D\xBB\x07\x0EN\xB0\x12@\xC2i\xEDmd!\x19mN\x15\xDE\xE7ia\x01\xC0\x82\x01R\x7F\rJ\xC9c\xB7\x8B\x91B\x9D]\x0CE4\xF9\xFET\x93\xD3A\x1A\xCC\xD4\xD8\x94\xFC\xEE\xD3?N\xF0\xC0\xB1a\x01\xE0\x82\x01R\x7F\x03\x9C\x8A\x9C\t\x85]\xCF\xD2\xE4)\"s\xCFu\xCC\x08\x16\xEDGV\x12\xC4\xE7%]\xB1d\xF9\x91\xD8\xB3a\x02\0\x82\x01R\x7F\x12\xBFni\x9F0UU{)\xCF\xD9\xE3\xFA\xBA\xAC\xD1\xCC/\xBAU6\xE2iu\xFF\x81\x9D\xCCB\x8BWa\x02 \x82\x01R\x83a\x02@\x82\x01R\x82a\x02`\x82\x01R\x7F'r9\xC9\xD9\x8A^\x99\x9C\x18V\xC8O\x05T\n\x86ij]\x8B=h\x97_\xAF\x8A\xF7B(k\xF2a\x02\x80\x82\x01R\x7F\t(\xC3\x06\x80\x04K.\xE8\xA01z\x94\x9E\x1C\xA4\xD1pbPK0\xAC\x85\xEA\xCB3\xA6w\xED\x1D\x90a\x02\xA0\x82\x01R~\xB0\x86\xD5J\xCBC\xEAb\x11\x1D\xC2.uG\xF7S\xD1U\x0E\x0E`\xC2\xFB[}),*\"@\xE9a\x02\xC0\x82\x01R\x7F\x19\x07@EY\xD1/\x9E\xEA?N\xA7\xB6\x87\xD3!\x93\xABy\x82L\x93\x82\x88\x18\xE2\xBD\xB6~\x91!\xD4a\x02\xE0\x82\x01R` \x81a\x03\0\x83`\x08Z\xFA\x91P\x80Q\x82\x16\x91PP\x80a\x04\x9DW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPV[a\x04\xACa\x1E}V[_\x80a\x04\xCE\x85_`\x04\x81\x10a\x04\xC4Wa\x04\xC3a \x9EV[[` \x02\x015a\x13\xABV[\x91P\x91P_\x80_\x80a\x05\x10\x89`\x02`\x04\x81\x10a\x04\xEDWa\x04\xECa \x9EV[[` \x02\x015\x8A`\x01`\x04\x81\x10a\x05\x06Wa\x05\x05a \x9EV[[` \x02\x015a\x14\xE0V[\x93P\x93P\x93P\x93P_\x80a\x05;\x8B`\x03`\x04\x81\x10a\x051Wa\x050a \x9EV[[` \x02\x015a\x13\xABV[\x91P\x91P_\x80a\x05J\x8Ca\x11\xD9V[\x91P\x91P\x89\x8B_`\x18\x81\x10a\x05bWa\x05aa \x9EV[[` \x02\x01\x81\x81RPP\x88\x8B`\x01`\x18\x81\x10a\x05\x80Wa\x05\x7Fa \x9EV[[` \x02\x01\x81\x81RPP\x86\x8B`\x02`\x18\x81\x10a\x05\x9EWa\x05\x9Da \x9EV[[` \x02\x01\x81\x81RPP\x87\x8B`\x03`\x18\x81\x10a\x05\xBCWa\x05\xBBa \x9EV[[` \x02\x01\x81\x81RPP\x84\x8B`\x04`\x18\x81\x10a\x05\xDAWa\x05\xD9a \x9EV[[` \x02\x01\x81\x81RPP\x85\x8B`\x05`\x18\x81\x10a\x05\xF8Wa\x05\xF7a \x9EV[[` \x02\x01\x81\x81RPP\x83\x8B`\x06`\x18\x81\x10a\x06\x16Wa\x06\x15a \x9EV[[` \x02\x01\x81\x81RPP\x82\x8B`\x07`\x18\x81\x10a\x064Wa\x063a \x9EV[[` \x02\x01\x81\x81RPP\x7F-`}\xBE\x18\x9Bc\xF1\x0E\xC9\xB8\xFE\xB0\x16\x86\x10\xAE\x0ED\x81'8g|\x9A\x90\xD8\xED\x0Fi\x06\x95\x8B`\x08`\x18\x81\x10a\x06rWa\x06qa \x9EV[[` \x02\x01\x81\x81RPP\x7F\x03\x19E\x13r\x10\xF1\x17\x94s\xD4\x8Ex\xFBKnD`S-\x1A\x9Dc\xD61\xBAt\t\xE6\xD0\xD7\xDC\x8B`\t`\x18\x81\x10a\x06\xB0Wa\x06\xAFa \x9EV[[` \x02\x01\x81\x81RPP\x7F\nVzt\xC4x\xD3?*\x91\xFD\xD3\x96\t\xDA)\x1A1\xB1,\xF3\x99(v;\xE5\r\xD7}^\xA52\x8B`\n`\x18\x81\x10a\x06\xEEWa\x06\xEDa \x9EV[[` \x02\x01\x81\x81RPP\x7F lI1__\x89\x812x\xCBAv\xB1\xAA\xBB\x9B\xDB}f \x01(\xD6\xE6u~\x9C\xEA\x1FwC\x8B`\x0B`\x18\x81\x10a\x07,Wa\x07+a \x9EV[[` \x02\x01\x81\x81RPP\x7F%2xN\xB93\x1A\x8Bz\xCE\xE8\x0E^\x94\x1F\x05\x0E\xFD\xBD\xFAK(g}\x01\xAD\x98\xF3\xEC\xEB\xD1>\x8B`\x0C`\x18\x81\x10a\x07jWa\x07ia \x9EV[[` \x02\x01\x81\x81RPP\x7F\x19\xD4\xE8\x19\x89\xAC\xE8\xF2\x0C\xC2y<\x8C\xDC\x1A\xA8\xA0\xC6\xAEY]\xF8\xE5\xB8\xCA\xD0D\xBA\xA8\xF6q\x11\x8B`\r`\x18\x81\x10a\x07\xA8Wa\x07\xA7a \x9EV[[` \x02\x01\x81\x81RPP\x7F\r\xE8\xF0\x97\xEC\x1A\x91\x0B\\@\xBF\x1D\xBB\x07\x0EN\xB0\x12@\xC2i\xEDmd!\x19mN\x15\xDE\xE7i\x8B`\x0E`\x18\x81\x10a\x07\xE6Wa\x07\xE5a \x9EV[[` \x02\x01\x81\x81RPP\x7F\rJ\xC9c\xB7\x8B\x91B\x9D]\x0CE4\xF9\xFET\x93\xD3A\x1A\xCC\xD4\xD8\x94\xFC\xEE\xD3?N\xF0\xC0\xB1\x8B`\x0F`\x18\x81\x10a\x08$Wa\x08#a \x9EV[[` \x02\x01\x81\x81RPP\x7F\x03\x9C\x8A\x9C\t\x85]\xCF\xD2\xE4)\"s\xCFu\xCC\x08\x16\xEDGV\x12\xC4\xE7%]\xB1d\xF9\x91\xD8\xB3\x8B`\x10`\x18\x81\x10a\x08bWa\x08aa \x9EV[[` \x02\x01\x81\x81RPP\x7F\x12\xBFni\x9F0UU{)\xCF\xD9\xE3\xFA\xBA\xAC\xD1\xCC/\xBAU6\xE2iu\xFF\x81\x9D\xCCB\x8BW\x8B`\x11`\x18\x81\x10a\x08\xA0Wa\x08\x9Fa \x9EV[[` \x02\x01\x81\x81RPP\x81\x8B`\x12`\x18\x81\x10a\x08\xBEWa\x08\xBDa \x9EV[[` \x02\x01\x81\x81RPP\x80\x8B`\x13`\x18\x81\x10a\x08\xDCWa\x08\xDBa \x9EV[[` \x02\x01\x81\x81RPP\x7F'r9\xC9\xD9\x8A^\x99\x9C\x18V\xC8O\x05T\n\x86ij]\x8B=h\x97_\xAF\x8A\xF7B(k\xF2\x8B`\x14`\x18\x81\x10a\t\x1AWa\t\x19a \x9EV[[` \x02\x01\x81\x81RPP\x7F\t(\xC3\x06\x80\x04K.\xE8\xA01z\x94\x9E\x1C\xA4\xD1pbPK0\xAC\x85\xEA\xCB3\xA6w\xED\x1D\x90\x8B`\x15`\x18\x81\x10a\tXWa\tWa \x9EV[[` \x02\x01\x81\x81RPP~\xB0\x86\xD5J\xCBC\xEAb\x11\x1D\xC2.uG\xF7S\xD1U\x0E\x0E`\xC2\xFB[}),*\"@\xE9\x8B`\x16`\x18\x81\x10a\t\x95Wa\t\x94a \x9EV[[` \x02\x01\x81\x81RPP\x7F\x19\x07@EY\xD1/\x9E\xEA?N\xA7\xB6\x87\xD3!\x93\xABy\x82L\x93\x82\x88\x18\xE2\xBD\xB6~\x91!\xD4\x8B`\x17`\x18\x81\x10a\t\xD3Wa\t\xD2a \x9EV[[` \x02\x01\x81\x81RPP_a\t\xE5a\x1E\xA0V[` \x81a\x03\0\x8F`\x08Z\xFA\x91P\x81\x15\x80a\n\x17WP`\x01\x81_`\x01\x81\x10a\n\x0FWa\n\x0Ea \x9EV[[` \x02\x01Q\x14\x15[\x15a\nNW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPPPPPPPPPV[_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15\x80a\n\xAFWP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x15[\x15a\n\xE6W`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x14\x80\x15a\n\xF4WP_\x82\x14[\x15a\x0B\x01W_\x90Pa\x0C\x07V[_a\x0B\x9F\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0B4Wa\x0B3a \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0BeWa\x0Bda \xCBV[[\x87\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0B\x95Wa\x0B\x94a \xCBV[[\x89\x8A\t\t\x08a\x18\xBBV[\x90P\x80\x83\x03a\x0B\xB7W_`\x01\x85\x90\x1B\x17\x91PPa\x0C\x07V[a\x0B\xC0\x81a\x19WV[\x83\x03a\x0B\xD5W`\x01\x80\x85\x90\x1B\x17\x91PPa\x0C\x07V[`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x92\x91PPV[_\x80\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x86\x10\x15\x80a\x0C^WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15[\x80a\x0C\x89WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x84\x10\x15[\x80a\x0C\xB4WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15[\x15a\x0C\xEBW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x85\x87\x89\x17\x17\x17\x03a\r\x03W_\x80\x91P\x91Pa\x11\xD0V[_\x80_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r5Wa\r4a \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\rb\x91\x90a!%V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r\x91Wa\r\x90a \xCBV[[\x8A\x8C\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r\xC7Wa\r\xC6a \xCBV[[\x8A\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r\xF7Wa\r\xF6a \xCBV[[\x8C\x8D\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E-Wa\x0E,a \xCBV[[\x8A\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E]Wa\x0E\\a \xCBV[[\x8C\x8D\t\t\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E\x92Wa\x0E\x91a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E\xC1Wa\x0E\xC0a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E\xF0Wa\x0E\xEFa \xCBV[[\x8C\x86\t\x84\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x94Pa\x0F\xD5\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0FKWa\x0FJa \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0FzWa\x0Fya \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0F\xA9Wa\x0F\xA8a \xCBV[[\x8E\x87\t\x84\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08a\x19WV[\x93PPPP_\x80a\x10x\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10\x0EWa\x10\ra \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10=Wa\x10<a \xCBV[[\x85\x86\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10oWa\x10na \xCBV[[\x87\x88\t\x08a\x18\xBBV[\x90Pa\x11\x05\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10\xACWa\x10\xABa \xCBV[[\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10\xFCWa\x10\xFBa \xCBV[[\x84\x88\x08\ta\x19\xC2V[\x15\x91PPa\x11\x14\x83\x83\x83a\x1A,V[\x80\x93P\x81\x94PPP\x82\x87\x14\x80\x15a\x11*WP\x81\x86\x14[\x15a\x11RW_\x81a\x11;W_a\x11>V[`\x02[`\xFF\x16`\x02\x8B\x90\x1B\x17\x17\x94P\x87\x93Pa\x11\xCCV[a\x11[\x83a\x19WV[\x87\x14\x80\x15a\x11pWPa\x11m\x82a\x19WV[\x86\x14[\x15a\x11\x99W`\x01\x81a\x11\x82W_a\x11\x85V[`\x02[`\xFF\x16`\x02\x8B\x90\x1B\x17\x17\x94P\x87\x93Pa\x11\xCBV[`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[[PPP[\x94P\x94\x92PPPV[_\x80_`\x01\x90P`@Q`@\x81\x01_\x7F\x12_\x86\xB8\xF0Pr\x08(2\x86\x8E\x9F4N\xDC\x83\x93\x96O\xB3w*\xAB\x87\xB4\x99\xA1Wjh\xA1\x83R\x7F//\xC8\xFBJ=\x87\x11#\xF5\xECV\xE9W\x89\xED\xC13/\xE8\xAF\xD2\xF8;j\xE9J\x1D\x89\xC7@;` \x84\x01R\x7F\x14S\x17]\xB1\nq[\xEB$\x93?v-;9\xE7\xCB\xBC\x88Q\xA2\xF0\x99\xE1\xECa\xE1<\x8D\xD1D\x82R\x7F\x02\xB8!\x0Fk;\xD2g\xCA\xB3[\xC7\x1E\x06V\xFE\xA8\xD6\xF4\xA0\xBD$\x8D\xE9D'm\xA4\xCA\x7F\xF6%` \x83\x01R\x865\x90P\x80`@\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x81\x10\x84\x16\x93P`@\x82``\x84`\x07Z\xFA\x84\x16\x93P`@\x83`\x80\x85`\x06Z\xFA\x84\x16\x93P\x7F\x14\x91E\xBA5\x02\xD0\xE9\x08C\x15Cq\xDA\xDCXQ\x13n\x04\x80\x14\xD6\xBE\\\xA6q4\xA0\x98\x17j\x82R\x7F\x19\"-&\xF91\x08h%\xB4\xB6\x97!\x1DX;Q\x9F\xE1h\xB2\xB7\x915\x93\xEF\x0B_\xDD4^8` \x83\x01R` \x87\x015\x90P\x80`@\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x81\x10\x84\x16\x93P`@\x82``\x84`\x07Z\xFA\x84\x16\x93P`@\x83`\x80\x85`\x06Z\xFA\x84\x16\x93P\x82Q\x95P` \x83\x01Q\x94PPPP\x80a\x13\xA5W`@Q\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x91P\x91V[_\x80_\x83\x03a\x13\xBFW_\x80\x91P\x91Pa\x14\xDBV[_`\x01\x80\x85\x16\x14\x90P`\x01\x84\x90\x1C\x92P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10a\x14(W`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x14\xC5\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x14ZWa\x14Ya \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x14\x8BWa\x14\x8Aa \xCBV[[\x86\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x14\xBBWa\x14\xBAa \xCBV[[\x88\x89\t\t\x08a\x18\xBBV[\x91P\x80\x15a\x14\xD9Wa\x14\xD6\x82a\x19WV[\x91P[P[\x91P\x91V[_\x80_\x80_\x86\x14\x80\x15a\x14\xF2WP_\x85\x14[\x15a\x15\x08W_\x80_\x80\x93P\x93P\x93P\x93Pa\x18\xB2V[_`\x01\x80\x88\x16\x14\x90P_`\x02\x80\x89\x16\x14\x90P`\x02\x88\x90\x1C\x95P\x86\x94P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x86\x10\x15\x80a\x15sWP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15[\x15a\x15\xAAW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x15\xDAWa\x15\xD9a \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\x16\x07\x91\x90a!%V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x166Wa\x165a \xCBV[[\x88\x8A\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x16lWa\x16ka \xCBV[[\x88\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x16\x9CWa\x16\x9Ba \xCBV[[\x8A\x8B\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x16\xD2Wa\x16\xD1a \xCBV[[\x88\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17\x02Wa\x17\x01a \xCBV[[\x8A\x8B\t\t\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x177Wa\x176a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17fWa\x17ea \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17\x95Wa\x17\x94a \xCBV[[\x8A\x86\t\x84\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x96Pa\x18z\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17\xF0Wa\x17\xEFa \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x18\x1FWa\x18\x1Ea \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x18NWa\x18Ma \xCBV[[\x8C\x87\t\x84\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08a\x19WV[\x95Pa\x18\x87\x87\x87\x86a\x1A,V[\x80\x97P\x81\x98PPP\x84\x15a\x18\xACWa\x18\x9E\x87a\x19WV[\x96Pa\x18\xA9\x86a\x19WV[\x95P[PPPPP[\x92\x95\x91\x94P\x92PV[_a\x18\xE6\x82\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?Ra\x1D'V[\x90P\x81\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x19\x18Wa\x19\x17a \xCBV[[\x82\x83\t\x14a\x19RW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91\x90PV[_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x83\x81a\x19\x89Wa\x19\x88a \xCBV[[\x06\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x03\x81a\x19\xBAWa\x19\xB9a \xCBV[[\x06\x90P\x91\x90PV[_\x80a\x19\xEE\x83\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?Ra\x1D'V[\x90P\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1A Wa\x1A\x1Fa \xCBV[[\x82\x83\t\x14\x91PP\x91\x90PV[_\x80_a\x1A\xCB\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1AaWa\x1A`a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1A\x90Wa\x1A\x8Fa \xCBV[[\x87\x88\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1A\xC2Wa\x1A\xC1a \xCBV[[\x89\x8A\t\x08a\x18\xBBV[\x90P\x83\x15a\x1A\xDFWa\x1A\xDC\x81a\x19WV[\x90P[a\x1Bj\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1B\x11Wa\x1B\x10a \xCBV[[\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1BaWa\x1B`a \xCBV[[\x84\x8A\x08\ta\x18\xBBV[\x92P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1B\x9BWa\x1B\x9Aa \xCBV[[a\x1B\xD6\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1B\xCDWa\x1B\xCCa \xCBV[[`\x02\x86\ta\x1D\xBEV[\x86\t\x91P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C\tWa\x1C\x08a \xCBV[[a\x1CC\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C;Wa\x1C:a \xCBV[[\x84\x85\ta\x19WV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1CrWa\x1Cqa \xCBV[[\x85\x86\t\x08\x86\x14\x15\x80a\x1C\xE7WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C\xAEWa\x1C\xADa \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C\xDDWa\x1C\xDCa \xCBV[[\x83\x85\t`\x02\t\x85\x14\x15[\x15a\x1D\x1EW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x93P\x93\x91PPV[_\x80`@Q` \x81R` \x80\x82\x01R` `@\x82\x01R\x84``\x82\x01R\x83`\x80\x82\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x82\x01R` \x81`\xC0\x83`\x05Z\xFA\x91P\x80Q\x92PP\x80a\x1D\xB7W`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x92\x91PPV[_a\x1D\xE9\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDEa\x1D'V[\x90P`\x01\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1E\x1CWa\x1E\x1Ba \xCBV[[\x82\x84\t\x14a\x1EVW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80a\x03\0\x01`@R\x80`\x18\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x82` `\x08\x02\x82\x01\x11\x15a\x1E\xE5Wa\x1E\xE4a\x1E\xC6V[[\x92\x91PPV[_a\x01\0\x82\x84\x03\x12\x15a\x1F\x01Wa\x1F\0a\x1E\xC2V[[_a\x1F\x0E\x84\x82\x85\x01a\x1E\xCAV[\x91PP\x92\x91PPV[_`\x04\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x1FF\x81a\x1F4V[\x82RPPV[_a\x1FW\x83\x83a\x1F=V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[a\x1Fx\x81a\x1F\x17V[a\x1F\x82\x81\x84a\x1F!V[\x92Pa\x1F\x8D\x82a\x1F+V[\x80_[\x83\x81\x10\x15a\x1F\xBDW\x81Qa\x1F\xA4\x87\x82a\x1FLV[\x96Pa\x1F\xAF\x83a\x1FcV[\x92PP`\x01\x81\x01\x90Pa\x1F\x90V[PPPPPPV[_`\x80\x82\x01\x90Pa\x1F\xD8_\x83\x01\x84a\x1FoV[\x92\x91PPV[_\x81\x90P\x82` `\x02\x02\x82\x01\x11\x15a\x1F\xF9Wa\x1F\xF8a\x1E\xC6V[[\x92\x91PPV[_\x80a\x01@\x83\x85\x03\x12\x15a \x16Wa \x15a\x1E\xC2V[[_a #\x85\x82\x86\x01a\x1E\xCAV[\x92PPa\x01\0a 5\x85\x82\x86\x01a\x1F\xDEV[\x91PP\x92P\x92\x90PV[_\x81\x90P\x82` `\x04\x02\x82\x01\x11\x15a ZWa Ya\x1E\xC6V[[\x92\x91PPV[_\x80`\xC0\x83\x85\x03\x12\x15a vWa ua\x1E\xC2V[[_a \x83\x85\x82\x86\x01a ?V[\x92PP`\x80a \x94\x85\x82\x86\x01a\x1F\xDEV[\x91PP\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a!/\x82a\x1F4V[\x91Pa!:\x83a\x1F4V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a!RWa!Qa \xF8V[[\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x0F\x99\x8F\xF2w\xC8\xAF|\xA4\x0B\xF1\x94$F\xD8\x87\xD7]\xEE\xCE\x0B\xB8\xC4\xC9]\xF6R\xE4\xD3\xAB\x93\x83dsolcC\0\x08\x14\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80cD\xF66\x92\x14a\0CW\x80c\xED\xDF$<\x14a\0sW\x80c\xF1\x18\x17\xB2\x14a\0\x8FW[_\x80\xFD[a\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\x1E\xEBV[a\0\xABV[`@Qa\0j\x91\x90a\x1F\xC5V[`@Q\x80\x91\x03\x90\xF3[a\0\x8D`\x04\x806\x03\x81\x01\x90a\0\x88\x91\x90a\x1F\xFFV[a\x02\nV[\0[a\0\xA9`\x04\x806\x03\x81\x01\x90a\0\xA4\x91\x90a `V[a\x04\xA4V[\0[a\0\xB3a\x1E[V[a\0\xEC\x82_`\x08\x81\x10a\0\xC9Wa\0\xC8a \x9EV[[` \x02\x015\x83`\x01`\x08\x81\x10a\0\xE2Wa\0\xE1a \x9EV[[` \x02\x015a\n_V[\x81_`\x04\x81\x10a\0\xFFWa\0\xFEa \x9EV[[` \x02\x01\x81\x81RPPa\x01t\x82`\x03`\x08\x81\x10a\x01\x1FWa\x01\x1Ea \x9EV[[` \x02\x015\x83`\x02`\x08\x81\x10a\x018Wa\x017a \x9EV[[` \x02\x015\x84`\x05`\x08\x81\x10a\x01QWa\x01Pa \x9EV[[` \x02\x015\x85`\x04`\x08\x81\x10a\x01jWa\x01ia \x9EV[[` \x02\x015a\x0C\rV[\x82`\x02`\x04\x81\x10a\x01\x88Wa\x01\x87a \x9EV[[` \x02\x01\x83`\x01`\x04\x81\x10a\x01\xA0Wa\x01\x9Fa \x9EV[[` \x02\x01\x82\x81RP\x82\x81RPPPa\x01\xE8\x82`\x06`\x08\x81\x10a\x01\xC5Wa\x01\xC4a \x9EV[[` \x02\x015\x83`\x07`\x08\x81\x10a\x01\xDEWa\x01\xDDa \x9EV[[` \x02\x015a\n_V[\x81`\x03`\x04\x81\x10a\x01\xFCWa\x01\xFBa \x9EV[[` \x02\x01\x81\x81RPP\x91\x90PV[_\x80a\x02\x15\x83a\x11\xD9V[\x91P\x91P_`@Qa\x01\0\x86\x827\x7F-`}\xBE\x18\x9Bc\xF1\x0E\xC9\xB8\xFE\xB0\x16\x86\x10\xAE\x0ED\x81'8g|\x9A\x90\xD8\xED\x0Fi\x06\x95a\x01\0\x82\x01R\x7F\x03\x19E\x13r\x10\xF1\x17\x94s\xD4\x8Ex\xFBKnD`S-\x1A\x9Dc\xD61\xBAt\t\xE6\xD0\xD7\xDCa\x01 \x82\x01R\x7F\nVzt\xC4x\xD3?*\x91\xFD\xD3\x96\t\xDA)\x1A1\xB1,\xF3\x99(v;\xE5\r\xD7}^\xA52a\x01@\x82\x01R\x7F lI1__\x89\x812x\xCBAv\xB1\xAA\xBB\x9B\xDB}f \x01(\xD6\xE6u~\x9C\xEA\x1FwCa\x01`\x82\x01R\x7F%2xN\xB93\x1A\x8Bz\xCE\xE8\x0E^\x94\x1F\x05\x0E\xFD\xBD\xFAK(g}\x01\xAD\x98\xF3\xEC\xEB\xD1>a\x01\x80\x82\x01R\x7F\x19\xD4\xE8\x19\x89\xAC\xE8\xF2\x0C\xC2y<\x8C\xDC\x1A\xA8\xA0\xC6\xAEY]\xF8\xE5\xB8\xCA\xD0D\xBA\xA8\xF6q\x11a\x01\xA0\x82\x01R\x7F\r\xE8\xF0\x97\xEC\x1A\x91\x0B\\@\xBF\x1D\xBB\x07\x0EN\xB0\x12@\xC2i\xEDmd!\x19mN\x15\xDE\xE7ia\x01\xC0\x82\x01R\x7F\rJ\xC9c\xB7\x8B\x91B\x9D]\x0CE4\xF9\xFET\x93\xD3A\x1A\xCC\xD4\xD8\x94\xFC\xEE\xD3?N\xF0\xC0\xB1a\x01\xE0\x82\x01R\x7F\x03\x9C\x8A\x9C\t\x85]\xCF\xD2\xE4)\"s\xCFu\xCC\x08\x16\xEDGV\x12\xC4\xE7%]\xB1d\xF9\x91\xD8\xB3a\x02\0\x82\x01R\x7F\x12\xBFni\x9F0UU{)\xCF\xD9\xE3\xFA\xBA\xAC\xD1\xCC/\xBAU6\xE2iu\xFF\x81\x9D\xCCB\x8BWa\x02 \x82\x01R\x83a\x02@\x82\x01R\x82a\x02`\x82\x01R\x7F'r9\xC9\xD9\x8A^\x99\x9C\x18V\xC8O\x05T\n\x86ij]\x8B=h\x97_\xAF\x8A\xF7B(k\xF2a\x02\x80\x82\x01R\x7F\t(\xC3\x06\x80\x04K.\xE8\xA01z\x94\x9E\x1C\xA4\xD1pbPK0\xAC\x85\xEA\xCB3\xA6w\xED\x1D\x90a\x02\xA0\x82\x01R~\xB0\x86\xD5J\xCBC\xEAb\x11\x1D\xC2.uG\xF7S\xD1U\x0E\x0E`\xC2\xFB[}),*\"@\xE9a\x02\xC0\x82\x01R\x7F\x19\x07@EY\xD1/\x9E\xEA?N\xA7\xB6\x87\xD3!\x93\xABy\x82L\x93\x82\x88\x18\xE2\xBD\xB6~\x91!\xD4a\x02\xE0\x82\x01R` \x81a\x03\0\x83`\x08Z\xFA\x91P\x80Q\x82\x16\x91PP\x80a\x04\x9DW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPV[a\x04\xACa\x1E}V[_\x80a\x04\xCE\x85_`\x04\x81\x10a\x04\xC4Wa\x04\xC3a \x9EV[[` \x02\x015a\x13\xABV[\x91P\x91P_\x80_\x80a\x05\x10\x89`\x02`\x04\x81\x10a\x04\xEDWa\x04\xECa \x9EV[[` \x02\x015\x8A`\x01`\x04\x81\x10a\x05\x06Wa\x05\x05a \x9EV[[` \x02\x015a\x14\xE0V[\x93P\x93P\x93P\x93P_\x80a\x05;\x8B`\x03`\x04\x81\x10a\x051Wa\x050a \x9EV[[` \x02\x015a\x13\xABV[\x91P\x91P_\x80a\x05J\x8Ca\x11\xD9V[\x91P\x91P\x89\x8B_`\x18\x81\x10a\x05bWa\x05aa \x9EV[[` \x02\x01\x81\x81RPP\x88\x8B`\x01`\x18\x81\x10a\x05\x80Wa\x05\x7Fa \x9EV[[` \x02\x01\x81\x81RPP\x86\x8B`\x02`\x18\x81\x10a\x05\x9EWa\x05\x9Da \x9EV[[` \x02\x01\x81\x81RPP\x87\x8B`\x03`\x18\x81\x10a\x05\xBCWa\x05\xBBa \x9EV[[` \x02\x01\x81\x81RPP\x84\x8B`\x04`\x18\x81\x10a\x05\xDAWa\x05\xD9a \x9EV[[` \x02\x01\x81\x81RPP\x85\x8B`\x05`\x18\x81\x10a\x05\xF8Wa\x05\xF7a \x9EV[[` \x02\x01\x81\x81RPP\x83\x8B`\x06`\x18\x81\x10a\x06\x16Wa\x06\x15a \x9EV[[` \x02\x01\x81\x81RPP\x82\x8B`\x07`\x18\x81\x10a\x064Wa\x063a \x9EV[[` \x02\x01\x81\x81RPP\x7F-`}\xBE\x18\x9Bc\xF1\x0E\xC9\xB8\xFE\xB0\x16\x86\x10\xAE\x0ED\x81'8g|\x9A\x90\xD8\xED\x0Fi\x06\x95\x8B`\x08`\x18\x81\x10a\x06rWa\x06qa \x9EV[[` \x02\x01\x81\x81RPP\x7F\x03\x19E\x13r\x10\xF1\x17\x94s\xD4\x8Ex\xFBKnD`S-\x1A\x9Dc\xD61\xBAt\t\xE6\xD0\xD7\xDC\x8B`\t`\x18\x81\x10a\x06\xB0Wa\x06\xAFa \x9EV[[` \x02\x01\x81\x81RPP\x7F\nVzt\xC4x\xD3?*\x91\xFD\xD3\x96\t\xDA)\x1A1\xB1,\xF3\x99(v;\xE5\r\xD7}^\xA52\x8B`\n`\x18\x81\x10a\x06\xEEWa\x06\xEDa \x9EV[[` \x02\x01\x81\x81RPP\x7F lI1__\x89\x812x\xCBAv\xB1\xAA\xBB\x9B\xDB}f \x01(\xD6\xE6u~\x9C\xEA\x1FwC\x8B`\x0B`\x18\x81\x10a\x07,Wa\x07+a \x9EV[[` \x02\x01\x81\x81RPP\x7F%2xN\xB93\x1A\x8Bz\xCE\xE8\x0E^\x94\x1F\x05\x0E\xFD\xBD\xFAK(g}\x01\xAD\x98\xF3\xEC\xEB\xD1>\x8B`\x0C`\x18\x81\x10a\x07jWa\x07ia \x9EV[[` \x02\x01\x81\x81RPP\x7F\x19\xD4\xE8\x19\x89\xAC\xE8\xF2\x0C\xC2y<\x8C\xDC\x1A\xA8\xA0\xC6\xAEY]\xF8\xE5\xB8\xCA\xD0D\xBA\xA8\xF6q\x11\x8B`\r`\x18\x81\x10a\x07\xA8Wa\x07\xA7a \x9EV[[` \x02\x01\x81\x81RPP\x7F\r\xE8\xF0\x97\xEC\x1A\x91\x0B\\@\xBF\x1D\xBB\x07\x0EN\xB0\x12@\xC2i\xEDmd!\x19mN\x15\xDE\xE7i\x8B`\x0E`\x18\x81\x10a\x07\xE6Wa\x07\xE5a \x9EV[[` \x02\x01\x81\x81RPP\x7F\rJ\xC9c\xB7\x8B\x91B\x9D]\x0CE4\xF9\xFET\x93\xD3A\x1A\xCC\xD4\xD8\x94\xFC\xEE\xD3?N\xF0\xC0\xB1\x8B`\x0F`\x18\x81\x10a\x08$Wa\x08#a \x9EV[[` \x02\x01\x81\x81RPP\x7F\x03\x9C\x8A\x9C\t\x85]\xCF\xD2\xE4)\"s\xCFu\xCC\x08\x16\xEDGV\x12\xC4\xE7%]\xB1d\xF9\x91\xD8\xB3\x8B`\x10`\x18\x81\x10a\x08bWa\x08aa \x9EV[[` \x02\x01\x81\x81RPP\x7F\x12\xBFni\x9F0UU{)\xCF\xD9\xE3\xFA\xBA\xAC\xD1\xCC/\xBAU6\xE2iu\xFF\x81\x9D\xCCB\x8BW\x8B`\x11`\x18\x81\x10a\x08\xA0Wa\x08\x9Fa \x9EV[[` \x02\x01\x81\x81RPP\x81\x8B`\x12`\x18\x81\x10a\x08\xBEWa\x08\xBDa \x9EV[[` \x02\x01\x81\x81RPP\x80\x8B`\x13`\x18\x81\x10a\x08\xDCWa\x08\xDBa \x9EV[[` \x02\x01\x81\x81RPP\x7F'r9\xC9\xD9\x8A^\x99\x9C\x18V\xC8O\x05T\n\x86ij]\x8B=h\x97_\xAF\x8A\xF7B(k\xF2\x8B`\x14`\x18\x81\x10a\t\x1AWa\t\x19a \x9EV[[` \x02\x01\x81\x81RPP\x7F\t(\xC3\x06\x80\x04K.\xE8\xA01z\x94\x9E\x1C\xA4\xD1pbPK0\xAC\x85\xEA\xCB3\xA6w\xED\x1D\x90\x8B`\x15`\x18\x81\x10a\tXWa\tWa \x9EV[[` \x02\x01\x81\x81RPP~\xB0\x86\xD5J\xCBC\xEAb\x11\x1D\xC2.uG\xF7S\xD1U\x0E\x0E`\xC2\xFB[}),*\"@\xE9\x8B`\x16`\x18\x81\x10a\t\x95Wa\t\x94a \x9EV[[` \x02\x01\x81\x81RPP\x7F\x19\x07@EY\xD1/\x9E\xEA?N\xA7\xB6\x87\xD3!\x93\xABy\x82L\x93\x82\x88\x18\xE2\xBD\xB6~\x91!\xD4\x8B`\x17`\x18\x81\x10a\t\xD3Wa\t\xD2a \x9EV[[` \x02\x01\x81\x81RPP_a\t\xE5a\x1E\xA0V[` \x81a\x03\0\x8F`\x08Z\xFA\x91P\x81\x15\x80a\n\x17WP`\x01\x81_`\x01\x81\x10a\n\x0FWa\n\x0Ea \x9EV[[` \x02\x01Q\x14\x15[\x15a\nNW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPPPPPPPPPV[_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15\x80a\n\xAFWP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x15[\x15a\n\xE6W`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x14\x80\x15a\n\xF4WP_\x82\x14[\x15a\x0B\x01W_\x90Pa\x0C\x07V[_a\x0B\x9F\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0B4Wa\x0B3a \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0BeWa\x0Bda \xCBV[[\x87\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0B\x95Wa\x0B\x94a \xCBV[[\x89\x8A\t\t\x08a\x18\xBBV[\x90P\x80\x83\x03a\x0B\xB7W_`\x01\x85\x90\x1B\x17\x91PPa\x0C\x07V[a\x0B\xC0\x81a\x19WV[\x83\x03a\x0B\xD5W`\x01\x80\x85\x90\x1B\x17\x91PPa\x0C\x07V[`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x92\x91PPV[_\x80\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x86\x10\x15\x80a\x0C^WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15[\x80a\x0C\x89WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x84\x10\x15[\x80a\x0C\xB4WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15[\x15a\x0C\xEBW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x85\x87\x89\x17\x17\x17\x03a\r\x03W_\x80\x91P\x91Pa\x11\xD0V[_\x80_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r5Wa\r4a \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\rb\x91\x90a!%V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r\x91Wa\r\x90a \xCBV[[\x8A\x8C\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r\xC7Wa\r\xC6a \xCBV[[\x8A\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\r\xF7Wa\r\xF6a \xCBV[[\x8C\x8D\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E-Wa\x0E,a \xCBV[[\x8A\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E]Wa\x0E\\a \xCBV[[\x8C\x8D\t\t\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E\x92Wa\x0E\x91a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E\xC1Wa\x0E\xC0a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0E\xF0Wa\x0E\xEFa \xCBV[[\x8C\x86\t\x84\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x94Pa\x0F\xD5\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0FKWa\x0FJa \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0FzWa\x0Fya \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x0F\xA9Wa\x0F\xA8a \xCBV[[\x8E\x87\t\x84\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08a\x19WV[\x93PPPP_\x80a\x10x\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10\x0EWa\x10\ra \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10=Wa\x10<a \xCBV[[\x85\x86\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10oWa\x10na \xCBV[[\x87\x88\t\x08a\x18\xBBV[\x90Pa\x11\x05\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10\xACWa\x10\xABa \xCBV[[\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x10\xFCWa\x10\xFBa \xCBV[[\x84\x88\x08\ta\x19\xC2V[\x15\x91PPa\x11\x14\x83\x83\x83a\x1A,V[\x80\x93P\x81\x94PPP\x82\x87\x14\x80\x15a\x11*WP\x81\x86\x14[\x15a\x11RW_\x81a\x11;W_a\x11>V[`\x02[`\xFF\x16`\x02\x8B\x90\x1B\x17\x17\x94P\x87\x93Pa\x11\xCCV[a\x11[\x83a\x19WV[\x87\x14\x80\x15a\x11pWPa\x11m\x82a\x19WV[\x86\x14[\x15a\x11\x99W`\x01\x81a\x11\x82W_a\x11\x85V[`\x02[`\xFF\x16`\x02\x8B\x90\x1B\x17\x17\x94P\x87\x93Pa\x11\xCBV[`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[[PPP[\x94P\x94\x92PPPV[_\x80_`\x01\x90P`@Q`@\x81\x01_\x7F\x12_\x86\xB8\xF0Pr\x08(2\x86\x8E\x9F4N\xDC\x83\x93\x96O\xB3w*\xAB\x87\xB4\x99\xA1Wjh\xA1\x83R\x7F//\xC8\xFBJ=\x87\x11#\xF5\xECV\xE9W\x89\xED\xC13/\xE8\xAF\xD2\xF8;j\xE9J\x1D\x89\xC7@;` \x84\x01R\x7F\x14S\x17]\xB1\nq[\xEB$\x93?v-;9\xE7\xCB\xBC\x88Q\xA2\xF0\x99\xE1\xECa\xE1<\x8D\xD1D\x82R\x7F\x02\xB8!\x0Fk;\xD2g\xCA\xB3[\xC7\x1E\x06V\xFE\xA8\xD6\xF4\xA0\xBD$\x8D\xE9D'm\xA4\xCA\x7F\xF6%` \x83\x01R\x865\x90P\x80`@\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x81\x10\x84\x16\x93P`@\x82``\x84`\x07Z\xFA\x84\x16\x93P`@\x83`\x80\x85`\x06Z\xFA\x84\x16\x93P\x7F\x14\x91E\xBA5\x02\xD0\xE9\x08C\x15Cq\xDA\xDCXQ\x13n\x04\x80\x14\xD6\xBE\\\xA6q4\xA0\x98\x17j\x82R\x7F\x19\"-&\xF91\x08h%\xB4\xB6\x97!\x1DX;Q\x9F\xE1h\xB2\xB7\x915\x93\xEF\x0B_\xDD4^8` \x83\x01R` \x87\x015\x90P\x80`@\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x81\x10\x84\x16\x93P`@\x82``\x84`\x07Z\xFA\x84\x16\x93P`@\x83`\x80\x85`\x06Z\xFA\x84\x16\x93P\x82Q\x95P` \x83\x01Q\x94PPPP\x80a\x13\xA5W`@Q\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x91P\x91V[_\x80_\x83\x03a\x13\xBFW_\x80\x91P\x91Pa\x14\xDBV[_`\x01\x80\x85\x16\x14\x90P`\x01\x84\x90\x1C\x92P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10a\x14(W`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x14\xC5\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x14ZWa\x14Ya \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x14\x8BWa\x14\x8Aa \xCBV[[\x86\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x14\xBBWa\x14\xBAa \xCBV[[\x88\x89\t\t\x08a\x18\xBBV[\x91P\x80\x15a\x14\xD9Wa\x14\xD6\x82a\x19WV[\x91P[P[\x91P\x91V[_\x80_\x80_\x86\x14\x80\x15a\x14\xF2WP_\x85\x14[\x15a\x15\x08W_\x80_\x80\x93P\x93P\x93P\x93Pa\x18\xB2V[_`\x01\x80\x88\x16\x14\x90P_`\x02\x80\x89\x16\x14\x90P`\x02\x88\x90\x1C\x95P\x86\x94P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x86\x10\x15\x80a\x15sWP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15[\x15a\x15\xAAW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x15\xDAWa\x15\xD9a \xCBV[[`\x03\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\x16\x07\x91\x90a!%V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x166Wa\x165a \xCBV[[\x88\x8A\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x16lWa\x16ka \xCBV[[\x88\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x16\x9CWa\x16\x9Ba \xCBV[[\x8A\x8B\t\t\x90P_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x16\xD2Wa\x16\xD1a \xCBV[[\x88\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17\x02Wa\x17\x01a \xCBV[[\x8A\x8B\t\t\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x177Wa\x176a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17fWa\x17ea \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17\x95Wa\x17\x94a \xCBV[[\x8A\x86\t\x84\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x96Pa\x18z\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x17\xF0Wa\x17\xEFa \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x18\x1FWa\x18\x1Ea \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x18NWa\x18Ma \xCBV[[\x8C\x87\t\x84\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08a\x19WV[\x95Pa\x18\x87\x87\x87\x86a\x1A,V[\x80\x97P\x81\x98PPP\x84\x15a\x18\xACWa\x18\x9E\x87a\x19WV[\x96Pa\x18\xA9\x86a\x19WV[\x95P[PPPPP[\x92\x95\x91\x94P\x92PV[_a\x18\xE6\x82\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?Ra\x1D'V[\x90P\x81\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x19\x18Wa\x19\x17a \xCBV[[\x82\x83\t\x14a\x19RW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91\x90PV[_\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x83\x81a\x19\x89Wa\x19\x88a \xCBV[[\x06\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x03\x81a\x19\xBAWa\x19\xB9a \xCBV[[\x06\x90P\x91\x90PV[_\x80a\x19\xEE\x83\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?Ra\x1D'V[\x90P\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1A Wa\x1A\x1Fa \xCBV[[\x82\x83\t\x14\x91PP\x91\x90PV[_\x80_a\x1A\xCB\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1AaWa\x1A`a \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1A\x90Wa\x1A\x8Fa \xCBV[[\x87\x88\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1A\xC2Wa\x1A\xC1a \xCBV[[\x89\x8A\t\x08a\x18\xBBV[\x90P\x83\x15a\x1A\xDFWa\x1A\xDC\x81a\x19WV[\x90P[a\x1Bj\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1B\x11Wa\x1B\x10a \xCBV[[\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1BaWa\x1B`a \xCBV[[\x84\x8A\x08\ta\x18\xBBV[\x92P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1B\x9BWa\x1B\x9Aa \xCBV[[a\x1B\xD6\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1B\xCDWa\x1B\xCCa \xCBV[[`\x02\x86\ta\x1D\xBEV[\x86\t\x91P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C\tWa\x1C\x08a \xCBV[[a\x1CC\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C;Wa\x1C:a \xCBV[[\x84\x85\ta\x19WV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1CrWa\x1Cqa \xCBV[[\x85\x86\t\x08\x86\x14\x15\x80a\x1C\xE7WP\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C\xAEWa\x1C\xADa \xCBV[[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1C\xDDWa\x1C\xDCa \xCBV[[\x83\x85\t`\x02\t\x85\x14\x15[\x15a\x1D\x1EW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x93P\x93\x91PPV[_\x80`@Q` \x81R` \x80\x82\x01R` `@\x82\x01R\x84``\x82\x01R\x83`\x80\x82\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x82\x01R` \x81`\xC0\x83`\x05Z\xFA\x91P\x80Q\x92PP\x80a\x1D\xB7W`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x92\x91PPV[_a\x1D\xE9\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDEa\x1D'V[\x90P`\x01\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80a\x1E\x1CWa\x1E\x1Ba \xCBV[[\x82\x84\t\x14a\x1EVW`@Q\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80a\x03\0\x01`@R\x80`\x18\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x82` `\x08\x02\x82\x01\x11\x15a\x1E\xE5Wa\x1E\xE4a\x1E\xC6V[[\x92\x91PPV[_a\x01\0\x82\x84\x03\x12\x15a\x1F\x01Wa\x1F\0a\x1E\xC2V[[_a\x1F\x0E\x84\x82\x85\x01a\x1E\xCAV[\x91PP\x92\x91PPV[_`\x04\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x1FF\x81a\x1F4V[\x82RPPV[_a\x1FW\x83\x83a\x1F=V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[a\x1Fx\x81a\x1F\x17V[a\x1F\x82\x81\x84a\x1F!V[\x92Pa\x1F\x8D\x82a\x1F+V[\x80_[\x83\x81\x10\x15a\x1F\xBDW\x81Qa\x1F\xA4\x87\x82a\x1FLV[\x96Pa\x1F\xAF\x83a\x1FcV[\x92PP`\x01\x81\x01\x90Pa\x1F\x90V[PPPPPPV[_`\x80\x82\x01\x90Pa\x1F\xD8_\x83\x01\x84a\x1FoV[\x92\x91PPV[_\x81\x90P\x82` `\x02\x02\x82\x01\x11\x15a\x1F\xF9Wa\x1F\xF8a\x1E\xC6V[[\x92\x91PPV[_\x80a\x01@\x83\x85\x03\x12\x15a \x16Wa \x15a\x1E\xC2V[[_a #\x85\x82\x86\x01a\x1E\xCAV[\x92PPa\x01\0a 5\x85\x82\x86\x01a\x1F\xDEV[\x91PP\x92P\x92\x90PV[_\x81\x90P\x82` `\x04\x02\x82\x01\x11\x15a ZWa Ya\x1E\xC6V[[\x92\x91PPV[_\x80`\xC0\x83\x85\x03\x12\x15a vWa ua\x1E\xC2V[[_a \x83\x85\x82\x86\x01a ?V[\x92PP`\x80a \x94\x85\x82\x86\x01a\x1F\xDEV[\x91PP\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a!/\x82a\x1F4V[\x91Pa!:\x83a\x1F4V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a!RWa!Qa \xF8V[[\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x0F\x99\x8F\xF2w\xC8\xAF|\xA4\x0B\xF1\x94$F\xD8\x87\xD7]\xEE\xCE\x0B\xB8\xC4\xC9]\xF6R\xE4\xD3\xAB\x93\x83dsolcC\0\x08\x14\x003",
    );
    /**Custom error with signature `ProofInvalid()` and selector `0x7fcdd1f4`.
```solidity
error ProofInvalid();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProofInvalid {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProofInvalid> for UnderlyingRustTuple<'_> {
            fn from(value: ProofInvalid) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProofInvalid {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProofInvalid {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProofInvalid()";
            const SELECTOR: [u8; 4] = [127u8, 205u8, 209u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `PublicInputNotInField()` and selector `0xa54f8e27`.
```solidity
error PublicInputNotInField();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PublicInputNotInField {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PublicInputNotInField> for UnderlyingRustTuple<'_> {
            fn from(value: PublicInputNotInField) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PublicInputNotInField {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PublicInputNotInField {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PublicInputNotInField()";
            const SELECTOR: [u8; 4] = [165u8, 79u8, 142u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `Verify(uint256[8],uint256[2])` and selector `0xeddf243c`.
```solidity
function Verify(uint256[8] memory proof, uint256[2] memory input) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VerifyCall {
        #[allow(missing_docs)]
        pub proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
        #[allow(missing_docs)]
        pub input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    ///Container type for the return parameters of the [`Verify(uint256[8],uint256[2])`](VerifyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VerifyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 8usize],
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VerifyCall> for UnderlyingRustTuple<'_> {
                fn from(value: VerifyCall) -> Self {
                    (value.proof, value.input)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VerifyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proof: tuple.0,
                        input: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VerifyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VerifyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VerifyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VerifyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = VerifyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Verify(uint256[8],uint256[2])";
            const SELECTOR: [u8; 4] = [237u8, 223u8, 36u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        8usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.input),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `compressProof(uint256[8])` and selector `0x44f63692`.
```solidity
function compressProof(uint256[8] memory proof) external view returns (uint256[4] memory compressed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compressProofCall {
        #[allow(missing_docs)]
        pub proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
    }
    ///Container type for the return parameters of the [`compressProof(uint256[8])`](compressProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compressProofReturn {
        #[allow(missing_docs)]
        pub compressed: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 8usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compressProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: compressProofCall) -> Self {
                    (value.proof,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for compressProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proof: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compressProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: compressProofReturn) -> Self {
                    (value.compressed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for compressProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { compressed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for compressProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = compressProofReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "compressProof(uint256[8])";
            const SELECTOR: [u8; 4] = [68u8, 246u8, 54u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        8usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `verifyCompressedProof(uint256[4],uint256[2])` and selector `0xf11817b2`.
```solidity
function verifyCompressedProof(uint256[4] memory compressedProof, uint256[2] memory input) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCompressedProofCall {
        #[allow(missing_docs)]
        pub compressedProof: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
        #[allow(missing_docs)]
        pub input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    ///Container type for the return parameters of the [`verifyCompressedProof(uint256[4],uint256[2])`](verifyCompressedProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCompressedProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 4usize],
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCompressedProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyCompressedProofCall) -> Self {
                    (value.compressedProof, value.input)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyCompressedProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        compressedProof: tuple.0,
                        input: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCompressedProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyCompressedProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyCompressedProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyCompressedProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyCompressedProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyCompressedProof(uint256[4],uint256[2])";
            const SELECTOR: [u8; 4] = [241u8, 24u8, 23u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.compressedProof),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.input),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Groth16Verifier`](self) function calls.
    pub enum Groth16VerifierCalls {
        #[allow(missing_docs)]
        Verify(VerifyCall),
        #[allow(missing_docs)]
        compressProof(compressProofCall),
        #[allow(missing_docs)]
        verifyCompressedProof(verifyCompressedProofCall),
    }
    #[automatically_derived]
    impl Groth16VerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [68u8, 246u8, 54u8, 146u8],
            [237u8, 223u8, 36u8, 60u8],
            [241u8, 24u8, 23u8, 178u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for Groth16VerifierCalls {
        const NAME: &'static str = "Groth16VerifierCalls";
        const MIN_DATA_LENGTH: usize = 192usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::Verify(_) => <VerifyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::compressProof(_) => {
                    <compressProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyCompressedProof(_) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<Groth16VerifierCalls>] = &[
                {
                    fn compressProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierCalls> {
                        <compressProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierCalls::compressProof)
                    }
                    compressProof
                },
                {
                    fn Verify(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierCalls> {
                        <VerifyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierCalls::Verify)
                    }
                    Verify
                },
                {
                    fn verifyCompressedProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierCalls> {
                        <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierCalls::verifyCompressedProof)
                    }
                    verifyCompressedProof
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::Verify(inner) => {
                    <VerifyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::compressProof(inner) => {
                    <compressProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyCompressedProof(inner) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::Verify(inner) => {
                    <VerifyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::compressProof(inner) => {
                    <compressProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyCompressedProof(inner) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Groth16Verifier`](self) custom errors.
    pub enum Groth16VerifierErrors {
        #[allow(missing_docs)]
        ProofInvalid(ProofInvalid),
        #[allow(missing_docs)]
        PublicInputNotInField(PublicInputNotInField),
    }
    #[automatically_derived]
    impl Groth16VerifierErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [127u8, 205u8, 209u8, 244u8],
            [165u8, 79u8, 142u8, 39u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for Groth16VerifierErrors {
        const NAME: &'static str = "Groth16VerifierErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ProofInvalid(_) => {
                    <ProofInvalid as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PublicInputNotInField(_) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<Groth16VerifierErrors>] = &[
                {
                    fn ProofInvalid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierErrors> {
                        <ProofInvalid as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierErrors::ProofInvalid)
                    }
                    ProofInvalid
                },
                {
                    fn PublicInputNotInField(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierErrors> {
                        <PublicInputNotInField as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierErrors::PublicInputNotInField)
                    }
                    PublicInputNotInField
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ProofInvalid(inner) => {
                    <ProofInvalid as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::PublicInputNotInField(inner) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ProofInvalid(inner) => {
                    <ProofInvalid as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PublicInputNotInField(inner) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Groth16Verifier`](self) contract instance.

See the [wrapper's documentation](`Groth16VerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> Groth16VerifierInstance<T, P, N> {
        Groth16VerifierInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<Groth16VerifierInstance<T, P, N>>,
    > {
        Groth16VerifierInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        Groth16VerifierInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Groth16Verifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Groth16Verifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct Groth16VerifierInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for Groth16VerifierInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("Groth16VerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Groth16VerifierInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Groth16Verifier`](self) contract instance.

See the [wrapper's documentation](`Groth16VerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<Groth16VerifierInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> Groth16VerifierInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> Groth16VerifierInstance<T, P, N> {
            Groth16VerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Groth16VerifierInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`Verify`] function.
        pub fn Verify(
            &self,
            proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
            input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
        ) -> alloy_contract::SolCallBuilder<T, &P, VerifyCall, N> {
            self.call_builder(&VerifyCall { proof, input })
        }
        ///Creates a new call builder for the [`compressProof`] function.
        pub fn compressProof(
            &self,
            proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
        ) -> alloy_contract::SolCallBuilder<T, &P, compressProofCall, N> {
            self.call_builder(&compressProofCall { proof })
        }
        ///Creates a new call builder for the [`verifyCompressedProof`] function.
        pub fn verifyCompressedProof(
            &self,
            compressedProof: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyCompressedProofCall, N> {
            self.call_builder(
                &verifyCompressedProofCall {
                    compressedProof,
                    input,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Groth16VerifierInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
