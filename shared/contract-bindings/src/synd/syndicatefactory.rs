/**

Generated by the following Solidity interface...
```solidity
interface SyndicateFactory {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error ChainIdAlreadyExists();
    error Create2EmptyBytecode();
    error FailedDeployment();
    error InsufficientBalance(uint256 balance, uint256 needed);
    error ReservedNamespace();
    error ZeroAddress();
    error ZeroValue();

    event NamespaceConfigUpdated(uint256 oldNamespacePrefix, uint256 oldNamespaceMultiplier, uint256 newNamespacePrefix, uint256 newNamespaceMultiplier);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event SyndicateSequencingChainCreated(uint256 indexed appchainId, address indexed sequencingChainAddress, address indexed permissionModuleAddress);

    constructor(address admin);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function computeSequencingChainAddress(bytes32 salt, uint256 chainId) external view returns (address);
    function createSyndicateSequencingChain(uint256 appchainId, address admin, address permissionModule, bytes32 salt) external returns (address sequencingChain, uint256 actualChainId);
    function getBytecode(uint256 chainId) external pure returns (bytes memory);
    function getNextAutoChainId() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isChainIdUsed(uint256 chainId) external view returns (uint256);
    function namespaceMultiplier() external view returns (uint256);
    function namespacePrefix() external view returns (uint256);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function updateNamespaceConfig(uint256 newPrefix, uint256 newMultiplier) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "computeSequencingChainAddress",
    "inputs": [
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createSyndicateSequencingChain",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "permissionModule",
        "type": "address",
        "internalType": "contract IRequirementModule"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "sequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "actualChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getBytecode",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getNextAutoChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isChainIdUsed",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "namespaceMultiplier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "namespacePrefix",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateNamespaceConfig",
    "inputs": [
      {
        "name": "newPrefix",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newMultiplier",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "NamespaceConfigUpdated",
    "inputs": [
      {
        "name": "oldNamespacePrefix",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "oldNamespaceMultiplier",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newNamespacePrefix",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newNamespaceMultiplier",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SyndicateSequencingChainCreated",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "permissionModuleAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ChainIdAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "Create2EmptyBytecode",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedDeployment",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientBalance",
    "inputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ReservedNamespace",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroValue",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610251565b610021610034565b6133dc6104be82396133dc90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261389a8038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b90565b5f1b90565b61016461015f61016992610115565b61014b565b610148565b90565b6101755f610150565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b90565b90565b6101b66101b16101bb9261019c565b610118565b61019f565b90565b906101ca5f199161014b565b9181191691161790565b6101e86101e36101ed9261019f565b610118565b61019f565b90565b90565b9061020861020361020f926101d4565b6101f0565b82546101be565b9055565b90565b61022a61022561022f92610213565b610118565b61019f565b90565b90565b61024961024461024e92610232565b610118565b61019f565b90565b8061026c6102666102615f610137565b6100a7565b916100a7565b146102d6576102959061028761028061016c565b82906103ac565b50610290610178565b6103ac565b506102ab6102a46101fe6101a2565b60016101f3565b6102c06102b96103e8610216565b60026101f3565b6102d46102cd6001610235565b60036101f3565b565b5f63d92e233d60e01b8152806102ee60048201610143565b0390fd5b5f90565b151590565b61030490610148565b90565b90610311906102fb565b5f5260205260405f2090565b61033161032c6103369261009c565b610118565b61009c565b90565b6103429061031d565b90565b61034e90610339565b90565b9061035b90610345565b5f5260205260405f2090565b9061037360ff9161014b565b9181191691161790565b610386906102f6565b90565b90565b906103a161039c6103a89261037d565b610389565b8254610367565b9055565b6103b46102f2565b506103c96103c3828490610483565b156102f6565b5f14610451576103f060016103eb5f6103e3818690610307565b018590610351565b61038c565b906103f96104b0565b9061043661043061042a7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956102fb565b92610345565b92610345565b9261043f610034565b8061044981610143565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61046e61047391610457565b61045c565b90565b6104809054610462565b90565b6104a9915f61049e6104a4936104976102f2565b5082610307565b01610351565b610476565b90565b5f90565b6104b86104ac565b50339056fe60806040526004361015610013575b610827565b61001d5f3561011c565b806301ffc9a7146101175780631f43fc8b14610112578063248a9ca31461010d5780632738ef0914610108578063297f4c64146101035780632cd799bd146100fe5780632f2ff15d146100f957806336568abe146100f45780637232c133146100ef57806391d14854146100ea578063a217fddf146100e5578063c8fd71dd146100e0578063ccdc68f2146100db578063d547741f146100d6578063d9852abf146100d15763ec87621c0361000e576107f2565b610789565b6106bd565b610689565b610627565b6105f2565b610581565b61054c565b610518565b6104e4565b61045a565b61039c565b610367565b610301565b61028b565b6101a4565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61014581610130565b0361014c57565b5f80fd5b9050359061015d8261013c565b565b9060208282031261017857610175915f01610150565b90565b61012c565b151590565b61018b9061017d565b9052565b91906101a2905f60208501940190610182565b565b346101d4576101d06101bf6101ba36600461015f565b61082f565b6101c7610122565b9182918261018f565b0390f35b610128565b90565b6101e5816101d9565b036101ec57565b5f80fd5b905035906101fd826101dc565b565b90565b61020b816101ff565b0361021257565b5f80fd5b9050359061022382610202565b565b919060408382031261024d578061024161024a925f86016101f0565b93602001610216565b90565b61012c565b60018060a01b031690565b61026690610252565b90565b6102729061025d565b9052565b9190610289905f60208501940190610269565b565b346102bc576102b86102a76102a1366004610225565b90610879565b6102af610122565b91829182610276565b0390f35b610128565b906020828203126102da576102d7915f016101f0565b90565b61012c565b6102e8906101d9565b9052565b91906102ff905f602085019401906102df565b565b346103315761032d61031c6103173660046102c1565b6108fb565b610324610122565b918291826102ec565b0390f35b610128565b5f91031261034057565b61012c565b61034e906101ff565b9052565b9190610365905f60208501940190610345565b565b3461039757610377366004610336565b610393610382610920565b61038a610122565b91829182610352565b0390f35b610128565b346103cc576103ac366004610336565b6103c86103b7610958565b6103bf610122565b91829182610352565b0390f35b610128565b906020828203126103ea576103e7915f01610216565b90565b61012c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61043061043960209361043e93610427816103ef565b938480936103f3565b958691016103fc565b610407565b0190565b6104579160208201915f818403910152610411565b90565b3461048a576104866104756104703660046103d1565b610a0a565b61047d610122565b91829182610442565b0390f35b610128565b6104988161025d565b0361049f57565b5f80fd5b905035906104b08261048f565b565b91906040838203126104da57806104ce6104d7925f86016101f0565b936020016104a3565b90565b61012c565b5f0190565b34610513576104fd6104f73660046104b2565b90610aaf565b610505610122565b8061050f816104df565b0390f35b610128565b346105475761053161052b3660046104b2565b90610abb565b610539610122565b80610543816104df565b0390f35b610128565b3461057c576105786105676105623660046103d1565b610bbc565b61056f610122565b91829182610352565b0390f35b610128565b346105b2576105ae61059d6105973660046104b2565b90610c4f565b6105a5610122565b9182918261018f565b0390f35b610128565b90565b5f1b90565b6105d36105ce6105d8926105b7565b6105ba565b6101d9565b90565b6105e45f6105bf565b90565b6105ef6105db565b90565b3461062257610602366004610336565b61061e61060d6105e7565b610615610122565b918291826102ec565b0390f35b610128565b3461065757610637366004610336565b610653610642610c78565b61064a610122565b91829182610352565b0390f35b610128565b91906040838203126106845780610678610681925f8601610216565b93602001610216565b90565b61012c565b346106b8576106a261069c36600461065c565b90610d8a565b6106aa610122565b806106b4816104df565b0390f35b610128565b346106ec576106d66106d03660046104b2565b90610dc0565b6106de610122565b806106e8816104df565b0390f35b610128565b6106fa9061025d565b90565b610706816106f1565b0361070d57565b5f80fd5b9050359061071e826106fd565b565b60808183031261076157610736825f8301610216565b9261075e61074784602085016104a3565b936107558160408601610711565b936060016101f0565b90565b61012c565b91602061078792949361078060408201965f830190610269565b0190610345565b565b346107be576107a561079c366004610720565b92919091610f37565b906107ba6107b1610122565b92839283610766565b0390f35b610128565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6107ef6107c3565b90565b3461082257610802366004610336565b61081e61080d6107e7565b610815610122565b918291826102ec565b0390f35b610128565b5f80fd5b5f90565b61083761082b565b508061085261084c637965db0b60e01b610130565b91610130565b1490811561085f575b5090565b61086991506111f3565b5f61085b565b5f90565b60200190565b906108906108a99261088961086f565b5091610a0a565b6108a261089c826103ef565b91610873565b2090611225565b90565b5f90565b6108b9906101d9565b90565b906108c6906108b0565b5f5260205260405f2090565b5f1c90565b90565b6108e66108eb916108d2565b6108d7565b90565b6108f890546108da565b90565b60016109136109199261090c6108ac565b505f6108bc565b016108ee565b90565b5f90565b61092861091c565b506109316112a0565b90565b90565b610943610948916108d2565b610934565b90565b6109559054610937565b90565b61096061091c565b5061096b600161094b565b90565b606090565b634e487b7160e01b5f52604160045260245ffd5b9061099190610407565b810190811067ffffffffffffffff8211176109ab57604052565b610973565b906109c36109bc610122565b9283610987565b565b905090565b6109ef6109e6926020926109dd816103ef565b948580936109c5565b938491016103fc565b0190565b610a0190610a0793926109ca565b906109ca565b90565b610a82610a4d91610a1961096e565b50610a5c611df391610a2d602084016109b0565b928084526115e96020850139610a41610122565b94859160208301610352565b60208201810382520384610987565b610a73610a67610122565b938492602084016109f3565b60208201810382520382610987565b90565b90610aa091610a9b610a96826108fb565b6112dc565b610aa2565b565b90610aac916112f0565b50565b90610ab991610a85565b565b9080610ad6610ad0610acb61139b565b61025d565b9161025d565b03610ae757610ae4916113a8565b50565b5f63334bd91960e11b815280610aff600482016104df565b0390fd5b90565b610b1a610b15610b1f926101ff565b610b03565b6101ff565b90565b90610b2c90610b06565b5f5260205260405f2090565b60ff1690565b610b4a610b4f916108d2565b610b38565b90565b610b5c9054610b3e565b90565b60ff1690565b610b79610b74610b7e926105b7565b610b03565b610b5f565b90565b90565b610b98610b93610b9d92610b81565b610b03565b610b5f565b90565b610bb4610baf610bb992610b5f565b610b03565b6101ff565b90565b610bd3610bd891610bcb61091c565b506004610b22565b610b52565b5f14610bf457610bf1610beb6001610b84565b5b610ba0565b90565b610bf1610c005f610b65565b610bec565b610c19610c14610c1e92610252565b610b03565b610252565b90565b610c2a90610c05565b90565b610c3690610c21565b90565b90610c4390610c2d565b5f5260205260405f2090565b610c75915f610c6a610c7093610c6361082b565b50826108bc565b01610c39565b610b52565b90565b610c8061091c565b50610c8b600261094b565b90565b90610ca891610ca3610c9e6107c3565b6112dc565b610d21565b565b90610cb65f19916105ba565b9181191691161790565b90565b90610cd8610cd3610cdf92610b06565b610cc0565b8254610caa565b9055565b610d18610d1f94610d0e606094989795610d04608086019a5f870190610345565b6020850190610345565b6040830190610345565b0190610345565b565b610d2b600161094b565b610d85610d38600261094b565b91610d44846001610cc3565b610d4f856002610cc3565b9192937f8891765686e31368ff3fdb281f56507d3e8a9cf38dee9d4dc731844eb8aa014e94610d7c610122565b94859485610ce3565b0390a1565b90610d9491610c8e565b565b90610db191610dac610da7826108fb565b6112dc565b610db3565b565b90610dbd916113a8565b50565b90610dca91610d96565b565b610de0610ddb610de5926105b7565b610b03565b610252565b90565b610df190610dcc565b90565b610dfd90610c21565b90565b610e14610e0f610e19926105b7565b610b03565b6101ff565b90565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b610e50610e56916101ff565b916101ff565b908115610e61570490565b610e1c565b90610e7260ff916105ba565b9181191691161790565b610e859061017d565b90565b90565b90610ea0610e9b610ea792610e7c565b610e88565b8254610e66565b9055565b610eb4906101ff565b5f198114610ec25760010190565b610e30565b610ed090610c05565b90565b610edc90610ec7565b90565b610ee890610c21565b90565b5f80fd5b60e01b90565b5f910312610eff57565b61012c565b916020610f25929493610f1e60408201965f830190610269565b0190610269565b565b610f2f610122565b3d5f823e3d90fd5b939293919091610f4561086f565b50610f4e61091c565b5082610f6a610f64610f5f5f610de8565b61025d565b9161025d565b1480156111c9575b6111ad5780610f89610f835f610e00565b916101ff565b145f146111a757610f986112a0565b5b9481610fad610fa75f610e00565b916101ff565b141580611171575b61115557610fcd610fc860048890610b22565b610b52565b6111395761101d91610feb6001610fe660048a90610b22565b610e8b565b610ffd610ff75f610e00565b916101ff565b14611118575b61100c86610a0a565b6110185f929192610e00565b61146c565b9161102f61102a84610ed3565b610edf565b9063485cc9559061103f84610df4565b92803b15611113576110645f809461106f611058610122565b97889687958694610eef565b845260048401610f04565b03925af1801561110e576110e2575b50839061108b8391610df4565b906110c86110c26110bc7f49b21f1e4190db8b0a933c951ed013de222c847c15461754682daa2eab1fdbd295610b06565b92610c2d565b92610c2d565b926110d1610122565b806110db816104df565b0390a49190565b611101905f3d8111611107575b6110f98183610987565b810190610ef5565b5f61107e565b503d6110ef565b610f27565b610eeb565b61113461112d611128600361094b565b610eab565b6003610cc3565b611003565b5f6324591d8960e01b815280611151600482016104df565b0390fd5b5f636a22539160e01b81528061116d600482016104df565b0390fd5b5061118686611180600261094b565b90610e44565b6111a161119b611196600161094b565b6101ff565b916101ff565b14610fb5565b80610f99565b5f63d92e233d60e01b8152806111c5600482016104df565b0390fd5b506111d382610df4565b6111ed6111e76111e25f610de8565b61025d565b9161025d565b14610f72565b6111fb61082b565b5061121561120f6301ffc9a760e01b610130565b91610130565b1490565b61122290610c21565b90565b906112439161123261086f565b509061123d30611219565b91611559565b90565b61125561125b919392936101ff565b926101ff565b916112678382026101ff565b92818404149015171561127657565b610e30565b61128a611290919392936101ff565b926101ff565b820180921161129b57565b610e30565b6112a861091c565b506112d96112c96112b9600161094b565b6112c3600261094b565b90611246565b6112d3600361094b565b9061127b565b90565b6112ee906112e861139b565b906115ad565b565b6112f861082b565b5061130d611307828490610c4f565b1561017d565b5f1461139557611334600161132f5f6113278186906108bc565b018590610c39565b610e8b565b9061133d61139b565b9061137a61137461136e7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956108b0565b92610c2d565b92610c2d565b92611383610122565b8061138d816104df565b0390a4600190565b50505f90565b6113a361086f565b503390565b6113b061082b565b506113bc818390610c4f565b5f14611443576113e25f6113dd5f6113d58186906108bc565b018590610c39565b610e8b565b906113eb61139b565b9061142861142261141c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956108b0565b92610c2d565b92610c2d565b92611431610122565b8061143b816104df565b0390a4600190565b50505f90565b91602061146a92949361146360408201965f830190610345565b0190610345565b565b91909161147761086f565b5061148130611219565b3161149461148e836101ff565b916101ff565b10611531576114a2826103ef565b6114b46114ae5f610e00565b916101ff565b146115155760208251920190f5903d151982151661150a57816114e76114e16114dc5f610de8565b61025d565b9161025d565b146114ee57565b5f63b06ebf3d60e01b815280611506600482016104df565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b81528061152d600482016104df565b0390fd5b61153a30611219565b316115555f92839263cf47918160e01b845260048401611449565b0390fd5b91600b9261156561086f565b50604051926040840152602083015281520160ff8153605560018060a01b0391201690565b9160206115ab9294936115a460408201965f830190610269565b01906102df565b565b906115c26115bc838390610c4f565b1561017d565b6115ca575050565b6115e45f92839263e2517d3f60e01b84526004840161158a565b0390fdfe60c060405234610048576100196100146100f9565b6101c7565b61002161004d565b6115826106b282396080518181816107cf01526112e8015260a05181610751015261158290f35b610053565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007f90610057565b810190811060018060401b0382111761009757604052565b610061565b906100af6100a861004d565b9283610075565b565b5f80fd5b90565b6100c1816100b5565b036100c857565b5f80fd5b905051906100d9826100b8565b565b906020828203126100f4576100f1915f016100cc565b90565b6100b1565b610117611df38038038061010c8161009c565b9283398101906100db565b90565b90565b90565b61013461012f6101399261011a565b61011d565b6100b5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610179601860209261013c565b61018281610145565b0190565b61019b9060208101905f81830391015261016c565b90565b156101a557565b6101ad61004d565b62461bcd60e51b8152806101c360048201610186565b0390fd5b6101cf61032a565b6101ec816101e56101df5f610120565b916100b5565b141561019e565b60a052565b60018060a01b031690565b61021061020b610215926101f1565b61011d565b6101f1565b90565b610221906101fc565b90565b61022d90610218565b90565b61023a6064610224565b90565b610246906101fc565b90565b6102529061023d565b90565b151590565b6102649051610255565b90565b60e01b90565b5f0190565b61027a61004d565b3d5f823e3d90fd5b60207f6c65640000000000000000000000000000000000000000000000000000000000917f41726253797320707265636f6d70696c652076616c69646174696f6e206661695f8201520152565b6102dc602360409261013c565b6102e581610282565b0190565b6102fe9060208101905f8183039101526102cf565b90565b1561030857565b61031061004d565b62461bcd60e51b815280610326600482016102e9565b0390fd5b6103326104d2565b61034261033d610230565b610249565b3b61035561034f5f610120565b916100b5565b1160805261036c610366608061025a565b15610255565b801561037e575b61037c90610301565b565b506103aa602061039461038f610230565b610249565b63a3b1b31d906103a261004d565b938492610267565b825281806103ba6004820161026d565b03915afa80156104185761037c915f916103ea575b506103e26103dc5f610120565b916100b5565b119050610373565b61040b915060203d8111610411575b6104038183610075565b8101906100db565b5f6103cf565b503d6103f9565b610272565b60a01b90565b9061043260ff60a01b9161041d565b9181191691161790565b61044590610255565b90565b90565b9061046061045b6104679261043c565b610448565b8254610423565b9055565b610474906101fc565b90565b6104809061046b565b90565b5f1b90565b9061049960018060a01b0391610483565b9181191691161790565b6104ac9061046b565b90565b90565b906104c76104c26104ce926104a3565b6104af565b8254610488565b9055565b6104db3361053f565b6104e65f600161044b565b6104ee61004d565b6101bf810181811060018060401b0382111761053a5761051682916101bf611c34843961026d565b03905ff080156105355761052c61053391610477565b60016104b2565b565b610272565b610061565b610548906105a0565b565b61055e6105596105639261011a565b61011d565b6101f1565b90565b61056f9061054a565b90565b61057b906101f1565b90565b61058790610572565b9052565b919061059e905f6020850194019061057e565b565b806105bb6105b56105b05f610566565b610572565b91610572565b146105cb576105c990610652565b565b6105ee6105d75f610566565b5f918291631e4fbdf760e01b83526004830161058b565b0390fd5b5f1c90565b60018060a01b031690565b61060e610613916105f2565b6105f7565b90565b6106209054610602565b90565b61062c9061023d565b90565b90565b9061064761064261064e92610623565b61062f565b8254610488565b9055565b61065b5f610616565b610665825f610632565b906106996106937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610623565b91610623565b916106a261004d565b806106ac8161026d565b0390a356fe60806040526004361015610013575b610859565b61001d5f3561010c565b80630338115414610107578063366cbab71461010257806346e2cc09146100fd578063485cc955146100f85780635b3cd6e2146100f357806363d96437146100ee578063715018a6146100e95780637a3979dc146100e4578063804e5123146100df5780638da5cb5b146100da578063cdafb978146100d5578063d4f0eb4d146100d0578063d8781342146100cb578063ea161ce6146100c65763f2fde38b0361000e57610826565b6107f1565b610798565b61071c565b6106ca565b610620565b6105ca565b610591565b6104e5565b6104b0565b610420565b61034f565b6102b4565b610279565b610154565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012a57565b61011c565b90565b61013b9061012f565b9052565b9190610152905f60208501940190610132565b565b3461018457610164366004610120565b61018061016f61088a565b610177610112565b9182918261013f565b0390f35b610118565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b90602082820312610209575f82013567ffffffffffffffff8111610204576102009201610199565b9091565b610189565b61011c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61024f61025860209361025d936102468161020e565b93848093610212565b9586910161021b565b610226565b0190565b6102769160208201915f818403910152610230565b90565b346102aa576102a661029561028f3660046101d8565b90610976565b61029d610112565b91829182610261565b0390f35b610118565b5f0190565b346102e3576102cd6102c73660046101d8565b90610a92565b6102d5610112565b806102df816102af565b0390f35b610118565b60018060a01b031690565b6102fc906102e8565b90565b610308816102f3565b0361030f57565b5f80fd5b90503590610320826102ff565b565b919060408382031261034a578061033e610347925f8601610313565b93602001610313565b90565b61011c565b3461037e57610368610362366004610322565b90610c44565b610370610112565b8061037a816102af565b0390f35b610118565b1c90565b60018060a01b031690565b6103a29060086103a79302610383565b610387565b90565b906103b59154610392565b90565b6103c460015f906103aa565b90565b90565b6103de6103d96103e3926102e8565b6103c7565b6102e8565b90565b6103ef906103ca565b90565b6103fb906103e6565b90565b610407906103f2565b9052565b919061041e905f602085019401906103fe565b565b3461045057610430366004610120565b61044c61043b6103b8565b610443610112565b9182918261040b565b0390f35b610118565b90565b5f1b90565b61047161046c61047692610455565b610458565b61012f565b90565b6104a27f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9061045d565b90565b6104ad610479565b90565b346104e0576104c0366004610120565b6104dc6104cb6104a5565b6104d3610112565b9182918261013f565b0390f35b610118565b34610513576104f5366004610120565b6104fd610c75565b610505610112565b8061050f816102af565b0390f35b610118565b916060838303126105655761052f825f8501610313565b9261053d8360208301610313565b92604082013567ffffffffffffffff81116105605761055c9201610199565b9091565b610189565b61011c565b151590565b6105789061056a565b9052565b919061058f905f6020850194019061056f565b565b346105c5576105c16105b06105a7366004610518565b92919091610d54565b6105b8610112565b9182918261057c565b0390f35b610118565b346105f9576105e36105dd3660046101d8565b90610e46565b6105eb610112565b806105f5816102af565b0390f35b610118565b610607906102f3565b9052565b919061061e905f602085019401906105fe565b565b3461065057610630366004610120565b61064c61063b610e82565b610643610112565b9182918261060b565b0390f35b610118565b909182601f8301121561068f5781359167ffffffffffffffff831161068a57602001926020830284011161068557565b610195565b610191565b61018d565b906020828203126106c5575f82013567ffffffffffffffff81116106c0576106bc9201610655565b9091565b610189565b61011c565b346106f9576106e36106dd366004610694565b90610f4d565b6106eb610112565b806106f5816102af565b0390f35b610118565b9060208282031261071757610714915f01610313565b90565b61011c565b3461074a5761073461072f3660046106fe565b611081565b61073c610112565b80610746816102af565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61077f90610773565b9052565b9190610796905f60208501940190610776565b565b346107c8576107a8366004610120565b6107c46107b361074f565b6107bb610112565b91829182610783565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461082157610801366004610120565b61081d61080c6107cd565b610814610112565b9182918261057c565b0390f35b610118565b346108545761083e6108393660046106fe565b6110f1565b610846610112565b80610850816102af565b0390f35b610118565b5f80fd5b5f90565b5f1c90565b90565b61087561087a91610861565b610866565b90565b6108879054610869565b90565b61089261085d565b506108a55f61089f6110fc565b0161087d565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b6108d36108ce6108d8926108ad565b6108b9565b6108b0565b90565b90565b6108ea6108ef916108b0565b6108db565b9052565b905090565b90825f939282370152565b9091826109138161091a936108f3565b80936108f8565b0190565b8061092f60019261093696946108de565b0191610903565b90565b634e487b7160e01b5f52604160045260245ffd5b9061095790610226565b810190811067ffffffffffffffff82111761097157604052565b610939565b6109b4906109826108a8565b506109a561098f5f6108bf565b9193610999610112565b9485936020850161091e565b6020820181038252038261094d565b90565b906109d36109cd33329085859192909192610d54565b1561056a565b6109e2576109e091610a7e565b565b5f631b8e828b60e31b8152806109fa600482016102af565b0390fd5b5f80fd5b90610a15610a0e610112565b928361094d565b565b67ffffffffffffffff8111610a3557610a31602091610226565b0190565b610939565b90929192610a4f610a4a82610a17565b610a02565b93818552602085019082840111610a6b57610a69926108f8565b565b6109fe565b610a7b913691610a3a565b90565b610a9091610a8b91610a70565b6112dd565b565b90610a9c916109b7565b565b90610ab091610aab6114a5565b610bb7565b565b60a01c90565b60ff1690565b610aca610acf91610ab2565b610ab8565b90565b610adc9054610abe565b90565b610af3610aee610af8926108ad565b6103c7565b6102e8565b90565b610b0490610adf565b90565b60a01b90565b90610b1c60ff60a01b91610b07565b9181191691161790565b610b2f9061056a565b90565b90565b90610b4a610b45610b5192610b26565b610b32565b8254610b0d565b9055565b610b5e906103ca565b90565b610b6a90610b55565b90565b90610b7e60018060a01b0391610458565b9181191691161790565b610b9190610b55565b90565b90565b90610bac610ba7610bb392610b88565b610b94565b8254610b6d565b9055565b610bc16001610ad2565b610c295781610be0610bda610bd55f610afb565b6102f3565b916102f3565b14610c0d57610c06610bff610c0b93610bfa600180610b35565b610b61565b6001610b97565b6110f1565b565b5f632e7f3c7f60e11b815280610c25600482016102af565b0390fd5b5f62dc149f60e41b815280610c40600482016102af565b0390fd5b90610c4e91610a9e565b565b610c586114a5565b610c60610c62565b565b610c73610c6e5f610afb565b611516565b565b610c7d610c50565b565b5f90565b610c8f610c9491610861565b610387565b90565b610ca19054610c83565b90565b60e01b90565b610cb38161056a565b03610cba57565b5f80fd5b90505190610ccb82610caa565b565b90602082820312610ce657610ce3915f01610cbe565b90565b61011c565b9190610d0581610cfe81610d0a95610212565b80956108f8565b610226565b0190565b610d34610d419593949294610d2a60608401965f8501906105fe565b60208301906105fe565b6040818503910152610ceb565b90565b610d4c610112565b3d5f823e3d90fd5b92610d9760209394610d64610c7f565b50610da2610d7a610d756001610c97565b6103f2565b93637a3979dc929597610d8b610112565b98899788968796610ca4565b865260048601610d0e565b03915afa908115610de6575f91610db8575b5090565b610dd9915060203d8111610ddf575b610dd1818361094d565b810190610ccd565b5f610db4565b503d610dc7565b610d44565b90610e07610e0133329085859192909192610d54565b1561056a565b610e1657610e1491610e32565b565b5f631b8e828b60e31b815280610e2e600482016102af565b0390fd5b610e4491610e3f91610976565b6112dd565b565b90610e5091610deb565b565b5f90565b60018060a01b031690565b610e6d610e7291610861565b610e56565b90565b610e7f9054610e61565b90565b610e8a610e52565b50610e945f610e75565b90565b5090565b610eaf610eaa610eb4926108ad565b6103c7565b610773565b90565b6001610ec39101610773565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610f28570180359067ffffffffffffffff8211610f2357602001916001820236038313610f1e57565b610ee2565b610ede565b610eda565b90821015610f48576020610f449202810190610ee6565b9091565b610ec6565b610f58818390610e97565b91610f625f610e9b565b5b80610f76610f7086610773565b91610773565b1015610fcb57610fa490610f9a333290610f9287878691610f2d565b929091610d54565b610fa9575b610eb7565b610f63565b610fc6610fc1610fbb86868591610f2d565b90610976565b6112dd565b610f9f565b50505050565b610fe290610fdd6114a5565b610ff0565b565b610fed906103e6565b90565b8061100b6110056110005f610afb565b6102f3565b916102f3565b146110655761102361101c82610b61565b6001610b97565b61104d7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610fe4565b90611056610112565b80611060816102af565b0390a2565b5f632e7f3c7f60e11b81528061107d600482016102af565b0390fd5b61108a90610fd1565b565b61109d906110986114a5565b61109f565b565b806110ba6110b46110af5f610afb565b6102f3565b916102f3565b146110ca576110c890611516565b565b6110ed6110d65f610afb565b5f918291631e4fbdf760e01b83526004830161060b565b0390fd5b6110fa9061108c565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61114561114061114a92610773565b6103c7565b611124565b90565b611156906103ca565b90565b6111629061114d565b90565b61116f6064611159565b90565b61117b906103e6565b90565b61118781610773565b0361118e57565b5f80fd5b9050519061119f8261117e565b565b906020828203126111ba576111b7915f01611192565b90565b61011c565b60200190565b60601b90565b6111d4906111c5565b90565b6111e0906111cb565b90565b6111ef6111f4916102f3565b6111d7565b9052565b60c01b90565b611207906111f8565b90565b61121661121b91611124565b6111fe565b9052565b90565b61122e6112339161012f565b61121f565b9052565b92611265600861126d9461125d60148861125560209b9a86996111e3565b01809261120a565b01809261120a565b018092611222565b0190565b60208161128361128b93839695611222565b018092611222565b0190565b9061129b5f1991610458565b9181191691161790565b6112ae9061012f565b90565b6112ba90610861565b90565b906112d26112cd6112d9926112a5565b6112b1565b825461128f565b9055565b6112e5611120565b507f00000000000000000000000000000000000000000000000000000000000000005f1461149457611338602061132261131d611165565b611172565b63a3b1b31d90611330610112565b938492610ca4565b82528180611348600482016102af565b03915afa90811561148f5761141c91611368915f91611461575b50611131565b5b5f6113726110fc565b916113bb336113ac61138342611131565b886113966113908261020e565b916111bf565b20906113a0610112565b95869460208601611237565b6020820181038252038261094d565b6113cd6113c78261020e565b916111bf565b206114026113dc83850161087d565b6113f36113e7610112565b93849260208401611271565b6020820181038252038261094d565b61141461140e8261020e565b916111bf565b2091016112bd565b3361145c61144a7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610fe4565b92611453610112565b91829182610261565b0390a2565b611482915060203d8111611488575b61147a818361094d565b8101906111a1565b5f611362565b503d611470565b610d44565b61141c6114a043611131565b611369565b6114ad610e82565b6114c66114c06114bb611575565b6102f3565b916102f3565b036114cd57565b6114ef6114d8611575565b5f91829163118cdaa760e01b83526004830161060b565b0390fd5b90565b9061150b61150661151292610fe4565b6114f3565b8254610b6d565b9055565b61151f5f610e75565b611529825f6114f6565b9061155d6115577f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610fe4565b91610fe4565b91611566610112565b80611570816102af565b0390a3565b61157d610e52565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x02QV[a\0!a\x004V[a3\xDCa\x04\xBE\x829a3\xDC\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a8\x9A\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01da\x01_a\x01i\x92a\x01\x15V[a\x01KV[a\x01HV[\x90V[a\x01u_a\x01PV[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[\x90V[\x90V[a\x01\xB6a\x01\xB1a\x01\xBB\x92a\x01\x9CV[a\x01\x18V[a\x01\x9FV[\x90V[\x90a\x01\xCA_\x19\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xE8a\x01\xE3a\x01\xED\x92a\x01\x9FV[a\x01\x18V[a\x01\x9FV[\x90V[\x90V[\x90a\x02\x08a\x02\x03a\x02\x0F\x92a\x01\xD4V[a\x01\xF0V[\x82Ta\x01\xBEV[\x90UV[\x90V[a\x02*a\x02%a\x02/\x92a\x02\x13V[a\x01\x18V[a\x01\x9FV[\x90V[\x90V[a\x02Ia\x02Da\x02N\x92a\x022V[a\x01\x18V[a\x01\x9FV[\x90V[\x80a\x02la\x02fa\x02a_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x02\xD6Wa\x02\x95\x90a\x02\x87a\x02\x80a\x01lV[\x82\x90a\x03\xACV[Pa\x02\x90a\x01xV[a\x03\xACV[Pa\x02\xABa\x02\xA4a\x01\xFEa\x01\xA2V[`\x01a\x01\xF3V[a\x02\xC0a\x02\xB9a\x03\xE8a\x02\x16V[`\x02a\x01\xF3V[a\x02\xD4a\x02\xCD`\x01a\x025V[`\x03a\x01\xF3V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x02\xEE`\x04\x82\x01a\x01CV[\x03\x90\xFD[_\x90V[\x15\x15\x90V[a\x03\x04\x90a\x01HV[\x90V[\x90a\x03\x11\x90a\x02\xFBV[_R` R`@_ \x90V[a\x031a\x03,a\x036\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x03B\x90a\x03\x1DV[\x90V[a\x03N\x90a\x039V[\x90V[\x90a\x03[\x90a\x03EV[_R` R`@_ \x90V[\x90a\x03s`\xFF\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x86\x90a\x02\xF6V[\x90V[\x90V[\x90a\x03\xA1a\x03\x9Ca\x03\xA8\x92a\x03}V[a\x03\x89V[\x82Ta\x03gV[\x90UV[a\x03\xB4a\x02\xF2V[Pa\x03\xC9a\x03\xC3\x82\x84\x90a\x04\x83V[\x15a\x02\xF6V[_\x14a\x04QWa\x03\xF0`\x01a\x03\xEB_a\x03\xE3\x81\x86\x90a\x03\x07V[\x01\x85\x90a\x03QV[a\x03\x8CV[\x90a\x03\xF9a\x04\xB0V[\x90a\x046a\x040a\x04*\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x02\xFBV[\x92a\x03EV[\x92a\x03EV[\x92a\x04?a\x004V[\x80a\x04I\x81a\x01CV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x04na\x04s\x91a\x04WV[a\x04\\V[\x90V[a\x04\x80\x90Ta\x04bV[\x90V[a\x04\xA9\x91_a\x04\x9Ea\x04\xA4\x93a\x04\x97a\x02\xF2V[P\x82a\x03\x07V[\x01a\x03QV[a\x04vV[\x90V[_\x90V[a\x04\xB8a\x04\xACV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08'V[a\0\x1D_5a\x01\x1CV[\x80c\x01\xFF\xC9\xA7\x14a\x01\x17W\x80c\x1FC\xFC\x8B\x14a\x01\x12W\x80c$\x8A\x9C\xA3\x14a\x01\rW\x80c'8\xEF\t\x14a\x01\x08W\x80c)\x7FLd\x14a\x01\x03W\x80c,\xD7\x99\xBD\x14a\0\xFEW\x80c//\xF1]\x14a\0\xF9W\x80c6V\x8A\xBE\x14a\0\xF4W\x80cr2\xC13\x14a\0\xEFW\x80c\x91\xD1HT\x14a\0\xEAW\x80c\xA2\x17\xFD\xDF\x14a\0\xE5W\x80c\xC8\xFDq\xDD\x14a\0\xE0W\x80c\xCC\xDCh\xF2\x14a\0\xDBW\x80c\xD5Gt\x1F\x14a\0\xD6W\x80c\xD9\x85*\xBF\x14a\0\xD1Wc\xEC\x87b\x1C\x03a\0\x0EWa\x07\xF2V[a\x07\x89V[a\x06\xBDV[a\x06\x89V[a\x06'V[a\x05\xF2V[a\x05\x81V[a\x05LV[a\x05\x18V[a\x04\xE4V[a\x04ZV[a\x03\x9CV[a\x03gV[a\x03\x01V[a\x02\x8BV[a\x01\xA4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01E\x81a\x010V[\x03a\x01LWV[_\x80\xFD[\x90P5\x90a\x01]\x82a\x01<V[V[\x90` \x82\x82\x03\x12a\x01xWa\x01u\x91_\x01a\x01PV[\x90V[a\x01,V[\x15\x15\x90V[a\x01\x8B\x90a\x01}V[\x90RV[\x91\x90a\x01\xA2\x90_` \x85\x01\x94\x01\x90a\x01\x82V[V[4a\x01\xD4Wa\x01\xD0a\x01\xBFa\x01\xBA6`\x04a\x01_V[a\x08/V[a\x01\xC7a\x01\"V[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01(V[\x90V[a\x01\xE5\x81a\x01\xD9V[\x03a\x01\xECWV[_\x80\xFD[\x90P5\x90a\x01\xFD\x82a\x01\xDCV[V[\x90V[a\x02\x0B\x81a\x01\xFFV[\x03a\x02\x12WV[_\x80\xFD[\x90P5\x90a\x02#\x82a\x02\x02V[V[\x91\x90`@\x83\x82\x03\x12a\x02MW\x80a\x02Aa\x02J\x92_\x86\x01a\x01\xF0V[\x93` \x01a\x02\x16V[\x90V[a\x01,V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02f\x90a\x02RV[\x90V[a\x02r\x90a\x02]V[\x90RV[\x91\x90a\x02\x89\x90_` \x85\x01\x94\x01\x90a\x02iV[V[4a\x02\xBCWa\x02\xB8a\x02\xA7a\x02\xA16`\x04a\x02%V[\x90a\x08yV[a\x02\xAFa\x01\"V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x02\xDAWa\x02\xD7\x91_\x01a\x01\xF0V[\x90V[a\x01,V[a\x02\xE8\x90a\x01\xD9V[\x90RV[\x91\x90a\x02\xFF\x90_` \x85\x01\x94\x01\x90a\x02\xDFV[V[4a\x031Wa\x03-a\x03\x1Ca\x03\x176`\x04a\x02\xC1V[a\x08\xFBV[a\x03$a\x01\"V[\x91\x82\x91\x82a\x02\xECV[\x03\x90\xF3[a\x01(V[_\x91\x03\x12a\x03@WV[a\x01,V[a\x03N\x90a\x01\xFFV[\x90RV[\x91\x90a\x03e\x90_` \x85\x01\x94\x01\x90a\x03EV[V[4a\x03\x97Wa\x03w6`\x04a\x036V[a\x03\x93a\x03\x82a\t V[a\x03\x8Aa\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[4a\x03\xCCWa\x03\xAC6`\x04a\x036V[a\x03\xC8a\x03\xB7a\tXV[a\x03\xBFa\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x03\xEAWa\x03\xE7\x91_\x01a\x02\x16V[\x90V[a\x01,V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x040a\x049` \x93a\x04>\x93a\x04'\x81a\x03\xEFV[\x93\x84\x80\x93a\x03\xF3V[\x95\x86\x91\x01a\x03\xFCV[a\x04\x07V[\x01\x90V[a\x04W\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04\x11V[\x90V[4a\x04\x8AWa\x04\x86a\x04ua\x04p6`\x04a\x03\xD1V[a\n\nV[a\x04}a\x01\"V[\x91\x82\x91\x82a\x04BV[\x03\x90\xF3[a\x01(V[a\x04\x98\x81a\x02]V[\x03a\x04\x9FWV[_\x80\xFD[\x90P5\x90a\x04\xB0\x82a\x04\x8FV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xDAW\x80a\x04\xCEa\x04\xD7\x92_\x86\x01a\x01\xF0V[\x93` \x01a\x04\xA3V[\x90V[a\x01,V[_\x01\x90V[4a\x05\x13Wa\x04\xFDa\x04\xF76`\x04a\x04\xB2V[\x90a\n\xAFV[a\x05\x05a\x01\"V[\x80a\x05\x0F\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[4a\x05GWa\x051a\x05+6`\x04a\x04\xB2V[\x90a\n\xBBV[a\x059a\x01\"V[\x80a\x05C\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[4a\x05|Wa\x05xa\x05ga\x05b6`\x04a\x03\xD1V[a\x0B\xBCV[a\x05oa\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[4a\x05\xB2Wa\x05\xAEa\x05\x9Da\x05\x976`\x04a\x04\xB2V[\x90a\x0COV[a\x05\xA5a\x01\"V[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01(V[\x90V[_\x1B\x90V[a\x05\xD3a\x05\xCEa\x05\xD8\x92a\x05\xB7V[a\x05\xBAV[a\x01\xD9V[\x90V[a\x05\xE4_a\x05\xBFV[\x90V[a\x05\xEFa\x05\xDBV[\x90V[4a\x06\"Wa\x06\x026`\x04a\x036V[a\x06\x1Ea\x06\ra\x05\xE7V[a\x06\x15a\x01\"V[\x91\x82\x91\x82a\x02\xECV[\x03\x90\xF3[a\x01(V[4a\x06WWa\x0676`\x04a\x036V[a\x06Sa\x06Ba\x0CxV[a\x06Ja\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[\x91\x90`@\x83\x82\x03\x12a\x06\x84W\x80a\x06xa\x06\x81\x92_\x86\x01a\x02\x16V[\x93` \x01a\x02\x16V[\x90V[a\x01,V[4a\x06\xB8Wa\x06\xA2a\x06\x9C6`\x04a\x06\\V[\x90a\r\x8AV[a\x06\xAAa\x01\"V[\x80a\x06\xB4\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[4a\x06\xECWa\x06\xD6a\x06\xD06`\x04a\x04\xB2V[\x90a\r\xC0V[a\x06\xDEa\x01\"V[\x80a\x06\xE8\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[a\x06\xFA\x90a\x02]V[\x90V[a\x07\x06\x81a\x06\xF1V[\x03a\x07\rWV[_\x80\xFD[\x90P5\x90a\x07\x1E\x82a\x06\xFDV[V[`\x80\x81\x83\x03\x12a\x07aWa\x076\x82_\x83\x01a\x02\x16V[\x92a\x07^a\x07G\x84` \x85\x01a\x04\xA3V[\x93a\x07U\x81`@\x86\x01a\x07\x11V[\x93``\x01a\x01\xF0V[\x90V[a\x01,V[\x91` a\x07\x87\x92\x94\x93a\x07\x80`@\x82\x01\x96_\x83\x01\x90a\x02iV[\x01\x90a\x03EV[V[4a\x07\xBEWa\x07\xA5a\x07\x9C6`\x04a\x07 V[\x92\x91\x90\x91a\x0F7V[\x90a\x07\xBAa\x07\xB1a\x01\"V[\x92\x83\x92\x83a\x07fV[\x03\x90\xF3[a\x01(V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x07\xEFa\x07\xC3V[\x90V[4a\x08\"Wa\x08\x026`\x04a\x036V[a\x08\x1Ea\x08\ra\x07\xE7V[a\x08\x15a\x01\"V[\x91\x82\x91\x82a\x02\xECV[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x90V[a\x087a\x08+V[P\x80a\x08Ra\x08Lcye\xDB\x0B`\xE0\x1Ba\x010V[\x91a\x010V[\x14\x90\x81\x15a\x08_W[P\x90V[a\x08i\x91Pa\x11\xF3V[_a\x08[V[_\x90V[` \x01\x90V[\x90a\x08\x90a\x08\xA9\x92a\x08\x89a\x08oV[P\x91a\n\nV[a\x08\xA2a\x08\x9C\x82a\x03\xEFV[\x91a\x08sV[ \x90a\x12%V[\x90V[_\x90V[a\x08\xB9\x90a\x01\xD9V[\x90V[\x90a\x08\xC6\x90a\x08\xB0V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x08\xE6a\x08\xEB\x91a\x08\xD2V[a\x08\xD7V[\x90V[a\x08\xF8\x90Ta\x08\xDAV[\x90V[`\x01a\t\x13a\t\x19\x92a\t\x0Ca\x08\xACV[P_a\x08\xBCV[\x01a\x08\xEEV[\x90V[_\x90V[a\t(a\t\x1CV[Pa\t1a\x12\xA0V[\x90V[\x90V[a\tCa\tH\x91a\x08\xD2V[a\t4V[\x90V[a\tU\x90Ta\t7V[\x90V[a\t`a\t\x1CV[Pa\tk`\x01a\tKV[\x90V[``\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\t\x91\x90a\x04\x07V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xABW`@RV[a\tsV[\x90a\t\xC3a\t\xBCa\x01\"V[\x92\x83a\t\x87V[V[\x90P\x90V[a\t\xEFa\t\xE6\x92` \x92a\t\xDD\x81a\x03\xEFV[\x94\x85\x80\x93a\t\xC5V[\x93\x84\x91\x01a\x03\xFCV[\x01\x90V[a\n\x01\x90a\n\x07\x93\x92a\t\xCAV[\x90a\t\xCAV[\x90V[a\n\x82a\nM\x91a\n\x19a\tnV[Pa\n\\a\x1D\xF3\x91a\n-` \x84\x01a\t\xB0V[\x92\x80\x84Ra\x15\xE9` \x85\x019a\nAa\x01\"V[\x94\x85\x91` \x83\x01a\x03RV[` \x82\x01\x81\x03\x82R\x03\x84a\t\x87V[a\nsa\nga\x01\"V[\x93\x84\x92` \x84\x01a\t\xF3V[` \x82\x01\x81\x03\x82R\x03\x82a\t\x87V[\x90V[\x90a\n\xA0\x91a\n\x9Ba\n\x96\x82a\x08\xFBV[a\x12\xDCV[a\n\xA2V[V[\x90a\n\xAC\x91a\x12\xF0V[PV[\x90a\n\xB9\x91a\n\x85V[V[\x90\x80a\n\xD6a\n\xD0a\n\xCBa\x13\x9BV[a\x02]V[\x91a\x02]V[\x03a\n\xE7Wa\n\xE4\x91a\x13\xA8V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\n\xFF`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[\x90V[a\x0B\x1Aa\x0B\x15a\x0B\x1F\x92a\x01\xFFV[a\x0B\x03V[a\x01\xFFV[\x90V[\x90a\x0B,\x90a\x0B\x06V[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x0BJa\x0BO\x91a\x08\xD2V[a\x0B8V[\x90V[a\x0B\\\x90Ta\x0B>V[\x90V[`\xFF\x16\x90V[a\x0Bya\x0Bta\x0B~\x92a\x05\xB7V[a\x0B\x03V[a\x0B_V[\x90V[\x90V[a\x0B\x98a\x0B\x93a\x0B\x9D\x92a\x0B\x81V[a\x0B\x03V[a\x0B_V[\x90V[a\x0B\xB4a\x0B\xAFa\x0B\xB9\x92a\x0B_V[a\x0B\x03V[a\x01\xFFV[\x90V[a\x0B\xD3a\x0B\xD8\x91a\x0B\xCBa\t\x1CV[P`\x04a\x0B\"V[a\x0BRV[_\x14a\x0B\xF4Wa\x0B\xF1a\x0B\xEB`\x01a\x0B\x84V[[a\x0B\xA0V[\x90V[a\x0B\xF1a\x0C\0_a\x0BeV[a\x0B\xECV[a\x0C\x19a\x0C\x14a\x0C\x1E\x92a\x02RV[a\x0B\x03V[a\x02RV[\x90V[a\x0C*\x90a\x0C\x05V[\x90V[a\x0C6\x90a\x0C!V[\x90V[\x90a\x0CC\x90a\x0C-V[_R` R`@_ \x90V[a\x0Cu\x91_a\x0Cja\x0Cp\x93a\x0Cca\x08+V[P\x82a\x08\xBCV[\x01a\x0C9V[a\x0BRV[\x90V[a\x0C\x80a\t\x1CV[Pa\x0C\x8B`\x02a\tKV[\x90V[\x90a\x0C\xA8\x91a\x0C\xA3a\x0C\x9Ea\x07\xC3V[a\x12\xDCV[a\r!V[V[\x90a\x0C\xB6_\x19\x91a\x05\xBAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0C\xD8a\x0C\xD3a\x0C\xDF\x92a\x0B\x06V[a\x0C\xC0V[\x82Ta\x0C\xAAV[\x90UV[a\r\x18a\r\x1F\x94a\r\x0E``\x94\x98\x97\x95a\r\x04`\x80\x86\x01\x9A_\x87\x01\x90a\x03EV[` \x85\x01\x90a\x03EV[`@\x83\x01\x90a\x03EV[\x01\x90a\x03EV[V[a\r+`\x01a\tKV[a\r\x85a\r8`\x02a\tKV[\x91a\rD\x84`\x01a\x0C\xC3V[a\rO\x85`\x02a\x0C\xC3V[\x91\x92\x93\x7F\x88\x91vV\x86\xE3\x13h\xFF?\xDB(\x1FVP}>\x8A\x9C\xF3\x8D\xEE\x9DM\xC71\x84N\xB8\xAA\x01N\x94a\r|a\x01\"V[\x94\x85\x94\x85a\x0C\xE3V[\x03\x90\xA1V[\x90a\r\x94\x91a\x0C\x8EV[V[\x90a\r\xB1\x91a\r\xACa\r\xA7\x82a\x08\xFBV[a\x12\xDCV[a\r\xB3V[V[\x90a\r\xBD\x91a\x13\xA8V[PV[\x90a\r\xCA\x91a\r\x96V[V[a\r\xE0a\r\xDBa\r\xE5\x92a\x05\xB7V[a\x0B\x03V[a\x02RV[\x90V[a\r\xF1\x90a\r\xCCV[\x90V[a\r\xFD\x90a\x0C!V[\x90V[a\x0E\x14a\x0E\x0Fa\x0E\x19\x92a\x05\xB7V[a\x0B\x03V[a\x01\xFFV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0EPa\x0EV\x91a\x01\xFFV[\x91a\x01\xFFV[\x90\x81\x15a\x0EaW\x04\x90V[a\x0E\x1CV[\x90a\x0Er`\xFF\x91a\x05\xBAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x85\x90a\x01}V[\x90V[\x90V[\x90a\x0E\xA0a\x0E\x9Ba\x0E\xA7\x92a\x0E|V[a\x0E\x88V[\x82Ta\x0EfV[\x90UV[a\x0E\xB4\x90a\x01\xFFV[_\x19\x81\x14a\x0E\xC2W`\x01\x01\x90V[a\x0E0V[a\x0E\xD0\x90a\x0C\x05V[\x90V[a\x0E\xDC\x90a\x0E\xC7V[\x90V[a\x0E\xE8\x90a\x0C!V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x0E\xFFWV[a\x01,V[\x91` a\x0F%\x92\x94\x93a\x0F\x1E`@\x82\x01\x96_\x83\x01\x90a\x02iV[\x01\x90a\x02iV[V[a\x0F/a\x01\"V[=_\x82>=\x90\xFD[\x93\x92\x93\x91\x90\x91a\x0FEa\x08oV[Pa\x0FNa\t\x1CV[P\x82a\x0Fja\x0Fda\x0F__a\r\xE8V[a\x02]V[\x91a\x02]V[\x14\x80\x15a\x11\xC9W[a\x11\xADW\x80a\x0F\x89a\x0F\x83_a\x0E\0V[\x91a\x01\xFFV[\x14_\x14a\x11\xA7Wa\x0F\x98a\x12\xA0V[[\x94\x81a\x0F\xADa\x0F\xA7_a\x0E\0V[\x91a\x01\xFFV[\x14\x15\x80a\x11qW[a\x11UWa\x0F\xCDa\x0F\xC8`\x04\x88\x90a\x0B\"V[a\x0BRV[a\x119Wa\x10\x1D\x91a\x0F\xEB`\x01a\x0F\xE6`\x04\x8A\x90a\x0B\"V[a\x0E\x8BV[a\x0F\xFDa\x0F\xF7_a\x0E\0V[\x91a\x01\xFFV[\x14a\x11\x18W[a\x10\x0C\x86a\n\nV[a\x10\x18_\x92\x91\x92a\x0E\0V[a\x14lV[\x91a\x10/a\x10*\x84a\x0E\xD3V[a\x0E\xDFV[\x90cH\\\xC9U\x90a\x10?\x84a\r\xF4V[\x92\x80;\x15a\x11\x13Wa\x10d_\x80\x94a\x10oa\x10Xa\x01\"V[\x97\x88\x96\x87\x95\x86\x94a\x0E\xEFV[\x84R`\x04\x84\x01a\x0F\x04V[\x03\x92Z\xF1\x80\x15a\x11\x0EWa\x10\xE2W[P\x83\x90a\x10\x8B\x83\x91a\r\xF4V[\x90a\x10\xC8a\x10\xC2a\x10\xBC\x7FI\xB2\x1F\x1EA\x90\xDB\x8B\n\x93<\x95\x1E\xD0\x13\xDE\",\x84|\x15F\x17Th-\xAA.\xAB\x1F\xDB\xD2\x95a\x0B\x06V[\x92a\x0C-V[\x92a\x0C-V[\x92a\x10\xD1a\x01\"V[\x80a\x10\xDB\x81a\x04\xDFV[\x03\x90\xA4\x91\x90V[a\x11\x01\x90_=\x81\x11a\x11\x07W[a\x10\xF9\x81\x83a\t\x87V[\x81\x01\x90a\x0E\xF5V[_a\x10~V[P=a\x10\xEFV[a\x0F'V[a\x0E\xEBV[a\x114a\x11-a\x11(`\x03a\tKV[a\x0E\xABV[`\x03a\x0C\xC3V[a\x10\x03V[_c$Y\x1D\x89`\xE0\x1B\x81R\x80a\x11Q`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[_cj\"S\x91`\xE0\x1B\x81R\x80a\x11m`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[Pa\x11\x86\x86a\x11\x80`\x02a\tKV[\x90a\x0EDV[a\x11\xA1a\x11\x9Ba\x11\x96`\x01a\tKV[a\x01\xFFV[\x91a\x01\xFFV[\x14a\x0F\xB5V[\x80a\x0F\x99V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x11\xC5`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[Pa\x11\xD3\x82a\r\xF4V[a\x11\xEDa\x11\xE7a\x11\xE2_a\r\xE8V[a\x02]V[\x91a\x02]V[\x14a\x0FrV[a\x11\xFBa\x08+V[Pa\x12\x15a\x12\x0Fc\x01\xFF\xC9\xA7`\xE0\x1Ba\x010V[\x91a\x010V[\x14\x90V[a\x12\"\x90a\x0C!V[\x90V[\x90a\x12C\x91a\x122a\x08oV[P\x90a\x12=0a\x12\x19V[\x91a\x15YV[\x90V[a\x12Ua\x12[\x91\x93\x92\x93a\x01\xFFV[\x92a\x01\xFFV[\x91a\x12g\x83\x82\x02a\x01\xFFV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x12vWV[a\x0E0V[a\x12\x8Aa\x12\x90\x91\x93\x92\x93a\x01\xFFV[\x92a\x01\xFFV[\x82\x01\x80\x92\x11a\x12\x9BWV[a\x0E0V[a\x12\xA8a\t\x1CV[Pa\x12\xD9a\x12\xC9a\x12\xB9`\x01a\tKV[a\x12\xC3`\x02a\tKV[\x90a\x12FV[a\x12\xD3`\x03a\tKV[\x90a\x12{V[\x90V[a\x12\xEE\x90a\x12\xE8a\x13\x9BV[\x90a\x15\xADV[V[a\x12\xF8a\x08+V[Pa\x13\ra\x13\x07\x82\x84\x90a\x0COV[\x15a\x01}V[_\x14a\x13\x95Wa\x134`\x01a\x13/_a\x13'\x81\x86\x90a\x08\xBCV[\x01\x85\x90a\x0C9V[a\x0E\x8BV[\x90a\x13=a\x13\x9BV[\x90a\x13za\x13ta\x13n\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x08\xB0V[\x92a\x0C-V[\x92a\x0C-V[\x92a\x13\x83a\x01\"V[\x80a\x13\x8D\x81a\x04\xDFV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x13\xA3a\x08oV[P3\x90V[a\x13\xB0a\x08+V[Pa\x13\xBC\x81\x83\x90a\x0COV[_\x14a\x14CWa\x13\xE2_a\x13\xDD_a\x13\xD5\x81\x86\x90a\x08\xBCV[\x01\x85\x90a\x0C9V[a\x0E\x8BV[\x90a\x13\xEBa\x13\x9BV[\x90a\x14(a\x14\"a\x14\x1C\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x08\xB0V[\x92a\x0C-V[\x92a\x0C-V[\x92a\x141a\x01\"V[\x80a\x14;\x81a\x04\xDFV[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a\x14j\x92\x94\x93a\x14c`@\x82\x01\x96_\x83\x01\x90a\x03EV[\x01\x90a\x03EV[V[\x91\x90\x91a\x14wa\x08oV[Pa\x14\x810a\x12\x19V[1a\x14\x94a\x14\x8E\x83a\x01\xFFV[\x91a\x01\xFFV[\x10a\x151Wa\x14\xA2\x82a\x03\xEFV[a\x14\xB4a\x14\xAE_a\x0E\0V[\x91a\x01\xFFV[\x14a\x15\x15W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x15\nW\x81a\x14\xE7a\x14\xE1a\x14\xDC_a\r\xE8V[a\x02]V[\x91a\x02]V[\x14a\x14\xEEWV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x15\x06`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x15-`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[a\x15:0a\x12\x19V[1a\x15U_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\x14IV[\x03\x90\xFD[\x91`\x0B\x92a\x15ea\x08oV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V[\x91` a\x15\xAB\x92\x94\x93a\x15\xA4`@\x82\x01\x96_\x83\x01\x90a\x02iV[\x01\x90a\x02\xDFV[V[\x90a\x15\xC2a\x15\xBC\x83\x83\x90a\x0COV[\x15a\x01}V[a\x15\xCAWPPV[a\x15\xE4_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x15\x8AV[\x03\x90\xFD\xFE`\xC0`@R4a\0HWa\0\x19a\0\x14a\0\xF9V[a\x01\xC7V[a\0!a\0MV[a\x15\x82a\x06\xB2\x829`\x80Q\x81\x81\x81a\x07\xCF\x01Ra\x12\xE8\x01R`\xA0Q\x81a\x07Q\x01Ra\x15\x82\x90\xF3[a\0SV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x7F\x90a\0WV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x97W`@RV[a\0aV[\x90a\0\xAFa\0\xA8a\0MV[\x92\x83a\0uV[V[_\x80\xFD[\x90V[a\0\xC1\x81a\0\xB5V[\x03a\0\xC8WV[_\x80\xFD[\x90PQ\x90a\0\xD9\x82a\0\xB8V[V[\x90` \x82\x82\x03\x12a\0\xF4Wa\0\xF1\x91_\x01a\0\xCCV[\x90V[a\0\xB1V[a\x01\x17a\x1D\xF3\x808\x03\x80a\x01\x0C\x81a\0\x9CV[\x92\x839\x81\x01\x90a\0\xDBV[\x90V[\x90V[\x90V[a\x014a\x01/a\x019\x92a\x01\x1AV[a\x01\x1DV[a\0\xB5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01y`\x18` \x92a\x01<V[a\x01\x82\x81a\x01EV[\x01\x90V[a\x01\x9B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01lV[\x90V[\x15a\x01\xA5WV[a\x01\xADa\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xC3`\x04\x82\x01a\x01\x86V[\x03\x90\xFD[a\x01\xCFa\x03*V[a\x01\xEC\x81a\x01\xE5a\x01\xDF_a\x01 V[\x91a\0\xB5V[\x14\x15a\x01\x9EV[`\xA0RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x10a\x02\x0Ba\x02\x15\x92a\x01\xF1V[a\x01\x1DV[a\x01\xF1V[\x90V[a\x02!\x90a\x01\xFCV[\x90V[a\x02-\x90a\x02\x18V[\x90V[a\x02:`da\x02$V[\x90V[a\x02F\x90a\x01\xFCV[\x90V[a\x02R\x90a\x02=V[\x90V[\x15\x15\x90V[a\x02d\x90Qa\x02UV[\x90V[`\xE0\x1B\x90V[_\x01\x90V[a\x02za\0MV[=_\x82>=\x90\xFD[` \x7Fled\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbSys precompile validation fai_\x82\x01R\x01RV[a\x02\xDC`#`@\x92a\x01<V[a\x02\xE5\x81a\x02\x82V[\x01\x90V[a\x02\xFE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xCFV[\x90V[\x15a\x03\x08WV[a\x03\x10a\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03&`\x04\x82\x01a\x02\xE9V[\x03\x90\xFD[a\x032a\x04\xD2V[a\x03Ba\x03=a\x020V[a\x02IV[;a\x03Ua\x03O_a\x01 V[\x91a\0\xB5V[\x11`\x80Ra\x03la\x03f`\x80a\x02ZV[\x15a\x02UV[\x80\x15a\x03~W[a\x03|\x90a\x03\x01V[V[Pa\x03\xAA` a\x03\x94a\x03\x8Fa\x020V[a\x02IV[c\xA3\xB1\xB3\x1D\x90a\x03\xA2a\0MV[\x93\x84\x92a\x02gV[\x82R\x81\x80a\x03\xBA`\x04\x82\x01a\x02mV[\x03\x91Z\xFA\x80\x15a\x04\x18Wa\x03|\x91_\x91a\x03\xEAW[Pa\x03\xE2a\x03\xDC_a\x01 V[\x91a\0\xB5V[\x11\x90Pa\x03sV[a\x04\x0B\x91P` =\x81\x11a\x04\x11W[a\x04\x03\x81\x83a\0uV[\x81\x01\x90a\0\xDBV[_a\x03\xCFV[P=a\x03\xF9V[a\x02rV[`\xA0\x1B\x90V[\x90a\x042`\xFF`\xA0\x1B\x91a\x04\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04E\x90a\x02UV[\x90V[\x90V[\x90a\x04`a\x04[a\x04g\x92a\x04<V[a\x04HV[\x82Ta\x04#V[\x90UV[a\x04t\x90a\x01\xFCV[\x90V[a\x04\x80\x90a\x04kV[\x90V[_\x1B\x90V[\x90a\x04\x99`\x01\x80`\xA0\x1B\x03\x91a\x04\x83V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xAC\x90a\x04kV[\x90V[\x90V[\x90a\x04\xC7a\x04\xC2a\x04\xCE\x92a\x04\xA3V[a\x04\xAFV[\x82Ta\x04\x88V[\x90UV[a\x04\xDB3a\x05?V[a\x04\xE6_`\x01a\x04KV[a\x04\xEEa\0MV[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x05:Wa\x05\x16\x82\x91a\x01\xBFa\x1C4\x849a\x02mV[\x03\x90_\xF0\x80\x15a\x055Wa\x05,a\x053\x91a\x04wV[`\x01a\x04\xB2V[V[a\x02rV[a\0aV[a\x05H\x90a\x05\xA0V[V[a\x05^a\x05Ya\x05c\x92a\x01\x1AV[a\x01\x1DV[a\x01\xF1V[\x90V[a\x05o\x90a\x05JV[\x90V[a\x05{\x90a\x01\xF1V[\x90V[a\x05\x87\x90a\x05rV[\x90RV[\x91\x90a\x05\x9E\x90_` \x85\x01\x94\x01\x90a\x05~V[V[\x80a\x05\xBBa\x05\xB5a\x05\xB0_a\x05fV[a\x05rV[\x91a\x05rV[\x14a\x05\xCBWa\x05\xC9\x90a\x06RV[V[a\x05\xEEa\x05\xD7_a\x05fV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\x8BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\x0Ea\x06\x13\x91a\x05\xF2V[a\x05\xF7V[\x90V[a\x06 \x90Ta\x06\x02V[\x90V[a\x06,\x90a\x02=V[\x90V[\x90V[\x90a\x06Ga\x06Ba\x06N\x92a\x06#V[a\x06/V[\x82Ta\x04\x88V[\x90UV[a\x06[_a\x06\x16V[a\x06e\x82_a\x062V[\x90a\x06\x99a\x06\x93\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06#V[\x91a\x06#V[\x91a\x06\xA2a\0MV[\x80a\x06\xAC\x81a\x02mV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08YV[a\0\x1D_5a\x01\x0CV[\x80c\x038\x11T\x14a\x01\x07W\x80c6l\xBA\xB7\x14a\x01\x02W\x80cF\xE2\xCC\t\x14a\0\xFDW\x80cH\\\xC9U\x14a\0\xF8W\x80c[<\xD6\xE2\x14a\0\xF3W\x80cc\xD9d7\x14a\0\xEEW\x80cqP\x18\xA6\x14a\0\xE9W\x80cz9y\xDC\x14a\0\xE4W\x80c\x80NQ#\x14a\0\xDFW\x80c\x8D\xA5\xCB[\x14a\0\xDAW\x80c\xCD\xAF\xB9x\x14a\0\xD5W\x80c\xD4\xF0\xEBM\x14a\0\xD0W\x80c\xD8x\x13B\x14a\0\xCBW\x80c\xEA\x16\x1C\xE6\x14a\0\xC6Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x08&V[a\x07\xF1V[a\x07\x98V[a\x07\x1CV[a\x06\xCAV[a\x06 V[a\x05\xCAV[a\x05\x91V[a\x04\xE5V[a\x04\xB0V[a\x04 V[a\x03OV[a\x02\xB4V[a\x02yV[a\x01TV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01*WV[a\x01\x1CV[\x90V[a\x01;\x90a\x01/V[\x90RV[\x91\x90a\x01R\x90_` \x85\x01\x94\x01\x90a\x012V[V[4a\x01\x84Wa\x01d6`\x04a\x01 V[a\x01\x80a\x01oa\x08\x8AV[a\x01wa\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x02\tW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x04Wa\x02\0\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02Oa\x02X` \x93a\x02]\x93a\x02F\x81a\x02\x0EV[\x93\x84\x80\x93a\x02\x12V[\x95\x86\x91\x01a\x02\x1BV[a\x02&V[\x01\x90V[a\x02v\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x020V[\x90V[4a\x02\xAAWa\x02\xA6a\x02\x95a\x02\x8F6`\x04a\x01\xD8V[\x90a\tvV[a\x02\x9Da\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\x01\x18V[_\x01\x90V[4a\x02\xE3Wa\x02\xCDa\x02\xC76`\x04a\x01\xD8V[\x90a\n\x92V[a\x02\xD5a\x01\x12V[\x80a\x02\xDF\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFC\x90a\x02\xE8V[\x90V[a\x03\x08\x81a\x02\xF3V[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x91\x90`@\x83\x82\x03\x12a\x03JW\x80a\x03>a\x03G\x92_\x86\x01a\x03\x13V[\x93` \x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x03~Wa\x03ha\x03b6`\x04a\x03\"V[\x90a\x0CDV[a\x03pa\x01\x12V[\x80a\x03z\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA2\x90`\x08a\x03\xA7\x93\x02a\x03\x83V[a\x03\x87V[\x90V[\x90a\x03\xB5\x91Ta\x03\x92V[\x90V[a\x03\xC4`\x01_\x90a\x03\xAAV[\x90V[\x90V[a\x03\xDEa\x03\xD9a\x03\xE3\x92a\x02\xE8V[a\x03\xC7V[a\x02\xE8V[\x90V[a\x03\xEF\x90a\x03\xCAV[\x90V[a\x03\xFB\x90a\x03\xE6V[\x90V[a\x04\x07\x90a\x03\xF2V[\x90RV[\x91\x90a\x04\x1E\x90_` \x85\x01\x94\x01\x90a\x03\xFEV[V[4a\x04PWa\x0406`\x04a\x01 V[a\x04La\x04;a\x03\xB8V[a\x04Ca\x01\x12V[\x91\x82\x91\x82a\x04\x0BV[\x03\x90\xF3[a\x01\x18V[\x90V[_\x1B\x90V[a\x04qa\x04la\x04v\x92a\x04UV[a\x04XV[a\x01/V[\x90V[a\x04\xA2\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x04]V[\x90V[a\x04\xADa\x04yV[\x90V[4a\x04\xE0Wa\x04\xC06`\x04a\x01 V[a\x04\xDCa\x04\xCBa\x04\xA5V[a\x04\xD3a\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[4a\x05\x13Wa\x04\xF56`\x04a\x01 V[a\x04\xFDa\x0CuV[a\x05\x05a\x01\x12V[\x80a\x05\x0F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x91``\x83\x83\x03\x12a\x05eWa\x05/\x82_\x85\x01a\x03\x13V[\x92a\x05=\x83` \x83\x01a\x03\x13V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05`Wa\x05\\\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[\x15\x15\x90V[a\x05x\x90a\x05jV[\x90RV[\x91\x90a\x05\x8F\x90_` \x85\x01\x94\x01\x90a\x05oV[V[4a\x05\xC5Wa\x05\xC1a\x05\xB0a\x05\xA76`\x04a\x05\x18V[\x92\x91\x90\x91a\rTV[a\x05\xB8a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x05\xF9Wa\x05\xE3a\x05\xDD6`\x04a\x01\xD8V[\x90a\x0EFV[a\x05\xEBa\x01\x12V[\x80a\x05\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[a\x06\x07\x90a\x02\xF3V[\x90RV[\x91\x90a\x06\x1E\x90_` \x85\x01\x94\x01\x90a\x05\xFEV[V[4a\x06PWa\x0606`\x04a\x01 V[a\x06La\x06;a\x0E\x82V[a\x06Ca\x01\x12V[\x91\x82\x91\x82a\x06\x0BV[\x03\x90\xF3[a\x01\x18V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x8FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\x8AW` \x01\x92` \x83\x02\x84\x01\x11a\x06\x85WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x06\xC5W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xC0Wa\x06\xBC\x92\x01a\x06UV[\x90\x91V[a\x01\x89V[a\x01\x1CV[4a\x06\xF9Wa\x06\xE3a\x06\xDD6`\x04a\x06\x94V[\x90a\x0FMV[a\x06\xEBa\x01\x12V[\x80a\x06\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x90` \x82\x82\x03\x12a\x07\x17Wa\x07\x14\x91_\x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x07JWa\x074a\x07/6`\x04a\x06\xFEV[a\x10\x81V[a\x07<a\x01\x12V[\x80a\x07F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07\x7F\x90a\x07sV[\x90RV[\x91\x90a\x07\x96\x90_` \x85\x01\x94\x01\x90a\x07vV[V[4a\x07\xC8Wa\x07\xA86`\x04a\x01 V[a\x07\xC4a\x07\xB3a\x07OV[a\x07\xBBa\x01\x12V[\x91\x82\x91\x82a\x07\x83V[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x08!Wa\x08\x016`\x04a\x01 V[a\x08\x1Da\x08\x0Ca\x07\xCDV[a\x08\x14a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x08TWa\x08>a\x0896`\x04a\x06\xFEV[a\x10\xF1V[a\x08Fa\x01\x12V[\x80a\x08P\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08ua\x08z\x91a\x08aV[a\x08fV[\x90V[a\x08\x87\x90Ta\x08iV[\x90V[a\x08\x92a\x08]V[Pa\x08\xA5_a\x08\x9Fa\x10\xFCV[\x01a\x08}V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08\xD3a\x08\xCEa\x08\xD8\x92a\x08\xADV[a\x08\xB9V[a\x08\xB0V[\x90V[\x90V[a\x08\xEAa\x08\xEF\x91a\x08\xB0V[a\x08\xDBV[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\t\x13\x81a\t\x1A\x93a\x08\xF3V[\x80\x93a\x08\xF8V[\x01\x90V[\x80a\t/`\x01\x92a\t6\x96\x94a\x08\xDEV[\x01\x91a\t\x03V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\tW\x90a\x02&V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\tqW`@RV[a\t9V[a\t\xB4\x90a\t\x82a\x08\xA8V[Pa\t\xA5a\t\x8F_a\x08\xBFV[\x91\x93a\t\x99a\x01\x12V[\x94\x85\x93` \x85\x01a\t\x1EV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[\x90V[\x90a\t\xD3a\t\xCD32\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\t\xE2Wa\t\xE0\x91a\n~V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\xFA`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_\x80\xFD[\x90a\n\x15a\n\x0Ea\x01\x12V[\x92\x83a\tMV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n5Wa\n1` \x91a\x02&V[\x01\x90V[a\t9V[\x90\x92\x91\x92a\nOa\nJ\x82a\n\x17V[a\n\x02V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\nkWa\ni\x92a\x08\xF8V[V[a\t\xFEV[a\n{\x916\x91a\n:V[\x90V[a\n\x90\x91a\n\x8B\x91a\npV[a\x12\xDDV[V[\x90a\n\x9C\x91a\t\xB7V[V[\x90a\n\xB0\x91a\n\xABa\x14\xA5V[a\x0B\xB7V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\n\xCAa\n\xCF\x91a\n\xB2V[a\n\xB8V[\x90V[a\n\xDC\x90Ta\n\xBEV[\x90V[a\n\xF3a\n\xEEa\n\xF8\x92a\x08\xADV[a\x03\xC7V[a\x02\xE8V[\x90V[a\x0B\x04\x90a\n\xDFV[\x90V[`\xA0\x1B\x90V[\x90a\x0B\x1C`\xFF`\xA0\x1B\x91a\x0B\x07V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B/\x90a\x05jV[\x90V[\x90V[\x90a\x0BJa\x0BEa\x0BQ\x92a\x0B&V[a\x0B2V[\x82Ta\x0B\rV[\x90UV[a\x0B^\x90a\x03\xCAV[\x90V[a\x0Bj\x90a\x0BUV[\x90V[\x90a\x0B~`\x01\x80`\xA0\x1B\x03\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x91\x90a\x0BUV[\x90V[\x90V[\x90a\x0B\xACa\x0B\xA7a\x0B\xB3\x92a\x0B\x88V[a\x0B\x94V[\x82Ta\x0BmV[\x90UV[a\x0B\xC1`\x01a\n\xD2V[a\x0C)W\x81a\x0B\xE0a\x0B\xDAa\x0B\xD5_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x0C\rWa\x0C\x06a\x0B\xFFa\x0C\x0B\x93a\x0B\xFA`\x01\x80a\x0B5V[a\x0BaV[`\x01a\x0B\x97V[a\x10\xF1V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C%`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C@`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[\x90a\x0CN\x91a\n\x9EV[V[a\x0CXa\x14\xA5V[a\x0C`a\x0CbV[V[a\x0Csa\x0Cn_a\n\xFBV[a\x15\x16V[V[a\x0C}a\x0CPV[V[_\x90V[a\x0C\x8Fa\x0C\x94\x91a\x08aV[a\x03\x87V[\x90V[a\x0C\xA1\x90Ta\x0C\x83V[\x90V[`\xE0\x1B\x90V[a\x0C\xB3\x81a\x05jV[\x03a\x0C\xBAWV[_\x80\xFD[\x90PQ\x90a\x0C\xCB\x82a\x0C\xAAV[V[\x90` \x82\x82\x03\x12a\x0C\xE6Wa\x0C\xE3\x91_\x01a\x0C\xBEV[\x90V[a\x01\x1CV[\x91\x90a\r\x05\x81a\x0C\xFE\x81a\r\n\x95a\x02\x12V[\x80\x95a\x08\xF8V[a\x02&V[\x01\x90V[a\r4a\rA\x95\x93\x94\x92\x94a\r*``\x84\x01\x96_\x85\x01\x90a\x05\xFEV[` \x83\x01\x90a\x05\xFEV[`@\x81\x85\x03\x91\x01Ra\x0C\xEBV[\x90V[a\rLa\x01\x12V[=_\x82>=\x90\xFD[\x92a\r\x97` \x93\x94a\rda\x0C\x7FV[Pa\r\xA2a\rza\ru`\x01a\x0C\x97V[a\x03\xF2V[\x93cz9y\xDC\x92\x95\x97a\r\x8Ba\x01\x12V[\x98\x89\x97\x88\x96\x87\x96a\x0C\xA4V[\x86R`\x04\x86\x01a\r\x0EV[\x03\x91Z\xFA\x90\x81\x15a\r\xE6W_\x91a\r\xB8W[P\x90V[a\r\xD9\x91P` =\x81\x11a\r\xDFW[a\r\xD1\x81\x83a\tMV[\x81\x01\x90a\x0C\xCDV[_a\r\xB4V[P=a\r\xC7V[a\rDV[\x90a\x0E\x07a\x0E\x0132\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\x0E\x16Wa\x0E\x14\x91a\x0E2V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E.`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x0ED\x91a\x0E?\x91a\tvV[a\x12\xDDV[V[\x90a\x0EP\x91a\r\xEBV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0Ema\x0Er\x91a\x08aV[a\x0EVV[\x90V[a\x0E\x7F\x90Ta\x0EaV[\x90V[a\x0E\x8Aa\x0ERV[Pa\x0E\x94_a\x0EuV[\x90V[P\x90V[a\x0E\xAFa\x0E\xAAa\x0E\xB4\x92a\x08\xADV[a\x03\xC7V[a\x07sV[\x90V[`\x01a\x0E\xC3\x91\x01a\x07sV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0F(W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F#W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0F\x1EWV[a\x0E\xE2V[a\x0E\xDEV[a\x0E\xDAV[\x90\x82\x10\x15a\x0FHW` a\x0FD\x92\x02\x81\x01\x90a\x0E\xE6V[\x90\x91V[a\x0E\xC6V[a\x0FX\x81\x83\x90a\x0E\x97V[\x91a\x0Fb_a\x0E\x9BV[[\x80a\x0Fva\x0Fp\x86a\x07sV[\x91a\x07sV[\x10\x15a\x0F\xCBWa\x0F\xA4\x90a\x0F\x9A32\x90a\x0F\x92\x87\x87\x86\x91a\x0F-V[\x92\x90\x91a\rTV[a\x0F\xA9W[a\x0E\xB7V[a\x0FcV[a\x0F\xC6a\x0F\xC1a\x0F\xBB\x86\x86\x85\x91a\x0F-V[\x90a\tvV[a\x12\xDDV[a\x0F\x9FV[PPPPV[a\x0F\xE2\x90a\x0F\xDDa\x14\xA5V[a\x0F\xF0V[V[a\x0F\xED\x90a\x03\xE6V[\x90V[\x80a\x10\x0Ba\x10\x05a\x10\0_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10eWa\x10#a\x10\x1C\x82a\x0BaV[`\x01a\x0B\x97V[a\x10M\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F\xE4V[\x90a\x10Va\x01\x12V[\x80a\x10`\x81a\x02\xAFV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10}`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x10\x8A\x90a\x0F\xD1V[V[a\x10\x9D\x90a\x10\x98a\x14\xA5V[a\x10\x9FV[V[\x80a\x10\xBAa\x10\xB4a\x10\xAF_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10\xCAWa\x10\xC8\x90a\x15\x16V[V[a\x10\xEDa\x10\xD6_a\n\xFBV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[a\x10\xFA\x90a\x10\x8CV[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11Ea\x11@a\x11J\x92a\x07sV[a\x03\xC7V[a\x11$V[\x90V[a\x11V\x90a\x03\xCAV[\x90V[a\x11b\x90a\x11MV[\x90V[a\x11o`da\x11YV[\x90V[a\x11{\x90a\x03\xE6V[\x90V[a\x11\x87\x81a\x07sV[\x03a\x11\x8EWV[_\x80\xFD[\x90PQ\x90a\x11\x9F\x82a\x11~V[V[\x90` \x82\x82\x03\x12a\x11\xBAWa\x11\xB7\x91_\x01a\x11\x92V[\x90V[a\x01\x1CV[` \x01\x90V[``\x1B\x90V[a\x11\xD4\x90a\x11\xC5V[\x90V[a\x11\xE0\x90a\x11\xCBV[\x90V[a\x11\xEFa\x11\xF4\x91a\x02\xF3V[a\x11\xD7V[\x90RV[`\xC0\x1B\x90V[a\x12\x07\x90a\x11\xF8V[\x90V[a\x12\x16a\x12\x1B\x91a\x11$V[a\x11\xFEV[\x90RV[\x90V[a\x12.a\x123\x91a\x01/V[a\x12\x1FV[\x90RV[\x92a\x12e`\x08a\x12m\x94a\x12]`\x14\x88a\x12U` \x9B\x9A\x86\x99a\x11\xE3V[\x01\x80\x92a\x12\nV[\x01\x80\x92a\x12\nV[\x01\x80\x92a\x12\"V[\x01\x90V[` \x81a\x12\x83a\x12\x8B\x93\x83\x96\x95a\x12\"V[\x01\x80\x92a\x12\"V[\x01\x90V[\x90a\x12\x9B_\x19\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xAE\x90a\x01/V[\x90V[a\x12\xBA\x90a\x08aV[\x90V[\x90a\x12\xD2a\x12\xCDa\x12\xD9\x92a\x12\xA5V[a\x12\xB1V[\x82Ta\x12\x8FV[\x90UV[a\x12\xE5a\x11 V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x14\x94Wa\x138` a\x13\"a\x13\x1Da\x11eV[a\x11rV[c\xA3\xB1\xB3\x1D\x90a\x130a\x01\x12V[\x93\x84\x92a\x0C\xA4V[\x82R\x81\x80a\x13H`\x04\x82\x01a\x02\xAFV[\x03\x91Z\xFA\x90\x81\x15a\x14\x8FWa\x14\x1C\x91a\x13h\x91_\x91a\x14aW[Pa\x111V[[_a\x13ra\x10\xFCV[\x91a\x13\xBB3a\x13\xACa\x13\x83Ba\x111V[\x88a\x13\x96a\x13\x90\x82a\x02\x0EV[\x91a\x11\xBFV[ \x90a\x13\xA0a\x01\x12V[\x95\x86\x94` \x86\x01a\x127V[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x13\xCDa\x13\xC7\x82a\x02\x0EV[\x91a\x11\xBFV[ a\x14\x02a\x13\xDC\x83\x85\x01a\x08}V[a\x13\xF3a\x13\xE7a\x01\x12V[\x93\x84\x92` \x84\x01a\x12qV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x14\x14a\x14\x0E\x82a\x02\x0EV[\x91a\x11\xBFV[ \x91\x01a\x12\xBDV[3a\x14\\a\x14J\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F\xE4V[\x92a\x14Sa\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xA2V[a\x14\x82\x91P` =\x81\x11a\x14\x88W[a\x14z\x81\x83a\tMV[\x81\x01\x90a\x11\xA1V[_a\x13bV[P=a\x14pV[a\rDV[a\x14\x1Ca\x14\xA0Ca\x111V[a\x13iV[a\x14\xADa\x0E\x82V[a\x14\xC6a\x14\xC0a\x14\xBBa\x15uV[a\x02\xF3V[\x91a\x02\xF3V[\x03a\x14\xCDWV[a\x14\xEFa\x14\xD8a\x15uV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[\x90V[\x90a\x15\x0Ba\x15\x06a\x15\x12\x92a\x0F\xE4V[a\x14\xF3V[\x82Ta\x0BmV[\x90UV[a\x15\x1F_a\x0EuV[a\x15)\x82_a\x14\xF6V[\x90a\x15]a\x15W\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\xE4V[\x91a\x0F\xE4V[\x91a\x15fa\x01\x12V[\x80a\x15p\x81a\x02\xAFV[\x03\x90\xA3V[a\x15}a\x0ERV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610827565b61001d5f3561011c565b806301ffc9a7146101175780631f43fc8b14610112578063248a9ca31461010d5780632738ef0914610108578063297f4c64146101035780632cd799bd146100fe5780632f2ff15d146100f957806336568abe146100f45780637232c133146100ef57806391d14854146100ea578063a217fddf146100e5578063c8fd71dd146100e0578063ccdc68f2146100db578063d547741f146100d6578063d9852abf146100d15763ec87621c0361000e576107f2565b610789565b6106bd565b610689565b610627565b6105f2565b610581565b61054c565b610518565b6104e4565b61045a565b61039c565b610367565b610301565b61028b565b6101a4565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61014581610130565b0361014c57565b5f80fd5b9050359061015d8261013c565b565b9060208282031261017857610175915f01610150565b90565b61012c565b151590565b61018b9061017d565b9052565b91906101a2905f60208501940190610182565b565b346101d4576101d06101bf6101ba36600461015f565b61082f565b6101c7610122565b9182918261018f565b0390f35b610128565b90565b6101e5816101d9565b036101ec57565b5f80fd5b905035906101fd826101dc565b565b90565b61020b816101ff565b0361021257565b5f80fd5b9050359061022382610202565b565b919060408382031261024d578061024161024a925f86016101f0565b93602001610216565b90565b61012c565b60018060a01b031690565b61026690610252565b90565b6102729061025d565b9052565b9190610289905f60208501940190610269565b565b346102bc576102b86102a76102a1366004610225565b90610879565b6102af610122565b91829182610276565b0390f35b610128565b906020828203126102da576102d7915f016101f0565b90565b61012c565b6102e8906101d9565b9052565b91906102ff905f602085019401906102df565b565b346103315761032d61031c6103173660046102c1565b6108fb565b610324610122565b918291826102ec565b0390f35b610128565b5f91031261034057565b61012c565b61034e906101ff565b9052565b9190610365905f60208501940190610345565b565b3461039757610377366004610336565b610393610382610920565b61038a610122565b91829182610352565b0390f35b610128565b346103cc576103ac366004610336565b6103c86103b7610958565b6103bf610122565b91829182610352565b0390f35b610128565b906020828203126103ea576103e7915f01610216565b90565b61012c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61043061043960209361043e93610427816103ef565b938480936103f3565b958691016103fc565b610407565b0190565b6104579160208201915f818403910152610411565b90565b3461048a576104866104756104703660046103d1565b610a0a565b61047d610122565b91829182610442565b0390f35b610128565b6104988161025d565b0361049f57565b5f80fd5b905035906104b08261048f565b565b91906040838203126104da57806104ce6104d7925f86016101f0565b936020016104a3565b90565b61012c565b5f0190565b34610513576104fd6104f73660046104b2565b90610aaf565b610505610122565b8061050f816104df565b0390f35b610128565b346105475761053161052b3660046104b2565b90610abb565b610539610122565b80610543816104df565b0390f35b610128565b3461057c576105786105676105623660046103d1565b610bbc565b61056f610122565b91829182610352565b0390f35b610128565b346105b2576105ae61059d6105973660046104b2565b90610c4f565b6105a5610122565b9182918261018f565b0390f35b610128565b90565b5f1b90565b6105d36105ce6105d8926105b7565b6105ba565b6101d9565b90565b6105e45f6105bf565b90565b6105ef6105db565b90565b3461062257610602366004610336565b61061e61060d6105e7565b610615610122565b918291826102ec565b0390f35b610128565b3461065757610637366004610336565b610653610642610c78565b61064a610122565b91829182610352565b0390f35b610128565b91906040838203126106845780610678610681925f8601610216565b93602001610216565b90565b61012c565b346106b8576106a261069c36600461065c565b90610d8a565b6106aa610122565b806106b4816104df565b0390f35b610128565b346106ec576106d66106d03660046104b2565b90610dc0565b6106de610122565b806106e8816104df565b0390f35b610128565b6106fa9061025d565b90565b610706816106f1565b0361070d57565b5f80fd5b9050359061071e826106fd565b565b60808183031261076157610736825f8301610216565b9261075e61074784602085016104a3565b936107558160408601610711565b936060016101f0565b90565b61012c565b91602061078792949361078060408201965f830190610269565b0190610345565b565b346107be576107a561079c366004610720565b92919091610f37565b906107ba6107b1610122565b92839283610766565b0390f35b610128565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6107ef6107c3565b90565b3461082257610802366004610336565b61081e61080d6107e7565b610815610122565b918291826102ec565b0390f35b610128565b5f80fd5b5f90565b61083761082b565b508061085261084c637965db0b60e01b610130565b91610130565b1490811561085f575b5090565b61086991506111f3565b5f61085b565b5f90565b60200190565b906108906108a99261088961086f565b5091610a0a565b6108a261089c826103ef565b91610873565b2090611225565b90565b5f90565b6108b9906101d9565b90565b906108c6906108b0565b5f5260205260405f2090565b5f1c90565b90565b6108e66108eb916108d2565b6108d7565b90565b6108f890546108da565b90565b60016109136109199261090c6108ac565b505f6108bc565b016108ee565b90565b5f90565b61092861091c565b506109316112a0565b90565b90565b610943610948916108d2565b610934565b90565b6109559054610937565b90565b61096061091c565b5061096b600161094b565b90565b606090565b634e487b7160e01b5f52604160045260245ffd5b9061099190610407565b810190811067ffffffffffffffff8211176109ab57604052565b610973565b906109c36109bc610122565b9283610987565b565b905090565b6109ef6109e6926020926109dd816103ef565b948580936109c5565b938491016103fc565b0190565b610a0190610a0793926109ca565b906109ca565b90565b610a82610a4d91610a1961096e565b50610a5c611df391610a2d602084016109b0565b928084526115e96020850139610a41610122565b94859160208301610352565b60208201810382520384610987565b610a73610a67610122565b938492602084016109f3565b60208201810382520382610987565b90565b90610aa091610a9b610a96826108fb565b6112dc565b610aa2565b565b90610aac916112f0565b50565b90610ab991610a85565b565b9080610ad6610ad0610acb61139b565b61025d565b9161025d565b03610ae757610ae4916113a8565b50565b5f63334bd91960e11b815280610aff600482016104df565b0390fd5b90565b610b1a610b15610b1f926101ff565b610b03565b6101ff565b90565b90610b2c90610b06565b5f5260205260405f2090565b60ff1690565b610b4a610b4f916108d2565b610b38565b90565b610b5c9054610b3e565b90565b60ff1690565b610b79610b74610b7e926105b7565b610b03565b610b5f565b90565b90565b610b98610b93610b9d92610b81565b610b03565b610b5f565b90565b610bb4610baf610bb992610b5f565b610b03565b6101ff565b90565b610bd3610bd891610bcb61091c565b506004610b22565b610b52565b5f14610bf457610bf1610beb6001610b84565b5b610ba0565b90565b610bf1610c005f610b65565b610bec565b610c19610c14610c1e92610252565b610b03565b610252565b90565b610c2a90610c05565b90565b610c3690610c21565b90565b90610c4390610c2d565b5f5260205260405f2090565b610c75915f610c6a610c7093610c6361082b565b50826108bc565b01610c39565b610b52565b90565b610c8061091c565b50610c8b600261094b565b90565b90610ca891610ca3610c9e6107c3565b6112dc565b610d21565b565b90610cb65f19916105ba565b9181191691161790565b90565b90610cd8610cd3610cdf92610b06565b610cc0565b8254610caa565b9055565b610d18610d1f94610d0e606094989795610d04608086019a5f870190610345565b6020850190610345565b6040830190610345565b0190610345565b565b610d2b600161094b565b610d85610d38600261094b565b91610d44846001610cc3565b610d4f856002610cc3565b9192937f8891765686e31368ff3fdb281f56507d3e8a9cf38dee9d4dc731844eb8aa014e94610d7c610122565b94859485610ce3565b0390a1565b90610d9491610c8e565b565b90610db191610dac610da7826108fb565b6112dc565b610db3565b565b90610dbd916113a8565b50565b90610dca91610d96565b565b610de0610ddb610de5926105b7565b610b03565b610252565b90565b610df190610dcc565b90565b610dfd90610c21565b90565b610e14610e0f610e19926105b7565b610b03565b6101ff565b90565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b610e50610e56916101ff565b916101ff565b908115610e61570490565b610e1c565b90610e7260ff916105ba565b9181191691161790565b610e859061017d565b90565b90565b90610ea0610e9b610ea792610e7c565b610e88565b8254610e66565b9055565b610eb4906101ff565b5f198114610ec25760010190565b610e30565b610ed090610c05565b90565b610edc90610ec7565b90565b610ee890610c21565b90565b5f80fd5b60e01b90565b5f910312610eff57565b61012c565b916020610f25929493610f1e60408201965f830190610269565b0190610269565b565b610f2f610122565b3d5f823e3d90fd5b939293919091610f4561086f565b50610f4e61091c565b5082610f6a610f64610f5f5f610de8565b61025d565b9161025d565b1480156111c9575b6111ad5780610f89610f835f610e00565b916101ff565b145f146111a757610f986112a0565b5b9481610fad610fa75f610e00565b916101ff565b141580611171575b61115557610fcd610fc860048890610b22565b610b52565b6111395761101d91610feb6001610fe660048a90610b22565b610e8b565b610ffd610ff75f610e00565b916101ff565b14611118575b61100c86610a0a565b6110185f929192610e00565b61146c565b9161102f61102a84610ed3565b610edf565b9063485cc9559061103f84610df4565b92803b15611113576110645f809461106f611058610122565b97889687958694610eef565b845260048401610f04565b03925af1801561110e576110e2575b50839061108b8391610df4565b906110c86110c26110bc7f49b21f1e4190db8b0a933c951ed013de222c847c15461754682daa2eab1fdbd295610b06565b92610c2d565b92610c2d565b926110d1610122565b806110db816104df565b0390a49190565b611101905f3d8111611107575b6110f98183610987565b810190610ef5565b5f61107e565b503d6110ef565b610f27565b610eeb565b61113461112d611128600361094b565b610eab565b6003610cc3565b611003565b5f6324591d8960e01b815280611151600482016104df565b0390fd5b5f636a22539160e01b81528061116d600482016104df565b0390fd5b5061118686611180600261094b565b90610e44565b6111a161119b611196600161094b565b6101ff565b916101ff565b14610fb5565b80610f99565b5f63d92e233d60e01b8152806111c5600482016104df565b0390fd5b506111d382610df4565b6111ed6111e76111e25f610de8565b61025d565b9161025d565b14610f72565b6111fb61082b565b5061121561120f6301ffc9a760e01b610130565b91610130565b1490565b61122290610c21565b90565b906112439161123261086f565b509061123d30611219565b91611559565b90565b61125561125b919392936101ff565b926101ff565b916112678382026101ff565b92818404149015171561127657565b610e30565b61128a611290919392936101ff565b926101ff565b820180921161129b57565b610e30565b6112a861091c565b506112d96112c96112b9600161094b565b6112c3600261094b565b90611246565b6112d3600361094b565b9061127b565b90565b6112ee906112e861139b565b906115ad565b565b6112f861082b565b5061130d611307828490610c4f565b1561017d565b5f1461139557611334600161132f5f6113278186906108bc565b018590610c39565b610e8b565b9061133d61139b565b9061137a61137461136e7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956108b0565b92610c2d565b92610c2d565b92611383610122565b8061138d816104df565b0390a4600190565b50505f90565b6113a361086f565b503390565b6113b061082b565b506113bc818390610c4f565b5f14611443576113e25f6113dd5f6113d58186906108bc565b018590610c39565b610e8b565b906113eb61139b565b9061142861142261141c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956108b0565b92610c2d565b92610c2d565b92611431610122565b8061143b816104df565b0390a4600190565b50505f90565b91602061146a92949361146360408201965f830190610345565b0190610345565b565b91909161147761086f565b5061148130611219565b3161149461148e836101ff565b916101ff565b10611531576114a2826103ef565b6114b46114ae5f610e00565b916101ff565b146115155760208251920190f5903d151982151661150a57816114e76114e16114dc5f610de8565b61025d565b9161025d565b146114ee57565b5f63b06ebf3d60e01b815280611506600482016104df565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b81528061152d600482016104df565b0390fd5b61153a30611219565b316115555f92839263cf47918160e01b845260048401611449565b0390fd5b91600b9261156561086f565b50604051926040840152602083015281520160ff8153605560018060a01b0391201690565b9160206115ab9294936115a460408201965f830190610269565b01906102df565b565b906115c26115bc838390610c4f565b1561017d565b6115ca575050565b6115e45f92839263e2517d3f60e01b84526004840161158a565b0390fdfe60c060405234610048576100196100146100f9565b6101c7565b61002161004d565b6115826106b282396080518181816107cf01526112e8015260a05181610751015261158290f35b610053565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007f90610057565b810190811060018060401b0382111761009757604052565b610061565b906100af6100a861004d565b9283610075565b565b5f80fd5b90565b6100c1816100b5565b036100c857565b5f80fd5b905051906100d9826100b8565b565b906020828203126100f4576100f1915f016100cc565b90565b6100b1565b610117611df38038038061010c8161009c565b9283398101906100db565b90565b90565b90565b61013461012f6101399261011a565b61011d565b6100b5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610179601860209261013c565b61018281610145565b0190565b61019b9060208101905f81830391015261016c565b90565b156101a557565b6101ad61004d565b62461bcd60e51b8152806101c360048201610186565b0390fd5b6101cf61032a565b6101ec816101e56101df5f610120565b916100b5565b141561019e565b60a052565b60018060a01b031690565b61021061020b610215926101f1565b61011d565b6101f1565b90565b610221906101fc565b90565b61022d90610218565b90565b61023a6064610224565b90565b610246906101fc565b90565b6102529061023d565b90565b151590565b6102649051610255565b90565b60e01b90565b5f0190565b61027a61004d565b3d5f823e3d90fd5b60207f6c65640000000000000000000000000000000000000000000000000000000000917f41726253797320707265636f6d70696c652076616c69646174696f6e206661695f8201520152565b6102dc602360409261013c565b6102e581610282565b0190565b6102fe9060208101905f8183039101526102cf565b90565b1561030857565b61031061004d565b62461bcd60e51b815280610326600482016102e9565b0390fd5b6103326104d2565b61034261033d610230565b610249565b3b61035561034f5f610120565b916100b5565b1160805261036c610366608061025a565b15610255565b801561037e575b61037c90610301565b565b506103aa602061039461038f610230565b610249565b63a3b1b31d906103a261004d565b938492610267565b825281806103ba6004820161026d565b03915afa80156104185761037c915f916103ea575b506103e26103dc5f610120565b916100b5565b119050610373565b61040b915060203d8111610411575b6104038183610075565b8101906100db565b5f6103cf565b503d6103f9565b610272565b60a01b90565b9061043260ff60a01b9161041d565b9181191691161790565b61044590610255565b90565b90565b9061046061045b6104679261043c565b610448565b8254610423565b9055565b610474906101fc565b90565b6104809061046b565b90565b5f1b90565b9061049960018060a01b0391610483565b9181191691161790565b6104ac9061046b565b90565b90565b906104c76104c26104ce926104a3565b6104af565b8254610488565b9055565b6104db3361053f565b6104e65f600161044b565b6104ee61004d565b6101bf810181811060018060401b0382111761053a5761051682916101bf611c34843961026d565b03905ff080156105355761052c61053391610477565b60016104b2565b565b610272565b610061565b610548906105a0565b565b61055e6105596105639261011a565b61011d565b6101f1565b90565b61056f9061054a565b90565b61057b906101f1565b90565b61058790610572565b9052565b919061059e905f6020850194019061057e565b565b806105bb6105b56105b05f610566565b610572565b91610572565b146105cb576105c990610652565b565b6105ee6105d75f610566565b5f918291631e4fbdf760e01b83526004830161058b565b0390fd5b5f1c90565b60018060a01b031690565b61060e610613916105f2565b6105f7565b90565b6106209054610602565b90565b61062c9061023d565b90565b90565b9061064761064261064e92610623565b61062f565b8254610488565b9055565b61065b5f610616565b610665825f610632565b906106996106937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610623565b91610623565b916106a261004d565b806106ac8161026d565b0390a356fe60806040526004361015610013575b610859565b61001d5f3561010c565b80630338115414610107578063366cbab71461010257806346e2cc09146100fd578063485cc955146100f85780635b3cd6e2146100f357806363d96437146100ee578063715018a6146100e95780637a3979dc146100e4578063804e5123146100df5780638da5cb5b146100da578063cdafb978146100d5578063d4f0eb4d146100d0578063d8781342146100cb578063ea161ce6146100c65763f2fde38b0361000e57610826565b6107f1565b610798565b61071c565b6106ca565b610620565b6105ca565b610591565b6104e5565b6104b0565b610420565b61034f565b6102b4565b610279565b610154565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012a57565b61011c565b90565b61013b9061012f565b9052565b9190610152905f60208501940190610132565b565b3461018457610164366004610120565b61018061016f61088a565b610177610112565b9182918261013f565b0390f35b610118565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b90602082820312610209575f82013567ffffffffffffffff8111610204576102009201610199565b9091565b610189565b61011c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61024f61025860209361025d936102468161020e565b93848093610212565b9586910161021b565b610226565b0190565b6102769160208201915f818403910152610230565b90565b346102aa576102a661029561028f3660046101d8565b90610976565b61029d610112565b91829182610261565b0390f35b610118565b5f0190565b346102e3576102cd6102c73660046101d8565b90610a92565b6102d5610112565b806102df816102af565b0390f35b610118565b60018060a01b031690565b6102fc906102e8565b90565b610308816102f3565b0361030f57565b5f80fd5b90503590610320826102ff565b565b919060408382031261034a578061033e610347925f8601610313565b93602001610313565b90565b61011c565b3461037e57610368610362366004610322565b90610c44565b610370610112565b8061037a816102af565b0390f35b610118565b1c90565b60018060a01b031690565b6103a29060086103a79302610383565b610387565b90565b906103b59154610392565b90565b6103c460015f906103aa565b90565b90565b6103de6103d96103e3926102e8565b6103c7565b6102e8565b90565b6103ef906103ca565b90565b6103fb906103e6565b90565b610407906103f2565b9052565b919061041e905f602085019401906103fe565b565b3461045057610430366004610120565b61044c61043b6103b8565b610443610112565b9182918261040b565b0390f35b610118565b90565b5f1b90565b61047161046c61047692610455565b610458565b61012f565b90565b6104a27f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9061045d565b90565b6104ad610479565b90565b346104e0576104c0366004610120565b6104dc6104cb6104a5565b6104d3610112565b9182918261013f565b0390f35b610118565b34610513576104f5366004610120565b6104fd610c75565b610505610112565b8061050f816102af565b0390f35b610118565b916060838303126105655761052f825f8501610313565b9261053d8360208301610313565b92604082013567ffffffffffffffff81116105605761055c9201610199565b9091565b610189565b61011c565b151590565b6105789061056a565b9052565b919061058f905f6020850194019061056f565b565b346105c5576105c16105b06105a7366004610518565b92919091610d54565b6105b8610112565b9182918261057c565b0390f35b610118565b346105f9576105e36105dd3660046101d8565b90610e46565b6105eb610112565b806105f5816102af565b0390f35b610118565b610607906102f3565b9052565b919061061e905f602085019401906105fe565b565b3461065057610630366004610120565b61064c61063b610e82565b610643610112565b9182918261060b565b0390f35b610118565b909182601f8301121561068f5781359167ffffffffffffffff831161068a57602001926020830284011161068557565b610195565b610191565b61018d565b906020828203126106c5575f82013567ffffffffffffffff81116106c0576106bc9201610655565b9091565b610189565b61011c565b346106f9576106e36106dd366004610694565b90610f4d565b6106eb610112565b806106f5816102af565b0390f35b610118565b9060208282031261071757610714915f01610313565b90565b61011c565b3461074a5761073461072f3660046106fe565b611081565b61073c610112565b80610746816102af565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61077f90610773565b9052565b9190610796905f60208501940190610776565b565b346107c8576107a8366004610120565b6107c46107b361074f565b6107bb610112565b91829182610783565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461082157610801366004610120565b61081d61080c6107cd565b610814610112565b9182918261057c565b0390f35b610118565b346108545761083e6108393660046106fe565b6110f1565b610846610112565b80610850816102af565b0390f35b610118565b5f80fd5b5f90565b5f1c90565b90565b61087561087a91610861565b610866565b90565b6108879054610869565b90565b61089261085d565b506108a55f61089f6110fc565b0161087d565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b6108d36108ce6108d8926108ad565b6108b9565b6108b0565b90565b90565b6108ea6108ef916108b0565b6108db565b9052565b905090565b90825f939282370152565b9091826109138161091a936108f3565b80936108f8565b0190565b8061092f60019261093696946108de565b0191610903565b90565b634e487b7160e01b5f52604160045260245ffd5b9061095790610226565b810190811067ffffffffffffffff82111761097157604052565b610939565b6109b4906109826108a8565b506109a561098f5f6108bf565b9193610999610112565b9485936020850161091e565b6020820181038252038261094d565b90565b906109d36109cd33329085859192909192610d54565b1561056a565b6109e2576109e091610a7e565b565b5f631b8e828b60e31b8152806109fa600482016102af565b0390fd5b5f80fd5b90610a15610a0e610112565b928361094d565b565b67ffffffffffffffff8111610a3557610a31602091610226565b0190565b610939565b90929192610a4f610a4a82610a17565b610a02565b93818552602085019082840111610a6b57610a69926108f8565b565b6109fe565b610a7b913691610a3a565b90565b610a9091610a8b91610a70565b6112dd565b565b90610a9c916109b7565b565b90610ab091610aab6114a5565b610bb7565b565b60a01c90565b60ff1690565b610aca610acf91610ab2565b610ab8565b90565b610adc9054610abe565b90565b610af3610aee610af8926108ad565b6103c7565b6102e8565b90565b610b0490610adf565b90565b60a01b90565b90610b1c60ff60a01b91610b07565b9181191691161790565b610b2f9061056a565b90565b90565b90610b4a610b45610b5192610b26565b610b32565b8254610b0d565b9055565b610b5e906103ca565b90565b610b6a90610b55565b90565b90610b7e60018060a01b0391610458565b9181191691161790565b610b9190610b55565b90565b90565b90610bac610ba7610bb392610b88565b610b94565b8254610b6d565b9055565b610bc16001610ad2565b610c295781610be0610bda610bd55f610afb565b6102f3565b916102f3565b14610c0d57610c06610bff610c0b93610bfa600180610b35565b610b61565b6001610b97565b6110f1565b565b5f632e7f3c7f60e11b815280610c25600482016102af565b0390fd5b5f62dc149f60e41b815280610c40600482016102af565b0390fd5b90610c4e91610a9e565b565b610c586114a5565b610c60610c62565b565b610c73610c6e5f610afb565b611516565b565b610c7d610c50565b565b5f90565b610c8f610c9491610861565b610387565b90565b610ca19054610c83565b90565b60e01b90565b610cb38161056a565b03610cba57565b5f80fd5b90505190610ccb82610caa565b565b90602082820312610ce657610ce3915f01610cbe565b90565b61011c565b9190610d0581610cfe81610d0a95610212565b80956108f8565b610226565b0190565b610d34610d419593949294610d2a60608401965f8501906105fe565b60208301906105fe565b6040818503910152610ceb565b90565b610d4c610112565b3d5f823e3d90fd5b92610d9760209394610d64610c7f565b50610da2610d7a610d756001610c97565b6103f2565b93637a3979dc929597610d8b610112565b98899788968796610ca4565b865260048601610d0e565b03915afa908115610de6575f91610db8575b5090565b610dd9915060203d8111610ddf575b610dd1818361094d565b810190610ccd565b5f610db4565b503d610dc7565b610d44565b90610e07610e0133329085859192909192610d54565b1561056a565b610e1657610e1491610e32565b565b5f631b8e828b60e31b815280610e2e600482016102af565b0390fd5b610e4491610e3f91610976565b6112dd565b565b90610e5091610deb565b565b5f90565b60018060a01b031690565b610e6d610e7291610861565b610e56565b90565b610e7f9054610e61565b90565b610e8a610e52565b50610e945f610e75565b90565b5090565b610eaf610eaa610eb4926108ad565b6103c7565b610773565b90565b6001610ec39101610773565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610f28570180359067ffffffffffffffff8211610f2357602001916001820236038313610f1e57565b610ee2565b610ede565b610eda565b90821015610f48576020610f449202810190610ee6565b9091565b610ec6565b610f58818390610e97565b91610f625f610e9b565b5b80610f76610f7086610773565b91610773565b1015610fcb57610fa490610f9a333290610f9287878691610f2d565b929091610d54565b610fa9575b610eb7565b610f63565b610fc6610fc1610fbb86868591610f2d565b90610976565b6112dd565b610f9f565b50505050565b610fe290610fdd6114a5565b610ff0565b565b610fed906103e6565b90565b8061100b6110056110005f610afb565b6102f3565b916102f3565b146110655761102361101c82610b61565b6001610b97565b61104d7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610fe4565b90611056610112565b80611060816102af565b0390a2565b5f632e7f3c7f60e11b81528061107d600482016102af565b0390fd5b61108a90610fd1565b565b61109d906110986114a5565b61109f565b565b806110ba6110b46110af5f610afb565b6102f3565b916102f3565b146110ca576110c890611516565b565b6110ed6110d65f610afb565b5f918291631e4fbdf760e01b83526004830161060b565b0390fd5b6110fa9061108c565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61114561114061114a92610773565b6103c7565b611124565b90565b611156906103ca565b90565b6111629061114d565b90565b61116f6064611159565b90565b61117b906103e6565b90565b61118781610773565b0361118e57565b5f80fd5b9050519061119f8261117e565b565b906020828203126111ba576111b7915f01611192565b90565b61011c565b60200190565b60601b90565b6111d4906111c5565b90565b6111e0906111cb565b90565b6111ef6111f4916102f3565b6111d7565b9052565b60c01b90565b611207906111f8565b90565b61121661121b91611124565b6111fe565b9052565b90565b61122e6112339161012f565b61121f565b9052565b92611265600861126d9461125d60148861125560209b9a86996111e3565b01809261120a565b01809261120a565b018092611222565b0190565b60208161128361128b93839695611222565b018092611222565b0190565b9061129b5f1991610458565b9181191691161790565b6112ae9061012f565b90565b6112ba90610861565b90565b906112d26112cd6112d9926112a5565b6112b1565b825461128f565b9055565b6112e5611120565b507f00000000000000000000000000000000000000000000000000000000000000005f1461149457611338602061132261131d611165565b611172565b63a3b1b31d90611330610112565b938492610ca4565b82528180611348600482016102af565b03915afa90811561148f5761141c91611368915f91611461575b50611131565b5b5f6113726110fc565b916113bb336113ac61138342611131565b886113966113908261020e565b916111bf565b20906113a0610112565b95869460208601611237565b6020820181038252038261094d565b6113cd6113c78261020e565b916111bf565b206114026113dc83850161087d565b6113f36113e7610112565b93849260208401611271565b6020820181038252038261094d565b61141461140e8261020e565b916111bf565b2091016112bd565b3361145c61144a7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610fe4565b92611453610112565b91829182610261565b0390a2565b611482915060203d8111611488575b61147a818361094d565b8101906111a1565b5f611362565b503d611470565b610d44565b61141c6114a043611131565b611369565b6114ad610e82565b6114c66114c06114bb611575565b6102f3565b916102f3565b036114cd57565b6114ef6114d8611575565b5f91829163118cdaa760e01b83526004830161060b565b0390fd5b90565b9061150b61150661151292610fe4565b6114f3565b8254610b6d565b9055565b61151f5f610e75565b611529825f6114f6565b9061155d6115577f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610fe4565b91610fe4565b91611566610112565b80611570816102af565b0390a3565b61157d610e52565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08'V[a\0\x1D_5a\x01\x1CV[\x80c\x01\xFF\xC9\xA7\x14a\x01\x17W\x80c\x1FC\xFC\x8B\x14a\x01\x12W\x80c$\x8A\x9C\xA3\x14a\x01\rW\x80c'8\xEF\t\x14a\x01\x08W\x80c)\x7FLd\x14a\x01\x03W\x80c,\xD7\x99\xBD\x14a\0\xFEW\x80c//\xF1]\x14a\0\xF9W\x80c6V\x8A\xBE\x14a\0\xF4W\x80cr2\xC13\x14a\0\xEFW\x80c\x91\xD1HT\x14a\0\xEAW\x80c\xA2\x17\xFD\xDF\x14a\0\xE5W\x80c\xC8\xFDq\xDD\x14a\0\xE0W\x80c\xCC\xDCh\xF2\x14a\0\xDBW\x80c\xD5Gt\x1F\x14a\0\xD6W\x80c\xD9\x85*\xBF\x14a\0\xD1Wc\xEC\x87b\x1C\x03a\0\x0EWa\x07\xF2V[a\x07\x89V[a\x06\xBDV[a\x06\x89V[a\x06'V[a\x05\xF2V[a\x05\x81V[a\x05LV[a\x05\x18V[a\x04\xE4V[a\x04ZV[a\x03\x9CV[a\x03gV[a\x03\x01V[a\x02\x8BV[a\x01\xA4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01E\x81a\x010V[\x03a\x01LWV[_\x80\xFD[\x90P5\x90a\x01]\x82a\x01<V[V[\x90` \x82\x82\x03\x12a\x01xWa\x01u\x91_\x01a\x01PV[\x90V[a\x01,V[\x15\x15\x90V[a\x01\x8B\x90a\x01}V[\x90RV[\x91\x90a\x01\xA2\x90_` \x85\x01\x94\x01\x90a\x01\x82V[V[4a\x01\xD4Wa\x01\xD0a\x01\xBFa\x01\xBA6`\x04a\x01_V[a\x08/V[a\x01\xC7a\x01\"V[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01(V[\x90V[a\x01\xE5\x81a\x01\xD9V[\x03a\x01\xECWV[_\x80\xFD[\x90P5\x90a\x01\xFD\x82a\x01\xDCV[V[\x90V[a\x02\x0B\x81a\x01\xFFV[\x03a\x02\x12WV[_\x80\xFD[\x90P5\x90a\x02#\x82a\x02\x02V[V[\x91\x90`@\x83\x82\x03\x12a\x02MW\x80a\x02Aa\x02J\x92_\x86\x01a\x01\xF0V[\x93` \x01a\x02\x16V[\x90V[a\x01,V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02f\x90a\x02RV[\x90V[a\x02r\x90a\x02]V[\x90RV[\x91\x90a\x02\x89\x90_` \x85\x01\x94\x01\x90a\x02iV[V[4a\x02\xBCWa\x02\xB8a\x02\xA7a\x02\xA16`\x04a\x02%V[\x90a\x08yV[a\x02\xAFa\x01\"V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x02\xDAWa\x02\xD7\x91_\x01a\x01\xF0V[\x90V[a\x01,V[a\x02\xE8\x90a\x01\xD9V[\x90RV[\x91\x90a\x02\xFF\x90_` \x85\x01\x94\x01\x90a\x02\xDFV[V[4a\x031Wa\x03-a\x03\x1Ca\x03\x176`\x04a\x02\xC1V[a\x08\xFBV[a\x03$a\x01\"V[\x91\x82\x91\x82a\x02\xECV[\x03\x90\xF3[a\x01(V[_\x91\x03\x12a\x03@WV[a\x01,V[a\x03N\x90a\x01\xFFV[\x90RV[\x91\x90a\x03e\x90_` \x85\x01\x94\x01\x90a\x03EV[V[4a\x03\x97Wa\x03w6`\x04a\x036V[a\x03\x93a\x03\x82a\t V[a\x03\x8Aa\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[4a\x03\xCCWa\x03\xAC6`\x04a\x036V[a\x03\xC8a\x03\xB7a\tXV[a\x03\xBFa\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x03\xEAWa\x03\xE7\x91_\x01a\x02\x16V[\x90V[a\x01,V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x040a\x049` \x93a\x04>\x93a\x04'\x81a\x03\xEFV[\x93\x84\x80\x93a\x03\xF3V[\x95\x86\x91\x01a\x03\xFCV[a\x04\x07V[\x01\x90V[a\x04W\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04\x11V[\x90V[4a\x04\x8AWa\x04\x86a\x04ua\x04p6`\x04a\x03\xD1V[a\n\nV[a\x04}a\x01\"V[\x91\x82\x91\x82a\x04BV[\x03\x90\xF3[a\x01(V[a\x04\x98\x81a\x02]V[\x03a\x04\x9FWV[_\x80\xFD[\x90P5\x90a\x04\xB0\x82a\x04\x8FV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xDAW\x80a\x04\xCEa\x04\xD7\x92_\x86\x01a\x01\xF0V[\x93` \x01a\x04\xA3V[\x90V[a\x01,V[_\x01\x90V[4a\x05\x13Wa\x04\xFDa\x04\xF76`\x04a\x04\xB2V[\x90a\n\xAFV[a\x05\x05a\x01\"V[\x80a\x05\x0F\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[4a\x05GWa\x051a\x05+6`\x04a\x04\xB2V[\x90a\n\xBBV[a\x059a\x01\"V[\x80a\x05C\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[4a\x05|Wa\x05xa\x05ga\x05b6`\x04a\x03\xD1V[a\x0B\xBCV[a\x05oa\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[4a\x05\xB2Wa\x05\xAEa\x05\x9Da\x05\x976`\x04a\x04\xB2V[\x90a\x0COV[a\x05\xA5a\x01\"V[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01(V[\x90V[_\x1B\x90V[a\x05\xD3a\x05\xCEa\x05\xD8\x92a\x05\xB7V[a\x05\xBAV[a\x01\xD9V[\x90V[a\x05\xE4_a\x05\xBFV[\x90V[a\x05\xEFa\x05\xDBV[\x90V[4a\x06\"Wa\x06\x026`\x04a\x036V[a\x06\x1Ea\x06\ra\x05\xE7V[a\x06\x15a\x01\"V[\x91\x82\x91\x82a\x02\xECV[\x03\x90\xF3[a\x01(V[4a\x06WWa\x0676`\x04a\x036V[a\x06Sa\x06Ba\x0CxV[a\x06Ja\x01\"V[\x91\x82\x91\x82a\x03RV[\x03\x90\xF3[a\x01(V[\x91\x90`@\x83\x82\x03\x12a\x06\x84W\x80a\x06xa\x06\x81\x92_\x86\x01a\x02\x16V[\x93` \x01a\x02\x16V[\x90V[a\x01,V[4a\x06\xB8Wa\x06\xA2a\x06\x9C6`\x04a\x06\\V[\x90a\r\x8AV[a\x06\xAAa\x01\"V[\x80a\x06\xB4\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[4a\x06\xECWa\x06\xD6a\x06\xD06`\x04a\x04\xB2V[\x90a\r\xC0V[a\x06\xDEa\x01\"V[\x80a\x06\xE8\x81a\x04\xDFV[\x03\x90\xF3[a\x01(V[a\x06\xFA\x90a\x02]V[\x90V[a\x07\x06\x81a\x06\xF1V[\x03a\x07\rWV[_\x80\xFD[\x90P5\x90a\x07\x1E\x82a\x06\xFDV[V[`\x80\x81\x83\x03\x12a\x07aWa\x076\x82_\x83\x01a\x02\x16V[\x92a\x07^a\x07G\x84` \x85\x01a\x04\xA3V[\x93a\x07U\x81`@\x86\x01a\x07\x11V[\x93``\x01a\x01\xF0V[\x90V[a\x01,V[\x91` a\x07\x87\x92\x94\x93a\x07\x80`@\x82\x01\x96_\x83\x01\x90a\x02iV[\x01\x90a\x03EV[V[4a\x07\xBEWa\x07\xA5a\x07\x9C6`\x04a\x07 V[\x92\x91\x90\x91a\x0F7V[\x90a\x07\xBAa\x07\xB1a\x01\"V[\x92\x83\x92\x83a\x07fV[\x03\x90\xF3[a\x01(V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x07\xEFa\x07\xC3V[\x90V[4a\x08\"Wa\x08\x026`\x04a\x036V[a\x08\x1Ea\x08\ra\x07\xE7V[a\x08\x15a\x01\"V[\x91\x82\x91\x82a\x02\xECV[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x90V[a\x087a\x08+V[P\x80a\x08Ra\x08Lcye\xDB\x0B`\xE0\x1Ba\x010V[\x91a\x010V[\x14\x90\x81\x15a\x08_W[P\x90V[a\x08i\x91Pa\x11\xF3V[_a\x08[V[_\x90V[` \x01\x90V[\x90a\x08\x90a\x08\xA9\x92a\x08\x89a\x08oV[P\x91a\n\nV[a\x08\xA2a\x08\x9C\x82a\x03\xEFV[\x91a\x08sV[ \x90a\x12%V[\x90V[_\x90V[a\x08\xB9\x90a\x01\xD9V[\x90V[\x90a\x08\xC6\x90a\x08\xB0V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x08\xE6a\x08\xEB\x91a\x08\xD2V[a\x08\xD7V[\x90V[a\x08\xF8\x90Ta\x08\xDAV[\x90V[`\x01a\t\x13a\t\x19\x92a\t\x0Ca\x08\xACV[P_a\x08\xBCV[\x01a\x08\xEEV[\x90V[_\x90V[a\t(a\t\x1CV[Pa\t1a\x12\xA0V[\x90V[\x90V[a\tCa\tH\x91a\x08\xD2V[a\t4V[\x90V[a\tU\x90Ta\t7V[\x90V[a\t`a\t\x1CV[Pa\tk`\x01a\tKV[\x90V[``\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\t\x91\x90a\x04\x07V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xABW`@RV[a\tsV[\x90a\t\xC3a\t\xBCa\x01\"V[\x92\x83a\t\x87V[V[\x90P\x90V[a\t\xEFa\t\xE6\x92` \x92a\t\xDD\x81a\x03\xEFV[\x94\x85\x80\x93a\t\xC5V[\x93\x84\x91\x01a\x03\xFCV[\x01\x90V[a\n\x01\x90a\n\x07\x93\x92a\t\xCAV[\x90a\t\xCAV[\x90V[a\n\x82a\nM\x91a\n\x19a\tnV[Pa\n\\a\x1D\xF3\x91a\n-` \x84\x01a\t\xB0V[\x92\x80\x84Ra\x15\xE9` \x85\x019a\nAa\x01\"V[\x94\x85\x91` \x83\x01a\x03RV[` \x82\x01\x81\x03\x82R\x03\x84a\t\x87V[a\nsa\nga\x01\"V[\x93\x84\x92` \x84\x01a\t\xF3V[` \x82\x01\x81\x03\x82R\x03\x82a\t\x87V[\x90V[\x90a\n\xA0\x91a\n\x9Ba\n\x96\x82a\x08\xFBV[a\x12\xDCV[a\n\xA2V[V[\x90a\n\xAC\x91a\x12\xF0V[PV[\x90a\n\xB9\x91a\n\x85V[V[\x90\x80a\n\xD6a\n\xD0a\n\xCBa\x13\x9BV[a\x02]V[\x91a\x02]V[\x03a\n\xE7Wa\n\xE4\x91a\x13\xA8V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\n\xFF`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[\x90V[a\x0B\x1Aa\x0B\x15a\x0B\x1F\x92a\x01\xFFV[a\x0B\x03V[a\x01\xFFV[\x90V[\x90a\x0B,\x90a\x0B\x06V[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x0BJa\x0BO\x91a\x08\xD2V[a\x0B8V[\x90V[a\x0B\\\x90Ta\x0B>V[\x90V[`\xFF\x16\x90V[a\x0Bya\x0Bta\x0B~\x92a\x05\xB7V[a\x0B\x03V[a\x0B_V[\x90V[\x90V[a\x0B\x98a\x0B\x93a\x0B\x9D\x92a\x0B\x81V[a\x0B\x03V[a\x0B_V[\x90V[a\x0B\xB4a\x0B\xAFa\x0B\xB9\x92a\x0B_V[a\x0B\x03V[a\x01\xFFV[\x90V[a\x0B\xD3a\x0B\xD8\x91a\x0B\xCBa\t\x1CV[P`\x04a\x0B\"V[a\x0BRV[_\x14a\x0B\xF4Wa\x0B\xF1a\x0B\xEB`\x01a\x0B\x84V[[a\x0B\xA0V[\x90V[a\x0B\xF1a\x0C\0_a\x0BeV[a\x0B\xECV[a\x0C\x19a\x0C\x14a\x0C\x1E\x92a\x02RV[a\x0B\x03V[a\x02RV[\x90V[a\x0C*\x90a\x0C\x05V[\x90V[a\x0C6\x90a\x0C!V[\x90V[\x90a\x0CC\x90a\x0C-V[_R` R`@_ \x90V[a\x0Cu\x91_a\x0Cja\x0Cp\x93a\x0Cca\x08+V[P\x82a\x08\xBCV[\x01a\x0C9V[a\x0BRV[\x90V[a\x0C\x80a\t\x1CV[Pa\x0C\x8B`\x02a\tKV[\x90V[\x90a\x0C\xA8\x91a\x0C\xA3a\x0C\x9Ea\x07\xC3V[a\x12\xDCV[a\r!V[V[\x90a\x0C\xB6_\x19\x91a\x05\xBAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0C\xD8a\x0C\xD3a\x0C\xDF\x92a\x0B\x06V[a\x0C\xC0V[\x82Ta\x0C\xAAV[\x90UV[a\r\x18a\r\x1F\x94a\r\x0E``\x94\x98\x97\x95a\r\x04`\x80\x86\x01\x9A_\x87\x01\x90a\x03EV[` \x85\x01\x90a\x03EV[`@\x83\x01\x90a\x03EV[\x01\x90a\x03EV[V[a\r+`\x01a\tKV[a\r\x85a\r8`\x02a\tKV[\x91a\rD\x84`\x01a\x0C\xC3V[a\rO\x85`\x02a\x0C\xC3V[\x91\x92\x93\x7F\x88\x91vV\x86\xE3\x13h\xFF?\xDB(\x1FVP}>\x8A\x9C\xF3\x8D\xEE\x9DM\xC71\x84N\xB8\xAA\x01N\x94a\r|a\x01\"V[\x94\x85\x94\x85a\x0C\xE3V[\x03\x90\xA1V[\x90a\r\x94\x91a\x0C\x8EV[V[\x90a\r\xB1\x91a\r\xACa\r\xA7\x82a\x08\xFBV[a\x12\xDCV[a\r\xB3V[V[\x90a\r\xBD\x91a\x13\xA8V[PV[\x90a\r\xCA\x91a\r\x96V[V[a\r\xE0a\r\xDBa\r\xE5\x92a\x05\xB7V[a\x0B\x03V[a\x02RV[\x90V[a\r\xF1\x90a\r\xCCV[\x90V[a\r\xFD\x90a\x0C!V[\x90V[a\x0E\x14a\x0E\x0Fa\x0E\x19\x92a\x05\xB7V[a\x0B\x03V[a\x01\xFFV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0EPa\x0EV\x91a\x01\xFFV[\x91a\x01\xFFV[\x90\x81\x15a\x0EaW\x04\x90V[a\x0E\x1CV[\x90a\x0Er`\xFF\x91a\x05\xBAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x85\x90a\x01}V[\x90V[\x90V[\x90a\x0E\xA0a\x0E\x9Ba\x0E\xA7\x92a\x0E|V[a\x0E\x88V[\x82Ta\x0EfV[\x90UV[a\x0E\xB4\x90a\x01\xFFV[_\x19\x81\x14a\x0E\xC2W`\x01\x01\x90V[a\x0E0V[a\x0E\xD0\x90a\x0C\x05V[\x90V[a\x0E\xDC\x90a\x0E\xC7V[\x90V[a\x0E\xE8\x90a\x0C!V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x0E\xFFWV[a\x01,V[\x91` a\x0F%\x92\x94\x93a\x0F\x1E`@\x82\x01\x96_\x83\x01\x90a\x02iV[\x01\x90a\x02iV[V[a\x0F/a\x01\"V[=_\x82>=\x90\xFD[\x93\x92\x93\x91\x90\x91a\x0FEa\x08oV[Pa\x0FNa\t\x1CV[P\x82a\x0Fja\x0Fda\x0F__a\r\xE8V[a\x02]V[\x91a\x02]V[\x14\x80\x15a\x11\xC9W[a\x11\xADW\x80a\x0F\x89a\x0F\x83_a\x0E\0V[\x91a\x01\xFFV[\x14_\x14a\x11\xA7Wa\x0F\x98a\x12\xA0V[[\x94\x81a\x0F\xADa\x0F\xA7_a\x0E\0V[\x91a\x01\xFFV[\x14\x15\x80a\x11qW[a\x11UWa\x0F\xCDa\x0F\xC8`\x04\x88\x90a\x0B\"V[a\x0BRV[a\x119Wa\x10\x1D\x91a\x0F\xEB`\x01a\x0F\xE6`\x04\x8A\x90a\x0B\"V[a\x0E\x8BV[a\x0F\xFDa\x0F\xF7_a\x0E\0V[\x91a\x01\xFFV[\x14a\x11\x18W[a\x10\x0C\x86a\n\nV[a\x10\x18_\x92\x91\x92a\x0E\0V[a\x14lV[\x91a\x10/a\x10*\x84a\x0E\xD3V[a\x0E\xDFV[\x90cH\\\xC9U\x90a\x10?\x84a\r\xF4V[\x92\x80;\x15a\x11\x13Wa\x10d_\x80\x94a\x10oa\x10Xa\x01\"V[\x97\x88\x96\x87\x95\x86\x94a\x0E\xEFV[\x84R`\x04\x84\x01a\x0F\x04V[\x03\x92Z\xF1\x80\x15a\x11\x0EWa\x10\xE2W[P\x83\x90a\x10\x8B\x83\x91a\r\xF4V[\x90a\x10\xC8a\x10\xC2a\x10\xBC\x7FI\xB2\x1F\x1EA\x90\xDB\x8B\n\x93<\x95\x1E\xD0\x13\xDE\",\x84|\x15F\x17Th-\xAA.\xAB\x1F\xDB\xD2\x95a\x0B\x06V[\x92a\x0C-V[\x92a\x0C-V[\x92a\x10\xD1a\x01\"V[\x80a\x10\xDB\x81a\x04\xDFV[\x03\x90\xA4\x91\x90V[a\x11\x01\x90_=\x81\x11a\x11\x07W[a\x10\xF9\x81\x83a\t\x87V[\x81\x01\x90a\x0E\xF5V[_a\x10~V[P=a\x10\xEFV[a\x0F'V[a\x0E\xEBV[a\x114a\x11-a\x11(`\x03a\tKV[a\x0E\xABV[`\x03a\x0C\xC3V[a\x10\x03V[_c$Y\x1D\x89`\xE0\x1B\x81R\x80a\x11Q`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[_cj\"S\x91`\xE0\x1B\x81R\x80a\x11m`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[Pa\x11\x86\x86a\x11\x80`\x02a\tKV[\x90a\x0EDV[a\x11\xA1a\x11\x9Ba\x11\x96`\x01a\tKV[a\x01\xFFV[\x91a\x01\xFFV[\x14a\x0F\xB5V[\x80a\x0F\x99V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x11\xC5`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[Pa\x11\xD3\x82a\r\xF4V[a\x11\xEDa\x11\xE7a\x11\xE2_a\r\xE8V[a\x02]V[\x91a\x02]V[\x14a\x0FrV[a\x11\xFBa\x08+V[Pa\x12\x15a\x12\x0Fc\x01\xFF\xC9\xA7`\xE0\x1Ba\x010V[\x91a\x010V[\x14\x90V[a\x12\"\x90a\x0C!V[\x90V[\x90a\x12C\x91a\x122a\x08oV[P\x90a\x12=0a\x12\x19V[\x91a\x15YV[\x90V[a\x12Ua\x12[\x91\x93\x92\x93a\x01\xFFV[\x92a\x01\xFFV[\x91a\x12g\x83\x82\x02a\x01\xFFV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x12vWV[a\x0E0V[a\x12\x8Aa\x12\x90\x91\x93\x92\x93a\x01\xFFV[\x92a\x01\xFFV[\x82\x01\x80\x92\x11a\x12\x9BWV[a\x0E0V[a\x12\xA8a\t\x1CV[Pa\x12\xD9a\x12\xC9a\x12\xB9`\x01a\tKV[a\x12\xC3`\x02a\tKV[\x90a\x12FV[a\x12\xD3`\x03a\tKV[\x90a\x12{V[\x90V[a\x12\xEE\x90a\x12\xE8a\x13\x9BV[\x90a\x15\xADV[V[a\x12\xF8a\x08+V[Pa\x13\ra\x13\x07\x82\x84\x90a\x0COV[\x15a\x01}V[_\x14a\x13\x95Wa\x134`\x01a\x13/_a\x13'\x81\x86\x90a\x08\xBCV[\x01\x85\x90a\x0C9V[a\x0E\x8BV[\x90a\x13=a\x13\x9BV[\x90a\x13za\x13ta\x13n\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x08\xB0V[\x92a\x0C-V[\x92a\x0C-V[\x92a\x13\x83a\x01\"V[\x80a\x13\x8D\x81a\x04\xDFV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x13\xA3a\x08oV[P3\x90V[a\x13\xB0a\x08+V[Pa\x13\xBC\x81\x83\x90a\x0COV[_\x14a\x14CWa\x13\xE2_a\x13\xDD_a\x13\xD5\x81\x86\x90a\x08\xBCV[\x01\x85\x90a\x0C9V[a\x0E\x8BV[\x90a\x13\xEBa\x13\x9BV[\x90a\x14(a\x14\"a\x14\x1C\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x08\xB0V[\x92a\x0C-V[\x92a\x0C-V[\x92a\x141a\x01\"V[\x80a\x14;\x81a\x04\xDFV[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a\x14j\x92\x94\x93a\x14c`@\x82\x01\x96_\x83\x01\x90a\x03EV[\x01\x90a\x03EV[V[\x91\x90\x91a\x14wa\x08oV[Pa\x14\x810a\x12\x19V[1a\x14\x94a\x14\x8E\x83a\x01\xFFV[\x91a\x01\xFFV[\x10a\x151Wa\x14\xA2\x82a\x03\xEFV[a\x14\xB4a\x14\xAE_a\x0E\0V[\x91a\x01\xFFV[\x14a\x15\x15W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x15\nW\x81a\x14\xE7a\x14\xE1a\x14\xDC_a\r\xE8V[a\x02]V[\x91a\x02]V[\x14a\x14\xEEWV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x15\x06`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x15-`\x04\x82\x01a\x04\xDFV[\x03\x90\xFD[a\x15:0a\x12\x19V[1a\x15U_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\x14IV[\x03\x90\xFD[\x91`\x0B\x92a\x15ea\x08oV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V[\x91` a\x15\xAB\x92\x94\x93a\x15\xA4`@\x82\x01\x96_\x83\x01\x90a\x02iV[\x01\x90a\x02\xDFV[V[\x90a\x15\xC2a\x15\xBC\x83\x83\x90a\x0COV[\x15a\x01}V[a\x15\xCAWPPV[a\x15\xE4_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x15\x8AV[\x03\x90\xFD\xFE`\xC0`@R4a\0HWa\0\x19a\0\x14a\0\xF9V[a\x01\xC7V[a\0!a\0MV[a\x15\x82a\x06\xB2\x829`\x80Q\x81\x81\x81a\x07\xCF\x01Ra\x12\xE8\x01R`\xA0Q\x81a\x07Q\x01Ra\x15\x82\x90\xF3[a\0SV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x7F\x90a\0WV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x97W`@RV[a\0aV[\x90a\0\xAFa\0\xA8a\0MV[\x92\x83a\0uV[V[_\x80\xFD[\x90V[a\0\xC1\x81a\0\xB5V[\x03a\0\xC8WV[_\x80\xFD[\x90PQ\x90a\0\xD9\x82a\0\xB8V[V[\x90` \x82\x82\x03\x12a\0\xF4Wa\0\xF1\x91_\x01a\0\xCCV[\x90V[a\0\xB1V[a\x01\x17a\x1D\xF3\x808\x03\x80a\x01\x0C\x81a\0\x9CV[\x92\x839\x81\x01\x90a\0\xDBV[\x90V[\x90V[\x90V[a\x014a\x01/a\x019\x92a\x01\x1AV[a\x01\x1DV[a\0\xB5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01y`\x18` \x92a\x01<V[a\x01\x82\x81a\x01EV[\x01\x90V[a\x01\x9B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01lV[\x90V[\x15a\x01\xA5WV[a\x01\xADa\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xC3`\x04\x82\x01a\x01\x86V[\x03\x90\xFD[a\x01\xCFa\x03*V[a\x01\xEC\x81a\x01\xE5a\x01\xDF_a\x01 V[\x91a\0\xB5V[\x14\x15a\x01\x9EV[`\xA0RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x10a\x02\x0Ba\x02\x15\x92a\x01\xF1V[a\x01\x1DV[a\x01\xF1V[\x90V[a\x02!\x90a\x01\xFCV[\x90V[a\x02-\x90a\x02\x18V[\x90V[a\x02:`da\x02$V[\x90V[a\x02F\x90a\x01\xFCV[\x90V[a\x02R\x90a\x02=V[\x90V[\x15\x15\x90V[a\x02d\x90Qa\x02UV[\x90V[`\xE0\x1B\x90V[_\x01\x90V[a\x02za\0MV[=_\x82>=\x90\xFD[` \x7Fled\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbSys precompile validation fai_\x82\x01R\x01RV[a\x02\xDC`#`@\x92a\x01<V[a\x02\xE5\x81a\x02\x82V[\x01\x90V[a\x02\xFE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xCFV[\x90V[\x15a\x03\x08WV[a\x03\x10a\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03&`\x04\x82\x01a\x02\xE9V[\x03\x90\xFD[a\x032a\x04\xD2V[a\x03Ba\x03=a\x020V[a\x02IV[;a\x03Ua\x03O_a\x01 V[\x91a\0\xB5V[\x11`\x80Ra\x03la\x03f`\x80a\x02ZV[\x15a\x02UV[\x80\x15a\x03~W[a\x03|\x90a\x03\x01V[V[Pa\x03\xAA` a\x03\x94a\x03\x8Fa\x020V[a\x02IV[c\xA3\xB1\xB3\x1D\x90a\x03\xA2a\0MV[\x93\x84\x92a\x02gV[\x82R\x81\x80a\x03\xBA`\x04\x82\x01a\x02mV[\x03\x91Z\xFA\x80\x15a\x04\x18Wa\x03|\x91_\x91a\x03\xEAW[Pa\x03\xE2a\x03\xDC_a\x01 V[\x91a\0\xB5V[\x11\x90Pa\x03sV[a\x04\x0B\x91P` =\x81\x11a\x04\x11W[a\x04\x03\x81\x83a\0uV[\x81\x01\x90a\0\xDBV[_a\x03\xCFV[P=a\x03\xF9V[a\x02rV[`\xA0\x1B\x90V[\x90a\x042`\xFF`\xA0\x1B\x91a\x04\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04E\x90a\x02UV[\x90V[\x90V[\x90a\x04`a\x04[a\x04g\x92a\x04<V[a\x04HV[\x82Ta\x04#V[\x90UV[a\x04t\x90a\x01\xFCV[\x90V[a\x04\x80\x90a\x04kV[\x90V[_\x1B\x90V[\x90a\x04\x99`\x01\x80`\xA0\x1B\x03\x91a\x04\x83V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xAC\x90a\x04kV[\x90V[\x90V[\x90a\x04\xC7a\x04\xC2a\x04\xCE\x92a\x04\xA3V[a\x04\xAFV[\x82Ta\x04\x88V[\x90UV[a\x04\xDB3a\x05?V[a\x04\xE6_`\x01a\x04KV[a\x04\xEEa\0MV[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x05:Wa\x05\x16\x82\x91a\x01\xBFa\x1C4\x849a\x02mV[\x03\x90_\xF0\x80\x15a\x055Wa\x05,a\x053\x91a\x04wV[`\x01a\x04\xB2V[V[a\x02rV[a\0aV[a\x05H\x90a\x05\xA0V[V[a\x05^a\x05Ya\x05c\x92a\x01\x1AV[a\x01\x1DV[a\x01\xF1V[\x90V[a\x05o\x90a\x05JV[\x90V[a\x05{\x90a\x01\xF1V[\x90V[a\x05\x87\x90a\x05rV[\x90RV[\x91\x90a\x05\x9E\x90_` \x85\x01\x94\x01\x90a\x05~V[V[\x80a\x05\xBBa\x05\xB5a\x05\xB0_a\x05fV[a\x05rV[\x91a\x05rV[\x14a\x05\xCBWa\x05\xC9\x90a\x06RV[V[a\x05\xEEa\x05\xD7_a\x05fV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\x8BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\x0Ea\x06\x13\x91a\x05\xF2V[a\x05\xF7V[\x90V[a\x06 \x90Ta\x06\x02V[\x90V[a\x06,\x90a\x02=V[\x90V[\x90V[\x90a\x06Ga\x06Ba\x06N\x92a\x06#V[a\x06/V[\x82Ta\x04\x88V[\x90UV[a\x06[_a\x06\x16V[a\x06e\x82_a\x062V[\x90a\x06\x99a\x06\x93\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06#V[\x91a\x06#V[\x91a\x06\xA2a\0MV[\x80a\x06\xAC\x81a\x02mV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08YV[a\0\x1D_5a\x01\x0CV[\x80c\x038\x11T\x14a\x01\x07W\x80c6l\xBA\xB7\x14a\x01\x02W\x80cF\xE2\xCC\t\x14a\0\xFDW\x80cH\\\xC9U\x14a\0\xF8W\x80c[<\xD6\xE2\x14a\0\xF3W\x80cc\xD9d7\x14a\0\xEEW\x80cqP\x18\xA6\x14a\0\xE9W\x80cz9y\xDC\x14a\0\xE4W\x80c\x80NQ#\x14a\0\xDFW\x80c\x8D\xA5\xCB[\x14a\0\xDAW\x80c\xCD\xAF\xB9x\x14a\0\xD5W\x80c\xD4\xF0\xEBM\x14a\0\xD0W\x80c\xD8x\x13B\x14a\0\xCBW\x80c\xEA\x16\x1C\xE6\x14a\0\xC6Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x08&V[a\x07\xF1V[a\x07\x98V[a\x07\x1CV[a\x06\xCAV[a\x06 V[a\x05\xCAV[a\x05\x91V[a\x04\xE5V[a\x04\xB0V[a\x04 V[a\x03OV[a\x02\xB4V[a\x02yV[a\x01TV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01*WV[a\x01\x1CV[\x90V[a\x01;\x90a\x01/V[\x90RV[\x91\x90a\x01R\x90_` \x85\x01\x94\x01\x90a\x012V[V[4a\x01\x84Wa\x01d6`\x04a\x01 V[a\x01\x80a\x01oa\x08\x8AV[a\x01wa\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x02\tW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x04Wa\x02\0\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02Oa\x02X` \x93a\x02]\x93a\x02F\x81a\x02\x0EV[\x93\x84\x80\x93a\x02\x12V[\x95\x86\x91\x01a\x02\x1BV[a\x02&V[\x01\x90V[a\x02v\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x020V[\x90V[4a\x02\xAAWa\x02\xA6a\x02\x95a\x02\x8F6`\x04a\x01\xD8V[\x90a\tvV[a\x02\x9Da\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\x01\x18V[_\x01\x90V[4a\x02\xE3Wa\x02\xCDa\x02\xC76`\x04a\x01\xD8V[\x90a\n\x92V[a\x02\xD5a\x01\x12V[\x80a\x02\xDF\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFC\x90a\x02\xE8V[\x90V[a\x03\x08\x81a\x02\xF3V[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x91\x90`@\x83\x82\x03\x12a\x03JW\x80a\x03>a\x03G\x92_\x86\x01a\x03\x13V[\x93` \x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x03~Wa\x03ha\x03b6`\x04a\x03\"V[\x90a\x0CDV[a\x03pa\x01\x12V[\x80a\x03z\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA2\x90`\x08a\x03\xA7\x93\x02a\x03\x83V[a\x03\x87V[\x90V[\x90a\x03\xB5\x91Ta\x03\x92V[\x90V[a\x03\xC4`\x01_\x90a\x03\xAAV[\x90V[\x90V[a\x03\xDEa\x03\xD9a\x03\xE3\x92a\x02\xE8V[a\x03\xC7V[a\x02\xE8V[\x90V[a\x03\xEF\x90a\x03\xCAV[\x90V[a\x03\xFB\x90a\x03\xE6V[\x90V[a\x04\x07\x90a\x03\xF2V[\x90RV[\x91\x90a\x04\x1E\x90_` \x85\x01\x94\x01\x90a\x03\xFEV[V[4a\x04PWa\x0406`\x04a\x01 V[a\x04La\x04;a\x03\xB8V[a\x04Ca\x01\x12V[\x91\x82\x91\x82a\x04\x0BV[\x03\x90\xF3[a\x01\x18V[\x90V[_\x1B\x90V[a\x04qa\x04la\x04v\x92a\x04UV[a\x04XV[a\x01/V[\x90V[a\x04\xA2\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x04]V[\x90V[a\x04\xADa\x04yV[\x90V[4a\x04\xE0Wa\x04\xC06`\x04a\x01 V[a\x04\xDCa\x04\xCBa\x04\xA5V[a\x04\xD3a\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[4a\x05\x13Wa\x04\xF56`\x04a\x01 V[a\x04\xFDa\x0CuV[a\x05\x05a\x01\x12V[\x80a\x05\x0F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x91``\x83\x83\x03\x12a\x05eWa\x05/\x82_\x85\x01a\x03\x13V[\x92a\x05=\x83` \x83\x01a\x03\x13V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05`Wa\x05\\\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[\x15\x15\x90V[a\x05x\x90a\x05jV[\x90RV[\x91\x90a\x05\x8F\x90_` \x85\x01\x94\x01\x90a\x05oV[V[4a\x05\xC5Wa\x05\xC1a\x05\xB0a\x05\xA76`\x04a\x05\x18V[\x92\x91\x90\x91a\rTV[a\x05\xB8a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x05\xF9Wa\x05\xE3a\x05\xDD6`\x04a\x01\xD8V[\x90a\x0EFV[a\x05\xEBa\x01\x12V[\x80a\x05\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[a\x06\x07\x90a\x02\xF3V[\x90RV[\x91\x90a\x06\x1E\x90_` \x85\x01\x94\x01\x90a\x05\xFEV[V[4a\x06PWa\x0606`\x04a\x01 V[a\x06La\x06;a\x0E\x82V[a\x06Ca\x01\x12V[\x91\x82\x91\x82a\x06\x0BV[\x03\x90\xF3[a\x01\x18V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x8FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\x8AW` \x01\x92` \x83\x02\x84\x01\x11a\x06\x85WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x06\xC5W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xC0Wa\x06\xBC\x92\x01a\x06UV[\x90\x91V[a\x01\x89V[a\x01\x1CV[4a\x06\xF9Wa\x06\xE3a\x06\xDD6`\x04a\x06\x94V[\x90a\x0FMV[a\x06\xEBa\x01\x12V[\x80a\x06\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x90` \x82\x82\x03\x12a\x07\x17Wa\x07\x14\x91_\x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x07JWa\x074a\x07/6`\x04a\x06\xFEV[a\x10\x81V[a\x07<a\x01\x12V[\x80a\x07F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07\x7F\x90a\x07sV[\x90RV[\x91\x90a\x07\x96\x90_` \x85\x01\x94\x01\x90a\x07vV[V[4a\x07\xC8Wa\x07\xA86`\x04a\x01 V[a\x07\xC4a\x07\xB3a\x07OV[a\x07\xBBa\x01\x12V[\x91\x82\x91\x82a\x07\x83V[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x08!Wa\x08\x016`\x04a\x01 V[a\x08\x1Da\x08\x0Ca\x07\xCDV[a\x08\x14a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x08TWa\x08>a\x0896`\x04a\x06\xFEV[a\x10\xF1V[a\x08Fa\x01\x12V[\x80a\x08P\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08ua\x08z\x91a\x08aV[a\x08fV[\x90V[a\x08\x87\x90Ta\x08iV[\x90V[a\x08\x92a\x08]V[Pa\x08\xA5_a\x08\x9Fa\x10\xFCV[\x01a\x08}V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08\xD3a\x08\xCEa\x08\xD8\x92a\x08\xADV[a\x08\xB9V[a\x08\xB0V[\x90V[\x90V[a\x08\xEAa\x08\xEF\x91a\x08\xB0V[a\x08\xDBV[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\t\x13\x81a\t\x1A\x93a\x08\xF3V[\x80\x93a\x08\xF8V[\x01\x90V[\x80a\t/`\x01\x92a\t6\x96\x94a\x08\xDEV[\x01\x91a\t\x03V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\tW\x90a\x02&V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\tqW`@RV[a\t9V[a\t\xB4\x90a\t\x82a\x08\xA8V[Pa\t\xA5a\t\x8F_a\x08\xBFV[\x91\x93a\t\x99a\x01\x12V[\x94\x85\x93` \x85\x01a\t\x1EV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[\x90V[\x90a\t\xD3a\t\xCD32\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\t\xE2Wa\t\xE0\x91a\n~V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\xFA`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_\x80\xFD[\x90a\n\x15a\n\x0Ea\x01\x12V[\x92\x83a\tMV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n5Wa\n1` \x91a\x02&V[\x01\x90V[a\t9V[\x90\x92\x91\x92a\nOa\nJ\x82a\n\x17V[a\n\x02V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\nkWa\ni\x92a\x08\xF8V[V[a\t\xFEV[a\n{\x916\x91a\n:V[\x90V[a\n\x90\x91a\n\x8B\x91a\npV[a\x12\xDDV[V[\x90a\n\x9C\x91a\t\xB7V[V[\x90a\n\xB0\x91a\n\xABa\x14\xA5V[a\x0B\xB7V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\n\xCAa\n\xCF\x91a\n\xB2V[a\n\xB8V[\x90V[a\n\xDC\x90Ta\n\xBEV[\x90V[a\n\xF3a\n\xEEa\n\xF8\x92a\x08\xADV[a\x03\xC7V[a\x02\xE8V[\x90V[a\x0B\x04\x90a\n\xDFV[\x90V[`\xA0\x1B\x90V[\x90a\x0B\x1C`\xFF`\xA0\x1B\x91a\x0B\x07V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B/\x90a\x05jV[\x90V[\x90V[\x90a\x0BJa\x0BEa\x0BQ\x92a\x0B&V[a\x0B2V[\x82Ta\x0B\rV[\x90UV[a\x0B^\x90a\x03\xCAV[\x90V[a\x0Bj\x90a\x0BUV[\x90V[\x90a\x0B~`\x01\x80`\xA0\x1B\x03\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x91\x90a\x0BUV[\x90V[\x90V[\x90a\x0B\xACa\x0B\xA7a\x0B\xB3\x92a\x0B\x88V[a\x0B\x94V[\x82Ta\x0BmV[\x90UV[a\x0B\xC1`\x01a\n\xD2V[a\x0C)W\x81a\x0B\xE0a\x0B\xDAa\x0B\xD5_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x0C\rWa\x0C\x06a\x0B\xFFa\x0C\x0B\x93a\x0B\xFA`\x01\x80a\x0B5V[a\x0BaV[`\x01a\x0B\x97V[a\x10\xF1V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C%`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C@`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[\x90a\x0CN\x91a\n\x9EV[V[a\x0CXa\x14\xA5V[a\x0C`a\x0CbV[V[a\x0Csa\x0Cn_a\n\xFBV[a\x15\x16V[V[a\x0C}a\x0CPV[V[_\x90V[a\x0C\x8Fa\x0C\x94\x91a\x08aV[a\x03\x87V[\x90V[a\x0C\xA1\x90Ta\x0C\x83V[\x90V[`\xE0\x1B\x90V[a\x0C\xB3\x81a\x05jV[\x03a\x0C\xBAWV[_\x80\xFD[\x90PQ\x90a\x0C\xCB\x82a\x0C\xAAV[V[\x90` \x82\x82\x03\x12a\x0C\xE6Wa\x0C\xE3\x91_\x01a\x0C\xBEV[\x90V[a\x01\x1CV[\x91\x90a\r\x05\x81a\x0C\xFE\x81a\r\n\x95a\x02\x12V[\x80\x95a\x08\xF8V[a\x02&V[\x01\x90V[a\r4a\rA\x95\x93\x94\x92\x94a\r*``\x84\x01\x96_\x85\x01\x90a\x05\xFEV[` \x83\x01\x90a\x05\xFEV[`@\x81\x85\x03\x91\x01Ra\x0C\xEBV[\x90V[a\rLa\x01\x12V[=_\x82>=\x90\xFD[\x92a\r\x97` \x93\x94a\rda\x0C\x7FV[Pa\r\xA2a\rza\ru`\x01a\x0C\x97V[a\x03\xF2V[\x93cz9y\xDC\x92\x95\x97a\r\x8Ba\x01\x12V[\x98\x89\x97\x88\x96\x87\x96a\x0C\xA4V[\x86R`\x04\x86\x01a\r\x0EV[\x03\x91Z\xFA\x90\x81\x15a\r\xE6W_\x91a\r\xB8W[P\x90V[a\r\xD9\x91P` =\x81\x11a\r\xDFW[a\r\xD1\x81\x83a\tMV[\x81\x01\x90a\x0C\xCDV[_a\r\xB4V[P=a\r\xC7V[a\rDV[\x90a\x0E\x07a\x0E\x0132\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\x0E\x16Wa\x0E\x14\x91a\x0E2V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E.`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x0ED\x91a\x0E?\x91a\tvV[a\x12\xDDV[V[\x90a\x0EP\x91a\r\xEBV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0Ema\x0Er\x91a\x08aV[a\x0EVV[\x90V[a\x0E\x7F\x90Ta\x0EaV[\x90V[a\x0E\x8Aa\x0ERV[Pa\x0E\x94_a\x0EuV[\x90V[P\x90V[a\x0E\xAFa\x0E\xAAa\x0E\xB4\x92a\x08\xADV[a\x03\xC7V[a\x07sV[\x90V[`\x01a\x0E\xC3\x91\x01a\x07sV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0F(W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F#W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0F\x1EWV[a\x0E\xE2V[a\x0E\xDEV[a\x0E\xDAV[\x90\x82\x10\x15a\x0FHW` a\x0FD\x92\x02\x81\x01\x90a\x0E\xE6V[\x90\x91V[a\x0E\xC6V[a\x0FX\x81\x83\x90a\x0E\x97V[\x91a\x0Fb_a\x0E\x9BV[[\x80a\x0Fva\x0Fp\x86a\x07sV[\x91a\x07sV[\x10\x15a\x0F\xCBWa\x0F\xA4\x90a\x0F\x9A32\x90a\x0F\x92\x87\x87\x86\x91a\x0F-V[\x92\x90\x91a\rTV[a\x0F\xA9W[a\x0E\xB7V[a\x0FcV[a\x0F\xC6a\x0F\xC1a\x0F\xBB\x86\x86\x85\x91a\x0F-V[\x90a\tvV[a\x12\xDDV[a\x0F\x9FV[PPPPV[a\x0F\xE2\x90a\x0F\xDDa\x14\xA5V[a\x0F\xF0V[V[a\x0F\xED\x90a\x03\xE6V[\x90V[\x80a\x10\x0Ba\x10\x05a\x10\0_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10eWa\x10#a\x10\x1C\x82a\x0BaV[`\x01a\x0B\x97V[a\x10M\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F\xE4V[\x90a\x10Va\x01\x12V[\x80a\x10`\x81a\x02\xAFV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10}`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x10\x8A\x90a\x0F\xD1V[V[a\x10\x9D\x90a\x10\x98a\x14\xA5V[a\x10\x9FV[V[\x80a\x10\xBAa\x10\xB4a\x10\xAF_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10\xCAWa\x10\xC8\x90a\x15\x16V[V[a\x10\xEDa\x10\xD6_a\n\xFBV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[a\x10\xFA\x90a\x10\x8CV[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11Ea\x11@a\x11J\x92a\x07sV[a\x03\xC7V[a\x11$V[\x90V[a\x11V\x90a\x03\xCAV[\x90V[a\x11b\x90a\x11MV[\x90V[a\x11o`da\x11YV[\x90V[a\x11{\x90a\x03\xE6V[\x90V[a\x11\x87\x81a\x07sV[\x03a\x11\x8EWV[_\x80\xFD[\x90PQ\x90a\x11\x9F\x82a\x11~V[V[\x90` \x82\x82\x03\x12a\x11\xBAWa\x11\xB7\x91_\x01a\x11\x92V[\x90V[a\x01\x1CV[` \x01\x90V[``\x1B\x90V[a\x11\xD4\x90a\x11\xC5V[\x90V[a\x11\xE0\x90a\x11\xCBV[\x90V[a\x11\xEFa\x11\xF4\x91a\x02\xF3V[a\x11\xD7V[\x90RV[`\xC0\x1B\x90V[a\x12\x07\x90a\x11\xF8V[\x90V[a\x12\x16a\x12\x1B\x91a\x11$V[a\x11\xFEV[\x90RV[\x90V[a\x12.a\x123\x91a\x01/V[a\x12\x1FV[\x90RV[\x92a\x12e`\x08a\x12m\x94a\x12]`\x14\x88a\x12U` \x9B\x9A\x86\x99a\x11\xE3V[\x01\x80\x92a\x12\nV[\x01\x80\x92a\x12\nV[\x01\x80\x92a\x12\"V[\x01\x90V[` \x81a\x12\x83a\x12\x8B\x93\x83\x96\x95a\x12\"V[\x01\x80\x92a\x12\"V[\x01\x90V[\x90a\x12\x9B_\x19\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xAE\x90a\x01/V[\x90V[a\x12\xBA\x90a\x08aV[\x90V[\x90a\x12\xD2a\x12\xCDa\x12\xD9\x92a\x12\xA5V[a\x12\xB1V[\x82Ta\x12\x8FV[\x90UV[a\x12\xE5a\x11 V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x14\x94Wa\x138` a\x13\"a\x13\x1Da\x11eV[a\x11rV[c\xA3\xB1\xB3\x1D\x90a\x130a\x01\x12V[\x93\x84\x92a\x0C\xA4V[\x82R\x81\x80a\x13H`\x04\x82\x01a\x02\xAFV[\x03\x91Z\xFA\x90\x81\x15a\x14\x8FWa\x14\x1C\x91a\x13h\x91_\x91a\x14aW[Pa\x111V[[_a\x13ra\x10\xFCV[\x91a\x13\xBB3a\x13\xACa\x13\x83Ba\x111V[\x88a\x13\x96a\x13\x90\x82a\x02\x0EV[\x91a\x11\xBFV[ \x90a\x13\xA0a\x01\x12V[\x95\x86\x94` \x86\x01a\x127V[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x13\xCDa\x13\xC7\x82a\x02\x0EV[\x91a\x11\xBFV[ a\x14\x02a\x13\xDC\x83\x85\x01a\x08}V[a\x13\xF3a\x13\xE7a\x01\x12V[\x93\x84\x92` \x84\x01a\x12qV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x14\x14a\x14\x0E\x82a\x02\x0EV[\x91a\x11\xBFV[ \x91\x01a\x12\xBDV[3a\x14\\a\x14J\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F\xE4V[\x92a\x14Sa\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xA2V[a\x14\x82\x91P` =\x81\x11a\x14\x88W[a\x14z\x81\x83a\tMV[\x81\x01\x90a\x11\xA1V[_a\x13bV[P=a\x14pV[a\rDV[a\x14\x1Ca\x14\xA0Ca\x111V[a\x13iV[a\x14\xADa\x0E\x82V[a\x14\xC6a\x14\xC0a\x14\xBBa\x15uV[a\x02\xF3V[\x91a\x02\xF3V[\x03a\x14\xCDWV[a\x14\xEFa\x14\xD8a\x15uV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[\x90V[\x90a\x15\x0Ba\x15\x06a\x15\x12\x92a\x0F\xE4V[a\x14\xF3V[\x82Ta\x0BmV[\x90UV[a\x15\x1F_a\x0EuV[a\x15)\x82_a\x14\xF6V[\x90a\x15]a\x15W\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\xE4V[\x91a\x0F\xE4V[\x91a\x15fa\x01\x12V[\x80a\x15p\x81a\x02\xAFV[\x03\x90\xA3V[a\x15}a\x0ERV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `ChainIdAlreadyExists()` and selector `0x24591d89`.
```solidity
error ChainIdAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChainIdAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChainIdAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: ChainIdAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChainIdAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ChainIdAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ChainIdAlreadyExists()";
            const SELECTOR: [u8; 4] = [36u8, 89u8, 29u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `Create2EmptyBytecode()` and selector `0x4ca249dc`.
```solidity
error Create2EmptyBytecode();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Create2EmptyBytecode {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Create2EmptyBytecode> for UnderlyingRustTuple<'_> {
            fn from(value: Create2EmptyBytecode) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Create2EmptyBytecode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Create2EmptyBytecode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Create2EmptyBytecode()";
            const SELECTOR: [u8; 4] = [76u8, 162u8, 73u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FailedDeployment()` and selector `0xb06ebf3d`.
```solidity
error FailedDeployment();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedDeployment {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedDeployment> for UnderlyingRustTuple<'_> {
            fn from(value: FailedDeployment) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedDeployment {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedDeployment {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedDeployment()";
            const SELECTOR: [u8; 4] = [176u8, 110u8, 191u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InsufficientBalance(uint256,uint256)` and selector `0xcf479181`.
```solidity
error InsufficientBalance(uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBalance {
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBalance> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBalance) -> Self {
                (value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    balance: tuple.0,
                    needed: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBalance(uint256,uint256)";
            const SELECTOR: [u8; 4] = [207u8, 71u8, 145u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `ReservedNamespace()` and selector `0x6a225391`.
```solidity
error ReservedNamespace();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReservedNamespace {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReservedNamespace> for UnderlyingRustTuple<'_> {
            fn from(value: ReservedNamespace) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ReservedNamespace {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReservedNamespace {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReservedNamespace()";
            const SELECTOR: [u8; 4] = [106u8, 34u8, 83u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroValue()` and selector `0x7c946ed7`.
```solidity
error ZeroValue();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroValue {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroValue> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroValue) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroValue {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroValue {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroValue()";
            const SELECTOR: [u8; 4] = [124u8, 148u8, 110u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `NamespaceConfigUpdated(uint256,uint256,uint256,uint256)` and selector `0x8891765686e31368ff3fdb281f56507d3e8a9cf38dee9d4dc731844eb8aa014e`.
```solidity
event NamespaceConfigUpdated(uint256 oldNamespacePrefix, uint256 oldNamespaceMultiplier, uint256 newNamespacePrefix, uint256 newNamespaceMultiplier);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NamespaceConfigUpdated {
        #[allow(missing_docs)]
        pub oldNamespacePrefix: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub oldNamespaceMultiplier: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newNamespacePrefix: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newNamespaceMultiplier: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NamespaceConfigUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "NamespaceConfigUpdated(uint256,uint256,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                145u8,
                118u8,
                86u8,
                134u8,
                227u8,
                19u8,
                104u8,
                255u8,
                63u8,
                219u8,
                40u8,
                31u8,
                86u8,
                80u8,
                125u8,
                62u8,
                138u8,
                156u8,
                243u8,
                141u8,
                238u8,
                157u8,
                77u8,
                199u8,
                49u8,
                132u8,
                78u8,
                184u8,
                170u8,
                1u8,
                78u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldNamespacePrefix: data.0,
                    oldNamespaceMultiplier: data.1,
                    newNamespacePrefix: data.2,
                    newNamespaceMultiplier: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldNamespacePrefix),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.oldNamespaceMultiplier,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newNamespacePrefix),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.newNamespaceMultiplier,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NamespaceConfigUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NamespaceConfigUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NamespaceConfigUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SyndicateSequencingChainCreated(uint256,address,address)` and selector `0x49b21f1e4190db8b0a933c951ed013de222c847c15461754682daa2eab1fdbd2`.
```solidity
event SyndicateSequencingChainCreated(uint256 indexed appchainId, address indexed sequencingChainAddress, address indexed permissionModuleAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SyndicateSequencingChainCreated {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModuleAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SyndicateSequencingChainCreated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "SyndicateSequencingChainCreated(uint256,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                73u8,
                178u8,
                31u8,
                30u8,
                65u8,
                144u8,
                219u8,
                139u8,
                10u8,
                147u8,
                60u8,
                149u8,
                30u8,
                208u8,
                19u8,
                222u8,
                34u8,
                44u8,
                132u8,
                124u8,
                21u8,
                70u8,
                23u8,
                84u8,
                104u8,
                45u8,
                170u8,
                46u8,
                171u8,
                31u8,
                219u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    appchainId: topics.1,
                    sequencingChainAddress: topics.2,
                    permissionModuleAddress: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.appchainId.clone(),
                    self.sequencingChainAddress.clone(),
                    self.permissionModuleAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.appchainId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sequencingChainAddress,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.permissionModuleAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SyndicateSequencingChainCreated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SyndicateSequencingChainCreated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `computeSequencingChainAddress(bytes32,uint256)` and selector `0x1f43fc8b`.
```solidity
function computeSequencingChainAddress(bytes32 salt, uint256 chainId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeSequencingChainAddressCall {
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`computeSequencingChainAddress(bytes32,uint256)`](computeSequencingChainAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeSequencingChainAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeSequencingChainAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeSequencingChainAddressCall) -> Self {
                    (value.salt, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeSequencingChainAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        salt: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeSequencingChainAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeSequencingChainAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeSequencingChainAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeSequencingChainAddressCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = computeSequencingChainAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeSequencingChainAddress(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [31u8, 67u8, 252u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `createSyndicateSequencingChain(uint256,address,address,bytes32)` and selector `0xd9852abf`.
```solidity
function createSyndicateSequencingChain(uint256 appchainId, address admin, address permissionModule, bytes32 salt) external returns (address sequencingChain, uint256 actualChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createSyndicateSequencingChainCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`createSyndicateSequencingChain(uint256,address,address,bytes32)`](createSyndicateSequencingChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createSyndicateSequencingChainReturn {
        #[allow(missing_docs)]
        pub sequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub actualChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createSyndicateSequencingChainCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createSyndicateSequencingChainCall) -> Self {
                    (value.appchainId, value.admin, value.permissionModule, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createSyndicateSequencingChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainId: tuple.0,
                        admin: tuple.1,
                        permissionModule: tuple.2,
                        salt: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createSyndicateSequencingChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createSyndicateSequencingChainReturn) -> Self {
                    (value.sequencingChain, value.actualChainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createSyndicateSequencingChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sequencingChain: tuple.0,
                        actualChainId: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createSyndicateSequencingChainCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createSyndicateSequencingChainReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createSyndicateSequencingChain(uint256,address,address,bytes32)";
            const SELECTOR: [u8; 4] = [217u8, 133u8, 42u8, 191u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionModule,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBytecode(uint256)` and selector `0x2cd799bd`.
```solidity
function getBytecode(uint256 chainId) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBytecodeCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getBytecode(uint256)`](getBytecodeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBytecodeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBytecodeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBytecodeCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBytecodeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBytecodeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBytecodeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBytecodeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBytecodeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBytecodeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBytecode(uint256)";
            const SELECTOR: [u8; 4] = [44u8, 215u8, 153u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getNextAutoChainId()` and selector `0x2738ef09`.
```solidity
function getNextAutoChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNextAutoChainIdCall {}
    ///Container type for the return parameters of the [`getNextAutoChainId()`](getNextAutoChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNextAutoChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNextAutoChainIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNextAutoChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNextAutoChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNextAutoChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNextAutoChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNextAutoChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getNextAutoChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getNextAutoChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getNextAutoChainId()";
            const SELECTOR: [u8; 4] = [39u8, 56u8, 239u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isChainIdUsed(uint256)` and selector `0x7232c133`.
```solidity
function isChainIdUsed(uint256 chainId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isChainIdUsedCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isChainIdUsed(uint256)`](isChainIdUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isChainIdUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isChainIdUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isChainIdUsedCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isChainIdUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isChainIdUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isChainIdUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isChainIdUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isChainIdUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isChainIdUsedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isChainIdUsed(uint256)";
            const SELECTOR: [u8; 4] = [114u8, 50u8, 193u8, 51u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `namespaceMultiplier()` and selector `0xc8fd71dd`.
```solidity
function namespaceMultiplier() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct namespaceMultiplierCall {}
    ///Container type for the return parameters of the [`namespaceMultiplier()`](namespaceMultiplierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct namespaceMultiplierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<namespaceMultiplierCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: namespaceMultiplierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for namespaceMultiplierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<namespaceMultiplierReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: namespaceMultiplierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for namespaceMultiplierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for namespaceMultiplierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = namespaceMultiplierReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "namespaceMultiplier()";
            const SELECTOR: [u8; 4] = [200u8, 253u8, 113u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `namespacePrefix()` and selector `0x297f4c64`.
```solidity
function namespacePrefix() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct namespacePrefixCall {}
    ///Container type for the return parameters of the [`namespacePrefix()`](namespacePrefixCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct namespacePrefixReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<namespacePrefixCall> for UnderlyingRustTuple<'_> {
                fn from(value: namespacePrefixCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for namespacePrefixCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<namespacePrefixReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: namespacePrefixReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for namespacePrefixReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for namespacePrefixCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = namespacePrefixReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "namespacePrefix()";
            const SELECTOR: [u8; 4] = [41u8, 127u8, 76u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateNamespaceConfig(uint256,uint256)` and selector `0xccdc68f2`.
```solidity
function updateNamespaceConfig(uint256 newPrefix, uint256 newMultiplier) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateNamespaceConfigCall {
        #[allow(missing_docs)]
        pub newPrefix: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newMultiplier: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`updateNamespaceConfig(uint256,uint256)`](updateNamespaceConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateNamespaceConfigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateNamespaceConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateNamespaceConfigCall) -> Self {
                    (value.newPrefix, value.newMultiplier)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateNamespaceConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newPrefix: tuple.0,
                        newMultiplier: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateNamespaceConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateNamespaceConfigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateNamespaceConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateNamespaceConfigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateNamespaceConfigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateNamespaceConfig(uint256,uint256)";
            const SELECTOR: [u8; 4] = [204u8, 220u8, 104u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newPrefix),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newMultiplier),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateFactory`](self) function calls.
    pub enum SyndicateFactoryCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        computeSequencingChainAddress(computeSequencingChainAddressCall),
        #[allow(missing_docs)]
        createSyndicateSequencingChain(createSyndicateSequencingChainCall),
        #[allow(missing_docs)]
        getBytecode(getBytecodeCall),
        #[allow(missing_docs)]
        getNextAutoChainId(getNextAutoChainIdCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isChainIdUsed(isChainIdUsedCall),
        #[allow(missing_docs)]
        namespaceMultiplier(namespaceMultiplierCall),
        #[allow(missing_docs)]
        namespacePrefix(namespacePrefixCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        updateNamespaceConfig(updateNamespaceConfigCall),
    }
    #[automatically_derived]
    impl SyndicateFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [31u8, 67u8, 252u8, 139u8],
            [36u8, 138u8, 156u8, 163u8],
            [39u8, 56u8, 239u8, 9u8],
            [41u8, 127u8, 76u8, 100u8],
            [44u8, 215u8, 153u8, 189u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [114u8, 50u8, 193u8, 51u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [200u8, 253u8, 113u8, 221u8],
            [204u8, 220u8, 104u8, 242u8],
            [213u8, 71u8, 116u8, 31u8],
            [217u8, 133u8, 42u8, 191u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateFactoryCalls {
        const NAME: &'static str = "SyndicateFactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::computeSequencingChainAddress(_) => {
                    <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createSyndicateSequencingChain(_) => {
                    <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBytecode(_) => {
                    <getBytecodeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getNextAutoChainId(_) => {
                    <getNextAutoChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isChainIdUsed(_) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::namespaceMultiplier(_) => {
                    <namespaceMultiplierCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::namespacePrefix(_) => {
                    <namespacePrefixCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateNamespaceConfig(_) => {
                    <updateNamespaceConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateFactoryCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn computeSequencingChainAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::computeSequencingChainAddress)
                    }
                    computeSequencingChainAddress
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getNextAutoChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::getNextAutoChainId)
                    }
                    getNextAutoChainId
                },
                {
                    fn namespacePrefix(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <namespacePrefixCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::namespacePrefix)
                    }
                    namespacePrefix
                },
                {
                    fn getBytecode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <getBytecodeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::getBytecode)
                    }
                    getBytecode
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn isChainIdUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::isChainIdUsed)
                    }
                    isChainIdUsed
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn namespaceMultiplier(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <namespaceMultiplierCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::namespaceMultiplier)
                    }
                    namespaceMultiplier
                },
                {
                    fn updateNamespaceConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <updateNamespaceConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::updateNamespaceConfig)
                    }
                    updateNamespaceConfig
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn createSyndicateSequencingChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::createSyndicateSequencingChain)
                    }
                    createSyndicateSequencingChain
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::computeSequencingChainAddress(inner) => {
                    <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createSyndicateSequencingChain(inner) => {
                    <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBytecode(inner) => {
                    <getBytecodeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getNextAutoChainId(inner) => {
                    <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isChainIdUsed(inner) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::namespaceMultiplier(inner) => {
                    <namespaceMultiplierCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::namespacePrefix(inner) => {
                    <namespacePrefixCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateNamespaceConfig(inner) => {
                    <updateNamespaceConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::computeSequencingChainAddress(inner) => {
                    <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createSyndicateSequencingChain(inner) => {
                    <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBytecode(inner) => {
                    <getBytecodeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getNextAutoChainId(inner) => {
                    <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isChainIdUsed(inner) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::namespaceMultiplier(inner) => {
                    <namespaceMultiplierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::namespacePrefix(inner) => {
                    <namespacePrefixCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateNamespaceConfig(inner) => {
                    <updateNamespaceConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateFactory`](self) custom errors.
    pub enum SyndicateFactoryErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        ChainIdAlreadyExists(ChainIdAlreadyExists),
        #[allow(missing_docs)]
        Create2EmptyBytecode(Create2EmptyBytecode),
        #[allow(missing_docs)]
        FailedDeployment(FailedDeployment),
        #[allow(missing_docs)]
        InsufficientBalance(InsufficientBalance),
        #[allow(missing_docs)]
        ReservedNamespace(ReservedNamespace),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroValue(ZeroValue),
    }
    #[automatically_derived]
    impl SyndicateFactoryErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [36u8, 89u8, 29u8, 137u8],
            [76u8, 162u8, 73u8, 220u8],
            [102u8, 151u8, 178u8, 50u8],
            [106u8, 34u8, 83u8, 145u8],
            [124u8, 148u8, 110u8, 215u8],
            [176u8, 110u8, 191u8, 61u8],
            [207u8, 71u8, 145u8, 129u8],
            [217u8, 46u8, 35u8, 61u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateFactoryErrors {
        const NAME: &'static str = "SyndicateFactoryErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ChainIdAlreadyExists(_) => {
                    <ChainIdAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Create2EmptyBytecode(_) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedDeployment(_) => {
                    <FailedDeployment as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientBalance(_) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReservedNamespace(_) => {
                    <ReservedNamespace as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroValue(_) => <ZeroValue as alloy_sol_types::SolError>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateFactoryErrors>] = &[
                {
                    fn ChainIdAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ChainIdAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ChainIdAlreadyExists)
                    }
                    ChainIdAlreadyExists
                },
                {
                    fn Create2EmptyBytecode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::Create2EmptyBytecode)
                    }
                    Create2EmptyBytecode
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ReservedNamespace(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ReservedNamespace as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ReservedNamespace)
                    }
                    ReservedNamespace
                },
                {
                    fn ZeroValue(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ZeroValue as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ZeroValue)
                    }
                    ZeroValue
                },
                {
                    fn FailedDeployment(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <FailedDeployment as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::FailedDeployment)
                    }
                    FailedDeployment
                },
                {
                    fn InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::InsufficientBalance)
                    }
                    InsufficientBalance
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateFactoryErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ChainIdAlreadyExists(inner) => {
                    <ChainIdAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReservedNamespace(inner) => {
                    <ReservedNamespace as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroValue(inner) => {
                    <ZeroValue as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ChainIdAlreadyExists(inner) => {
                    <ChainIdAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReservedNamespace(inner) => {
                    <ReservedNamespace as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroValue(inner) => {
                    <ZeroValue as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`SyndicateFactory`](self) events.
    pub enum SyndicateFactoryEvents {
        #[allow(missing_docs)]
        NamespaceConfigUpdated(NamespaceConfigUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        SyndicateSequencingChainCreated(SyndicateSequencingChainCreated),
    }
    #[automatically_derived]
    impl SyndicateFactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                73u8,
                178u8,
                31u8,
                30u8,
                65u8,
                144u8,
                219u8,
                139u8,
                10u8,
                147u8,
                60u8,
                149u8,
                30u8,
                208u8,
                19u8,
                222u8,
                34u8,
                44u8,
                132u8,
                124u8,
                21u8,
                70u8,
                23u8,
                84u8,
                104u8,
                45u8,
                170u8,
                46u8,
                171u8,
                31u8,
                219u8,
                210u8,
            ],
            [
                136u8,
                145u8,
                118u8,
                86u8,
                134u8,
                227u8,
                19u8,
                104u8,
                255u8,
                63u8,
                219u8,
                40u8,
                31u8,
                86u8,
                80u8,
                125u8,
                62u8,
                138u8,
                156u8,
                243u8,
                141u8,
                238u8,
                157u8,
                77u8,
                199u8,
                49u8,
                132u8,
                78u8,
                184u8,
                170u8,
                1u8,
                78u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateFactoryEvents {
        const NAME: &'static str = "SyndicateFactoryEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <NamespaceConfigUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NamespaceConfigUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NamespaceConfigUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(
                    <SyndicateSequencingChainCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SyndicateSequencingChainCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SyndicateSequencingChainCreated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateFactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NamespaceConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SyndicateSequencingChainCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NamespaceConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SyndicateSequencingChainCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateFactory`](self) contract instance.

See the [wrapper's documentation](`SyndicateFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateFactoryInstance<T, P, N> {
        SyndicateFactoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateFactoryInstance<T, P, N>>,
    > {
        SyndicateFactoryInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateFactoryInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`SyndicateFactory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateFactory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateFactoryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateFactoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateFactoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateFactory`](self) contract instance.

See the [wrapper's documentation](`SyndicateFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SyndicateFactoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateFactoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateFactoryInstance<T, P, N> {
            SyndicateFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`computeSequencingChainAddress`] function.
        pub fn computeSequencingChainAddress(
            &self,
            salt: alloy::sol_types::private::FixedBytes<32>,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            computeSequencingChainAddressCall,
            N,
        > {
            self.call_builder(
                &computeSequencingChainAddressCall {
                    salt,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`createSyndicateSequencingChain`] function.
        pub fn createSyndicateSequencingChain(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
            permissionModule: alloy::sol_types::private::Address,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            createSyndicateSequencingChainCall,
            N,
        > {
            self.call_builder(
                &createSyndicateSequencingChainCall {
                    appchainId,
                    admin,
                    permissionModule,
                    salt,
                },
            )
        }
        ///Creates a new call builder for the [`getBytecode`] function.
        pub fn getBytecode(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBytecodeCall, N> {
            self.call_builder(&getBytecodeCall { chainId })
        }
        ///Creates a new call builder for the [`getNextAutoChainId`] function.
        pub fn getNextAutoChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getNextAutoChainIdCall, N> {
            self.call_builder(&getNextAutoChainIdCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isChainIdUsed`] function.
        pub fn isChainIdUsed(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isChainIdUsedCall, N> {
            self.call_builder(&isChainIdUsedCall { chainId })
        }
        ///Creates a new call builder for the [`namespaceMultiplier`] function.
        pub fn namespaceMultiplier(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, namespaceMultiplierCall, N> {
            self.call_builder(&namespaceMultiplierCall {})
        }
        ///Creates a new call builder for the [`namespacePrefix`] function.
        pub fn namespacePrefix(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, namespacePrefixCall, N> {
            self.call_builder(&namespacePrefixCall {})
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`updateNamespaceConfig`] function.
        pub fn updateNamespaceConfig(
            &self,
            newPrefix: alloy::sol_types::private::primitives::aliases::U256,
            newMultiplier: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateNamespaceConfigCall, N> {
            self.call_builder(
                &updateNamespaceConfigCall {
                    newPrefix,
                    newMultiplier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`NamespaceConfigUpdated`] event.
        pub fn NamespaceConfigUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, NamespaceConfigUpdated, N> {
            self.event_filter::<NamespaceConfigUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`SyndicateSequencingChainCreated`] event.
        pub fn SyndicateSequencingChainCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SyndicateSequencingChainCreated, N> {
            self.event_filter::<SyndicateSequencingChainCreated>()
        }
    }
}
