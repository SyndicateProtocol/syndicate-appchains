/**

Generated by the following Solidity interface...
```solidity
interface SyndicateFactory {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error ChainIdAlreadyExists();
    error Create2EmptyBytecode();
    error EnforcedPause();
    error ExpectedPause();
    error FailedDeployment();
    error InsufficientBalance(uint256 balance, uint256 needed);
    error StringsInvalidChar();
    error ZeroAddress();

    event ChainIdManuallyMarked(uint256 indexed chainId);
    event NamespaceConfigUpdated(uint256 oldNamespacePrefix, uint256 newNamespacePrefix);
    event Paused(address account);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event SyndicateSequencingChainCreated(uint256 indexed appchainId, address indexed sequencingChainAddress, address indexed permissionModuleAddress);
    event Unpaused(address account);

    constructor(address admin);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function computeSequencingChainAddress(bytes32 salt, uint256 chainId) external view returns (address);
    function createSyndicateSequencingChain(uint256 appchainId, address admin, address permissionModule, bytes32 salt) external returns (address sequencingChain, uint256 actualChainId);
    function getBytecode(uint256 chainId) external pure returns (bytes memory);
    function getNextChainId() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isChainIdUsed(uint256 chainId) external view returns (uint256);
    function markChainIdAsUsed(uint256 chainId) external;
    function namespacePrefix() external view returns (uint256);
    function nextAutoChainId() external view returns (uint256);
    function pause() external;
    function paused() external view returns (bool);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function unpause() external;
    function updateNamespaceConfig(uint256 newPrefix) external;
    function usedChainIds(uint256) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "computeSequencingChainAddress",
    "inputs": [
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createSyndicateSequencingChain",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "permissionModule",
        "type": "address",
        "internalType": "contract IRequirementModule"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "sequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "actualChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getBytecode",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getNextChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isChainIdUsed",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "markChainIdAsUsed",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "namespacePrefix",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nextAutoChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateNamespaceConfig",
    "inputs": [
      {
        "name": "newPrefix",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "usedChainIds",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ChainIdManuallyMarked",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NamespaceConfigUpdated",
    "inputs": [
      {
        "name": "oldNamespacePrefix",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newNamespacePrefix",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Paused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SyndicateSequencingChainCreated",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "permissionModuleAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpaused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ChainIdAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "Create2EmptyBytecode",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EnforcedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExpectedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedDeployment",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientBalance",
    "inputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "StringsInvalidChar",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610232565b610021610034565b614efa61049f8239614efa90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126153998038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b90565b5f1b90565b61016461015f61016992610115565b61014b565b610148565b90565b6101755f610150565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b90565b90565b6101b66101b16101bb9261019c565b610118565b61019f565b90565b906101ca5f199161014b565b9181191691161790565b6101e86101e36101ed9261019f565b610118565b61019f565b90565b90565b9061020861020361020f926101d4565b6101f0565b82546101be565b9055565b90565b61022a61022561022f92610213565b610118565b61019f565b90565b61023a610310565b8061025561024f61024a5f610137565b6100a7565b916100a7565b146102aa5761027e9061027061026961016c565b829061038d565b50610279610178565b61038d565b5061029461028d6101fe6101a2565b60026101f3565b6102a86102a16001610216565b60036101f3565b565b5f63d92e233d60e01b8152806102c260048201610143565b0390fd5b906102d260ff9161014b565b9181191691161790565b151590565b6102ea906102dc565b90565b90565b9061030561030061030c926102e1565b6102ed565b82546102c6565b9055565b61031b5f60016102f0565b565b5f90565b61032a90610148565b90565b9061033790610321565b5f5260205260405f2090565b61035761035261035c9261009c565b610118565b61009c565b90565b61036890610343565b90565b6103749061035f565b90565b906103819061036b565b5f5260205260405f2090565b61039561031d565b506103aa6103a4828490610464565b156102dc565b5f14610432576103d160016103cc5f6103c481869061032d565b018590610377565b6102f0565b906103da610491565b9061041761041161040b7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610321565b9261036b565b9261036b565b92610420610034565b8061042a81610143565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61044f61045491610438565b61043d565b90565b6104619054610443565b90565b61048a915f61047f6104859361047861031d565b508261032d565b01610377565b610457565b90565b5f90565b61049961048d565b50339056fe60806040526004361015610013575b610a11565b61001d5f3561016c565b806301ffc9a7146101675780630d5869ee146101625780631f43fc8b1461015d578063248a9ca314610158578063297f4c64146101535780632cd799bd1461014e5780632f2ff15d1461014957806336568abe146101445780633bfec7a21461013f5780633f4ba83a1461013a5780635c975abb146101355780637232c133146101305780638456cb591461012b5780638c39aaa4146101265780638de6e28c1461012157806391d148541461011c578063999d71d414610117578063a217fddf14610112578063d547741f1461010d578063d9852abf146101085763ec87621c0361000e576109dc565b610973565b6108a7565b610872565b610802565b6107bd565b610788565b610755565b610722565b6106ed565b6106b8565b610685565b610652565b61061e565b6105ea565b610560565b6104c0565b610422565b6103ac565b6102eb565b6101f4565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61019581610180565b0361019c57565b5f80fd5b905035906101ad8261018c565b565b906020828203126101c8576101c5915f016101a0565b90565b61017c565b151590565b6101db906101cd565b9052565b91906101f2905f602085019401906101d2565b565b346102245761022061020f61020a3660046101af565b610a19565b610217610172565b918291826101df565b0390f35b610178565b90565b61023581610229565b0361023c57565b5f80fd5b9050359061024d8261022c565b565b9060208282031261026857610265915f01610240565b90565b61017c565b90565b61028461027f61028992610229565b61026d565b610229565b90565b9061029690610270565b5f5260205260405f2090565b1c90565b60ff1690565b6102bc9060086102c193026102a2565b6102a6565b90565b906102cf91546102ac565b90565b6102e8906102e36004915f9261028c565b6102c4565b90565b3461031b5761031761030661030136600461024f565b6102d2565b61030e610172565b918291826101df565b0390f35b610178565b90565b61032c81610320565b0361033357565b5f80fd5b9050359061034482610323565b565b919060408382031261036e578061036261036b925f8601610337565b93602001610240565b90565b61017c565b60018060a01b031690565b61038790610373565b90565b6103939061037e565b9052565b91906103aa905f6020850194019061038a565b565b346103dd576103d96103c86103c2366004610346565b90610a63565b6103d0610172565b91829182610397565b0390f35b610178565b906020828203126103fb576103f8915f01610337565b90565b61017c565b61040990610320565b9052565b9190610420905f60208501940190610400565b565b346104525761044e61043d6104383660046103e2565b610ae5565b610445610172565b9182918261040d565b0390f35b610178565b5f91031261046157565b61017c565b90565b61047990600861047e93026102a2565b610466565b90565b9061048c9154610469565b90565b61049b60025f90610481565b90565b6104a790610229565b9052565b91906104be905f6020850194019061049e565b565b346104f0576104d0366004610457565b6104ec6104db61048f565b6104e3610172565b918291826104ab565b0390f35b610178565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61053661053f6020936105449361052d816104f5565b938480936104f9565b95869101610502565b61050d565b0190565b61055d9160208201915f818403910152610517565b90565b346105905761058c61057b61057636600461024f565b610ba2565b610583610172565b91829182610548565b0390f35b610178565b61059e8161037e565b036105a557565b5f80fd5b905035906105b682610595565b565b91906040838203126105e057806105d46105dd925f8601610337565b936020016105a9565b90565b61017c565b5f0190565b34610619576106036105fd3660046105b8565b90610c47565b61060b610172565b80610615816105e5565b0390f35b610178565b3461064d576106376106313660046105b8565b90610c53565b61063f610172565b80610649816105e5565b0390f35b610178565b346106805761066a61066536600461024f565b610da8565b610672610172565b8061067c816105e5565b0390f35b610178565b346106b357610695366004610457565b61069d610dd7565b6106a5610172565b806106af816105e5565b0390f35b610178565b346106e8576106c8366004610457565b6106e46106d3610de1565b6106db610172565b918291826101df565b0390f35b610178565b3461071d5761071961070861070336600461024f565b610e58565b610710610172565b918291826104ab565b0390f35b610178565b3461075057610732366004610457565b61073a610ec5565b610742610172565b8061074c816105e5565b0390f35b610178565b346107835761076d61076836600461024f565b610fb8565b610775610172565b8061077f816105e5565b0390f35b610178565b346107b857610798366004610457565b6107b46107a361100f565b6107ab610172565b918291826104ab565b0390f35b610178565b346107ee576107ea6107d96107d33660046105b8565b906110c3565b6107e1610172565b918291826101df565b0390f35b610178565b6107ff60035f90610481565b90565b3461083257610812366004610457565b61082e61081d6107f3565b610825610172565b918291826104ab565b0390f35b610178565b90565b5f1b90565b61085361084e61085892610837565b61083a565b610320565b90565b6108645f61083f565b90565b61086f61085b565b90565b346108a257610882366004610457565b61089e61088d610867565b610895610172565b9182918261040d565b0390f35b610178565b346108d6576108c06108ba3660046105b8565b90611116565b6108c8610172565b806108d2816105e5565b0390f35b610178565b6108e49061037e565b90565b6108f0816108db565b036108f757565b5f80fd5b90503590610908826108e7565b565b60808183031261094b57610920825f8301610240565b9261094861093184602085016105a9565b9361093f81604086016108fb565b93606001610337565b90565b61017c565b91602061097192949361096a60408201965f83019061038a565b019061049e565b565b346109a85761098f61098636600461090a565b92919091611467565b906109a461099b610172565b92839283610950565b0390f35b610178565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6109d96109ad565b90565b34610a0c576109ec366004610457565b610a086109f76109d1565b6109ff610172565b9182918261040d565b0390f35b610178565b5f80fd5b5f90565b610a21610a15565b5080610a3c610a36637965db0b60e01b610180565b91610180565b14908115610a49575b5090565b610a539150611488565b5f610a45565b5f90565b60200190565b90610a7a610a9392610a73610a59565b5091610ba2565b610a8c610a86826104f5565b91610a5d565b20906114ba565b90565b5f90565b610aa390610320565b90565b90610ab090610a9a565b5f5260205260405f2090565b5f1c90565b90565b610ad0610ad591610abc565b610ac1565b90565b610ae29054610ac4565b90565b6001610afd610b0392610af6610a96565b505f610aa6565b01610ad8565b90565b606090565b634e487b7160e01b5f52604160045260245ffd5b90610b299061050d565b810190811067ffffffffffffffff821117610b4357604052565b610b0b565b90610b5b610b54610172565b9283610b1f565b565b905090565b610b87610b7e92602092610b75816104f5565b94858093610b5d565b93849101610502565b0190565b610b9990610b9f9392610b62565b90610b62565b90565b610c1a610be591610bb1610b06565b50610bf4612bab91610bc560208401610b48565b9280845261234f6020850139610bd9610172565b948591602083016104ab565b60208201810382520384610b1f565b610c0b610bff610172565b93849260208401610b8b565b60208201810382520382610b1f565b90565b90610c3891610c33610c2e82610ae5565b6114db565b610c3a565b565b90610c44916114ef565b50565b90610c5191610c1d565b565b9080610c6e610c68610c6361159a565b61037e565b9161037e565b03610c7f57610c7c916115a7565b50565b5f63334bd91960e11b815280610c97600482016105e5565b0390fd5b610cb490610caf610caa6109ad565b6114db565b610d1c565b565b610cc2610cc791610abc565b6102a6565b90565b610cd49054610cb6565b90565b90610ce360ff9161083a565b9181191691161790565b610cf6906101cd565b90565b90565b90610d11610d0c610d1892610ced565b610cf9565b8254610cd7565b9055565b610d30610d2b6004839061028c565b610cca565b610d8c57610d4a6001610d456004849061028c565b610cfc565b610d747f21c25cd0a54e1609e3e68b335693eefb694d5ef17cc32b106f913f8a1f1b805891610270565b90610d7d610172565b80610d87816105e5565b0390a2565b5f6324591d8960e01b815280610da4600482016105e5565b0390fd5b610db190610c9b565b565b610dc3610dbe61085b565b6114db565b610dcb610dcd565b565b610dd56116a8565b565b610ddf610db3565b565b610de9610a15565b50610df46001610cca565b90565b5f90565b60ff1690565b610e15610e10610e1a92610837565b61026d565b610dfb565b90565b90565b610e34610e2f610e3992610e1d565b61026d565b610dfb565b90565b610e50610e4b610e5592610dfb565b61026d565b610229565b90565b610e6f610e7491610e67610df7565b50600461028c565b610cca565b5f14610e9057610e8d610e876001610e20565b5b610e3c565b90565b610e8d610e9c5f610e01565b610e88565b610eb1610eac61085b565b6114db565b610eb9610ebb565b565b610ec3611712565b565b610ecd610ea1565b565b610ee890610ee3610ede6109ad565b6114db565b610f67565b565b610ef6610efb91610abc565b610466565b90565b610f089054610eea565b90565b90610f175f199161083a565b9181191691161790565b90565b90610f39610f34610f4092610270565b610f21565b8254610f0b565b9055565b916020610f65929493610f5e60408201965f83019061049e565b019061049e565b565b610f716002610efe565b610f7c826002610f24565b907fd9e1239177bfbd2aebf5d0f20fc075e6df5a502c59d121acd57342c783e3136491610fb3610faa610172565b92839283610f44565b0390a1565b610fc190610ecf565b565b5190565b905090565b610ff1610fe892602092610fdf81610fc3565b94858093610fc7565b93849101610502565b0190565b611003906110099392610fcc565b90610fcc565b90565b90565b611017610df7565b5061107661107161103061102b6002610efe565b611815565b61106c6110456110406003610efe565b611815565b9161105d611051610172565b93849260208401610ff5565b60208201810382520382610b1f565b61100c565b6118c1565b90565b61108d61108861109292610373565b61026d565b610373565b90565b61109e90611079565b90565b6110aa90611095565b90565b906110b7906110a1565b5f5260205260405f2090565b6110e9915f6110de6110e4936110d7610a15565b5082610aa6565b016110ad565b610cca565b90565b90611107916111026110fd82610ae5565b6114db565b611109565b565b90611113916115a7565b50565b90611120916110ec565b565b9061113895949392916111336118f3565b61122c565b9091565b61115061114b61115592610837565b61026d565b610373565b90565b6111619061113c565b90565b61116d90611095565b90565b61118461117f61118992610837565b61026d565b610229565b90565b634e487b7160e01b5f52601160045260245ffd5b6111a990610229565b5f1981146111b75760010190565b61118c565b6111c590611079565b90565b6111d1906111bc565b90565b6111dd90611095565b90565b5f80fd5b60e01b90565b5f9103126111f457565b61017c565b91602061121a92949361121360408201965f83019061038a565b019061038a565b565b611224610172565b3d5f823e3d90fd5b95949593929350508261124f6112496112445f611158565b61037e565b9161037e565b14801561143d575b611421578061126e6112685f611170565b91610229565b145f1461141b5761127d61100f565b5b9461129361128e6004889061028c565b610cca565b6113ff576112e3916112b160016112ac60048a9061028c565b610cfc565b6112c36112bd5f611170565b91610229565b146113de575b6112d286610ba2565b6112de5f929192611170565b61191d565b916112f56112f0846111c8565b6111d4565b9063485cc9559061130584611164565b92803b156113d95761132a5f809461133561131e610172565b978896879586946111e4565b8452600484016111f9565b03925af180156113d4576113a8575b5083906113518391611164565b9061138e6113886113827f49b21f1e4190db8b0a933c951ed013de222c847c15461754682daa2eab1fdbd295610270565b926110a1565b926110a1565b92611397610172565b806113a1816105e5565b0390a49190565b6113c7905f3d81116113cd575b6113bf8183610b1f565b8101906111ea565b5f611344565b503d6113b5565b61121c565b6111e0565b6113fa6113f36113ee6003610efe565b6111a0565b6003610f24565b6112c9565b5f6324591d8960e01b815280611417600482016105e5565b0390fd5b8061127e565b5f63d92e233d60e01b815280611439600482016105e5565b0390fd5b5061144782611164565b61146161145b6114565f611158565b61037e565b9161037e565b14611257565b90611484939291611476610a59565b61147e610df7565b90611122565b9091565b611490610a15565b506114aa6114a46301ffc9a760e01b610180565b91610180565b1490565b6114b790611095565b90565b906114d8916114c7610a59565b50906114d2306114ae565b91611a0a565b90565b6114ed906114e761159a565b90611a5e565b565b6114f7610a15565b5061150c6115068284906110c3565b156101cd565b5f1461159457611533600161152e5f611526818690610aa6565b0185906110ad565b610cfc565b9061153c61159a565b9061157961157361156d7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610a9a565b926110a1565b926110a1565b92611582610172565b8061158c816105e5565b0390a4600190565b50505f90565b6115a2610a59565b503390565b6115af610a15565b506115bb8183906110c3565b5f14611642576115e15f6115dc5f6115d4818690610aa6565b0185906110ad565b610cfc565b906115ea61159a565b9061162761162161161b7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610a9a565b926110a1565b926110a1565b92611630610172565b8061163a816105e5565b0390a4600190565b50505f90565b611650611a99565b61165861165a565b565b6116655f6001610cfc565b61166d61159a565b6116a37f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161169a610172565b91829182610397565b0390a1565b6116b0611648565b565b6116ba6118f3565b6116c26116c4565b565b6116cf600180610cfc565b6116d761159a565b61170d7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891611704610172565b91829182610397565b0390a1565b61171a6116b2565b565b606090565b61173561173061173a92610e1d565b61026d565b610229565b90565b906117489101610229565b90565b67ffffffffffffffff81116117695761176560209161050d565b0190565b610b0b565b9061178061177b8361174b565b610b48565b918252565b369037565b906117af6117978361176e565b926020806117a5869361174b565b9201910390611785565b565b60016117bd9103610229565b90565b90565b6117d76117d26117dc926117c0565b61026d565b610229565b90565b634e487b7160e01b5f52601260045260245ffd5b6117ff61180591610229565b91610229565b908115611810570490565b6117df565b61181d61171c565b5061183a61182a82611c40565b6118346001611721565b9061173d565b906118448261178a565b9161184d610df7565b5060200182015b6001156118b757611867611893916117b1565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a835361188d600a6117c3565b906117f3565b806118a66118a05f611170565b91610229565b146118b15790611854565b50505b90565b50506118b4565b90565b6118f0906118cd610df7565b50806118ea6118e46118df5f946118be565b6104f5565b92611170565b90611ea1565b90565b6118fb610de1565b61190157565b5f63d93c066560e01b815280611919600482016105e5565b0390fd5b919091611928610a59565b50611932306114ae565b3161194561193f83610229565b91610229565b106119e257611953826104f5565b61196561195f5f611170565b91610229565b146119c65760208251920190f5903d15198215166119bb578161199861199261198d5f611158565b61037e565b9161037e565b1461199f57565b5f63b06ebf3d60e01b8152806119b7600482016105e5565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b8152806119de600482016105e5565b0390fd5b6119eb306114ae565b31611a065f92839263cf47918160e01b845260048401610f44565b0390fd5b91600b92611a16610a59565b50604051926040840152602083015281520160ff8153605560018060a01b0391201690565b916020611a5c929493611a5560408201965f83019061038a565b0190610400565b565b90611a73611a6d8383906110c3565b156101cd565b611a7b575050565b611a955f92839263e2517d3f60e01b845260048401611a3b565b0390fd5b611aaa611aa4610de1565b156101cd565b611ab057565b5f638dfc202b60e01b815280611ac8600482016105e5565b0390fd5b90565b611ae3611ade611ae892611acc565b61026d565b610229565b90565b90565b611b02611afd611b0792611aeb565b61026d565b610229565b90565b90565b611b21611b1c611b2692611b0a565b61026d565b610229565b90565b90565b611b40611b3b611b4592611b29565b61026d565b610229565b90565b90565b611b5f611b5a611b6492611b48565b61026d565b610229565b90565b90565b611b7e611b79611b8392611b67565b61026d565b610229565b90565b90565b611b9d611b98611ba292611b86565b61026d565b610229565b90565b90565b611bbc611bb7611bc192611ba5565b61026d565b610229565b90565b90565b611bdb611bd6611be092611bc4565b61026d565b610229565b90565b90565b611bfa611bf5611bff92611be3565b61026d565b610229565b90565b90565b611c19611c14611c1e92611c02565b61026d565b610229565b90565b90565b611c38611c33611c3d92611c21565b61026d565b610229565b90565b611c48610df7565b50611c525f611170565b9080611c81611c7b7a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000611acf565b91610229565b1015611e59575b80611ca9611ca36d04ee2d6d415b85acef8100000000611b0d565b91610229565b1015611e1e575b80611cca611cc4662386f26fc10000611b4b565b91610229565b1015611dea575b80611ce8611ce26305f5e100611b89565b91610229565b1015611db9575b80611d04611cfe612710611bc7565b91610229565b1015611d8a575b80611d1f611d196064611c05565b91610229565b1015611d5c575b611d39611d33600a6117c3565b91610229565b1015611d43575b90565b611d5790611d516001611721565b9061173d565b611d40565b611d73611d8491611d6d6064611c05565b906117f3565b91611d7e6002611c24565b9061173d565b90611d26565b611da2611db391611d9c612710611bc7565b906117f3565b91611dad6004611be6565b9061173d565b90611d0b565b611dd3611de491611dcd6305f5e100611b89565b906117f3565b91611dde6008611ba8565b9061173d565b90611cef565b611e07611e1891611e01662386f26fc10000611b4b565b906117f3565b91611e126010611b6a565b9061173d565b90611cd1565b611e42611e5391611e3c6d04ee2d6d415b85acef8100000000611b0d565b906117f3565b91611e4d6020611b2c565b9061173d565b90611cb0565b611e8a611e9b91611e847a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000611acf565b906117f3565b91611e956040611aee565b9061173d565b90611c88565b90611ec392611ebb92611eb2610df7565b50919091611ee6565b9190156101cd565b611eca5790565b5f634a7139bf60e11b815280611ee2600482016105e5565b0390fd5b91611eef610a15565b50611ef8610df7565b5080611f1c611f16611f11611f0c876118be565b6104f5565b610229565b91610229565b118015611f4b575b611f3a57611f3492919091612002565b91909190565b5050505f90611f485f611170565b90565b5081611f5f611f5983610229565b91610229565b11611f24565b6001611f719101610229565b90565b60ff60f81b1690565b611f8690611f74565b90565b90565b611fa0611f9b611fa592611f89565b61026d565b610dfb565b90565b611fb7611fbd91939293610229565b92610229565b91611fc9838202610229565b928184041490151715611fd857565b61118c565b611fec611ff291939293610229565b92610229565b8201809211611ffd57565b61118c565b61201d9061200e610a15565b50612017610df7565b506118be565b6120265f611170565b5b8261203a61203486610229565b91610229565b10156120be5761205b6120566120518486906120c9565b611f7d565b612237565b908161207061206a6009611f8c565b91610dfb565b116120ab576120a59161209961209361209f9361208d600a6117c3565b90611fa8565b91610e3c565b90611fdd565b92611f65565b91612027565b50505050505f906120bb5f611170565b90565b939250505060019190565b906120d2610a96565b50602001015190565b5f90565b60f81c90565b6120f96120f46120fe92610dfb565b61026d565b610dfb565b90565b61210d612112916120df565b6120e5565b90565b90565b61212c61212761213192612115565b61026d565b610dfb565b90565b90565b61214b61214661215092612134565b61026d565b610dfb565b90565b90565b61216a61216561216f92612153565b61026d565b610dfb565b90565b90565b61218961218461218e92612172565b61026d565b610dfb565b90565b6121a56121a06121aa92611aeb565b61026d565b610dfb565b90565b90565b6121c46121bf6121c9926121ad565b61026d565b610dfb565b90565b90565b6121e36121de6121e8926121cc565b61026d565b610dfb565b90565b906121f69103610dfb565b90565b90565b61221061220b612215926121f9565b61026d565b610dfb565b90565b90565b61222f61222a61223492612218565b61026d565b610dfb565b90565b612249906122436120db565b50612101565b8061225d612257602f612118565b91610dfb565b1180612333575b5f146122825761227e90612278603061221b565b906121eb565b5b90565b806122966122906060612156565b91610dfb565b1180612318575b5f146122bd576122b7906122b160576121fc565b906121eb565b5b61227f565b806122d16122cb6040612191565b91610dfb565b11806122fd575b5f146122f7576122f2906122ec60376121cf565b906121eb565b6122b8565b5060ff90565b508061231261230c60476121b0565b91610dfb565b106122d8565b508061232d6123276067612175565b91610dfb565b1061229d565b5080612348612342603a612137565b91610dfb565b1061226456fe60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b6124d6610516823960805181610b9201526124d690f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107612bab803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610169601860209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf610232565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60081b90565b906101f461ff00916101e1565b9181191691161790565b151590565b61020c906101fe565b90565b90565b9061022761022261022e92610203565b61020f565b82546101e7565b9055565b61023a61032a565b61024660016003610212565b565b60a01b90565b9061025d60ff60a01b91610248565b9181191691161790565b9061027c61027761028392610203565b61020f565b825461024e565b9055565b5f0190565b61029461003d565b3d5f823e3d90fd5b60018060a01b031690565b6102bb6102b66102c09261029c565b61010d565b61029c565b90565b6102cc906102a7565b90565b6102d8906102c3565b90565b5f1b90565b906102f160018060a01b03916102db565b9181191691161790565b610304906102c3565b90565b90565b9061031f61031a610326926102fb565b610307565b82546102e0565b9055565b61033333610397565b61033e5f6001610267565b61034661003d565b6101bf810181811060018060401b038211176103925761036e82916101bf6129ec8439610287565b03905ff0801561038d5761038461038b916102cf565b600161030a565b565b61028c565b610051565b6103a0906103f8565b565b6103b66103b16103bb9261010a565b61010d565b61029c565b90565b6103c7906103a2565b90565b6103d39061029c565b90565b6103df906103ca565b9052565b91906103f6905f602085019401906103d6565b565b8061041361040d6104085f6103be565b6103ca565b916103ca565b1461042357610421906104b6565b565b61044661042f5f6103be565b5f918291631e4fbdf760e01b8352600483016103e3565b0390fd5b5f1c90565b60018060a01b031690565b61046661046b9161044a565b61044f565b90565b610478905461045a565b90565b610484906102a7565b90565b6104909061047b565b90565b90565b906104ab6104a66104b292610487565b610493565b82546102e0565b9055565b6104bf5f61046e565b6104c9825f610496565b906104fd6104f77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610487565b91610487565b9161050661003d565b8061051081610287565b0390a356fe60806040526004361015610013575b610e72565b61001d5f356101fc565b8063086146d2146101f757806318d5aafe146101f2578063366cbab7146101ed5780633b6ab2a9146101e857806346e2cc09146101e3578063485cc955146101de5780634b2c0706146101d95780635467cb48146101d45780635b3cd6e2146101cf57806361543801146101ca5780636558954f146101c5578063715018a6146101c05780637a3979dc146101bb5780637fbd295e146101b6578063804e5123146101b157806382f44ade146101ac57806384fab62b146101a75780638d5a239b146101a25780638da5cb5b1461019d578063aff74c6d14610198578063c660d3f314610193578063cdafb9781461018e578063d4f0eb4d14610189578063d878134214610184578063de1f453e1461017f578063ea4a11041461017a578063ede07bd614610175578063f2fde38b14610170578063f7b8935e1461016b5763ff7b30840361000e57610e3d565b610df8565b610d98565b610d63565b610cf2565b610be9565b610bb4565b610b5d565b610b0b565b610a61565b610a2c565b6109f7565b6109a0565b61096b565b610926565b6108f2565b6108bd565b610884565b6107ff565b6107ca565b61075c565b6106cd565b610601565b6105cc565b610557565b6104bc565b610482565b61040d565b6102e8565b61028c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261021a57565b61020c565b90565b61022b9061021f565b9052565b90606080610275936102475f8201515f860190610222565b61025960208201516020860190610222565b61026b60408201516040860190610222565b0151910190610222565b565b919061028a905f6080850194019061022f565b565b346102bc5761029c366004610210565b6102b86102a7610f22565b6102af610202565b91829182610277565b0390f35b610208565b151590565b6102cf906102c1565b9052565b91906102e6905f602085019401906102c6565b565b34610318576102f8366004610210565b610314610303610f5b565b61030b610202565b918291826102d3565b0390f35b610208565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103675781359167ffffffffffffffff831161036257602001926001830284011161035d57565b610329565b610325565b610321565b9060208282031261039d575f82013567ffffffffffffffff811161039857610394920161032d565b9091565b61031d565b61020c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6103e36103ec6020936103f1936103da816103a2565b938480936103a6565b958691016103af565b6103ba565b0190565b61040a9160208201915f8184039101526103c4565b90565b3461043e5761043a61042961042336600461036c565b90611002565b610431610202565b918291826103f5565b0390f35b610208565b1c90565b60ff1690565b61045d9060086104629302610443565b610447565b90565b90610470915461044d565b90565b61047f60035f90610465565b90565b346104b257610492366004610210565b6104ae61049d610473565b6104a5610202565b918291826102d3565b0390f35b610208565b5f0190565b346104eb576104d56104cf36600461036c565b906111f3565b6104dd610202565b806104e7816104b7565b0390f35b610208565b60018060a01b031690565b610504906104f0565b90565b610510816104fb565b0361051757565b5f80fd5b9050359061052882610507565b565b9190604083820312610552578061054661054f925f860161051b565b9360200161051b565b90565b61020c565b346105865761057061056a36600461052a565b906113a4565b610578610202565b80610582816104b7565b0390f35b610208565b6105948161021f565b0361059b57565b5f80fd5b905035906105ac8261058b565b565b906020828203126105c7576105c4915f0161059f565b90565b61020c565b346105fc576105f86105e76105e23660046105ae565b611433565b6105ef610202565b91829182610277565b0390f35b610208565b3461062f57610611366004610210565b61061961146e565b610621610202565b8061062b816104b7565b0390f35b610208565b60018060a01b031690565b61064f9060086106549302610443565b610634565b90565b90610662915461063f565b90565b61067160015f90610657565b90565b90565b61068b610686610690926104f0565b610674565b6104f0565b90565b61069c90610677565b90565b6106a890610693565b90565b6106b49061069f565b9052565b91906106cb905f602085019401906106ab565b565b346106fd576106dd366004610210565b6106f96106e8610665565b6106f0610202565b918291826106b8565b0390f35b610208565b90565b61071590600861071a9302610443565b610702565b90565b906107289154610705565b90565b61073760025f9061071d565b90565b6107439061021f565b9052565b919061075a905f6020850194019061073a565b565b3461078c5761076c366004610210565b61078861077761072b565b61077f610202565b91829182610747565b0390f35b610208565b90565b6107a86107a36107ad92610791565b610674565b61021f565b90565b6107bc62278d00610794565b90565b6107c76107b0565b90565b346107fa576107da366004610210565b6107f66107e56107bf565b6107ed610202565b91829182610747565b0390f35b610208565b3461082d5761080f366004610210565b61081761149d565b61081f610202565b80610829816104b7565b0390f35b610208565b9160608383031261087f57610849825f850161051b565b92610857836020830161051b565b92604082013567ffffffffffffffff811161087a57610876920161032d565b9091565b61031d565b61020c565b346108b8576108b46108a361089a366004610832565b92919091611555565b6108ab610202565b918291826102d3565b0390f35b610208565b346108ed576108cd366004610210565b6108e96108d86115fd565b6108e0610202565b91829182610747565b0390f35b610208565b346109215761090b61090536600461036c565b9061171b565b610913610202565b8061091d816104b7565b0390f35b610208565b3461095657610936366004610210565b610952610941611743565b610949610202565b91829182610747565b0390f35b610208565b6109686003600190610465565b90565b3461099b5761097b366004610210565b61099761098661095b565b61098e610202565b918291826102d3565b0390f35b610208565b346109d0576109b0366004610210565b6109cc6109bb6117d3565b6109c3610202565b91829182610747565b0390f35b610208565b6109de906104fb565b9052565b91906109f5905f602085019401906109d5565b565b34610a2757610a07366004610210565b610a23610a12611822565b610a1a610202565b918291826109e2565b0390f35b610208565b34610a5c57610a3c366004610210565b610a58610a47611856565b610a4f610202565b91829182610747565b0390f35b610208565b34610a9157610a71366004610210565b610a8d610a7c6118a2565b610a84610202565b91829182610747565b0390f35b610208565b909182601f83011215610ad05781359167ffffffffffffffff8311610acb576020019260208302840111610ac657565b610329565b610325565b610321565b90602082820312610b06575f82013567ffffffffffffffff8111610b0157610afd9201610a96565b9091565b61031d565b61020c565b34610b3a57610b24610b1e366004610ad5565b90611a78565b610b2c610202565b80610b36816104b7565b0390f35b610208565b90602082820312610b5857610b55915f0161051b565b90565b61020c565b34610b8b57610b75610b70366004610b3f565b611b28565b610b7d610202565b80610b87816104b7565b0390f35b610208565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610be457610bc4366004610210565b610be0610bcf610b90565b610bd7610202565b91829182610747565b0390f35b610208565b34610c1757610bf9366004610210565b610c01611b4f565b610c09610202565b80610c13816104b7565b0390f35b610208565b610c30610c2b610c359261021f565b610674565b61021f565b90565b90610c4290610c1c565b5f5260205260405f2090565b5f1c90565b610c5f610c6491610c4e565b610702565b90565b610c719054610c53565b90565b610c7f906004610c38565b90610c8b5f8301610c67565b91610c9860018201610c67565b91610cb16003610caa60028501610c67565b9301610c67565b90565b610ce9610cf094610cdf606094989795610cd5608086019a5f87019061073a565b602085019061073a565b604083019061073a565b019061073a565b565b34610d2657610d22610d0d610d083660046105ae565b610c74565b90610d19949294610202565b94859485610cb4565b0390f35b610208565b90565b610d42610d3d610d4792610d2b565b610674565b61021f565b90565b610d55611388610d2e565b90565b610d60610d4a565b90565b34610d9357610d73366004610210565b610d8f610d7e610d58565b610d86610202565b91829182610747565b0390f35b610208565b34610dc657610db0610dab366004610b3f565b611bbe565b610db8610202565b80610dc2816104b7565b0390f35b610208565b9190604083820312610df35780610de7610df0925f860161059f565b9360200161059f565b90565b61020c565b34610e2957610e25610e14610e0e366004610dcb565b90611c54565b610e1c610202565b91829182610747565b0390f35b610208565b610e3a60055f9061071d565b90565b34610e6d57610e4d366004610210565b610e69610e58610e2e565b610e60610202565b91829182610747565b0390f35b610208565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90610e94906103ba565b810190811067ffffffffffffffff821117610eae57604052565b610e76565b90610ec6610ebf610202565b9283610e8a565b565b610ed26080610eb3565b90565b5f90565b610ee1610ec8565b90602080808085610ef0610ed5565b815201610efb610ed5565b815201610f06610ed5565b815201610f11610ed5565b81525050565b610f1f610ed9565b90565b610f2a610f17565b50610f33611cfe565b90565b5f90565b610f46610f4b91610c4e565b610447565b90565b610f589054610f3a565b90565b610f63610f36565b50610f6e6003610f4e565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b610f9c610f97610fa192610f76565b610f82565b610f79565b90565b90565b610fb3610fb891610f79565b610fa4565b9052565b905090565b90825f939282370152565b909182610fdc81610fe393610fbc565b8093610fc1565b0190565b80610ff8600192610fff9694610fa7565b0191610fcc565b90565b6110409061100e610f71565b5061103161101b5f610f88565b9193611025610202565b94859360208501610fe7565b60208201810382520382610e8a565b90565b9061105f61105933329085859192909192611555565b156102c1565b61106e5761106c9161110f565b565b5f631b8e828b60e31b815280611086600482016104b7565b0390fd5b60081c90565b61109c6110a19161108a565b610447565b90565b6110ae9054611090565b90565b634e487b7160e01b5f52601160045260245ffd5b6110d46110da9193929361021f565b9261021f565b82039182116110e557565b6110b1565b6110f96110ff9193929361021f565b9261021f565b820180921161110a57565b6110b1565b9061112361111d60036110a4565b156102c1565b611158576111436111569261113c611151935a926111ac565b5a906110c5565b61114b610d4a565b906110ea565b611ed2565b565b611161916111ac565b565b61116c90610693565b90565b9190611189816111828161118e956103a6565b8095610fc1565b6103ba565b0190565b90916111a99260208301925f81850391015261116f565b90565b3390916111d97f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611163565b926111ee6111e5610202565b92839283611192565b0390a2565b906111fd91611043565b565b906112119161120c611fd9565b611317565b565b60a01c90565b61122561122a91611213565b610447565b90565b6112379054611219565b90565b61124e61124961125392610f76565b610674565b6104f0565b90565b61125f9061123a565b90565b60a01b90565b9061127760ff60a01b91611262565b9181191691161790565b61128a906102c1565b90565b90565b906112a56112a06112ac92611281565b61128d565b8254611268565b9055565b6112b990610677565b90565b6112c5906112b0565b90565b5f1b90565b906112de60018060a01b03916112c8565b9181191691161790565b6112f1906112b0565b90565b90565b9061130c611307611313926112e8565b6112f4565b82546112cd565b9055565b611321600161122d565b611389578161134061133a6113355f611256565b6104fb565b916104fb565b1461136d5761136661135f61136b9361135a600180611290565b6112bc565b60016112f7565b611bbe565b565b5f632e7f3c7f60e11b815280611385600482016104b7565b0390fd5b5f62dc149f60e41b8152806113a0600482016104b7565b0390fd5b906113ae916111ff565b565b906113ba9061021f565b9052565b9061142561141c60036113cf610ec8565b946113e66113de5f8301610c67565b5f88016113b0565b6113fe6113f560018301610c67565b602088016113b0565b61141661140d60028301610c67565b604088016113b0565b01610c67565b606084016113b0565b565b611430906113be565b90565b61144a61144f91611442610f17565b506004610c38565b611427565b90565b61145a611fd9565b611462611464565b565b61146c612064565b565b611476611452565b565b611480611fd9565b61148861148a565b565b61149b6114965f611256565b612094565b565b6114a5611478565b565b6114b36114b891610c4e565b610634565b90565b6114c590546114a7565b90565b60e01b90565b6114d7816102c1565b036114de57565b5f80fd5b905051906114ef826114ce565b565b9060208282031261150a57611507915f016114e2565b90565b61020c565b611535611542959394929461152b60608401965f8501906109d5565b60208301906109d5565b604081850391015261116f565b90565b61154d610202565b3d5f823e3d90fd5b9261159860209394611565610f36565b506115a361157b61157660016114bb565b61069f565b93637a3979dc92959761158c610202565b988997889687966114c8565b86526004860161150f565b03915afa9081156115e7575f916115b9575b5090565b6115da915060203d81116115e0575b6115d28183610e8a565b8101906114f1565b5f6115b5565b503d6115c8565b611545565b5f90565b6115fa905161021f565b90565b6116056115ec565b5061162c6116136005610c67565b6116266060611620611cfe565b016115f0565b906110ea565b90565b9061164b61164533329085859192909192611555565b156102c1565b61165a5761165891611676565b565b5f631b8e828b60e31b815280611672600482016104b7565b0390fd5b9061168a61168460036110a4565b156102c1565b6116bf576116aa6116bd926116a36116b8935a926116ca565b5a906110c5565b6116b2610d4a565b906110ea565b611ed2565b565b6116c8916116ca565b565b906116d6903392611002565b906117166117047f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611163565b9261170d610202565b918291826103f5565b0390a2565b906117259161162f565b565b61173b61173661174092610f76565b610674565b61021f565b90565b61174b6115ec565b50611754611cfe565b61175f5f82016115f0565b61177161176b5f611727565b9161021f565b146117c6576117845f61179292016115f0565b61178c6107b0565b906110ea565b426117a561179f8361021f565b9161021f565b10156117b9576117b69042906110c5565b90565b506117c35f611727565b90565b506117d05f611727565b90565b6117db6115ec565b506117ef60606117e9611cfe565b016115f0565b90565b5f90565b60018060a01b031690565b61180d61181291610c4e565b6117f6565b90565b61181f9054611801565b90565b61182a6117f2565b506118345f611815565b90565b90565b61184e61184961185392611837565b610674565b61021f565b90565b61185e6115ec565b5061187261186c6003610f4e565b156102c1565b611896576118936118836002610c67565b61188d600161183a565b906110ea565b90565b61189f5f611727565b90565b6118aa6115ec565b506118be60406118b8611cfe565b016115f0565b90565b906118d56118cf60036110a4565b156102c1565b61190a576118f5611908926118ee611903935a926119af565b5a906110c5565b6118fd610d4a565b906110ea565b611ed2565b565b611913916119af565b565b5090565b6001611925910161021f565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561198a570180359067ffffffffffffffff82116119855760200191600182023603831361198057565b611944565b611940565b61193c565b908210156119aa5760206119a69202810190611948565b9091565b611928565b6119ba818390611915565b916119c36115ec565b506119cd5f611727565b5b806119e16119db8661021f565b9161021f565b1015611a7257611a0f90611a053332906119fd8787869161198f565b929091611555565b611a14575b611919565b6119ce565b33611a2a611a248686859161198f565b90611002565b90611a6a611a587f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611163565b92611a61610202565b918291826103f5565b0390a2611a0a565b50505050565b90611a82916118c1565b565b611a9590611a90611fd9565b611a97565b565b80611ab2611aac611aa75f611256565b6104fb565b916104fb565b14611b0c57611aca611ac3826112bc565b60016112f7565b611af47f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991611163565b90611afd610202565b80611b07816104b7565b0390a2565b5f632e7f3c7f60e11b815280611b24600482016104b7565b0390fd5b611b3190611a84565b565b611b3b611fd9565b611b43611b45565b565b611b4d6120f3565b565b611b57611b33565b565b611b6a90611b65611fd9565b611b6c565b565b80611b87611b81611b7c5f611256565b6104fb565b916104fb565b14611b9757611b9590612094565b565b611bba611ba35f611256565b5f918291631e4fbdf760e01b8352600483016109e2565b0390fd5b611bc790611b59565b565b60209181520190565b5f7f476173436f756e7465723a20696e76616c69642072616e676500000000000000910152565b611c066019602092611bc9565b611c0f81611bd2565b0190565b611c289060208101905f818303910152611bf9565b90565b15611c3257565b611c3a610202565b62461bcd60e51b815280611c5060048201611c13565b0390fd5b611c8391611c606115ec565b50611c7e81611c77611c718561021f565b9161021f565b1015611c2b565b6110c5565b90565b611c906080610eb3565b90565b634e487b7160e01b5f52601260045260245ffd5b611cb3611cb99161021f565b9161021f565b908115611cc4570490565b611c93565b611cd8611cde9193929361021f565b9261021f565b91611cea83820261021f565b928184041490151715611cf957565b6110b1565b611d06610f17565b50611d1a611d146003610f4e565b156102c1565b611e1657611d3b611d366004611d306002610c67565b90610c38565b611427565b42611d69611d63611d5e611d505f86016115f0565b611d586107b0565b906110ea565b61021f565b9161021f565b1015611d725790565b611dbf90611db9611daa5f611da3611d9542611d8f8488016115f0565b906110c5565b611d9d6107b0565b90611ca7565b93016115f0565b91611db36107b0565b90611cc9565b906110ea565b611e13611e0a5f611e05611dfc5f611df7611dee5f95611de9611de0611c86565b9a5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b90565b5f611e73611e6a5f611e65611e5c5f611e57611e4e5f95611e49611e41611e3b611c86565b9b611727565b5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b90565b90611e825f19916112c8565b9181191691161790565b90565b90611ea4611e9f611eab92610c1c565b611e8c565b8254611e76565b9055565b916020611ed0929493611ec960408201965f83019061073a565b019061073a565b565b611ee5611edf60036110a4565b156102c1565b611fd657611efc611ef66003610f4e565b156102c1565b611fc9575b611f096122c9565b611f7a611f17823a90611cc9565b611f4a83611f446002611f346004611f2e83610c67565b90610c38565b0191611f3f83610c67565b6110ea565b90611e8f565b611f746003611f646004611f5e6002610c67565b90610c38565b0191611f6f83610c67565b6110ea565b90611e8f565b611f846002610c67565b3a611faf7f2d9c47ad553b63bbbad1819d4fd97da088505c96a58182691b8abb5f2bcc29ee92610c1c565b92611fc4611fbb610202565b92839283611eaf565b0390a2565b611fd16121be565b611f01565b50565b611fe1611822565b611ffa611ff4611fef6124c9565b6104fb565b916104fb565b0361200157565b61202361200c6124c9565b5f91829163118cdaa760e01b8352600483016109e2565b0390fd5b60081b90565b9061203a61ff0091612027565b9181191691161790565b9061205961205461206092611281565b61128d565b825461202d565b9055565b61206f5f6003612044565b565b90565b9061208961208461209092611163565b612071565b82546112cd565b9055565b61209d5f611815565b6120a7825f612074565b906120db6120d57f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611163565b91611163565b916120e4610202565b806120ee816104b7565b0390a3565b6120ff60016003612044565b565b9061210d60ff916112c8565b9181191691161790565b9061212c61212761213392611281565b61128d565b8254612101565b9055565b9061214190611727565b5f5260205260405f2090565b906121aa606060036121b0946121705f820161216a5f88016115f0565b90611e8f565b61218960018201612183602088016115f0565b90611e8f565b6121a26002820161219c604088016115f0565b90611e8f565b0192016115f0565b90611e8f565b565b906121bc9161214d565b565b6121d16121cb6003610f4e565b156102c1565b6121d8575b565b6121e460016003612117565b6121f76121f05f611727565b6002611e8f565b6122604261224f6122465f6122416122385f61223361222a5f9561222561221c611c86565b9a5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b61225b60045f90612137565b6121b2565b5f42906122a26122907f41f1e08f21cc818cf0cffb3a62609fb6a3cbc9b3671b011e285e17a1ebb4688e92611727565b92612299610202565b91829182610747565b0390a26121d6565b90565b6122b69061021f565b5f1981146122c45760010190565b6110b1565b6122e66122e160046122db6002610c67565b90610c38565b6122aa565b4261231461230e6123096122fb5f8601610c67565b6123036107b0565b906110ea565b61021f565b9161021f565b101561231e575b50565b61234661233d61232f5f8401610c67565b6123376107b0565b906110ea565b60018301611e8f565b61236e61236761235860038401610c67565b6123626005610c67565b6110ea565b6005611e8f565b6123786002610c67565b6123a561238760028401610c67565b9261239f5f61239860018401610c67565b9201610c67565b906110c5565b6123cf7f48a298f9d376b82a7174a798e90cf1209495fdd68b0c11eb11beabacc2d29cf592610c1c565b926123e46123db610202565b92839283611eaf565b0390a26124036123fc6123f76002610c67565b6122ad565b6002611e8f565b6124754261245b6124525f61244d6124445f61243f6124365f95612431612428611c86565b9a5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b612470600461246a6002610c67565b90610c38565b6121b2565b61247f6002610c67565b42906124c06124ae7f41f1e08f21cc818cf0cffb3a62609fb6a3cbc9b3671b011e285e17a1ebb4688e92610c1c565b926124b7610202565b91829182610747565b0390a25f61231b565b6124d16117f2565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x022V[a\0!a\x004V[aN\xFAa\x04\x9F\x829aN\xFA\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12aS\x99\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01da\x01_a\x01i\x92a\x01\x15V[a\x01KV[a\x01HV[\x90V[a\x01u_a\x01PV[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[\x90V[\x90V[a\x01\xB6a\x01\xB1a\x01\xBB\x92a\x01\x9CV[a\x01\x18V[a\x01\x9FV[\x90V[\x90a\x01\xCA_\x19\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xE8a\x01\xE3a\x01\xED\x92a\x01\x9FV[a\x01\x18V[a\x01\x9FV[\x90V[\x90V[\x90a\x02\x08a\x02\x03a\x02\x0F\x92a\x01\xD4V[a\x01\xF0V[\x82Ta\x01\xBEV[\x90UV[\x90V[a\x02*a\x02%a\x02/\x92a\x02\x13V[a\x01\x18V[a\x01\x9FV[\x90V[a\x02:a\x03\x10V[\x80a\x02Ua\x02Oa\x02J_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x02\xAAWa\x02~\x90a\x02pa\x02ia\x01lV[\x82\x90a\x03\x8DV[Pa\x02ya\x01xV[a\x03\x8DV[Pa\x02\x94a\x02\x8Da\x01\xFEa\x01\xA2V[`\x02a\x01\xF3V[a\x02\xA8a\x02\xA1`\x01a\x02\x16V[`\x03a\x01\xF3V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x02\xC2`\x04\x82\x01a\x01CV[\x03\x90\xFD[\x90a\x02\xD2`\xFF\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\xEA\x90a\x02\xDCV[\x90V[\x90V[\x90a\x03\x05a\x03\0a\x03\x0C\x92a\x02\xE1V[a\x02\xEDV[\x82Ta\x02\xC6V[\x90UV[a\x03\x1B_`\x01a\x02\xF0V[V[_\x90V[a\x03*\x90a\x01HV[\x90V[\x90a\x037\x90a\x03!V[_R` R`@_ \x90V[a\x03Wa\x03Ra\x03\\\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x03h\x90a\x03CV[\x90V[a\x03t\x90a\x03_V[\x90V[\x90a\x03\x81\x90a\x03kV[_R` R`@_ \x90V[a\x03\x95a\x03\x1DV[Pa\x03\xAAa\x03\xA4\x82\x84\x90a\x04dV[\x15a\x02\xDCV[_\x14a\x042Wa\x03\xD1`\x01a\x03\xCC_a\x03\xC4\x81\x86\x90a\x03-V[\x01\x85\x90a\x03wV[a\x02\xF0V[\x90a\x03\xDAa\x04\x91V[\x90a\x04\x17a\x04\x11a\x04\x0B\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x03!V[\x92a\x03kV[\x92a\x03kV[\x92a\x04 a\x004V[\x80a\x04*\x81a\x01CV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x04Oa\x04T\x91a\x048V[a\x04=V[\x90V[a\x04a\x90Ta\x04CV[\x90V[a\x04\x8A\x91_a\x04\x7Fa\x04\x85\x93a\x04xa\x03\x1DV[P\x82a\x03-V[\x01a\x03wV[a\x04WV[\x90V[_\x90V[a\x04\x99a\x04\x8DV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n\x11V[a\0\x1D_5a\x01lV[\x80c\x01\xFF\xC9\xA7\x14a\x01gW\x80c\rXi\xEE\x14a\x01bW\x80c\x1FC\xFC\x8B\x14a\x01]W\x80c$\x8A\x9C\xA3\x14a\x01XW\x80c)\x7FLd\x14a\x01SW\x80c,\xD7\x99\xBD\x14a\x01NW\x80c//\xF1]\x14a\x01IW\x80c6V\x8A\xBE\x14a\x01DW\x80c;\xFE\xC7\xA2\x14a\x01?W\x80c?K\xA8:\x14a\x01:W\x80c\\\x97Z\xBB\x14a\x015W\x80cr2\xC13\x14a\x010W\x80c\x84V\xCBY\x14a\x01+W\x80c\x8C9\xAA\xA4\x14a\x01&W\x80c\x8D\xE6\xE2\x8C\x14a\x01!W\x80c\x91\xD1HT\x14a\x01\x1CW\x80c\x99\x9Dq\xD4\x14a\x01\x17W\x80c\xA2\x17\xFD\xDF\x14a\x01\x12W\x80c\xD5Gt\x1F\x14a\x01\rW\x80c\xD9\x85*\xBF\x14a\x01\x08Wc\xEC\x87b\x1C\x03a\0\x0EWa\t\xDCV[a\tsV[a\x08\xA7V[a\x08rV[a\x08\x02V[a\x07\xBDV[a\x07\x88V[a\x07UV[a\x07\"V[a\x06\xEDV[a\x06\xB8V[a\x06\x85V[a\x06RV[a\x06\x1EV[a\x05\xEAV[a\x05`V[a\x04\xC0V[a\x04\"V[a\x03\xACV[a\x02\xEBV[a\x01\xF4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x95\x81a\x01\x80V[\x03a\x01\x9CWV[_\x80\xFD[\x90P5\x90a\x01\xAD\x82a\x01\x8CV[V[\x90` \x82\x82\x03\x12a\x01\xC8Wa\x01\xC5\x91_\x01a\x01\xA0V[\x90V[a\x01|V[\x15\x15\x90V[a\x01\xDB\x90a\x01\xCDV[\x90RV[\x91\x90a\x01\xF2\x90_` \x85\x01\x94\x01\x90a\x01\xD2V[V[4a\x02$Wa\x02 a\x02\x0Fa\x02\n6`\x04a\x01\xAFV[a\n\x19V[a\x02\x17a\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x90V[a\x025\x81a\x02)V[\x03a\x02<WV[_\x80\xFD[\x90P5\x90a\x02M\x82a\x02,V[V[\x90` \x82\x82\x03\x12a\x02hWa\x02e\x91_\x01a\x02@V[\x90V[a\x01|V[\x90V[a\x02\x84a\x02\x7Fa\x02\x89\x92a\x02)V[a\x02mV[a\x02)V[\x90V[\x90a\x02\x96\x90a\x02pV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x02\xBC\x90`\x08a\x02\xC1\x93\x02a\x02\xA2V[a\x02\xA6V[\x90V[\x90a\x02\xCF\x91Ta\x02\xACV[\x90V[a\x02\xE8\x90a\x02\xE3`\x04\x91_\x92a\x02\x8CV[a\x02\xC4V[\x90V[4a\x03\x1BWa\x03\x17a\x03\x06a\x03\x016`\x04a\x02OV[a\x02\xD2V[a\x03\x0Ea\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x90V[a\x03,\x81a\x03 V[\x03a\x033WV[_\x80\xFD[\x90P5\x90a\x03D\x82a\x03#V[V[\x91\x90`@\x83\x82\x03\x12a\x03nW\x80a\x03ba\x03k\x92_\x86\x01a\x037V[\x93` \x01a\x02@V[\x90V[a\x01|V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x87\x90a\x03sV[\x90V[a\x03\x93\x90a\x03~V[\x90RV[\x91\x90a\x03\xAA\x90_` \x85\x01\x94\x01\x90a\x03\x8AV[V[4a\x03\xDDWa\x03\xD9a\x03\xC8a\x03\xC26`\x04a\x03FV[\x90a\ncV[a\x03\xD0a\x01rV[\x91\x82\x91\x82a\x03\x97V[\x03\x90\xF3[a\x01xV[\x90` \x82\x82\x03\x12a\x03\xFBWa\x03\xF8\x91_\x01a\x037V[\x90V[a\x01|V[a\x04\t\x90a\x03 V[\x90RV[\x91\x90a\x04 \x90_` \x85\x01\x94\x01\x90a\x04\0V[V[4a\x04RWa\x04Na\x04=a\x0486`\x04a\x03\xE2V[a\n\xE5V[a\x04Ea\x01rV[\x91\x82\x91\x82a\x04\rV[\x03\x90\xF3[a\x01xV[_\x91\x03\x12a\x04aWV[a\x01|V[\x90V[a\x04y\x90`\x08a\x04~\x93\x02a\x02\xA2V[a\x04fV[\x90V[\x90a\x04\x8C\x91Ta\x04iV[\x90V[a\x04\x9B`\x02_\x90a\x04\x81V[\x90V[a\x04\xA7\x90a\x02)V[\x90RV[\x91\x90a\x04\xBE\x90_` \x85\x01\x94\x01\x90a\x04\x9EV[V[4a\x04\xF0Wa\x04\xD06`\x04a\x04WV[a\x04\xECa\x04\xDBa\x04\x8FV[a\x04\xE3a\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x056a\x05?` \x93a\x05D\x93a\x05-\x81a\x04\xF5V[\x93\x84\x80\x93a\x04\xF9V[\x95\x86\x91\x01a\x05\x02V[a\x05\rV[\x01\x90V[a\x05]\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05\x17V[\x90V[4a\x05\x90Wa\x05\x8Ca\x05{a\x05v6`\x04a\x02OV[a\x0B\xA2V[a\x05\x83a\x01rV[\x91\x82\x91\x82a\x05HV[\x03\x90\xF3[a\x01xV[a\x05\x9E\x81a\x03~V[\x03a\x05\xA5WV[_\x80\xFD[\x90P5\x90a\x05\xB6\x82a\x05\x95V[V[\x91\x90`@\x83\x82\x03\x12a\x05\xE0W\x80a\x05\xD4a\x05\xDD\x92_\x86\x01a\x037V[\x93` \x01a\x05\xA9V[\x90V[a\x01|V[_\x01\x90V[4a\x06\x19Wa\x06\x03a\x05\xFD6`\x04a\x05\xB8V[\x90a\x0CGV[a\x06\x0Ba\x01rV[\x80a\x06\x15\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06MWa\x067a\x0616`\x04a\x05\xB8V[\x90a\x0CSV[a\x06?a\x01rV[\x80a\x06I\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06\x80Wa\x06ja\x06e6`\x04a\x02OV[a\r\xA8V[a\x06ra\x01rV[\x80a\x06|\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06\xB3Wa\x06\x956`\x04a\x04WV[a\x06\x9Da\r\xD7V[a\x06\xA5a\x01rV[\x80a\x06\xAF\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06\xE8Wa\x06\xC86`\x04a\x04WV[a\x06\xE4a\x06\xD3a\r\xE1V[a\x06\xDBa\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[4a\x07\x1DWa\x07\x19a\x07\x08a\x07\x036`\x04a\x02OV[a\x0EXV[a\x07\x10a\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[4a\x07PWa\x0726`\x04a\x04WV[a\x07:a\x0E\xC5V[a\x07Ba\x01rV[\x80a\x07L\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x07\x83Wa\x07ma\x07h6`\x04a\x02OV[a\x0F\xB8V[a\x07ua\x01rV[\x80a\x07\x7F\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x07\xB8Wa\x07\x986`\x04a\x04WV[a\x07\xB4a\x07\xA3a\x10\x0FV[a\x07\xABa\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[4a\x07\xEEWa\x07\xEAa\x07\xD9a\x07\xD36`\x04a\x05\xB8V[\x90a\x10\xC3V[a\x07\xE1a\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[a\x07\xFF`\x03_\x90a\x04\x81V[\x90V[4a\x082Wa\x08\x126`\x04a\x04WV[a\x08.a\x08\x1Da\x07\xF3V[a\x08%a\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[\x90V[_\x1B\x90V[a\x08Sa\x08Na\x08X\x92a\x087V[a\x08:V[a\x03 V[\x90V[a\x08d_a\x08?V[\x90V[a\x08oa\x08[V[\x90V[4a\x08\xA2Wa\x08\x826`\x04a\x04WV[a\x08\x9Ea\x08\x8Da\x08gV[a\x08\x95a\x01rV[\x91\x82\x91\x82a\x04\rV[\x03\x90\xF3[a\x01xV[4a\x08\xD6Wa\x08\xC0a\x08\xBA6`\x04a\x05\xB8V[\x90a\x11\x16V[a\x08\xC8a\x01rV[\x80a\x08\xD2\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[a\x08\xE4\x90a\x03~V[\x90V[a\x08\xF0\x81a\x08\xDBV[\x03a\x08\xF7WV[_\x80\xFD[\x90P5\x90a\t\x08\x82a\x08\xE7V[V[`\x80\x81\x83\x03\x12a\tKWa\t \x82_\x83\x01a\x02@V[\x92a\tHa\t1\x84` \x85\x01a\x05\xA9V[\x93a\t?\x81`@\x86\x01a\x08\xFBV[\x93``\x01a\x037V[\x90V[a\x01|V[\x91` a\tq\x92\x94\x93a\tj`@\x82\x01\x96_\x83\x01\x90a\x03\x8AV[\x01\x90a\x04\x9EV[V[4a\t\xA8Wa\t\x8Fa\t\x866`\x04a\t\nV[\x92\x91\x90\x91a\x14gV[\x90a\t\xA4a\t\x9Ba\x01rV[\x92\x83\x92\x83a\tPV[\x03\x90\xF3[a\x01xV[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\t\xD9a\t\xADV[\x90V[4a\n\x0CWa\t\xEC6`\x04a\x04WV[a\n\x08a\t\xF7a\t\xD1V[a\t\xFFa\x01rV[\x91\x82\x91\x82a\x04\rV[\x03\x90\xF3[a\x01xV[_\x80\xFD[_\x90V[a\n!a\n\x15V[P\x80a\n<a\n6cye\xDB\x0B`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90\x81\x15a\nIW[P\x90V[a\nS\x91Pa\x14\x88V[_a\nEV[_\x90V[` \x01\x90V[\x90a\nza\n\x93\x92a\nsa\nYV[P\x91a\x0B\xA2V[a\n\x8Ca\n\x86\x82a\x04\xF5V[\x91a\n]V[ \x90a\x14\xBAV[\x90V[_\x90V[a\n\xA3\x90a\x03 V[\x90V[\x90a\n\xB0\x90a\n\x9AV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\n\xD0a\n\xD5\x91a\n\xBCV[a\n\xC1V[\x90V[a\n\xE2\x90Ta\n\xC4V[\x90V[`\x01a\n\xFDa\x0B\x03\x92a\n\xF6a\n\x96V[P_a\n\xA6V[\x01a\n\xD8V[\x90V[``\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0B)\x90a\x05\rV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0BCW`@RV[a\x0B\x0BV[\x90a\x0B[a\x0BTa\x01rV[\x92\x83a\x0B\x1FV[V[\x90P\x90V[a\x0B\x87a\x0B~\x92` \x92a\x0Bu\x81a\x04\xF5V[\x94\x85\x80\x93a\x0B]V[\x93\x84\x91\x01a\x05\x02V[\x01\x90V[a\x0B\x99\x90a\x0B\x9F\x93\x92a\x0BbV[\x90a\x0BbV[\x90V[a\x0C\x1Aa\x0B\xE5\x91a\x0B\xB1a\x0B\x06V[Pa\x0B\xF4a+\xAB\x91a\x0B\xC5` \x84\x01a\x0BHV[\x92\x80\x84Ra#O` \x85\x019a\x0B\xD9a\x01rV[\x94\x85\x91` \x83\x01a\x04\xABV[` \x82\x01\x81\x03\x82R\x03\x84a\x0B\x1FV[a\x0C\x0Ba\x0B\xFFa\x01rV[\x93\x84\x92` \x84\x01a\x0B\x8BV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\x1FV[\x90V[\x90a\x0C8\x91a\x0C3a\x0C.\x82a\n\xE5V[a\x14\xDBV[a\x0C:V[V[\x90a\x0CD\x91a\x14\xEFV[PV[\x90a\x0CQ\x91a\x0C\x1DV[V[\x90\x80a\x0Cna\x0Cha\x0Cca\x15\x9AV[a\x03~V[\x91a\x03~V[\x03a\x0C\x7FWa\x0C|\x91a\x15\xA7V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0C\x97`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[a\x0C\xB4\x90a\x0C\xAFa\x0C\xAAa\t\xADV[a\x14\xDBV[a\r\x1CV[V[a\x0C\xC2a\x0C\xC7\x91a\n\xBCV[a\x02\xA6V[\x90V[a\x0C\xD4\x90Ta\x0C\xB6V[\x90V[\x90a\x0C\xE3`\xFF\x91a\x08:V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xF6\x90a\x01\xCDV[\x90V[\x90V[\x90a\r\x11a\r\x0Ca\r\x18\x92a\x0C\xEDV[a\x0C\xF9V[\x82Ta\x0C\xD7V[\x90UV[a\r0a\r+`\x04\x83\x90a\x02\x8CV[a\x0C\xCAV[a\r\x8CWa\rJ`\x01a\rE`\x04\x84\x90a\x02\x8CV[a\x0C\xFCV[a\rt\x7F!\xC2\\\xD0\xA5N\x16\t\xE3\xE6\x8B3V\x93\xEE\xFBiM^\xF1|\xC3+\x10o\x91?\x8A\x1F\x1B\x80X\x91a\x02pV[\x90a\r}a\x01rV[\x80a\r\x87\x81a\x05\xE5V[\x03\x90\xA2V[_c$Y\x1D\x89`\xE0\x1B\x81R\x80a\r\xA4`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[a\r\xB1\x90a\x0C\x9BV[V[a\r\xC3a\r\xBEa\x08[V[a\x14\xDBV[a\r\xCBa\r\xCDV[V[a\r\xD5a\x16\xA8V[V[a\r\xDFa\r\xB3V[V[a\r\xE9a\n\x15V[Pa\r\xF4`\x01a\x0C\xCAV[\x90V[_\x90V[`\xFF\x16\x90V[a\x0E\x15a\x0E\x10a\x0E\x1A\x92a\x087V[a\x02mV[a\r\xFBV[\x90V[\x90V[a\x0E4a\x0E/a\x0E9\x92a\x0E\x1DV[a\x02mV[a\r\xFBV[\x90V[a\x0EPa\x0EKa\x0EU\x92a\r\xFBV[a\x02mV[a\x02)V[\x90V[a\x0Eoa\x0Et\x91a\x0Ega\r\xF7V[P`\x04a\x02\x8CV[a\x0C\xCAV[_\x14a\x0E\x90Wa\x0E\x8Da\x0E\x87`\x01a\x0E V[[a\x0E<V[\x90V[a\x0E\x8Da\x0E\x9C_a\x0E\x01V[a\x0E\x88V[a\x0E\xB1a\x0E\xACa\x08[V[a\x14\xDBV[a\x0E\xB9a\x0E\xBBV[V[a\x0E\xC3a\x17\x12V[V[a\x0E\xCDa\x0E\xA1V[V[a\x0E\xE8\x90a\x0E\xE3a\x0E\xDEa\t\xADV[a\x14\xDBV[a\x0FgV[V[a\x0E\xF6a\x0E\xFB\x91a\n\xBCV[a\x04fV[\x90V[a\x0F\x08\x90Ta\x0E\xEAV[\x90V[\x90a\x0F\x17_\x19\x91a\x08:V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0F9a\x0F4a\x0F@\x92a\x02pV[a\x0F!V[\x82Ta\x0F\x0BV[\x90UV[\x91` a\x0Fe\x92\x94\x93a\x0F^`@\x82\x01\x96_\x83\x01\x90a\x04\x9EV[\x01\x90a\x04\x9EV[V[a\x0Fq`\x02a\x0E\xFEV[a\x0F|\x82`\x02a\x0F$V[\x90\x7F\xD9\xE1#\x91w\xBF\xBD*\xEB\xF5\xD0\xF2\x0F\xC0u\xE6\xDFZP,Y\xD1!\xAC\xD5sB\xC7\x83\xE3\x13d\x91a\x0F\xB3a\x0F\xAAa\x01rV[\x92\x83\x92\x83a\x0FDV[\x03\x90\xA1V[a\x0F\xC1\x90a\x0E\xCFV[V[Q\x90V[\x90P\x90V[a\x0F\xF1a\x0F\xE8\x92` \x92a\x0F\xDF\x81a\x0F\xC3V[\x94\x85\x80\x93a\x0F\xC7V[\x93\x84\x91\x01a\x05\x02V[\x01\x90V[a\x10\x03\x90a\x10\t\x93\x92a\x0F\xCCV[\x90a\x0F\xCCV[\x90V[\x90V[a\x10\x17a\r\xF7V[Pa\x10va\x10qa\x100a\x10+`\x02a\x0E\xFEV[a\x18\x15V[a\x10la\x10Ea\x10@`\x03a\x0E\xFEV[a\x18\x15V[\x91a\x10]a\x10Qa\x01rV[\x93\x84\x92` \x84\x01a\x0F\xF5V[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\x1FV[a\x10\x0CV[a\x18\xC1V[\x90V[a\x10\x8Da\x10\x88a\x10\x92\x92a\x03sV[a\x02mV[a\x03sV[\x90V[a\x10\x9E\x90a\x10yV[\x90V[a\x10\xAA\x90a\x10\x95V[\x90V[\x90a\x10\xB7\x90a\x10\xA1V[_R` R`@_ \x90V[a\x10\xE9\x91_a\x10\xDEa\x10\xE4\x93a\x10\xD7a\n\x15V[P\x82a\n\xA6V[\x01a\x10\xADV[a\x0C\xCAV[\x90V[\x90a\x11\x07\x91a\x11\x02a\x10\xFD\x82a\n\xE5V[a\x14\xDBV[a\x11\tV[V[\x90a\x11\x13\x91a\x15\xA7V[PV[\x90a\x11 \x91a\x10\xECV[V[\x90a\x118\x95\x94\x93\x92\x91a\x113a\x18\xF3V[a\x12,V[\x90\x91V[a\x11Pa\x11Ka\x11U\x92a\x087V[a\x02mV[a\x03sV[\x90V[a\x11a\x90a\x11<V[\x90V[a\x11m\x90a\x10\x95V[\x90V[a\x11\x84a\x11\x7Fa\x11\x89\x92a\x087V[a\x02mV[a\x02)V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x11\xA9\x90a\x02)V[_\x19\x81\x14a\x11\xB7W`\x01\x01\x90V[a\x11\x8CV[a\x11\xC5\x90a\x10yV[\x90V[a\x11\xD1\x90a\x11\xBCV[\x90V[a\x11\xDD\x90a\x10\x95V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x11\xF4WV[a\x01|V[\x91` a\x12\x1A\x92\x94\x93a\x12\x13`@\x82\x01\x96_\x83\x01\x90a\x03\x8AV[\x01\x90a\x03\x8AV[V[a\x12$a\x01rV[=_\x82>=\x90\xFD[\x95\x94\x95\x93\x92\x93PP\x82a\x12Oa\x12Ia\x12D_a\x11XV[a\x03~V[\x91a\x03~V[\x14\x80\x15a\x14=W[a\x14!W\x80a\x12na\x12h_a\x11pV[\x91a\x02)V[\x14_\x14a\x14\x1BWa\x12}a\x10\x0FV[[\x94a\x12\x93a\x12\x8E`\x04\x88\x90a\x02\x8CV[a\x0C\xCAV[a\x13\xFFWa\x12\xE3\x91a\x12\xB1`\x01a\x12\xAC`\x04\x8A\x90a\x02\x8CV[a\x0C\xFCV[a\x12\xC3a\x12\xBD_a\x11pV[\x91a\x02)V[\x14a\x13\xDEW[a\x12\xD2\x86a\x0B\xA2V[a\x12\xDE_\x92\x91\x92a\x11pV[a\x19\x1DV[\x91a\x12\xF5a\x12\xF0\x84a\x11\xC8V[a\x11\xD4V[\x90cH\\\xC9U\x90a\x13\x05\x84a\x11dV[\x92\x80;\x15a\x13\xD9Wa\x13*_\x80\x94a\x135a\x13\x1Ea\x01rV[\x97\x88\x96\x87\x95\x86\x94a\x11\xE4V[\x84R`\x04\x84\x01a\x11\xF9V[\x03\x92Z\xF1\x80\x15a\x13\xD4Wa\x13\xA8W[P\x83\x90a\x13Q\x83\x91a\x11dV[\x90a\x13\x8Ea\x13\x88a\x13\x82\x7FI\xB2\x1F\x1EA\x90\xDB\x8B\n\x93<\x95\x1E\xD0\x13\xDE\",\x84|\x15F\x17Th-\xAA.\xAB\x1F\xDB\xD2\x95a\x02pV[\x92a\x10\xA1V[\x92a\x10\xA1V[\x92a\x13\x97a\x01rV[\x80a\x13\xA1\x81a\x05\xE5V[\x03\x90\xA4\x91\x90V[a\x13\xC7\x90_=\x81\x11a\x13\xCDW[a\x13\xBF\x81\x83a\x0B\x1FV[\x81\x01\x90a\x11\xEAV[_a\x13DV[P=a\x13\xB5V[a\x12\x1CV[a\x11\xE0V[a\x13\xFAa\x13\xF3a\x13\xEE`\x03a\x0E\xFEV[a\x11\xA0V[`\x03a\x0F$V[a\x12\xC9V[_c$Y\x1D\x89`\xE0\x1B\x81R\x80a\x14\x17`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x80a\x12~V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x149`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[Pa\x14G\x82a\x11dV[a\x14aa\x14[a\x14V_a\x11XV[a\x03~V[\x91a\x03~V[\x14a\x12WV[\x90a\x14\x84\x93\x92\x91a\x14va\nYV[a\x14~a\r\xF7V[\x90a\x11\"V[\x90\x91V[a\x14\x90a\n\x15V[Pa\x14\xAAa\x14\xA4c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90V[a\x14\xB7\x90a\x10\x95V[\x90V[\x90a\x14\xD8\x91a\x14\xC7a\nYV[P\x90a\x14\xD20a\x14\xAEV[\x91a\x1A\nV[\x90V[a\x14\xED\x90a\x14\xE7a\x15\x9AV[\x90a\x1A^V[V[a\x14\xF7a\n\x15V[Pa\x15\x0Ca\x15\x06\x82\x84\x90a\x10\xC3V[\x15a\x01\xCDV[_\x14a\x15\x94Wa\x153`\x01a\x15._a\x15&\x81\x86\x90a\n\xA6V[\x01\x85\x90a\x10\xADV[a\x0C\xFCV[\x90a\x15<a\x15\x9AV[\x90a\x15ya\x15sa\x15m\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\n\x9AV[\x92a\x10\xA1V[\x92a\x10\xA1V[\x92a\x15\x82a\x01rV[\x80a\x15\x8C\x81a\x05\xE5V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x15\xA2a\nYV[P3\x90V[a\x15\xAFa\n\x15V[Pa\x15\xBB\x81\x83\x90a\x10\xC3V[_\x14a\x16BWa\x15\xE1_a\x15\xDC_a\x15\xD4\x81\x86\x90a\n\xA6V[\x01\x85\x90a\x10\xADV[a\x0C\xFCV[\x90a\x15\xEAa\x15\x9AV[\x90a\x16'a\x16!a\x16\x1B\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\n\x9AV[\x92a\x10\xA1V[\x92a\x10\xA1V[\x92a\x160a\x01rV[\x80a\x16:\x81a\x05\xE5V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x16Pa\x1A\x99V[a\x16Xa\x16ZV[V[a\x16e_`\x01a\x0C\xFCV[a\x16ma\x15\x9AV[a\x16\xA3\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\x16\x9Aa\x01rV[\x91\x82\x91\x82a\x03\x97V[\x03\x90\xA1V[a\x16\xB0a\x16HV[V[a\x16\xBAa\x18\xF3V[a\x16\xC2a\x16\xC4V[V[a\x16\xCF`\x01\x80a\x0C\xFCV[a\x16\xD7a\x15\x9AV[a\x17\r\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\x17\x04a\x01rV[\x91\x82\x91\x82a\x03\x97V[\x03\x90\xA1V[a\x17\x1Aa\x16\xB2V[V[``\x90V[a\x175a\x170a\x17:\x92a\x0E\x1DV[a\x02mV[a\x02)V[\x90V[\x90a\x17H\x91\x01a\x02)V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x17iWa\x17e` \x91a\x05\rV[\x01\x90V[a\x0B\x0BV[\x90a\x17\x80a\x17{\x83a\x17KV[a\x0BHV[\x91\x82RV[6\x907V[\x90a\x17\xAFa\x17\x97\x83a\x17nV[\x92` \x80a\x17\xA5\x86\x93a\x17KV[\x92\x01\x91\x03\x90a\x17\x85V[V[`\x01a\x17\xBD\x91\x03a\x02)V[\x90V[\x90V[a\x17\xD7a\x17\xD2a\x17\xDC\x92a\x17\xC0V[a\x02mV[a\x02)V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x17\xFFa\x18\x05\x91a\x02)V[\x91a\x02)V[\x90\x81\x15a\x18\x10W\x04\x90V[a\x17\xDFV[a\x18\x1Da\x17\x1CV[Pa\x18:a\x18*\x82a\x1C@V[a\x184`\x01a\x17!V[\x90a\x17=V[\x90a\x18D\x82a\x17\x8AV[\x91a\x18Ma\r\xF7V[P` \x01\x82\x01[`\x01\x15a\x18\xB7Wa\x18ga\x18\x93\x91a\x17\xB1V[\x91o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x82\x06\x1A\x83Sa\x18\x8D`\na\x17\xC3V[\x90a\x17\xF3V[\x80a\x18\xA6a\x18\xA0_a\x11pV[\x91a\x02)V[\x14a\x18\xB1W\x90a\x18TV[PP[\x90V[PPa\x18\xB4V[\x90V[a\x18\xF0\x90a\x18\xCDa\r\xF7V[P\x80a\x18\xEAa\x18\xE4a\x18\xDF_\x94a\x18\xBEV[a\x04\xF5V[\x92a\x11pV[\x90a\x1E\xA1V[\x90V[a\x18\xFBa\r\xE1V[a\x19\x01WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\x19\x19`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x91\x90\x91a\x19(a\nYV[Pa\x1920a\x14\xAEV[1a\x19Ea\x19?\x83a\x02)V[\x91a\x02)V[\x10a\x19\xE2Wa\x19S\x82a\x04\xF5V[a\x19ea\x19__a\x11pV[\x91a\x02)V[\x14a\x19\xC6W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x19\xBBW\x81a\x19\x98a\x19\x92a\x19\x8D_a\x11XV[a\x03~V[\x91a\x03~V[\x14a\x19\x9FWV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x19\xB7`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x19\xDE`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[a\x19\xEB0a\x14\xAEV[1a\x1A\x06_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\x0FDV[\x03\x90\xFD[\x91`\x0B\x92a\x1A\x16a\nYV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V[\x91` a\x1A\\\x92\x94\x93a\x1AU`@\x82\x01\x96_\x83\x01\x90a\x03\x8AV[\x01\x90a\x04\0V[V[\x90a\x1Asa\x1Am\x83\x83\x90a\x10\xC3V[\x15a\x01\xCDV[a\x1A{WPPV[a\x1A\x95_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x1A;V[\x03\x90\xFD[a\x1A\xAAa\x1A\xA4a\r\xE1V[\x15a\x01\xCDV[a\x1A\xB0WV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x1A\xC8`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x90V[a\x1A\xE3a\x1A\xDEa\x1A\xE8\x92a\x1A\xCCV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\x02a\x1A\xFDa\x1B\x07\x92a\x1A\xEBV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B!a\x1B\x1Ca\x1B&\x92a\x1B\nV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B@a\x1B;a\x1BE\x92a\x1B)V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B_a\x1BZa\x1Bd\x92a\x1BHV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B~a\x1Bya\x1B\x83\x92a\x1BgV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\x9Da\x1B\x98a\x1B\xA2\x92a\x1B\x86V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\xBCa\x1B\xB7a\x1B\xC1\x92a\x1B\xA5V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\xDBa\x1B\xD6a\x1B\xE0\x92a\x1B\xC4V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\xFAa\x1B\xF5a\x1B\xFF\x92a\x1B\xE3V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1C\x19a\x1C\x14a\x1C\x1E\x92a\x1C\x02V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1C8a\x1C3a\x1C=\x92a\x1C!V[a\x02mV[a\x02)V[\x90V[a\x1CHa\r\xF7V[Pa\x1CR_a\x11pV[\x90\x80a\x1C\x81a\x1C{z\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\x1A\xCFV[\x91a\x02)V[\x10\x15a\x1EYW[\x80a\x1C\xA9a\x1C\xA3m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\x1B\rV[\x91a\x02)V[\x10\x15a\x1E\x1EW[\x80a\x1C\xCAa\x1C\xC4f#\x86\xF2o\xC1\0\0a\x1BKV[\x91a\x02)V[\x10\x15a\x1D\xEAW[\x80a\x1C\xE8a\x1C\xE2c\x05\xF5\xE1\0a\x1B\x89V[\x91a\x02)V[\x10\x15a\x1D\xB9W[\x80a\x1D\x04a\x1C\xFEa'\x10a\x1B\xC7V[\x91a\x02)V[\x10\x15a\x1D\x8AW[\x80a\x1D\x1Fa\x1D\x19`da\x1C\x05V[\x91a\x02)V[\x10\x15a\x1D\\W[a\x1D9a\x1D3`\na\x17\xC3V[\x91a\x02)V[\x10\x15a\x1DCW[\x90V[a\x1DW\x90a\x1DQ`\x01a\x17!V[\x90a\x17=V[a\x1D@V[a\x1Dsa\x1D\x84\x91a\x1Dm`da\x1C\x05V[\x90a\x17\xF3V[\x91a\x1D~`\x02a\x1C$V[\x90a\x17=V[\x90a\x1D&V[a\x1D\xA2a\x1D\xB3\x91a\x1D\x9Ca'\x10a\x1B\xC7V[\x90a\x17\xF3V[\x91a\x1D\xAD`\x04a\x1B\xE6V[\x90a\x17=V[\x90a\x1D\x0BV[a\x1D\xD3a\x1D\xE4\x91a\x1D\xCDc\x05\xF5\xE1\0a\x1B\x89V[\x90a\x17\xF3V[\x91a\x1D\xDE`\x08a\x1B\xA8V[\x90a\x17=V[\x90a\x1C\xEFV[a\x1E\x07a\x1E\x18\x91a\x1E\x01f#\x86\xF2o\xC1\0\0a\x1BKV[\x90a\x17\xF3V[\x91a\x1E\x12`\x10a\x1BjV[\x90a\x17=V[\x90a\x1C\xD1V[a\x1EBa\x1ES\x91a\x1E<m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\x1B\rV[\x90a\x17\xF3V[\x91a\x1EM` a\x1B,V[\x90a\x17=V[\x90a\x1C\xB0V[a\x1E\x8Aa\x1E\x9B\x91a\x1E\x84z\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\x1A\xCFV[\x90a\x17\xF3V[\x91a\x1E\x95`@a\x1A\xEEV[\x90a\x17=V[\x90a\x1C\x88V[\x90a\x1E\xC3\x92a\x1E\xBB\x92a\x1E\xB2a\r\xF7V[P\x91\x90\x91a\x1E\xE6V[\x91\x90\x15a\x01\xCDV[a\x1E\xCAW\x90V[_cJq9\xBF`\xE1\x1B\x81R\x80a\x1E\xE2`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x91a\x1E\xEFa\n\x15V[Pa\x1E\xF8a\r\xF7V[P\x80a\x1F\x1Ca\x1F\x16a\x1F\x11a\x1F\x0C\x87a\x18\xBEV[a\x04\xF5V[a\x02)V[\x91a\x02)V[\x11\x80\x15a\x1FKW[a\x1F:Wa\x1F4\x92\x91\x90\x91a \x02V[\x91\x90\x91\x90V[PPP_\x90a\x1FH_a\x11pV[\x90V[P\x81a\x1F_a\x1FY\x83a\x02)V[\x91a\x02)V[\x11a\x1F$V[`\x01a\x1Fq\x91\x01a\x02)V[\x90V[`\xFF`\xF8\x1B\x16\x90V[a\x1F\x86\x90a\x1FtV[\x90V[\x90V[a\x1F\xA0a\x1F\x9Ba\x1F\xA5\x92a\x1F\x89V[a\x02mV[a\r\xFBV[\x90V[a\x1F\xB7a\x1F\xBD\x91\x93\x92\x93a\x02)V[\x92a\x02)V[\x91a\x1F\xC9\x83\x82\x02a\x02)V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1F\xD8WV[a\x11\x8CV[a\x1F\xECa\x1F\xF2\x91\x93\x92\x93a\x02)V[\x92a\x02)V[\x82\x01\x80\x92\x11a\x1F\xFDWV[a\x11\x8CV[a \x1D\x90a \x0Ea\n\x15V[Pa \x17a\r\xF7V[Pa\x18\xBEV[a &_a\x11pV[[\x82a :a 4\x86a\x02)V[\x91a\x02)V[\x10\x15a \xBEWa [a Va Q\x84\x86\x90a \xC9V[a\x1F}V[a\"7V[\x90\x81a pa j`\ta\x1F\x8CV[\x91a\r\xFBV[\x11a \xABWa \xA5\x91a \x99a \x93a \x9F\x93a \x8D`\na\x17\xC3V[\x90a\x1F\xA8V[\x91a\x0E<V[\x90a\x1F\xDDV[\x92a\x1FeV[\x91a 'V[PPPPP_\x90a \xBB_a\x11pV[\x90V[\x93\x92PPP`\x01\x91\x90V[\x90a \xD2a\n\x96V[P` \x01\x01Q\x90V[_\x90V[`\xF8\x1C\x90V[a \xF9a \xF4a \xFE\x92a\r\xFBV[a\x02mV[a\r\xFBV[\x90V[a!\ra!\x12\x91a \xDFV[a \xE5V[\x90V[\x90V[a!,a!'a!1\x92a!\x15V[a\x02mV[a\r\xFBV[\x90V[\x90V[a!Ka!Fa!P\x92a!4V[a\x02mV[a\r\xFBV[\x90V[\x90V[a!ja!ea!o\x92a!SV[a\x02mV[a\r\xFBV[\x90V[\x90V[a!\x89a!\x84a!\x8E\x92a!rV[a\x02mV[a\r\xFBV[\x90V[a!\xA5a!\xA0a!\xAA\x92a\x1A\xEBV[a\x02mV[a\r\xFBV[\x90V[\x90V[a!\xC4a!\xBFa!\xC9\x92a!\xADV[a\x02mV[a\r\xFBV[\x90V[\x90V[a!\xE3a!\xDEa!\xE8\x92a!\xCCV[a\x02mV[a\r\xFBV[\x90V[\x90a!\xF6\x91\x03a\r\xFBV[\x90V[\x90V[a\"\x10a\"\x0Ba\"\x15\x92a!\xF9V[a\x02mV[a\r\xFBV[\x90V[\x90V[a\"/a\"*a\"4\x92a\"\x18V[a\x02mV[a\r\xFBV[\x90V[a\"I\x90a\"Ca \xDBV[Pa!\x01V[\x80a\"]a\"W`/a!\x18V[\x91a\r\xFBV[\x11\x80a#3W[_\x14a\"\x82Wa\"~\x90a\"x`0a\"\x1BV[\x90a!\xEBV[[\x90V[\x80a\"\x96a\"\x90``a!VV[\x91a\r\xFBV[\x11\x80a#\x18W[_\x14a\"\xBDWa\"\xB7\x90a\"\xB1`Wa!\xFCV[\x90a!\xEBV[[a\"\x7FV[\x80a\"\xD1a\"\xCB`@a!\x91V[\x91a\r\xFBV[\x11\x80a\"\xFDW[_\x14a\"\xF7Wa\"\xF2\x90a\"\xEC`7a!\xCFV[\x90a!\xEBV[a\"\xB8V[P`\xFF\x90V[P\x80a#\x12a#\x0C`Ga!\xB0V[\x91a\r\xFBV[\x10a\"\xD8V[P\x80a#-a#'`ga!uV[\x91a\r\xFBV[\x10a\"\x9DV[P\x80a#Ha#B`:a!7V[\x91a\r\xFBV[\x10a\"dV\xFE`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a$\xD6a\x05\x16\x829`\x80Q\x81a\x0B\x92\x01Ra$\xD6\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a+\xAB\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x18` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x022V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\x08\x1B\x90V[\x90a\x01\xF4a\xFF\0\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0C\x90a\x01\xFEV[\x90V[\x90V[\x90a\x02'a\x02\"a\x02.\x92a\x02\x03V[a\x02\x0FV[\x82Ta\x01\xE7V[\x90UV[a\x02:a\x03*V[a\x02F`\x01`\x03a\x02\x12V[V[`\xA0\x1B\x90V[\x90a\x02]`\xFF`\xA0\x1B\x91a\x02HV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x02|a\x02wa\x02\x83\x92a\x02\x03V[a\x02\x0FV[\x82Ta\x02NV[\x90UV[_\x01\x90V[a\x02\x94a\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xBBa\x02\xB6a\x02\xC0\x92a\x02\x9CV[a\x01\rV[a\x02\x9CV[\x90V[a\x02\xCC\x90a\x02\xA7V[\x90V[a\x02\xD8\x90a\x02\xC3V[\x90V[_\x1B\x90V[\x90a\x02\xF1`\x01\x80`\xA0\x1B\x03\x91a\x02\xDBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x04\x90a\x02\xC3V[\x90V[\x90V[\x90a\x03\x1Fa\x03\x1Aa\x03&\x92a\x02\xFBV[a\x03\x07V[\x82Ta\x02\xE0V[\x90UV[a\x0333a\x03\x97V[a\x03>_`\x01a\x02gV[a\x03Fa\0=V[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03\x92Wa\x03n\x82\x91a\x01\xBFa)\xEC\x849a\x02\x87V[\x03\x90_\xF0\x80\x15a\x03\x8DWa\x03\x84a\x03\x8B\x91a\x02\xCFV[`\x01a\x03\nV[V[a\x02\x8CV[a\0QV[a\x03\xA0\x90a\x03\xF8V[V[a\x03\xB6a\x03\xB1a\x03\xBB\x92a\x01\nV[a\x01\rV[a\x02\x9CV[\x90V[a\x03\xC7\x90a\x03\xA2V[\x90V[a\x03\xD3\x90a\x02\x9CV[\x90V[a\x03\xDF\x90a\x03\xCAV[\x90RV[\x91\x90a\x03\xF6\x90_` \x85\x01\x94\x01\x90a\x03\xD6V[V[\x80a\x04\x13a\x04\ra\x04\x08_a\x03\xBEV[a\x03\xCAV[\x91a\x03\xCAV[\x14a\x04#Wa\x04!\x90a\x04\xB6V[V[a\x04Fa\x04/_a\x03\xBEV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xE3V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04fa\x04k\x91a\x04JV[a\x04OV[\x90V[a\x04x\x90Ta\x04ZV[\x90V[a\x04\x84\x90a\x02\xA7V[\x90V[a\x04\x90\x90a\x04{V[\x90V[\x90V[\x90a\x04\xABa\x04\xA6a\x04\xB2\x92a\x04\x87V[a\x04\x93V[\x82Ta\x02\xE0V[\x90UV[a\x04\xBF_a\x04nV[a\x04\xC9\x82_a\x04\x96V[\x90a\x04\xFDa\x04\xF7\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\x87V[\x91a\x04\x87V[\x91a\x05\x06a\0=V[\x80a\x05\x10\x81a\x02\x87V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0ErV[a\0\x1D_5a\x01\xFCV[\x80c\x08aF\xD2\x14a\x01\xF7W\x80c\x18\xD5\xAA\xFE\x14a\x01\xF2W\x80c6l\xBA\xB7\x14a\x01\xEDW\x80c;j\xB2\xA9\x14a\x01\xE8W\x80cF\xE2\xCC\t\x14a\x01\xE3W\x80cH\\\xC9U\x14a\x01\xDEW\x80cK,\x07\x06\x14a\x01\xD9W\x80cTg\xCBH\x14a\x01\xD4W\x80c[<\xD6\xE2\x14a\x01\xCFW\x80caT8\x01\x14a\x01\xCAW\x80ceX\x95O\x14a\x01\xC5W\x80cqP\x18\xA6\x14a\x01\xC0W\x80cz9y\xDC\x14a\x01\xBBW\x80c\x7F\xBD)^\x14a\x01\xB6W\x80c\x80NQ#\x14a\x01\xB1W\x80c\x82\xF4J\xDE\x14a\x01\xACW\x80c\x84\xFA\xB6+\x14a\x01\xA7W\x80c\x8DZ#\x9B\x14a\x01\xA2W\x80c\x8D\xA5\xCB[\x14a\x01\x9DW\x80c\xAF\xF7Lm\x14a\x01\x98W\x80c\xC6`\xD3\xF3\x14a\x01\x93W\x80c\xCD\xAF\xB9x\x14a\x01\x8EW\x80c\xD4\xF0\xEBM\x14a\x01\x89W\x80c\xD8x\x13B\x14a\x01\x84W\x80c\xDE\x1FE>\x14a\x01\x7FW\x80c\xEAJ\x11\x04\x14a\x01zW\x80c\xED\xE0{\xD6\x14a\x01uW\x80c\xF2\xFD\xE3\x8B\x14a\x01pW\x80c\xF7\xB8\x93^\x14a\x01kWc\xFF{0\x84\x03a\0\x0EWa\x0E=V[a\r\xF8V[a\r\x98V[a\rcV[a\x0C\xF2V[a\x0B\xE9V[a\x0B\xB4V[a\x0B]V[a\x0B\x0BV[a\naV[a\n,V[a\t\xF7V[a\t\xA0V[a\tkV[a\t&V[a\x08\xF2V[a\x08\xBDV[a\x08\x84V[a\x07\xFFV[a\x07\xCAV[a\x07\\V[a\x06\xCDV[a\x06\x01V[a\x05\xCCV[a\x05WV[a\x04\xBCV[a\x04\x82V[a\x04\rV[a\x02\xE8V[a\x02\x8CV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x02\x1AWV[a\x02\x0CV[\x90V[a\x02+\x90a\x02\x1FV[\x90RV[\x90``\x80a\x02u\x93a\x02G_\x82\x01Q_\x86\x01\x90a\x02\"V[a\x02Y` \x82\x01Q` \x86\x01\x90a\x02\"V[a\x02k`@\x82\x01Q`@\x86\x01\x90a\x02\"V[\x01Q\x91\x01\x90a\x02\"V[V[\x91\x90a\x02\x8A\x90_`\x80\x85\x01\x94\x01\x90a\x02/V[V[4a\x02\xBCWa\x02\x9C6`\x04a\x02\x10V[a\x02\xB8a\x02\xA7a\x0F\"V[a\x02\xAFa\x02\x02V[\x91\x82\x91\x82a\x02wV[\x03\x90\xF3[a\x02\x08V[\x15\x15\x90V[a\x02\xCF\x90a\x02\xC1V[\x90RV[\x91\x90a\x02\xE6\x90_` \x85\x01\x94\x01\x90a\x02\xC6V[V[4a\x03\x18Wa\x02\xF86`\x04a\x02\x10V[a\x03\x14a\x03\x03a\x0F[V[a\x03\x0Ba\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03gW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03bW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03]WV[a\x03)V[a\x03%V[a\x03!V[\x90` \x82\x82\x03\x12a\x03\x9DW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x98Wa\x03\x94\x92\x01a\x03-V[\x90\x91V[a\x03\x1DV[a\x02\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x03\xE3a\x03\xEC` \x93a\x03\xF1\x93a\x03\xDA\x81a\x03\xA2V[\x93\x84\x80\x93a\x03\xA6V[\x95\x86\x91\x01a\x03\xAFV[a\x03\xBAV[\x01\x90V[a\x04\n\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xC4V[\x90V[4a\x04>Wa\x04:a\x04)a\x04#6`\x04a\x03lV[\x90a\x10\x02V[a\x041a\x02\x02V[\x91\x82\x91\x82a\x03\xF5V[\x03\x90\xF3[a\x02\x08V[\x1C\x90V[`\xFF\x16\x90V[a\x04]\x90`\x08a\x04b\x93\x02a\x04CV[a\x04GV[\x90V[\x90a\x04p\x91Ta\x04MV[\x90V[a\x04\x7F`\x03_\x90a\x04eV[\x90V[4a\x04\xB2Wa\x04\x926`\x04a\x02\x10V[a\x04\xAEa\x04\x9Da\x04sV[a\x04\xA5a\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[_\x01\x90V[4a\x04\xEBWa\x04\xD5a\x04\xCF6`\x04a\x03lV[\x90a\x11\xF3V[a\x04\xDDa\x02\x02V[\x80a\x04\xE7\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\x04\x90a\x04\xF0V[\x90V[a\x05\x10\x81a\x04\xFBV[\x03a\x05\x17WV[_\x80\xFD[\x90P5\x90a\x05(\x82a\x05\x07V[V[\x91\x90`@\x83\x82\x03\x12a\x05RW\x80a\x05Fa\x05O\x92_\x86\x01a\x05\x1BV[\x93` \x01a\x05\x1BV[\x90V[a\x02\x0CV[4a\x05\x86Wa\x05pa\x05j6`\x04a\x05*V[\x90a\x13\xA4V[a\x05xa\x02\x02V[\x80a\x05\x82\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[a\x05\x94\x81a\x02\x1FV[\x03a\x05\x9BWV[_\x80\xFD[\x90P5\x90a\x05\xAC\x82a\x05\x8BV[V[\x90` \x82\x82\x03\x12a\x05\xC7Wa\x05\xC4\x91_\x01a\x05\x9FV[\x90V[a\x02\x0CV[4a\x05\xFCWa\x05\xF8a\x05\xE7a\x05\xE26`\x04a\x05\xAEV[a\x143V[a\x05\xEFa\x02\x02V[\x91\x82\x91\x82a\x02wV[\x03\x90\xF3[a\x02\x08V[4a\x06/Wa\x06\x116`\x04a\x02\x10V[a\x06\x19a\x14nV[a\x06!a\x02\x02V[\x80a\x06+\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06O\x90`\x08a\x06T\x93\x02a\x04CV[a\x064V[\x90V[\x90a\x06b\x91Ta\x06?V[\x90V[a\x06q`\x01_\x90a\x06WV[\x90V[\x90V[a\x06\x8Ba\x06\x86a\x06\x90\x92a\x04\xF0V[a\x06tV[a\x04\xF0V[\x90V[a\x06\x9C\x90a\x06wV[\x90V[a\x06\xA8\x90a\x06\x93V[\x90V[a\x06\xB4\x90a\x06\x9FV[\x90RV[\x91\x90a\x06\xCB\x90_` \x85\x01\x94\x01\x90a\x06\xABV[V[4a\x06\xFDWa\x06\xDD6`\x04a\x02\x10V[a\x06\xF9a\x06\xE8a\x06eV[a\x06\xF0a\x02\x02V[\x91\x82\x91\x82a\x06\xB8V[\x03\x90\xF3[a\x02\x08V[\x90V[a\x07\x15\x90`\x08a\x07\x1A\x93\x02a\x04CV[a\x07\x02V[\x90V[\x90a\x07(\x91Ta\x07\x05V[\x90V[a\x077`\x02_\x90a\x07\x1DV[\x90V[a\x07C\x90a\x02\x1FV[\x90RV[\x91\x90a\x07Z\x90_` \x85\x01\x94\x01\x90a\x07:V[V[4a\x07\x8CWa\x07l6`\x04a\x02\x10V[a\x07\x88a\x07wa\x07+V[a\x07\x7Fa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[\x90V[a\x07\xA8a\x07\xA3a\x07\xAD\x92a\x07\x91V[a\x06tV[a\x02\x1FV[\x90V[a\x07\xBCb'\x8D\0a\x07\x94V[\x90V[a\x07\xC7a\x07\xB0V[\x90V[4a\x07\xFAWa\x07\xDA6`\x04a\x02\x10V[a\x07\xF6a\x07\xE5a\x07\xBFV[a\x07\xEDa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\x08-Wa\x08\x0F6`\x04a\x02\x10V[a\x08\x17a\x14\x9DV[a\x08\x1Fa\x02\x02V[\x80a\x08)\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x91``\x83\x83\x03\x12a\x08\x7FWa\x08I\x82_\x85\x01a\x05\x1BV[\x92a\x08W\x83` \x83\x01a\x05\x1BV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08zWa\x08v\x92\x01a\x03-V[\x90\x91V[a\x03\x1DV[a\x02\x0CV[4a\x08\xB8Wa\x08\xB4a\x08\xA3a\x08\x9A6`\x04a\x082V[\x92\x91\x90\x91a\x15UV[a\x08\xABa\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[4a\x08\xEDWa\x08\xCD6`\x04a\x02\x10V[a\x08\xE9a\x08\xD8a\x15\xFDV[a\x08\xE0a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\t!Wa\t\x0Ba\t\x056`\x04a\x03lV[\x90a\x17\x1BV[a\t\x13a\x02\x02V[\x80a\t\x1D\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[4a\tVWa\t66`\x04a\x02\x10V[a\tRa\tAa\x17CV[a\tIa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[a\th`\x03`\x01\x90a\x04eV[\x90V[4a\t\x9BWa\t{6`\x04a\x02\x10V[a\t\x97a\t\x86a\t[V[a\t\x8Ea\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[4a\t\xD0Wa\t\xB06`\x04a\x02\x10V[a\t\xCCa\t\xBBa\x17\xD3V[a\t\xC3a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[a\t\xDE\x90a\x04\xFBV[\x90RV[\x91\x90a\t\xF5\x90_` \x85\x01\x94\x01\x90a\t\xD5V[V[4a\n'Wa\n\x076`\x04a\x02\x10V[a\n#a\n\x12a\x18\"V[a\n\x1Aa\x02\x02V[\x91\x82\x91\x82a\t\xE2V[\x03\x90\xF3[a\x02\x08V[4a\n\\Wa\n<6`\x04a\x02\x10V[a\nXa\nGa\x18VV[a\nOa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\n\x91Wa\nq6`\x04a\x02\x10V[a\n\x8Da\n|a\x18\xA2V[a\n\x84a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\n\xD0W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\n\xCBW` \x01\x92` \x83\x02\x84\x01\x11a\n\xC6WV[a\x03)V[a\x03%V[a\x03!V[\x90` \x82\x82\x03\x12a\x0B\x06W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x01Wa\n\xFD\x92\x01a\n\x96V[\x90\x91V[a\x03\x1DV[a\x02\x0CV[4a\x0B:Wa\x0B$a\x0B\x1E6`\x04a\n\xD5V[\x90a\x1AxV[a\x0B,a\x02\x02V[\x80a\x0B6\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x90` \x82\x82\x03\x12a\x0BXWa\x0BU\x91_\x01a\x05\x1BV[\x90V[a\x02\x0CV[4a\x0B\x8BWa\x0Bua\x0Bp6`\x04a\x0B?V[a\x1B(V[a\x0B}a\x02\x02V[\x80a\x0B\x87\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x0B\xE4Wa\x0B\xC46`\x04a\x02\x10V[a\x0B\xE0a\x0B\xCFa\x0B\x90V[a\x0B\xD7a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\x0C\x17Wa\x0B\xF96`\x04a\x02\x10V[a\x0C\x01a\x1BOV[a\x0C\ta\x02\x02V[\x80a\x0C\x13\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[a\x0C0a\x0C+a\x0C5\x92a\x02\x1FV[a\x06tV[a\x02\x1FV[\x90V[\x90a\x0CB\x90a\x0C\x1CV[_R` R`@_ \x90V[_\x1C\x90V[a\x0C_a\x0Cd\x91a\x0CNV[a\x07\x02V[\x90V[a\x0Cq\x90Ta\x0CSV[\x90V[a\x0C\x7F\x90`\x04a\x0C8V[\x90a\x0C\x8B_\x83\x01a\x0CgV[\x91a\x0C\x98`\x01\x82\x01a\x0CgV[\x91a\x0C\xB1`\x03a\x0C\xAA`\x02\x85\x01a\x0CgV[\x93\x01a\x0CgV[\x90V[a\x0C\xE9a\x0C\xF0\x94a\x0C\xDF``\x94\x98\x97\x95a\x0C\xD5`\x80\x86\x01\x9A_\x87\x01\x90a\x07:V[` \x85\x01\x90a\x07:V[`@\x83\x01\x90a\x07:V[\x01\x90a\x07:V[V[4a\r&Wa\r\"a\r\ra\r\x086`\x04a\x05\xAEV[a\x0CtV[\x90a\r\x19\x94\x92\x94a\x02\x02V[\x94\x85\x94\x85a\x0C\xB4V[\x03\x90\xF3[a\x02\x08V[\x90V[a\rBa\r=a\rG\x92a\r+V[a\x06tV[a\x02\x1FV[\x90V[a\rUa\x13\x88a\r.V[\x90V[a\r`a\rJV[\x90V[4a\r\x93Wa\rs6`\x04a\x02\x10V[a\r\x8Fa\r~a\rXV[a\r\x86a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\r\xC6Wa\r\xB0a\r\xAB6`\x04a\x0B?V[a\x1B\xBEV[a\r\xB8a\x02\x02V[\x80a\r\xC2\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x91\x90`@\x83\x82\x03\x12a\r\xF3W\x80a\r\xE7a\r\xF0\x92_\x86\x01a\x05\x9FV[\x93` \x01a\x05\x9FV[\x90V[a\x02\x0CV[4a\x0E)Wa\x0E%a\x0E\x14a\x0E\x0E6`\x04a\r\xCBV[\x90a\x1CTV[a\x0E\x1Ca\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[a\x0E:`\x05_\x90a\x07\x1DV[\x90V[4a\x0EmWa\x0EM6`\x04a\x02\x10V[a\x0Eia\x0EXa\x0E.V[a\x0E`a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0E\x94\x90a\x03\xBAV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xAEW`@RV[a\x0EvV[\x90a\x0E\xC6a\x0E\xBFa\x02\x02V[\x92\x83a\x0E\x8AV[V[a\x0E\xD2`\x80a\x0E\xB3V[\x90V[_\x90V[a\x0E\xE1a\x0E\xC8V[\x90` \x80\x80\x80\x85a\x0E\xF0a\x0E\xD5V[\x81R\x01a\x0E\xFBa\x0E\xD5V[\x81R\x01a\x0F\x06a\x0E\xD5V[\x81R\x01a\x0F\x11a\x0E\xD5V[\x81RPPV[a\x0F\x1Fa\x0E\xD9V[\x90V[a\x0F*a\x0F\x17V[Pa\x0F3a\x1C\xFEV[\x90V[_\x90V[a\x0FFa\x0FK\x91a\x0CNV[a\x04GV[\x90V[a\x0FX\x90Ta\x0F:V[\x90V[a\x0Fca\x0F6V[Pa\x0Fn`\x03a\x0FNV[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0F\x9Ca\x0F\x97a\x0F\xA1\x92a\x0FvV[a\x0F\x82V[a\x0FyV[\x90V[\x90V[a\x0F\xB3a\x0F\xB8\x91a\x0FyV[a\x0F\xA4V[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\x0F\xDC\x81a\x0F\xE3\x93a\x0F\xBCV[\x80\x93a\x0F\xC1V[\x01\x90V[\x80a\x0F\xF8`\x01\x92a\x0F\xFF\x96\x94a\x0F\xA7V[\x01\x91a\x0F\xCCV[\x90V[a\x10@\x90a\x10\x0Ea\x0FqV[Pa\x101a\x10\x1B_a\x0F\x88V[\x91\x93a\x10%a\x02\x02V[\x94\x85\x93` \x85\x01a\x0F\xE7V[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\x8AV[\x90V[\x90a\x10_a\x10Y32\x90\x85\x85\x91\x92\x90\x91\x92a\x15UV[\x15a\x02\xC1V[a\x10nWa\x10l\x91a\x11\x0FV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x10\x86`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[`\x08\x1C\x90V[a\x10\x9Ca\x10\xA1\x91a\x10\x8AV[a\x04GV[\x90V[a\x10\xAE\x90Ta\x10\x90V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x10\xD4a\x10\xDA\x91\x93\x92\x93a\x02\x1FV[\x92a\x02\x1FV[\x82\x03\x91\x82\x11a\x10\xE5WV[a\x10\xB1V[a\x10\xF9a\x10\xFF\x91\x93\x92\x93a\x02\x1FV[\x92a\x02\x1FV[\x82\x01\x80\x92\x11a\x11\nWV[a\x10\xB1V[\x90a\x11#a\x11\x1D`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x11XWa\x11Ca\x11V\x92a\x11<a\x11Q\x93Z\x92a\x11\xACV[Z\x90a\x10\xC5V[a\x11Ka\rJV[\x90a\x10\xEAV[a\x1E\xD2V[V[a\x11a\x91a\x11\xACV[V[a\x11l\x90a\x06\x93V[\x90V[\x91\x90a\x11\x89\x81a\x11\x82\x81a\x11\x8E\x95a\x03\xA6V[\x80\x95a\x0F\xC1V[a\x03\xBAV[\x01\x90V[\x90\x91a\x11\xA9\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x11oV[\x90V[3\x90\x91a\x11\xD9\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x11cV[\x92a\x11\xEEa\x11\xE5a\x02\x02V[\x92\x83\x92\x83a\x11\x92V[\x03\x90\xA2V[\x90a\x11\xFD\x91a\x10CV[V[\x90a\x12\x11\x91a\x12\x0Ca\x1F\xD9V[a\x13\x17V[V[`\xA0\x1C\x90V[a\x12%a\x12*\x91a\x12\x13V[a\x04GV[\x90V[a\x127\x90Ta\x12\x19V[\x90V[a\x12Na\x12Ia\x12S\x92a\x0FvV[a\x06tV[a\x04\xF0V[\x90V[a\x12_\x90a\x12:V[\x90V[`\xA0\x1B\x90V[\x90a\x12w`\xFF`\xA0\x1B\x91a\x12bV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x8A\x90a\x02\xC1V[\x90V[\x90V[\x90a\x12\xA5a\x12\xA0a\x12\xAC\x92a\x12\x81V[a\x12\x8DV[\x82Ta\x12hV[\x90UV[a\x12\xB9\x90a\x06wV[\x90V[a\x12\xC5\x90a\x12\xB0V[\x90V[_\x1B\x90V[\x90a\x12\xDE`\x01\x80`\xA0\x1B\x03\x91a\x12\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xF1\x90a\x12\xB0V[\x90V[\x90V[\x90a\x13\x0Ca\x13\x07a\x13\x13\x92a\x12\xE8V[a\x12\xF4V[\x82Ta\x12\xCDV[\x90UV[a\x13!`\x01a\x12-V[a\x13\x89W\x81a\x13@a\x13:a\x135_a\x12VV[a\x04\xFBV[\x91a\x04\xFBV[\x14a\x13mWa\x13fa\x13_a\x13k\x93a\x13Z`\x01\x80a\x12\x90V[a\x12\xBCV[`\x01a\x12\xF7V[a\x1B\xBEV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x13\x85`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\xA0`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[\x90a\x13\xAE\x91a\x11\xFFV[V[\x90a\x13\xBA\x90a\x02\x1FV[\x90RV[\x90a\x14%a\x14\x1C`\x03a\x13\xCFa\x0E\xC8V[\x94a\x13\xE6a\x13\xDE_\x83\x01a\x0CgV[_\x88\x01a\x13\xB0V[a\x13\xFEa\x13\xF5`\x01\x83\x01a\x0CgV[` \x88\x01a\x13\xB0V[a\x14\x16a\x14\r`\x02\x83\x01a\x0CgV[`@\x88\x01a\x13\xB0V[\x01a\x0CgV[``\x84\x01a\x13\xB0V[V[a\x140\x90a\x13\xBEV[\x90V[a\x14Ja\x14O\x91a\x14Ba\x0F\x17V[P`\x04a\x0C8V[a\x14'V[\x90V[a\x14Za\x1F\xD9V[a\x14ba\x14dV[V[a\x14la dV[V[a\x14va\x14RV[V[a\x14\x80a\x1F\xD9V[a\x14\x88a\x14\x8AV[V[a\x14\x9Ba\x14\x96_a\x12VV[a \x94V[V[a\x14\xA5a\x14xV[V[a\x14\xB3a\x14\xB8\x91a\x0CNV[a\x064V[\x90V[a\x14\xC5\x90Ta\x14\xA7V[\x90V[`\xE0\x1B\x90V[a\x14\xD7\x81a\x02\xC1V[\x03a\x14\xDEWV[_\x80\xFD[\x90PQ\x90a\x14\xEF\x82a\x14\xCEV[V[\x90` \x82\x82\x03\x12a\x15\nWa\x15\x07\x91_\x01a\x14\xE2V[\x90V[a\x02\x0CV[a\x155a\x15B\x95\x93\x94\x92\x94a\x15+``\x84\x01\x96_\x85\x01\x90a\t\xD5V[` \x83\x01\x90a\t\xD5V[`@\x81\x85\x03\x91\x01Ra\x11oV[\x90V[a\x15Ma\x02\x02V[=_\x82>=\x90\xFD[\x92a\x15\x98` \x93\x94a\x15ea\x0F6V[Pa\x15\xA3a\x15{a\x15v`\x01a\x14\xBBV[a\x06\x9FV[\x93cz9y\xDC\x92\x95\x97a\x15\x8Ca\x02\x02V[\x98\x89\x97\x88\x96\x87\x96a\x14\xC8V[\x86R`\x04\x86\x01a\x15\x0FV[\x03\x91Z\xFA\x90\x81\x15a\x15\xE7W_\x91a\x15\xB9W[P\x90V[a\x15\xDA\x91P` =\x81\x11a\x15\xE0W[a\x15\xD2\x81\x83a\x0E\x8AV[\x81\x01\x90a\x14\xF1V[_a\x15\xB5V[P=a\x15\xC8V[a\x15EV[_\x90V[a\x15\xFA\x90Qa\x02\x1FV[\x90V[a\x16\x05a\x15\xECV[Pa\x16,a\x16\x13`\x05a\x0CgV[a\x16&``a\x16 a\x1C\xFEV[\x01a\x15\xF0V[\x90a\x10\xEAV[\x90V[\x90a\x16Ka\x16E32\x90\x85\x85\x91\x92\x90\x91\x92a\x15UV[\x15a\x02\xC1V[a\x16ZWa\x16X\x91a\x16vV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x16r`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[\x90a\x16\x8Aa\x16\x84`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x16\xBFWa\x16\xAAa\x16\xBD\x92a\x16\xA3a\x16\xB8\x93Z\x92a\x16\xCAV[Z\x90a\x10\xC5V[a\x16\xB2a\rJV[\x90a\x10\xEAV[a\x1E\xD2V[V[a\x16\xC8\x91a\x16\xCAV[V[\x90a\x16\xD6\x903\x92a\x10\x02V[\x90a\x17\x16a\x17\x04\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x11cV[\x92a\x17\ra\x02\x02V[\x91\x82\x91\x82a\x03\xF5V[\x03\x90\xA2V[\x90a\x17%\x91a\x16/V[V[a\x17;a\x176a\x17@\x92a\x0FvV[a\x06tV[a\x02\x1FV[\x90V[a\x17Ka\x15\xECV[Pa\x17Ta\x1C\xFEV[a\x17__\x82\x01a\x15\xF0V[a\x17qa\x17k_a\x17'V[\x91a\x02\x1FV[\x14a\x17\xC6Wa\x17\x84_a\x17\x92\x92\x01a\x15\xF0V[a\x17\x8Ca\x07\xB0V[\x90a\x10\xEAV[Ba\x17\xA5a\x17\x9F\x83a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x17\xB9Wa\x17\xB6\x90B\x90a\x10\xC5V[\x90V[Pa\x17\xC3_a\x17'V[\x90V[Pa\x17\xD0_a\x17'V[\x90V[a\x17\xDBa\x15\xECV[Pa\x17\xEF``a\x17\xE9a\x1C\xFEV[\x01a\x15\xF0V[\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x18\ra\x18\x12\x91a\x0CNV[a\x17\xF6V[\x90V[a\x18\x1F\x90Ta\x18\x01V[\x90V[a\x18*a\x17\xF2V[Pa\x184_a\x18\x15V[\x90V[\x90V[a\x18Na\x18Ia\x18S\x92a\x187V[a\x06tV[a\x02\x1FV[\x90V[a\x18^a\x15\xECV[Pa\x18ra\x18l`\x03a\x0FNV[\x15a\x02\xC1V[a\x18\x96Wa\x18\x93a\x18\x83`\x02a\x0CgV[a\x18\x8D`\x01a\x18:V[\x90a\x10\xEAV[\x90V[a\x18\x9F_a\x17'V[\x90V[a\x18\xAAa\x15\xECV[Pa\x18\xBE`@a\x18\xB8a\x1C\xFEV[\x01a\x15\xF0V[\x90V[\x90a\x18\xD5a\x18\xCF`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x19\nWa\x18\xF5a\x19\x08\x92a\x18\xEEa\x19\x03\x93Z\x92a\x19\xAFV[Z\x90a\x10\xC5V[a\x18\xFDa\rJV[\x90a\x10\xEAV[a\x1E\xD2V[V[a\x19\x13\x91a\x19\xAFV[V[P\x90V[`\x01a\x19%\x91\x01a\x02\x1FV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x19\x8AW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x19\x85W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x19\x80WV[a\x19DV[a\x19@V[a\x19<V[\x90\x82\x10\x15a\x19\xAAW` a\x19\xA6\x92\x02\x81\x01\x90a\x19HV[\x90\x91V[a\x19(V[a\x19\xBA\x81\x83\x90a\x19\x15V[\x91a\x19\xC3a\x15\xECV[Pa\x19\xCD_a\x17'V[[\x80a\x19\xE1a\x19\xDB\x86a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x1ArWa\x1A\x0F\x90a\x1A\x0532\x90a\x19\xFD\x87\x87\x86\x91a\x19\x8FV[\x92\x90\x91a\x15UV[a\x1A\x14W[a\x19\x19V[a\x19\xCEV[3a\x1A*a\x1A$\x86\x86\x85\x91a\x19\x8FV[\x90a\x10\x02V[\x90a\x1Aja\x1AX\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x11cV[\x92a\x1Aaa\x02\x02V[\x91\x82\x91\x82a\x03\xF5V[\x03\x90\xA2a\x1A\nV[PPPPV[\x90a\x1A\x82\x91a\x18\xC1V[V[a\x1A\x95\x90a\x1A\x90a\x1F\xD9V[a\x1A\x97V[V[\x80a\x1A\xB2a\x1A\xACa\x1A\xA7_a\x12VV[a\x04\xFBV[\x91a\x04\xFBV[\x14a\x1B\x0CWa\x1A\xCAa\x1A\xC3\x82a\x12\xBCV[`\x01a\x12\xF7V[a\x1A\xF4\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x11cV[\x90a\x1A\xFDa\x02\x02V[\x80a\x1B\x07\x81a\x04\xB7V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x1B$`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[a\x1B1\x90a\x1A\x84V[V[a\x1B;a\x1F\xD9V[a\x1BCa\x1BEV[V[a\x1BMa \xF3V[V[a\x1BWa\x1B3V[V[a\x1Bj\x90a\x1Bea\x1F\xD9V[a\x1BlV[V[\x80a\x1B\x87a\x1B\x81a\x1B|_a\x12VV[a\x04\xFBV[\x91a\x04\xFBV[\x14a\x1B\x97Wa\x1B\x95\x90a \x94V[V[a\x1B\xBAa\x1B\xA3_a\x12VV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t\xE2V[\x03\x90\xFD[a\x1B\xC7\x90a\x1BYV[V[` \x91\x81R\x01\x90V[_\x7FGasCounter: invalid range\0\0\0\0\0\0\0\x91\x01RV[a\x1C\x06`\x19` \x92a\x1B\xC9V[a\x1C\x0F\x81a\x1B\xD2V[\x01\x90V[a\x1C(\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1B\xF9V[\x90V[\x15a\x1C2WV[a\x1C:a\x02\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1CP`\x04\x82\x01a\x1C\x13V[\x03\x90\xFD[a\x1C\x83\x91a\x1C`a\x15\xECV[Pa\x1C~\x81a\x1Cwa\x1Cq\x85a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x1C+V[a\x10\xC5V[\x90V[a\x1C\x90`\x80a\x0E\xB3V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1C\xB3a\x1C\xB9\x91a\x02\x1FV[\x91a\x02\x1FV[\x90\x81\x15a\x1C\xC4W\x04\x90V[a\x1C\x93V[a\x1C\xD8a\x1C\xDE\x91\x93\x92\x93a\x02\x1FV[\x92a\x02\x1FV[\x91a\x1C\xEA\x83\x82\x02a\x02\x1FV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1C\xF9WV[a\x10\xB1V[a\x1D\x06a\x0F\x17V[Pa\x1D\x1Aa\x1D\x14`\x03a\x0FNV[\x15a\x02\xC1V[a\x1E\x16Wa\x1D;a\x1D6`\x04a\x1D0`\x02a\x0CgV[\x90a\x0C8V[a\x14'V[Ba\x1Dia\x1Dca\x1D^a\x1DP_\x86\x01a\x15\xF0V[a\x1DXa\x07\xB0V[\x90a\x10\xEAV[a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x1DrW\x90V[a\x1D\xBF\x90a\x1D\xB9a\x1D\xAA_a\x1D\xA3a\x1D\x95Ba\x1D\x8F\x84\x88\x01a\x15\xF0V[\x90a\x10\xC5V[a\x1D\x9Da\x07\xB0V[\x90a\x1C\xA7V[\x93\x01a\x15\xF0V[\x91a\x1D\xB3a\x07\xB0V[\x90a\x1C\xC9V[\x90a\x10\xEAV[a\x1E\x13a\x1E\n_a\x1E\x05a\x1D\xFC_a\x1D\xF7a\x1D\xEE_\x95a\x1D\xE9a\x1D\xE0a\x1C\x86V[\x9A_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[\x90V[_a\x1Esa\x1Ej_a\x1Eea\x1E\\_a\x1EWa\x1EN_\x95a\x1EIa\x1EAa\x1E;a\x1C\x86V[\x9Ba\x17'V[_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[\x90V[\x90a\x1E\x82_\x19\x91a\x12\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x1E\xA4a\x1E\x9Fa\x1E\xAB\x92a\x0C\x1CV[a\x1E\x8CV[\x82Ta\x1EvV[\x90UV[\x91` a\x1E\xD0\x92\x94\x93a\x1E\xC9`@\x82\x01\x96_\x83\x01\x90a\x07:V[\x01\x90a\x07:V[V[a\x1E\xE5a\x1E\xDF`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x1F\xD6Wa\x1E\xFCa\x1E\xF6`\x03a\x0FNV[\x15a\x02\xC1V[a\x1F\xC9W[a\x1F\ta\"\xC9V[a\x1Fza\x1F\x17\x82:\x90a\x1C\xC9V[a\x1FJ\x83a\x1FD`\x02a\x1F4`\x04a\x1F.\x83a\x0CgV[\x90a\x0C8V[\x01\x91a\x1F?\x83a\x0CgV[a\x10\xEAV[\x90a\x1E\x8FV[a\x1Ft`\x03a\x1Fd`\x04a\x1F^`\x02a\x0CgV[\x90a\x0C8V[\x01\x91a\x1Fo\x83a\x0CgV[a\x10\xEAV[\x90a\x1E\x8FV[a\x1F\x84`\x02a\x0CgV[:a\x1F\xAF\x7F-\x9CG\xADU;c\xBB\xBA\xD1\x81\x9DO\xD9}\xA0\x88P\\\x96\xA5\x81\x82i\x1B\x8A\xBB_+\xCC)\xEE\x92a\x0C\x1CV[\x92a\x1F\xC4a\x1F\xBBa\x02\x02V[\x92\x83\x92\x83a\x1E\xAFV[\x03\x90\xA2V[a\x1F\xD1a!\xBEV[a\x1F\x01V[PV[a\x1F\xE1a\x18\"V[a\x1F\xFAa\x1F\xF4a\x1F\xEFa$\xC9V[a\x04\xFBV[\x91a\x04\xFBV[\x03a \x01WV[a #a \x0Ca$\xC9V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t\xE2V[\x03\x90\xFD[`\x08\x1B\x90V[\x90a :a\xFF\0\x91a 'V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a Ya Ta `\x92a\x12\x81V[a\x12\x8DV[\x82Ta -V[\x90UV[a o_`\x03a DV[V[\x90V[\x90a \x89a \x84a \x90\x92a\x11cV[a qV[\x82Ta\x12\xCDV[\x90UV[a \x9D_a\x18\x15V[a \xA7\x82_a tV[\x90a \xDBa \xD5\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x11cV[\x91a\x11cV[\x91a \xE4a\x02\x02V[\x80a \xEE\x81a\x04\xB7V[\x03\x90\xA3V[a \xFF`\x01`\x03a DV[V[\x90a!\r`\xFF\x91a\x12\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a!,a!'a!3\x92a\x12\x81V[a\x12\x8DV[\x82Ta!\x01V[\x90UV[\x90a!A\x90a\x17'V[_R` R`@_ \x90V[\x90a!\xAA```\x03a!\xB0\x94a!p_\x82\x01a!j_\x88\x01a\x15\xF0V[\x90a\x1E\x8FV[a!\x89`\x01\x82\x01a!\x83` \x88\x01a\x15\xF0V[\x90a\x1E\x8FV[a!\xA2`\x02\x82\x01a!\x9C`@\x88\x01a\x15\xF0V[\x90a\x1E\x8FV[\x01\x92\x01a\x15\xF0V[\x90a\x1E\x8FV[V[\x90a!\xBC\x91a!MV[V[a!\xD1a!\xCB`\x03a\x0FNV[\x15a\x02\xC1V[a!\xD8W[V[a!\xE4`\x01`\x03a!\x17V[a!\xF7a!\xF0_a\x17'V[`\x02a\x1E\x8FV[a\"`Ba\"Oa\"F_a\"Aa\"8_a\"3a\"*_\x95a\"%a\"\x1Ca\x1C\x86V[\x9A_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[a\"[`\x04_\x90a!7V[a!\xB2V[_B\x90a\"\xA2a\"\x90\x7FA\xF1\xE0\x8F!\xCC\x81\x8C\xF0\xCF\xFB:b`\x9F\xB6\xA3\xCB\xC9\xB3g\x1B\x01\x1E(^\x17\xA1\xEB\xB4h\x8E\x92a\x17'V[\x92a\"\x99a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xA2a!\xD6V[\x90V[a\"\xB6\x90a\x02\x1FV[_\x19\x81\x14a\"\xC4W`\x01\x01\x90V[a\x10\xB1V[a\"\xE6a\"\xE1`\x04a\"\xDB`\x02a\x0CgV[\x90a\x0C8V[a\"\xAAV[Ba#\x14a#\x0Ea#\ta\"\xFB_\x86\x01a\x0CgV[a#\x03a\x07\xB0V[\x90a\x10\xEAV[a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a#\x1EW[PV[a#Fa#=a#/_\x84\x01a\x0CgV[a#7a\x07\xB0V[\x90a\x10\xEAV[`\x01\x83\x01a\x1E\x8FV[a#na#ga#X`\x03\x84\x01a\x0CgV[a#b`\x05a\x0CgV[a\x10\xEAV[`\x05a\x1E\x8FV[a#x`\x02a\x0CgV[a#\xA5a#\x87`\x02\x84\x01a\x0CgV[\x92a#\x9F_a#\x98`\x01\x84\x01a\x0CgV[\x92\x01a\x0CgV[\x90a\x10\xC5V[a#\xCF\x7FH\xA2\x98\xF9\xD3v\xB8*qt\xA7\x98\xE9\x0C\xF1 \x94\x95\xFD\xD6\x8B\x0C\x11\xEB\x11\xBE\xAB\xAC\xC2\xD2\x9C\xF5\x92a\x0C\x1CV[\x92a#\xE4a#\xDBa\x02\x02V[\x92\x83\x92\x83a\x1E\xAFV[\x03\x90\xA2a$\x03a#\xFCa#\xF7`\x02a\x0CgV[a\"\xADV[`\x02a\x1E\x8FV[a$uBa$[a$R_a$Ma$D_a$?a$6_\x95a$1a$(a\x1C\x86V[\x9A_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[a$p`\x04a$j`\x02a\x0CgV[\x90a\x0C8V[a!\xB2V[a$\x7F`\x02a\x0CgV[B\x90a$\xC0a$\xAE\x7FA\xF1\xE0\x8F!\xCC\x81\x8C\xF0\xCF\xFB:b`\x9F\xB6\xA3\xCB\xC9\xB3g\x1B\x01\x1E(^\x17\xA1\xEB\xB4h\x8E\x92a\x0C\x1CV[\x92a$\xB7a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xA2_a#\x1BV[a$\xD1a\x17\xF2V[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610a11565b61001d5f3561016c565b806301ffc9a7146101675780630d5869ee146101625780631f43fc8b1461015d578063248a9ca314610158578063297f4c64146101535780632cd799bd1461014e5780632f2ff15d1461014957806336568abe146101445780633bfec7a21461013f5780633f4ba83a1461013a5780635c975abb146101355780637232c133146101305780638456cb591461012b5780638c39aaa4146101265780638de6e28c1461012157806391d148541461011c578063999d71d414610117578063a217fddf14610112578063d547741f1461010d578063d9852abf146101085763ec87621c0361000e576109dc565b610973565b6108a7565b610872565b610802565b6107bd565b610788565b610755565b610722565b6106ed565b6106b8565b610685565b610652565b61061e565b6105ea565b610560565b6104c0565b610422565b6103ac565b6102eb565b6101f4565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61019581610180565b0361019c57565b5f80fd5b905035906101ad8261018c565b565b906020828203126101c8576101c5915f016101a0565b90565b61017c565b151590565b6101db906101cd565b9052565b91906101f2905f602085019401906101d2565b565b346102245761022061020f61020a3660046101af565b610a19565b610217610172565b918291826101df565b0390f35b610178565b90565b61023581610229565b0361023c57565b5f80fd5b9050359061024d8261022c565b565b9060208282031261026857610265915f01610240565b90565b61017c565b90565b61028461027f61028992610229565b61026d565b610229565b90565b9061029690610270565b5f5260205260405f2090565b1c90565b60ff1690565b6102bc9060086102c193026102a2565b6102a6565b90565b906102cf91546102ac565b90565b6102e8906102e36004915f9261028c565b6102c4565b90565b3461031b5761031761030661030136600461024f565b6102d2565b61030e610172565b918291826101df565b0390f35b610178565b90565b61032c81610320565b0361033357565b5f80fd5b9050359061034482610323565b565b919060408382031261036e578061036261036b925f8601610337565b93602001610240565b90565b61017c565b60018060a01b031690565b61038790610373565b90565b6103939061037e565b9052565b91906103aa905f6020850194019061038a565b565b346103dd576103d96103c86103c2366004610346565b90610a63565b6103d0610172565b91829182610397565b0390f35b610178565b906020828203126103fb576103f8915f01610337565b90565b61017c565b61040990610320565b9052565b9190610420905f60208501940190610400565b565b346104525761044e61043d6104383660046103e2565b610ae5565b610445610172565b9182918261040d565b0390f35b610178565b5f91031261046157565b61017c565b90565b61047990600861047e93026102a2565b610466565b90565b9061048c9154610469565b90565b61049b60025f90610481565b90565b6104a790610229565b9052565b91906104be905f6020850194019061049e565b565b346104f0576104d0366004610457565b6104ec6104db61048f565b6104e3610172565b918291826104ab565b0390f35b610178565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61053661053f6020936105449361052d816104f5565b938480936104f9565b95869101610502565b61050d565b0190565b61055d9160208201915f818403910152610517565b90565b346105905761058c61057b61057636600461024f565b610ba2565b610583610172565b91829182610548565b0390f35b610178565b61059e8161037e565b036105a557565b5f80fd5b905035906105b682610595565b565b91906040838203126105e057806105d46105dd925f8601610337565b936020016105a9565b90565b61017c565b5f0190565b34610619576106036105fd3660046105b8565b90610c47565b61060b610172565b80610615816105e5565b0390f35b610178565b3461064d576106376106313660046105b8565b90610c53565b61063f610172565b80610649816105e5565b0390f35b610178565b346106805761066a61066536600461024f565b610da8565b610672610172565b8061067c816105e5565b0390f35b610178565b346106b357610695366004610457565b61069d610dd7565b6106a5610172565b806106af816105e5565b0390f35b610178565b346106e8576106c8366004610457565b6106e46106d3610de1565b6106db610172565b918291826101df565b0390f35b610178565b3461071d5761071961070861070336600461024f565b610e58565b610710610172565b918291826104ab565b0390f35b610178565b3461075057610732366004610457565b61073a610ec5565b610742610172565b8061074c816105e5565b0390f35b610178565b346107835761076d61076836600461024f565b610fb8565b610775610172565b8061077f816105e5565b0390f35b610178565b346107b857610798366004610457565b6107b46107a361100f565b6107ab610172565b918291826104ab565b0390f35b610178565b346107ee576107ea6107d96107d33660046105b8565b906110c3565b6107e1610172565b918291826101df565b0390f35b610178565b6107ff60035f90610481565b90565b3461083257610812366004610457565b61082e61081d6107f3565b610825610172565b918291826104ab565b0390f35b610178565b90565b5f1b90565b61085361084e61085892610837565b61083a565b610320565b90565b6108645f61083f565b90565b61086f61085b565b90565b346108a257610882366004610457565b61089e61088d610867565b610895610172565b9182918261040d565b0390f35b610178565b346108d6576108c06108ba3660046105b8565b90611116565b6108c8610172565b806108d2816105e5565b0390f35b610178565b6108e49061037e565b90565b6108f0816108db565b036108f757565b5f80fd5b90503590610908826108e7565b565b60808183031261094b57610920825f8301610240565b9261094861093184602085016105a9565b9361093f81604086016108fb565b93606001610337565b90565b61017c565b91602061097192949361096a60408201965f83019061038a565b019061049e565b565b346109a85761098f61098636600461090a565b92919091611467565b906109a461099b610172565b92839283610950565b0390f35b610178565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6109d96109ad565b90565b34610a0c576109ec366004610457565b610a086109f76109d1565b6109ff610172565b9182918261040d565b0390f35b610178565b5f80fd5b5f90565b610a21610a15565b5080610a3c610a36637965db0b60e01b610180565b91610180565b14908115610a49575b5090565b610a539150611488565b5f610a45565b5f90565b60200190565b90610a7a610a9392610a73610a59565b5091610ba2565b610a8c610a86826104f5565b91610a5d565b20906114ba565b90565b5f90565b610aa390610320565b90565b90610ab090610a9a565b5f5260205260405f2090565b5f1c90565b90565b610ad0610ad591610abc565b610ac1565b90565b610ae29054610ac4565b90565b6001610afd610b0392610af6610a96565b505f610aa6565b01610ad8565b90565b606090565b634e487b7160e01b5f52604160045260245ffd5b90610b299061050d565b810190811067ffffffffffffffff821117610b4357604052565b610b0b565b90610b5b610b54610172565b9283610b1f565b565b905090565b610b87610b7e92602092610b75816104f5565b94858093610b5d565b93849101610502565b0190565b610b9990610b9f9392610b62565b90610b62565b90565b610c1a610be591610bb1610b06565b50610bf4612bab91610bc560208401610b48565b9280845261234f6020850139610bd9610172565b948591602083016104ab565b60208201810382520384610b1f565b610c0b610bff610172565b93849260208401610b8b565b60208201810382520382610b1f565b90565b90610c3891610c33610c2e82610ae5565b6114db565b610c3a565b565b90610c44916114ef565b50565b90610c5191610c1d565b565b9080610c6e610c68610c6361159a565b61037e565b9161037e565b03610c7f57610c7c916115a7565b50565b5f63334bd91960e11b815280610c97600482016105e5565b0390fd5b610cb490610caf610caa6109ad565b6114db565b610d1c565b565b610cc2610cc791610abc565b6102a6565b90565b610cd49054610cb6565b90565b90610ce360ff9161083a565b9181191691161790565b610cf6906101cd565b90565b90565b90610d11610d0c610d1892610ced565b610cf9565b8254610cd7565b9055565b610d30610d2b6004839061028c565b610cca565b610d8c57610d4a6001610d456004849061028c565b610cfc565b610d747f21c25cd0a54e1609e3e68b335693eefb694d5ef17cc32b106f913f8a1f1b805891610270565b90610d7d610172565b80610d87816105e5565b0390a2565b5f6324591d8960e01b815280610da4600482016105e5565b0390fd5b610db190610c9b565b565b610dc3610dbe61085b565b6114db565b610dcb610dcd565b565b610dd56116a8565b565b610ddf610db3565b565b610de9610a15565b50610df46001610cca565b90565b5f90565b60ff1690565b610e15610e10610e1a92610837565b61026d565b610dfb565b90565b90565b610e34610e2f610e3992610e1d565b61026d565b610dfb565b90565b610e50610e4b610e5592610dfb565b61026d565b610229565b90565b610e6f610e7491610e67610df7565b50600461028c565b610cca565b5f14610e9057610e8d610e876001610e20565b5b610e3c565b90565b610e8d610e9c5f610e01565b610e88565b610eb1610eac61085b565b6114db565b610eb9610ebb565b565b610ec3611712565b565b610ecd610ea1565b565b610ee890610ee3610ede6109ad565b6114db565b610f67565b565b610ef6610efb91610abc565b610466565b90565b610f089054610eea565b90565b90610f175f199161083a565b9181191691161790565b90565b90610f39610f34610f4092610270565b610f21565b8254610f0b565b9055565b916020610f65929493610f5e60408201965f83019061049e565b019061049e565b565b610f716002610efe565b610f7c826002610f24565b907fd9e1239177bfbd2aebf5d0f20fc075e6df5a502c59d121acd57342c783e3136491610fb3610faa610172565b92839283610f44565b0390a1565b610fc190610ecf565b565b5190565b905090565b610ff1610fe892602092610fdf81610fc3565b94858093610fc7565b93849101610502565b0190565b611003906110099392610fcc565b90610fcc565b90565b90565b611017610df7565b5061107661107161103061102b6002610efe565b611815565b61106c6110456110406003610efe565b611815565b9161105d611051610172565b93849260208401610ff5565b60208201810382520382610b1f565b61100c565b6118c1565b90565b61108d61108861109292610373565b61026d565b610373565b90565b61109e90611079565b90565b6110aa90611095565b90565b906110b7906110a1565b5f5260205260405f2090565b6110e9915f6110de6110e4936110d7610a15565b5082610aa6565b016110ad565b610cca565b90565b90611107916111026110fd82610ae5565b6114db565b611109565b565b90611113916115a7565b50565b90611120916110ec565b565b9061113895949392916111336118f3565b61122c565b9091565b61115061114b61115592610837565b61026d565b610373565b90565b6111619061113c565b90565b61116d90611095565b90565b61118461117f61118992610837565b61026d565b610229565b90565b634e487b7160e01b5f52601160045260245ffd5b6111a990610229565b5f1981146111b75760010190565b61118c565b6111c590611079565b90565b6111d1906111bc565b90565b6111dd90611095565b90565b5f80fd5b60e01b90565b5f9103126111f457565b61017c565b91602061121a92949361121360408201965f83019061038a565b019061038a565b565b611224610172565b3d5f823e3d90fd5b95949593929350508261124f6112496112445f611158565b61037e565b9161037e565b14801561143d575b611421578061126e6112685f611170565b91610229565b145f1461141b5761127d61100f565b5b9461129361128e6004889061028c565b610cca565b6113ff576112e3916112b160016112ac60048a9061028c565b610cfc565b6112c36112bd5f611170565b91610229565b146113de575b6112d286610ba2565b6112de5f929192611170565b61191d565b916112f56112f0846111c8565b6111d4565b9063485cc9559061130584611164565b92803b156113d95761132a5f809461133561131e610172565b978896879586946111e4565b8452600484016111f9565b03925af180156113d4576113a8575b5083906113518391611164565b9061138e6113886113827f49b21f1e4190db8b0a933c951ed013de222c847c15461754682daa2eab1fdbd295610270565b926110a1565b926110a1565b92611397610172565b806113a1816105e5565b0390a49190565b6113c7905f3d81116113cd575b6113bf8183610b1f565b8101906111ea565b5f611344565b503d6113b5565b61121c565b6111e0565b6113fa6113f36113ee6003610efe565b6111a0565b6003610f24565b6112c9565b5f6324591d8960e01b815280611417600482016105e5565b0390fd5b8061127e565b5f63d92e233d60e01b815280611439600482016105e5565b0390fd5b5061144782611164565b61146161145b6114565f611158565b61037e565b9161037e565b14611257565b90611484939291611476610a59565b61147e610df7565b90611122565b9091565b611490610a15565b506114aa6114a46301ffc9a760e01b610180565b91610180565b1490565b6114b790611095565b90565b906114d8916114c7610a59565b50906114d2306114ae565b91611a0a565b90565b6114ed906114e761159a565b90611a5e565b565b6114f7610a15565b5061150c6115068284906110c3565b156101cd565b5f1461159457611533600161152e5f611526818690610aa6565b0185906110ad565b610cfc565b9061153c61159a565b9061157961157361156d7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610a9a565b926110a1565b926110a1565b92611582610172565b8061158c816105e5565b0390a4600190565b50505f90565b6115a2610a59565b503390565b6115af610a15565b506115bb8183906110c3565b5f14611642576115e15f6115dc5f6115d4818690610aa6565b0185906110ad565b610cfc565b906115ea61159a565b9061162761162161161b7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610a9a565b926110a1565b926110a1565b92611630610172565b8061163a816105e5565b0390a4600190565b50505f90565b611650611a99565b61165861165a565b565b6116655f6001610cfc565b61166d61159a565b6116a37f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161169a610172565b91829182610397565b0390a1565b6116b0611648565b565b6116ba6118f3565b6116c26116c4565b565b6116cf600180610cfc565b6116d761159a565b61170d7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891611704610172565b91829182610397565b0390a1565b61171a6116b2565b565b606090565b61173561173061173a92610e1d565b61026d565b610229565b90565b906117489101610229565b90565b67ffffffffffffffff81116117695761176560209161050d565b0190565b610b0b565b9061178061177b8361174b565b610b48565b918252565b369037565b906117af6117978361176e565b926020806117a5869361174b565b9201910390611785565b565b60016117bd9103610229565b90565b90565b6117d76117d26117dc926117c0565b61026d565b610229565b90565b634e487b7160e01b5f52601260045260245ffd5b6117ff61180591610229565b91610229565b908115611810570490565b6117df565b61181d61171c565b5061183a61182a82611c40565b6118346001611721565b9061173d565b906118448261178a565b9161184d610df7565b5060200182015b6001156118b757611867611893916117b1565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a835361188d600a6117c3565b906117f3565b806118a66118a05f611170565b91610229565b146118b15790611854565b50505b90565b50506118b4565b90565b6118f0906118cd610df7565b50806118ea6118e46118df5f946118be565b6104f5565b92611170565b90611ea1565b90565b6118fb610de1565b61190157565b5f63d93c066560e01b815280611919600482016105e5565b0390fd5b919091611928610a59565b50611932306114ae565b3161194561193f83610229565b91610229565b106119e257611953826104f5565b61196561195f5f611170565b91610229565b146119c65760208251920190f5903d15198215166119bb578161199861199261198d5f611158565b61037e565b9161037e565b1461199f57565b5f63b06ebf3d60e01b8152806119b7600482016105e5565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b8152806119de600482016105e5565b0390fd5b6119eb306114ae565b31611a065f92839263cf47918160e01b845260048401610f44565b0390fd5b91600b92611a16610a59565b50604051926040840152602083015281520160ff8153605560018060a01b0391201690565b916020611a5c929493611a5560408201965f83019061038a565b0190610400565b565b90611a73611a6d8383906110c3565b156101cd565b611a7b575050565b611a955f92839263e2517d3f60e01b845260048401611a3b565b0390fd5b611aaa611aa4610de1565b156101cd565b611ab057565b5f638dfc202b60e01b815280611ac8600482016105e5565b0390fd5b90565b611ae3611ade611ae892611acc565b61026d565b610229565b90565b90565b611b02611afd611b0792611aeb565b61026d565b610229565b90565b90565b611b21611b1c611b2692611b0a565b61026d565b610229565b90565b90565b611b40611b3b611b4592611b29565b61026d565b610229565b90565b90565b611b5f611b5a611b6492611b48565b61026d565b610229565b90565b90565b611b7e611b79611b8392611b67565b61026d565b610229565b90565b90565b611b9d611b98611ba292611b86565b61026d565b610229565b90565b90565b611bbc611bb7611bc192611ba5565b61026d565b610229565b90565b90565b611bdb611bd6611be092611bc4565b61026d565b610229565b90565b90565b611bfa611bf5611bff92611be3565b61026d565b610229565b90565b90565b611c19611c14611c1e92611c02565b61026d565b610229565b90565b90565b611c38611c33611c3d92611c21565b61026d565b610229565b90565b611c48610df7565b50611c525f611170565b9080611c81611c7b7a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000611acf565b91610229565b1015611e59575b80611ca9611ca36d04ee2d6d415b85acef8100000000611b0d565b91610229565b1015611e1e575b80611cca611cc4662386f26fc10000611b4b565b91610229565b1015611dea575b80611ce8611ce26305f5e100611b89565b91610229565b1015611db9575b80611d04611cfe612710611bc7565b91610229565b1015611d8a575b80611d1f611d196064611c05565b91610229565b1015611d5c575b611d39611d33600a6117c3565b91610229565b1015611d43575b90565b611d5790611d516001611721565b9061173d565b611d40565b611d73611d8491611d6d6064611c05565b906117f3565b91611d7e6002611c24565b9061173d565b90611d26565b611da2611db391611d9c612710611bc7565b906117f3565b91611dad6004611be6565b9061173d565b90611d0b565b611dd3611de491611dcd6305f5e100611b89565b906117f3565b91611dde6008611ba8565b9061173d565b90611cef565b611e07611e1891611e01662386f26fc10000611b4b565b906117f3565b91611e126010611b6a565b9061173d565b90611cd1565b611e42611e5391611e3c6d04ee2d6d415b85acef8100000000611b0d565b906117f3565b91611e4d6020611b2c565b9061173d565b90611cb0565b611e8a611e9b91611e847a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000611acf565b906117f3565b91611e956040611aee565b9061173d565b90611c88565b90611ec392611ebb92611eb2610df7565b50919091611ee6565b9190156101cd565b611eca5790565b5f634a7139bf60e11b815280611ee2600482016105e5565b0390fd5b91611eef610a15565b50611ef8610df7565b5080611f1c611f16611f11611f0c876118be565b6104f5565b610229565b91610229565b118015611f4b575b611f3a57611f3492919091612002565b91909190565b5050505f90611f485f611170565b90565b5081611f5f611f5983610229565b91610229565b11611f24565b6001611f719101610229565b90565b60ff60f81b1690565b611f8690611f74565b90565b90565b611fa0611f9b611fa592611f89565b61026d565b610dfb565b90565b611fb7611fbd91939293610229565b92610229565b91611fc9838202610229565b928184041490151715611fd857565b61118c565b611fec611ff291939293610229565b92610229565b8201809211611ffd57565b61118c565b61201d9061200e610a15565b50612017610df7565b506118be565b6120265f611170565b5b8261203a61203486610229565b91610229565b10156120be5761205b6120566120518486906120c9565b611f7d565b612237565b908161207061206a6009611f8c565b91610dfb565b116120ab576120a59161209961209361209f9361208d600a6117c3565b90611fa8565b91610e3c565b90611fdd565b92611f65565b91612027565b50505050505f906120bb5f611170565b90565b939250505060019190565b906120d2610a96565b50602001015190565b5f90565b60f81c90565b6120f96120f46120fe92610dfb565b61026d565b610dfb565b90565b61210d612112916120df565b6120e5565b90565b90565b61212c61212761213192612115565b61026d565b610dfb565b90565b90565b61214b61214661215092612134565b61026d565b610dfb565b90565b90565b61216a61216561216f92612153565b61026d565b610dfb565b90565b90565b61218961218461218e92612172565b61026d565b610dfb565b90565b6121a56121a06121aa92611aeb565b61026d565b610dfb565b90565b90565b6121c46121bf6121c9926121ad565b61026d565b610dfb565b90565b90565b6121e36121de6121e8926121cc565b61026d565b610dfb565b90565b906121f69103610dfb565b90565b90565b61221061220b612215926121f9565b61026d565b610dfb565b90565b90565b61222f61222a61223492612218565b61026d565b610dfb565b90565b612249906122436120db565b50612101565b8061225d612257602f612118565b91610dfb565b1180612333575b5f146122825761227e90612278603061221b565b906121eb565b5b90565b806122966122906060612156565b91610dfb565b1180612318575b5f146122bd576122b7906122b160576121fc565b906121eb565b5b61227f565b806122d16122cb6040612191565b91610dfb565b11806122fd575b5f146122f7576122f2906122ec60376121cf565b906121eb565b6122b8565b5060ff90565b508061231261230c60476121b0565b91610dfb565b106122d8565b508061232d6123276067612175565b91610dfb565b1061229d565b5080612348612342603a612137565b91610dfb565b1061226456fe60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b6124d6610516823960805181610b9201526124d690f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107612bab803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610169601860209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf610232565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60081b90565b906101f461ff00916101e1565b9181191691161790565b151590565b61020c906101fe565b90565b90565b9061022761022261022e92610203565b61020f565b82546101e7565b9055565b61023a61032a565b61024660016003610212565b565b60a01b90565b9061025d60ff60a01b91610248565b9181191691161790565b9061027c61027761028392610203565b61020f565b825461024e565b9055565b5f0190565b61029461003d565b3d5f823e3d90fd5b60018060a01b031690565b6102bb6102b66102c09261029c565b61010d565b61029c565b90565b6102cc906102a7565b90565b6102d8906102c3565b90565b5f1b90565b906102f160018060a01b03916102db565b9181191691161790565b610304906102c3565b90565b90565b9061031f61031a610326926102fb565b610307565b82546102e0565b9055565b61033333610397565b61033e5f6001610267565b61034661003d565b6101bf810181811060018060401b038211176103925761036e82916101bf6129ec8439610287565b03905ff0801561038d5761038461038b916102cf565b600161030a565b565b61028c565b610051565b6103a0906103f8565b565b6103b66103b16103bb9261010a565b61010d565b61029c565b90565b6103c7906103a2565b90565b6103d39061029c565b90565b6103df906103ca565b9052565b91906103f6905f602085019401906103d6565b565b8061041361040d6104085f6103be565b6103ca565b916103ca565b1461042357610421906104b6565b565b61044661042f5f6103be565b5f918291631e4fbdf760e01b8352600483016103e3565b0390fd5b5f1c90565b60018060a01b031690565b61046661046b9161044a565b61044f565b90565b610478905461045a565b90565b610484906102a7565b90565b6104909061047b565b90565b90565b906104ab6104a66104b292610487565b610493565b82546102e0565b9055565b6104bf5f61046e565b6104c9825f610496565b906104fd6104f77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610487565b91610487565b9161050661003d565b8061051081610287565b0390a356fe60806040526004361015610013575b610e72565b61001d5f356101fc565b8063086146d2146101f757806318d5aafe146101f2578063366cbab7146101ed5780633b6ab2a9146101e857806346e2cc09146101e3578063485cc955146101de5780634b2c0706146101d95780635467cb48146101d45780635b3cd6e2146101cf57806361543801146101ca5780636558954f146101c5578063715018a6146101c05780637a3979dc146101bb5780637fbd295e146101b6578063804e5123146101b157806382f44ade146101ac57806384fab62b146101a75780638d5a239b146101a25780638da5cb5b1461019d578063aff74c6d14610198578063c660d3f314610193578063cdafb9781461018e578063d4f0eb4d14610189578063d878134214610184578063de1f453e1461017f578063ea4a11041461017a578063ede07bd614610175578063f2fde38b14610170578063f7b8935e1461016b5763ff7b30840361000e57610e3d565b610df8565b610d98565b610d63565b610cf2565b610be9565b610bb4565b610b5d565b610b0b565b610a61565b610a2c565b6109f7565b6109a0565b61096b565b610926565b6108f2565b6108bd565b610884565b6107ff565b6107ca565b61075c565b6106cd565b610601565b6105cc565b610557565b6104bc565b610482565b61040d565b6102e8565b61028c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261021a57565b61020c565b90565b61022b9061021f565b9052565b90606080610275936102475f8201515f860190610222565b61025960208201516020860190610222565b61026b60408201516040860190610222565b0151910190610222565b565b919061028a905f6080850194019061022f565b565b346102bc5761029c366004610210565b6102b86102a7610f22565b6102af610202565b91829182610277565b0390f35b610208565b151590565b6102cf906102c1565b9052565b91906102e6905f602085019401906102c6565b565b34610318576102f8366004610210565b610314610303610f5b565b61030b610202565b918291826102d3565b0390f35b610208565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103675781359167ffffffffffffffff831161036257602001926001830284011161035d57565b610329565b610325565b610321565b9060208282031261039d575f82013567ffffffffffffffff811161039857610394920161032d565b9091565b61031d565b61020c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6103e36103ec6020936103f1936103da816103a2565b938480936103a6565b958691016103af565b6103ba565b0190565b61040a9160208201915f8184039101526103c4565b90565b3461043e5761043a61042961042336600461036c565b90611002565b610431610202565b918291826103f5565b0390f35b610208565b1c90565b60ff1690565b61045d9060086104629302610443565b610447565b90565b90610470915461044d565b90565b61047f60035f90610465565b90565b346104b257610492366004610210565b6104ae61049d610473565b6104a5610202565b918291826102d3565b0390f35b610208565b5f0190565b346104eb576104d56104cf36600461036c565b906111f3565b6104dd610202565b806104e7816104b7565b0390f35b610208565b60018060a01b031690565b610504906104f0565b90565b610510816104fb565b0361051757565b5f80fd5b9050359061052882610507565b565b9190604083820312610552578061054661054f925f860161051b565b9360200161051b565b90565b61020c565b346105865761057061056a36600461052a565b906113a4565b610578610202565b80610582816104b7565b0390f35b610208565b6105948161021f565b0361059b57565b5f80fd5b905035906105ac8261058b565b565b906020828203126105c7576105c4915f0161059f565b90565b61020c565b346105fc576105f86105e76105e23660046105ae565b611433565b6105ef610202565b91829182610277565b0390f35b610208565b3461062f57610611366004610210565b61061961146e565b610621610202565b8061062b816104b7565b0390f35b610208565b60018060a01b031690565b61064f9060086106549302610443565b610634565b90565b90610662915461063f565b90565b61067160015f90610657565b90565b90565b61068b610686610690926104f0565b610674565b6104f0565b90565b61069c90610677565b90565b6106a890610693565b90565b6106b49061069f565b9052565b91906106cb905f602085019401906106ab565b565b346106fd576106dd366004610210565b6106f96106e8610665565b6106f0610202565b918291826106b8565b0390f35b610208565b90565b61071590600861071a9302610443565b610702565b90565b906107289154610705565b90565b61073760025f9061071d565b90565b6107439061021f565b9052565b919061075a905f6020850194019061073a565b565b3461078c5761076c366004610210565b61078861077761072b565b61077f610202565b91829182610747565b0390f35b610208565b90565b6107a86107a36107ad92610791565b610674565b61021f565b90565b6107bc62278d00610794565b90565b6107c76107b0565b90565b346107fa576107da366004610210565b6107f66107e56107bf565b6107ed610202565b91829182610747565b0390f35b610208565b3461082d5761080f366004610210565b61081761149d565b61081f610202565b80610829816104b7565b0390f35b610208565b9160608383031261087f57610849825f850161051b565b92610857836020830161051b565b92604082013567ffffffffffffffff811161087a57610876920161032d565b9091565b61031d565b61020c565b346108b8576108b46108a361089a366004610832565b92919091611555565b6108ab610202565b918291826102d3565b0390f35b610208565b346108ed576108cd366004610210565b6108e96108d86115fd565b6108e0610202565b91829182610747565b0390f35b610208565b346109215761090b61090536600461036c565b9061171b565b610913610202565b8061091d816104b7565b0390f35b610208565b3461095657610936366004610210565b610952610941611743565b610949610202565b91829182610747565b0390f35b610208565b6109686003600190610465565b90565b3461099b5761097b366004610210565b61099761098661095b565b61098e610202565b918291826102d3565b0390f35b610208565b346109d0576109b0366004610210565b6109cc6109bb6117d3565b6109c3610202565b91829182610747565b0390f35b610208565b6109de906104fb565b9052565b91906109f5905f602085019401906109d5565b565b34610a2757610a07366004610210565b610a23610a12611822565b610a1a610202565b918291826109e2565b0390f35b610208565b34610a5c57610a3c366004610210565b610a58610a47611856565b610a4f610202565b91829182610747565b0390f35b610208565b34610a9157610a71366004610210565b610a8d610a7c6118a2565b610a84610202565b91829182610747565b0390f35b610208565b909182601f83011215610ad05781359167ffffffffffffffff8311610acb576020019260208302840111610ac657565b610329565b610325565b610321565b90602082820312610b06575f82013567ffffffffffffffff8111610b0157610afd9201610a96565b9091565b61031d565b61020c565b34610b3a57610b24610b1e366004610ad5565b90611a78565b610b2c610202565b80610b36816104b7565b0390f35b610208565b90602082820312610b5857610b55915f0161051b565b90565b61020c565b34610b8b57610b75610b70366004610b3f565b611b28565b610b7d610202565b80610b87816104b7565b0390f35b610208565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610be457610bc4366004610210565b610be0610bcf610b90565b610bd7610202565b91829182610747565b0390f35b610208565b34610c1757610bf9366004610210565b610c01611b4f565b610c09610202565b80610c13816104b7565b0390f35b610208565b610c30610c2b610c359261021f565b610674565b61021f565b90565b90610c4290610c1c565b5f5260205260405f2090565b5f1c90565b610c5f610c6491610c4e565b610702565b90565b610c719054610c53565b90565b610c7f906004610c38565b90610c8b5f8301610c67565b91610c9860018201610c67565b91610cb16003610caa60028501610c67565b9301610c67565b90565b610ce9610cf094610cdf606094989795610cd5608086019a5f87019061073a565b602085019061073a565b604083019061073a565b019061073a565b565b34610d2657610d22610d0d610d083660046105ae565b610c74565b90610d19949294610202565b94859485610cb4565b0390f35b610208565b90565b610d42610d3d610d4792610d2b565b610674565b61021f565b90565b610d55611388610d2e565b90565b610d60610d4a565b90565b34610d9357610d73366004610210565b610d8f610d7e610d58565b610d86610202565b91829182610747565b0390f35b610208565b34610dc657610db0610dab366004610b3f565b611bbe565b610db8610202565b80610dc2816104b7565b0390f35b610208565b9190604083820312610df35780610de7610df0925f860161059f565b9360200161059f565b90565b61020c565b34610e2957610e25610e14610e0e366004610dcb565b90611c54565b610e1c610202565b91829182610747565b0390f35b610208565b610e3a60055f9061071d565b90565b34610e6d57610e4d366004610210565b610e69610e58610e2e565b610e60610202565b91829182610747565b0390f35b610208565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90610e94906103ba565b810190811067ffffffffffffffff821117610eae57604052565b610e76565b90610ec6610ebf610202565b9283610e8a565b565b610ed26080610eb3565b90565b5f90565b610ee1610ec8565b90602080808085610ef0610ed5565b815201610efb610ed5565b815201610f06610ed5565b815201610f11610ed5565b81525050565b610f1f610ed9565b90565b610f2a610f17565b50610f33611cfe565b90565b5f90565b610f46610f4b91610c4e565b610447565b90565b610f589054610f3a565b90565b610f63610f36565b50610f6e6003610f4e565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b610f9c610f97610fa192610f76565b610f82565b610f79565b90565b90565b610fb3610fb891610f79565b610fa4565b9052565b905090565b90825f939282370152565b909182610fdc81610fe393610fbc565b8093610fc1565b0190565b80610ff8600192610fff9694610fa7565b0191610fcc565b90565b6110409061100e610f71565b5061103161101b5f610f88565b9193611025610202565b94859360208501610fe7565b60208201810382520382610e8a565b90565b9061105f61105933329085859192909192611555565b156102c1565b61106e5761106c9161110f565b565b5f631b8e828b60e31b815280611086600482016104b7565b0390fd5b60081c90565b61109c6110a19161108a565b610447565b90565b6110ae9054611090565b90565b634e487b7160e01b5f52601160045260245ffd5b6110d46110da9193929361021f565b9261021f565b82039182116110e557565b6110b1565b6110f96110ff9193929361021f565b9261021f565b820180921161110a57565b6110b1565b9061112361111d60036110a4565b156102c1565b611158576111436111569261113c611151935a926111ac565b5a906110c5565b61114b610d4a565b906110ea565b611ed2565b565b611161916111ac565b565b61116c90610693565b90565b9190611189816111828161118e956103a6565b8095610fc1565b6103ba565b0190565b90916111a99260208301925f81850391015261116f565b90565b3390916111d97f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611163565b926111ee6111e5610202565b92839283611192565b0390a2565b906111fd91611043565b565b906112119161120c611fd9565b611317565b565b60a01c90565b61122561122a91611213565b610447565b90565b6112379054611219565b90565b61124e61124961125392610f76565b610674565b6104f0565b90565b61125f9061123a565b90565b60a01b90565b9061127760ff60a01b91611262565b9181191691161790565b61128a906102c1565b90565b90565b906112a56112a06112ac92611281565b61128d565b8254611268565b9055565b6112b990610677565b90565b6112c5906112b0565b90565b5f1b90565b906112de60018060a01b03916112c8565b9181191691161790565b6112f1906112b0565b90565b90565b9061130c611307611313926112e8565b6112f4565b82546112cd565b9055565b611321600161122d565b611389578161134061133a6113355f611256565b6104fb565b916104fb565b1461136d5761136661135f61136b9361135a600180611290565b6112bc565b60016112f7565b611bbe565b565b5f632e7f3c7f60e11b815280611385600482016104b7565b0390fd5b5f62dc149f60e41b8152806113a0600482016104b7565b0390fd5b906113ae916111ff565b565b906113ba9061021f565b9052565b9061142561141c60036113cf610ec8565b946113e66113de5f8301610c67565b5f88016113b0565b6113fe6113f560018301610c67565b602088016113b0565b61141661140d60028301610c67565b604088016113b0565b01610c67565b606084016113b0565b565b611430906113be565b90565b61144a61144f91611442610f17565b506004610c38565b611427565b90565b61145a611fd9565b611462611464565b565b61146c612064565b565b611476611452565b565b611480611fd9565b61148861148a565b565b61149b6114965f611256565b612094565b565b6114a5611478565b565b6114b36114b891610c4e565b610634565b90565b6114c590546114a7565b90565b60e01b90565b6114d7816102c1565b036114de57565b5f80fd5b905051906114ef826114ce565b565b9060208282031261150a57611507915f016114e2565b90565b61020c565b611535611542959394929461152b60608401965f8501906109d5565b60208301906109d5565b604081850391015261116f565b90565b61154d610202565b3d5f823e3d90fd5b9261159860209394611565610f36565b506115a361157b61157660016114bb565b61069f565b93637a3979dc92959761158c610202565b988997889687966114c8565b86526004860161150f565b03915afa9081156115e7575f916115b9575b5090565b6115da915060203d81116115e0575b6115d28183610e8a565b8101906114f1565b5f6115b5565b503d6115c8565b611545565b5f90565b6115fa905161021f565b90565b6116056115ec565b5061162c6116136005610c67565b6116266060611620611cfe565b016115f0565b906110ea565b90565b9061164b61164533329085859192909192611555565b156102c1565b61165a5761165891611676565b565b5f631b8e828b60e31b815280611672600482016104b7565b0390fd5b9061168a61168460036110a4565b156102c1565b6116bf576116aa6116bd926116a36116b8935a926116ca565b5a906110c5565b6116b2610d4a565b906110ea565b611ed2565b565b6116c8916116ca565b565b906116d6903392611002565b906117166117047f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611163565b9261170d610202565b918291826103f5565b0390a2565b906117259161162f565b565b61173b61173661174092610f76565b610674565b61021f565b90565b61174b6115ec565b50611754611cfe565b61175f5f82016115f0565b61177161176b5f611727565b9161021f565b146117c6576117845f61179292016115f0565b61178c6107b0565b906110ea565b426117a561179f8361021f565b9161021f565b10156117b9576117b69042906110c5565b90565b506117c35f611727565b90565b506117d05f611727565b90565b6117db6115ec565b506117ef60606117e9611cfe565b016115f0565b90565b5f90565b60018060a01b031690565b61180d61181291610c4e565b6117f6565b90565b61181f9054611801565b90565b61182a6117f2565b506118345f611815565b90565b90565b61184e61184961185392611837565b610674565b61021f565b90565b61185e6115ec565b5061187261186c6003610f4e565b156102c1565b611896576118936118836002610c67565b61188d600161183a565b906110ea565b90565b61189f5f611727565b90565b6118aa6115ec565b506118be60406118b8611cfe565b016115f0565b90565b906118d56118cf60036110a4565b156102c1565b61190a576118f5611908926118ee611903935a926119af565b5a906110c5565b6118fd610d4a565b906110ea565b611ed2565b565b611913916119af565b565b5090565b6001611925910161021f565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561198a570180359067ffffffffffffffff82116119855760200191600182023603831361198057565b611944565b611940565b61193c565b908210156119aa5760206119a69202810190611948565b9091565b611928565b6119ba818390611915565b916119c36115ec565b506119cd5f611727565b5b806119e16119db8661021f565b9161021f565b1015611a7257611a0f90611a053332906119fd8787869161198f565b929091611555565b611a14575b611919565b6119ce565b33611a2a611a248686859161198f565b90611002565b90611a6a611a587f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611163565b92611a61610202565b918291826103f5565b0390a2611a0a565b50505050565b90611a82916118c1565b565b611a9590611a90611fd9565b611a97565b565b80611ab2611aac611aa75f611256565b6104fb565b916104fb565b14611b0c57611aca611ac3826112bc565b60016112f7565b611af47f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991611163565b90611afd610202565b80611b07816104b7565b0390a2565b5f632e7f3c7f60e11b815280611b24600482016104b7565b0390fd5b611b3190611a84565b565b611b3b611fd9565b611b43611b45565b565b611b4d6120f3565b565b611b57611b33565b565b611b6a90611b65611fd9565b611b6c565b565b80611b87611b81611b7c5f611256565b6104fb565b916104fb565b14611b9757611b9590612094565b565b611bba611ba35f611256565b5f918291631e4fbdf760e01b8352600483016109e2565b0390fd5b611bc790611b59565b565b60209181520190565b5f7f476173436f756e7465723a20696e76616c69642072616e676500000000000000910152565b611c066019602092611bc9565b611c0f81611bd2565b0190565b611c289060208101905f818303910152611bf9565b90565b15611c3257565b611c3a610202565b62461bcd60e51b815280611c5060048201611c13565b0390fd5b611c8391611c606115ec565b50611c7e81611c77611c718561021f565b9161021f565b1015611c2b565b6110c5565b90565b611c906080610eb3565b90565b634e487b7160e01b5f52601260045260245ffd5b611cb3611cb99161021f565b9161021f565b908115611cc4570490565b611c93565b611cd8611cde9193929361021f565b9261021f565b91611cea83820261021f565b928184041490151715611cf957565b6110b1565b611d06610f17565b50611d1a611d146003610f4e565b156102c1565b611e1657611d3b611d366004611d306002610c67565b90610c38565b611427565b42611d69611d63611d5e611d505f86016115f0565b611d586107b0565b906110ea565b61021f565b9161021f565b1015611d725790565b611dbf90611db9611daa5f611da3611d9542611d8f8488016115f0565b906110c5565b611d9d6107b0565b90611ca7565b93016115f0565b91611db36107b0565b90611cc9565b906110ea565b611e13611e0a5f611e05611dfc5f611df7611dee5f95611de9611de0611c86565b9a5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b90565b5f611e73611e6a5f611e65611e5c5f611e57611e4e5f95611e49611e41611e3b611c86565b9b611727565b5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b90565b90611e825f19916112c8565b9181191691161790565b90565b90611ea4611e9f611eab92610c1c565b611e8c565b8254611e76565b9055565b916020611ed0929493611ec960408201965f83019061073a565b019061073a565b565b611ee5611edf60036110a4565b156102c1565b611fd657611efc611ef66003610f4e565b156102c1565b611fc9575b611f096122c9565b611f7a611f17823a90611cc9565b611f4a83611f446002611f346004611f2e83610c67565b90610c38565b0191611f3f83610c67565b6110ea565b90611e8f565b611f746003611f646004611f5e6002610c67565b90610c38565b0191611f6f83610c67565b6110ea565b90611e8f565b611f846002610c67565b3a611faf7f2d9c47ad553b63bbbad1819d4fd97da088505c96a58182691b8abb5f2bcc29ee92610c1c565b92611fc4611fbb610202565b92839283611eaf565b0390a2565b611fd16121be565b611f01565b50565b611fe1611822565b611ffa611ff4611fef6124c9565b6104fb565b916104fb565b0361200157565b61202361200c6124c9565b5f91829163118cdaa760e01b8352600483016109e2565b0390fd5b60081b90565b9061203a61ff0091612027565b9181191691161790565b9061205961205461206092611281565b61128d565b825461202d565b9055565b61206f5f6003612044565b565b90565b9061208961208461209092611163565b612071565b82546112cd565b9055565b61209d5f611815565b6120a7825f612074565b906120db6120d57f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611163565b91611163565b916120e4610202565b806120ee816104b7565b0390a3565b6120ff60016003612044565b565b9061210d60ff916112c8565b9181191691161790565b9061212c61212761213392611281565b61128d565b8254612101565b9055565b9061214190611727565b5f5260205260405f2090565b906121aa606060036121b0946121705f820161216a5f88016115f0565b90611e8f565b61218960018201612183602088016115f0565b90611e8f565b6121a26002820161219c604088016115f0565b90611e8f565b0192016115f0565b90611e8f565b565b906121bc9161214d565b565b6121d16121cb6003610f4e565b156102c1565b6121d8575b565b6121e460016003612117565b6121f76121f05f611727565b6002611e8f565b6122604261224f6122465f6122416122385f61223361222a5f9561222561221c611c86565b9a5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b61225b60045f90612137565b6121b2565b5f42906122a26122907f41f1e08f21cc818cf0cffb3a62609fb6a3cbc9b3671b011e285e17a1ebb4688e92611727565b92612299610202565b91829182610747565b0390a26121d6565b90565b6122b69061021f565b5f1981146122c45760010190565b6110b1565b6122e66122e160046122db6002610c67565b90610c38565b6122aa565b4261231461230e6123096122fb5f8601610c67565b6123036107b0565b906110ea565b61021f565b9161021f565b101561231e575b50565b61234661233d61232f5f8401610c67565b6123376107b0565b906110ea565b60018301611e8f565b61236e61236761235860038401610c67565b6123626005610c67565b6110ea565b6005611e8f565b6123786002610c67565b6123a561238760028401610c67565b9261239f5f61239860018401610c67565b9201610c67565b906110c5565b6123cf7f48a298f9d376b82a7174a798e90cf1209495fdd68b0c11eb11beabacc2d29cf592610c1c565b926123e46123db610202565b92839283611eaf565b0390a26124036123fc6123f76002610c67565b6122ad565b6002611e8f565b6124754261245b6124525f61244d6124445f61243f6124365f95612431612428611c86565b9a5f8c016113b0565b611727565b602089016113b0565b611727565b604086016113b0565b611727565b606083016113b0565b612470600461246a6002610c67565b90610c38565b6121b2565b61247f6002610c67565b42906124c06124ae7f41f1e08f21cc818cf0cffb3a62609fb6a3cbc9b3671b011e285e17a1ebb4688e92610c1c565b926124b7610202565b91829182610747565b0390a25f61231b565b6124d16117f2565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n\x11V[a\0\x1D_5a\x01lV[\x80c\x01\xFF\xC9\xA7\x14a\x01gW\x80c\rXi\xEE\x14a\x01bW\x80c\x1FC\xFC\x8B\x14a\x01]W\x80c$\x8A\x9C\xA3\x14a\x01XW\x80c)\x7FLd\x14a\x01SW\x80c,\xD7\x99\xBD\x14a\x01NW\x80c//\xF1]\x14a\x01IW\x80c6V\x8A\xBE\x14a\x01DW\x80c;\xFE\xC7\xA2\x14a\x01?W\x80c?K\xA8:\x14a\x01:W\x80c\\\x97Z\xBB\x14a\x015W\x80cr2\xC13\x14a\x010W\x80c\x84V\xCBY\x14a\x01+W\x80c\x8C9\xAA\xA4\x14a\x01&W\x80c\x8D\xE6\xE2\x8C\x14a\x01!W\x80c\x91\xD1HT\x14a\x01\x1CW\x80c\x99\x9Dq\xD4\x14a\x01\x17W\x80c\xA2\x17\xFD\xDF\x14a\x01\x12W\x80c\xD5Gt\x1F\x14a\x01\rW\x80c\xD9\x85*\xBF\x14a\x01\x08Wc\xEC\x87b\x1C\x03a\0\x0EWa\t\xDCV[a\tsV[a\x08\xA7V[a\x08rV[a\x08\x02V[a\x07\xBDV[a\x07\x88V[a\x07UV[a\x07\"V[a\x06\xEDV[a\x06\xB8V[a\x06\x85V[a\x06RV[a\x06\x1EV[a\x05\xEAV[a\x05`V[a\x04\xC0V[a\x04\"V[a\x03\xACV[a\x02\xEBV[a\x01\xF4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x95\x81a\x01\x80V[\x03a\x01\x9CWV[_\x80\xFD[\x90P5\x90a\x01\xAD\x82a\x01\x8CV[V[\x90` \x82\x82\x03\x12a\x01\xC8Wa\x01\xC5\x91_\x01a\x01\xA0V[\x90V[a\x01|V[\x15\x15\x90V[a\x01\xDB\x90a\x01\xCDV[\x90RV[\x91\x90a\x01\xF2\x90_` \x85\x01\x94\x01\x90a\x01\xD2V[V[4a\x02$Wa\x02 a\x02\x0Fa\x02\n6`\x04a\x01\xAFV[a\n\x19V[a\x02\x17a\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x90V[a\x025\x81a\x02)V[\x03a\x02<WV[_\x80\xFD[\x90P5\x90a\x02M\x82a\x02,V[V[\x90` \x82\x82\x03\x12a\x02hWa\x02e\x91_\x01a\x02@V[\x90V[a\x01|V[\x90V[a\x02\x84a\x02\x7Fa\x02\x89\x92a\x02)V[a\x02mV[a\x02)V[\x90V[\x90a\x02\x96\x90a\x02pV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x02\xBC\x90`\x08a\x02\xC1\x93\x02a\x02\xA2V[a\x02\xA6V[\x90V[\x90a\x02\xCF\x91Ta\x02\xACV[\x90V[a\x02\xE8\x90a\x02\xE3`\x04\x91_\x92a\x02\x8CV[a\x02\xC4V[\x90V[4a\x03\x1BWa\x03\x17a\x03\x06a\x03\x016`\x04a\x02OV[a\x02\xD2V[a\x03\x0Ea\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x90V[a\x03,\x81a\x03 V[\x03a\x033WV[_\x80\xFD[\x90P5\x90a\x03D\x82a\x03#V[V[\x91\x90`@\x83\x82\x03\x12a\x03nW\x80a\x03ba\x03k\x92_\x86\x01a\x037V[\x93` \x01a\x02@V[\x90V[a\x01|V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x87\x90a\x03sV[\x90V[a\x03\x93\x90a\x03~V[\x90RV[\x91\x90a\x03\xAA\x90_` \x85\x01\x94\x01\x90a\x03\x8AV[V[4a\x03\xDDWa\x03\xD9a\x03\xC8a\x03\xC26`\x04a\x03FV[\x90a\ncV[a\x03\xD0a\x01rV[\x91\x82\x91\x82a\x03\x97V[\x03\x90\xF3[a\x01xV[\x90` \x82\x82\x03\x12a\x03\xFBWa\x03\xF8\x91_\x01a\x037V[\x90V[a\x01|V[a\x04\t\x90a\x03 V[\x90RV[\x91\x90a\x04 \x90_` \x85\x01\x94\x01\x90a\x04\0V[V[4a\x04RWa\x04Na\x04=a\x0486`\x04a\x03\xE2V[a\n\xE5V[a\x04Ea\x01rV[\x91\x82\x91\x82a\x04\rV[\x03\x90\xF3[a\x01xV[_\x91\x03\x12a\x04aWV[a\x01|V[\x90V[a\x04y\x90`\x08a\x04~\x93\x02a\x02\xA2V[a\x04fV[\x90V[\x90a\x04\x8C\x91Ta\x04iV[\x90V[a\x04\x9B`\x02_\x90a\x04\x81V[\x90V[a\x04\xA7\x90a\x02)V[\x90RV[\x91\x90a\x04\xBE\x90_` \x85\x01\x94\x01\x90a\x04\x9EV[V[4a\x04\xF0Wa\x04\xD06`\x04a\x04WV[a\x04\xECa\x04\xDBa\x04\x8FV[a\x04\xE3a\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x056a\x05?` \x93a\x05D\x93a\x05-\x81a\x04\xF5V[\x93\x84\x80\x93a\x04\xF9V[\x95\x86\x91\x01a\x05\x02V[a\x05\rV[\x01\x90V[a\x05]\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05\x17V[\x90V[4a\x05\x90Wa\x05\x8Ca\x05{a\x05v6`\x04a\x02OV[a\x0B\xA2V[a\x05\x83a\x01rV[\x91\x82\x91\x82a\x05HV[\x03\x90\xF3[a\x01xV[a\x05\x9E\x81a\x03~V[\x03a\x05\xA5WV[_\x80\xFD[\x90P5\x90a\x05\xB6\x82a\x05\x95V[V[\x91\x90`@\x83\x82\x03\x12a\x05\xE0W\x80a\x05\xD4a\x05\xDD\x92_\x86\x01a\x037V[\x93` \x01a\x05\xA9V[\x90V[a\x01|V[_\x01\x90V[4a\x06\x19Wa\x06\x03a\x05\xFD6`\x04a\x05\xB8V[\x90a\x0CGV[a\x06\x0Ba\x01rV[\x80a\x06\x15\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06MWa\x067a\x0616`\x04a\x05\xB8V[\x90a\x0CSV[a\x06?a\x01rV[\x80a\x06I\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06\x80Wa\x06ja\x06e6`\x04a\x02OV[a\r\xA8V[a\x06ra\x01rV[\x80a\x06|\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06\xB3Wa\x06\x956`\x04a\x04WV[a\x06\x9Da\r\xD7V[a\x06\xA5a\x01rV[\x80a\x06\xAF\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x06\xE8Wa\x06\xC86`\x04a\x04WV[a\x06\xE4a\x06\xD3a\r\xE1V[a\x06\xDBa\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[4a\x07\x1DWa\x07\x19a\x07\x08a\x07\x036`\x04a\x02OV[a\x0EXV[a\x07\x10a\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[4a\x07PWa\x0726`\x04a\x04WV[a\x07:a\x0E\xC5V[a\x07Ba\x01rV[\x80a\x07L\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x07\x83Wa\x07ma\x07h6`\x04a\x02OV[a\x0F\xB8V[a\x07ua\x01rV[\x80a\x07\x7F\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[4a\x07\xB8Wa\x07\x986`\x04a\x04WV[a\x07\xB4a\x07\xA3a\x10\x0FV[a\x07\xABa\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[4a\x07\xEEWa\x07\xEAa\x07\xD9a\x07\xD36`\x04a\x05\xB8V[\x90a\x10\xC3V[a\x07\xE1a\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[a\x07\xFF`\x03_\x90a\x04\x81V[\x90V[4a\x082Wa\x08\x126`\x04a\x04WV[a\x08.a\x08\x1Da\x07\xF3V[a\x08%a\x01rV[\x91\x82\x91\x82a\x04\xABV[\x03\x90\xF3[a\x01xV[\x90V[_\x1B\x90V[a\x08Sa\x08Na\x08X\x92a\x087V[a\x08:V[a\x03 V[\x90V[a\x08d_a\x08?V[\x90V[a\x08oa\x08[V[\x90V[4a\x08\xA2Wa\x08\x826`\x04a\x04WV[a\x08\x9Ea\x08\x8Da\x08gV[a\x08\x95a\x01rV[\x91\x82\x91\x82a\x04\rV[\x03\x90\xF3[a\x01xV[4a\x08\xD6Wa\x08\xC0a\x08\xBA6`\x04a\x05\xB8V[\x90a\x11\x16V[a\x08\xC8a\x01rV[\x80a\x08\xD2\x81a\x05\xE5V[\x03\x90\xF3[a\x01xV[a\x08\xE4\x90a\x03~V[\x90V[a\x08\xF0\x81a\x08\xDBV[\x03a\x08\xF7WV[_\x80\xFD[\x90P5\x90a\t\x08\x82a\x08\xE7V[V[`\x80\x81\x83\x03\x12a\tKWa\t \x82_\x83\x01a\x02@V[\x92a\tHa\t1\x84` \x85\x01a\x05\xA9V[\x93a\t?\x81`@\x86\x01a\x08\xFBV[\x93``\x01a\x037V[\x90V[a\x01|V[\x91` a\tq\x92\x94\x93a\tj`@\x82\x01\x96_\x83\x01\x90a\x03\x8AV[\x01\x90a\x04\x9EV[V[4a\t\xA8Wa\t\x8Fa\t\x866`\x04a\t\nV[\x92\x91\x90\x91a\x14gV[\x90a\t\xA4a\t\x9Ba\x01rV[\x92\x83\x92\x83a\tPV[\x03\x90\xF3[a\x01xV[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\t\xD9a\t\xADV[\x90V[4a\n\x0CWa\t\xEC6`\x04a\x04WV[a\n\x08a\t\xF7a\t\xD1V[a\t\xFFa\x01rV[\x91\x82\x91\x82a\x04\rV[\x03\x90\xF3[a\x01xV[_\x80\xFD[_\x90V[a\n!a\n\x15V[P\x80a\n<a\n6cye\xDB\x0B`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90\x81\x15a\nIW[P\x90V[a\nS\x91Pa\x14\x88V[_a\nEV[_\x90V[` \x01\x90V[\x90a\nza\n\x93\x92a\nsa\nYV[P\x91a\x0B\xA2V[a\n\x8Ca\n\x86\x82a\x04\xF5V[\x91a\n]V[ \x90a\x14\xBAV[\x90V[_\x90V[a\n\xA3\x90a\x03 V[\x90V[\x90a\n\xB0\x90a\n\x9AV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\n\xD0a\n\xD5\x91a\n\xBCV[a\n\xC1V[\x90V[a\n\xE2\x90Ta\n\xC4V[\x90V[`\x01a\n\xFDa\x0B\x03\x92a\n\xF6a\n\x96V[P_a\n\xA6V[\x01a\n\xD8V[\x90V[``\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0B)\x90a\x05\rV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0BCW`@RV[a\x0B\x0BV[\x90a\x0B[a\x0BTa\x01rV[\x92\x83a\x0B\x1FV[V[\x90P\x90V[a\x0B\x87a\x0B~\x92` \x92a\x0Bu\x81a\x04\xF5V[\x94\x85\x80\x93a\x0B]V[\x93\x84\x91\x01a\x05\x02V[\x01\x90V[a\x0B\x99\x90a\x0B\x9F\x93\x92a\x0BbV[\x90a\x0BbV[\x90V[a\x0C\x1Aa\x0B\xE5\x91a\x0B\xB1a\x0B\x06V[Pa\x0B\xF4a+\xAB\x91a\x0B\xC5` \x84\x01a\x0BHV[\x92\x80\x84Ra#O` \x85\x019a\x0B\xD9a\x01rV[\x94\x85\x91` \x83\x01a\x04\xABV[` \x82\x01\x81\x03\x82R\x03\x84a\x0B\x1FV[a\x0C\x0Ba\x0B\xFFa\x01rV[\x93\x84\x92` \x84\x01a\x0B\x8BV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\x1FV[\x90V[\x90a\x0C8\x91a\x0C3a\x0C.\x82a\n\xE5V[a\x14\xDBV[a\x0C:V[V[\x90a\x0CD\x91a\x14\xEFV[PV[\x90a\x0CQ\x91a\x0C\x1DV[V[\x90\x80a\x0Cna\x0Cha\x0Cca\x15\x9AV[a\x03~V[\x91a\x03~V[\x03a\x0C\x7FWa\x0C|\x91a\x15\xA7V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0C\x97`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[a\x0C\xB4\x90a\x0C\xAFa\x0C\xAAa\t\xADV[a\x14\xDBV[a\r\x1CV[V[a\x0C\xC2a\x0C\xC7\x91a\n\xBCV[a\x02\xA6V[\x90V[a\x0C\xD4\x90Ta\x0C\xB6V[\x90V[\x90a\x0C\xE3`\xFF\x91a\x08:V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xF6\x90a\x01\xCDV[\x90V[\x90V[\x90a\r\x11a\r\x0Ca\r\x18\x92a\x0C\xEDV[a\x0C\xF9V[\x82Ta\x0C\xD7V[\x90UV[a\r0a\r+`\x04\x83\x90a\x02\x8CV[a\x0C\xCAV[a\r\x8CWa\rJ`\x01a\rE`\x04\x84\x90a\x02\x8CV[a\x0C\xFCV[a\rt\x7F!\xC2\\\xD0\xA5N\x16\t\xE3\xE6\x8B3V\x93\xEE\xFBiM^\xF1|\xC3+\x10o\x91?\x8A\x1F\x1B\x80X\x91a\x02pV[\x90a\r}a\x01rV[\x80a\r\x87\x81a\x05\xE5V[\x03\x90\xA2V[_c$Y\x1D\x89`\xE0\x1B\x81R\x80a\r\xA4`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[a\r\xB1\x90a\x0C\x9BV[V[a\r\xC3a\r\xBEa\x08[V[a\x14\xDBV[a\r\xCBa\r\xCDV[V[a\r\xD5a\x16\xA8V[V[a\r\xDFa\r\xB3V[V[a\r\xE9a\n\x15V[Pa\r\xF4`\x01a\x0C\xCAV[\x90V[_\x90V[`\xFF\x16\x90V[a\x0E\x15a\x0E\x10a\x0E\x1A\x92a\x087V[a\x02mV[a\r\xFBV[\x90V[\x90V[a\x0E4a\x0E/a\x0E9\x92a\x0E\x1DV[a\x02mV[a\r\xFBV[\x90V[a\x0EPa\x0EKa\x0EU\x92a\r\xFBV[a\x02mV[a\x02)V[\x90V[a\x0Eoa\x0Et\x91a\x0Ega\r\xF7V[P`\x04a\x02\x8CV[a\x0C\xCAV[_\x14a\x0E\x90Wa\x0E\x8Da\x0E\x87`\x01a\x0E V[[a\x0E<V[\x90V[a\x0E\x8Da\x0E\x9C_a\x0E\x01V[a\x0E\x88V[a\x0E\xB1a\x0E\xACa\x08[V[a\x14\xDBV[a\x0E\xB9a\x0E\xBBV[V[a\x0E\xC3a\x17\x12V[V[a\x0E\xCDa\x0E\xA1V[V[a\x0E\xE8\x90a\x0E\xE3a\x0E\xDEa\t\xADV[a\x14\xDBV[a\x0FgV[V[a\x0E\xF6a\x0E\xFB\x91a\n\xBCV[a\x04fV[\x90V[a\x0F\x08\x90Ta\x0E\xEAV[\x90V[\x90a\x0F\x17_\x19\x91a\x08:V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0F9a\x0F4a\x0F@\x92a\x02pV[a\x0F!V[\x82Ta\x0F\x0BV[\x90UV[\x91` a\x0Fe\x92\x94\x93a\x0F^`@\x82\x01\x96_\x83\x01\x90a\x04\x9EV[\x01\x90a\x04\x9EV[V[a\x0Fq`\x02a\x0E\xFEV[a\x0F|\x82`\x02a\x0F$V[\x90\x7F\xD9\xE1#\x91w\xBF\xBD*\xEB\xF5\xD0\xF2\x0F\xC0u\xE6\xDFZP,Y\xD1!\xAC\xD5sB\xC7\x83\xE3\x13d\x91a\x0F\xB3a\x0F\xAAa\x01rV[\x92\x83\x92\x83a\x0FDV[\x03\x90\xA1V[a\x0F\xC1\x90a\x0E\xCFV[V[Q\x90V[\x90P\x90V[a\x0F\xF1a\x0F\xE8\x92` \x92a\x0F\xDF\x81a\x0F\xC3V[\x94\x85\x80\x93a\x0F\xC7V[\x93\x84\x91\x01a\x05\x02V[\x01\x90V[a\x10\x03\x90a\x10\t\x93\x92a\x0F\xCCV[\x90a\x0F\xCCV[\x90V[\x90V[a\x10\x17a\r\xF7V[Pa\x10va\x10qa\x100a\x10+`\x02a\x0E\xFEV[a\x18\x15V[a\x10la\x10Ea\x10@`\x03a\x0E\xFEV[a\x18\x15V[\x91a\x10]a\x10Qa\x01rV[\x93\x84\x92` \x84\x01a\x0F\xF5V[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\x1FV[a\x10\x0CV[a\x18\xC1V[\x90V[a\x10\x8Da\x10\x88a\x10\x92\x92a\x03sV[a\x02mV[a\x03sV[\x90V[a\x10\x9E\x90a\x10yV[\x90V[a\x10\xAA\x90a\x10\x95V[\x90V[\x90a\x10\xB7\x90a\x10\xA1V[_R` R`@_ \x90V[a\x10\xE9\x91_a\x10\xDEa\x10\xE4\x93a\x10\xD7a\n\x15V[P\x82a\n\xA6V[\x01a\x10\xADV[a\x0C\xCAV[\x90V[\x90a\x11\x07\x91a\x11\x02a\x10\xFD\x82a\n\xE5V[a\x14\xDBV[a\x11\tV[V[\x90a\x11\x13\x91a\x15\xA7V[PV[\x90a\x11 \x91a\x10\xECV[V[\x90a\x118\x95\x94\x93\x92\x91a\x113a\x18\xF3V[a\x12,V[\x90\x91V[a\x11Pa\x11Ka\x11U\x92a\x087V[a\x02mV[a\x03sV[\x90V[a\x11a\x90a\x11<V[\x90V[a\x11m\x90a\x10\x95V[\x90V[a\x11\x84a\x11\x7Fa\x11\x89\x92a\x087V[a\x02mV[a\x02)V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x11\xA9\x90a\x02)V[_\x19\x81\x14a\x11\xB7W`\x01\x01\x90V[a\x11\x8CV[a\x11\xC5\x90a\x10yV[\x90V[a\x11\xD1\x90a\x11\xBCV[\x90V[a\x11\xDD\x90a\x10\x95V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x11\xF4WV[a\x01|V[\x91` a\x12\x1A\x92\x94\x93a\x12\x13`@\x82\x01\x96_\x83\x01\x90a\x03\x8AV[\x01\x90a\x03\x8AV[V[a\x12$a\x01rV[=_\x82>=\x90\xFD[\x95\x94\x95\x93\x92\x93PP\x82a\x12Oa\x12Ia\x12D_a\x11XV[a\x03~V[\x91a\x03~V[\x14\x80\x15a\x14=W[a\x14!W\x80a\x12na\x12h_a\x11pV[\x91a\x02)V[\x14_\x14a\x14\x1BWa\x12}a\x10\x0FV[[\x94a\x12\x93a\x12\x8E`\x04\x88\x90a\x02\x8CV[a\x0C\xCAV[a\x13\xFFWa\x12\xE3\x91a\x12\xB1`\x01a\x12\xAC`\x04\x8A\x90a\x02\x8CV[a\x0C\xFCV[a\x12\xC3a\x12\xBD_a\x11pV[\x91a\x02)V[\x14a\x13\xDEW[a\x12\xD2\x86a\x0B\xA2V[a\x12\xDE_\x92\x91\x92a\x11pV[a\x19\x1DV[\x91a\x12\xF5a\x12\xF0\x84a\x11\xC8V[a\x11\xD4V[\x90cH\\\xC9U\x90a\x13\x05\x84a\x11dV[\x92\x80;\x15a\x13\xD9Wa\x13*_\x80\x94a\x135a\x13\x1Ea\x01rV[\x97\x88\x96\x87\x95\x86\x94a\x11\xE4V[\x84R`\x04\x84\x01a\x11\xF9V[\x03\x92Z\xF1\x80\x15a\x13\xD4Wa\x13\xA8W[P\x83\x90a\x13Q\x83\x91a\x11dV[\x90a\x13\x8Ea\x13\x88a\x13\x82\x7FI\xB2\x1F\x1EA\x90\xDB\x8B\n\x93<\x95\x1E\xD0\x13\xDE\",\x84|\x15F\x17Th-\xAA.\xAB\x1F\xDB\xD2\x95a\x02pV[\x92a\x10\xA1V[\x92a\x10\xA1V[\x92a\x13\x97a\x01rV[\x80a\x13\xA1\x81a\x05\xE5V[\x03\x90\xA4\x91\x90V[a\x13\xC7\x90_=\x81\x11a\x13\xCDW[a\x13\xBF\x81\x83a\x0B\x1FV[\x81\x01\x90a\x11\xEAV[_a\x13DV[P=a\x13\xB5V[a\x12\x1CV[a\x11\xE0V[a\x13\xFAa\x13\xF3a\x13\xEE`\x03a\x0E\xFEV[a\x11\xA0V[`\x03a\x0F$V[a\x12\xC9V[_c$Y\x1D\x89`\xE0\x1B\x81R\x80a\x14\x17`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x80a\x12~V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x149`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[Pa\x14G\x82a\x11dV[a\x14aa\x14[a\x14V_a\x11XV[a\x03~V[\x91a\x03~V[\x14a\x12WV[\x90a\x14\x84\x93\x92\x91a\x14va\nYV[a\x14~a\r\xF7V[\x90a\x11\"V[\x90\x91V[a\x14\x90a\n\x15V[Pa\x14\xAAa\x14\xA4c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90V[a\x14\xB7\x90a\x10\x95V[\x90V[\x90a\x14\xD8\x91a\x14\xC7a\nYV[P\x90a\x14\xD20a\x14\xAEV[\x91a\x1A\nV[\x90V[a\x14\xED\x90a\x14\xE7a\x15\x9AV[\x90a\x1A^V[V[a\x14\xF7a\n\x15V[Pa\x15\x0Ca\x15\x06\x82\x84\x90a\x10\xC3V[\x15a\x01\xCDV[_\x14a\x15\x94Wa\x153`\x01a\x15._a\x15&\x81\x86\x90a\n\xA6V[\x01\x85\x90a\x10\xADV[a\x0C\xFCV[\x90a\x15<a\x15\x9AV[\x90a\x15ya\x15sa\x15m\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\n\x9AV[\x92a\x10\xA1V[\x92a\x10\xA1V[\x92a\x15\x82a\x01rV[\x80a\x15\x8C\x81a\x05\xE5V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x15\xA2a\nYV[P3\x90V[a\x15\xAFa\n\x15V[Pa\x15\xBB\x81\x83\x90a\x10\xC3V[_\x14a\x16BWa\x15\xE1_a\x15\xDC_a\x15\xD4\x81\x86\x90a\n\xA6V[\x01\x85\x90a\x10\xADV[a\x0C\xFCV[\x90a\x15\xEAa\x15\x9AV[\x90a\x16'a\x16!a\x16\x1B\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\n\x9AV[\x92a\x10\xA1V[\x92a\x10\xA1V[\x92a\x160a\x01rV[\x80a\x16:\x81a\x05\xE5V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x16Pa\x1A\x99V[a\x16Xa\x16ZV[V[a\x16e_`\x01a\x0C\xFCV[a\x16ma\x15\x9AV[a\x16\xA3\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\x16\x9Aa\x01rV[\x91\x82\x91\x82a\x03\x97V[\x03\x90\xA1V[a\x16\xB0a\x16HV[V[a\x16\xBAa\x18\xF3V[a\x16\xC2a\x16\xC4V[V[a\x16\xCF`\x01\x80a\x0C\xFCV[a\x16\xD7a\x15\x9AV[a\x17\r\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\x17\x04a\x01rV[\x91\x82\x91\x82a\x03\x97V[\x03\x90\xA1V[a\x17\x1Aa\x16\xB2V[V[``\x90V[a\x175a\x170a\x17:\x92a\x0E\x1DV[a\x02mV[a\x02)V[\x90V[\x90a\x17H\x91\x01a\x02)V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x17iWa\x17e` \x91a\x05\rV[\x01\x90V[a\x0B\x0BV[\x90a\x17\x80a\x17{\x83a\x17KV[a\x0BHV[\x91\x82RV[6\x907V[\x90a\x17\xAFa\x17\x97\x83a\x17nV[\x92` \x80a\x17\xA5\x86\x93a\x17KV[\x92\x01\x91\x03\x90a\x17\x85V[V[`\x01a\x17\xBD\x91\x03a\x02)V[\x90V[\x90V[a\x17\xD7a\x17\xD2a\x17\xDC\x92a\x17\xC0V[a\x02mV[a\x02)V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x17\xFFa\x18\x05\x91a\x02)V[\x91a\x02)V[\x90\x81\x15a\x18\x10W\x04\x90V[a\x17\xDFV[a\x18\x1Da\x17\x1CV[Pa\x18:a\x18*\x82a\x1C@V[a\x184`\x01a\x17!V[\x90a\x17=V[\x90a\x18D\x82a\x17\x8AV[\x91a\x18Ma\r\xF7V[P` \x01\x82\x01[`\x01\x15a\x18\xB7Wa\x18ga\x18\x93\x91a\x17\xB1V[\x91o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x82\x06\x1A\x83Sa\x18\x8D`\na\x17\xC3V[\x90a\x17\xF3V[\x80a\x18\xA6a\x18\xA0_a\x11pV[\x91a\x02)V[\x14a\x18\xB1W\x90a\x18TV[PP[\x90V[PPa\x18\xB4V[\x90V[a\x18\xF0\x90a\x18\xCDa\r\xF7V[P\x80a\x18\xEAa\x18\xE4a\x18\xDF_\x94a\x18\xBEV[a\x04\xF5V[\x92a\x11pV[\x90a\x1E\xA1V[\x90V[a\x18\xFBa\r\xE1V[a\x19\x01WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\x19\x19`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x91\x90\x91a\x19(a\nYV[Pa\x1920a\x14\xAEV[1a\x19Ea\x19?\x83a\x02)V[\x91a\x02)V[\x10a\x19\xE2Wa\x19S\x82a\x04\xF5V[a\x19ea\x19__a\x11pV[\x91a\x02)V[\x14a\x19\xC6W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x19\xBBW\x81a\x19\x98a\x19\x92a\x19\x8D_a\x11XV[a\x03~V[\x91a\x03~V[\x14a\x19\x9FWV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x19\xB7`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x19\xDE`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[a\x19\xEB0a\x14\xAEV[1a\x1A\x06_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\x0FDV[\x03\x90\xFD[\x91`\x0B\x92a\x1A\x16a\nYV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V[\x91` a\x1A\\\x92\x94\x93a\x1AU`@\x82\x01\x96_\x83\x01\x90a\x03\x8AV[\x01\x90a\x04\0V[V[\x90a\x1Asa\x1Am\x83\x83\x90a\x10\xC3V[\x15a\x01\xCDV[a\x1A{WPPV[a\x1A\x95_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x1A;V[\x03\x90\xFD[a\x1A\xAAa\x1A\xA4a\r\xE1V[\x15a\x01\xCDV[a\x1A\xB0WV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x1A\xC8`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x90V[a\x1A\xE3a\x1A\xDEa\x1A\xE8\x92a\x1A\xCCV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\x02a\x1A\xFDa\x1B\x07\x92a\x1A\xEBV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B!a\x1B\x1Ca\x1B&\x92a\x1B\nV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B@a\x1B;a\x1BE\x92a\x1B)V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B_a\x1BZa\x1Bd\x92a\x1BHV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B~a\x1Bya\x1B\x83\x92a\x1BgV[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\x9Da\x1B\x98a\x1B\xA2\x92a\x1B\x86V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\xBCa\x1B\xB7a\x1B\xC1\x92a\x1B\xA5V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\xDBa\x1B\xD6a\x1B\xE0\x92a\x1B\xC4V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1B\xFAa\x1B\xF5a\x1B\xFF\x92a\x1B\xE3V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1C\x19a\x1C\x14a\x1C\x1E\x92a\x1C\x02V[a\x02mV[a\x02)V[\x90V[\x90V[a\x1C8a\x1C3a\x1C=\x92a\x1C!V[a\x02mV[a\x02)V[\x90V[a\x1CHa\r\xF7V[Pa\x1CR_a\x11pV[\x90\x80a\x1C\x81a\x1C{z\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\x1A\xCFV[\x91a\x02)V[\x10\x15a\x1EYW[\x80a\x1C\xA9a\x1C\xA3m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\x1B\rV[\x91a\x02)V[\x10\x15a\x1E\x1EW[\x80a\x1C\xCAa\x1C\xC4f#\x86\xF2o\xC1\0\0a\x1BKV[\x91a\x02)V[\x10\x15a\x1D\xEAW[\x80a\x1C\xE8a\x1C\xE2c\x05\xF5\xE1\0a\x1B\x89V[\x91a\x02)V[\x10\x15a\x1D\xB9W[\x80a\x1D\x04a\x1C\xFEa'\x10a\x1B\xC7V[\x91a\x02)V[\x10\x15a\x1D\x8AW[\x80a\x1D\x1Fa\x1D\x19`da\x1C\x05V[\x91a\x02)V[\x10\x15a\x1D\\W[a\x1D9a\x1D3`\na\x17\xC3V[\x91a\x02)V[\x10\x15a\x1DCW[\x90V[a\x1DW\x90a\x1DQ`\x01a\x17!V[\x90a\x17=V[a\x1D@V[a\x1Dsa\x1D\x84\x91a\x1Dm`da\x1C\x05V[\x90a\x17\xF3V[\x91a\x1D~`\x02a\x1C$V[\x90a\x17=V[\x90a\x1D&V[a\x1D\xA2a\x1D\xB3\x91a\x1D\x9Ca'\x10a\x1B\xC7V[\x90a\x17\xF3V[\x91a\x1D\xAD`\x04a\x1B\xE6V[\x90a\x17=V[\x90a\x1D\x0BV[a\x1D\xD3a\x1D\xE4\x91a\x1D\xCDc\x05\xF5\xE1\0a\x1B\x89V[\x90a\x17\xF3V[\x91a\x1D\xDE`\x08a\x1B\xA8V[\x90a\x17=V[\x90a\x1C\xEFV[a\x1E\x07a\x1E\x18\x91a\x1E\x01f#\x86\xF2o\xC1\0\0a\x1BKV[\x90a\x17\xF3V[\x91a\x1E\x12`\x10a\x1BjV[\x90a\x17=V[\x90a\x1C\xD1V[a\x1EBa\x1ES\x91a\x1E<m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\x1B\rV[\x90a\x17\xF3V[\x91a\x1EM` a\x1B,V[\x90a\x17=V[\x90a\x1C\xB0V[a\x1E\x8Aa\x1E\x9B\x91a\x1E\x84z\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\x1A\xCFV[\x90a\x17\xF3V[\x91a\x1E\x95`@a\x1A\xEEV[\x90a\x17=V[\x90a\x1C\x88V[\x90a\x1E\xC3\x92a\x1E\xBB\x92a\x1E\xB2a\r\xF7V[P\x91\x90\x91a\x1E\xE6V[\x91\x90\x15a\x01\xCDV[a\x1E\xCAW\x90V[_cJq9\xBF`\xE1\x1B\x81R\x80a\x1E\xE2`\x04\x82\x01a\x05\xE5V[\x03\x90\xFD[\x91a\x1E\xEFa\n\x15V[Pa\x1E\xF8a\r\xF7V[P\x80a\x1F\x1Ca\x1F\x16a\x1F\x11a\x1F\x0C\x87a\x18\xBEV[a\x04\xF5V[a\x02)V[\x91a\x02)V[\x11\x80\x15a\x1FKW[a\x1F:Wa\x1F4\x92\x91\x90\x91a \x02V[\x91\x90\x91\x90V[PPP_\x90a\x1FH_a\x11pV[\x90V[P\x81a\x1F_a\x1FY\x83a\x02)V[\x91a\x02)V[\x11a\x1F$V[`\x01a\x1Fq\x91\x01a\x02)V[\x90V[`\xFF`\xF8\x1B\x16\x90V[a\x1F\x86\x90a\x1FtV[\x90V[\x90V[a\x1F\xA0a\x1F\x9Ba\x1F\xA5\x92a\x1F\x89V[a\x02mV[a\r\xFBV[\x90V[a\x1F\xB7a\x1F\xBD\x91\x93\x92\x93a\x02)V[\x92a\x02)V[\x91a\x1F\xC9\x83\x82\x02a\x02)V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1F\xD8WV[a\x11\x8CV[a\x1F\xECa\x1F\xF2\x91\x93\x92\x93a\x02)V[\x92a\x02)V[\x82\x01\x80\x92\x11a\x1F\xFDWV[a\x11\x8CV[a \x1D\x90a \x0Ea\n\x15V[Pa \x17a\r\xF7V[Pa\x18\xBEV[a &_a\x11pV[[\x82a :a 4\x86a\x02)V[\x91a\x02)V[\x10\x15a \xBEWa [a Va Q\x84\x86\x90a \xC9V[a\x1F}V[a\"7V[\x90\x81a pa j`\ta\x1F\x8CV[\x91a\r\xFBV[\x11a \xABWa \xA5\x91a \x99a \x93a \x9F\x93a \x8D`\na\x17\xC3V[\x90a\x1F\xA8V[\x91a\x0E<V[\x90a\x1F\xDDV[\x92a\x1FeV[\x91a 'V[PPPPP_\x90a \xBB_a\x11pV[\x90V[\x93\x92PPP`\x01\x91\x90V[\x90a \xD2a\n\x96V[P` \x01\x01Q\x90V[_\x90V[`\xF8\x1C\x90V[a \xF9a \xF4a \xFE\x92a\r\xFBV[a\x02mV[a\r\xFBV[\x90V[a!\ra!\x12\x91a \xDFV[a \xE5V[\x90V[\x90V[a!,a!'a!1\x92a!\x15V[a\x02mV[a\r\xFBV[\x90V[\x90V[a!Ka!Fa!P\x92a!4V[a\x02mV[a\r\xFBV[\x90V[\x90V[a!ja!ea!o\x92a!SV[a\x02mV[a\r\xFBV[\x90V[\x90V[a!\x89a!\x84a!\x8E\x92a!rV[a\x02mV[a\r\xFBV[\x90V[a!\xA5a!\xA0a!\xAA\x92a\x1A\xEBV[a\x02mV[a\r\xFBV[\x90V[\x90V[a!\xC4a!\xBFa!\xC9\x92a!\xADV[a\x02mV[a\r\xFBV[\x90V[\x90V[a!\xE3a!\xDEa!\xE8\x92a!\xCCV[a\x02mV[a\r\xFBV[\x90V[\x90a!\xF6\x91\x03a\r\xFBV[\x90V[\x90V[a\"\x10a\"\x0Ba\"\x15\x92a!\xF9V[a\x02mV[a\r\xFBV[\x90V[\x90V[a\"/a\"*a\"4\x92a\"\x18V[a\x02mV[a\r\xFBV[\x90V[a\"I\x90a\"Ca \xDBV[Pa!\x01V[\x80a\"]a\"W`/a!\x18V[\x91a\r\xFBV[\x11\x80a#3W[_\x14a\"\x82Wa\"~\x90a\"x`0a\"\x1BV[\x90a!\xEBV[[\x90V[\x80a\"\x96a\"\x90``a!VV[\x91a\r\xFBV[\x11\x80a#\x18W[_\x14a\"\xBDWa\"\xB7\x90a\"\xB1`Wa!\xFCV[\x90a!\xEBV[[a\"\x7FV[\x80a\"\xD1a\"\xCB`@a!\x91V[\x91a\r\xFBV[\x11\x80a\"\xFDW[_\x14a\"\xF7Wa\"\xF2\x90a\"\xEC`7a!\xCFV[\x90a!\xEBV[a\"\xB8V[P`\xFF\x90V[P\x80a#\x12a#\x0C`Ga!\xB0V[\x91a\r\xFBV[\x10a\"\xD8V[P\x80a#-a#'`ga!uV[\x91a\r\xFBV[\x10a\"\x9DV[P\x80a#Ha#B`:a!7V[\x91a\r\xFBV[\x10a\"dV\xFE`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a$\xD6a\x05\x16\x829`\x80Q\x81a\x0B\x92\x01Ra$\xD6\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a+\xAB\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x18` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x022V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\x08\x1B\x90V[\x90a\x01\xF4a\xFF\0\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0C\x90a\x01\xFEV[\x90V[\x90V[\x90a\x02'a\x02\"a\x02.\x92a\x02\x03V[a\x02\x0FV[\x82Ta\x01\xE7V[\x90UV[a\x02:a\x03*V[a\x02F`\x01`\x03a\x02\x12V[V[`\xA0\x1B\x90V[\x90a\x02]`\xFF`\xA0\x1B\x91a\x02HV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x02|a\x02wa\x02\x83\x92a\x02\x03V[a\x02\x0FV[\x82Ta\x02NV[\x90UV[_\x01\x90V[a\x02\x94a\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xBBa\x02\xB6a\x02\xC0\x92a\x02\x9CV[a\x01\rV[a\x02\x9CV[\x90V[a\x02\xCC\x90a\x02\xA7V[\x90V[a\x02\xD8\x90a\x02\xC3V[\x90V[_\x1B\x90V[\x90a\x02\xF1`\x01\x80`\xA0\x1B\x03\x91a\x02\xDBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x04\x90a\x02\xC3V[\x90V[\x90V[\x90a\x03\x1Fa\x03\x1Aa\x03&\x92a\x02\xFBV[a\x03\x07V[\x82Ta\x02\xE0V[\x90UV[a\x0333a\x03\x97V[a\x03>_`\x01a\x02gV[a\x03Fa\0=V[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03\x92Wa\x03n\x82\x91a\x01\xBFa)\xEC\x849a\x02\x87V[\x03\x90_\xF0\x80\x15a\x03\x8DWa\x03\x84a\x03\x8B\x91a\x02\xCFV[`\x01a\x03\nV[V[a\x02\x8CV[a\0QV[a\x03\xA0\x90a\x03\xF8V[V[a\x03\xB6a\x03\xB1a\x03\xBB\x92a\x01\nV[a\x01\rV[a\x02\x9CV[\x90V[a\x03\xC7\x90a\x03\xA2V[\x90V[a\x03\xD3\x90a\x02\x9CV[\x90V[a\x03\xDF\x90a\x03\xCAV[\x90RV[\x91\x90a\x03\xF6\x90_` \x85\x01\x94\x01\x90a\x03\xD6V[V[\x80a\x04\x13a\x04\ra\x04\x08_a\x03\xBEV[a\x03\xCAV[\x91a\x03\xCAV[\x14a\x04#Wa\x04!\x90a\x04\xB6V[V[a\x04Fa\x04/_a\x03\xBEV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xE3V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04fa\x04k\x91a\x04JV[a\x04OV[\x90V[a\x04x\x90Ta\x04ZV[\x90V[a\x04\x84\x90a\x02\xA7V[\x90V[a\x04\x90\x90a\x04{V[\x90V[\x90V[\x90a\x04\xABa\x04\xA6a\x04\xB2\x92a\x04\x87V[a\x04\x93V[\x82Ta\x02\xE0V[\x90UV[a\x04\xBF_a\x04nV[a\x04\xC9\x82_a\x04\x96V[\x90a\x04\xFDa\x04\xF7\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\x87V[\x91a\x04\x87V[\x91a\x05\x06a\0=V[\x80a\x05\x10\x81a\x02\x87V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0ErV[a\0\x1D_5a\x01\xFCV[\x80c\x08aF\xD2\x14a\x01\xF7W\x80c\x18\xD5\xAA\xFE\x14a\x01\xF2W\x80c6l\xBA\xB7\x14a\x01\xEDW\x80c;j\xB2\xA9\x14a\x01\xE8W\x80cF\xE2\xCC\t\x14a\x01\xE3W\x80cH\\\xC9U\x14a\x01\xDEW\x80cK,\x07\x06\x14a\x01\xD9W\x80cTg\xCBH\x14a\x01\xD4W\x80c[<\xD6\xE2\x14a\x01\xCFW\x80caT8\x01\x14a\x01\xCAW\x80ceX\x95O\x14a\x01\xC5W\x80cqP\x18\xA6\x14a\x01\xC0W\x80cz9y\xDC\x14a\x01\xBBW\x80c\x7F\xBD)^\x14a\x01\xB6W\x80c\x80NQ#\x14a\x01\xB1W\x80c\x82\xF4J\xDE\x14a\x01\xACW\x80c\x84\xFA\xB6+\x14a\x01\xA7W\x80c\x8DZ#\x9B\x14a\x01\xA2W\x80c\x8D\xA5\xCB[\x14a\x01\x9DW\x80c\xAF\xF7Lm\x14a\x01\x98W\x80c\xC6`\xD3\xF3\x14a\x01\x93W\x80c\xCD\xAF\xB9x\x14a\x01\x8EW\x80c\xD4\xF0\xEBM\x14a\x01\x89W\x80c\xD8x\x13B\x14a\x01\x84W\x80c\xDE\x1FE>\x14a\x01\x7FW\x80c\xEAJ\x11\x04\x14a\x01zW\x80c\xED\xE0{\xD6\x14a\x01uW\x80c\xF2\xFD\xE3\x8B\x14a\x01pW\x80c\xF7\xB8\x93^\x14a\x01kWc\xFF{0\x84\x03a\0\x0EWa\x0E=V[a\r\xF8V[a\r\x98V[a\rcV[a\x0C\xF2V[a\x0B\xE9V[a\x0B\xB4V[a\x0B]V[a\x0B\x0BV[a\naV[a\n,V[a\t\xF7V[a\t\xA0V[a\tkV[a\t&V[a\x08\xF2V[a\x08\xBDV[a\x08\x84V[a\x07\xFFV[a\x07\xCAV[a\x07\\V[a\x06\xCDV[a\x06\x01V[a\x05\xCCV[a\x05WV[a\x04\xBCV[a\x04\x82V[a\x04\rV[a\x02\xE8V[a\x02\x8CV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x02\x1AWV[a\x02\x0CV[\x90V[a\x02+\x90a\x02\x1FV[\x90RV[\x90``\x80a\x02u\x93a\x02G_\x82\x01Q_\x86\x01\x90a\x02\"V[a\x02Y` \x82\x01Q` \x86\x01\x90a\x02\"V[a\x02k`@\x82\x01Q`@\x86\x01\x90a\x02\"V[\x01Q\x91\x01\x90a\x02\"V[V[\x91\x90a\x02\x8A\x90_`\x80\x85\x01\x94\x01\x90a\x02/V[V[4a\x02\xBCWa\x02\x9C6`\x04a\x02\x10V[a\x02\xB8a\x02\xA7a\x0F\"V[a\x02\xAFa\x02\x02V[\x91\x82\x91\x82a\x02wV[\x03\x90\xF3[a\x02\x08V[\x15\x15\x90V[a\x02\xCF\x90a\x02\xC1V[\x90RV[\x91\x90a\x02\xE6\x90_` \x85\x01\x94\x01\x90a\x02\xC6V[V[4a\x03\x18Wa\x02\xF86`\x04a\x02\x10V[a\x03\x14a\x03\x03a\x0F[V[a\x03\x0Ba\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03gW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03bW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03]WV[a\x03)V[a\x03%V[a\x03!V[\x90` \x82\x82\x03\x12a\x03\x9DW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x98Wa\x03\x94\x92\x01a\x03-V[\x90\x91V[a\x03\x1DV[a\x02\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x03\xE3a\x03\xEC` \x93a\x03\xF1\x93a\x03\xDA\x81a\x03\xA2V[\x93\x84\x80\x93a\x03\xA6V[\x95\x86\x91\x01a\x03\xAFV[a\x03\xBAV[\x01\x90V[a\x04\n\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xC4V[\x90V[4a\x04>Wa\x04:a\x04)a\x04#6`\x04a\x03lV[\x90a\x10\x02V[a\x041a\x02\x02V[\x91\x82\x91\x82a\x03\xF5V[\x03\x90\xF3[a\x02\x08V[\x1C\x90V[`\xFF\x16\x90V[a\x04]\x90`\x08a\x04b\x93\x02a\x04CV[a\x04GV[\x90V[\x90a\x04p\x91Ta\x04MV[\x90V[a\x04\x7F`\x03_\x90a\x04eV[\x90V[4a\x04\xB2Wa\x04\x926`\x04a\x02\x10V[a\x04\xAEa\x04\x9Da\x04sV[a\x04\xA5a\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[_\x01\x90V[4a\x04\xEBWa\x04\xD5a\x04\xCF6`\x04a\x03lV[\x90a\x11\xF3V[a\x04\xDDa\x02\x02V[\x80a\x04\xE7\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\x04\x90a\x04\xF0V[\x90V[a\x05\x10\x81a\x04\xFBV[\x03a\x05\x17WV[_\x80\xFD[\x90P5\x90a\x05(\x82a\x05\x07V[V[\x91\x90`@\x83\x82\x03\x12a\x05RW\x80a\x05Fa\x05O\x92_\x86\x01a\x05\x1BV[\x93` \x01a\x05\x1BV[\x90V[a\x02\x0CV[4a\x05\x86Wa\x05pa\x05j6`\x04a\x05*V[\x90a\x13\xA4V[a\x05xa\x02\x02V[\x80a\x05\x82\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[a\x05\x94\x81a\x02\x1FV[\x03a\x05\x9BWV[_\x80\xFD[\x90P5\x90a\x05\xAC\x82a\x05\x8BV[V[\x90` \x82\x82\x03\x12a\x05\xC7Wa\x05\xC4\x91_\x01a\x05\x9FV[\x90V[a\x02\x0CV[4a\x05\xFCWa\x05\xF8a\x05\xE7a\x05\xE26`\x04a\x05\xAEV[a\x143V[a\x05\xEFa\x02\x02V[\x91\x82\x91\x82a\x02wV[\x03\x90\xF3[a\x02\x08V[4a\x06/Wa\x06\x116`\x04a\x02\x10V[a\x06\x19a\x14nV[a\x06!a\x02\x02V[\x80a\x06+\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06O\x90`\x08a\x06T\x93\x02a\x04CV[a\x064V[\x90V[\x90a\x06b\x91Ta\x06?V[\x90V[a\x06q`\x01_\x90a\x06WV[\x90V[\x90V[a\x06\x8Ba\x06\x86a\x06\x90\x92a\x04\xF0V[a\x06tV[a\x04\xF0V[\x90V[a\x06\x9C\x90a\x06wV[\x90V[a\x06\xA8\x90a\x06\x93V[\x90V[a\x06\xB4\x90a\x06\x9FV[\x90RV[\x91\x90a\x06\xCB\x90_` \x85\x01\x94\x01\x90a\x06\xABV[V[4a\x06\xFDWa\x06\xDD6`\x04a\x02\x10V[a\x06\xF9a\x06\xE8a\x06eV[a\x06\xF0a\x02\x02V[\x91\x82\x91\x82a\x06\xB8V[\x03\x90\xF3[a\x02\x08V[\x90V[a\x07\x15\x90`\x08a\x07\x1A\x93\x02a\x04CV[a\x07\x02V[\x90V[\x90a\x07(\x91Ta\x07\x05V[\x90V[a\x077`\x02_\x90a\x07\x1DV[\x90V[a\x07C\x90a\x02\x1FV[\x90RV[\x91\x90a\x07Z\x90_` \x85\x01\x94\x01\x90a\x07:V[V[4a\x07\x8CWa\x07l6`\x04a\x02\x10V[a\x07\x88a\x07wa\x07+V[a\x07\x7Fa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[\x90V[a\x07\xA8a\x07\xA3a\x07\xAD\x92a\x07\x91V[a\x06tV[a\x02\x1FV[\x90V[a\x07\xBCb'\x8D\0a\x07\x94V[\x90V[a\x07\xC7a\x07\xB0V[\x90V[4a\x07\xFAWa\x07\xDA6`\x04a\x02\x10V[a\x07\xF6a\x07\xE5a\x07\xBFV[a\x07\xEDa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\x08-Wa\x08\x0F6`\x04a\x02\x10V[a\x08\x17a\x14\x9DV[a\x08\x1Fa\x02\x02V[\x80a\x08)\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x91``\x83\x83\x03\x12a\x08\x7FWa\x08I\x82_\x85\x01a\x05\x1BV[\x92a\x08W\x83` \x83\x01a\x05\x1BV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08zWa\x08v\x92\x01a\x03-V[\x90\x91V[a\x03\x1DV[a\x02\x0CV[4a\x08\xB8Wa\x08\xB4a\x08\xA3a\x08\x9A6`\x04a\x082V[\x92\x91\x90\x91a\x15UV[a\x08\xABa\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[4a\x08\xEDWa\x08\xCD6`\x04a\x02\x10V[a\x08\xE9a\x08\xD8a\x15\xFDV[a\x08\xE0a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\t!Wa\t\x0Ba\t\x056`\x04a\x03lV[\x90a\x17\x1BV[a\t\x13a\x02\x02V[\x80a\t\x1D\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[4a\tVWa\t66`\x04a\x02\x10V[a\tRa\tAa\x17CV[a\tIa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[a\th`\x03`\x01\x90a\x04eV[\x90V[4a\t\x9BWa\t{6`\x04a\x02\x10V[a\t\x97a\t\x86a\t[V[a\t\x8Ea\x02\x02V[\x91\x82\x91\x82a\x02\xD3V[\x03\x90\xF3[a\x02\x08V[4a\t\xD0Wa\t\xB06`\x04a\x02\x10V[a\t\xCCa\t\xBBa\x17\xD3V[a\t\xC3a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[a\t\xDE\x90a\x04\xFBV[\x90RV[\x91\x90a\t\xF5\x90_` \x85\x01\x94\x01\x90a\t\xD5V[V[4a\n'Wa\n\x076`\x04a\x02\x10V[a\n#a\n\x12a\x18\"V[a\n\x1Aa\x02\x02V[\x91\x82\x91\x82a\t\xE2V[\x03\x90\xF3[a\x02\x08V[4a\n\\Wa\n<6`\x04a\x02\x10V[a\nXa\nGa\x18VV[a\nOa\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\n\x91Wa\nq6`\x04a\x02\x10V[a\n\x8Da\n|a\x18\xA2V[a\n\x84a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\n\xD0W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\n\xCBW` \x01\x92` \x83\x02\x84\x01\x11a\n\xC6WV[a\x03)V[a\x03%V[a\x03!V[\x90` \x82\x82\x03\x12a\x0B\x06W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x01Wa\n\xFD\x92\x01a\n\x96V[\x90\x91V[a\x03\x1DV[a\x02\x0CV[4a\x0B:Wa\x0B$a\x0B\x1E6`\x04a\n\xD5V[\x90a\x1AxV[a\x0B,a\x02\x02V[\x80a\x0B6\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x90` \x82\x82\x03\x12a\x0BXWa\x0BU\x91_\x01a\x05\x1BV[\x90V[a\x02\x0CV[4a\x0B\x8BWa\x0Bua\x0Bp6`\x04a\x0B?V[a\x1B(V[a\x0B}a\x02\x02V[\x80a\x0B\x87\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x0B\xE4Wa\x0B\xC46`\x04a\x02\x10V[a\x0B\xE0a\x0B\xCFa\x0B\x90V[a\x0B\xD7a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\x0C\x17Wa\x0B\xF96`\x04a\x02\x10V[a\x0C\x01a\x1BOV[a\x0C\ta\x02\x02V[\x80a\x0C\x13\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[a\x0C0a\x0C+a\x0C5\x92a\x02\x1FV[a\x06tV[a\x02\x1FV[\x90V[\x90a\x0CB\x90a\x0C\x1CV[_R` R`@_ \x90V[_\x1C\x90V[a\x0C_a\x0Cd\x91a\x0CNV[a\x07\x02V[\x90V[a\x0Cq\x90Ta\x0CSV[\x90V[a\x0C\x7F\x90`\x04a\x0C8V[\x90a\x0C\x8B_\x83\x01a\x0CgV[\x91a\x0C\x98`\x01\x82\x01a\x0CgV[\x91a\x0C\xB1`\x03a\x0C\xAA`\x02\x85\x01a\x0CgV[\x93\x01a\x0CgV[\x90V[a\x0C\xE9a\x0C\xF0\x94a\x0C\xDF``\x94\x98\x97\x95a\x0C\xD5`\x80\x86\x01\x9A_\x87\x01\x90a\x07:V[` \x85\x01\x90a\x07:V[`@\x83\x01\x90a\x07:V[\x01\x90a\x07:V[V[4a\r&Wa\r\"a\r\ra\r\x086`\x04a\x05\xAEV[a\x0CtV[\x90a\r\x19\x94\x92\x94a\x02\x02V[\x94\x85\x94\x85a\x0C\xB4V[\x03\x90\xF3[a\x02\x08V[\x90V[a\rBa\r=a\rG\x92a\r+V[a\x06tV[a\x02\x1FV[\x90V[a\rUa\x13\x88a\r.V[\x90V[a\r`a\rJV[\x90V[4a\r\x93Wa\rs6`\x04a\x02\x10V[a\r\x8Fa\r~a\rXV[a\r\x86a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[4a\r\xC6Wa\r\xB0a\r\xAB6`\x04a\x0B?V[a\x1B\xBEV[a\r\xB8a\x02\x02V[\x80a\r\xC2\x81a\x04\xB7V[\x03\x90\xF3[a\x02\x08V[\x91\x90`@\x83\x82\x03\x12a\r\xF3W\x80a\r\xE7a\r\xF0\x92_\x86\x01a\x05\x9FV[\x93` \x01a\x05\x9FV[\x90V[a\x02\x0CV[4a\x0E)Wa\x0E%a\x0E\x14a\x0E\x0E6`\x04a\r\xCBV[\x90a\x1CTV[a\x0E\x1Ca\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[a\x0E:`\x05_\x90a\x07\x1DV[\x90V[4a\x0EmWa\x0EM6`\x04a\x02\x10V[a\x0Eia\x0EXa\x0E.V[a\x0E`a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xF3[a\x02\x08V[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0E\x94\x90a\x03\xBAV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xAEW`@RV[a\x0EvV[\x90a\x0E\xC6a\x0E\xBFa\x02\x02V[\x92\x83a\x0E\x8AV[V[a\x0E\xD2`\x80a\x0E\xB3V[\x90V[_\x90V[a\x0E\xE1a\x0E\xC8V[\x90` \x80\x80\x80\x85a\x0E\xF0a\x0E\xD5V[\x81R\x01a\x0E\xFBa\x0E\xD5V[\x81R\x01a\x0F\x06a\x0E\xD5V[\x81R\x01a\x0F\x11a\x0E\xD5V[\x81RPPV[a\x0F\x1Fa\x0E\xD9V[\x90V[a\x0F*a\x0F\x17V[Pa\x0F3a\x1C\xFEV[\x90V[_\x90V[a\x0FFa\x0FK\x91a\x0CNV[a\x04GV[\x90V[a\x0FX\x90Ta\x0F:V[\x90V[a\x0Fca\x0F6V[Pa\x0Fn`\x03a\x0FNV[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0F\x9Ca\x0F\x97a\x0F\xA1\x92a\x0FvV[a\x0F\x82V[a\x0FyV[\x90V[\x90V[a\x0F\xB3a\x0F\xB8\x91a\x0FyV[a\x0F\xA4V[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\x0F\xDC\x81a\x0F\xE3\x93a\x0F\xBCV[\x80\x93a\x0F\xC1V[\x01\x90V[\x80a\x0F\xF8`\x01\x92a\x0F\xFF\x96\x94a\x0F\xA7V[\x01\x91a\x0F\xCCV[\x90V[a\x10@\x90a\x10\x0Ea\x0FqV[Pa\x101a\x10\x1B_a\x0F\x88V[\x91\x93a\x10%a\x02\x02V[\x94\x85\x93` \x85\x01a\x0F\xE7V[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\x8AV[\x90V[\x90a\x10_a\x10Y32\x90\x85\x85\x91\x92\x90\x91\x92a\x15UV[\x15a\x02\xC1V[a\x10nWa\x10l\x91a\x11\x0FV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x10\x86`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[`\x08\x1C\x90V[a\x10\x9Ca\x10\xA1\x91a\x10\x8AV[a\x04GV[\x90V[a\x10\xAE\x90Ta\x10\x90V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x10\xD4a\x10\xDA\x91\x93\x92\x93a\x02\x1FV[\x92a\x02\x1FV[\x82\x03\x91\x82\x11a\x10\xE5WV[a\x10\xB1V[a\x10\xF9a\x10\xFF\x91\x93\x92\x93a\x02\x1FV[\x92a\x02\x1FV[\x82\x01\x80\x92\x11a\x11\nWV[a\x10\xB1V[\x90a\x11#a\x11\x1D`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x11XWa\x11Ca\x11V\x92a\x11<a\x11Q\x93Z\x92a\x11\xACV[Z\x90a\x10\xC5V[a\x11Ka\rJV[\x90a\x10\xEAV[a\x1E\xD2V[V[a\x11a\x91a\x11\xACV[V[a\x11l\x90a\x06\x93V[\x90V[\x91\x90a\x11\x89\x81a\x11\x82\x81a\x11\x8E\x95a\x03\xA6V[\x80\x95a\x0F\xC1V[a\x03\xBAV[\x01\x90V[\x90\x91a\x11\xA9\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x11oV[\x90V[3\x90\x91a\x11\xD9\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x11cV[\x92a\x11\xEEa\x11\xE5a\x02\x02V[\x92\x83\x92\x83a\x11\x92V[\x03\x90\xA2V[\x90a\x11\xFD\x91a\x10CV[V[\x90a\x12\x11\x91a\x12\x0Ca\x1F\xD9V[a\x13\x17V[V[`\xA0\x1C\x90V[a\x12%a\x12*\x91a\x12\x13V[a\x04GV[\x90V[a\x127\x90Ta\x12\x19V[\x90V[a\x12Na\x12Ia\x12S\x92a\x0FvV[a\x06tV[a\x04\xF0V[\x90V[a\x12_\x90a\x12:V[\x90V[`\xA0\x1B\x90V[\x90a\x12w`\xFF`\xA0\x1B\x91a\x12bV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x8A\x90a\x02\xC1V[\x90V[\x90V[\x90a\x12\xA5a\x12\xA0a\x12\xAC\x92a\x12\x81V[a\x12\x8DV[\x82Ta\x12hV[\x90UV[a\x12\xB9\x90a\x06wV[\x90V[a\x12\xC5\x90a\x12\xB0V[\x90V[_\x1B\x90V[\x90a\x12\xDE`\x01\x80`\xA0\x1B\x03\x91a\x12\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xF1\x90a\x12\xB0V[\x90V[\x90V[\x90a\x13\x0Ca\x13\x07a\x13\x13\x92a\x12\xE8V[a\x12\xF4V[\x82Ta\x12\xCDV[\x90UV[a\x13!`\x01a\x12-V[a\x13\x89W\x81a\x13@a\x13:a\x135_a\x12VV[a\x04\xFBV[\x91a\x04\xFBV[\x14a\x13mWa\x13fa\x13_a\x13k\x93a\x13Z`\x01\x80a\x12\x90V[a\x12\xBCV[`\x01a\x12\xF7V[a\x1B\xBEV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x13\x85`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\xA0`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[\x90a\x13\xAE\x91a\x11\xFFV[V[\x90a\x13\xBA\x90a\x02\x1FV[\x90RV[\x90a\x14%a\x14\x1C`\x03a\x13\xCFa\x0E\xC8V[\x94a\x13\xE6a\x13\xDE_\x83\x01a\x0CgV[_\x88\x01a\x13\xB0V[a\x13\xFEa\x13\xF5`\x01\x83\x01a\x0CgV[` \x88\x01a\x13\xB0V[a\x14\x16a\x14\r`\x02\x83\x01a\x0CgV[`@\x88\x01a\x13\xB0V[\x01a\x0CgV[``\x84\x01a\x13\xB0V[V[a\x140\x90a\x13\xBEV[\x90V[a\x14Ja\x14O\x91a\x14Ba\x0F\x17V[P`\x04a\x0C8V[a\x14'V[\x90V[a\x14Za\x1F\xD9V[a\x14ba\x14dV[V[a\x14la dV[V[a\x14va\x14RV[V[a\x14\x80a\x1F\xD9V[a\x14\x88a\x14\x8AV[V[a\x14\x9Ba\x14\x96_a\x12VV[a \x94V[V[a\x14\xA5a\x14xV[V[a\x14\xB3a\x14\xB8\x91a\x0CNV[a\x064V[\x90V[a\x14\xC5\x90Ta\x14\xA7V[\x90V[`\xE0\x1B\x90V[a\x14\xD7\x81a\x02\xC1V[\x03a\x14\xDEWV[_\x80\xFD[\x90PQ\x90a\x14\xEF\x82a\x14\xCEV[V[\x90` \x82\x82\x03\x12a\x15\nWa\x15\x07\x91_\x01a\x14\xE2V[\x90V[a\x02\x0CV[a\x155a\x15B\x95\x93\x94\x92\x94a\x15+``\x84\x01\x96_\x85\x01\x90a\t\xD5V[` \x83\x01\x90a\t\xD5V[`@\x81\x85\x03\x91\x01Ra\x11oV[\x90V[a\x15Ma\x02\x02V[=_\x82>=\x90\xFD[\x92a\x15\x98` \x93\x94a\x15ea\x0F6V[Pa\x15\xA3a\x15{a\x15v`\x01a\x14\xBBV[a\x06\x9FV[\x93cz9y\xDC\x92\x95\x97a\x15\x8Ca\x02\x02V[\x98\x89\x97\x88\x96\x87\x96a\x14\xC8V[\x86R`\x04\x86\x01a\x15\x0FV[\x03\x91Z\xFA\x90\x81\x15a\x15\xE7W_\x91a\x15\xB9W[P\x90V[a\x15\xDA\x91P` =\x81\x11a\x15\xE0W[a\x15\xD2\x81\x83a\x0E\x8AV[\x81\x01\x90a\x14\xF1V[_a\x15\xB5V[P=a\x15\xC8V[a\x15EV[_\x90V[a\x15\xFA\x90Qa\x02\x1FV[\x90V[a\x16\x05a\x15\xECV[Pa\x16,a\x16\x13`\x05a\x0CgV[a\x16&``a\x16 a\x1C\xFEV[\x01a\x15\xF0V[\x90a\x10\xEAV[\x90V[\x90a\x16Ka\x16E32\x90\x85\x85\x91\x92\x90\x91\x92a\x15UV[\x15a\x02\xC1V[a\x16ZWa\x16X\x91a\x16vV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x16r`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[\x90a\x16\x8Aa\x16\x84`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x16\xBFWa\x16\xAAa\x16\xBD\x92a\x16\xA3a\x16\xB8\x93Z\x92a\x16\xCAV[Z\x90a\x10\xC5V[a\x16\xB2a\rJV[\x90a\x10\xEAV[a\x1E\xD2V[V[a\x16\xC8\x91a\x16\xCAV[V[\x90a\x16\xD6\x903\x92a\x10\x02V[\x90a\x17\x16a\x17\x04\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x11cV[\x92a\x17\ra\x02\x02V[\x91\x82\x91\x82a\x03\xF5V[\x03\x90\xA2V[\x90a\x17%\x91a\x16/V[V[a\x17;a\x176a\x17@\x92a\x0FvV[a\x06tV[a\x02\x1FV[\x90V[a\x17Ka\x15\xECV[Pa\x17Ta\x1C\xFEV[a\x17__\x82\x01a\x15\xF0V[a\x17qa\x17k_a\x17'V[\x91a\x02\x1FV[\x14a\x17\xC6Wa\x17\x84_a\x17\x92\x92\x01a\x15\xF0V[a\x17\x8Ca\x07\xB0V[\x90a\x10\xEAV[Ba\x17\xA5a\x17\x9F\x83a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x17\xB9Wa\x17\xB6\x90B\x90a\x10\xC5V[\x90V[Pa\x17\xC3_a\x17'V[\x90V[Pa\x17\xD0_a\x17'V[\x90V[a\x17\xDBa\x15\xECV[Pa\x17\xEF``a\x17\xE9a\x1C\xFEV[\x01a\x15\xF0V[\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x18\ra\x18\x12\x91a\x0CNV[a\x17\xF6V[\x90V[a\x18\x1F\x90Ta\x18\x01V[\x90V[a\x18*a\x17\xF2V[Pa\x184_a\x18\x15V[\x90V[\x90V[a\x18Na\x18Ia\x18S\x92a\x187V[a\x06tV[a\x02\x1FV[\x90V[a\x18^a\x15\xECV[Pa\x18ra\x18l`\x03a\x0FNV[\x15a\x02\xC1V[a\x18\x96Wa\x18\x93a\x18\x83`\x02a\x0CgV[a\x18\x8D`\x01a\x18:V[\x90a\x10\xEAV[\x90V[a\x18\x9F_a\x17'V[\x90V[a\x18\xAAa\x15\xECV[Pa\x18\xBE`@a\x18\xB8a\x1C\xFEV[\x01a\x15\xF0V[\x90V[\x90a\x18\xD5a\x18\xCF`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x19\nWa\x18\xF5a\x19\x08\x92a\x18\xEEa\x19\x03\x93Z\x92a\x19\xAFV[Z\x90a\x10\xC5V[a\x18\xFDa\rJV[\x90a\x10\xEAV[a\x1E\xD2V[V[a\x19\x13\x91a\x19\xAFV[V[P\x90V[`\x01a\x19%\x91\x01a\x02\x1FV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x19\x8AW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x19\x85W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x19\x80WV[a\x19DV[a\x19@V[a\x19<V[\x90\x82\x10\x15a\x19\xAAW` a\x19\xA6\x92\x02\x81\x01\x90a\x19HV[\x90\x91V[a\x19(V[a\x19\xBA\x81\x83\x90a\x19\x15V[\x91a\x19\xC3a\x15\xECV[Pa\x19\xCD_a\x17'V[[\x80a\x19\xE1a\x19\xDB\x86a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x1ArWa\x1A\x0F\x90a\x1A\x0532\x90a\x19\xFD\x87\x87\x86\x91a\x19\x8FV[\x92\x90\x91a\x15UV[a\x1A\x14W[a\x19\x19V[a\x19\xCEV[3a\x1A*a\x1A$\x86\x86\x85\x91a\x19\x8FV[\x90a\x10\x02V[\x90a\x1Aja\x1AX\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x11cV[\x92a\x1Aaa\x02\x02V[\x91\x82\x91\x82a\x03\xF5V[\x03\x90\xA2a\x1A\nV[PPPPV[\x90a\x1A\x82\x91a\x18\xC1V[V[a\x1A\x95\x90a\x1A\x90a\x1F\xD9V[a\x1A\x97V[V[\x80a\x1A\xB2a\x1A\xACa\x1A\xA7_a\x12VV[a\x04\xFBV[\x91a\x04\xFBV[\x14a\x1B\x0CWa\x1A\xCAa\x1A\xC3\x82a\x12\xBCV[`\x01a\x12\xF7V[a\x1A\xF4\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x11cV[\x90a\x1A\xFDa\x02\x02V[\x80a\x1B\x07\x81a\x04\xB7V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x1B$`\x04\x82\x01a\x04\xB7V[\x03\x90\xFD[a\x1B1\x90a\x1A\x84V[V[a\x1B;a\x1F\xD9V[a\x1BCa\x1BEV[V[a\x1BMa \xF3V[V[a\x1BWa\x1B3V[V[a\x1Bj\x90a\x1Bea\x1F\xD9V[a\x1BlV[V[\x80a\x1B\x87a\x1B\x81a\x1B|_a\x12VV[a\x04\xFBV[\x91a\x04\xFBV[\x14a\x1B\x97Wa\x1B\x95\x90a \x94V[V[a\x1B\xBAa\x1B\xA3_a\x12VV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t\xE2V[\x03\x90\xFD[a\x1B\xC7\x90a\x1BYV[V[` \x91\x81R\x01\x90V[_\x7FGasCounter: invalid range\0\0\0\0\0\0\0\x91\x01RV[a\x1C\x06`\x19` \x92a\x1B\xC9V[a\x1C\x0F\x81a\x1B\xD2V[\x01\x90V[a\x1C(\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1B\xF9V[\x90V[\x15a\x1C2WV[a\x1C:a\x02\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1CP`\x04\x82\x01a\x1C\x13V[\x03\x90\xFD[a\x1C\x83\x91a\x1C`a\x15\xECV[Pa\x1C~\x81a\x1Cwa\x1Cq\x85a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x1C+V[a\x10\xC5V[\x90V[a\x1C\x90`\x80a\x0E\xB3V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1C\xB3a\x1C\xB9\x91a\x02\x1FV[\x91a\x02\x1FV[\x90\x81\x15a\x1C\xC4W\x04\x90V[a\x1C\x93V[a\x1C\xD8a\x1C\xDE\x91\x93\x92\x93a\x02\x1FV[\x92a\x02\x1FV[\x91a\x1C\xEA\x83\x82\x02a\x02\x1FV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1C\xF9WV[a\x10\xB1V[a\x1D\x06a\x0F\x17V[Pa\x1D\x1Aa\x1D\x14`\x03a\x0FNV[\x15a\x02\xC1V[a\x1E\x16Wa\x1D;a\x1D6`\x04a\x1D0`\x02a\x0CgV[\x90a\x0C8V[a\x14'V[Ba\x1Dia\x1Dca\x1D^a\x1DP_\x86\x01a\x15\xF0V[a\x1DXa\x07\xB0V[\x90a\x10\xEAV[a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a\x1DrW\x90V[a\x1D\xBF\x90a\x1D\xB9a\x1D\xAA_a\x1D\xA3a\x1D\x95Ba\x1D\x8F\x84\x88\x01a\x15\xF0V[\x90a\x10\xC5V[a\x1D\x9Da\x07\xB0V[\x90a\x1C\xA7V[\x93\x01a\x15\xF0V[\x91a\x1D\xB3a\x07\xB0V[\x90a\x1C\xC9V[\x90a\x10\xEAV[a\x1E\x13a\x1E\n_a\x1E\x05a\x1D\xFC_a\x1D\xF7a\x1D\xEE_\x95a\x1D\xE9a\x1D\xE0a\x1C\x86V[\x9A_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[\x90V[_a\x1Esa\x1Ej_a\x1Eea\x1E\\_a\x1EWa\x1EN_\x95a\x1EIa\x1EAa\x1E;a\x1C\x86V[\x9Ba\x17'V[_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[\x90V[\x90a\x1E\x82_\x19\x91a\x12\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x1E\xA4a\x1E\x9Fa\x1E\xAB\x92a\x0C\x1CV[a\x1E\x8CV[\x82Ta\x1EvV[\x90UV[\x91` a\x1E\xD0\x92\x94\x93a\x1E\xC9`@\x82\x01\x96_\x83\x01\x90a\x07:V[\x01\x90a\x07:V[V[a\x1E\xE5a\x1E\xDF`\x03a\x10\xA4V[\x15a\x02\xC1V[a\x1F\xD6Wa\x1E\xFCa\x1E\xF6`\x03a\x0FNV[\x15a\x02\xC1V[a\x1F\xC9W[a\x1F\ta\"\xC9V[a\x1Fza\x1F\x17\x82:\x90a\x1C\xC9V[a\x1FJ\x83a\x1FD`\x02a\x1F4`\x04a\x1F.\x83a\x0CgV[\x90a\x0C8V[\x01\x91a\x1F?\x83a\x0CgV[a\x10\xEAV[\x90a\x1E\x8FV[a\x1Ft`\x03a\x1Fd`\x04a\x1F^`\x02a\x0CgV[\x90a\x0C8V[\x01\x91a\x1Fo\x83a\x0CgV[a\x10\xEAV[\x90a\x1E\x8FV[a\x1F\x84`\x02a\x0CgV[:a\x1F\xAF\x7F-\x9CG\xADU;c\xBB\xBA\xD1\x81\x9DO\xD9}\xA0\x88P\\\x96\xA5\x81\x82i\x1B\x8A\xBB_+\xCC)\xEE\x92a\x0C\x1CV[\x92a\x1F\xC4a\x1F\xBBa\x02\x02V[\x92\x83\x92\x83a\x1E\xAFV[\x03\x90\xA2V[a\x1F\xD1a!\xBEV[a\x1F\x01V[PV[a\x1F\xE1a\x18\"V[a\x1F\xFAa\x1F\xF4a\x1F\xEFa$\xC9V[a\x04\xFBV[\x91a\x04\xFBV[\x03a \x01WV[a #a \x0Ca$\xC9V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t\xE2V[\x03\x90\xFD[`\x08\x1B\x90V[\x90a :a\xFF\0\x91a 'V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a Ya Ta `\x92a\x12\x81V[a\x12\x8DV[\x82Ta -V[\x90UV[a o_`\x03a DV[V[\x90V[\x90a \x89a \x84a \x90\x92a\x11cV[a qV[\x82Ta\x12\xCDV[\x90UV[a \x9D_a\x18\x15V[a \xA7\x82_a tV[\x90a \xDBa \xD5\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x11cV[\x91a\x11cV[\x91a \xE4a\x02\x02V[\x80a \xEE\x81a\x04\xB7V[\x03\x90\xA3V[a \xFF`\x01`\x03a DV[V[\x90a!\r`\xFF\x91a\x12\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a!,a!'a!3\x92a\x12\x81V[a\x12\x8DV[\x82Ta!\x01V[\x90UV[\x90a!A\x90a\x17'V[_R` R`@_ \x90V[\x90a!\xAA```\x03a!\xB0\x94a!p_\x82\x01a!j_\x88\x01a\x15\xF0V[\x90a\x1E\x8FV[a!\x89`\x01\x82\x01a!\x83` \x88\x01a\x15\xF0V[\x90a\x1E\x8FV[a!\xA2`\x02\x82\x01a!\x9C`@\x88\x01a\x15\xF0V[\x90a\x1E\x8FV[\x01\x92\x01a\x15\xF0V[\x90a\x1E\x8FV[V[\x90a!\xBC\x91a!MV[V[a!\xD1a!\xCB`\x03a\x0FNV[\x15a\x02\xC1V[a!\xD8W[V[a!\xE4`\x01`\x03a!\x17V[a!\xF7a!\xF0_a\x17'V[`\x02a\x1E\x8FV[a\"`Ba\"Oa\"F_a\"Aa\"8_a\"3a\"*_\x95a\"%a\"\x1Ca\x1C\x86V[\x9A_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[a\"[`\x04_\x90a!7V[a!\xB2V[_B\x90a\"\xA2a\"\x90\x7FA\xF1\xE0\x8F!\xCC\x81\x8C\xF0\xCF\xFB:b`\x9F\xB6\xA3\xCB\xC9\xB3g\x1B\x01\x1E(^\x17\xA1\xEB\xB4h\x8E\x92a\x17'V[\x92a\"\x99a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xA2a!\xD6V[\x90V[a\"\xB6\x90a\x02\x1FV[_\x19\x81\x14a\"\xC4W`\x01\x01\x90V[a\x10\xB1V[a\"\xE6a\"\xE1`\x04a\"\xDB`\x02a\x0CgV[\x90a\x0C8V[a\"\xAAV[Ba#\x14a#\x0Ea#\ta\"\xFB_\x86\x01a\x0CgV[a#\x03a\x07\xB0V[\x90a\x10\xEAV[a\x02\x1FV[\x91a\x02\x1FV[\x10\x15a#\x1EW[PV[a#Fa#=a#/_\x84\x01a\x0CgV[a#7a\x07\xB0V[\x90a\x10\xEAV[`\x01\x83\x01a\x1E\x8FV[a#na#ga#X`\x03\x84\x01a\x0CgV[a#b`\x05a\x0CgV[a\x10\xEAV[`\x05a\x1E\x8FV[a#x`\x02a\x0CgV[a#\xA5a#\x87`\x02\x84\x01a\x0CgV[\x92a#\x9F_a#\x98`\x01\x84\x01a\x0CgV[\x92\x01a\x0CgV[\x90a\x10\xC5V[a#\xCF\x7FH\xA2\x98\xF9\xD3v\xB8*qt\xA7\x98\xE9\x0C\xF1 \x94\x95\xFD\xD6\x8B\x0C\x11\xEB\x11\xBE\xAB\xAC\xC2\xD2\x9C\xF5\x92a\x0C\x1CV[\x92a#\xE4a#\xDBa\x02\x02V[\x92\x83\x92\x83a\x1E\xAFV[\x03\x90\xA2a$\x03a#\xFCa#\xF7`\x02a\x0CgV[a\"\xADV[`\x02a\x1E\x8FV[a$uBa$[a$R_a$Ma$D_a$?a$6_\x95a$1a$(a\x1C\x86V[\x9A_\x8C\x01a\x13\xB0V[a\x17'V[` \x89\x01a\x13\xB0V[a\x17'V[`@\x86\x01a\x13\xB0V[a\x17'V[``\x83\x01a\x13\xB0V[a$p`\x04a$j`\x02a\x0CgV[\x90a\x0C8V[a!\xB2V[a$\x7F`\x02a\x0CgV[B\x90a$\xC0a$\xAE\x7FA\xF1\xE0\x8F!\xCC\x81\x8C\xF0\xCF\xFB:b`\x9F\xB6\xA3\xCB\xC9\xB3g\x1B\x01\x1E(^\x17\xA1\xEB\xB4h\x8E\x92a\x0C\x1CV[\x92a$\xB7a\x02\x02V[\x91\x82\x91\x82a\x07GV[\x03\x90\xA2_a#\x1BV[a$\xD1a\x17\xF2V[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `ChainIdAlreadyExists()` and selector `0x24591d89`.
```solidity
error ChainIdAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChainIdAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChainIdAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: ChainIdAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChainIdAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ChainIdAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ChainIdAlreadyExists()";
            const SELECTOR: [u8; 4] = [36u8, 89u8, 29u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `Create2EmptyBytecode()` and selector `0x4ca249dc`.
```solidity
error Create2EmptyBytecode();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Create2EmptyBytecode {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Create2EmptyBytecode> for UnderlyingRustTuple<'_> {
            fn from(value: Create2EmptyBytecode) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Create2EmptyBytecode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Create2EmptyBytecode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Create2EmptyBytecode()";
            const SELECTOR: [u8; 4] = [76u8, 162u8, 73u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EnforcedPause()` and selector `0xd93c0665`.
```solidity
error EnforcedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EnforcedPause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EnforcedPause> for UnderlyingRustTuple<'_> {
            fn from(value: EnforcedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EnforcedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EnforcedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EnforcedPause()";
            const SELECTOR: [u8; 4] = [217u8, 60u8, 6u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExpectedPause()` and selector `0x8dfc202b`.
```solidity
error ExpectedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExpectedPause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExpectedPause> for UnderlyingRustTuple<'_> {
            fn from(value: ExpectedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExpectedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExpectedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExpectedPause()";
            const SELECTOR: [u8; 4] = [141u8, 252u8, 32u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FailedDeployment()` and selector `0xb06ebf3d`.
```solidity
error FailedDeployment();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedDeployment {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedDeployment> for UnderlyingRustTuple<'_> {
            fn from(value: FailedDeployment) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedDeployment {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedDeployment {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedDeployment()";
            const SELECTOR: [u8; 4] = [176u8, 110u8, 191u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InsufficientBalance(uint256,uint256)` and selector `0xcf479181`.
```solidity
error InsufficientBalance(uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBalance {
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBalance> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBalance) -> Self {
                (value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    balance: tuple.0,
                    needed: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBalance(uint256,uint256)";
            const SELECTOR: [u8; 4] = [207u8, 71u8, 145u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `StringsInvalidChar()` and selector `0x94e2737e`.
```solidity
error StringsInvalidChar();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StringsInvalidChar {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StringsInvalidChar> for UnderlyingRustTuple<'_> {
            fn from(value: StringsInvalidChar) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StringsInvalidChar {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for StringsInvalidChar {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "StringsInvalidChar()";
            const SELECTOR: [u8; 4] = [148u8, 226u8, 115u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ChainIdManuallyMarked(uint256)` and selector `0x21c25cd0a54e1609e3e68b335693eefb694d5ef17cc32b106f913f8a1f1b8058`.
```solidity
event ChainIdManuallyMarked(uint256 indexed chainId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ChainIdManuallyMarked {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ChainIdManuallyMarked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "ChainIdManuallyMarked(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                33u8,
                194u8,
                92u8,
                208u8,
                165u8,
                78u8,
                22u8,
                9u8,
                227u8,
                230u8,
                139u8,
                51u8,
                86u8,
                147u8,
                238u8,
                251u8,
                105u8,
                77u8,
                94u8,
                241u8,
                124u8,
                195u8,
                43u8,
                16u8,
                111u8,
                145u8,
                63u8,
                138u8,
                31u8,
                27u8,
                128u8,
                88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { chainId: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.chainId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.chainId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ChainIdManuallyMarked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ChainIdManuallyMarked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ChainIdManuallyMarked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `NamespaceConfigUpdated(uint256,uint256)` and selector `0xd9e1239177bfbd2aebf5d0f20fc075e6df5a502c59d121acd57342c783e31364`.
```solidity
event NamespaceConfigUpdated(uint256 oldNamespacePrefix, uint256 newNamespacePrefix);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NamespaceConfigUpdated {
        #[allow(missing_docs)]
        pub oldNamespacePrefix: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newNamespacePrefix: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NamespaceConfigUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "NamespaceConfigUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                217u8,
                225u8,
                35u8,
                145u8,
                119u8,
                191u8,
                189u8,
                42u8,
                235u8,
                245u8,
                208u8,
                242u8,
                15u8,
                192u8,
                117u8,
                230u8,
                223u8,
                90u8,
                80u8,
                44u8,
                89u8,
                209u8,
                33u8,
                172u8,
                213u8,
                115u8,
                66u8,
                199u8,
                131u8,
                227u8,
                19u8,
                100u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldNamespacePrefix: data.0,
                    newNamespacePrefix: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldNamespacePrefix),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newNamespacePrefix),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NamespaceConfigUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NamespaceConfigUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NamespaceConfigUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Paused(address)` and selector `0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258`.
```solidity
event Paused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Paused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Paused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Paused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8,
                231u8,
                140u8,
                234u8,
                1u8,
                190u8,
                227u8,
                32u8,
                205u8,
                78u8,
                66u8,
                2u8,
                112u8,
                181u8,
                234u8,
                116u8,
                0u8,
                13u8,
                17u8,
                176u8,
                201u8,
                247u8,
                71u8,
                84u8,
                235u8,
                219u8,
                252u8,
                84u8,
                75u8,
                5u8,
                162u8,
                88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Paused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Paused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Paused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SyndicateSequencingChainCreated(uint256,address,address)` and selector `0x49b21f1e4190db8b0a933c951ed013de222c847c15461754682daa2eab1fdbd2`.
```solidity
event SyndicateSequencingChainCreated(uint256 indexed appchainId, address indexed sequencingChainAddress, address indexed permissionModuleAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SyndicateSequencingChainCreated {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModuleAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SyndicateSequencingChainCreated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "SyndicateSequencingChainCreated(uint256,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                73u8,
                178u8,
                31u8,
                30u8,
                65u8,
                144u8,
                219u8,
                139u8,
                10u8,
                147u8,
                60u8,
                149u8,
                30u8,
                208u8,
                19u8,
                222u8,
                34u8,
                44u8,
                132u8,
                124u8,
                21u8,
                70u8,
                23u8,
                84u8,
                104u8,
                45u8,
                170u8,
                46u8,
                171u8,
                31u8,
                219u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    appchainId: topics.1,
                    sequencingChainAddress: topics.2,
                    permissionModuleAddress: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.appchainId.clone(),
                    self.sequencingChainAddress.clone(),
                    self.permissionModuleAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.appchainId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sequencingChainAddress,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.permissionModuleAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SyndicateSequencingChainCreated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SyndicateSequencingChainCreated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Unpaused(address)` and selector `0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa`.
```solidity
event Unpaused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpaused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpaused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Unpaused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8,
                185u8,
                238u8,
                10u8,
                73u8,
                91u8,
                242u8,
                230u8,
                255u8,
                156u8,
                145u8,
                167u8,
                131u8,
                76u8,
                27u8,
                164u8,
                253u8,
                210u8,
                68u8,
                165u8,
                232u8,
                170u8,
                78u8,
                83u8,
                123u8,
                211u8,
                138u8,
                234u8,
                228u8,
                176u8,
                115u8,
                170u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpaused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpaused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpaused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `computeSequencingChainAddress(bytes32,uint256)` and selector `0x1f43fc8b`.
```solidity
function computeSequencingChainAddress(bytes32 salt, uint256 chainId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeSequencingChainAddressCall {
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`computeSequencingChainAddress(bytes32,uint256)`](computeSequencingChainAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeSequencingChainAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeSequencingChainAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeSequencingChainAddressCall) -> Self {
                    (value.salt, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeSequencingChainAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        salt: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeSequencingChainAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeSequencingChainAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeSequencingChainAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeSequencingChainAddressCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = computeSequencingChainAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeSequencingChainAddress(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [31u8, 67u8, 252u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `createSyndicateSequencingChain(uint256,address,address,bytes32)` and selector `0xd9852abf`.
```solidity
function createSyndicateSequencingChain(uint256 appchainId, address admin, address permissionModule, bytes32 salt) external returns (address sequencingChain, uint256 actualChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createSyndicateSequencingChainCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`createSyndicateSequencingChain(uint256,address,address,bytes32)`](createSyndicateSequencingChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createSyndicateSequencingChainReturn {
        #[allow(missing_docs)]
        pub sequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub actualChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createSyndicateSequencingChainCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createSyndicateSequencingChainCall) -> Self {
                    (value.appchainId, value.admin, value.permissionModule, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createSyndicateSequencingChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainId: tuple.0,
                        admin: tuple.1,
                        permissionModule: tuple.2,
                        salt: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createSyndicateSequencingChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createSyndicateSequencingChainReturn) -> Self {
                    (value.sequencingChain, value.actualChainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createSyndicateSequencingChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sequencingChain: tuple.0,
                        actualChainId: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createSyndicateSequencingChainCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createSyndicateSequencingChainReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createSyndicateSequencingChain(uint256,address,address,bytes32)";
            const SELECTOR: [u8; 4] = [217u8, 133u8, 42u8, 191u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionModule,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBytecode(uint256)` and selector `0x2cd799bd`.
```solidity
function getBytecode(uint256 chainId) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBytecodeCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getBytecode(uint256)`](getBytecodeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBytecodeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBytecodeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBytecodeCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBytecodeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBytecodeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBytecodeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBytecodeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBytecodeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBytecodeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBytecode(uint256)";
            const SELECTOR: [u8; 4] = [44u8, 215u8, 153u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getNextChainId()` and selector `0x8de6e28c`.
```solidity
function getNextChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNextChainIdCall {}
    ///Container type for the return parameters of the [`getNextChainId()`](getNextChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNextChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNextChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getNextChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getNextChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNextChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNextChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNextChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getNextChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getNextChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getNextChainId()";
            const SELECTOR: [u8; 4] = [141u8, 230u8, 226u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isChainIdUsed(uint256)` and selector `0x7232c133`.
```solidity
function isChainIdUsed(uint256 chainId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isChainIdUsedCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isChainIdUsed(uint256)`](isChainIdUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isChainIdUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isChainIdUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isChainIdUsedCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isChainIdUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isChainIdUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isChainIdUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isChainIdUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isChainIdUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isChainIdUsedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isChainIdUsed(uint256)";
            const SELECTOR: [u8; 4] = [114u8, 50u8, 193u8, 51u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `markChainIdAsUsed(uint256)` and selector `0x3bfec7a2`.
```solidity
function markChainIdAsUsed(uint256 chainId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct markChainIdAsUsedCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`markChainIdAsUsed(uint256)`](markChainIdAsUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct markChainIdAsUsedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<markChainIdAsUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: markChainIdAsUsedCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for markChainIdAsUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<markChainIdAsUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: markChainIdAsUsedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for markChainIdAsUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for markChainIdAsUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = markChainIdAsUsedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "markChainIdAsUsed(uint256)";
            const SELECTOR: [u8; 4] = [59u8, 254u8, 199u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `namespacePrefix()` and selector `0x297f4c64`.
```solidity
function namespacePrefix() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct namespacePrefixCall {}
    ///Container type for the return parameters of the [`namespacePrefix()`](namespacePrefixCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct namespacePrefixReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<namespacePrefixCall> for UnderlyingRustTuple<'_> {
                fn from(value: namespacePrefixCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for namespacePrefixCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<namespacePrefixReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: namespacePrefixReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for namespacePrefixReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for namespacePrefixCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = namespacePrefixReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "namespacePrefix()";
            const SELECTOR: [u8; 4] = [41u8, 127u8, 76u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nextAutoChainId()` and selector `0x999d71d4`.
```solidity
function nextAutoChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nextAutoChainIdCall {}
    ///Container type for the return parameters of the [`nextAutoChainId()`](nextAutoChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nextAutoChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nextAutoChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: nextAutoChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nextAutoChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nextAutoChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: nextAutoChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for nextAutoChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nextAutoChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nextAutoChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nextAutoChainId()";
            const SELECTOR: [u8; 4] = [153u8, 157u8, 113u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pause()` and selector `0x8456cb59`.
```solidity
function pause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseCall {}
    ///Container type for the return parameters of the [`pause()`](pauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pause()";
            const SELECTOR: [u8; 4] = [132u8, 86u8, 203u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `paused()` and selector `0x5c975abb`.
```solidity
function paused() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedCall {}
    ///Container type for the return parameters of the [`paused()`](pausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: pausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pausedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pausedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `unpause()` and selector `0x3f4ba83a`.
```solidity
function unpause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall {}
    ///Container type for the return parameters of the [`unpause()`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause()";
            const SELECTOR: [u8; 4] = [63u8, 75u8, 168u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateNamespaceConfig(uint256)` and selector `0x8c39aaa4`.
```solidity
function updateNamespaceConfig(uint256 newPrefix) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateNamespaceConfigCall {
        #[allow(missing_docs)]
        pub newPrefix: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`updateNamespaceConfig(uint256)`](updateNamespaceConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateNamespaceConfigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateNamespaceConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateNamespaceConfigCall) -> Self {
                    (value.newPrefix,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateNamespaceConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newPrefix: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateNamespaceConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateNamespaceConfigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateNamespaceConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateNamespaceConfigCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateNamespaceConfigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateNamespaceConfig(uint256)";
            const SELECTOR: [u8; 4] = [140u8, 57u8, 170u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newPrefix),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `usedChainIds(uint256)` and selector `0x0d5869ee`.
```solidity
function usedChainIds(uint256) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct usedChainIdsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`usedChainIds(uint256)`](usedChainIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct usedChainIdsReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<usedChainIdsCall> for UnderlyingRustTuple<'_> {
                fn from(value: usedChainIdsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for usedChainIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<usedChainIdsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: usedChainIdsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for usedChainIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for usedChainIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = usedChainIdsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "usedChainIds(uint256)";
            const SELECTOR: [u8; 4] = [13u8, 88u8, 105u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateFactory`](self) function calls.
    pub enum SyndicateFactoryCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        computeSequencingChainAddress(computeSequencingChainAddressCall),
        #[allow(missing_docs)]
        createSyndicateSequencingChain(createSyndicateSequencingChainCall),
        #[allow(missing_docs)]
        getBytecode(getBytecodeCall),
        #[allow(missing_docs)]
        getNextChainId(getNextChainIdCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isChainIdUsed(isChainIdUsedCall),
        #[allow(missing_docs)]
        markChainIdAsUsed(markChainIdAsUsedCall),
        #[allow(missing_docs)]
        namespacePrefix(namespacePrefixCall),
        #[allow(missing_docs)]
        nextAutoChainId(nextAutoChainIdCall),
        #[allow(missing_docs)]
        pause(pauseCall),
        #[allow(missing_docs)]
        paused(pausedCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        unpause(unpauseCall),
        #[allow(missing_docs)]
        updateNamespaceConfig(updateNamespaceConfigCall),
        #[allow(missing_docs)]
        usedChainIds(usedChainIdsCall),
    }
    #[automatically_derived]
    impl SyndicateFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [13u8, 88u8, 105u8, 238u8],
            [31u8, 67u8, 252u8, 139u8],
            [36u8, 138u8, 156u8, 163u8],
            [41u8, 127u8, 76u8, 100u8],
            [44u8, 215u8, 153u8, 189u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [59u8, 254u8, 199u8, 162u8],
            [63u8, 75u8, 168u8, 58u8],
            [92u8, 151u8, 90u8, 187u8],
            [114u8, 50u8, 193u8, 51u8],
            [132u8, 86u8, 203u8, 89u8],
            [140u8, 57u8, 170u8, 164u8],
            [141u8, 230u8, 226u8, 140u8],
            [145u8, 209u8, 72u8, 84u8],
            [153u8, 157u8, 113u8, 212u8],
            [162u8, 23u8, 253u8, 223u8],
            [213u8, 71u8, 116u8, 31u8],
            [217u8, 133u8, 42u8, 191u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateFactoryCalls {
        const NAME: &'static str = "SyndicateFactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 21usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::computeSequencingChainAddress(_) => {
                    <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createSyndicateSequencingChain(_) => {
                    <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBytecode(_) => {
                    <getBytecodeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getNextChainId(_) => {
                    <getNextChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isChainIdUsed(_) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::markChainIdAsUsed(_) => {
                    <markChainIdAsUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::namespacePrefix(_) => {
                    <namespacePrefixCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nextAutoChainId(_) => {
                    <nextAutoChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pause(_) => <pauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused(_) => <pausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateNamespaceConfig(_) => {
                    <updateNamespaceConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::usedChainIds(_) => {
                    <usedChainIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateFactoryCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn usedChainIds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <usedChainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::usedChainIds)
                    }
                    usedChainIds
                },
                {
                    fn computeSequencingChainAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::computeSequencingChainAddress)
                    }
                    computeSequencingChainAddress
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn namespacePrefix(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <namespacePrefixCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::namespacePrefix)
                    }
                    namespacePrefix
                },
                {
                    fn getBytecode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <getBytecodeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::getBytecode)
                    }
                    getBytecode
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn markChainIdAsUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <markChainIdAsUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::markChainIdAsUsed)
                    }
                    markChainIdAsUsed
                },
                {
                    fn unpause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::unpause)
                    }
                    unpause
                },
                {
                    fn paused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::paused)
                    }
                    paused
                },
                {
                    fn isChainIdUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::isChainIdUsed)
                    }
                    isChainIdUsed
                },
                {
                    fn pause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::pause)
                    }
                    pause
                },
                {
                    fn updateNamespaceConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <updateNamespaceConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::updateNamespaceConfig)
                    }
                    updateNamespaceConfig
                },
                {
                    fn getNextChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <getNextChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::getNextChainId)
                    }
                    getNextChainId
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn nextAutoChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <nextAutoChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::nextAutoChainId)
                    }
                    nextAutoChainId
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn createSyndicateSequencingChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::createSyndicateSequencingChain)
                    }
                    createSyndicateSequencingChain
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::computeSequencingChainAddress(inner) => {
                    <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createSyndicateSequencingChain(inner) => {
                    <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBytecode(inner) => {
                    <getBytecodeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getNextChainId(inner) => {
                    <getNextChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isChainIdUsed(inner) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::markChainIdAsUsed(inner) => {
                    <markChainIdAsUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::namespacePrefix(inner) => {
                    <namespacePrefixCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::nextAutoChainId(inner) => {
                    <nextAutoChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateNamespaceConfig(inner) => {
                    <updateNamespaceConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::usedChainIds(inner) => {
                    <usedChainIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::computeSequencingChainAddress(inner) => {
                    <computeSequencingChainAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createSyndicateSequencingChain(inner) => {
                    <createSyndicateSequencingChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBytecode(inner) => {
                    <getBytecodeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getNextChainId(inner) => {
                    <getNextChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isChainIdUsed(inner) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::markChainIdAsUsed(inner) => {
                    <markChainIdAsUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::namespacePrefix(inner) => {
                    <namespacePrefixCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nextAutoChainId(inner) => {
                    <nextAutoChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateNamespaceConfig(inner) => {
                    <updateNamespaceConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::usedChainIds(inner) => {
                    <usedChainIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateFactory`](self) custom errors.
    pub enum SyndicateFactoryErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        ChainIdAlreadyExists(ChainIdAlreadyExists),
        #[allow(missing_docs)]
        Create2EmptyBytecode(Create2EmptyBytecode),
        #[allow(missing_docs)]
        EnforcedPause(EnforcedPause),
        #[allow(missing_docs)]
        ExpectedPause(ExpectedPause),
        #[allow(missing_docs)]
        FailedDeployment(FailedDeployment),
        #[allow(missing_docs)]
        InsufficientBalance(InsufficientBalance),
        #[allow(missing_docs)]
        StringsInvalidChar(StringsInvalidChar),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
    }
    #[automatically_derived]
    impl SyndicateFactoryErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [36u8, 89u8, 29u8, 137u8],
            [76u8, 162u8, 73u8, 220u8],
            [102u8, 151u8, 178u8, 50u8],
            [141u8, 252u8, 32u8, 43u8],
            [148u8, 226u8, 115u8, 126u8],
            [176u8, 110u8, 191u8, 61u8],
            [207u8, 71u8, 145u8, 129u8],
            [217u8, 46u8, 35u8, 61u8],
            [217u8, 60u8, 6u8, 101u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateFactoryErrors {
        const NAME: &'static str = "SyndicateFactoryErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ChainIdAlreadyExists(_) => {
                    <ChainIdAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Create2EmptyBytecode(_) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EnforcedPause(_) => {
                    <EnforcedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExpectedPause(_) => {
                    <ExpectedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedDeployment(_) => {
                    <FailedDeployment as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientBalance(_) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::StringsInvalidChar(_) => {
                    <StringsInvalidChar as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateFactoryErrors>] = &[
                {
                    fn ChainIdAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ChainIdAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ChainIdAlreadyExists)
                    }
                    ChainIdAlreadyExists
                },
                {
                    fn Create2EmptyBytecode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::Create2EmptyBytecode)
                    }
                    Create2EmptyBytecode
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn StringsInvalidChar(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <StringsInvalidChar as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::StringsInvalidChar)
                    }
                    StringsInvalidChar
                },
                {
                    fn FailedDeployment(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <FailedDeployment as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::FailedDeployment)
                    }
                    FailedDeployment
                },
                {
                    fn InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::InsufficientBalance)
                    }
                    InsufficientBalance
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateFactoryErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateFactoryErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateFactoryErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ChainIdAlreadyExists(inner) => {
                    <ChainIdAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::StringsInvalidChar(inner) => {
                    <StringsInvalidChar as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ChainIdAlreadyExists(inner) => {
                    <ChainIdAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::StringsInvalidChar(inner) => {
                    <StringsInvalidChar as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateFactory`](self) events.
    pub enum SyndicateFactoryEvents {
        #[allow(missing_docs)]
        ChainIdManuallyMarked(ChainIdManuallyMarked),
        #[allow(missing_docs)]
        NamespaceConfigUpdated(NamespaceConfigUpdated),
        #[allow(missing_docs)]
        Paused(Paused),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        SyndicateSequencingChainCreated(SyndicateSequencingChainCreated),
        #[allow(missing_docs)]
        Unpaused(Unpaused),
    }
    #[automatically_derived]
    impl SyndicateFactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                33u8,
                194u8,
                92u8,
                208u8,
                165u8,
                78u8,
                22u8,
                9u8,
                227u8,
                230u8,
                139u8,
                51u8,
                86u8,
                147u8,
                238u8,
                251u8,
                105u8,
                77u8,
                94u8,
                241u8,
                124u8,
                195u8,
                43u8,
                16u8,
                111u8,
                145u8,
                63u8,
                138u8,
                31u8,
                27u8,
                128u8,
                88u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                73u8,
                178u8,
                31u8,
                30u8,
                65u8,
                144u8,
                219u8,
                139u8,
                10u8,
                147u8,
                60u8,
                149u8,
                30u8,
                208u8,
                19u8,
                222u8,
                34u8,
                44u8,
                132u8,
                124u8,
                21u8,
                70u8,
                23u8,
                84u8,
                104u8,
                45u8,
                170u8,
                46u8,
                171u8,
                31u8,
                219u8,
                210u8,
            ],
            [
                93u8,
                185u8,
                238u8,
                10u8,
                73u8,
                91u8,
                242u8,
                230u8,
                255u8,
                156u8,
                145u8,
                167u8,
                131u8,
                76u8,
                27u8,
                164u8,
                253u8,
                210u8,
                68u8,
                165u8,
                232u8,
                170u8,
                78u8,
                83u8,
                123u8,
                211u8,
                138u8,
                234u8,
                228u8,
                176u8,
                115u8,
                170u8,
            ],
            [
                98u8,
                231u8,
                140u8,
                234u8,
                1u8,
                190u8,
                227u8,
                32u8,
                205u8,
                78u8,
                66u8,
                2u8,
                112u8,
                181u8,
                234u8,
                116u8,
                0u8,
                13u8,
                17u8,
                176u8,
                201u8,
                247u8,
                71u8,
                84u8,
                235u8,
                219u8,
                252u8,
                84u8,
                75u8,
                5u8,
                162u8,
                88u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                217u8,
                225u8,
                35u8,
                145u8,
                119u8,
                191u8,
                189u8,
                42u8,
                235u8,
                245u8,
                208u8,
                242u8,
                15u8,
                192u8,
                117u8,
                230u8,
                223u8,
                90u8,
                80u8,
                44u8,
                89u8,
                209u8,
                33u8,
                172u8,
                213u8,
                115u8,
                66u8,
                199u8,
                131u8,
                227u8,
                19u8,
                100u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateFactoryEvents {
        const NAME: &'static str = "SyndicateFactoryEvents";
        const COUNT: usize = 8usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ChainIdManuallyMarked as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ChainIdManuallyMarked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ChainIdManuallyMarked)
                }
                Some(
                    <NamespaceConfigUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NamespaceConfigUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NamespaceConfigUpdated)
                }
                Some(<Paused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Paused as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Paused)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(
                    <SyndicateSequencingChainCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SyndicateSequencingChainCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SyndicateSequencingChainCreated)
                }
                Some(<Unpaused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpaused as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Unpaused)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateFactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChainIdManuallyMarked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NamespaceConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SyndicateSequencingChainCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChainIdManuallyMarked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NamespaceConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SyndicateSequencingChainCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateFactory`](self) contract instance.

See the [wrapper's documentation](`SyndicateFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateFactoryInstance<T, P, N> {
        SyndicateFactoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateFactoryInstance<T, P, N>>,
    > {
        SyndicateFactoryInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateFactoryInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`SyndicateFactory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateFactory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateFactoryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateFactoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateFactoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateFactory`](self) contract instance.

See the [wrapper's documentation](`SyndicateFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SyndicateFactoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateFactoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateFactoryInstance<T, P, N> {
            SyndicateFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`computeSequencingChainAddress`] function.
        pub fn computeSequencingChainAddress(
            &self,
            salt: alloy::sol_types::private::FixedBytes<32>,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            computeSequencingChainAddressCall,
            N,
        > {
            self.call_builder(
                &computeSequencingChainAddressCall {
                    salt,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`createSyndicateSequencingChain`] function.
        pub fn createSyndicateSequencingChain(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
            permissionModule: alloy::sol_types::private::Address,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            createSyndicateSequencingChainCall,
            N,
        > {
            self.call_builder(
                &createSyndicateSequencingChainCall {
                    appchainId,
                    admin,
                    permissionModule,
                    salt,
                },
            )
        }
        ///Creates a new call builder for the [`getBytecode`] function.
        pub fn getBytecode(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBytecodeCall, N> {
            self.call_builder(&getBytecodeCall { chainId })
        }
        ///Creates a new call builder for the [`getNextChainId`] function.
        pub fn getNextChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getNextChainIdCall, N> {
            self.call_builder(&getNextChainIdCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isChainIdUsed`] function.
        pub fn isChainIdUsed(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isChainIdUsedCall, N> {
            self.call_builder(&isChainIdUsedCall { chainId })
        }
        ///Creates a new call builder for the [`markChainIdAsUsed`] function.
        pub fn markChainIdAsUsed(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, markChainIdAsUsedCall, N> {
            self.call_builder(&markChainIdAsUsedCall { chainId })
        }
        ///Creates a new call builder for the [`namespacePrefix`] function.
        pub fn namespacePrefix(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, namespacePrefixCall, N> {
            self.call_builder(&namespacePrefixCall {})
        }
        ///Creates a new call builder for the [`nextAutoChainId`] function.
        pub fn nextAutoChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, nextAutoChainIdCall, N> {
            self.call_builder(&nextAutoChainIdCall {})
        }
        ///Creates a new call builder for the [`pause`] function.
        pub fn pause(&self) -> alloy_contract::SolCallBuilder<T, &P, pauseCall, N> {
            self.call_builder(&pauseCall {})
        }
        ///Creates a new call builder for the [`paused`] function.
        pub fn paused(&self) -> alloy_contract::SolCallBuilder<T, &P, pausedCall, N> {
            self.call_builder(&pausedCall {})
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(&self) -> alloy_contract::SolCallBuilder<T, &P, unpauseCall, N> {
            self.call_builder(&unpauseCall {})
        }
        ///Creates a new call builder for the [`updateNamespaceConfig`] function.
        pub fn updateNamespaceConfig(
            &self,
            newPrefix: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateNamespaceConfigCall, N> {
            self.call_builder(
                &updateNamespaceConfigCall {
                    newPrefix,
                },
            )
        }
        ///Creates a new call builder for the [`usedChainIds`] function.
        pub fn usedChainIds(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, usedChainIdsCall, N> {
            self.call_builder(&usedChainIdsCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ChainIdManuallyMarked`] event.
        pub fn ChainIdManuallyMarked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ChainIdManuallyMarked, N> {
            self.event_filter::<ChainIdManuallyMarked>()
        }
        ///Creates a new event filter for the [`NamespaceConfigUpdated`] event.
        pub fn NamespaceConfigUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, NamespaceConfigUpdated, N> {
            self.event_filter::<NamespaceConfigUpdated>()
        }
        ///Creates a new event filter for the [`Paused`] event.
        pub fn Paused_filter(&self) -> alloy_contract::Event<T, &P, Paused, N> {
            self.event_filter::<Paused>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`SyndicateSequencingChainCreated`] event.
        pub fn SyndicateSequencingChainCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SyndicateSequencingChainCreated, N> {
            self.event_filter::<SyndicateSequencingChainCreated>()
        }
        ///Creates a new event filter for the [`Unpaused`] event.
        pub fn Unpaused_filter(&self) -> alloy_contract::Event<T, &P, Unpaused, N> {
            self.event_filter::<Unpaused>()
        }
    }
}
