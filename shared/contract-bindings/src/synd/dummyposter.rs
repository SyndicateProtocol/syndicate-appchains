/**

Generated by the following Solidity interface...
```solidity
interface DummyPoster {
    function blockHash() external view returns (bytes32);
    function postAssertion(bytes32 blockHash_, bytes32 sendRoot_) external;
    function sendRoot() external view returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "blockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "postAssertion",
    "inputs": [
      {
        "name": "blockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "sendRoot_",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "sendRoot",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DummyPoster {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b61024461002b823961024490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6101d1565b61001d5f3561004c565b8063356c86d614610047578063daeab412146100425763f22a195e0361000e5761019c565b61015a565b6100d0565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b90565b61008690600861008b930261006f565b610073565b90565b906100999154610076565b90565b6100a860015f9061008e565b90565b90565b6100b7906100ab565b9052565b91906100ce905f602085019401906100ae565b565b34610100576100e0366004610060565b6100fc6100eb61009c565b6100f3610052565b918291826100bb565b0390f35b610058565b61010e816100ab565b0361011557565b5f80fd5b9050359061012682610105565b565b9190604083820312610150578061014461014d925f8601610119565b93602001610119565b90565b61005c565b5f0190565b346101895761017361016d366004610128565b9061022d565b61017b610052565b8061018581610155565b0390f35b610058565b6101995f5f9061008e565b90565b346101cc576101ac366004610060565b6101c86101b761018e565b6101bf610052565b918291826100bb565b0390f35b610058565b5f80fd5b5f1b90565b906101e65f19916101d5565b9181191691161790565b6101f9906100ab565b90565b5f1c90565b61020a906101fc565b90565b9061022261021d610229926101f0565b610201565b82546101da565b9055565b9061023b610242925f61020d565b600161020d565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x02Da\0+\x829a\x02D\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xD1V[a\0\x1D_5a\0LV[\x80c5l\x86\xD6\x14a\0GW\x80c\xDA\xEA\xB4\x12\x14a\0BWc\xF2*\x19^\x03a\0\x0EWa\x01\x9CV[a\x01ZV[a\0\xD0V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[\x90V[a\0\x86\x90`\x08a\0\x8B\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\x99\x91Ta\0vV[\x90V[a\0\xA8`\x01_\x90a\0\x8EV[\x90V[\x90V[a\0\xB7\x90a\0\xABV[\x90RV[\x91\x90a\0\xCE\x90_` \x85\x01\x94\x01\x90a\0\xAEV[V[4a\x01\0Wa\0\xE06`\x04a\0`V[a\0\xFCa\0\xEBa\0\x9CV[a\0\xF3a\0RV[\x91\x82\x91\x82a\0\xBBV[\x03\x90\xF3[a\0XV[a\x01\x0E\x81a\0\xABV[\x03a\x01\x15WV[_\x80\xFD[\x90P5\x90a\x01&\x82a\x01\x05V[V[\x91\x90`@\x83\x82\x03\x12a\x01PW\x80a\x01Da\x01M\x92_\x86\x01a\x01\x19V[\x93` \x01a\x01\x19V[\x90V[a\0\\V[_\x01\x90V[4a\x01\x89Wa\x01sa\x01m6`\x04a\x01(V[\x90a\x02-V[a\x01{a\0RV[\x80a\x01\x85\x81a\x01UV[\x03\x90\xF3[a\0XV[a\x01\x99__\x90a\0\x8EV[\x90V[4a\x01\xCCWa\x01\xAC6`\x04a\0`V[a\x01\xC8a\x01\xB7a\x01\x8EV[a\x01\xBFa\0RV[\x91\x82\x91\x82a\0\xBBV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1B\x90V[\x90a\x01\xE6_\x19\x91a\x01\xD5V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xF9\x90a\0\xABV[\x90V[_\x1C\x90V[a\x02\n\x90a\x01\xFCV[\x90V[\x90a\x02\"a\x02\x1Da\x02)\x92a\x01\xF0V[a\x02\x01V[\x82Ta\x01\xDAV[\x90UV[\x90a\x02;a\x02B\x92_a\x02\rV[`\x01a\x02\rV[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6101d1565b61001d5f3561004c565b8063356c86d614610047578063daeab412146100425763f22a195e0361000e5761019c565b61015a565b6100d0565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b90565b61008690600861008b930261006f565b610073565b90565b906100999154610076565b90565b6100a860015f9061008e565b90565b90565b6100b7906100ab565b9052565b91906100ce905f602085019401906100ae565b565b34610100576100e0366004610060565b6100fc6100eb61009c565b6100f3610052565b918291826100bb565b0390f35b610058565b61010e816100ab565b0361011557565b5f80fd5b9050359061012682610105565b565b9190604083820312610150578061014461014d925f8601610119565b93602001610119565b90565b61005c565b5f0190565b346101895761017361016d366004610128565b9061022d565b61017b610052565b8061018581610155565b0390f35b610058565b6101995f5f9061008e565b90565b346101cc576101ac366004610060565b6101c86101b761018e565b6101bf610052565b918291826100bb565b0390f35b610058565b5f80fd5b5f1b90565b906101e65f19916101d5565b9181191691161790565b6101f9906100ab565b90565b5f1c90565b61020a906101fc565b90565b9061022261021d610229926101f0565b610201565b82546101da565b9055565b9061023b610242925f61020d565b600161020d565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xD1V[a\0\x1D_5a\0LV[\x80c5l\x86\xD6\x14a\0GW\x80c\xDA\xEA\xB4\x12\x14a\0BWc\xF2*\x19^\x03a\0\x0EWa\x01\x9CV[a\x01ZV[a\0\xD0V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[\x90V[a\0\x86\x90`\x08a\0\x8B\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\x99\x91Ta\0vV[\x90V[a\0\xA8`\x01_\x90a\0\x8EV[\x90V[\x90V[a\0\xB7\x90a\0\xABV[\x90RV[\x91\x90a\0\xCE\x90_` \x85\x01\x94\x01\x90a\0\xAEV[V[4a\x01\0Wa\0\xE06`\x04a\0`V[a\0\xFCa\0\xEBa\0\x9CV[a\0\xF3a\0RV[\x91\x82\x91\x82a\0\xBBV[\x03\x90\xF3[a\0XV[a\x01\x0E\x81a\0\xABV[\x03a\x01\x15WV[_\x80\xFD[\x90P5\x90a\x01&\x82a\x01\x05V[V[\x91\x90`@\x83\x82\x03\x12a\x01PW\x80a\x01Da\x01M\x92_\x86\x01a\x01\x19V[\x93` \x01a\x01\x19V[\x90V[a\0\\V[_\x01\x90V[4a\x01\x89Wa\x01sa\x01m6`\x04a\x01(V[\x90a\x02-V[a\x01{a\0RV[\x80a\x01\x85\x81a\x01UV[\x03\x90\xF3[a\0XV[a\x01\x99__\x90a\0\x8EV[\x90V[4a\x01\xCCWa\x01\xAC6`\x04a\0`V[a\x01\xC8a\x01\xB7a\x01\x8EV[a\x01\xBFa\0RV[\x91\x82\x91\x82a\0\xBBV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1B\x90V[\x90a\x01\xE6_\x19\x91a\x01\xD5V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xF9\x90a\0\xABV[\x90V[_\x1C\x90V[a\x02\n\x90a\x01\xFCV[\x90V[\x90a\x02\"a\x02\x1Da\x02)\x92a\x01\xF0V[a\x02\x01V[\x82Ta\x01\xDAV[\x90UV[\x90a\x02;a\x02B\x92_a\x02\rV[`\x01a\x02\rV[V",
    );
    /**Function with signature `blockHash()` and selector `0xf22a195e`.
```solidity
function blockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashCall {}
    ///Container type for the return parameters of the [`blockHash()`](blockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: blockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: blockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = blockHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockHash()";
            const SELECTOR: [u8; 4] = [242u8, 42u8, 25u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `postAssertion(bytes32,bytes32)` and selector `0xdaeab412`.
```solidity
function postAssertion(bytes32 blockHash_, bytes32 sendRoot_) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct postAssertionCall {
        #[allow(missing_docs)]
        pub blockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sendRoot_: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`postAssertion(bytes32,bytes32)`](postAssertionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct postAssertionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<postAssertionCall> for UnderlyingRustTuple<'_> {
                fn from(value: postAssertionCall) -> Self {
                    (value.blockHash_, value.sendRoot_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for postAssertionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockHash_: tuple.0,
                        sendRoot_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<postAssertionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: postAssertionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for postAssertionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for postAssertionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = postAssertionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "postAssertion(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [218u8, 234u8, 180u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.sendRoot_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sendRoot()` and selector `0x356c86d6`.
```solidity
function sendRoot() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendRootCall {}
    ///Container type for the return parameters of the [`sendRoot()`](sendRootCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendRootReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendRootCall> for UnderlyingRustTuple<'_> {
                fn from(value: sendRootCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sendRootCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendRootReturn> for UnderlyingRustTuple<'_> {
                fn from(value: sendRootReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sendRootReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sendRootCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sendRootReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sendRoot()";
            const SELECTOR: [u8; 4] = [53u8, 108u8, 134u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DummyPoster`](self) function calls.
    pub enum DummyPosterCalls {
        #[allow(missing_docs)]
        blockHash(blockHashCall),
        #[allow(missing_docs)]
        postAssertion(postAssertionCall),
        #[allow(missing_docs)]
        sendRoot(sendRootCall),
    }
    #[automatically_derived]
    impl DummyPosterCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [53u8, 108u8, 134u8, 214u8],
            [218u8, 234u8, 180u8, 18u8],
            [242u8, 42u8, 25u8, 94u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DummyPosterCalls {
        const NAME: &'static str = "DummyPosterCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::blockHash(_) => {
                    <blockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::postAssertion(_) => {
                    <postAssertionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sendRoot(_) => <sendRootCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DummyPosterCalls>] = &[
                {
                    fn sendRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DummyPosterCalls> {
                        <sendRootCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DummyPosterCalls::sendRoot)
                    }
                    sendRoot
                },
                {
                    fn postAssertion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DummyPosterCalls> {
                        <postAssertionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DummyPosterCalls::postAssertion)
                    }
                    postAssertion
                },
                {
                    fn blockHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DummyPosterCalls> {
                        <blockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DummyPosterCalls::blockHash)
                    }
                    blockHash
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::blockHash(inner) => {
                    <blockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::postAssertion(inner) => {
                    <postAssertionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sendRoot(inner) => {
                    <sendRootCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::blockHash(inner) => {
                    <blockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::postAssertion(inner) => {
                    <postAssertionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sendRoot(inner) => {
                    <sendRootCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DummyPoster`](self) contract instance.

See the [wrapper's documentation](`DummyPosterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DummyPosterInstance<T, P, N> {
        DummyPosterInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DummyPosterInstance<T, P, N>>,
    > {
        DummyPosterInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DummyPosterInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`DummyPoster`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DummyPoster`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DummyPosterInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DummyPosterInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DummyPosterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DummyPosterInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DummyPoster`](self) contract instance.

See the [wrapper's documentation](`DummyPosterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DummyPosterInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DummyPosterInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DummyPosterInstance<T, P, N> {
            DummyPosterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DummyPosterInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`blockHash`] function.
        pub fn blockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, blockHashCall, N> {
            self.call_builder(&blockHashCall {})
        }
        ///Creates a new call builder for the [`postAssertion`] function.
        pub fn postAssertion(
            &self,
            blockHash_: alloy::sol_types::private::FixedBytes<32>,
            sendRoot_: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, postAssertionCall, N> {
            self.call_builder(
                &postAssertionCall {
                    blockHash_,
                    sendRoot_,
                },
            )
        }
        ///Creates a new call builder for the [`sendRoot`] function.
        pub fn sendRoot(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, sendRootCall, N> {
            self.call_builder(&sendRootCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DummyPosterInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
