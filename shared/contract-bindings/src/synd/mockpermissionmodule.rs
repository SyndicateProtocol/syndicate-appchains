/**

Generated by the following Solidity interface...
```solidity
interface MockPermissionModule {
    constructor(bool shouldAllow);

    function isAllowed(address, address, bytes memory) external view returns (bool);
    function setShouldAllow(bool shouldAllow) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "shouldAllow",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setShouldAllow",
    "inputs": [
      {
        "name": "shouldAllow",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockPermissionModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100e2565b61014d565b610021610034565b6102dd61015a82396102dd90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b151590565b6100aa8161009c565b036100b157565b5f80fd5b905051906100c2826100a1565b565b906020828203126100dd576100da915f016100b5565b90565b610098565b610100610437803803806100f581610083565b9283398101906100c4565b90565b5f1b90565b9061011460ff91610103565b9181191691161790565b6101279061009c565b90565b90565b9061014261013d6101499261011e565b61012a565b8254610108565b9055565b610157905f61012d565b56fe60806040526004361015610013575b610204565b61001d5f3561003c565b80632dcfafd71461003757637a3979dc0361000e576101cb565b61009f565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61006281610054565b0361006957565b5f80fd5b9050359061007a82610059565b565b9060208282031261009557610092915f0161006d565b90565b61004c565b5f0190565b346100cd576100b76100b236600461007c565b610252565b6100bf610042565b806100c98161009a565b0390f35b610048565b60018060a01b031690565b6100e6906100d2565b90565b6100f2816100dd565b036100f957565b5f80fd5b9050359061010a826100e9565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101525781359167ffffffffffffffff831161014d57602001926001830284011161014857565b610114565b610110565b61010c565b916060838303126101a45761016e825f85016100fd565b9261017c83602083016100fd565b92604082013567ffffffffffffffff811161019f5761019b9201610118565b9091565b610050565b61004c565b6101b290610054565b9052565b91906101c9905f602085019401906101a9565b565b346101ff576101fb6101ea6101e1366004610157565b9291909161028e565b6101f2610042565b918291826101b6565b0390f35b610048565b5f80fd5b5f1b90565b9061021960ff91610208565b9181191691161790565b61022c90610054565b90565b90565b9061024761024261024e92610223565b61022f565b825461020d565b9055565b61025c905f610232565b565b5f90565b5f1c90565b60ff1690565b61027961027e91610262565b610267565b90565b61028b905461026d565b90565b5050505061029a61025e565b506102a45f610281565b9056fea2646970667358221220ba9c7832fc3b0503b0d213194314b99aa51fc0ae97466802c236610d8d87937564736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xE2V[a\x01MV[a\0!a\x004V[a\x02\xDDa\x01Z\x829a\x02\xDD\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[\x15\x15\x90V[a\0\xAA\x81a\0\x9CV[\x03a\0\xB1WV[_\x80\xFD[\x90PQ\x90a\0\xC2\x82a\0\xA1V[V[\x90` \x82\x82\x03\x12a\0\xDDWa\0\xDA\x91_\x01a\0\xB5V[\x90V[a\0\x98V[a\x01\0a\x047\x808\x03\x80a\0\xF5\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xC4V[\x90V[_\x1B\x90V[\x90a\x01\x14`\xFF\x91a\x01\x03V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01'\x90a\0\x9CV[\x90V[\x90V[\x90a\x01Ba\x01=a\x01I\x92a\x01\x1EV[a\x01*V[\x82Ta\x01\x08V[\x90UV[a\x01W\x90_a\x01-V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x04V[a\0\x1D_5a\0<V[\x80c-\xCF\xAF\xD7\x14a\x007Wcz9y\xDC\x03a\0\x0EWa\x01\xCBV[a\0\x9FV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0b\x81a\0TV[\x03a\0iWV[_\x80\xFD[\x90P5\x90a\0z\x82a\0YV[V[\x90` \x82\x82\x03\x12a\0\x95Wa\0\x92\x91_\x01a\0mV[\x90V[a\0LV[_\x01\x90V[4a\0\xCDWa\0\xB7a\0\xB26`\x04a\0|V[a\x02RV[a\0\xBFa\0BV[\x80a\0\xC9\x81a\0\x9AV[\x03\x90\xF3[a\0HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xE6\x90a\0\xD2V[\x90V[a\0\xF2\x81a\0\xDDV[\x03a\0\xF9WV[_\x80\xFD[\x90P5\x90a\x01\n\x82a\0\xE9V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01RW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01MW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01HWV[a\x01\x14V[a\x01\x10V[a\x01\x0CV[\x91``\x83\x83\x03\x12a\x01\xA4Wa\x01n\x82_\x85\x01a\0\xFDV[\x92a\x01|\x83` \x83\x01a\0\xFDV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x9FWa\x01\x9B\x92\x01a\x01\x18V[\x90\x91V[a\0PV[a\0LV[a\x01\xB2\x90a\0TV[\x90RV[\x91\x90a\x01\xC9\x90_` \x85\x01\x94\x01\x90a\x01\xA9V[V[4a\x01\xFFWa\x01\xFBa\x01\xEAa\x01\xE16`\x04a\x01WV[\x92\x91\x90\x91a\x02\x8EV[a\x01\xF2a\0BV[\x91\x82\x91\x82a\x01\xB6V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1B\x90V[\x90a\x02\x19`\xFF\x91a\x02\x08V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02,\x90a\0TV[\x90V[\x90V[\x90a\x02Ga\x02Ba\x02N\x92a\x02#V[a\x02/V[\x82Ta\x02\rV[\x90UV[a\x02\\\x90_a\x022V[V[_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x02ya\x02~\x91a\x02bV[a\x02gV[\x90V[a\x02\x8B\x90Ta\x02mV[\x90V[PPPPa\x02\x9Aa\x02^V[Pa\x02\xA4_a\x02\x81V[\x90V\xFE\xA2dipfsX\"\x12 \xBA\x9Cx2\xFC;\x05\x03\xB0\xD2\x13\x19C\x14\xB9\x9A\xA5\x1F\xC0\xAE\x97Fh\x02\xC26a\r\x8D\x87\x93udsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610204565b61001d5f3561003c565b80632dcfafd71461003757637a3979dc0361000e576101cb565b61009f565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61006281610054565b0361006957565b5f80fd5b9050359061007a82610059565b565b9060208282031261009557610092915f0161006d565b90565b61004c565b5f0190565b346100cd576100b76100b236600461007c565b610252565b6100bf610042565b806100c98161009a565b0390f35b610048565b60018060a01b031690565b6100e6906100d2565b90565b6100f2816100dd565b036100f957565b5f80fd5b9050359061010a826100e9565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101525781359167ffffffffffffffff831161014d57602001926001830284011161014857565b610114565b610110565b61010c565b916060838303126101a45761016e825f85016100fd565b9261017c83602083016100fd565b92604082013567ffffffffffffffff811161019f5761019b9201610118565b9091565b610050565b61004c565b6101b290610054565b9052565b91906101c9905f602085019401906101a9565b565b346101ff576101fb6101ea6101e1366004610157565b9291909161028e565b6101f2610042565b918291826101b6565b0390f35b610048565b5f80fd5b5f1b90565b9061021960ff91610208565b9181191691161790565b61022c90610054565b90565b90565b9061024761024261024e92610223565b61022f565b825461020d565b9055565b61025c905f610232565b565b5f90565b5f1c90565b60ff1690565b61027961027e91610262565b610267565b90565b61028b905461026d565b90565b5050505061029a61025e565b506102a45f610281565b9056fea2646970667358221220ba9c7832fc3b0503b0d213194314b99aa51fc0ae97466802c236610d8d87937564736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x04V[a\0\x1D_5a\0<V[\x80c-\xCF\xAF\xD7\x14a\x007Wcz9y\xDC\x03a\0\x0EWa\x01\xCBV[a\0\x9FV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0b\x81a\0TV[\x03a\0iWV[_\x80\xFD[\x90P5\x90a\0z\x82a\0YV[V[\x90` \x82\x82\x03\x12a\0\x95Wa\0\x92\x91_\x01a\0mV[\x90V[a\0LV[_\x01\x90V[4a\0\xCDWa\0\xB7a\0\xB26`\x04a\0|V[a\x02RV[a\0\xBFa\0BV[\x80a\0\xC9\x81a\0\x9AV[\x03\x90\xF3[a\0HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xE6\x90a\0\xD2V[\x90V[a\0\xF2\x81a\0\xDDV[\x03a\0\xF9WV[_\x80\xFD[\x90P5\x90a\x01\n\x82a\0\xE9V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01RW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01MW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01HWV[a\x01\x14V[a\x01\x10V[a\x01\x0CV[\x91``\x83\x83\x03\x12a\x01\xA4Wa\x01n\x82_\x85\x01a\0\xFDV[\x92a\x01|\x83` \x83\x01a\0\xFDV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x9FWa\x01\x9B\x92\x01a\x01\x18V[\x90\x91V[a\0PV[a\0LV[a\x01\xB2\x90a\0TV[\x90RV[\x91\x90a\x01\xC9\x90_` \x85\x01\x94\x01\x90a\x01\xA9V[V[4a\x01\xFFWa\x01\xFBa\x01\xEAa\x01\xE16`\x04a\x01WV[\x92\x91\x90\x91a\x02\x8EV[a\x01\xF2a\0BV[\x91\x82\x91\x82a\x01\xB6V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1B\x90V[\x90a\x02\x19`\xFF\x91a\x02\x08V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02,\x90a\0TV[\x90V[\x90V[\x90a\x02Ga\x02Ba\x02N\x92a\x02#V[a\x02/V[\x82Ta\x02\rV[\x90UV[a\x02\\\x90_a\x022V[V[_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x02ya\x02~\x91a\x02bV[a\x02gV[\x90V[a\x02\x8B\x90Ta\x02mV[\x90V[PPPPa\x02\x9Aa\x02^V[Pa\x02\xA4_a\x02\x81V[\x90V\xFE\xA2dipfsX\"\x12 \xBA\x9Cx2\xFC;\x05\x03\xB0\xD2\x13\x19C\x14\xB9\x9A\xA5\x1F\xC0\xAE\x97Fh\x02\xC26a\r\x8D\x87\x93udsolcC\0\x08\x1C\x003",
    );
    /**Constructor`.
```solidity
constructor(bool shouldAllow);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub shouldAllow: bool,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.shouldAllow,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { shouldAllow: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.shouldAllow,
                    ),
                )
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address, address, bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value._0, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShouldAllow(bool)` and selector `0x2dcfafd7`.
```solidity
function setShouldAllow(bool shouldAllow) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldAllowCall {
        #[allow(missing_docs)]
        pub shouldAllow: bool,
    }
    ///Container type for the return parameters of the [`setShouldAllow(bool)`](setShouldAllowCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldAllowReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldAllowCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldAllowCall) -> Self {
                    (value.shouldAllow,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldAllowCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { shouldAllow: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldAllowReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldAllowReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldAllowReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldAllowCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldAllowReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldAllow(bool)";
            const SELECTOR: [u8; 4] = [45u8, 207u8, 175u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.shouldAllow,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockPermissionModule`](self) function calls.
    pub enum MockPermissionModuleCalls {
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        setShouldAllow(setShouldAllowCall),
    }
    #[automatically_derived]
    impl MockPermissionModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [45u8, 207u8, 175u8, 215u8],
            [122u8, 57u8, 121u8, 220u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockPermissionModuleCalls {
        const NAME: &'static str = "MockPermissionModuleCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldAllow(_) => {
                    <setShouldAllowCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockPermissionModuleCalls>] = &[
                {
                    fn setShouldAllow(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockPermissionModuleCalls> {
                        <setShouldAllowCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockPermissionModuleCalls::setShouldAllow)
                    }
                    setShouldAllow
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockPermissionModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockPermissionModuleCalls::isAllowed)
                    }
                    isAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setShouldAllow(inner) => {
                    <setShouldAllowCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldAllow(inner) => {
                    <setShouldAllowCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockPermissionModule`](self) contract instance.

See the [wrapper's documentation](`MockPermissionModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockPermissionModuleInstance<T, P, N> {
        MockPermissionModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        shouldAllow: bool,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockPermissionModuleInstance<T, P, N>>,
    > {
        MockPermissionModuleInstance::<T, P, N>::deploy(provider, shouldAllow)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P, shouldAllow: bool) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockPermissionModuleInstance::<T, P, N>::deploy_builder(provider, shouldAllow)
    }
    /**A [`MockPermissionModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockPermissionModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockPermissionModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockPermissionModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockPermissionModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockPermissionModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockPermissionModule`](self) contract instance.

See the [wrapper's documentation](`MockPermissionModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            shouldAllow: bool,
        ) -> alloy_contract::Result<MockPermissionModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, shouldAllow);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            shouldAllow: bool,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { shouldAllow },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockPermissionModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockPermissionModuleInstance<T, P, N> {
            MockPermissionModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockPermissionModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { _0, _1, _2 })
        }
        ///Creates a new call builder for the [`setShouldAllow`] function.
        pub fn setShouldAllow(
            &self,
            shouldAllow: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShouldAllowCall, N> {
            self.call_builder(&setShouldAllowCall { shouldAllow })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockPermissionModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
