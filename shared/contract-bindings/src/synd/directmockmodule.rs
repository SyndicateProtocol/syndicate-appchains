/**

Generated by the following Solidity interface...
```solidity
interface DirectMockModule {
    function allowedData(bytes memory) external view returns (bool);
    function isAllowed(address, address, bytes memory data) external view returns (bool);
    function setAllowed(bytes memory data, bool allowed) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "allowedData",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "allowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DirectMockModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b6105b761002b82396105b790f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61046e565b61001d5f3561004c565b80637a3979dc14610047578063a48cd648146100425763b2ad3c430361000e5761043a565b610398565b610162565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61007890610064565b90565b6100848161006f565b0361008b57565b5f80fd5b9050359061009c8261007b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100e45781359167ffffffffffffffff83116100df5760200192600183028401116100da57565b6100a6565b6100a2565b61009e565b9160608383031261013657610100825f850161008f565b9261010e836020830161008f565b92604082013567ffffffffffffffff81116101315761012d92016100aa565b9091565b610060565b61005c565b151590565b6101499061013b565b9052565b9190610160905f60208501940190610140565b565b34610196576101926101816101783660046100e9565b929190916104fe565b610189610052565b9182918261014d565b0390f35b610058565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906101c79061019f565b810190811067ffffffffffffffff8211176101e157604052565b6101a9565b906101f96101f2610052565b92836101bd565b565b67ffffffffffffffff81116102195761021560209161019f565b0190565b6101a9565b90825f939282370152565b9092919261023e610239826101fb565b6101e6565b9381855260208501908284011161025a576102589261021e565b565b61019b565b9080601f8301121561027d5781602061027a93359101610229565b90565b61009e565b906020828203126102b2575f82013567ffffffffffffffff81116102ad576102aa920161025f565b90565b610060565b61005c565b5190565b905090565b90825f9392825e0152565b6102f06102e7926020926102de816102b7565b948580936102bb565b938491016102c0565b0190565b90565b90565b61030661030b916102f4565b6102f7565b9052565b61031f61032691602094936102cb565b80926102fa565b0190565b61033e610335610052565b9283928361030f565b03902090565b61034d9161032a565b90565b1c90565b60ff1690565b61036a90600861036f9302610350565b610354565b90565b9061037d915461035a565b90565b610395906103905f915f92610344565b610372565b90565b346103c8576103c46103b36103ae366004610282565b610380565b6103bb610052565b9182918261014d565b0390f35b610058565b6103d68161013b565b036103dd57565b5f80fd5b905035906103ee826103cd565b565b9190604083820312610430575f8301359067ffffffffffffffff821161042b5761041f8161042893860161025f565b936020016103e1565b90565b610060565b61005c565b5f0190565b346104695761045361044d3660046103f0565b9061056c565b61045b610052565b8061046581610435565b0390f35b610058565b5f80fd5b5f90565b9091826104868161048d936102bb565b809361021e565b0190565b6104a290602094936104a993610476565b80926102fa565b0190565b90916104c4906104bb610052565b93849384610491565b03902090565b90916104d5926104ad565b90565b5f1c90565b6104e96104ee916104d8565b610354565b90565b6104fb90546104dd565b90565b505061051a9061051f92610510610472565b505f9190916104ca565b6104f1565b90565b5f1b90565b9061053360ff91610522565b9181191691161790565b6105469061013b565b90565b90565b9061056161055c6105689261053d565b610549565b8254610527565b9055565b61057a61057f92915f610344565b61054c565b56fea26469706673582212203ec160a2f80f414330a4cbd4423a008fdc7188e25b242c5cef7127e3d632b16164736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x05\xB7a\0+\x829a\x05\xB7\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04nV[a\0\x1D_5a\0LV[\x80cz9y\xDC\x14a\0GW\x80c\xA4\x8C\xD6H\x14a\0BWc\xB2\xAD<C\x03a\0\x0EWa\x04:V[a\x03\x98V[a\x01bV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0x\x90a\0dV[\x90V[a\0\x84\x81a\0oV[\x03a\0\x8BWV[_\x80\xFD[\x90P5\x90a\0\x9C\x82a\0{V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xE4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xDFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xDAWV[a\0\xA6V[a\0\xA2V[a\0\x9EV[\x91``\x83\x83\x03\x12a\x016Wa\x01\0\x82_\x85\x01a\0\x8FV[\x92a\x01\x0E\x83` \x83\x01a\0\x8FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x011Wa\x01-\x92\x01a\0\xAAV[\x90\x91V[a\0`V[a\0\\V[\x15\x15\x90V[a\x01I\x90a\x01;V[\x90RV[\x91\x90a\x01`\x90_` \x85\x01\x94\x01\x90a\x01@V[V[4a\x01\x96Wa\x01\x92a\x01\x81a\x01x6`\x04a\0\xE9V[\x92\x91\x90\x91a\x04\xFEV[a\x01\x89a\0RV[\x91\x82\x91\x82a\x01MV[\x03\x90\xF3[a\0XV[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01\xC7\x90a\x01\x9FV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01\xE1W`@RV[a\x01\xA9V[\x90a\x01\xF9a\x01\xF2a\0RV[\x92\x83a\x01\xBDV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x19Wa\x02\x15` \x91a\x01\x9FV[\x01\x90V[a\x01\xA9V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x02>a\x029\x82a\x01\xFBV[a\x01\xE6V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x02ZWa\x02X\x92a\x02\x1EV[V[a\x01\x9BV[\x90\x80`\x1F\x83\x01\x12\x15a\x02}W\x81` a\x02z\x935\x91\x01a\x02)V[\x90V[a\0\x9EV[\x90` \x82\x82\x03\x12a\x02\xB2W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xADWa\x02\xAA\x92\x01a\x02_V[\x90V[a\0`V[a\0\\V[Q\x90V[\x90P\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x02\xF0a\x02\xE7\x92` \x92a\x02\xDE\x81a\x02\xB7V[\x94\x85\x80\x93a\x02\xBBV[\x93\x84\x91\x01a\x02\xC0V[\x01\x90V[\x90V[\x90V[a\x03\x06a\x03\x0B\x91a\x02\xF4V[a\x02\xF7V[\x90RV[a\x03\x1Fa\x03&\x91` \x94\x93a\x02\xCBV[\x80\x92a\x02\xFAV[\x01\x90V[a\x03>a\x035a\0RV[\x92\x83\x92\x83a\x03\x0FV[\x03\x90 \x90V[a\x03M\x91a\x03*V[\x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03j\x90`\x08a\x03o\x93\x02a\x03PV[a\x03TV[\x90V[\x90a\x03}\x91Ta\x03ZV[\x90V[a\x03\x95\x90a\x03\x90_\x91_\x92a\x03DV[a\x03rV[\x90V[4a\x03\xC8Wa\x03\xC4a\x03\xB3a\x03\xAE6`\x04a\x02\x82V[a\x03\x80V[a\x03\xBBa\0RV[\x91\x82\x91\x82a\x01MV[\x03\x90\xF3[a\0XV[a\x03\xD6\x81a\x01;V[\x03a\x03\xDDWV[_\x80\xFD[\x90P5\x90a\x03\xEE\x82a\x03\xCDV[V[\x91\x90`@\x83\x82\x03\x12a\x040W_\x83\x015\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04+Wa\x04\x1F\x81a\x04(\x93\x86\x01a\x02_V[\x93` \x01a\x03\xE1V[\x90V[a\0`V[a\0\\V[_\x01\x90V[4a\x04iWa\x04Sa\x04M6`\x04a\x03\xF0V[\x90a\x05lV[a\x04[a\0RV[\x80a\x04e\x81a\x045V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[\x90\x91\x82a\x04\x86\x81a\x04\x8D\x93a\x02\xBBV[\x80\x93a\x02\x1EV[\x01\x90V[a\x04\xA2\x90` \x94\x93a\x04\xA9\x93a\x04vV[\x80\x92a\x02\xFAV[\x01\x90V[\x90\x91a\x04\xC4\x90a\x04\xBBa\0RV[\x93\x84\x93\x84a\x04\x91V[\x03\x90 \x90V[\x90\x91a\x04\xD5\x92a\x04\xADV[\x90V[_\x1C\x90V[a\x04\xE9a\x04\xEE\x91a\x04\xD8V[a\x03TV[\x90V[a\x04\xFB\x90Ta\x04\xDDV[\x90V[PPa\x05\x1A\x90a\x05\x1F\x92a\x05\x10a\x04rV[P_\x91\x90\x91a\x04\xCAV[a\x04\xF1V[\x90V[_\x1B\x90V[\x90a\x053`\xFF\x91a\x05\"V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05F\x90a\x01;V[\x90V[\x90V[\x90a\x05aa\x05\\a\x05h\x92a\x05=V[a\x05IV[\x82Ta\x05'V[\x90UV[a\x05za\x05\x7F\x92\x91_a\x03DV[a\x05LV[V\xFE\xA2dipfsX\"\x12 >\xC1`\xA2\xF8\x0FAC0\xA4\xCB\xD4B:\0\x8F\xDCq\x88\xE2[$,\\\xEFq'\xE3\xD62\xB1adsolcC\0\x08\x1D\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61046e565b61001d5f3561004c565b80637a3979dc14610047578063a48cd648146100425763b2ad3c430361000e5761043a565b610398565b610162565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61007890610064565b90565b6100848161006f565b0361008b57565b5f80fd5b9050359061009c8261007b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100e45781359167ffffffffffffffff83116100df5760200192600183028401116100da57565b6100a6565b6100a2565b61009e565b9160608383031261013657610100825f850161008f565b9261010e836020830161008f565b92604082013567ffffffffffffffff81116101315761012d92016100aa565b9091565b610060565b61005c565b151590565b6101499061013b565b9052565b9190610160905f60208501940190610140565b565b34610196576101926101816101783660046100e9565b929190916104fe565b610189610052565b9182918261014d565b0390f35b610058565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906101c79061019f565b810190811067ffffffffffffffff8211176101e157604052565b6101a9565b906101f96101f2610052565b92836101bd565b565b67ffffffffffffffff81116102195761021560209161019f565b0190565b6101a9565b90825f939282370152565b9092919261023e610239826101fb565b6101e6565b9381855260208501908284011161025a576102589261021e565b565b61019b565b9080601f8301121561027d5781602061027a93359101610229565b90565b61009e565b906020828203126102b2575f82013567ffffffffffffffff81116102ad576102aa920161025f565b90565b610060565b61005c565b5190565b905090565b90825f9392825e0152565b6102f06102e7926020926102de816102b7565b948580936102bb565b938491016102c0565b0190565b90565b90565b61030661030b916102f4565b6102f7565b9052565b61031f61032691602094936102cb565b80926102fa565b0190565b61033e610335610052565b9283928361030f565b03902090565b61034d9161032a565b90565b1c90565b60ff1690565b61036a90600861036f9302610350565b610354565b90565b9061037d915461035a565b90565b610395906103905f915f92610344565b610372565b90565b346103c8576103c46103b36103ae366004610282565b610380565b6103bb610052565b9182918261014d565b0390f35b610058565b6103d68161013b565b036103dd57565b5f80fd5b905035906103ee826103cd565b565b9190604083820312610430575f8301359067ffffffffffffffff821161042b5761041f8161042893860161025f565b936020016103e1565b90565b610060565b61005c565b5f0190565b346104695761045361044d3660046103f0565b9061056c565b61045b610052565b8061046581610435565b0390f35b610058565b5f80fd5b5f90565b9091826104868161048d936102bb565b809361021e565b0190565b6104a290602094936104a993610476565b80926102fa565b0190565b90916104c4906104bb610052565b93849384610491565b03902090565b90916104d5926104ad565b90565b5f1c90565b6104e96104ee916104d8565b610354565b90565b6104fb90546104dd565b90565b505061051a9061051f92610510610472565b505f9190916104ca565b6104f1565b90565b5f1b90565b9061053360ff91610522565b9181191691161790565b6105469061013b565b90565b90565b9061056161055c6105689261053d565b610549565b8254610527565b9055565b61057a61057f92915f610344565b61054c565b56fea26469706673582212203ec160a2f80f414330a4cbd4423a008fdc7188e25b242c5cef7127e3d632b16164736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04nV[a\0\x1D_5a\0LV[\x80cz9y\xDC\x14a\0GW\x80c\xA4\x8C\xD6H\x14a\0BWc\xB2\xAD<C\x03a\0\x0EWa\x04:V[a\x03\x98V[a\x01bV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0x\x90a\0dV[\x90V[a\0\x84\x81a\0oV[\x03a\0\x8BWV[_\x80\xFD[\x90P5\x90a\0\x9C\x82a\0{V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xE4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xDFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xDAWV[a\0\xA6V[a\0\xA2V[a\0\x9EV[\x91``\x83\x83\x03\x12a\x016Wa\x01\0\x82_\x85\x01a\0\x8FV[\x92a\x01\x0E\x83` \x83\x01a\0\x8FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x011Wa\x01-\x92\x01a\0\xAAV[\x90\x91V[a\0`V[a\0\\V[\x15\x15\x90V[a\x01I\x90a\x01;V[\x90RV[\x91\x90a\x01`\x90_` \x85\x01\x94\x01\x90a\x01@V[V[4a\x01\x96Wa\x01\x92a\x01\x81a\x01x6`\x04a\0\xE9V[\x92\x91\x90\x91a\x04\xFEV[a\x01\x89a\0RV[\x91\x82\x91\x82a\x01MV[\x03\x90\xF3[a\0XV[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01\xC7\x90a\x01\x9FV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01\xE1W`@RV[a\x01\xA9V[\x90a\x01\xF9a\x01\xF2a\0RV[\x92\x83a\x01\xBDV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x19Wa\x02\x15` \x91a\x01\x9FV[\x01\x90V[a\x01\xA9V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x02>a\x029\x82a\x01\xFBV[a\x01\xE6V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x02ZWa\x02X\x92a\x02\x1EV[V[a\x01\x9BV[\x90\x80`\x1F\x83\x01\x12\x15a\x02}W\x81` a\x02z\x935\x91\x01a\x02)V[\x90V[a\0\x9EV[\x90` \x82\x82\x03\x12a\x02\xB2W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xADWa\x02\xAA\x92\x01a\x02_V[\x90V[a\0`V[a\0\\V[Q\x90V[\x90P\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x02\xF0a\x02\xE7\x92` \x92a\x02\xDE\x81a\x02\xB7V[\x94\x85\x80\x93a\x02\xBBV[\x93\x84\x91\x01a\x02\xC0V[\x01\x90V[\x90V[\x90V[a\x03\x06a\x03\x0B\x91a\x02\xF4V[a\x02\xF7V[\x90RV[a\x03\x1Fa\x03&\x91` \x94\x93a\x02\xCBV[\x80\x92a\x02\xFAV[\x01\x90V[a\x03>a\x035a\0RV[\x92\x83\x92\x83a\x03\x0FV[\x03\x90 \x90V[a\x03M\x91a\x03*V[\x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03j\x90`\x08a\x03o\x93\x02a\x03PV[a\x03TV[\x90V[\x90a\x03}\x91Ta\x03ZV[\x90V[a\x03\x95\x90a\x03\x90_\x91_\x92a\x03DV[a\x03rV[\x90V[4a\x03\xC8Wa\x03\xC4a\x03\xB3a\x03\xAE6`\x04a\x02\x82V[a\x03\x80V[a\x03\xBBa\0RV[\x91\x82\x91\x82a\x01MV[\x03\x90\xF3[a\0XV[a\x03\xD6\x81a\x01;V[\x03a\x03\xDDWV[_\x80\xFD[\x90P5\x90a\x03\xEE\x82a\x03\xCDV[V[\x91\x90`@\x83\x82\x03\x12a\x040W_\x83\x015\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04+Wa\x04\x1F\x81a\x04(\x93\x86\x01a\x02_V[\x93` \x01a\x03\xE1V[\x90V[a\0`V[a\0\\V[_\x01\x90V[4a\x04iWa\x04Sa\x04M6`\x04a\x03\xF0V[\x90a\x05lV[a\x04[a\0RV[\x80a\x04e\x81a\x045V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[\x90\x91\x82a\x04\x86\x81a\x04\x8D\x93a\x02\xBBV[\x80\x93a\x02\x1EV[\x01\x90V[a\x04\xA2\x90` \x94\x93a\x04\xA9\x93a\x04vV[\x80\x92a\x02\xFAV[\x01\x90V[\x90\x91a\x04\xC4\x90a\x04\xBBa\0RV[\x93\x84\x93\x84a\x04\x91V[\x03\x90 \x90V[\x90\x91a\x04\xD5\x92a\x04\xADV[\x90V[_\x1C\x90V[a\x04\xE9a\x04\xEE\x91a\x04\xD8V[a\x03TV[\x90V[a\x04\xFB\x90Ta\x04\xDDV[\x90V[PPa\x05\x1A\x90a\x05\x1F\x92a\x05\x10a\x04rV[P_\x91\x90\x91a\x04\xCAV[a\x04\xF1V[\x90V[_\x1B\x90V[\x90a\x053`\xFF\x91a\x05\"V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05F\x90a\x01;V[\x90V[\x90V[\x90a\x05aa\x05\\a\x05h\x92a\x05=V[a\x05IV[\x82Ta\x05'V[\x90UV[a\x05za\x05\x7F\x92\x91_a\x03DV[a\x05LV[V\xFE\xA2dipfsX\"\x12 >\xC1`\xA2\xF8\x0FAC0\xA4\xCB\xD4B:\0\x8F\xDCq\x88\xE2[$,\\\xEFq'\xE3\xD62\xB1adsolcC\0\x08\x1D\x003",
    );
    /**Function with signature `allowedData(bytes)` and selector `0xa48cd648`.
```solidity
function allowedData(bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDataCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`allowedData(bytes)`](allowedDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDataReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDataCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowedDataCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowedDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDataReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowedDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowedDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedDataCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedDataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedData(bytes)";
            const SELECTOR: [u8; 4] = [164u8, 140u8, 214u8, 72u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address, address, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value._0, value._1, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAllowed(bytes,bool)` and selector `0xb2ad3c43`.
```solidity
function setAllowed(bytes memory data, bool allowed) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub allowed: bool,
    }
    ///Container type for the return parameters of the [`setAllowed(bytes,bool)`](setAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAllowedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: setAllowedCall) -> Self {
                    (value.data, value.allowed)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        allowed: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setAllowedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAllowedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAllowed(bytes,bool)";
            const SELECTOR: [u8; 4] = [178u8, 173u8, 60u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.allowed,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DirectMockModule`](self) function calls.
    pub enum DirectMockModuleCalls {
        #[allow(missing_docs)]
        allowedData(allowedDataCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        setAllowed(setAllowedCall),
    }
    #[automatically_derived]
    impl DirectMockModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [122u8, 57u8, 121u8, 220u8],
            [164u8, 140u8, 214u8, 72u8],
            [178u8, 173u8, 60u8, 67u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DirectMockModuleCalls {
        const NAME: &'static str = "DirectMockModuleCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allowedData(_) => {
                    <allowedDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAllowed(_) => {
                    <setAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DirectMockModuleCalls>] = &[
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DirectMockModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DirectMockModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn allowedData(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DirectMockModuleCalls> {
                        <allowedDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DirectMockModuleCalls::allowedData)
                    }
                    allowedData
                },
                {
                    fn setAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DirectMockModuleCalls> {
                        <setAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DirectMockModuleCalls::setAllowed)
                    }
                    setAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allowedData(inner) => {
                    <allowedDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setAllowed(inner) => {
                    <setAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allowedData(inner) => {
                    <allowedDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAllowed(inner) => {
                    <setAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DirectMockModule`](self) contract instance.

See the [wrapper's documentation](`DirectMockModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DirectMockModuleInstance<T, P, N> {
        DirectMockModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DirectMockModuleInstance<T, P, N>>,
    > {
        DirectMockModuleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DirectMockModuleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`DirectMockModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DirectMockModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DirectMockModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DirectMockModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DirectMockModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DirectMockModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DirectMockModule`](self) contract instance.

See the [wrapper's documentation](`DirectMockModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DirectMockModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DirectMockModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DirectMockModuleInstance<T, P, N> {
            DirectMockModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DirectMockModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allowedData`] function.
        pub fn allowedData(
            &self,
            _0: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedDataCall, N> {
            self.call_builder(&allowedDataCall { _0 })
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { _0, _1, data })
        }
        ///Creates a new call builder for the [`setAllowed`] function.
        pub fn setAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
            allowed: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAllowedCall, N> {
            self.call_builder(&setAllowedCall { data, allowed })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DirectMockModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
