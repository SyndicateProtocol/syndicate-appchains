/**

Generated by the following Solidity interface...
```solidity
interface BeaconProxy {
    error AddressEmptyCode(address target);
    error ERC1967InvalidBeacon(address beacon);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error FailedCall();

    event BeaconUpgraded(address indexed beacon);

    constructor(address beacon, bytes data) payable;

    fallback() external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "beacon",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "BeaconUpgraded",
    "inputs": [
      {
        "name": "beacon",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidBeacon",
    "inputs": [
      {
        "name": "beacon",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod BeaconProxy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405261001561000f6101a6565b906101c8565b61001d610034565b6102086107038239608051816101e6015261020890f35b60405190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100629061003a565b810190811060018060401b0382111761007a57604052565b610044565b9061009261008b610034565b9283610058565b565b5f80fd5b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b5f80fd5b5f80fd5b60018060401b0381116100fa576100f660209161003a565b0190565b610044565b90825f9392825e0152565b9092919261011f61011a826100de565b61007f565b9381855260208501908284011161013b57610139926100ff565b565b6100da565b9080601f8301121561015e5781602061015b9351910161010a565b90565b6100d6565b9190916040818403126101a15761017c835f83016100c7565b92602082015160018060401b03811161019c576101999201610140565b90565b610098565b610094565b6101c461090b803803806101b98161007f565b928339810190610163565b9091565b906101d39082610292565b608052565b90565b6101ef6101ea6101f49261009c565b6101d8565b61009c565b90565b610200906101db565b90565b61020c906101f7565b90565b5f0190565b5190565b90565b90565b61023261022d6102379261021b565b6101d8565b610218565b90565b610243906101db565b90565b61024f9061023a565b90565b61025b906101f7565b90565b60e01b90565b9060208282031261027d5761027a915f016100c7565b90565b610094565b61028a610034565b3d5f823e3d90fd5b9061029c82610453565b816102c77f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e91610203565b906102d0610034565b806102da8161020f565b0390a26102e681610214565b6102f86102f25f61021e565b91610218565b115f1461039157602061031561031061032b94610246565b610252565b635c60da1b90610323610034565b94859261025e565b8252818061033b6004820161020f565b03915afa90811561038c57610358925f9261035c575b50906105f3565b505b565b61037e91925060203d8111610385575b6103768183610058565b810190610264565b905f610351565b503d61036c565b610282565b505061039b610571565b61035a565b6103a9906100a7565b9052565b91906103c0905f602085019401906103a0565b565b90565b90565b5f1b90565b6103e16103dc6103e6926103c2565b6103c8565b6103c5565b90565b6104127fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506103cd565b90565b9061042660018060a01b03916103c8565b9181191691161790565b90565b9061044861044361044f92610203565b610430565b8254610415565b9055565b803b6104676104615f61021e565b91610218565b1461054b57602061049d610498836104936104b3955f61048d6104886103e9565b610622565b01610433565b610246565b610252565b635c60da1b906104ab610034565b93849261025e565b825281806104c36004820161020f565b03915afa908115610546575f91610518575b50803b6104ea6104e45f61021e565b91610218565b146104f25750565b610514906104fe610034565b918291634c9c8ce360e01b8352600483016103ad565b0390fd5b610539915060203d811161053f575b6105318183610058565b810190610264565b5f6104d5565b503d610527565b610282565b61056d90610557610034565b918291631933b43b60e21b8352600483016103ad565b0390fd5b3461058461057e5f61021e565b91610218565b1161058b57565b610593610034565b63b398979f60e01b8152806105aa6004820161020f565b0390fd5b606090565b906105c56105c0836100de565b61007f565b918252565b3d5f146105e5576105da3d6105b3565b903d5f602084013e5b565b6105ed6105ae565b906105e3565b5f8061061f936106016105ae565b508390602081019051915af4906106166105ca565b9091909161062a565b90565b90565b151590565b9061063e906106376105ae565b5015610625565b5f1461064a57506106b5565b61065382610214565b61066561065f5f61021e565b91610218565b148061069a575b610674575090565b61069690610680610034565b918291639996b31560e01b8352600483016103ad565b0390fd5b50803b6106af6106a95f61021e565b91610218565b1461066c565b6106be81610214565b6106d06106ca5f61021e565b91610218565b115f146106df57805190602001fd5b6106e7610034565b63d6bda27560e01b8152806106fe6004820161020f565b0390fdfe608060405261000c610128565b6101bd565b5f90565b60018060a01b031690565b90565b61003761003261003c92610015565b610020565b610015565b90565b61004890610023565b90565b6100549061003f565b90565b61006090610023565b90565b61006c90610057565b90565b60405190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061009d90610075565b810190811067ffffffffffffffff8211176100b757604052565b61007f565b60e01b90565b5f80fd5b6100cf90610015565b90565b6100db816100c6565b036100e257565b5f80fd5b905051906100f3826100d2565b565b9060208282031261010e5761010b915f016100e6565b90565b6100c2565b5f0190565b61012061006f565b3d5f823e3d90fd5b610130610011565b50610164602061014e6101496101446101db565b61004b565b610063565b635c60da1b9061015c61006f565b9384926100bc565b8252818061017460048201610113565b03915afa9081156101b8575f9161018a575b5090565b6101ab915060203d81116101b1575b6101a38183610093565b8101906100f5565b5f610186565b503d610199565b610118565b5f8091368280378136915af43d5f803e5f146101d7573d5ff35b3d5ffd5b6101e3610011565b507f00000000000000000000000000000000000000000000000000000000000000009056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@Ra\0\x15a\0\x0Fa\x01\xA6V[\x90a\x01\xC8V[a\0\x1Da\x004V[a\x02\x08a\x07\x03\x829`\x80Q\x81a\x01\xE6\x01Ra\x02\x08\x90\xF3[`@Q\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0b\x90a\0:V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0zW`@RV[a\0DV[\x90a\0\x92a\0\x8Ba\x004V[\x92\x83a\0XV[V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[_\x80\xFD[_\x80\xFD[`\x01\x80`@\x1B\x03\x81\x11a\0\xFAWa\0\xF6` \x91a\0:V[\x01\x90V[a\0DV[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x01\x1Fa\x01\x1A\x82a\0\xDEV[a\0\x7FV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x01;Wa\x019\x92a\0\xFFV[V[a\0\xDAV[\x90\x80`\x1F\x83\x01\x12\x15a\x01^W\x81` a\x01[\x93Q\x91\x01a\x01\nV[\x90V[a\0\xD6V[\x91\x90\x91`@\x81\x84\x03\x12a\x01\xA1Wa\x01|\x83_\x83\x01a\0\xC7V[\x92` \x82\x01Q`\x01\x80`@\x1B\x03\x81\x11a\x01\x9CWa\x01\x99\x92\x01a\x01@V[\x90V[a\0\x98V[a\0\x94V[a\x01\xC4a\t\x0B\x808\x03\x80a\x01\xB9\x81a\0\x7FV[\x92\x839\x81\x01\x90a\x01cV[\x90\x91V[\x90a\x01\xD3\x90\x82a\x02\x92V[`\x80RV[\x90V[a\x01\xEFa\x01\xEAa\x01\xF4\x92a\0\x9CV[a\x01\xD8V[a\0\x9CV[\x90V[a\x02\0\x90a\x01\xDBV[\x90V[a\x02\x0C\x90a\x01\xF7V[\x90V[_\x01\x90V[Q\x90V[\x90V[\x90V[a\x022a\x02-a\x027\x92a\x02\x1BV[a\x01\xD8V[a\x02\x18V[\x90V[a\x02C\x90a\x01\xDBV[\x90V[a\x02O\x90a\x02:V[\x90V[a\x02[\x90a\x01\xF7V[\x90V[`\xE0\x1B\x90V[\x90` \x82\x82\x03\x12a\x02}Wa\x02z\x91_\x01a\0\xC7V[\x90V[a\0\x94V[a\x02\x8Aa\x004V[=_\x82>=\x90\xFD[\x90a\x02\x9C\x82a\x04SV[\x81a\x02\xC7\x7F\x1C\xF3\xB0:l\xF1\x9F\xA2\xBA\xBAM\xF1H\xE9\xDC\xAB\xED\xEA\x7F\x8A\\\x07\x84\x0E ~\\\x08\x9B\xE9]>\x91a\x02\x03V[\x90a\x02\xD0a\x004V[\x80a\x02\xDA\x81a\x02\x0FV[\x03\x90\xA2a\x02\xE6\x81a\x02\x14V[a\x02\xF8a\x02\xF2_a\x02\x1EV[\x91a\x02\x18V[\x11_\x14a\x03\x91W` a\x03\x15a\x03\x10a\x03+\x94a\x02FV[a\x02RV[c\\`\xDA\x1B\x90a\x03#a\x004V[\x94\x85\x92a\x02^V[\x82R\x81\x80a\x03;`\x04\x82\x01a\x02\x0FV[\x03\x91Z\xFA\x90\x81\x15a\x03\x8CWa\x03X\x92_\x92a\x03\\W[P\x90a\x05\xF3V[P[V[a\x03~\x91\x92P` =\x81\x11a\x03\x85W[a\x03v\x81\x83a\0XV[\x81\x01\x90a\x02dV[\x90_a\x03QV[P=a\x03lV[a\x02\x82V[PPa\x03\x9Ba\x05qV[a\x03ZV[a\x03\xA9\x90a\0\xA7V[\x90RV[\x91\x90a\x03\xC0\x90_` \x85\x01\x94\x01\x90a\x03\xA0V[V[\x90V[\x90V[_\x1B\x90V[a\x03\xE1a\x03\xDCa\x03\xE6\x92a\x03\xC2V[a\x03\xC8V[a\x03\xC5V[\x90V[a\x04\x12\x7F\xA3\xF0\xADt\xE5B:\xEB\xFD\x80\xD3\xEFCFW\x835\xA9\xA7*\xEA\xEEY\xFFl\xB3X+5\x13=Pa\x03\xCDV[\x90V[\x90a\x04&`\x01\x80`\xA0\x1B\x03\x91a\x03\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x04Ha\x04Ca\x04O\x92a\x02\x03V[a\x040V[\x82Ta\x04\x15V[\x90UV[\x80;a\x04ga\x04a_a\x02\x1EV[\x91a\x02\x18V[\x14a\x05KW` a\x04\x9Da\x04\x98\x83a\x04\x93a\x04\xB3\x95_a\x04\x8Da\x04\x88a\x03\xE9V[a\x06\"V[\x01a\x043V[a\x02FV[a\x02RV[c\\`\xDA\x1B\x90a\x04\xABa\x004V[\x93\x84\x92a\x02^V[\x82R\x81\x80a\x04\xC3`\x04\x82\x01a\x02\x0FV[\x03\x91Z\xFA\x90\x81\x15a\x05FW_\x91a\x05\x18W[P\x80;a\x04\xEAa\x04\xE4_a\x02\x1EV[\x91a\x02\x18V[\x14a\x04\xF2WPV[a\x05\x14\x90a\x04\xFEa\x004V[\x91\x82\x91cL\x9C\x8C\xE3`\xE0\x1B\x83R`\x04\x83\x01a\x03\xADV[\x03\x90\xFD[a\x059\x91P` =\x81\x11a\x05?W[a\x051\x81\x83a\0XV[\x81\x01\x90a\x02dV[_a\x04\xD5V[P=a\x05'V[a\x02\x82V[a\x05m\x90a\x05Wa\x004V[\x91\x82\x91c\x193\xB4;`\xE2\x1B\x83R`\x04\x83\x01a\x03\xADV[\x03\x90\xFD[4a\x05\x84a\x05~_a\x02\x1EV[\x91a\x02\x18V[\x11a\x05\x8BWV[a\x05\x93a\x004V[c\xB3\x98\x97\x9F`\xE0\x1B\x81R\x80a\x05\xAA`\x04\x82\x01a\x02\x0FV[\x03\x90\xFD[``\x90V[\x90a\x05\xC5a\x05\xC0\x83a\0\xDEV[a\0\x7FV[\x91\x82RV[=_\x14a\x05\xE5Wa\x05\xDA=a\x05\xB3V[\x90=_` \x84\x01>[V[a\x05\xEDa\x05\xAEV[\x90a\x05\xE3V[_\x80a\x06\x1F\x93a\x06\x01a\x05\xAEV[P\x83\x90` \x81\x01\x90Q\x91Z\xF4\x90a\x06\x16a\x05\xCAV[\x90\x91\x90\x91a\x06*V[\x90V[\x90V[\x15\x15\x90V[\x90a\x06>\x90a\x067a\x05\xAEV[P\x15a\x06%V[_\x14a\x06JWPa\x06\xB5V[a\x06S\x82a\x02\x14V[a\x06ea\x06__a\x02\x1EV[\x91a\x02\x18V[\x14\x80a\x06\x9AW[a\x06tWP\x90V[a\x06\x96\x90a\x06\x80a\x004V[\x91\x82\x91c\x99\x96\xB3\x15`\xE0\x1B\x83R`\x04\x83\x01a\x03\xADV[\x03\x90\xFD[P\x80;a\x06\xAFa\x06\xA9_a\x02\x1EV[\x91a\x02\x18V[\x14a\x06lV[a\x06\xBE\x81a\x02\x14V[a\x06\xD0a\x06\xCA_a\x02\x1EV[\x91a\x02\x18V[\x11_\x14a\x06\xDFW\x80Q\x90` \x01\xFD[a\x06\xE7a\x004V[c\xD6\xBD\xA2u`\xE0\x1B\x81R\x80a\x06\xFE`\x04\x82\x01a\x02\x0FV[\x03\x90\xFD\xFE`\x80`@Ra\0\x0Ca\x01(V[a\x01\xBDV[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x007a\x002a\0<\x92a\0\x15V[a\0 V[a\0\x15V[\x90V[a\0H\x90a\0#V[\x90V[a\0T\x90a\0?V[\x90V[a\0`\x90a\0#V[\x90V[a\0l\x90a\0WV[\x90V[`@Q\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x9D\x90a\0uV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xB7W`@RV[a\0\x7FV[`\xE0\x1B\x90V[_\x80\xFD[a\0\xCF\x90a\0\x15V[\x90V[a\0\xDB\x81a\0\xC6V[\x03a\0\xE2WV[_\x80\xFD[\x90PQ\x90a\0\xF3\x82a\0\xD2V[V[\x90` \x82\x82\x03\x12a\x01\x0EWa\x01\x0B\x91_\x01a\0\xE6V[\x90V[a\0\xC2V[_\x01\x90V[a\x01 a\0oV[=_\x82>=\x90\xFD[a\x010a\0\x11V[Pa\x01d` a\x01Na\x01Ia\x01Da\x01\xDBV[a\0KV[a\0cV[c\\`\xDA\x1B\x90a\x01\\a\0oV[\x93\x84\x92a\0\xBCV[\x82R\x81\x80a\x01t`\x04\x82\x01a\x01\x13V[\x03\x91Z\xFA\x90\x81\x15a\x01\xB8W_\x91a\x01\x8AW[P\x90V[a\x01\xAB\x91P` =\x81\x11a\x01\xB1W[a\x01\xA3\x81\x83a\0\x93V[\x81\x01\x90a\0\xF5V[_a\x01\x86V[P=a\x01\x99V[a\x01\x18V[_\x80\x916\x82\x807\x816\x91Z\xF4=_\x80>_\x14a\x01\xD7W=_\xF3[=_\xFD[a\x01\xE3a\0\x11V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405261000c610128565b6101bd565b5f90565b60018060a01b031690565b90565b61003761003261003c92610015565b610020565b610015565b90565b61004890610023565b90565b6100549061003f565b90565b61006090610023565b90565b61006c90610057565b90565b60405190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061009d90610075565b810190811067ffffffffffffffff8211176100b757604052565b61007f565b60e01b90565b5f80fd5b6100cf90610015565b90565b6100db816100c6565b036100e257565b5f80fd5b905051906100f3826100d2565b565b9060208282031261010e5761010b915f016100e6565b90565b6100c2565b5f0190565b61012061006f565b3d5f823e3d90fd5b610130610011565b50610164602061014e6101496101446101db565b61004b565b610063565b635c60da1b9061015c61006f565b9384926100bc565b8252818061017460048201610113565b03915afa9081156101b8575f9161018a575b5090565b6101ab915060203d81116101b1575b6101a38183610093565b8101906100f5565b5f610186565b503d610199565b610118565b5f8091368280378136915af43d5f803e5f146101d7573d5ff35b3d5ffd5b6101e3610011565b507f00000000000000000000000000000000000000000000000000000000000000009056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@Ra\0\x0Ca\x01(V[a\x01\xBDV[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x007a\x002a\0<\x92a\0\x15V[a\0 V[a\0\x15V[\x90V[a\0H\x90a\0#V[\x90V[a\0T\x90a\0?V[\x90V[a\0`\x90a\0#V[\x90V[a\0l\x90a\0WV[\x90V[`@Q\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x9D\x90a\0uV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xB7W`@RV[a\0\x7FV[`\xE0\x1B\x90V[_\x80\xFD[a\0\xCF\x90a\0\x15V[\x90V[a\0\xDB\x81a\0\xC6V[\x03a\0\xE2WV[_\x80\xFD[\x90PQ\x90a\0\xF3\x82a\0\xD2V[V[\x90` \x82\x82\x03\x12a\x01\x0EWa\x01\x0B\x91_\x01a\0\xE6V[\x90V[a\0\xC2V[_\x01\x90V[a\x01 a\0oV[=_\x82>=\x90\xFD[a\x010a\0\x11V[Pa\x01d` a\x01Na\x01Ia\x01Da\x01\xDBV[a\0KV[a\0cV[c\\`\xDA\x1B\x90a\x01\\a\0oV[\x93\x84\x92a\0\xBCV[\x82R\x81\x80a\x01t`\x04\x82\x01a\x01\x13V[\x03\x91Z\xFA\x90\x81\x15a\x01\xB8W_\x91a\x01\x8AW[P\x90V[a\x01\xAB\x91P` =\x81\x11a\x01\xB1W[a\x01\xA3\x81\x83a\0\x93V[\x81\x01\x90a\0\xF5V[_a\x01\x86V[P=a\x01\x99V[a\x01\x18V[_\x80\x916\x82\x807\x816\x91Z\xF4=_\x80>_\x14a\x01\xD7W=_\xF3[=_\xFD[a\x01\xE3a\0\x11V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V",
    );
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1967InvalidBeacon(address)` and selector `0x64ced0ec`.
```solidity
error ERC1967InvalidBeacon(address beacon);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidBeacon {
        #[allow(missing_docs)]
        pub beacon: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidBeacon> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidBeacon) -> Self {
                (value.beacon,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967InvalidBeacon {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { beacon: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidBeacon {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidBeacon(address)";
            const SELECTOR: [u8; 4] = [100u8, 206u8, 208u8, 236u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.beacon,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `BeaconUpgraded(address)` and selector `0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e`.
```solidity
event BeaconUpgraded(address indexed beacon);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BeaconUpgraded {
        #[allow(missing_docs)]
        pub beacon: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BeaconUpgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BeaconUpgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                28u8,
                243u8,
                176u8,
                58u8,
                108u8,
                241u8,
                159u8,
                162u8,
                186u8,
                186u8,
                77u8,
                241u8,
                72u8,
                233u8,
                220u8,
                171u8,
                237u8,
                234u8,
                127u8,
                138u8,
                92u8,
                7u8,
                132u8,
                14u8,
                32u8,
                126u8,
                92u8,
                8u8,
                155u8,
                233u8,
                93u8,
                62u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { beacon: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.beacon.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.beacon,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BeaconUpgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BeaconUpgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BeaconUpgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address beacon, bytes data) payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub beacon: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.beacon, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        beacon: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.beacon,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
        }
    };
    ///Container for all the [`BeaconProxy`](self) custom errors.
    pub enum BeaconProxyErrors {
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        ERC1967InvalidBeacon(ERC1967InvalidBeacon),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
    }
    #[automatically_derived]
    impl BeaconProxyErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [76u8, 156u8, 140u8, 227u8],
            [100u8, 206u8, 208u8, 236u8],
            [153u8, 150u8, 179u8, 21u8],
            [179u8, 152u8, 151u8, 159u8],
            [214u8, 189u8, 162u8, 117u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BeaconProxyErrors {
        const NAME: &'static str = "BeaconProxyErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidBeacon(_) => {
                    <ERC1967InvalidBeacon as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BeaconProxyErrors>] = &[
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconProxyErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BeaconProxyErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn ERC1967InvalidBeacon(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconProxyErrors> {
                        <ERC1967InvalidBeacon as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BeaconProxyErrors::ERC1967InvalidBeacon)
                    }
                    ERC1967InvalidBeacon
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconProxyErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BeaconProxyErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconProxyErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BeaconProxyErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn FailedCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BeaconProxyErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BeaconProxyErrors::FailedCall)
                    }
                    FailedCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidBeacon(inner) => {
                    <ERC1967InvalidBeacon as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidBeacon(inner) => {
                    <ERC1967InvalidBeacon as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`BeaconProxy`](self) events.
    pub enum BeaconProxyEvents {
        #[allow(missing_docs)]
        BeaconUpgraded(BeaconUpgraded),
    }
    #[automatically_derived]
    impl BeaconProxyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                28u8,
                243u8,
                176u8,
                58u8,
                108u8,
                241u8,
                159u8,
                162u8,
                186u8,
                186u8,
                77u8,
                241u8,
                72u8,
                233u8,
                220u8,
                171u8,
                237u8,
                234u8,
                127u8,
                138u8,
                92u8,
                7u8,
                132u8,
                14u8,
                32u8,
                126u8,
                92u8,
                8u8,
                155u8,
                233u8,
                93u8,
                62u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for BeaconProxyEvents {
        const NAME: &'static str = "BeaconProxyEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BeaconUpgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BeaconUpgraded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BeaconUpgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for BeaconProxyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BeaconUpgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BeaconUpgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BeaconProxy`](self) contract instance.

See the [wrapper's documentation](`BeaconProxyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BeaconProxyInstance<T, P, N> {
        BeaconProxyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        beacon: alloy::sol_types::private::Address,
        data: alloy::sol_types::private::Bytes,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BeaconProxyInstance<T, P, N>>,
    > {
        BeaconProxyInstance::<T, P, N>::deploy(provider, beacon, data)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        beacon: alloy::sol_types::private::Address,
        data: alloy::sol_types::private::Bytes,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BeaconProxyInstance::<T, P, N>::deploy_builder(provider, beacon, data)
    }
    /**A [`BeaconProxy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BeaconProxy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BeaconProxyInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BeaconProxyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BeaconProxyInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BeaconProxyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`BeaconProxy`](self) contract instance.

See the [wrapper's documentation](`BeaconProxyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            beacon: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::Result<BeaconProxyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, beacon, data);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            beacon: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { beacon, data },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BeaconProxyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BeaconProxyInstance<T, P, N> {
            BeaconProxyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BeaconProxyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BeaconProxyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BeaconUpgraded`] event.
        pub fn BeaconUpgraded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BeaconUpgraded, N> {
            self.event_filter::<BeaconUpgraded>()
        }
    }
}
