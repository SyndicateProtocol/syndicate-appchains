/**

Generated by the following Solidity interface...
```solidity
interface InitializeEmissionsV2 {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod InitializeEmissionsV2 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610b6f6101068239610b6f90f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c61066d565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b5f1c90565b90565b90565b61015661015161015b9261013c565b61013f565b61013c565b90565b61016a61016f91610137565b610142565b90565b60018060a01b031690565b61019161018c6101969261013c565b61013f565b610172565b90565b6101ad6101a86101b292610172565b61013f565b610172565b90565b6101be90610199565b90565b6101fa6101f56101f07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61015e565b61017d565b6101b5565b90565b61020690610199565b90565b610212906101fd565b90565b6102256102206101c1565b610209565b90565b610231906101b5565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061026090610238565b810190811067ffffffffffffffff82111761027a57604052565b610242565b60e01b90565b5f91031261028f57565b61004c565b61029c610042565b3d5f823e3d90fd5b6102ad90610172565b90565b6102b9816102a4565b036102c057565b5f80fd5b905051906102d1826102b0565b565b906020828203126102ec576102e9915f016102c4565b90565b61004c565b60209181520190565b5f7f43414c43554c41544f525f414444520000000000000000000000000000000000910152565b61032e600f6020926102f1565b610337816102fa565b0190565b6103509060208101905f818303910152610321565b90565b90565b61036a61036561036f92610353565b61013f565b610172565b90565b61037b90610356565b90565b5f7f43414c43554c41544f525f41444452206e6f7420736574000000000000000000910152565b6103b260176020926102f1565b6103bb8161037e565b0190565b6103d49060208101905f8183039101526103a5565b90565b156103de57565b6103e6610042565b62461bcd60e51b8152806103fc600482016103bf565b0390fd5b61040990610199565b90565b61041590610400565b90565b90565b61042f61042a61043492610418565b61013f565b61013c565b90565b9061044a610443610042565b9283610256565b565b67ffffffffffffffff811161046a57610466602091610238565b0190565b610242565b9061048161047c8361044c565b610437565b918252565b60207f756c7420646563617920666163746f723a000000000000000000000000000000917f496e697469616c697a696e6720656d697373696f6e73207769746820646566615f8201520152565b6104dd603161046f565b906104ea60208301610486565b565b6104f46104d3565b90565b610500906101b5565b90565b61050c9061013c565b9052565b9190610523905f60208501940190610503565b565b60207f6c79000000000000000000000000000000000000000000000000000000000000917f456d697373696f6e7320696e697469616c697a6564207375636365737366756c5f8201520152565b61057c602261046f565b9061058960208301610525565b565b610593610572565b90565b61059f8161013c565b036105a657565b5f80fd5b905051906105b782610596565b565b906020828203126105d2576105cf915f016105aa565b90565b61004c565b5f7f546f74616c2065706f6368733a00000000000000000000000000000000000000910152565b610608600d61046f565b90610615602083016105d7565b565b61061f6105fe565b90565b5f7f456d697373696f6e73206361703a000000000000000000000000000000000000910152565b610653600e61046f565b9061066060208301610622565b565b61066a610649565b90565b61067d610678610215565b610228565b637fb5297f90803b156109f8576106a0915f91610698610042565b93849261027f565b82528183816106b16004820161005f565b03925af180156109f3576109c7575b506106ec60206106d66106d1610215565b610228565b63350d56bf906106e4610042565b93849261027f565b825281806106fc6004820161033b565b03915afa80156109c25761073c915f91610994575b506107378161073061072a6107255f610372565b6102a4565b916102a4565b14156103d7565b61040c565b61074d670d2f13f7789f000061041b565b61075e816107596104ec565b610a63565b610767826104f7565b9063c63a094490823b1561098f5761079e926107935f8094610787610042565b9687958694859361027f565b835260048301610510565b03925af1801561098a5761095e575b506107be6107b961058b565b610abd565b6107e260206107cc836104f7565b635f15c3c9906107da610042565b93849261027f565b825281806107f26004820161005f565b03915afa80156109595761083a9261081f610824926020945f9161092c575b5061081a610617565b610a63565b6104f7565b63b198d02890610832610042565b93849261027f565b8252818061084a6004820161005f565b03915afa80156109275761086d915f916108f9575b50610868610662565b610a63565b61087d610878610215565b610228565b6376eadd3690803b156108f4576108a0915f91610898610042565b93849261027f565b82528183816108b16004820161005f565b03925af180156108ef576108c3575b50565b6108e2905f3d81116108e8575b6108da8183610256565b810190610285565b5f6108c0565b503d6108d0565b610294565b610234565b61091a915060203d8111610920575b6109128183610256565b8101906105b9565b5f61085f565b503d610908565b610294565b61094c9150853d8111610952575b6109448183610256565b8101906105b9565b5f610811565b503d61093a565b610294565b61097d905f3d8111610983575b6109758183610256565b810190610285565b5f6107ad565b503d61096b565b610294565b610234565b6109b5915060203d81116109bb575b6109ad8183610256565b8101906102d3565b5f610711565b503d6109a3565b610294565b6109e6905f3d81116109ec575b6109de8183610256565b810190610285565b5f6106c0565b503d6109d4565b610294565b610234565b5190565b90825f9392825e0152565b610a2b610a34602093610a3993610a22816109fd565b938480936102f1565b95869101610a01565b610238565b0190565b92916020610a59610a619360408701908782035f890152610a0c565b940190610503565b565b90610a9e610aa392610a8f610a76610042565b938492600460208501632d839cb360e21b815201610a3d565b60208201810382520382610256565b610afe565b565b610aba9160208201915f818403910152610a0c565b90565b610ae8610af7610afc92610acf610042565b92839160046020840163104c13eb60e21b815201610aa5565b60208201810382520382610256565b610afe565b565b610b1190610b0c6001610b3d565b610b5d565b565b6a636f6e736f6c652e6c6f6790565b5f8091610b2d610b13565b602082519201905afa50565b5f90565b610b45610b39565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610b4957610b6d90610b22565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x0Boa\x01\x06\x829a\x0Bo\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x06mV[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1C\x90V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\x01<V[a\x01?V[a\x01<V[\x90V[a\x01ja\x01o\x91a\x017V[a\x01BV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x91a\x01\x8Ca\x01\x96\x92a\x01<V[a\x01?V[a\x01rV[\x90V[a\x01\xADa\x01\xA8a\x01\xB2\x92a\x01rV[a\x01?V[a\x01rV[\x90V[a\x01\xBE\x90a\x01\x99V[\x90V[a\x01\xFAa\x01\xF5a\x01\xF0\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x01^V[a\x01}V[a\x01\xB5V[\x90V[a\x02\x06\x90a\x01\x99V[\x90V[a\x02\x12\x90a\x01\xFDV[\x90V[a\x02%a\x02 a\x01\xC1V[a\x02\tV[\x90V[a\x021\x90a\x01\xB5V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02`\x90a\x028V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02zW`@RV[a\x02BV[`\xE0\x1B\x90V[_\x91\x03\x12a\x02\x8FWV[a\0LV[a\x02\x9Ca\0BV[=_\x82>=\x90\xFD[a\x02\xAD\x90a\x01rV[\x90V[a\x02\xB9\x81a\x02\xA4V[\x03a\x02\xC0WV[_\x80\xFD[\x90PQ\x90a\x02\xD1\x82a\x02\xB0V[V[\x90` \x82\x82\x03\x12a\x02\xECWa\x02\xE9\x91_\x01a\x02\xC4V[\x90V[a\0LV[` \x91\x81R\x01\x90V[_\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03.`\x0F` \x92a\x02\xF1V[a\x037\x81a\x02\xFAV[\x01\x90V[a\x03P\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03!V[\x90V[\x90V[a\x03ja\x03ea\x03o\x92a\x03SV[a\x01?V[a\x01rV[\x90V[a\x03{\x90a\x03VV[\x90V[_\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\xB2`\x17` \x92a\x02\xF1V[a\x03\xBB\x81a\x03~V[\x01\x90V[a\x03\xD4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xA5V[\x90V[\x15a\x03\xDEWV[a\x03\xE6a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xFC`\x04\x82\x01a\x03\xBFV[\x03\x90\xFD[a\x04\t\x90a\x01\x99V[\x90V[a\x04\x15\x90a\x04\0V[\x90V[\x90V[a\x04/a\x04*a\x044\x92a\x04\x18V[a\x01?V[a\x01<V[\x90V[\x90a\x04Ja\x04Ca\0BV[\x92\x83a\x02VV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04jWa\x04f` \x91a\x028V[\x01\x90V[a\x02BV[\x90a\x04\x81a\x04|\x83a\x04LV[a\x047V[\x91\x82RV[` \x7Fult decay factor:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FInitializing emissions with defa_\x82\x01R\x01RV[a\x04\xDD`1a\x04oV[\x90a\x04\xEA` \x83\x01a\x04\x86V[V[a\x04\xF4a\x04\xD3V[\x90V[a\x05\0\x90a\x01\xB5V[\x90V[a\x05\x0C\x90a\x01<V[\x90RV[\x91\x90a\x05#\x90_` \x85\x01\x94\x01\x90a\x05\x03V[V[` \x7Fly\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FEmissions initialized successful_\x82\x01R\x01RV[a\x05|`\"a\x04oV[\x90a\x05\x89` \x83\x01a\x05%V[V[a\x05\x93a\x05rV[\x90V[a\x05\x9F\x81a\x01<V[\x03a\x05\xA6WV[_\x80\xFD[\x90PQ\x90a\x05\xB7\x82a\x05\x96V[V[\x90` \x82\x82\x03\x12a\x05\xD2Wa\x05\xCF\x91_\x01a\x05\xAAV[\x90V[a\0LV[_\x7FTotal epochs:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x08`\ra\x04oV[\x90a\x06\x15` \x83\x01a\x05\xD7V[V[a\x06\x1Fa\x05\xFEV[\x90V[_\x7FEmissions cap:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06S`\x0Ea\x04oV[\x90a\x06`` \x83\x01a\x06\"V[V[a\x06ja\x06IV[\x90V[a\x06}a\x06xa\x02\x15V[a\x02(V[c\x7F\xB5)\x7F\x90\x80;\x15a\t\xF8Wa\x06\xA0\x91_\x91a\x06\x98a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x83\x81a\x06\xB1`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\t\xF3Wa\t\xC7W[Pa\x06\xEC` a\x06\xD6a\x06\xD1a\x02\x15V[a\x02(V[c5\rV\xBF\x90a\x06\xE4a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x80a\x06\xFC`\x04\x82\x01a\x03;V[\x03\x91Z\xFA\x80\x15a\t\xC2Wa\x07<\x91_\x91a\t\x94W[Pa\x077\x81a\x070a\x07*a\x07%_a\x03rV[a\x02\xA4V[\x91a\x02\xA4V[\x14\x15a\x03\xD7V[a\x04\x0CV[a\x07Mg\r/\x13\xF7x\x9F\0\0a\x04\x1BV[a\x07^\x81a\x07Ya\x04\xECV[a\ncV[a\x07g\x82a\x04\xF7V[\x90c\xC6:\tD\x90\x82;\x15a\t\x8FWa\x07\x9E\x92a\x07\x93_\x80\x94a\x07\x87a\0BV[\x96\x87\x95\x86\x94\x85\x93a\x02\x7FV[\x83R`\x04\x83\x01a\x05\x10V[\x03\x92Z\xF1\x80\x15a\t\x8AWa\t^W[Pa\x07\xBEa\x07\xB9a\x05\x8BV[a\n\xBDV[a\x07\xE2` a\x07\xCC\x83a\x04\xF7V[c_\x15\xC3\xC9\x90a\x07\xDAa\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x80a\x07\xF2`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\tYWa\x08:\x92a\x08\x1Fa\x08$\x92` \x94_\x91a\t,W[Pa\x08\x1Aa\x06\x17V[a\ncV[a\x04\xF7V[c\xB1\x98\xD0(\x90a\x082a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x80a\x08J`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\t'Wa\x08m\x91_\x91a\x08\xF9W[Pa\x08ha\x06bV[a\ncV[a\x08}a\x08xa\x02\x15V[a\x02(V[cv\xEA\xDD6\x90\x80;\x15a\x08\xF4Wa\x08\xA0\x91_\x91a\x08\x98a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x83\x81a\x08\xB1`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x08\xEFWa\x08\xC3W[PV[a\x08\xE2\x90_=\x81\x11a\x08\xE8W[a\x08\xDA\x81\x83a\x02VV[\x81\x01\x90a\x02\x85V[_a\x08\xC0V[P=a\x08\xD0V[a\x02\x94V[a\x024V[a\t\x1A\x91P` =\x81\x11a\t W[a\t\x12\x81\x83a\x02VV[\x81\x01\x90a\x05\xB9V[_a\x08_V[P=a\t\x08V[a\x02\x94V[a\tL\x91P\x85=\x81\x11a\tRW[a\tD\x81\x83a\x02VV[\x81\x01\x90a\x05\xB9V[_a\x08\x11V[P=a\t:V[a\x02\x94V[a\t}\x90_=\x81\x11a\t\x83W[a\tu\x81\x83a\x02VV[\x81\x01\x90a\x02\x85V[_a\x07\xADV[P=a\tkV[a\x02\x94V[a\x024V[a\t\xB5\x91P` =\x81\x11a\t\xBBW[a\t\xAD\x81\x83a\x02VV[\x81\x01\x90a\x02\xD3V[_a\x07\x11V[P=a\t\xA3V[a\x02\x94V[a\t\xE6\x90_=\x81\x11a\t\xECW[a\t\xDE\x81\x83a\x02VV[\x81\x01\x90a\x02\x85V[_a\x06\xC0V[P=a\t\xD4V[a\x02\x94V[a\x024V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\n+a\n4` \x93a\n9\x93a\n\"\x81a\t\xFDV[\x93\x84\x80\x93a\x02\xF1V[\x95\x86\x91\x01a\n\x01V[a\x028V[\x01\x90V[\x92\x91` a\nYa\na\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\n\x0CV[\x94\x01\x90a\x05\x03V[V[\x90a\n\x9Ea\n\xA3\x92a\n\x8Fa\nva\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\n=V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n\xFEV[V[a\n\xBA\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\n\x0CV[\x90V[a\n\xE8a\n\xF7a\n\xFC\x92a\n\xCFa\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\n\xA5V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n\xFEV[V[a\x0B\x11\x90a\x0B\x0C`\x01a\x0B=V[a\x0B]V[V[jconsole.log\x90V[_\x80\x91a\x0B-a\x0B\x13V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x0BEa\x0B9V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x0BIWa\x0Bm\x90a\x0B\"V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c61066d565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b5f1c90565b90565b90565b61015661015161015b9261013c565b61013f565b61013c565b90565b61016a61016f91610137565b610142565b90565b60018060a01b031690565b61019161018c6101969261013c565b61013f565b610172565b90565b6101ad6101a86101b292610172565b61013f565b610172565b90565b6101be90610199565b90565b6101fa6101f56101f07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61015e565b61017d565b6101b5565b90565b61020690610199565b90565b610212906101fd565b90565b6102256102206101c1565b610209565b90565b610231906101b5565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061026090610238565b810190811067ffffffffffffffff82111761027a57604052565b610242565b60e01b90565b5f91031261028f57565b61004c565b61029c610042565b3d5f823e3d90fd5b6102ad90610172565b90565b6102b9816102a4565b036102c057565b5f80fd5b905051906102d1826102b0565b565b906020828203126102ec576102e9915f016102c4565b90565b61004c565b60209181520190565b5f7f43414c43554c41544f525f414444520000000000000000000000000000000000910152565b61032e600f6020926102f1565b610337816102fa565b0190565b6103509060208101905f818303910152610321565b90565b90565b61036a61036561036f92610353565b61013f565b610172565b90565b61037b90610356565b90565b5f7f43414c43554c41544f525f41444452206e6f7420736574000000000000000000910152565b6103b260176020926102f1565b6103bb8161037e565b0190565b6103d49060208101905f8183039101526103a5565b90565b156103de57565b6103e6610042565b62461bcd60e51b8152806103fc600482016103bf565b0390fd5b61040990610199565b90565b61041590610400565b90565b90565b61042f61042a61043492610418565b61013f565b61013c565b90565b9061044a610443610042565b9283610256565b565b67ffffffffffffffff811161046a57610466602091610238565b0190565b610242565b9061048161047c8361044c565b610437565b918252565b60207f756c7420646563617920666163746f723a000000000000000000000000000000917f496e697469616c697a696e6720656d697373696f6e73207769746820646566615f8201520152565b6104dd603161046f565b906104ea60208301610486565b565b6104f46104d3565b90565b610500906101b5565b90565b61050c9061013c565b9052565b9190610523905f60208501940190610503565b565b60207f6c79000000000000000000000000000000000000000000000000000000000000917f456d697373696f6e7320696e697469616c697a6564207375636365737366756c5f8201520152565b61057c602261046f565b9061058960208301610525565b565b610593610572565b90565b61059f8161013c565b036105a657565b5f80fd5b905051906105b782610596565b565b906020828203126105d2576105cf915f016105aa565b90565b61004c565b5f7f546f74616c2065706f6368733a00000000000000000000000000000000000000910152565b610608600d61046f565b90610615602083016105d7565b565b61061f6105fe565b90565b5f7f456d697373696f6e73206361703a000000000000000000000000000000000000910152565b610653600e61046f565b9061066060208301610622565b565b61066a610649565b90565b61067d610678610215565b610228565b637fb5297f90803b156109f8576106a0915f91610698610042565b93849261027f565b82528183816106b16004820161005f565b03925af180156109f3576109c7575b506106ec60206106d66106d1610215565b610228565b63350d56bf906106e4610042565b93849261027f565b825281806106fc6004820161033b565b03915afa80156109c25761073c915f91610994575b506107378161073061072a6107255f610372565b6102a4565b916102a4565b14156103d7565b61040c565b61074d670d2f13f7789f000061041b565b61075e816107596104ec565b610a63565b610767826104f7565b9063c63a094490823b1561098f5761079e926107935f8094610787610042565b9687958694859361027f565b835260048301610510565b03925af1801561098a5761095e575b506107be6107b961058b565b610abd565b6107e260206107cc836104f7565b635f15c3c9906107da610042565b93849261027f565b825281806107f26004820161005f565b03915afa80156109595761083a9261081f610824926020945f9161092c575b5061081a610617565b610a63565b6104f7565b63b198d02890610832610042565b93849261027f565b8252818061084a6004820161005f565b03915afa80156109275761086d915f916108f9575b50610868610662565b610a63565b61087d610878610215565b610228565b6376eadd3690803b156108f4576108a0915f91610898610042565b93849261027f565b82528183816108b16004820161005f565b03925af180156108ef576108c3575b50565b6108e2905f3d81116108e8575b6108da8183610256565b810190610285565b5f6108c0565b503d6108d0565b610294565b610234565b61091a915060203d8111610920575b6109128183610256565b8101906105b9565b5f61085f565b503d610908565b610294565b61094c9150853d8111610952575b6109448183610256565b8101906105b9565b5f610811565b503d61093a565b610294565b61097d905f3d8111610983575b6109758183610256565b810190610285565b5f6107ad565b503d61096b565b610294565b610234565b6109b5915060203d81116109bb575b6109ad8183610256565b8101906102d3565b5f610711565b503d6109a3565b610294565b6109e6905f3d81116109ec575b6109de8183610256565b810190610285565b5f6106c0565b503d6109d4565b610294565b610234565b5190565b90825f9392825e0152565b610a2b610a34602093610a3993610a22816109fd565b938480936102f1565b95869101610a01565b610238565b0190565b92916020610a59610a619360408701908782035f890152610a0c565b940190610503565b565b90610a9e610aa392610a8f610a76610042565b938492600460208501632d839cb360e21b815201610a3d565b60208201810382520382610256565b610afe565b565b610aba9160208201915f818403910152610a0c565b90565b610ae8610af7610afc92610acf610042565b92839160046020840163104c13eb60e21b815201610aa5565b60208201810382520382610256565b610afe565b565b610b1190610b0c6001610b3d565b610b5d565b565b6a636f6e736f6c652e6c6f6790565b5f8091610b2d610b13565b602082519201905afa50565b5f90565b610b45610b39565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610b4957610b6d90610b22565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x06mV[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1C\x90V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\x01<V[a\x01?V[a\x01<V[\x90V[a\x01ja\x01o\x91a\x017V[a\x01BV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x91a\x01\x8Ca\x01\x96\x92a\x01<V[a\x01?V[a\x01rV[\x90V[a\x01\xADa\x01\xA8a\x01\xB2\x92a\x01rV[a\x01?V[a\x01rV[\x90V[a\x01\xBE\x90a\x01\x99V[\x90V[a\x01\xFAa\x01\xF5a\x01\xF0\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x01^V[a\x01}V[a\x01\xB5V[\x90V[a\x02\x06\x90a\x01\x99V[\x90V[a\x02\x12\x90a\x01\xFDV[\x90V[a\x02%a\x02 a\x01\xC1V[a\x02\tV[\x90V[a\x021\x90a\x01\xB5V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02`\x90a\x028V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02zW`@RV[a\x02BV[`\xE0\x1B\x90V[_\x91\x03\x12a\x02\x8FWV[a\0LV[a\x02\x9Ca\0BV[=_\x82>=\x90\xFD[a\x02\xAD\x90a\x01rV[\x90V[a\x02\xB9\x81a\x02\xA4V[\x03a\x02\xC0WV[_\x80\xFD[\x90PQ\x90a\x02\xD1\x82a\x02\xB0V[V[\x90` \x82\x82\x03\x12a\x02\xECWa\x02\xE9\x91_\x01a\x02\xC4V[\x90V[a\0LV[` \x91\x81R\x01\x90V[_\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03.`\x0F` \x92a\x02\xF1V[a\x037\x81a\x02\xFAV[\x01\x90V[a\x03P\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03!V[\x90V[\x90V[a\x03ja\x03ea\x03o\x92a\x03SV[a\x01?V[a\x01rV[\x90V[a\x03{\x90a\x03VV[\x90V[_\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\xB2`\x17` \x92a\x02\xF1V[a\x03\xBB\x81a\x03~V[\x01\x90V[a\x03\xD4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xA5V[\x90V[\x15a\x03\xDEWV[a\x03\xE6a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xFC`\x04\x82\x01a\x03\xBFV[\x03\x90\xFD[a\x04\t\x90a\x01\x99V[\x90V[a\x04\x15\x90a\x04\0V[\x90V[\x90V[a\x04/a\x04*a\x044\x92a\x04\x18V[a\x01?V[a\x01<V[\x90V[\x90a\x04Ja\x04Ca\0BV[\x92\x83a\x02VV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04jWa\x04f` \x91a\x028V[\x01\x90V[a\x02BV[\x90a\x04\x81a\x04|\x83a\x04LV[a\x047V[\x91\x82RV[` \x7Fult decay factor:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FInitializing emissions with defa_\x82\x01R\x01RV[a\x04\xDD`1a\x04oV[\x90a\x04\xEA` \x83\x01a\x04\x86V[V[a\x04\xF4a\x04\xD3V[\x90V[a\x05\0\x90a\x01\xB5V[\x90V[a\x05\x0C\x90a\x01<V[\x90RV[\x91\x90a\x05#\x90_` \x85\x01\x94\x01\x90a\x05\x03V[V[` \x7Fly\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FEmissions initialized successful_\x82\x01R\x01RV[a\x05|`\"a\x04oV[\x90a\x05\x89` \x83\x01a\x05%V[V[a\x05\x93a\x05rV[\x90V[a\x05\x9F\x81a\x01<V[\x03a\x05\xA6WV[_\x80\xFD[\x90PQ\x90a\x05\xB7\x82a\x05\x96V[V[\x90` \x82\x82\x03\x12a\x05\xD2Wa\x05\xCF\x91_\x01a\x05\xAAV[\x90V[a\0LV[_\x7FTotal epochs:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x08`\ra\x04oV[\x90a\x06\x15` \x83\x01a\x05\xD7V[V[a\x06\x1Fa\x05\xFEV[\x90V[_\x7FEmissions cap:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06S`\x0Ea\x04oV[\x90a\x06`` \x83\x01a\x06\"V[V[a\x06ja\x06IV[\x90V[a\x06}a\x06xa\x02\x15V[a\x02(V[c\x7F\xB5)\x7F\x90\x80;\x15a\t\xF8Wa\x06\xA0\x91_\x91a\x06\x98a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x83\x81a\x06\xB1`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\t\xF3Wa\t\xC7W[Pa\x06\xEC` a\x06\xD6a\x06\xD1a\x02\x15V[a\x02(V[c5\rV\xBF\x90a\x06\xE4a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x80a\x06\xFC`\x04\x82\x01a\x03;V[\x03\x91Z\xFA\x80\x15a\t\xC2Wa\x07<\x91_\x91a\t\x94W[Pa\x077\x81a\x070a\x07*a\x07%_a\x03rV[a\x02\xA4V[\x91a\x02\xA4V[\x14\x15a\x03\xD7V[a\x04\x0CV[a\x07Mg\r/\x13\xF7x\x9F\0\0a\x04\x1BV[a\x07^\x81a\x07Ya\x04\xECV[a\ncV[a\x07g\x82a\x04\xF7V[\x90c\xC6:\tD\x90\x82;\x15a\t\x8FWa\x07\x9E\x92a\x07\x93_\x80\x94a\x07\x87a\0BV[\x96\x87\x95\x86\x94\x85\x93a\x02\x7FV[\x83R`\x04\x83\x01a\x05\x10V[\x03\x92Z\xF1\x80\x15a\t\x8AWa\t^W[Pa\x07\xBEa\x07\xB9a\x05\x8BV[a\n\xBDV[a\x07\xE2` a\x07\xCC\x83a\x04\xF7V[c_\x15\xC3\xC9\x90a\x07\xDAa\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x80a\x07\xF2`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\tYWa\x08:\x92a\x08\x1Fa\x08$\x92` \x94_\x91a\t,W[Pa\x08\x1Aa\x06\x17V[a\ncV[a\x04\xF7V[c\xB1\x98\xD0(\x90a\x082a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x80a\x08J`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\t'Wa\x08m\x91_\x91a\x08\xF9W[Pa\x08ha\x06bV[a\ncV[a\x08}a\x08xa\x02\x15V[a\x02(V[cv\xEA\xDD6\x90\x80;\x15a\x08\xF4Wa\x08\xA0\x91_\x91a\x08\x98a\0BV[\x93\x84\x92a\x02\x7FV[\x82R\x81\x83\x81a\x08\xB1`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x08\xEFWa\x08\xC3W[PV[a\x08\xE2\x90_=\x81\x11a\x08\xE8W[a\x08\xDA\x81\x83a\x02VV[\x81\x01\x90a\x02\x85V[_a\x08\xC0V[P=a\x08\xD0V[a\x02\x94V[a\x024V[a\t\x1A\x91P` =\x81\x11a\t W[a\t\x12\x81\x83a\x02VV[\x81\x01\x90a\x05\xB9V[_a\x08_V[P=a\t\x08V[a\x02\x94V[a\tL\x91P\x85=\x81\x11a\tRW[a\tD\x81\x83a\x02VV[\x81\x01\x90a\x05\xB9V[_a\x08\x11V[P=a\t:V[a\x02\x94V[a\t}\x90_=\x81\x11a\t\x83W[a\tu\x81\x83a\x02VV[\x81\x01\x90a\x02\x85V[_a\x07\xADV[P=a\tkV[a\x02\x94V[a\x024V[a\t\xB5\x91P` =\x81\x11a\t\xBBW[a\t\xAD\x81\x83a\x02VV[\x81\x01\x90a\x02\xD3V[_a\x07\x11V[P=a\t\xA3V[a\x02\x94V[a\t\xE6\x90_=\x81\x11a\t\xECW[a\t\xDE\x81\x83a\x02VV[\x81\x01\x90a\x02\x85V[_a\x06\xC0V[P=a\t\xD4V[a\x02\x94V[a\x024V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\n+a\n4` \x93a\n9\x93a\n\"\x81a\t\xFDV[\x93\x84\x80\x93a\x02\xF1V[\x95\x86\x91\x01a\n\x01V[a\x028V[\x01\x90V[\x92\x91` a\nYa\na\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\n\x0CV[\x94\x01\x90a\x05\x03V[V[\x90a\n\x9Ea\n\xA3\x92a\n\x8Fa\nva\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\n=V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n\xFEV[V[a\n\xBA\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\n\x0CV[\x90V[a\n\xE8a\n\xF7a\n\xFC\x92a\n\xCFa\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\n\xA5V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n\xFEV[V[a\x0B\x11\x90a\x0B\x0C`\x01a\x0B=V[a\x0B]V[V[jconsole.log\x90V[_\x80\x91a\x0B-a\x0B\x13V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x0BEa\x0B9V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x0BIWa\x0Bm\x90a\x0B\"V[V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`InitializeEmissionsV2`](self) function calls.
    pub enum InitializeEmissionsV2Calls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl InitializeEmissionsV2Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for InitializeEmissionsV2Calls {
        const NAME: &'static str = "InitializeEmissionsV2Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<InitializeEmissionsV2Calls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<InitializeEmissionsV2Calls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(InitializeEmissionsV2Calls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<InitializeEmissionsV2Calls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(InitializeEmissionsV2Calls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`InitializeEmissionsV2`](self) contract instance.

See the [wrapper's documentation](`InitializeEmissionsV2Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> InitializeEmissionsV2Instance<T, P, N> {
        InitializeEmissionsV2Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<InitializeEmissionsV2Instance<T, P, N>>,
    > {
        InitializeEmissionsV2Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        InitializeEmissionsV2Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`InitializeEmissionsV2`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`InitializeEmissionsV2`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct InitializeEmissionsV2Instance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for InitializeEmissionsV2Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("InitializeEmissionsV2Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > InitializeEmissionsV2Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`InitializeEmissionsV2`](self) contract instance.

See the [wrapper's documentation](`InitializeEmissionsV2Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<InitializeEmissionsV2Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> InitializeEmissionsV2Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> InitializeEmissionsV2Instance<T, P, N> {
            InitializeEmissionsV2Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > InitializeEmissionsV2Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > InitializeEmissionsV2Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
