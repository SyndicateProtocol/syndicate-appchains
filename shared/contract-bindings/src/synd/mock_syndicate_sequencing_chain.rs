/**

Generated by the following Solidity interface...
```solidity
interface MockSyndicateSequencingChain {
    function lastProcessedBulkData(uint256) external view returns (bytes memory);
    function lastProcessedData() external view returns (bytes memory);
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function setRevertFlag(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "lastProcessedBulkData",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastProcessedData",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setRevertFlag",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockSyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b610e0461002b8239610e0490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610668565b61001d5f3561008c565b8063381ba1401461008757806346e2cc09146100825780634a5b6b7e1461007d578063804e512314610078578063cdafb97814610073578063d3072d821461006e5763f352cd720361000e57610633565b6105f0565b61054c565b6104a3565b61046e565b6101a3565b6100ef565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b6100b2816100a4565b036100b957565b5f80fd5b905035906100ca826100a9565b565b906020828203126100e5576100e2915f016100bd565b90565b61009c565b5f0190565b3461011d576101076101023660046100cc565b6106b6565b61010f610092565b80610119816100ea565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101685781359167ffffffffffffffff831161016357602001926001830284011161015e57565b61012a565b610126565b610122565b9060208282031261019e575f82013567ffffffffffffffff811161019957610195920161012e565b9091565b6100a0565b61009c565b346101d2576101bc6101b636600461016d565b90610957565b6101c4610092565b806101ce816100ea565b0390f35b610098565b90565b6101e3816101d7565b036101ea57565b5f80fd5b905035906101fb826101da565b565b9060208282031261021657610213915f016101ee565b90565b61009c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6102458161022f565b82101561025f57610257600191610233565b910201905f90565b61021b565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156102ab575b60208310146102a657565b610277565b91607f169161029b565b60209181520190565b5f5260205f2090565b905f92918054906102e16102da8361028b565b80946102b5565b916001811690815f1461033857506001146102fc575b505050565b61030991929394506102be565b915f925b81841061032057505001905f80806102f7565b6001816020929593955484860152019101929061030d565b92949550505060ff19168252151560200201905f80806102f7565b9061035d916102c7565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061038890610360565b810190811067ffffffffffffffff8211176103a257604052565b61036a565b906103c76103c0926103b7610092565b93848092610353565b038361037e565b565b905f106103dc576103d9906103a7565b90565b610264565b60016103ec8161022f565b82101561040957610406916104009161023c565b906103c9565b90565b5f80fd5b5190565b60209181520190565b90825f9392825e0152565b61044461044d6020936104529361043b8161040d565b93848093610411565b9586910161041a565b610360565b0190565b61046b9160208201915f818403910152610425565b90565b3461049e5761049a6104896104843660046101fd565b6103e1565b610491610092565b91829182610456565b0390f35b610098565b346104d2576104bc6104b636600461016d565b90610994565b6104c4610092565b806104ce816100ea565b0390f35b610098565b909182601f830112156105115781359167ffffffffffffffff831161050c57602001926020830284011161050757565b61012a565b610126565b610122565b90602082820312610547575f82013567ffffffffffffffff81116105425761053e92016104d7565b9091565b6100a0565b61009c565b3461057b5761056561055f366004610516565b90610d67565b61056d610092565b80610577816100ea565b0390f35b610098565b5f91031261058a57565b61009c565b1c90565b60ff1690565b6105a99060086105ae930261058f565b610593565b90565b906105bc9154610599565b90565b6105cb60025f906105b1565b90565b6105d7906100a4565b9052565b91906105ee905f602085019401906105ce565b565b3461062057610600366004610580565b61061c61060b6105bf565b610613610092565b918291826105db565b0390f35b610098565b6106305f5f906103c9565b90565b3461066357610643366004610580565b61065f61064e610625565b610656610092565b91829182610456565b0390f35b610098565b5f80fd5b5f1b90565b9061067d60ff9161066c565b9181191691161790565b610690906100a4565b90565b90565b906106ab6106a66106b292610687565b610693565b8254610671565b9055565b6106c1906002610696565b565b5f1c90565b6106d46106d9916106c3565b610593565b90565b6106e690546106c8565b90565b60209181520190565b5f7f53657175656e636572206572726f720000000000000000000000000000000000910152565b610726600f6020926106e9565b61072f816106f2565b0190565b6107489060208101905f818303910152610719565b90565b5090565b601f602091010490565b1b90565b919060086107789102916107725f1984610759565b92610759565b9181191691161790565b90565b61079961079461079e926101d7565b610782565b6101d7565b90565b90565b91906107ba6107b56107c293610785565b6107a1565b90835461075d565b9055565b5f90565b6107dc916107d66107c6565b916107a4565b565b5b8181106107ea575050565b806107f75f6001936107ca565b016107df565b9190601f811161080d575b505050565b61081961083e936102be565b9060206108258461074f565b83019310610846575b6108379061074f565b01906107de565b5f8080610808565b91506108378192905061082e565b90610864905f199060080261058f565b191690565b8161087391610854565b906002021790565b91610886908261074b565b9067ffffffffffffffff8211610945576108aa826108a4855461028b565b856107fd565b5f90601f83116001146108dd579180916108cc935f926108d1575b5050610869565b90555b565b90915001355f806108c5565b601f198316916108ec856102be565b925f5b81811061092d57509160029391856001969410610913575b505050020190556108cf565b610923910135601f841690610854565b90555f8080610907565b919360206001819287870135815501950192016108ef565b61036a565b90610955929161087b565b565b9061096260026106dc565b61097257610970915f61094a565b565b61097a610092565b62461bcd60e51b81528061099060048201610733565b0390fd5b9061099f60026106dc565b6109af576109ad915f61094a565b565b6109b7610092565b62461bcd60e51b8152806109cd60048201610733565b0390fd5b600190818003010490565b906109ef905f199060200360080261058f565b8154169055565b905f91610a0d610a05826102be565b928354610869565b905555565b919290602082105f14610a6b57601f8411600114610a3b57610a35929350610869565b90555b5b565b5090610a61610a66936001610a58610a52856102be565b9261074f565b820191016107de565b6109f6565b610a38565b50610aa28293610a7c6001946102be565b610a9b610a888561074f565b820192601f861680610aad575b5061074f565b01906107de565b600202179055610a39565b610ab9908886036109dc565b5f610a95565b929091680100000000000000008211610b1f576020115f14610b1057602081105f14610af457610aee91610869565b90555b5b565b60019160ff1916610b04846102be565b55600202019055610af1565b60019150600202019055610af2565b61036a565b908154610b308161028b565b90818311610b59575b818310610b47575b50505050565b610b5093610a12565b5f808080610b41565b610b6583838387610abf565b610b39565b5f610b7491610b24565b565b905f03610b8857610b8690610b6a565b565b610264565b5b818110610b99575050565b80610ba65f600193610b76565b01610b8e565b9091828110610bbb575b505050565b610bd9610bd3610bcd610be4956109d1565b926109d1565b92610233565b918201910190610b8d565b5f8080610bb6565b90680100000000000000008111610c155781610c0a610c139361022f565b90828155610bac565b565b61036a565b5f610c2491610bec565b565b905f03610c3857610c3690610c1a565b565b610264565b90565b610c54610c4f610c5992610c3d565b610782565b6101d7565b90565b6001610c6891016101d7565b90565b5090565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610cc0570180359067ffffffffffffffff8211610cbb57602001916001820236038313610cb657565b610c7a565b610c76565b610c72565b90821015610ce0576020610cdc9202810190610c7e565b9091565b61021b565b5f5260205f2090565b5490565b610cfb81610cee565b821015610d1557610d0d600191610ce5565b910201905f90565b61021b565b929190610d2c57610d2a9261087b565b565b610264565b919082549268010000000000000000841015610d625783610d5a916001610d6096018155610cf2565b90610d1a565b565b61036a565b9190610d7360026106dc565b610de257610d825f6001610c26565b610d8b5f610c40565b5b80610da9610da3610d9e878690610c6b565b6101d7565b916101d7565b1015610ddc57610dd790610dd2610dc06001610c6f565b610dcc87868591610cc5565b91610d31565b610c5c565b610d8c565b50509050565b610dea610092565b62461bcd60e51b815280610e0060048201610733565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x0E\x04a\0+\x829a\x0E\x04\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x06hV[a\0\x1D_5a\0\x8CV[\x80c8\x1B\xA1@\x14a\0\x87W\x80cF\xE2\xCC\t\x14a\0\x82W\x80cJ[k~\x14a\0}W\x80c\x80NQ#\x14a\0xW\x80c\xCD\xAF\xB9x\x14a\0sW\x80c\xD3\x07-\x82\x14a\0nWc\xF3R\xCDr\x03a\0\x0EWa\x063V[a\x05\xF0V[a\x05LV[a\x04\xA3V[a\x04nV[a\x01\xA3V[a\0\xEFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0\xB2\x81a\0\xA4V[\x03a\0\xB9WV[_\x80\xFD[\x90P5\x90a\0\xCA\x82a\0\xA9V[V[\x90` \x82\x82\x03\x12a\0\xE5Wa\0\xE2\x91_\x01a\0\xBDV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01\x1DWa\x01\x07a\x01\x026`\x04a\0\xCCV[a\x06\xB6V[a\x01\x0Fa\0\x92V[\x80a\x01\x19\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01hW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01cW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01^WV[a\x01*V[a\x01&V[a\x01\"V[\x90` \x82\x82\x03\x12a\x01\x9EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x99Wa\x01\x95\x92\x01a\x01.V[\x90\x91V[a\0\xA0V[a\0\x9CV[4a\x01\xD2Wa\x01\xBCa\x01\xB66`\x04a\x01mV[\x90a\tWV[a\x01\xC4a\0\x92V[\x80a\x01\xCE\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[\x90V[a\x01\xE3\x81a\x01\xD7V[\x03a\x01\xEAWV[_\x80\xFD[\x90P5\x90a\x01\xFB\x82a\x01\xDAV[V[\x90` \x82\x82\x03\x12a\x02\x16Wa\x02\x13\x91_\x01a\x01\xEEV[\x90V[a\0\x9CV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x02E\x81a\x02/V[\x82\x10\x15a\x02_Wa\x02W`\x01\x91a\x023V[\x91\x02\x01\x90_\x90V[a\x02\x1BV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x02\xABW[` \x83\x10\x14a\x02\xA6WV[a\x02wV[\x91`\x7F\x16\x91a\x02\x9BV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x02\xE1a\x02\xDA\x83a\x02\x8BV[\x80\x94a\x02\xB5V[\x91`\x01\x81\x16\x90\x81_\x14a\x038WP`\x01\x14a\x02\xFCW[PPPV[a\x03\t\x91\x92\x93\x94Pa\x02\xBEV[\x91_\x92[\x81\x84\x10a\x03 WPP\x01\x90_\x80\x80a\x02\xF7V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x03\rV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\xF7V[\x90a\x03]\x91a\x02\xC7V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x88\x90a\x03`V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xA2W`@RV[a\x03jV[\x90a\x03\xC7a\x03\xC0\x92a\x03\xB7a\0\x92V[\x93\x84\x80\x92a\x03SV[\x03\x83a\x03~V[V[\x90_\x10a\x03\xDCWa\x03\xD9\x90a\x03\xA7V[\x90V[a\x02dV[`\x01a\x03\xEC\x81a\x02/V[\x82\x10\x15a\x04\tWa\x04\x06\x91a\x04\0\x91a\x02<V[\x90a\x03\xC9V[\x90V[_\x80\xFD[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x04Da\x04M` \x93a\x04R\x93a\x04;\x81a\x04\rV[\x93\x84\x80\x93a\x04\x11V[\x95\x86\x91\x01a\x04\x1AV[a\x03`V[\x01\x90V[a\x04k\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04%V[\x90V[4a\x04\x9EWa\x04\x9Aa\x04\x89a\x04\x846`\x04a\x01\xFDV[a\x03\xE1V[a\x04\x91a\0\x92V[\x91\x82\x91\x82a\x04VV[\x03\x90\xF3[a\0\x98V[4a\x04\xD2Wa\x04\xBCa\x04\xB66`\x04a\x01mV[\x90a\t\x94V[a\x04\xC4a\0\x92V[\x80a\x04\xCE\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x11W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x0CW` \x01\x92` \x83\x02\x84\x01\x11a\x05\x07WV[a\x01*V[a\x01&V[a\x01\"V[\x90` \x82\x82\x03\x12a\x05GW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05BWa\x05>\x92\x01a\x04\xD7V[\x90\x91V[a\0\xA0V[a\0\x9CV[4a\x05{Wa\x05ea\x05_6`\x04a\x05\x16V[\x90a\rgV[a\x05ma\0\x92V[\x80a\x05w\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x05\x8AWV[a\0\x9CV[\x1C\x90V[`\xFF\x16\x90V[a\x05\xA9\x90`\x08a\x05\xAE\x93\x02a\x05\x8FV[a\x05\x93V[\x90V[\x90a\x05\xBC\x91Ta\x05\x99V[\x90V[a\x05\xCB`\x02_\x90a\x05\xB1V[\x90V[a\x05\xD7\x90a\0\xA4V[\x90RV[\x91\x90a\x05\xEE\x90_` \x85\x01\x94\x01\x90a\x05\xCEV[V[4a\x06 Wa\x06\x006`\x04a\x05\x80V[a\x06\x1Ca\x06\x0Ba\x05\xBFV[a\x06\x13a\0\x92V[\x91\x82\x91\x82a\x05\xDBV[\x03\x90\xF3[a\0\x98V[a\x060__\x90a\x03\xC9V[\x90V[4a\x06cWa\x06C6`\x04a\x05\x80V[a\x06_a\x06Na\x06%V[a\x06Va\0\x92V[\x91\x82\x91\x82a\x04VV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x1B\x90V[\x90a\x06}`\xFF\x91a\x06lV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06\x90\x90a\0\xA4V[\x90V[\x90V[\x90a\x06\xABa\x06\xA6a\x06\xB2\x92a\x06\x87V[a\x06\x93V[\x82Ta\x06qV[\x90UV[a\x06\xC1\x90`\x02a\x06\x96V[V[_\x1C\x90V[a\x06\xD4a\x06\xD9\x91a\x06\xC3V[a\x05\x93V[\x90V[a\x06\xE6\x90Ta\x06\xC8V[\x90V[` \x91\x81R\x01\x90V[_\x7FSequencer error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07&`\x0F` \x92a\x06\xE9V[a\x07/\x81a\x06\xF2V[\x01\x90V[a\x07H\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\x19V[\x90V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x07x\x91\x02\x91a\x07r_\x19\x84a\x07YV[\x92a\x07YV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x07\x99a\x07\x94a\x07\x9E\x92a\x01\xD7V[a\x07\x82V[a\x01\xD7V[\x90V[\x90V[\x91\x90a\x07\xBAa\x07\xB5a\x07\xC2\x93a\x07\x85V[a\x07\xA1V[\x90\x83Ta\x07]V[\x90UV[_\x90V[a\x07\xDC\x91a\x07\xD6a\x07\xC6V[\x91a\x07\xA4V[V[[\x81\x81\x10a\x07\xEAWPPV[\x80a\x07\xF7_`\x01\x93a\x07\xCAV[\x01a\x07\xDFV[\x91\x90`\x1F\x81\x11a\x08\rW[PPPV[a\x08\x19a\x08>\x93a\x02\xBEV[\x90` a\x08%\x84a\x07OV[\x83\x01\x93\x10a\x08FW[a\x087\x90a\x07OV[\x01\x90a\x07\xDEV[_\x80\x80a\x08\x08V[\x91Pa\x087\x81\x92\x90Pa\x08.V[\x90a\x08d\x90_\x19\x90`\x08\x02a\x05\x8FV[\x19\x16\x90V[\x81a\x08s\x91a\x08TV[\x90`\x02\x02\x17\x90V[\x91a\x08\x86\x90\x82a\x07KV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\tEWa\x08\xAA\x82a\x08\xA4\x85Ta\x02\x8BV[\x85a\x07\xFDV[_\x90`\x1F\x83\x11`\x01\x14a\x08\xDDW\x91\x80\x91a\x08\xCC\x93_\x92a\x08\xD1W[PPa\x08iV[\x90U[V[\x90\x91P\x015_\x80a\x08\xC5V[`\x1F\x19\x83\x16\x91a\x08\xEC\x85a\x02\xBEV[\x92_[\x81\x81\x10a\t-WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\t\x13W[PPP\x02\x01\x90Ua\x08\xCFV[a\t#\x91\x015`\x1F\x84\x16\x90a\x08TV[\x90U_\x80\x80a\t\x07V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x08\xEFV[a\x03jV[\x90a\tU\x92\x91a\x08{V[V[\x90a\tb`\x02a\x06\xDCV[a\trWa\tp\x91_a\tJV[V[a\tza\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\x90`\x04\x82\x01a\x073V[\x03\x90\xFD[\x90a\t\x9F`\x02a\x06\xDCV[a\t\xAFWa\t\xAD\x91_a\tJV[V[a\t\xB7a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xCD`\x04\x82\x01a\x073V[\x03\x90\xFD[`\x01\x90\x81\x80\x03\x01\x04\x90V[\x90a\t\xEF\x90_\x19\x90` \x03`\x08\x02a\x05\x8FV[\x81T\x16\x90UV[\x90_\x91a\n\ra\n\x05\x82a\x02\xBEV[\x92\x83Ta\x08iV[\x90UUV[\x91\x92\x90` \x82\x10_\x14a\nkW`\x1F\x84\x11`\x01\x14a\n;Wa\n5\x92\x93Pa\x08iV[\x90U[[V[P\x90a\naa\nf\x93`\x01a\nXa\nR\x85a\x02\xBEV[\x92a\x07OV[\x82\x01\x91\x01a\x07\xDEV[a\t\xF6V[a\n8V[Pa\n\xA2\x82\x93a\n|`\x01\x94a\x02\xBEV[a\n\x9Ba\n\x88\x85a\x07OV[\x82\x01\x92`\x1F\x86\x16\x80a\n\xADW[Pa\x07OV[\x01\x90a\x07\xDEV[`\x02\x02\x17\x90Ua\n9V[a\n\xB9\x90\x88\x86\x03a\t\xDCV[_a\n\x95V[\x92\x90\x91h\x01\0\0\0\0\0\0\0\0\x82\x11a\x0B\x1FW` \x11_\x14a\x0B\x10W` \x81\x10_\x14a\n\xF4Wa\n\xEE\x91a\x08iV[\x90U[[V[`\x01\x91`\xFF\x19\x16a\x0B\x04\x84a\x02\xBEV[U`\x02\x02\x01\x90Ua\n\xF1V[`\x01\x91P`\x02\x02\x01\x90Ua\n\xF2V[a\x03jV[\x90\x81Ta\x0B0\x81a\x02\x8BV[\x90\x81\x83\x11a\x0BYW[\x81\x83\x10a\x0BGW[PPPPV[a\x0BP\x93a\n\x12V[_\x80\x80\x80a\x0BAV[a\x0Be\x83\x83\x83\x87a\n\xBFV[a\x0B9V[_a\x0Bt\x91a\x0B$V[V[\x90_\x03a\x0B\x88Wa\x0B\x86\x90a\x0BjV[V[a\x02dV[[\x81\x81\x10a\x0B\x99WPPV[\x80a\x0B\xA6_`\x01\x93a\x0BvV[\x01a\x0B\x8EV[\x90\x91\x82\x81\x10a\x0B\xBBW[PPPV[a\x0B\xD9a\x0B\xD3a\x0B\xCDa\x0B\xE4\x95a\t\xD1V[\x92a\t\xD1V[\x92a\x023V[\x91\x82\x01\x91\x01\x90a\x0B\x8DV[_\x80\x80a\x0B\xB6V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x0C\x15W\x81a\x0C\na\x0C\x13\x93a\x02/V[\x90\x82\x81Ua\x0B\xACV[V[a\x03jV[_a\x0C$\x91a\x0B\xECV[V[\x90_\x03a\x0C8Wa\x0C6\x90a\x0C\x1AV[V[a\x02dV[\x90V[a\x0CTa\x0COa\x0CY\x92a\x0C=V[a\x07\x82V[a\x01\xD7V[\x90V[`\x01a\x0Ch\x91\x01a\x01\xD7V[\x90V[P\x90V[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0C\xC0W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0C\xBBW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0C\xB6WV[a\x0CzV[a\x0CvV[a\x0CrV[\x90\x82\x10\x15a\x0C\xE0W` a\x0C\xDC\x92\x02\x81\x01\x90a\x0C~V[\x90\x91V[a\x02\x1BV[_R` _ \x90V[T\x90V[a\x0C\xFB\x81a\x0C\xEEV[\x82\x10\x15a\r\x15Wa\r\r`\x01\x91a\x0C\xE5V[\x91\x02\x01\x90_\x90V[a\x02\x1BV[\x92\x91\x90a\r,Wa\r*\x92a\x08{V[V[a\x02dV[\x91\x90\x82T\x92h\x01\0\0\0\0\0\0\0\0\x84\x10\x15a\rbW\x83a\rZ\x91`\x01a\r`\x96\x01\x81Ua\x0C\xF2V[\x90a\r\x1AV[V[a\x03jV[\x91\x90a\rs`\x02a\x06\xDCV[a\r\xE2Wa\r\x82_`\x01a\x0C&V[a\r\x8B_a\x0C@V[[\x80a\r\xA9a\r\xA3a\r\x9E\x87\x86\x90a\x0CkV[a\x01\xD7V[\x91a\x01\xD7V[\x10\x15a\r\xDCWa\r\xD7\x90a\r\xD2a\r\xC0`\x01a\x0CoV[a\r\xCC\x87\x86\x85\x91a\x0C\xC5V[\x91a\r1V[a\x0C\\V[a\r\x8CV[PP\x90PV[a\r\xEAa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\0`\x04\x82\x01a\x073V[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610668565b61001d5f3561008c565b8063381ba1401461008757806346e2cc09146100825780634a5b6b7e1461007d578063804e512314610078578063cdafb97814610073578063d3072d821461006e5763f352cd720361000e57610633565b6105f0565b61054c565b6104a3565b61046e565b6101a3565b6100ef565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b6100b2816100a4565b036100b957565b5f80fd5b905035906100ca826100a9565b565b906020828203126100e5576100e2915f016100bd565b90565b61009c565b5f0190565b3461011d576101076101023660046100cc565b6106b6565b61010f610092565b80610119816100ea565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101685781359167ffffffffffffffff831161016357602001926001830284011161015e57565b61012a565b610126565b610122565b9060208282031261019e575f82013567ffffffffffffffff811161019957610195920161012e565b9091565b6100a0565b61009c565b346101d2576101bc6101b636600461016d565b90610957565b6101c4610092565b806101ce816100ea565b0390f35b610098565b90565b6101e3816101d7565b036101ea57565b5f80fd5b905035906101fb826101da565b565b9060208282031261021657610213915f016101ee565b90565b61009c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6102458161022f565b82101561025f57610257600191610233565b910201905f90565b61021b565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156102ab575b60208310146102a657565b610277565b91607f169161029b565b60209181520190565b5f5260205f2090565b905f92918054906102e16102da8361028b565b80946102b5565b916001811690815f1461033857506001146102fc575b505050565b61030991929394506102be565b915f925b81841061032057505001905f80806102f7565b6001816020929593955484860152019101929061030d565b92949550505060ff19168252151560200201905f80806102f7565b9061035d916102c7565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061038890610360565b810190811067ffffffffffffffff8211176103a257604052565b61036a565b906103c76103c0926103b7610092565b93848092610353565b038361037e565b565b905f106103dc576103d9906103a7565b90565b610264565b60016103ec8161022f565b82101561040957610406916104009161023c565b906103c9565b90565b5f80fd5b5190565b60209181520190565b90825f9392825e0152565b61044461044d6020936104529361043b8161040d565b93848093610411565b9586910161041a565b610360565b0190565b61046b9160208201915f818403910152610425565b90565b3461049e5761049a6104896104843660046101fd565b6103e1565b610491610092565b91829182610456565b0390f35b610098565b346104d2576104bc6104b636600461016d565b90610994565b6104c4610092565b806104ce816100ea565b0390f35b610098565b909182601f830112156105115781359167ffffffffffffffff831161050c57602001926020830284011161050757565b61012a565b610126565b610122565b90602082820312610547575f82013567ffffffffffffffff81116105425761053e92016104d7565b9091565b6100a0565b61009c565b3461057b5761056561055f366004610516565b90610d67565b61056d610092565b80610577816100ea565b0390f35b610098565b5f91031261058a57565b61009c565b1c90565b60ff1690565b6105a99060086105ae930261058f565b610593565b90565b906105bc9154610599565b90565b6105cb60025f906105b1565b90565b6105d7906100a4565b9052565b91906105ee905f602085019401906105ce565b565b3461062057610600366004610580565b61061c61060b6105bf565b610613610092565b918291826105db565b0390f35b610098565b6106305f5f906103c9565b90565b3461066357610643366004610580565b61065f61064e610625565b610656610092565b91829182610456565b0390f35b610098565b5f80fd5b5f1b90565b9061067d60ff9161066c565b9181191691161790565b610690906100a4565b90565b90565b906106ab6106a66106b292610687565b610693565b8254610671565b9055565b6106c1906002610696565b565b5f1c90565b6106d46106d9916106c3565b610593565b90565b6106e690546106c8565b90565b60209181520190565b5f7f53657175656e636572206572726f720000000000000000000000000000000000910152565b610726600f6020926106e9565b61072f816106f2565b0190565b6107489060208101905f818303910152610719565b90565b5090565b601f602091010490565b1b90565b919060086107789102916107725f1984610759565b92610759565b9181191691161790565b90565b61079961079461079e926101d7565b610782565b6101d7565b90565b90565b91906107ba6107b56107c293610785565b6107a1565b90835461075d565b9055565b5f90565b6107dc916107d66107c6565b916107a4565b565b5b8181106107ea575050565b806107f75f6001936107ca565b016107df565b9190601f811161080d575b505050565b61081961083e936102be565b9060206108258461074f565b83019310610846575b6108379061074f565b01906107de565b5f8080610808565b91506108378192905061082e565b90610864905f199060080261058f565b191690565b8161087391610854565b906002021790565b91610886908261074b565b9067ffffffffffffffff8211610945576108aa826108a4855461028b565b856107fd565b5f90601f83116001146108dd579180916108cc935f926108d1575b5050610869565b90555b565b90915001355f806108c5565b601f198316916108ec856102be565b925f5b81811061092d57509160029391856001969410610913575b505050020190556108cf565b610923910135601f841690610854565b90555f8080610907565b919360206001819287870135815501950192016108ef565b61036a565b90610955929161087b565b565b9061096260026106dc565b61097257610970915f61094a565b565b61097a610092565b62461bcd60e51b81528061099060048201610733565b0390fd5b9061099f60026106dc565b6109af576109ad915f61094a565b565b6109b7610092565b62461bcd60e51b8152806109cd60048201610733565b0390fd5b600190818003010490565b906109ef905f199060200360080261058f565b8154169055565b905f91610a0d610a05826102be565b928354610869565b905555565b919290602082105f14610a6b57601f8411600114610a3b57610a35929350610869565b90555b5b565b5090610a61610a66936001610a58610a52856102be565b9261074f565b820191016107de565b6109f6565b610a38565b50610aa28293610a7c6001946102be565b610a9b610a888561074f565b820192601f861680610aad575b5061074f565b01906107de565b600202179055610a39565b610ab9908886036109dc565b5f610a95565b929091680100000000000000008211610b1f576020115f14610b1057602081105f14610af457610aee91610869565b90555b5b565b60019160ff1916610b04846102be565b55600202019055610af1565b60019150600202019055610af2565b61036a565b908154610b308161028b565b90818311610b59575b818310610b47575b50505050565b610b5093610a12565b5f808080610b41565b610b6583838387610abf565b610b39565b5f610b7491610b24565b565b905f03610b8857610b8690610b6a565b565b610264565b5b818110610b99575050565b80610ba65f600193610b76565b01610b8e565b9091828110610bbb575b505050565b610bd9610bd3610bcd610be4956109d1565b926109d1565b92610233565b918201910190610b8d565b5f8080610bb6565b90680100000000000000008111610c155781610c0a610c139361022f565b90828155610bac565b565b61036a565b5f610c2491610bec565b565b905f03610c3857610c3690610c1a565b565b610264565b90565b610c54610c4f610c5992610c3d565b610782565b6101d7565b90565b6001610c6891016101d7565b90565b5090565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610cc0570180359067ffffffffffffffff8211610cbb57602001916001820236038313610cb657565b610c7a565b610c76565b610c72565b90821015610ce0576020610cdc9202810190610c7e565b9091565b61021b565b5f5260205f2090565b5490565b610cfb81610cee565b821015610d1557610d0d600191610ce5565b910201905f90565b61021b565b929190610d2c57610d2a9261087b565b565b610264565b919082549268010000000000000000841015610d625783610d5a916001610d6096018155610cf2565b90610d1a565b565b61036a565b9190610d7360026106dc565b610de257610d825f6001610c26565b610d8b5f610c40565b5b80610da9610da3610d9e878690610c6b565b6101d7565b916101d7565b1015610ddc57610dd790610dd2610dc06001610c6f565b610dcc87868591610cc5565b91610d31565b610c5c565b610d8c565b50509050565b610dea610092565b62461bcd60e51b815280610e0060048201610733565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x06hV[a\0\x1D_5a\0\x8CV[\x80c8\x1B\xA1@\x14a\0\x87W\x80cF\xE2\xCC\t\x14a\0\x82W\x80cJ[k~\x14a\0}W\x80c\x80NQ#\x14a\0xW\x80c\xCD\xAF\xB9x\x14a\0sW\x80c\xD3\x07-\x82\x14a\0nWc\xF3R\xCDr\x03a\0\x0EWa\x063V[a\x05\xF0V[a\x05LV[a\x04\xA3V[a\x04nV[a\x01\xA3V[a\0\xEFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0\xB2\x81a\0\xA4V[\x03a\0\xB9WV[_\x80\xFD[\x90P5\x90a\0\xCA\x82a\0\xA9V[V[\x90` \x82\x82\x03\x12a\0\xE5Wa\0\xE2\x91_\x01a\0\xBDV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01\x1DWa\x01\x07a\x01\x026`\x04a\0\xCCV[a\x06\xB6V[a\x01\x0Fa\0\x92V[\x80a\x01\x19\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01hW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01cW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01^WV[a\x01*V[a\x01&V[a\x01\"V[\x90` \x82\x82\x03\x12a\x01\x9EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x99Wa\x01\x95\x92\x01a\x01.V[\x90\x91V[a\0\xA0V[a\0\x9CV[4a\x01\xD2Wa\x01\xBCa\x01\xB66`\x04a\x01mV[\x90a\tWV[a\x01\xC4a\0\x92V[\x80a\x01\xCE\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[\x90V[a\x01\xE3\x81a\x01\xD7V[\x03a\x01\xEAWV[_\x80\xFD[\x90P5\x90a\x01\xFB\x82a\x01\xDAV[V[\x90` \x82\x82\x03\x12a\x02\x16Wa\x02\x13\x91_\x01a\x01\xEEV[\x90V[a\0\x9CV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x02E\x81a\x02/V[\x82\x10\x15a\x02_Wa\x02W`\x01\x91a\x023V[\x91\x02\x01\x90_\x90V[a\x02\x1BV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x02\xABW[` \x83\x10\x14a\x02\xA6WV[a\x02wV[\x91`\x7F\x16\x91a\x02\x9BV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x02\xE1a\x02\xDA\x83a\x02\x8BV[\x80\x94a\x02\xB5V[\x91`\x01\x81\x16\x90\x81_\x14a\x038WP`\x01\x14a\x02\xFCW[PPPV[a\x03\t\x91\x92\x93\x94Pa\x02\xBEV[\x91_\x92[\x81\x84\x10a\x03 WPP\x01\x90_\x80\x80a\x02\xF7V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x03\rV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\xF7V[\x90a\x03]\x91a\x02\xC7V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x88\x90a\x03`V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xA2W`@RV[a\x03jV[\x90a\x03\xC7a\x03\xC0\x92a\x03\xB7a\0\x92V[\x93\x84\x80\x92a\x03SV[\x03\x83a\x03~V[V[\x90_\x10a\x03\xDCWa\x03\xD9\x90a\x03\xA7V[\x90V[a\x02dV[`\x01a\x03\xEC\x81a\x02/V[\x82\x10\x15a\x04\tWa\x04\x06\x91a\x04\0\x91a\x02<V[\x90a\x03\xC9V[\x90V[_\x80\xFD[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x04Da\x04M` \x93a\x04R\x93a\x04;\x81a\x04\rV[\x93\x84\x80\x93a\x04\x11V[\x95\x86\x91\x01a\x04\x1AV[a\x03`V[\x01\x90V[a\x04k\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04%V[\x90V[4a\x04\x9EWa\x04\x9Aa\x04\x89a\x04\x846`\x04a\x01\xFDV[a\x03\xE1V[a\x04\x91a\0\x92V[\x91\x82\x91\x82a\x04VV[\x03\x90\xF3[a\0\x98V[4a\x04\xD2Wa\x04\xBCa\x04\xB66`\x04a\x01mV[\x90a\t\x94V[a\x04\xC4a\0\x92V[\x80a\x04\xCE\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x11W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x0CW` \x01\x92` \x83\x02\x84\x01\x11a\x05\x07WV[a\x01*V[a\x01&V[a\x01\"V[\x90` \x82\x82\x03\x12a\x05GW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05BWa\x05>\x92\x01a\x04\xD7V[\x90\x91V[a\0\xA0V[a\0\x9CV[4a\x05{Wa\x05ea\x05_6`\x04a\x05\x16V[\x90a\rgV[a\x05ma\0\x92V[\x80a\x05w\x81a\0\xEAV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x05\x8AWV[a\0\x9CV[\x1C\x90V[`\xFF\x16\x90V[a\x05\xA9\x90`\x08a\x05\xAE\x93\x02a\x05\x8FV[a\x05\x93V[\x90V[\x90a\x05\xBC\x91Ta\x05\x99V[\x90V[a\x05\xCB`\x02_\x90a\x05\xB1V[\x90V[a\x05\xD7\x90a\0\xA4V[\x90RV[\x91\x90a\x05\xEE\x90_` \x85\x01\x94\x01\x90a\x05\xCEV[V[4a\x06 Wa\x06\x006`\x04a\x05\x80V[a\x06\x1Ca\x06\x0Ba\x05\xBFV[a\x06\x13a\0\x92V[\x91\x82\x91\x82a\x05\xDBV[\x03\x90\xF3[a\0\x98V[a\x060__\x90a\x03\xC9V[\x90V[4a\x06cWa\x06C6`\x04a\x05\x80V[a\x06_a\x06Na\x06%V[a\x06Va\0\x92V[\x91\x82\x91\x82a\x04VV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x1B\x90V[\x90a\x06}`\xFF\x91a\x06lV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06\x90\x90a\0\xA4V[\x90V[\x90V[\x90a\x06\xABa\x06\xA6a\x06\xB2\x92a\x06\x87V[a\x06\x93V[\x82Ta\x06qV[\x90UV[a\x06\xC1\x90`\x02a\x06\x96V[V[_\x1C\x90V[a\x06\xD4a\x06\xD9\x91a\x06\xC3V[a\x05\x93V[\x90V[a\x06\xE6\x90Ta\x06\xC8V[\x90V[` \x91\x81R\x01\x90V[_\x7FSequencer error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07&`\x0F` \x92a\x06\xE9V[a\x07/\x81a\x06\xF2V[\x01\x90V[a\x07H\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\x19V[\x90V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x07x\x91\x02\x91a\x07r_\x19\x84a\x07YV[\x92a\x07YV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x07\x99a\x07\x94a\x07\x9E\x92a\x01\xD7V[a\x07\x82V[a\x01\xD7V[\x90V[\x90V[\x91\x90a\x07\xBAa\x07\xB5a\x07\xC2\x93a\x07\x85V[a\x07\xA1V[\x90\x83Ta\x07]V[\x90UV[_\x90V[a\x07\xDC\x91a\x07\xD6a\x07\xC6V[\x91a\x07\xA4V[V[[\x81\x81\x10a\x07\xEAWPPV[\x80a\x07\xF7_`\x01\x93a\x07\xCAV[\x01a\x07\xDFV[\x91\x90`\x1F\x81\x11a\x08\rW[PPPV[a\x08\x19a\x08>\x93a\x02\xBEV[\x90` a\x08%\x84a\x07OV[\x83\x01\x93\x10a\x08FW[a\x087\x90a\x07OV[\x01\x90a\x07\xDEV[_\x80\x80a\x08\x08V[\x91Pa\x087\x81\x92\x90Pa\x08.V[\x90a\x08d\x90_\x19\x90`\x08\x02a\x05\x8FV[\x19\x16\x90V[\x81a\x08s\x91a\x08TV[\x90`\x02\x02\x17\x90V[\x91a\x08\x86\x90\x82a\x07KV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\tEWa\x08\xAA\x82a\x08\xA4\x85Ta\x02\x8BV[\x85a\x07\xFDV[_\x90`\x1F\x83\x11`\x01\x14a\x08\xDDW\x91\x80\x91a\x08\xCC\x93_\x92a\x08\xD1W[PPa\x08iV[\x90U[V[\x90\x91P\x015_\x80a\x08\xC5V[`\x1F\x19\x83\x16\x91a\x08\xEC\x85a\x02\xBEV[\x92_[\x81\x81\x10a\t-WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\t\x13W[PPP\x02\x01\x90Ua\x08\xCFV[a\t#\x91\x015`\x1F\x84\x16\x90a\x08TV[\x90U_\x80\x80a\t\x07V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x08\xEFV[a\x03jV[\x90a\tU\x92\x91a\x08{V[V[\x90a\tb`\x02a\x06\xDCV[a\trWa\tp\x91_a\tJV[V[a\tza\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\x90`\x04\x82\x01a\x073V[\x03\x90\xFD[\x90a\t\x9F`\x02a\x06\xDCV[a\t\xAFWa\t\xAD\x91_a\tJV[V[a\t\xB7a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xCD`\x04\x82\x01a\x073V[\x03\x90\xFD[`\x01\x90\x81\x80\x03\x01\x04\x90V[\x90a\t\xEF\x90_\x19\x90` \x03`\x08\x02a\x05\x8FV[\x81T\x16\x90UV[\x90_\x91a\n\ra\n\x05\x82a\x02\xBEV[\x92\x83Ta\x08iV[\x90UUV[\x91\x92\x90` \x82\x10_\x14a\nkW`\x1F\x84\x11`\x01\x14a\n;Wa\n5\x92\x93Pa\x08iV[\x90U[[V[P\x90a\naa\nf\x93`\x01a\nXa\nR\x85a\x02\xBEV[\x92a\x07OV[\x82\x01\x91\x01a\x07\xDEV[a\t\xF6V[a\n8V[Pa\n\xA2\x82\x93a\n|`\x01\x94a\x02\xBEV[a\n\x9Ba\n\x88\x85a\x07OV[\x82\x01\x92`\x1F\x86\x16\x80a\n\xADW[Pa\x07OV[\x01\x90a\x07\xDEV[`\x02\x02\x17\x90Ua\n9V[a\n\xB9\x90\x88\x86\x03a\t\xDCV[_a\n\x95V[\x92\x90\x91h\x01\0\0\0\0\0\0\0\0\x82\x11a\x0B\x1FW` \x11_\x14a\x0B\x10W` \x81\x10_\x14a\n\xF4Wa\n\xEE\x91a\x08iV[\x90U[[V[`\x01\x91`\xFF\x19\x16a\x0B\x04\x84a\x02\xBEV[U`\x02\x02\x01\x90Ua\n\xF1V[`\x01\x91P`\x02\x02\x01\x90Ua\n\xF2V[a\x03jV[\x90\x81Ta\x0B0\x81a\x02\x8BV[\x90\x81\x83\x11a\x0BYW[\x81\x83\x10a\x0BGW[PPPPV[a\x0BP\x93a\n\x12V[_\x80\x80\x80a\x0BAV[a\x0Be\x83\x83\x83\x87a\n\xBFV[a\x0B9V[_a\x0Bt\x91a\x0B$V[V[\x90_\x03a\x0B\x88Wa\x0B\x86\x90a\x0BjV[V[a\x02dV[[\x81\x81\x10a\x0B\x99WPPV[\x80a\x0B\xA6_`\x01\x93a\x0BvV[\x01a\x0B\x8EV[\x90\x91\x82\x81\x10a\x0B\xBBW[PPPV[a\x0B\xD9a\x0B\xD3a\x0B\xCDa\x0B\xE4\x95a\t\xD1V[\x92a\t\xD1V[\x92a\x023V[\x91\x82\x01\x91\x01\x90a\x0B\x8DV[_\x80\x80a\x0B\xB6V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x0C\x15W\x81a\x0C\na\x0C\x13\x93a\x02/V[\x90\x82\x81Ua\x0B\xACV[V[a\x03jV[_a\x0C$\x91a\x0B\xECV[V[\x90_\x03a\x0C8Wa\x0C6\x90a\x0C\x1AV[V[a\x02dV[\x90V[a\x0CTa\x0COa\x0CY\x92a\x0C=V[a\x07\x82V[a\x01\xD7V[\x90V[`\x01a\x0Ch\x91\x01a\x01\xD7V[\x90V[P\x90V[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0C\xC0W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0C\xBBW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0C\xB6WV[a\x0CzV[a\x0CvV[a\x0CrV[\x90\x82\x10\x15a\x0C\xE0W` a\x0C\xDC\x92\x02\x81\x01\x90a\x0C~V[\x90\x91V[a\x02\x1BV[_R` _ \x90V[T\x90V[a\x0C\xFB\x81a\x0C\xEEV[\x82\x10\x15a\r\x15Wa\r\r`\x01\x91a\x0C\xE5V[\x91\x02\x01\x90_\x90V[a\x02\x1BV[\x92\x91\x90a\r,Wa\r*\x92a\x08{V[V[a\x02dV[\x91\x90\x82T\x92h\x01\0\0\0\0\0\0\0\0\x84\x10\x15a\rbW\x83a\rZ\x91`\x01a\r`\x96\x01\x81Ua\x0C\xF2V[\x90a\r\x1AV[V[a\x03jV[\x91\x90a\rs`\x02a\x06\xDCV[a\r\xE2Wa\r\x82_`\x01a\x0C&V[a\r\x8B_a\x0C@V[[\x80a\r\xA9a\r\xA3a\r\x9E\x87\x86\x90a\x0CkV[a\x01\xD7V[\x91a\x01\xD7V[\x10\x15a\r\xDCWa\r\xD7\x90a\r\xD2a\r\xC0`\x01a\x0CoV[a\r\xCC\x87\x86\x85\x91a\x0C\xC5V[\x91a\r1V[a\x0C\\V[a\r\x8CV[PP\x90PV[a\r\xEAa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\0`\x04\x82\x01a\x073V[\x03\x90\xFD",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastProcessedBulkData(uint256)` and selector `0x4a5b6b7e`.
```solidity
function lastProcessedBulkData(uint256) external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedBulkDataCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastProcessedBulkData(uint256)`](lastProcessedBulkDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedBulkDataReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedBulkDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedBulkDataCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedBulkDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedBulkDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedBulkDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedBulkDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastProcessedBulkDataCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Bytes;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastProcessedBulkData(uint256)";
            const SELECTOR: [u8; 4] = [74u8, 91u8, 107u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastProcessedBulkDataReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastProcessedBulkDataReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastProcessedData()` and selector `0xf352cd72`.
```solidity
function lastProcessedData() external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastProcessedData()`](lastProcessedDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastProcessedDataCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Bytes;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastProcessedData()";
            const SELECTOR: [u8; 4] = [243u8, 82u8, 205u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastProcessedDataReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastProcessedDataReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl processTransactionReturn {
            fn _tokenize(
                &self,
            ) -> <processTransactionCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                processTransactionReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl processTransactionUncompressedReturn {
            fn _tokenize(
                &self,
            ) -> <processTransactionUncompressedCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                processTransactionUncompressedReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulkCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl processTransactionsBulkReturn {
            fn _tokenize(
                &self,
            ) -> <processTransactionsBulkCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulkCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulkReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                processTransactionsBulkReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setRevertFlag(bool)` and selector `0x381ba140`.
```solidity
function setRevertFlag(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setRevertFlag(bool)`](setRevertFlagCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagCall> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setRevertFlagReturn {
            fn _tokenize(
                &self,
            ) -> <setRevertFlagCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setRevertFlagCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setRevertFlagReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setRevertFlag(bool)";
            const SELECTOR: [u8; 4] = [56u8, 27u8, 161u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setRevertFlagReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: shouldRevertReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: shouldRevertReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`MockSyndicateSequencingChain`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MockSyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        lastProcessedBulkData(lastProcessedBulkDataCall),
        #[allow(missing_docs)]
        lastProcessedData(lastProcessedDataCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionUncompressed(processTransactionUncompressedCall),
        #[allow(missing_docs)]
        processTransactionsBulk(processTransactionsBulkCall),
        #[allow(missing_docs)]
        setRevertFlag(setRevertFlagCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockSyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [56u8, 27u8, 161u8, 64u8],
            [70u8, 226u8, 204u8, 9u8],
            [74u8, 91u8, 107u8, 126u8],
            [128u8, 78u8, 81u8, 35u8],
            [205u8, 175u8, 185u8, 120u8],
            [211u8, 7u8, 45u8, 130u8],
            [243u8, 82u8, 205u8, 114u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockSyndicateSequencingChainCalls {
        const NAME: &'static str = "MockSyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::lastProcessedBulkData(_) => {
                    <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastProcessedData(_) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed(_) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk(_) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setRevertFlag(_) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls>] = &[
                {
                    fn setRevertFlag(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <setRevertFlagCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::setRevertFlag)
                    }
                    setRevertFlag
                },
                {
                    fn processTransaction(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn lastProcessedBulkData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::lastProcessedBulkData,
                            )
                    }
                    lastProcessedBulkData
                },
                {
                    fn processTransactionUncompressed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::processTransactionUncompressed,
                            )
                    }
                    processTransactionUncompressed
                },
                {
                    fn processTransactionsBulk(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::processTransactionsBulk,
                            )
                    }
                    processTransactionsBulk
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn lastProcessedData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::lastProcessedData)
                    }
                    lastProcessedData
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls>] = &[
                {
                    fn setRevertFlag(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <setRevertFlagCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::setRevertFlag)
                    }
                    setRevertFlag
                },
                {
                    fn processTransaction(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn lastProcessedBulkData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::lastProcessedBulkData,
                            )
                    }
                    lastProcessedBulkData
                },
                {
                    fn processTransactionUncompressed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::processTransactionUncompressed,
                            )
                    }
                    processTransactionUncompressed
                },
                {
                    fn processTransactionsBulk(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::processTransactionsBulk,
                            )
                    }
                    processTransactionsBulk
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn lastProcessedData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockSyndicateSequencingChainCalls::lastProcessedData)
                    }
                    lastProcessedData
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::lastProcessedBulkData(inner) => {
                    <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::lastProcessedBulkData(inner) => {
                    <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockSyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`MockSyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockSyndicateSequencingChainInstance<P, N> {
        MockSyndicateSequencingChainInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockSyndicateSequencingChainInstance<P, N>>,
    > {
        MockSyndicateSequencingChainInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        MockSyndicateSequencingChainInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`MockSyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockSyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockSyndicateSequencingChainInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for MockSyndicateSequencingChainInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockSyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockSyndicateSequencingChainInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`MockSyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`MockSyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockSyndicateSequencingChainInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> MockSyndicateSequencingChainInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockSyndicateSequencingChainInstance<P, N> {
            MockSyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockSyndicateSequencingChainInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`lastProcessedBulkData`] function.
        pub fn lastProcessedBulkData(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, lastProcessedBulkDataCall, N> {
            self.call_builder(&lastProcessedBulkDataCall(_0))
        }
        ///Creates a new call builder for the [`lastProcessedData`] function.
        pub fn lastProcessedData(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, lastProcessedDataCall, N> {
            self.call_builder(&lastProcessedDataCall)
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed`] function.
        pub fn processTransactionUncompressed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, processTransactionUncompressedCall, N> {
            self.call_builder(
                &processTransactionUncompressedCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk`] function.
        pub fn processTransactionsBulk(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<&P, processTransactionsBulkCall, N> {
            self.call_builder(
                &processTransactionsBulkCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`setRevertFlag`] function.
        pub fn setRevertFlag(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<&P, setRevertFlagCall, N> {
            self.call_builder(&setRevertFlagCall { _shouldRevert })
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockSyndicateSequencingChainInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
