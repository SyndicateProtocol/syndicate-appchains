/**

Generated by the following Solidity interface...
```solidity
interface AddBatchTransactionsToSyndicateSequencingChainContract {
    function IS_SCRIPT() external view returns (bool);
    function SyndicateSequencingChainContract() external view returns (address);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SyndicateSequencingChainContract",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract SyndicateSequencingChain"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AddBatchTransactionsToSyndicateSequencingChainContract {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610919610106823961091990f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b61021d565b61001d5f3561004c565b806360b31d0414610047578063c0406226146100425763f8ccbf470361000e576101e8565b610152565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b60018060a01b031690565b61008e906008610093930261006f565b610073565b90565b906100a1915461007e565b90565b6100b1600c600390610096565b90565b60018060a01b031690565b90565b6100d66100d16100db926100b4565b6100bf565b6100b4565b90565b6100e7906100c2565b90565b6100f3906100de565b90565b6100ff906100ea565b9052565b9190610116905f602085019401906100f6565b565b3461014857610128366004610060565b6101446101336100a4565b61013b610052565b91829182610103565b0390f35b610058565b5f0190565b3461018057610162366004610060565b61016a610663565b610172610052565b8061017c8161014d565b0390f35b610058565b60ff1690565b61019b9060086101a0930261006f565b610185565b90565b906101ae915461018b565b90565b6101be600c6002906101a3565b90565b151590565b6101cf906101c1565b9052565b91906101e6905f602085019401906101c6565b565b34610218576101f8366004610060565b6102146102036101b1565b61020b610052565b918291826101d3565b0390f35b610058565b5f80fd5b5f1c90565b90565b61023d61023861024292610226565b6100bf565b610226565b90565b61025161025691610221565b610229565b90565b61026d61026861027292610226565b6100bf565b6100b4565b90565b6102ae6102a96102a47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610245565b610259565b6100de565b90565b6102ba906100c2565b90565b6102c6906102b1565b90565b6102d96102d4610275565b6102bd565b90565b6102e5906100de565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610314906102ec565b810190811067ffffffffffffffff82111761032e57604052565b6102f6565b60e01b90565b5f91031261034357565b61005c565b610350610052565b3d5f823e3d90fd5b610361906100c2565b90565b61036d90610358565b90565b60181b90565b9061038b6301000000600160b81b0391610370565b9181191691161790565b61039e90610358565b90565b90565b906103b96103b46103c092610395565b6103a1565b8254610376565b9055565b90565b6103db6103d66103e0926103c4565b6100bf565b610226565b90565b906103f66103ef610052565b928361030a565b565b67ffffffffffffffff81116104105760208091020190565b6102f6565b90610427610422836103f8565b6103e3565b918252565b606090565b5f5b82811061043f57505050565b60209061044a61042c565b8184015201610433565b9061047961046183610415565b9260208061046f86936103f8565b9201910390610431565b565b60181c90565b61048d6104929161047b565b610073565b90565b61049f9054610481565b90565b6104ab906100c2565b90565b6104b7906104a2565b90565b90565b6104d16104cc6104d6926104ba565b6100bf565b610226565b90565b6104e2906100b4565b90565b6104ee906104d9565b9052565b6104fb90610226565b9052565b91602061052092949361051960408201965f8301906104e5565b01906104f2565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b9061054482610536565b811015610555576020809102010190565b610522565b90565b61057161056c6105769261055a565b6100bf565b610226565b90565b60209181520190565b60200190565b5190565b60209181520190565b90825f9392825e0152565b6105bf6105c86020936105cd936105b681610588565b9384809361058c565b95869101610595565b6102ec565b0190565b906105db916105a0565b90565b60200190565b906105f86105f183610536565b8092610579565b908161060960208302840194610582565b925f915b83831061061c57505050505090565b9091929394602061063e610638838560019503875289516105d1565b976105de565b930193019193929061060d565b6106609160208201915f8184039101526105e4565b90565b61067361066e6102c9565b6102dc565b637fb5297f90803b1561091457610696915f9161068e610052565b938492610333565b82528183816106a76004820161014d565b03925af1801561090f576108e3575b506106de6106d773b1567b5dfa038e4f279d3b585d4d45b8bdd2263d610364565b600c6103a4565b6106f06106eb60026103c7565b610454565b6107c661070d610708610703600c610495565b6100ea565b6104ae565b61076a8161074561071e60016104bd565b9161073661072a610052565b938492602084016104ff565b6020820181038252038261030a565b61076485915f9061075e6107588361055d565b8561053a565b5261055d565b9061053a565b51506107a061077960026103c7565b91610791610785610052565b938492602084016104ff565b6020820181038252038261030a565b6107c083916001906107ba6107b4836104bd565b8561053a565b526104bd565b9061053a565b51506107da6107d5600c610495565b6100ea565b9063cdafb97890823b156108de57610811926108065f80946107fa610052565b96879586948593610333565b83526004830161064b565b03925af180156108d9576108ad575b5061083161082c6102c9565b6102dc565b6376eadd3690803b156108a857610854915f9161084c610052565b938492610333565b82528183816108656004820161014d565b03925af180156108a357610877575b50565b610896905f3d811161089c575b61088e818361030a565b810190610339565b5f610874565b503d610884565b610348565b6102e8565b6108cc905f3d81116108d2575b6108c4818361030a565b810190610339565b5f610820565b503d6108ba565b610348565b6102e8565b610902905f3d8111610908575b6108fa818361030a565b810190610339565b5f6106b6565b503d6108f0565b610348565b6102e856
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\t\x19a\x01\x06\x829a\t\x19\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1DV[a\0\x1D_5a\0LV[\x80c`\xB3\x1D\x04\x14a\0GW\x80c\xC0@b&\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x01\xE8V[a\x01RV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x8E\x90`\x08a\0\x93\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\xA1\x91Ta\0~V[\x90V[a\0\xB1`\x0C`\x03\x90a\0\x96V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xD6a\0\xD1a\0\xDB\x92a\0\xB4V[a\0\xBFV[a\0\xB4V[\x90V[a\0\xE7\x90a\0\xC2V[\x90V[a\0\xF3\x90a\0\xDEV[\x90V[a\0\xFF\x90a\0\xEAV[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0`V[a\x01Da\x013a\0\xA4V[a\x01;a\0RV[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0XV[_\x01\x90V[4a\x01\x80Wa\x01b6`\x04a\0`V[a\x01ja\x06cV[a\x01ra\0RV[\x80a\x01|\x81a\x01MV[\x03\x90\xF3[a\0XV[`\xFF\x16\x90V[a\x01\x9B\x90`\x08a\x01\xA0\x93\x02a\0oV[a\x01\x85V[\x90V[\x90a\x01\xAE\x91Ta\x01\x8BV[\x90V[a\x01\xBE`\x0C`\x02\x90a\x01\xA3V[\x90V[\x15\x15\x90V[a\x01\xCF\x90a\x01\xC1V[\x90RV[\x91\x90a\x01\xE6\x90_` \x85\x01\x94\x01\x90a\x01\xC6V[V[4a\x02\x18Wa\x01\xF86`\x04a\0`V[a\x02\x14a\x02\x03a\x01\xB1V[a\x02\x0Ba\0RV[\x91\x82\x91\x82a\x01\xD3V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02=a\x028a\x02B\x92a\x02&V[a\0\xBFV[a\x02&V[\x90V[a\x02Qa\x02V\x91a\x02!V[a\x02)V[\x90V[a\x02ma\x02ha\x02r\x92a\x02&V[a\0\xBFV[a\0\xB4V[\x90V[a\x02\xAEa\x02\xA9a\x02\xA4\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02EV[a\x02YV[a\0\xDEV[\x90V[a\x02\xBA\x90a\0\xC2V[\x90V[a\x02\xC6\x90a\x02\xB1V[\x90V[a\x02\xD9a\x02\xD4a\x02uV[a\x02\xBDV[\x90V[a\x02\xE5\x90a\0\xDEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x14\x90a\x02\xECV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03.W`@RV[a\x02\xF6V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03CWV[a\0\\V[a\x03Pa\0RV[=_\x82>=\x90\xFD[a\x03a\x90a\0\xC2V[\x90V[a\x03m\x90a\x03XV[\x90V[`\x18\x1B\x90V[\x90a\x03\x8Bc\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x03pV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x9E\x90a\x03XV[\x90V[\x90V[\x90a\x03\xB9a\x03\xB4a\x03\xC0\x92a\x03\x95V[a\x03\xA1V[\x82Ta\x03vV[\x90UV[\x90V[a\x03\xDBa\x03\xD6a\x03\xE0\x92a\x03\xC4V[a\0\xBFV[a\x02&V[\x90V[\x90a\x03\xF6a\x03\xEFa\0RV[\x92\x83a\x03\nV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x10W` \x80\x91\x02\x01\x90V[a\x02\xF6V[\x90a\x04'a\x04\"\x83a\x03\xF8V[a\x03\xE3V[\x91\x82RV[``\x90V[_[\x82\x81\x10a\x04?WPPPV[` \x90a\x04Ja\x04,V[\x81\x84\x01R\x01a\x043V[\x90a\x04ya\x04a\x83a\x04\x15V[\x92` \x80a\x04o\x86\x93a\x03\xF8V[\x92\x01\x91\x03\x90a\x041V[V[`\x18\x1C\x90V[a\x04\x8Da\x04\x92\x91a\x04{V[a\0sV[\x90V[a\x04\x9F\x90Ta\x04\x81V[\x90V[a\x04\xAB\x90a\0\xC2V[\x90V[a\x04\xB7\x90a\x04\xA2V[\x90V[\x90V[a\x04\xD1a\x04\xCCa\x04\xD6\x92a\x04\xBAV[a\0\xBFV[a\x02&V[\x90V[a\x04\xE2\x90a\0\xB4V[\x90V[a\x04\xEE\x90a\x04\xD9V[\x90RV[a\x04\xFB\x90a\x02&V[\x90RV[\x91` a\x05 \x92\x94\x93a\x05\x19`@\x82\x01\x96_\x83\x01\x90a\x04\xE5V[\x01\x90a\x04\xF2V[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x05D\x82a\x056V[\x81\x10\x15a\x05UW` \x80\x91\x02\x01\x01\x90V[a\x05\"V[\x90V[a\x05qa\x05la\x05v\x92a\x05ZV[a\0\xBFV[a\x02&V[\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05\xBFa\x05\xC8` \x93a\x05\xCD\x93a\x05\xB6\x81a\x05\x88V[\x93\x84\x80\x93a\x05\x8CV[\x95\x86\x91\x01a\x05\x95V[a\x02\xECV[\x01\x90V[\x90a\x05\xDB\x91a\x05\xA0V[\x90V[` \x01\x90V[\x90a\x05\xF8a\x05\xF1\x83a\x056V[\x80\x92a\x05yV[\x90\x81a\x06\t` \x83\x02\x84\x01\x94a\x05\x82V[\x92_\x91[\x83\x83\x10a\x06\x1CWPPPPP\x90V[\x90\x91\x92\x93\x94` a\x06>a\x068\x83\x85`\x01\x95\x03\x87R\x89Qa\x05\xD1V[\x97a\x05\xDEV[\x93\x01\x93\x01\x91\x93\x92\x90a\x06\rV[a\x06`\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05\xE4V[\x90V[a\x06sa\x06na\x02\xC9V[a\x02\xDCV[c\x7F\xB5)\x7F\x90\x80;\x15a\t\x14Wa\x06\x96\x91_\x91a\x06\x8Ea\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x06\xA7`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\t\x0FWa\x08\xE3W[Pa\x06\xDEa\x06\xD7s\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=a\x03dV[`\x0Ca\x03\xA4V[a\x06\xF0a\x06\xEB`\x02a\x03\xC7V[a\x04TV[a\x07\xC6a\x07\ra\x07\x08a\x07\x03`\x0Ca\x04\x95V[a\0\xEAV[a\x04\xAEV[a\x07j\x81a\x07Ea\x07\x1E`\x01a\x04\xBDV[\x91a\x076a\x07*a\0RV[\x93\x84\x92` \x84\x01a\x04\xFFV[` \x82\x01\x81\x03\x82R\x03\x82a\x03\nV[a\x07d\x85\x91_\x90a\x07^a\x07X\x83a\x05]V[\x85a\x05:V[Ra\x05]V[\x90a\x05:V[QPa\x07\xA0a\x07y`\x02a\x03\xC7V[\x91a\x07\x91a\x07\x85a\0RV[\x93\x84\x92` \x84\x01a\x04\xFFV[` \x82\x01\x81\x03\x82R\x03\x82a\x03\nV[a\x07\xC0\x83\x91`\x01\x90a\x07\xBAa\x07\xB4\x83a\x04\xBDV[\x85a\x05:V[Ra\x04\xBDV[\x90a\x05:V[QPa\x07\xDAa\x07\xD5`\x0Ca\x04\x95V[a\0\xEAV[\x90c\xCD\xAF\xB9x\x90\x82;\x15a\x08\xDEWa\x08\x11\x92a\x08\x06_\x80\x94a\x07\xFAa\0RV[\x96\x87\x95\x86\x94\x85\x93a\x033V[\x83R`\x04\x83\x01a\x06KV[\x03\x92Z\xF1\x80\x15a\x08\xD9Wa\x08\xADW[Pa\x081a\x08,a\x02\xC9V[a\x02\xDCV[cv\xEA\xDD6\x90\x80;\x15a\x08\xA8Wa\x08T\x91_\x91a\x08La\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x08e`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\x08\xA3Wa\x08wW[PV[a\x08\x96\x90_=\x81\x11a\x08\x9CW[a\x08\x8E\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08tV[P=a\x08\x84V[a\x03HV[a\x02\xE8V[a\x08\xCC\x90_=\x81\x11a\x08\xD2W[a\x08\xC4\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08 V[P=a\x08\xBAV[a\x03HV[a\x02\xE8V[a\t\x02\x90_=\x81\x11a\t\x08W[a\x08\xFA\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x06\xB6V[P=a\x08\xF0V[a\x03HV[a\x02\xE8V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61021d565b61001d5f3561004c565b806360b31d0414610047578063c0406226146100425763f8ccbf470361000e576101e8565b610152565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b60018060a01b031690565b61008e906008610093930261006f565b610073565b90565b906100a1915461007e565b90565b6100b1600c600390610096565b90565b60018060a01b031690565b90565b6100d66100d16100db926100b4565b6100bf565b6100b4565b90565b6100e7906100c2565b90565b6100f3906100de565b90565b6100ff906100ea565b9052565b9190610116905f602085019401906100f6565b565b3461014857610128366004610060565b6101446101336100a4565b61013b610052565b91829182610103565b0390f35b610058565b5f0190565b3461018057610162366004610060565b61016a610663565b610172610052565b8061017c8161014d565b0390f35b610058565b60ff1690565b61019b9060086101a0930261006f565b610185565b90565b906101ae915461018b565b90565b6101be600c6002906101a3565b90565b151590565b6101cf906101c1565b9052565b91906101e6905f602085019401906101c6565b565b34610218576101f8366004610060565b6102146102036101b1565b61020b610052565b918291826101d3565b0390f35b610058565b5f80fd5b5f1c90565b90565b61023d61023861024292610226565b6100bf565b610226565b90565b61025161025691610221565b610229565b90565b61026d61026861027292610226565b6100bf565b6100b4565b90565b6102ae6102a96102a47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610245565b610259565b6100de565b90565b6102ba906100c2565b90565b6102c6906102b1565b90565b6102d96102d4610275565b6102bd565b90565b6102e5906100de565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610314906102ec565b810190811067ffffffffffffffff82111761032e57604052565b6102f6565b60e01b90565b5f91031261034357565b61005c565b610350610052565b3d5f823e3d90fd5b610361906100c2565b90565b61036d90610358565b90565b60181b90565b9061038b6301000000600160b81b0391610370565b9181191691161790565b61039e90610358565b90565b90565b906103b96103b46103c092610395565b6103a1565b8254610376565b9055565b90565b6103db6103d66103e0926103c4565b6100bf565b610226565b90565b906103f66103ef610052565b928361030a565b565b67ffffffffffffffff81116104105760208091020190565b6102f6565b90610427610422836103f8565b6103e3565b918252565b606090565b5f5b82811061043f57505050565b60209061044a61042c565b8184015201610433565b9061047961046183610415565b9260208061046f86936103f8565b9201910390610431565b565b60181c90565b61048d6104929161047b565b610073565b90565b61049f9054610481565b90565b6104ab906100c2565b90565b6104b7906104a2565b90565b90565b6104d16104cc6104d6926104ba565b6100bf565b610226565b90565b6104e2906100b4565b90565b6104ee906104d9565b9052565b6104fb90610226565b9052565b91602061052092949361051960408201965f8301906104e5565b01906104f2565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b9061054482610536565b811015610555576020809102010190565b610522565b90565b61057161056c6105769261055a565b6100bf565b610226565b90565b60209181520190565b60200190565b5190565b60209181520190565b90825f9392825e0152565b6105bf6105c86020936105cd936105b681610588565b9384809361058c565b95869101610595565b6102ec565b0190565b906105db916105a0565b90565b60200190565b906105f86105f183610536565b8092610579565b908161060960208302840194610582565b925f915b83831061061c57505050505090565b9091929394602061063e610638838560019503875289516105d1565b976105de565b930193019193929061060d565b6106609160208201915f8184039101526105e4565b90565b61067361066e6102c9565b6102dc565b637fb5297f90803b1561091457610696915f9161068e610052565b938492610333565b82528183816106a76004820161014d565b03925af1801561090f576108e3575b506106de6106d773b1567b5dfa038e4f279d3b585d4d45b8bdd2263d610364565b600c6103a4565b6106f06106eb60026103c7565b610454565b6107c661070d610708610703600c610495565b6100ea565b6104ae565b61076a8161074561071e60016104bd565b9161073661072a610052565b938492602084016104ff565b6020820181038252038261030a565b61076485915f9061075e6107588361055d565b8561053a565b5261055d565b9061053a565b51506107a061077960026103c7565b91610791610785610052565b938492602084016104ff565b6020820181038252038261030a565b6107c083916001906107ba6107b4836104bd565b8561053a565b526104bd565b9061053a565b51506107da6107d5600c610495565b6100ea565b9063cdafb97890823b156108de57610811926108065f80946107fa610052565b96879586948593610333565b83526004830161064b565b03925af180156108d9576108ad575b5061083161082c6102c9565b6102dc565b6376eadd3690803b156108a857610854915f9161084c610052565b938492610333565b82528183816108656004820161014d565b03925af180156108a357610877575b50565b610896905f3d811161089c575b61088e818361030a565b810190610339565b5f610874565b503d610884565b610348565b6102e8565b6108cc905f3d81116108d2575b6108c4818361030a565b810190610339565b5f610820565b503d6108ba565b610348565b6102e8565b610902905f3d8111610908575b6108fa818361030a565b810190610339565b5f6106b6565b503d6108f0565b610348565b6102e856
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1DV[a\0\x1D_5a\0LV[\x80c`\xB3\x1D\x04\x14a\0GW\x80c\xC0@b&\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x01\xE8V[a\x01RV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x8E\x90`\x08a\0\x93\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\xA1\x91Ta\0~V[\x90V[a\0\xB1`\x0C`\x03\x90a\0\x96V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xD6a\0\xD1a\0\xDB\x92a\0\xB4V[a\0\xBFV[a\0\xB4V[\x90V[a\0\xE7\x90a\0\xC2V[\x90V[a\0\xF3\x90a\0\xDEV[\x90V[a\0\xFF\x90a\0\xEAV[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0`V[a\x01Da\x013a\0\xA4V[a\x01;a\0RV[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0XV[_\x01\x90V[4a\x01\x80Wa\x01b6`\x04a\0`V[a\x01ja\x06cV[a\x01ra\0RV[\x80a\x01|\x81a\x01MV[\x03\x90\xF3[a\0XV[`\xFF\x16\x90V[a\x01\x9B\x90`\x08a\x01\xA0\x93\x02a\0oV[a\x01\x85V[\x90V[\x90a\x01\xAE\x91Ta\x01\x8BV[\x90V[a\x01\xBE`\x0C`\x02\x90a\x01\xA3V[\x90V[\x15\x15\x90V[a\x01\xCF\x90a\x01\xC1V[\x90RV[\x91\x90a\x01\xE6\x90_` \x85\x01\x94\x01\x90a\x01\xC6V[V[4a\x02\x18Wa\x01\xF86`\x04a\0`V[a\x02\x14a\x02\x03a\x01\xB1V[a\x02\x0Ba\0RV[\x91\x82\x91\x82a\x01\xD3V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02=a\x028a\x02B\x92a\x02&V[a\0\xBFV[a\x02&V[\x90V[a\x02Qa\x02V\x91a\x02!V[a\x02)V[\x90V[a\x02ma\x02ha\x02r\x92a\x02&V[a\0\xBFV[a\0\xB4V[\x90V[a\x02\xAEa\x02\xA9a\x02\xA4\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02EV[a\x02YV[a\0\xDEV[\x90V[a\x02\xBA\x90a\0\xC2V[\x90V[a\x02\xC6\x90a\x02\xB1V[\x90V[a\x02\xD9a\x02\xD4a\x02uV[a\x02\xBDV[\x90V[a\x02\xE5\x90a\0\xDEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x14\x90a\x02\xECV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03.W`@RV[a\x02\xF6V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03CWV[a\0\\V[a\x03Pa\0RV[=_\x82>=\x90\xFD[a\x03a\x90a\0\xC2V[\x90V[a\x03m\x90a\x03XV[\x90V[`\x18\x1B\x90V[\x90a\x03\x8Bc\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x03pV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x9E\x90a\x03XV[\x90V[\x90V[\x90a\x03\xB9a\x03\xB4a\x03\xC0\x92a\x03\x95V[a\x03\xA1V[\x82Ta\x03vV[\x90UV[\x90V[a\x03\xDBa\x03\xD6a\x03\xE0\x92a\x03\xC4V[a\0\xBFV[a\x02&V[\x90V[\x90a\x03\xF6a\x03\xEFa\0RV[\x92\x83a\x03\nV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x10W` \x80\x91\x02\x01\x90V[a\x02\xF6V[\x90a\x04'a\x04\"\x83a\x03\xF8V[a\x03\xE3V[\x91\x82RV[``\x90V[_[\x82\x81\x10a\x04?WPPPV[` \x90a\x04Ja\x04,V[\x81\x84\x01R\x01a\x043V[\x90a\x04ya\x04a\x83a\x04\x15V[\x92` \x80a\x04o\x86\x93a\x03\xF8V[\x92\x01\x91\x03\x90a\x041V[V[`\x18\x1C\x90V[a\x04\x8Da\x04\x92\x91a\x04{V[a\0sV[\x90V[a\x04\x9F\x90Ta\x04\x81V[\x90V[a\x04\xAB\x90a\0\xC2V[\x90V[a\x04\xB7\x90a\x04\xA2V[\x90V[\x90V[a\x04\xD1a\x04\xCCa\x04\xD6\x92a\x04\xBAV[a\0\xBFV[a\x02&V[\x90V[a\x04\xE2\x90a\0\xB4V[\x90V[a\x04\xEE\x90a\x04\xD9V[\x90RV[a\x04\xFB\x90a\x02&V[\x90RV[\x91` a\x05 \x92\x94\x93a\x05\x19`@\x82\x01\x96_\x83\x01\x90a\x04\xE5V[\x01\x90a\x04\xF2V[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x05D\x82a\x056V[\x81\x10\x15a\x05UW` \x80\x91\x02\x01\x01\x90V[a\x05\"V[\x90V[a\x05qa\x05la\x05v\x92a\x05ZV[a\0\xBFV[a\x02&V[\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05\xBFa\x05\xC8` \x93a\x05\xCD\x93a\x05\xB6\x81a\x05\x88V[\x93\x84\x80\x93a\x05\x8CV[\x95\x86\x91\x01a\x05\x95V[a\x02\xECV[\x01\x90V[\x90a\x05\xDB\x91a\x05\xA0V[\x90V[` \x01\x90V[\x90a\x05\xF8a\x05\xF1\x83a\x056V[\x80\x92a\x05yV[\x90\x81a\x06\t` \x83\x02\x84\x01\x94a\x05\x82V[\x92_\x91[\x83\x83\x10a\x06\x1CWPPPPP\x90V[\x90\x91\x92\x93\x94` a\x06>a\x068\x83\x85`\x01\x95\x03\x87R\x89Qa\x05\xD1V[\x97a\x05\xDEV[\x93\x01\x93\x01\x91\x93\x92\x90a\x06\rV[a\x06`\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05\xE4V[\x90V[a\x06sa\x06na\x02\xC9V[a\x02\xDCV[c\x7F\xB5)\x7F\x90\x80;\x15a\t\x14Wa\x06\x96\x91_\x91a\x06\x8Ea\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x06\xA7`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\t\x0FWa\x08\xE3W[Pa\x06\xDEa\x06\xD7s\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=a\x03dV[`\x0Ca\x03\xA4V[a\x06\xF0a\x06\xEB`\x02a\x03\xC7V[a\x04TV[a\x07\xC6a\x07\ra\x07\x08a\x07\x03`\x0Ca\x04\x95V[a\0\xEAV[a\x04\xAEV[a\x07j\x81a\x07Ea\x07\x1E`\x01a\x04\xBDV[\x91a\x076a\x07*a\0RV[\x93\x84\x92` \x84\x01a\x04\xFFV[` \x82\x01\x81\x03\x82R\x03\x82a\x03\nV[a\x07d\x85\x91_\x90a\x07^a\x07X\x83a\x05]V[\x85a\x05:V[Ra\x05]V[\x90a\x05:V[QPa\x07\xA0a\x07y`\x02a\x03\xC7V[\x91a\x07\x91a\x07\x85a\0RV[\x93\x84\x92` \x84\x01a\x04\xFFV[` \x82\x01\x81\x03\x82R\x03\x82a\x03\nV[a\x07\xC0\x83\x91`\x01\x90a\x07\xBAa\x07\xB4\x83a\x04\xBDV[\x85a\x05:V[Ra\x04\xBDV[\x90a\x05:V[QPa\x07\xDAa\x07\xD5`\x0Ca\x04\x95V[a\0\xEAV[\x90c\xCD\xAF\xB9x\x90\x82;\x15a\x08\xDEWa\x08\x11\x92a\x08\x06_\x80\x94a\x07\xFAa\0RV[\x96\x87\x95\x86\x94\x85\x93a\x033V[\x83R`\x04\x83\x01a\x06KV[\x03\x92Z\xF1\x80\x15a\x08\xD9Wa\x08\xADW[Pa\x081a\x08,a\x02\xC9V[a\x02\xDCV[cv\xEA\xDD6\x90\x80;\x15a\x08\xA8Wa\x08T\x91_\x91a\x08La\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x08e`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\x08\xA3Wa\x08wW[PV[a\x08\x96\x90_=\x81\x11a\x08\x9CW[a\x08\x8E\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08tV[P=a\x08\x84V[a\x03HV[a\x02\xE8V[a\x08\xCC\x90_=\x81\x11a\x08\xD2W[a\x08\xC4\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08 V[P=a\x08\xBAV[a\x03HV[a\x02\xE8V[a\t\x02\x90_=\x81\x11a\t\x08W[a\x08\xFA\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x06\xB6V[P=a\x08\xF0V[a\x03HV[a\x02\xE8V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `SyndicateSequencingChainContract()` and selector `0x60b31d04`.
```solidity
function SyndicateSequencingChainContract() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SyndicateSequencingChainContractCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`SyndicateSequencingChainContract()`](SyndicateSequencingChainContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SyndicateSequencingChainContractReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SyndicateSequencingChainContractCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SyndicateSequencingChainContractCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SyndicateSequencingChainContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SyndicateSequencingChainContractReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SyndicateSequencingChainContractReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SyndicateSequencingChainContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SyndicateSequencingChainContractCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SyndicateSequencingChainContract()";
            const SELECTOR: [u8; 4] = [96u8, 179u8, 29u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: SyndicateSequencingChainContractReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: SyndicateSequencingChainContractReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum AddBatchTransactionsToSyndicateSequencingChainContractCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        SyndicateSequencingChainContract(SyndicateSequencingChainContractCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl AddBatchTransactionsToSyndicateSequencingChainContractCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [96u8, 179u8, 29u8, 4u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for AddBatchTransactionsToSyndicateSequencingChainContractCalls {
        const NAME: &'static str = "AddBatchTransactionsToSyndicateSequencingChainContractCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SyndicateSequencingChainContract(_) => {
                    <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<
                AddBatchTransactionsToSyndicateSequencingChainContractCalls,
            >] = &[
                {
                    fn SyndicateSequencingChainContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::SyndicateSequencingChainContract,
                            )
                    }
                    SyndicateSequencingChainContract
                },
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::run,
                            )
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<
                AddBatchTransactionsToSyndicateSequencingChainContractCalls,
            >] = &[
                {
                    fn SyndicateSequencingChainContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::SyndicateSequencingChainContract,
                            )
                    }
                    SyndicateSequencingChainContract
                },
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::run,
                            )
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::SyndicateSequencingChainContract(inner) => {
                    <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SyndicateSequencingChainContract(inner) => {
                    <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToSyndicateSequencingChainContractInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        AddBatchTransactionsToSyndicateSequencingChainContractInstance::<
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N>,
        >,
    > {
        AddBatchTransactionsToSyndicateSequencingChainContractInstance::<
            P,
            N,
        >::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        AddBatchTransactionsToSyndicateSequencingChainContractInstance::<
            P,
            N,
        >::deploy_builder(provider)
    }
    /**A [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AddBatchTransactionsToSyndicateSequencingChainContract`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AddBatchTransactionsToSyndicateSequencingChainContractInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug
    for AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(
                    "AddBatchTransactionsToSyndicateSequencingChainContractInstance",
                )
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToSyndicateSequencingChainContractInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        P: ::core::clone::Clone,
        N,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
            AddBatchTransactionsToSyndicateSequencingChainContractInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`SyndicateSequencingChainContract`] function.
        pub fn SyndicateSequencingChainContract(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            SyndicateSequencingChainContractCall,
            N,
        > {
            self.call_builder(&SyndicateSequencingChainContractCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
