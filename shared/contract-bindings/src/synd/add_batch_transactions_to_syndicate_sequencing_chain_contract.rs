/**

Generated by the following Solidity interface...
```solidity
interface AddBatchTransactionsToSyndicateSequencingChainContract {
    function IS_SCRIPT() external view returns (bool);
    function SyndicateSequencingChainContract() external view returns (address);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SyndicateSequencingChainContract",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract SyndicateSequencingChain"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AddBatchTransactionsToSyndicateSequencingChainContract {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c556104f2908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816360b31d04146103e957508063c0406226146100855763f8ccbf471461003f575f80fd5b3461008257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008257602060ff600c5460101c166040519015158152f35b80fd5b50346103e5575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e557737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103e5576040517f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156103da576103c7575b5076b1567b5dfa038e4f279d3b585d4d45b8bdd2263d0000007fffffffffffffffffff0000000000000000000000000000000000000000ffffff600c5416179081600c5560609160405190610172848361043a565b600282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08401835b8181106103b757505073ffffffffffffffffffffffffffffffffffffffff9060181c169260405184602082015260016040820152604081526101dd828261043a565b6101e6836104a8565b526101f0826104a8565b5061020f6040519185602084015260026040840152604083528261043a565b610218826104e2565b52610222816104e2565b50823b156103b357604051907fcdafb978000000000000000000000000000000000000000000000000000000008252602482016020600484015281518091526044830190602060448260051b86010193019185905b828210610335578680878181808a0381838f5af1801561031557610320575b5050737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561008257806040517f76eadd36000000000000000000000000000000000000000000000000000000008152818160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af18015610315576103045750f35b8161030e9161043a565b6100825780f35b6040513d84823e3d90fd5b8161032a9161043a565b610082578082610296565b9091929360208080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc8a600196030186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f838b518051918291828752018686015e8d85828601015201160101960192019201909291610277565b5080fd5b808660208093870101520161019b565b6103d391505f9061043a565b5f5f61011d565b6040513d5f823e3d90fd5b5f80fd5b346103e5575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e55760209073ffffffffffffffffffffffffffffffffffffffff600c5460181c168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761047b57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8051156104b55760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156104b5576040019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x04\xF2\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c`\xB3\x1D\x04\x14a\x03\xE9WP\x80c\xC0@b&\x14a\0\x85Wc\xF8\xCC\xBFG\x14a\0?W_\x80\xFD[4a\0\x82W\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x82W` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[P4a\x03\xE5W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x03\xE5Wsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x03\xE5W`@Q\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x03\xDAWa\x03\xC7W[Pv\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFF\xFF\xFF`\x0CT\x16\x17\x90\x81`\x0CU``\x91`@Q\x90a\x01r\x84\x83a\x04:V[`\x02\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x01\x83[\x81\x81\x10a\x03\xB7WPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90`\x18\x1C\x16\x92`@Q\x84` \x82\x01R`\x01`@\x82\x01R`@\x81Ra\x01\xDD\x82\x82a\x04:V[a\x01\xE6\x83a\x04\xA8V[Ra\x01\xF0\x82a\x04\xA8V[Pa\x02\x0F`@Q\x91\x85` \x84\x01R`\x02`@\x84\x01R`@\x83R\x82a\x04:V[a\x02\x18\x82a\x04\xE2V[Ra\x02\"\x81a\x04\xE2V[P\x82;\x15a\x03\xB3W`@Q\x90\x7F\xCD\xAF\xB9x\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`$\x82\x01` `\x04\x84\x01R\x81Q\x80\x91R`D\x83\x01\x90` `D\x82`\x05\x1B\x86\x01\x01\x93\x01\x91\x85\x90[\x82\x82\x10a\x035W\x86\x80\x87\x81\x81\x80\x8A\x03\x81\x83\x8FZ\xF1\x80\x15a\x03\x15Wa\x03 W[PPsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\0\x82W\x80`@Q\x7Fv\xEA\xDD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x03\x15Wa\x03\x04WP\xF3[\x81a\x03\x0E\x91a\x04:V[a\0\x82W\x80\xF3[`@Q=\x84\x82>=\x90\xFD[\x81a\x03*\x91a\x04:V[a\0\x82W\x80\x82a\x02\x96V[\x90\x91\x92\x93` \x80\x80\x83\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBC\x8A`\x01\x96\x03\x01\x86R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x8BQ\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^\x8D\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x96\x01\x92\x01\x92\x01\x90\x92\x91a\x02wV[P\x80\xFD[\x80\x86` \x80\x93\x87\x01\x01R\x01a\x01\x9BV[a\x03\xD3\x91P_\x90a\x04:V[__a\x01\x1DV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x03\xE5W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x03\xE5W` \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x0CT`\x18\x1C\x16\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04{W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x80Q\x15a\x04\xB5W` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x04\xB5W`@\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816360b31d04146103e957508063c0406226146100855763f8ccbf471461003f575f80fd5b3461008257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008257602060ff600c5460101c166040519015158152f35b80fd5b50346103e5575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e557737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103e5576040517f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156103da576103c7575b5076b1567b5dfa038e4f279d3b585d4d45b8bdd2263d0000007fffffffffffffffffff0000000000000000000000000000000000000000ffffff600c5416179081600c5560609160405190610172848361043a565b600282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08401835b8181106103b757505073ffffffffffffffffffffffffffffffffffffffff9060181c169260405184602082015260016040820152604081526101dd828261043a565b6101e6836104a8565b526101f0826104a8565b5061020f6040519185602084015260026040840152604083528261043a565b610218826104e2565b52610222816104e2565b50823b156103b357604051907fcdafb978000000000000000000000000000000000000000000000000000000008252602482016020600484015281518091526044830190602060448260051b86010193019185905b828210610335578680878181808a0381838f5af1801561031557610320575b5050737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561008257806040517f76eadd36000000000000000000000000000000000000000000000000000000008152818160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af18015610315576103045750f35b8161030e9161043a565b6100825780f35b6040513d84823e3d90fd5b8161032a9161043a565b610082578082610296565b9091929360208080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc8a600196030186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f838b518051918291828752018686015e8d85828601015201160101960192019201909291610277565b5080fd5b808660208093870101520161019b565b6103d391505f9061043a565b5f5f61011d565b6040513d5f823e3d90fd5b5f80fd5b346103e5575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e55760209073ffffffffffffffffffffffffffffffffffffffff600c5460181c168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761047b57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8051156104b55760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156104b5576040019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c`\xB3\x1D\x04\x14a\x03\xE9WP\x80c\xC0@b&\x14a\0\x85Wc\xF8\xCC\xBFG\x14a\0?W_\x80\xFD[4a\0\x82W\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x82W` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[P4a\x03\xE5W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x03\xE5Wsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x03\xE5W`@Q\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x03\xDAWa\x03\xC7W[Pv\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFF\xFF\xFF`\x0CT\x16\x17\x90\x81`\x0CU``\x91`@Q\x90a\x01r\x84\x83a\x04:V[`\x02\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x01\x83[\x81\x81\x10a\x03\xB7WPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90`\x18\x1C\x16\x92`@Q\x84` \x82\x01R`\x01`@\x82\x01R`@\x81Ra\x01\xDD\x82\x82a\x04:V[a\x01\xE6\x83a\x04\xA8V[Ra\x01\xF0\x82a\x04\xA8V[Pa\x02\x0F`@Q\x91\x85` \x84\x01R`\x02`@\x84\x01R`@\x83R\x82a\x04:V[a\x02\x18\x82a\x04\xE2V[Ra\x02\"\x81a\x04\xE2V[P\x82;\x15a\x03\xB3W`@Q\x90\x7F\xCD\xAF\xB9x\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`$\x82\x01` `\x04\x84\x01R\x81Q\x80\x91R`D\x83\x01\x90` `D\x82`\x05\x1B\x86\x01\x01\x93\x01\x91\x85\x90[\x82\x82\x10a\x035W\x86\x80\x87\x81\x81\x80\x8A\x03\x81\x83\x8FZ\xF1\x80\x15a\x03\x15Wa\x03 W[PPsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\0\x82W\x80`@Q\x7Fv\xEA\xDD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x03\x15Wa\x03\x04WP\xF3[\x81a\x03\x0E\x91a\x04:V[a\0\x82W\x80\xF3[`@Q=\x84\x82>=\x90\xFD[\x81a\x03*\x91a\x04:V[a\0\x82W\x80\x82a\x02\x96V[\x90\x91\x92\x93` \x80\x80\x83\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBC\x8A`\x01\x96\x03\x01\x86R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x8BQ\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^\x8D\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x96\x01\x92\x01\x92\x01\x90\x92\x91a\x02wV[P\x80\xFD[\x80\x86` \x80\x93\x87\x01\x01R\x01a\x01\x9BV[a\x03\xD3\x91P_\x90a\x04:V[__a\x01\x1DV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x03\xE5W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x03\xE5W` \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x0CT`\x18\x1C\x16\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04{W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x80Q\x15a\x04\xB5W` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x04\xB5W`@\x01\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `SyndicateSequencingChainContract()` and selector `0x60b31d04`.
```solidity
function SyndicateSequencingChainContract() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SyndicateSequencingChainContractCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`SyndicateSequencingChainContract()`](SyndicateSequencingChainContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SyndicateSequencingChainContractReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SyndicateSequencingChainContractCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SyndicateSequencingChainContractCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SyndicateSequencingChainContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SyndicateSequencingChainContractReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SyndicateSequencingChainContractReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SyndicateSequencingChainContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SyndicateSequencingChainContractCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SyndicateSequencingChainContract()";
            const SELECTOR: [u8; 4] = [96u8, 179u8, 29u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: SyndicateSequencingChainContractReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: SyndicateSequencingChainContractReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum AddBatchTransactionsToSyndicateSequencingChainContractCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        SyndicateSequencingChainContract(SyndicateSequencingChainContractCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl AddBatchTransactionsToSyndicateSequencingChainContractCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [96u8, 179u8, 29u8, 4u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for AddBatchTransactionsToSyndicateSequencingChainContractCalls {
        const NAME: &'static str = "AddBatchTransactionsToSyndicateSequencingChainContractCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SyndicateSequencingChainContract(_) => {
                    <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<
                AddBatchTransactionsToSyndicateSequencingChainContractCalls,
            >] = &[
                {
                    fn SyndicateSequencingChainContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::SyndicateSequencingChainContract,
                            )
                    }
                    SyndicateSequencingChainContract
                },
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::run,
                            )
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<
                AddBatchTransactionsToSyndicateSequencingChainContractCalls,
            >] = &[
                {
                    fn SyndicateSequencingChainContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::SyndicateSequencingChainContract,
                            )
                    }
                    SyndicateSequencingChainContract
                },
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::run,
                            )
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToSyndicateSequencingChainContractCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AddBatchTransactionsToSyndicateSequencingChainContractCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::SyndicateSequencingChainContract(inner) => {
                    <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SyndicateSequencingChainContract(inner) => {
                    <SyndicateSequencingChainContractCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToSyndicateSequencingChainContractInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        AddBatchTransactionsToSyndicateSequencingChainContractInstance::<
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N>,
        >,
    > {
        AddBatchTransactionsToSyndicateSequencingChainContractInstance::<
            P,
            N,
        >::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        AddBatchTransactionsToSyndicateSequencingChainContractInstance::<
            P,
            N,
        >::deploy_builder(provider)
    }
    /**A [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AddBatchTransactionsToSyndicateSequencingChainContract`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AddBatchTransactionsToSyndicateSequencingChainContractInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug
    for AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(
                    "AddBatchTransactionsToSyndicateSequencingChainContractInstance",
                )
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToSyndicateSequencingChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToSyndicateSequencingChainContractInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        P: ::core::clone::Clone,
        N,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
            AddBatchTransactionsToSyndicateSequencingChainContractInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`SyndicateSequencingChainContract`] function.
        pub fn SyndicateSequencingChainContract(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            SyndicateSequencingChainContractCall,
            N,
        > {
            self.call_builder(&SyndicateSequencingChainContractCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToSyndicateSequencingChainContractInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
