/**

Generated by the following Solidity interface...
```solidity
interface SP1VerifierGateway {
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error RouteAlreadyExists(address verifier);
    error RouteIsFrozen(bytes4 selector);
    error RouteNotFound(bytes4 selector);
    error SelectorCannotBeZero();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RouteAdded(bytes4 selector, address verifier);
    event RouteFrozen(bytes4 selector, address verifier);

    constructor(address initialOwner);

    function addRoute(address verifier) external;
    function freezeRoute(bytes4 selector) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function routes(bytes4) external view returns (address verifier, bool frozen);
    function transferOwnership(address newOwner) external;
    function verifyProof(bytes32 programVKey, bytes memory publicValues, bytes memory proofBytes) external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "initialOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addRoute",
    "inputs": [
      {
        "name": "verifier",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "freezeRoute",
    "inputs": [
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "routes",
    "inputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "verifier",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "frozen",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "verifyProof",
    "inputs": [
      {
        "name": "programVKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RouteAdded",
    "inputs": [
      {
        "name": "selector",
        "type": "bytes4",
        "indexed": false,
        "internalType": "bytes4"
      },
      {
        "name": "verifier",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RouteFrozen",
    "inputs": [
      {
        "name": "selector",
        "type": "bytes4",
        "indexed": false,
        "internalType": "bytes4"
      },
      {
        "name": "verifier",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "RouteAlreadyExists",
    "inputs": [
      {
        "name": "verifier",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "RouteIsFrozen",
    "inputs": [
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ]
  },
  {
    "type": "error",
    "name": "RouteNotFound",
    "inputs": [
      {
        "name": "selector",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ]
  },
  {
    "type": "error",
    "name": "SelectorCannotBeZero",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SP1VerifierGateway {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x0E\0a\x02\xCF\x829a\x0E\0\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x10\xCF\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01pV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[a\x01W\x90a\0\xA7V[\x90RV[\x91\x90a\x01n\x90_` \x85\x01\x94\x01\x90a\x01NV[V[\x80a\x01\x8Ba\x01\x85a\x01\x80_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\x9BWa\x01\x99\x90a\x02oV[V[a\x01\xBEa\x01\xA7_a\x01BV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01[V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xDEa\x01\xE3\x91a\x01\xC2V[a\x01\xC7V[\x90V[a\x01\xF0\x90Ta\x01\xD2V[\x90V[_\x1B\x90V[\x90a\x02\t`\x01\x80`\xA0\x1B\x03\x91a\x01\xF3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02'a\x02\"a\x02,\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x028\x90a\x02\x13V[\x90V[a\x02D\x90a\x02/V[\x90V[\x90V[\x90a\x02_a\x02Za\x02f\x92a\x02;V[a\x02GV[\x82Ta\x01\xF8V[\x90UV[_\x01\x90V[a\x02x_a\x01\xE6V[a\x02\x82\x82_a\x02JV[\x90a\x02\xB6a\x02\xB0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02;V[\x91a\x02;V[\x91a\x02\xBFa\x004V[\x80a\x02\xC9\x81a\x02jV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\xA3V[a\0\x1D_5a\0\x8CV[\x80cAI<`\x14a\0\x87W\x80cQ\xC7\tO\x14a\0\x82W\x80cqP\x18\xA6\x14a\0}W\x80c\x81HV\xF4\x14a\0xW\x80c\x8C\x95\xFF\x1E\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04pV[a\x04;V[a\x03\xF3V[a\x03\x7FV[a\x03LV[a\x03\x07V[a\x01\x85V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90V[a\0\xB0\x81a\0\xA4V[\x03a\0\xB7WV[_\x80\xFD[\x90P5\x90a\0\xC8\x82a\0\xA7V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x10W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x0BW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x06WV[a\0\xD2V[a\0\xCEV[a\0\xCAV[``\x81\x83\x03\x12a\x01{Wa\x01+\x82_\x83\x01a\0\xBBV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01vW\x83a\x01L\x91\x84\x01a\0\xD6V[\x92\x90\x93`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01qWa\x01m\x92\x01a\0\xD6V[\x90\x91V[a\0\xA0V[a\0\xA0V[a\0\x9CV[_\x01\x90V[4a\x01\xB7Wa\x01\xA1a\x01\x986`\x04a\x01\x15V[\x93\x92\x90\x92a\x07gV[a\x01\xA9a\0\x92V[\x80a\x01\xB3\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\xD1\x81a\x01\xBCV[\x03a\x01\xD8WV[_\x80\xFD[\x90P5\x90a\x01\xE9\x82a\x01\xC8V[V[\x90` \x82\x82\x03\x12a\x02\x04Wa\x02\x01\x91_\x01a\x01\xDCV[\x90V[a\0\x9CV[a\x02\x12\x90a\x01\xBCV[\x90V[\x90a\x02\x1F\x90a\x02\tV[_R` R`@_ \x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02Ga\x02L\x91a\x02+V[a\x020V[\x90V[a\x02Y\x90Ta\x02;V[\x90V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x02ta\x02y\x91a\x02\\V[a\x02bV[\x90V[a\x02\x86\x90Ta\x02hV[\x90V[a\x02\x94\x90`\x01a\x02\x15V[\x90a\x02\xAB_a\x02\xA4\x81\x85\x01a\x02OV[\x93\x01a\x02|V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xC2\x90a\x02\xAEV[\x90V[a\x02\xCE\x90a\x02\xB9V[\x90RV[\x15\x15\x90V[a\x02\xE0\x90a\x02\xD2V[\x90RV[\x91` a\x03\x05\x92\x94\x93a\x02\xFE`@\x82\x01\x96_\x83\x01\x90a\x02\xC5V[\x01\x90a\x02\xD7V[V[4a\x038Wa\x03\x1Fa\x03\x1A6`\x04a\x01\xEBV[a\x02\x89V[\x90a\x034a\x03+a\0\x92V[\x92\x83\x92\x83a\x02\xE4V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x03GWV[a\0\x9CV[4a\x03zWa\x03\\6`\x04a\x03=V[a\x03da\x08\xE5V[a\x03la\0\x92V[\x80a\x03v\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[4a\x03\xADWa\x03\x97a\x03\x926`\x04a\x01\xEBV[a\nVV[a\x03\x9Fa\0\x92V[\x80a\x03\xA9\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[a\x03\xBB\x81a\x02\xB9V[\x03a\x03\xC2WV[_\x80\xFD[\x90P5\x90a\x03\xD3\x82a\x03\xB2V[V[\x90` \x82\x82\x03\x12a\x03\xEEWa\x03\xEB\x91_\x01a\x03\xC6V[\x90V[a\0\x9CV[4a\x04!Wa\x04\x0Ba\x04\x066`\x04a\x03\xD5V[a\x0C\xB2V[a\x04\x13a\0\x92V[\x80a\x04\x1D\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[\x91\x90a\x049\x90_` \x85\x01\x94\x01\x90a\x02\xC5V[V[4a\x04kWa\x04K6`\x04a\x03=V[a\x04ga\x04Va\x0C\xC1V[a\x04^a\0\x92V[\x91\x82\x91\x82a\x04&V[\x03\x90\xF3[a\0\x98V[4a\x04\x9EWa\x04\x88a\x04\x836`\x04a\x03\xD5V[a\r;V[a\x04\x90a\0\x92V[\x80a\x04\x9A\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[\x90V[\x90V[\x90V[a\x04\xC4a\x04\xBFa\x04\xC9\x92a\x04\xA7V[a\x04\xADV[a\x04\xAAV[\x90V[_\x80\xFD[_\x80\xFD[\x90\x93\x92\x93\x84\x83\x11a\x04\xF4W\x84\x11a\x04\xEFW`\x01\x82\x02\x01\x92\x03\x90V[a\x04\xD0V[a\x04\xCCV[P\x90V[\x1B\x90V[\x90a\x05\x0Fa\x05\x16\x91\x83a\x04\xF9V[\x915a\x01\xBCV[\x90`\x04\x81\x10a\x05$W[P\x90V[a\x05<\x90c\xFF\xFF\xFF\xFF`\xE0\x1B\x90`\x04\x03`\x08\x02a\x04\xFDV[\x16_a\x05 V[\x90a\x05M\x90a\x02\xB9V[\x90RV[\x90a\x05[\x90a\x02\xD2V[\x90RV[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05\x87\x90a\x05_V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\xA1W`@RV[a\x05iV[\x90a\x05\xB9a\x05\xB2a\0\x92V[\x92\x83a\x05}V[V[a\x05\xC5`@a\x05\xA6V[\x90V[\x90a\x05\xFEa\x05\xF5_a\x05\xD8a\x05\xBBV[\x94a\x05\xEFa\x05\xE7\x83\x83\x01a\x02OV[\x83\x88\x01a\x05CV[\x01a\x02|V[` \x84\x01a\x05QV[V[a\x06\t\x90a\x05\xC8V[\x90V[a\x06\x16\x90Qa\x02\xB9V[\x90V[\x90V[a\x060a\x06+a\x065\x92a\x06\x19V[a\x04\xADV[a\x02\xAEV[\x90V[a\x06A\x90a\x06\x1CV[\x90V[a\x06N\x90Qa\x02\xD2V[\x90V[a\x06Z\x90a\x01\xBCV[\x90RV[\x91\x90a\x06q\x90_` \x85\x01\x94\x01\x90a\x06QV[V[a\x06\x87a\x06\x82a\x06\x8C\x92a\x02\xAEV[a\x04\xADV[a\x02\xAEV[\x90V[a\x06\x98\x90a\x06sV[\x90V[a\x06\xA4\x90a\x06\x8FV[\x90V[a\x06\xB0\x90a\x06sV[\x90V[a\x06\xBC\x90a\x06\xA7V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x06\xD3WV[a\0\x9CV[a\x06\xE1\x90a\0\xA4V[\x90RV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x07\x13\x81a\x07\x0C\x81a\x07\x18\x95a\x06\xE5V[\x80\x95a\x06\xEEV[a\x05_V[\x01\x90V[\x93\x91\x90a\x07T\x95\x93a\x07F\x92a\x079``\x88\x01\x93_\x89\x01\x90a\x06\xD8V[\x86\x83\x03` \x88\x01Ra\x06\xF9V[\x92`@\x81\x85\x03\x91\x01Ra\x06\xF9V[\x90V[a\x07_a\0\x92V[=_\x82>=\x90\xFD[\x92\x91\x92a\x07\x8Ba\x07\x85\x84\x87`\x04\x90a\x07\x7F_\x92a\x04\xB0V[\x92a\x04\xD4V[\x90a\x05\x01V[\x94a\x07\xA0a\x07\x9B`\x01\x88\x90a\x02\x15V[a\x06\0V[a\x07\xAB_\x82\x01a\x06\x0CV[a\x07\xC5a\x07\xBFa\x07\xBA_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x14_\x14a\x07\xEBWa\x07\xE7\x87_\x91\x82\x91cy\x04;\xBF`\xE1\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[\x90\x91\x92\x93\x94\x95a\x07\xFD` \x83\x01a\x06DV[a\x08\xA1WPa\x08\x18a\x08\x13_a\x08\x1D\x93\x01a\x06\x0CV[a\x06\x9BV[a\x06\xB3V[\x91cAI<`\x90\x93\x95\x94\x91\x94\x83;\x15a\x08\x9CW_\x95a\x08N\x93a\x08Y\x92a\x08Ba\0\x92V[\x99\x8A\x98\x89\x97\x88\x97a\x06\xC3V[\x87R`\x04\x87\x01a\x07\x1CV[\x03\x91Z\xFA\x80\x15a\x08\x97Wa\x08kW[PV[a\x08\x8A\x90_=\x81\x11a\x08\x90W[a\x08\x82\x81\x83a\x05}V[\x81\x01\x90a\x06\xC9V[_a\x08hV[P=a\x08xV[a\x07WV[a\x06\xBFV[a\x08\xBC\x90_\x91\x82\x91c\xEB\xF1\x08#`\xE0\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[a\x08\xC8a\rFV[a\x08\xD0a\x08\xD2V[V[a\x08\xE3a\x08\xDE_a\x068V[a\r\x94V[V[a\x08\xEDa\x08\xC0V[V[a\t\0\x90a\x08\xFBa\rFV[a\tvV[V[\x90V[`\xA0\x1B\x90V[\x90a\t\x1A`\xFF`\xA0\x1B\x91a\t\x05V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t-\x90a\x02\xD2V[\x90V[\x90V[\x90a\tHa\tCa\tO\x92a\t$V[a\t0V[\x82Ta\t\x0BV[\x90UV[\x91` a\tt\x92\x94\x93a\tm`@\x82\x01\x96_\x83\x01\x90a\x06QV[\x01\x90a\x02\xC5V[V[a\t\x8Aa\t\x85`\x01\x83\x90a\x02\x15V[a\t\x02V[\x90a\t\x96_\x83\x01a\x02OV[a\t\xB0a\t\xAAa\t\xA5_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\n7Wa\t\xC0_\x83\x01a\x02|V[a\n\x18W_a\t\xDD\x91a\t\xD6`\x01\x83\x86\x01a\t3V[\x92\x01a\x02OV[\x7Fc\xAD#c\xB1\x83\xCB\x8B\xB5b\xB9Y\x0C[D(\xE2\xA5f&\r\xF0S\xDB\x15ev\xD3\xD1qC\x8D\x91a\n\x13a\n\na\0\x92V[\x92\x83\x92\x83a\tSV[\x03\x90\xA1V[a\n3\x90_\x91\x82\x91c\xEB\xF1\x08#`\xE0\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[a\nR\x90_\x91\x82\x91cy\x04;\xBF`\xE1\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[a\n_\x90a\x08\xEFV[V[a\nr\x90a\nma\rFV[a\x0B<V[V[a\n}\x90a\x06sV[\x90V[a\n\x89\x90a\ntV[\x90V[a\n\x95\x90a\x06\xA7V[\x90V[\x90PQ\x90a\n\xA5\x82a\0\xA7V[V[\x90` \x82\x82\x03\x12a\n\xC0Wa\n\xBD\x91_\x01a\n\x98V[\x90V[a\0\x9CV[a\n\xCE\x90a\x01\xBCV[\x90V[a\n\xE5a\n\xE0a\n\xEA\x92a\x06\x19V[a\x06\xC3V[a\x01\xBCV[\x90V[_\x1B\x90V[\x90a\x0B\x03`\x01\x80`\xA0\x1B\x03\x91a\n\xEDV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x16\x90a\x06\xA7V[\x90V[\x90V[\x90a\x0B1a\x0B,a\x0B8\x92a\x0B\rV[a\x0B\x19V[\x82Ta\n\xF2V[\x90UV[a\x0Bh` a\x0BRa\x0BM\x84a\n\x80V[a\n\x8CV[c*Q\x046\x90a\x0B`a\0\x92V[\x93\x84\x92a\x06\xC3V[\x82R\x81\x80a\x0Bx`\x04\x82\x01a\x01\x80V[\x03\x91Z\xFA\x80\x15a\x0C\xADWa\x0B\x93\x91_\x91a\x0C\x7FW[Pa\n\xC5V[\x80a\x0B\xAEa\x0B\xA8a\x0B\xA3_a\n\xD1V[a\x01\xBCV[\x91a\x01\xBCV[\x14a\x0CcWa\x0B\xC7a\x0B\xC2`\x01\x83\x90a\x02\x15V[a\t\x02V[a\x0B\xD2_\x82\x01a\x02OV[a\x0B\xECa\x0B\xE6a\x0B\xE1_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\x0C:Wa\x0B\xFE\x90_\x84\x91\x01a\x0B\x1CV[\x90\x7F\xCB\\\xC5O\xA0\xFD\xA4\x17D\x19{(j\xB4\x13Z\xEC|2,\xAC\xE3,OU\xDAr=.\xB8\xEE\xE6\x91a\x0C5a\x0C,a\0\x92V[\x92\x83\x92\x83a\tSV[\x03\x90\xA1V[a\x0CH_a\x0C_\x92\x01a\x02OV[_\x91\x82\x91c+\x87\xE7\x97`\xE0\x1B\x83R`\x04\x83\x01a\x04&V[\x03\x90\xFD[_c \xAC\xD2\x8B`\xE0\x1B\x81R\x80a\x0C{`\x04\x82\x01a\x01\x80V[\x03\x90\xFD[a\x0C\xA0\x91P` =\x81\x11a\x0C\xA6W[a\x0C\x98\x81\x83a\x05}V[\x81\x01\x90a\n\xA7V[_a\x0B\x8DV[P=a\x0C\x8EV[a\x07WV[a\x0C\xBB\x90a\naV[V[_\x90V[a\x0C\xC9a\x0C\xBDV[Pa\x0C\xD3_a\x02OV[\x90V[a\x0C\xE7\x90a\x0C\xE2a\rFV[a\x0C\xE9V[V[\x80a\r\x04a\x0C\xFEa\x0C\xF9_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\r\x14Wa\r\x12\x90a\r\x94V[V[a\r7a\r _a\x068V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04&V[\x03\x90\xFD[a\rD\x90a\x0C\xD6V[V[a\rNa\x0C\xC1V[a\rga\raa\r\\a\r\xF3V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\rnWV[a\r\x90a\rya\r\xF3V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x04&V[\x03\x90\xFD[a\r\x9D_a\x02OV[a\r\xA7\x82_a\x0B\x1CV[\x90a\r\xDBa\r\xD5\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\rV[\x91a\x0B\rV[\x91a\r\xE4a\0\x92V[\x80a\r\xEE\x81a\x01\x80V[\x03\x90\xA3V[a\r\xFBa\x0C\xBDV[P3\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6104a3565b61001d5f3561008c565b806341493c601461008757806351c7094f14610082578063715018a61461007d578063814856f4146100785780638c95ff1e146100735780638da5cb5b1461006e5763f2fde38b0361000e57610470565b61043b565b6103f3565b61037f565b61034c565b610307565b610185565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b90565b6100b0816100a4565b036100b757565b5f80fd5b905035906100c8826100a7565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101105781359167ffffffffffffffff831161010b57602001926001830284011161010657565b6100d2565b6100ce565b6100ca565b60608183031261017b5761012b825f83016100bb565b92602082013567ffffffffffffffff8111610176578361014c9184016100d6565b929093604082013567ffffffffffffffff81116101715761016d92016100d6565b9091565b6100a0565b6100a0565b61009c565b5f0190565b346101b7576101a1610198366004610115565b93929092610767565b6101a9610092565b806101b381610180565b0390f35b610098565b63ffffffff60e01b1690565b6101d1816101bc565b036101d857565b5f80fd5b905035906101e9826101c8565b565b9060208282031261020457610201915f016101dc565b90565b61009c565b610212906101bc565b90565b9061021f90610209565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b61024761024c9161022b565b610230565b90565b610259905461023b565b90565b60a01c90565b60ff1690565b6102746102799161025c565b610262565b90565b6102869054610268565b90565b610294906001610215565b906102ab5f6102a481850161024f565b930161027c565b90565b60018060a01b031690565b6102c2906102ae565b90565b6102ce906102b9565b9052565b151590565b6102e0906102d2565b9052565b9160206103059294936102fe60408201965f8301906102c5565b01906102d7565b565b346103385761031f61031a3660046101eb565b610289565b9061033461032b610092565b928392836102e4565b0390f35b610098565b5f91031261034757565b61009c565b3461037a5761035c36600461033d565b6103646108e5565b61036c610092565b8061037681610180565b0390f35b610098565b346103ad576103976103923660046101eb565b610a56565b61039f610092565b806103a981610180565b0390f35b610098565b6103bb816102b9565b036103c257565b5f80fd5b905035906103d3826103b2565b565b906020828203126103ee576103eb915f016103c6565b90565b61009c565b346104215761040b6104063660046103d5565b610cb2565b610413610092565b8061041d81610180565b0390f35b610098565b9190610439905f602085019401906102c5565b565b3461046b5761044b36600461033d565b610467610456610cc1565b61045e610092565b91829182610426565b0390f35b610098565b3461049e576104886104833660046103d5565b610d3b565b610490610092565b8061049a81610180565b0390f35b610098565b5f80fd5b90565b90565b90565b6104c46104bf6104c9926104a7565b6104ad565b6104aa565b90565b5f80fd5b5f80fd5b909392938483116104f45784116104ef576001820201920390565b6104d0565b6104cc565b5090565b1b90565b9061050f61051691836104f9565b91356101bc565b9060048110610524575b5090565b61053c9063ffffffff60e01b906004036008026104fd565b165f610520565b9061054d906102b9565b9052565b9061055b906102d2565b9052565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906105879061055f565b810190811067ffffffffffffffff8211176105a157604052565b610569565b906105b96105b2610092565b928361057d565b565b6105c560406105a6565b90565b906105fe6105f55f6105d86105bb565b946105ef6105e783830161024f565b838801610543565b0161027c565b60208401610551565b565b610609906105c8565b90565b61061690516102b9565b90565b90565b61063061062b61063592610619565b6104ad565b6102ae565b90565b6106419061061c565b90565b61064e90516102d2565b90565b61065a906101bc565b9052565b9190610671905f60208501940190610651565b565b61068761068261068c926102ae565b6104ad565b6102ae565b90565b61069890610673565b90565b6106a49061068f565b90565b6106b090610673565b90565b6106bc906106a7565b90565b5f80fd5b60e01b90565b5f9103126106d357565b61009c565b6106e1906100a4565b9052565b60209181520190565b90825f939282370152565b91906107138161070c81610718956106e5565b80956106ee565b61055f565b0190565b93919061075495936107469261073960608801935f8901906106d8565b86830360208801526106f9565b9260408185039101526106f9565b90565b61075f610092565b3d5f823e3d90fd5b92919261078b610785848760049061077f5f926104b0565b926104d4565b90610501565b946107a061079b60018890610215565b610600565b6107ab5f820161060c565b6107c56107bf6107ba5f610638565b6102b9565b916102b9565b145f146107eb576107e7875f9182916379043bbf60e11b83526004830161065e565b0390fd5b9091929394956107fd60208301610644565b6108a157506108186108135f61081d930161060c565b61069b565b6106b3565b916341493c60909395949194833b1561089c575f9561084e9361085992610842610092565b998a98899788976106c3565b87526004870161071c565b03915afa80156108975761086b575b50565b61088a905f3d8111610890575b610882818361057d565b8101906106c9565b5f610868565b503d610878565b610757565b6106bf565b6108bc905f91829163ebf1082360e01b83526004830161065e565b0390fd5b6108c8610d46565b6108d06108d2565b565b6108e36108de5f610638565b610d94565b565b6108ed6108c0565b565b610900906108fb610d46565b610976565b565b90565b60a01b90565b9061091a60ff60a01b91610905565b9181191691161790565b61092d906102d2565b90565b90565b9061094861094361094f92610924565b610930565b825461090b565b9055565b91602061097492949361096d60408201965f830190610651565b01906102c5565b565b61098a61098560018390610215565b610902565b906109965f830161024f565b6109b06109aa6109a55f610638565b6102b9565b916102b9565b14610a37576109c05f830161027c565b610a18575f6109dd916109d66001838601610933565b920161024f565b7f63ad2363b183cb8bb562b9590c5b4428e2a566260df053db156576d3d171438d91610a13610a0a610092565b92839283610953565b0390a1565b610a33905f91829163ebf1082360e01b83526004830161065e565b0390fd5b610a52905f9182916379043bbf60e11b83526004830161065e565b0390fd5b610a5f906108ef565b565b610a7290610a6d610d46565b610b3c565b565b610a7d90610673565b90565b610a8990610a74565b90565b610a95906106a7565b90565b90505190610aa5826100a7565b565b90602082820312610ac057610abd915f01610a98565b90565b61009c565b610ace906101bc565b90565b610ae5610ae0610aea92610619565b6106c3565b6101bc565b90565b5f1b90565b90610b0360018060a01b0391610aed565b9181191691161790565b610b16906106a7565b90565b90565b90610b31610b2c610b3892610b0d565b610b19565b8254610af2565b9055565b610b686020610b52610b4d84610a80565b610a8c565b632a51043690610b60610092565b9384926106c3565b82528180610b7860048201610180565b03915afa8015610cad57610b93915f91610c7f575b50610ac5565b80610bae610ba8610ba35f610ad1565b6101bc565b916101bc565b14610c6357610bc7610bc260018390610215565b610902565b610bd25f820161024f565b610bec610be6610be15f610638565b6102b9565b916102b9565b03610c3a57610bfe905f849101610b1c565b907fcb5cc54fa0fda41744197b286ab4135aec7c322cace32c4f55da723d2eb8eee691610c35610c2c610092565b92839283610953565b0390a1565b610c485f610c5f920161024f565b5f918291632b87e79760e01b835260048301610426565b0390fd5b5f6320acd28b60e01b815280610c7b60048201610180565b0390fd5b610ca0915060203d8111610ca6575b610c98818361057d565b810190610aa7565b5f610b8d565b503d610c8e565b610757565b610cbb90610a61565b565b5f90565b610cc9610cbd565b50610cd35f61024f565b90565b610ce790610ce2610d46565b610ce9565b565b80610d04610cfe610cf95f610638565b6102b9565b916102b9565b14610d1457610d1290610d94565b565b610d37610d205f610638565b5f918291631e4fbdf760e01b835260048301610426565b0390fd5b610d4490610cd6565b565b610d4e610cc1565b610d67610d61610d5c610df3565b6102b9565b916102b9565b03610d6e57565b610d90610d79610df3565b5f91829163118cdaa760e01b835260048301610426565b0390fd5b610d9d5f61024f565b610da7825f610b1c565b90610ddb610dd57f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610b0d565b91610b0d565b91610de4610092565b80610dee81610180565b0390a3565b610dfb610cbd565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\xA3V[a\0\x1D_5a\0\x8CV[\x80cAI<`\x14a\0\x87W\x80cQ\xC7\tO\x14a\0\x82W\x80cqP\x18\xA6\x14a\0}W\x80c\x81HV\xF4\x14a\0xW\x80c\x8C\x95\xFF\x1E\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04pV[a\x04;V[a\x03\xF3V[a\x03\x7FV[a\x03LV[a\x03\x07V[a\x01\x85V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90V[a\0\xB0\x81a\0\xA4V[\x03a\0\xB7WV[_\x80\xFD[\x90P5\x90a\0\xC8\x82a\0\xA7V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x10W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x0BW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x06WV[a\0\xD2V[a\0\xCEV[a\0\xCAV[``\x81\x83\x03\x12a\x01{Wa\x01+\x82_\x83\x01a\0\xBBV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01vW\x83a\x01L\x91\x84\x01a\0\xD6V[\x92\x90\x93`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01qWa\x01m\x92\x01a\0\xD6V[\x90\x91V[a\0\xA0V[a\0\xA0V[a\0\x9CV[_\x01\x90V[4a\x01\xB7Wa\x01\xA1a\x01\x986`\x04a\x01\x15V[\x93\x92\x90\x92a\x07gV[a\x01\xA9a\0\x92V[\x80a\x01\xB3\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\xD1\x81a\x01\xBCV[\x03a\x01\xD8WV[_\x80\xFD[\x90P5\x90a\x01\xE9\x82a\x01\xC8V[V[\x90` \x82\x82\x03\x12a\x02\x04Wa\x02\x01\x91_\x01a\x01\xDCV[\x90V[a\0\x9CV[a\x02\x12\x90a\x01\xBCV[\x90V[\x90a\x02\x1F\x90a\x02\tV[_R` R`@_ \x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02Ga\x02L\x91a\x02+V[a\x020V[\x90V[a\x02Y\x90Ta\x02;V[\x90V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x02ta\x02y\x91a\x02\\V[a\x02bV[\x90V[a\x02\x86\x90Ta\x02hV[\x90V[a\x02\x94\x90`\x01a\x02\x15V[\x90a\x02\xAB_a\x02\xA4\x81\x85\x01a\x02OV[\x93\x01a\x02|V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xC2\x90a\x02\xAEV[\x90V[a\x02\xCE\x90a\x02\xB9V[\x90RV[\x15\x15\x90V[a\x02\xE0\x90a\x02\xD2V[\x90RV[\x91` a\x03\x05\x92\x94\x93a\x02\xFE`@\x82\x01\x96_\x83\x01\x90a\x02\xC5V[\x01\x90a\x02\xD7V[V[4a\x038Wa\x03\x1Fa\x03\x1A6`\x04a\x01\xEBV[a\x02\x89V[\x90a\x034a\x03+a\0\x92V[\x92\x83\x92\x83a\x02\xE4V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x03GWV[a\0\x9CV[4a\x03zWa\x03\\6`\x04a\x03=V[a\x03da\x08\xE5V[a\x03la\0\x92V[\x80a\x03v\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[4a\x03\xADWa\x03\x97a\x03\x926`\x04a\x01\xEBV[a\nVV[a\x03\x9Fa\0\x92V[\x80a\x03\xA9\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[a\x03\xBB\x81a\x02\xB9V[\x03a\x03\xC2WV[_\x80\xFD[\x90P5\x90a\x03\xD3\x82a\x03\xB2V[V[\x90` \x82\x82\x03\x12a\x03\xEEWa\x03\xEB\x91_\x01a\x03\xC6V[\x90V[a\0\x9CV[4a\x04!Wa\x04\x0Ba\x04\x066`\x04a\x03\xD5V[a\x0C\xB2V[a\x04\x13a\0\x92V[\x80a\x04\x1D\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[\x91\x90a\x049\x90_` \x85\x01\x94\x01\x90a\x02\xC5V[V[4a\x04kWa\x04K6`\x04a\x03=V[a\x04ga\x04Va\x0C\xC1V[a\x04^a\0\x92V[\x91\x82\x91\x82a\x04&V[\x03\x90\xF3[a\0\x98V[4a\x04\x9EWa\x04\x88a\x04\x836`\x04a\x03\xD5V[a\r;V[a\x04\x90a\0\x92V[\x80a\x04\x9A\x81a\x01\x80V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[\x90V[\x90V[\x90V[a\x04\xC4a\x04\xBFa\x04\xC9\x92a\x04\xA7V[a\x04\xADV[a\x04\xAAV[\x90V[_\x80\xFD[_\x80\xFD[\x90\x93\x92\x93\x84\x83\x11a\x04\xF4W\x84\x11a\x04\xEFW`\x01\x82\x02\x01\x92\x03\x90V[a\x04\xD0V[a\x04\xCCV[P\x90V[\x1B\x90V[\x90a\x05\x0Fa\x05\x16\x91\x83a\x04\xF9V[\x915a\x01\xBCV[\x90`\x04\x81\x10a\x05$W[P\x90V[a\x05<\x90c\xFF\xFF\xFF\xFF`\xE0\x1B\x90`\x04\x03`\x08\x02a\x04\xFDV[\x16_a\x05 V[\x90a\x05M\x90a\x02\xB9V[\x90RV[\x90a\x05[\x90a\x02\xD2V[\x90RV[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05\x87\x90a\x05_V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\xA1W`@RV[a\x05iV[\x90a\x05\xB9a\x05\xB2a\0\x92V[\x92\x83a\x05}V[V[a\x05\xC5`@a\x05\xA6V[\x90V[\x90a\x05\xFEa\x05\xF5_a\x05\xD8a\x05\xBBV[\x94a\x05\xEFa\x05\xE7\x83\x83\x01a\x02OV[\x83\x88\x01a\x05CV[\x01a\x02|V[` \x84\x01a\x05QV[V[a\x06\t\x90a\x05\xC8V[\x90V[a\x06\x16\x90Qa\x02\xB9V[\x90V[\x90V[a\x060a\x06+a\x065\x92a\x06\x19V[a\x04\xADV[a\x02\xAEV[\x90V[a\x06A\x90a\x06\x1CV[\x90V[a\x06N\x90Qa\x02\xD2V[\x90V[a\x06Z\x90a\x01\xBCV[\x90RV[\x91\x90a\x06q\x90_` \x85\x01\x94\x01\x90a\x06QV[V[a\x06\x87a\x06\x82a\x06\x8C\x92a\x02\xAEV[a\x04\xADV[a\x02\xAEV[\x90V[a\x06\x98\x90a\x06sV[\x90V[a\x06\xA4\x90a\x06\x8FV[\x90V[a\x06\xB0\x90a\x06sV[\x90V[a\x06\xBC\x90a\x06\xA7V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x06\xD3WV[a\0\x9CV[a\x06\xE1\x90a\0\xA4V[\x90RV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x07\x13\x81a\x07\x0C\x81a\x07\x18\x95a\x06\xE5V[\x80\x95a\x06\xEEV[a\x05_V[\x01\x90V[\x93\x91\x90a\x07T\x95\x93a\x07F\x92a\x079``\x88\x01\x93_\x89\x01\x90a\x06\xD8V[\x86\x83\x03` \x88\x01Ra\x06\xF9V[\x92`@\x81\x85\x03\x91\x01Ra\x06\xF9V[\x90V[a\x07_a\0\x92V[=_\x82>=\x90\xFD[\x92\x91\x92a\x07\x8Ba\x07\x85\x84\x87`\x04\x90a\x07\x7F_\x92a\x04\xB0V[\x92a\x04\xD4V[\x90a\x05\x01V[\x94a\x07\xA0a\x07\x9B`\x01\x88\x90a\x02\x15V[a\x06\0V[a\x07\xAB_\x82\x01a\x06\x0CV[a\x07\xC5a\x07\xBFa\x07\xBA_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x14_\x14a\x07\xEBWa\x07\xE7\x87_\x91\x82\x91cy\x04;\xBF`\xE1\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[\x90\x91\x92\x93\x94\x95a\x07\xFD` \x83\x01a\x06DV[a\x08\xA1WPa\x08\x18a\x08\x13_a\x08\x1D\x93\x01a\x06\x0CV[a\x06\x9BV[a\x06\xB3V[\x91cAI<`\x90\x93\x95\x94\x91\x94\x83;\x15a\x08\x9CW_\x95a\x08N\x93a\x08Y\x92a\x08Ba\0\x92V[\x99\x8A\x98\x89\x97\x88\x97a\x06\xC3V[\x87R`\x04\x87\x01a\x07\x1CV[\x03\x91Z\xFA\x80\x15a\x08\x97Wa\x08kW[PV[a\x08\x8A\x90_=\x81\x11a\x08\x90W[a\x08\x82\x81\x83a\x05}V[\x81\x01\x90a\x06\xC9V[_a\x08hV[P=a\x08xV[a\x07WV[a\x06\xBFV[a\x08\xBC\x90_\x91\x82\x91c\xEB\xF1\x08#`\xE0\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[a\x08\xC8a\rFV[a\x08\xD0a\x08\xD2V[V[a\x08\xE3a\x08\xDE_a\x068V[a\r\x94V[V[a\x08\xEDa\x08\xC0V[V[a\t\0\x90a\x08\xFBa\rFV[a\tvV[V[\x90V[`\xA0\x1B\x90V[\x90a\t\x1A`\xFF`\xA0\x1B\x91a\t\x05V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t-\x90a\x02\xD2V[\x90V[\x90V[\x90a\tHa\tCa\tO\x92a\t$V[a\t0V[\x82Ta\t\x0BV[\x90UV[\x91` a\tt\x92\x94\x93a\tm`@\x82\x01\x96_\x83\x01\x90a\x06QV[\x01\x90a\x02\xC5V[V[a\t\x8Aa\t\x85`\x01\x83\x90a\x02\x15V[a\t\x02V[\x90a\t\x96_\x83\x01a\x02OV[a\t\xB0a\t\xAAa\t\xA5_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\n7Wa\t\xC0_\x83\x01a\x02|V[a\n\x18W_a\t\xDD\x91a\t\xD6`\x01\x83\x86\x01a\t3V[\x92\x01a\x02OV[\x7Fc\xAD#c\xB1\x83\xCB\x8B\xB5b\xB9Y\x0C[D(\xE2\xA5f&\r\xF0S\xDB\x15ev\xD3\xD1qC\x8D\x91a\n\x13a\n\na\0\x92V[\x92\x83\x92\x83a\tSV[\x03\x90\xA1V[a\n3\x90_\x91\x82\x91c\xEB\xF1\x08#`\xE0\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[a\nR\x90_\x91\x82\x91cy\x04;\xBF`\xE1\x1B\x83R`\x04\x83\x01a\x06^V[\x03\x90\xFD[a\n_\x90a\x08\xEFV[V[a\nr\x90a\nma\rFV[a\x0B<V[V[a\n}\x90a\x06sV[\x90V[a\n\x89\x90a\ntV[\x90V[a\n\x95\x90a\x06\xA7V[\x90V[\x90PQ\x90a\n\xA5\x82a\0\xA7V[V[\x90` \x82\x82\x03\x12a\n\xC0Wa\n\xBD\x91_\x01a\n\x98V[\x90V[a\0\x9CV[a\n\xCE\x90a\x01\xBCV[\x90V[a\n\xE5a\n\xE0a\n\xEA\x92a\x06\x19V[a\x06\xC3V[a\x01\xBCV[\x90V[_\x1B\x90V[\x90a\x0B\x03`\x01\x80`\xA0\x1B\x03\x91a\n\xEDV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x16\x90a\x06\xA7V[\x90V[\x90V[\x90a\x0B1a\x0B,a\x0B8\x92a\x0B\rV[a\x0B\x19V[\x82Ta\n\xF2V[\x90UV[a\x0Bh` a\x0BRa\x0BM\x84a\n\x80V[a\n\x8CV[c*Q\x046\x90a\x0B`a\0\x92V[\x93\x84\x92a\x06\xC3V[\x82R\x81\x80a\x0Bx`\x04\x82\x01a\x01\x80V[\x03\x91Z\xFA\x80\x15a\x0C\xADWa\x0B\x93\x91_\x91a\x0C\x7FW[Pa\n\xC5V[\x80a\x0B\xAEa\x0B\xA8a\x0B\xA3_a\n\xD1V[a\x01\xBCV[\x91a\x01\xBCV[\x14a\x0CcWa\x0B\xC7a\x0B\xC2`\x01\x83\x90a\x02\x15V[a\t\x02V[a\x0B\xD2_\x82\x01a\x02OV[a\x0B\xECa\x0B\xE6a\x0B\xE1_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\x0C:Wa\x0B\xFE\x90_\x84\x91\x01a\x0B\x1CV[\x90\x7F\xCB\\\xC5O\xA0\xFD\xA4\x17D\x19{(j\xB4\x13Z\xEC|2,\xAC\xE3,OU\xDAr=.\xB8\xEE\xE6\x91a\x0C5a\x0C,a\0\x92V[\x92\x83\x92\x83a\tSV[\x03\x90\xA1V[a\x0CH_a\x0C_\x92\x01a\x02OV[_\x91\x82\x91c+\x87\xE7\x97`\xE0\x1B\x83R`\x04\x83\x01a\x04&V[\x03\x90\xFD[_c \xAC\xD2\x8B`\xE0\x1B\x81R\x80a\x0C{`\x04\x82\x01a\x01\x80V[\x03\x90\xFD[a\x0C\xA0\x91P` =\x81\x11a\x0C\xA6W[a\x0C\x98\x81\x83a\x05}V[\x81\x01\x90a\n\xA7V[_a\x0B\x8DV[P=a\x0C\x8EV[a\x07WV[a\x0C\xBB\x90a\naV[V[_\x90V[a\x0C\xC9a\x0C\xBDV[Pa\x0C\xD3_a\x02OV[\x90V[a\x0C\xE7\x90a\x0C\xE2a\rFV[a\x0C\xE9V[V[\x80a\r\x04a\x0C\xFEa\x0C\xF9_a\x068V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\r\x14Wa\r\x12\x90a\r\x94V[V[a\r7a\r _a\x068V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04&V[\x03\x90\xFD[a\rD\x90a\x0C\xD6V[V[a\rNa\x0C\xC1V[a\rga\raa\r\\a\r\xF3V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\rnWV[a\r\x90a\rya\r\xF3V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x04&V[\x03\x90\xFD[a\r\x9D_a\x02OV[a\r\xA7\x82_a\x0B\x1CV[\x90a\r\xDBa\r\xD5\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\rV[\x91a\x0B\rV[\x91a\r\xE4a\0\x92V[\x80a\r\xEE\x81a\x01\x80V[\x03\x90\xA3V[a\r\xFBa\x0C\xBDV[P3\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `RouteAlreadyExists(address)` and selector `0x2b87e797`.
```solidity
error RouteAlreadyExists(address verifier);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RouteAlreadyExists {
        #[allow(missing_docs)]
        pub verifier: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RouteAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: RouteAlreadyExists) -> Self {
                (value.verifier,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RouteAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { verifier: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RouteAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RouteAlreadyExists(address)";
            const SELECTOR: [u8; 4] = [43u8, 135u8, 231u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.verifier,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `RouteIsFrozen(bytes4)` and selector `0xebf10823`.
```solidity
error RouteIsFrozen(bytes4 selector);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RouteIsFrozen {
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RouteIsFrozen> for UnderlyingRustTuple<'_> {
            fn from(value: RouteIsFrozen) -> Self {
                (value.selector,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RouteIsFrozen {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { selector: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RouteIsFrozen {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RouteIsFrozen(bytes4)";
            const SELECTOR: [u8; 4] = [235u8, 241u8, 8u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `RouteNotFound(bytes4)` and selector `0xf208777e`.
```solidity
error RouteNotFound(bytes4 selector);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RouteNotFound {
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RouteNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: RouteNotFound) -> Self {
                (value.selector,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RouteNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { selector: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RouteNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RouteNotFound(bytes4)";
            const SELECTOR: [u8; 4] = [242u8, 8u8, 119u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SelectorCannotBeZero()` and selector `0x20acd28b`.
```solidity
error SelectorCannotBeZero();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SelectorCannotBeZero;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SelectorCannotBeZero> for UnderlyingRustTuple<'_> {
            fn from(value: SelectorCannotBeZero) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SelectorCannotBeZero {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SelectorCannotBeZero {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SelectorCannotBeZero()";
            const SELECTOR: [u8; 4] = [32u8, 172u8, 210u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RouteAdded(bytes4,address)` and selector `0xcb5cc54fa0fda41744197b286ab4135aec7c322cace32c4f55da723d2eb8eee6`.
```solidity
event RouteAdded(bytes4 selector, address verifier);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RouteAdded {
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
        #[allow(missing_docs)]
        pub verifier: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RouteAdded {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<4>,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "RouteAdded(bytes4,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                203u8, 92u8, 197u8, 79u8, 160u8, 253u8, 164u8, 23u8, 68u8, 25u8, 123u8,
                40u8, 106u8, 180u8, 19u8, 90u8, 236u8, 124u8, 50u8, 44u8, 172u8, 227u8,
                44u8, 79u8, 85u8, 218u8, 114u8, 61u8, 46u8, 184u8, 238u8, 230u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    selector: data.0,
                    verifier: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.verifier,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RouteAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RouteAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RouteAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RouteFrozen(bytes4,address)` and selector `0x63ad2363b183cb8bb562b9590c5b4428e2a566260df053db156576d3d171438d`.
```solidity
event RouteFrozen(bytes4 selector, address verifier);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RouteFrozen {
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
        #[allow(missing_docs)]
        pub verifier: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RouteFrozen {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<4>,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "RouteFrozen(bytes4,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                99u8, 173u8, 35u8, 99u8, 177u8, 131u8, 203u8, 139u8, 181u8, 98u8, 185u8,
                89u8, 12u8, 91u8, 68u8, 40u8, 226u8, 165u8, 102u8, 38u8, 13u8, 240u8,
                83u8, 219u8, 21u8, 101u8, 118u8, 211u8, 209u8, 113u8, 67u8, 141u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    selector: data.0,
                    verifier: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.verifier,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RouteFrozen {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RouteFrozen> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RouteFrozen) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address initialOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub initialOwner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.initialOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { initialOwner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initialOwner,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addRoute(address)` and selector `0x8c95ff1e`.
```solidity
function addRoute(address verifier) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addRouteCall {
        #[allow(missing_docs)]
        pub verifier: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addRoute(address)`](addRouteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addRouteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addRouteCall> for UnderlyingRustTuple<'_> {
                fn from(value: addRouteCall) -> Self {
                    (value.verifier,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addRouteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { verifier: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addRouteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addRouteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addRouteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addRouteReturn {
            fn _tokenize(
                &self,
            ) -> <addRouteCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addRouteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addRouteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addRoute(address)";
            const SELECTOR: [u8; 4] = [140u8, 149u8, 255u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.verifier,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addRouteReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `freezeRoute(bytes4)` and selector `0x814856f4`.
```solidity
function freezeRoute(bytes4 selector) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct freezeRouteCall {
        #[allow(missing_docs)]
        pub selector: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`freezeRoute(bytes4)`](freezeRouteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct freezeRouteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<freezeRouteCall> for UnderlyingRustTuple<'_> {
                fn from(value: freezeRouteCall) -> Self {
                    (value.selector,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for freezeRouteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { selector: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<freezeRouteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: freezeRouteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for freezeRouteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl freezeRouteReturn {
            fn _tokenize(
                &self,
            ) -> <freezeRouteCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for freezeRouteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = freezeRouteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "freezeRoute(bytes4)";
            const SELECTOR: [u8; 4] = [129u8, 72u8, 86u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.selector),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                freezeRouteReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `routes(bytes4)` and selector `0x51c7094f`.
```solidity
function routes(bytes4) external view returns (address verifier, bool frozen);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct routesCall(pub alloy::sol_types::private::FixedBytes<4>);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`routes(bytes4)`](routesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct routesReturn {
        #[allow(missing_docs)]
        pub verifier: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub frozen: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<routesCall> for UnderlyingRustTuple<'_> {
                fn from(value: routesCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for routesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<routesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: routesReturn) -> Self {
                    (value.verifier, value.frozen)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for routesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        verifier: tuple.0,
                        frozen: tuple.1,
                    }
                }
            }
        }
        impl routesReturn {
            fn _tokenize(
                &self,
            ) -> <routesCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.verifier,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.frozen,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for routesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = routesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "routes(bytes4)";
            const SELECTOR: [u8; 4] = [81u8, 199u8, 9u8, 79u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                routesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyProof(bytes32,bytes,bytes)` and selector `0x41493c60`.
```solidity
function verifyProof(bytes32 programVKey, bytes memory publicValues, bytes memory proofBytes) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofCall {
        #[allow(missing_docs)]
        pub programVKey: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub proofBytes: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`verifyProof(bytes32,bytes,bytes)`](verifyProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofCall) -> Self {
                    (value.programVKey, value.publicValues, value.proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        programVKey: tuple.0,
                        publicValues: tuple.1,
                        proofBytes: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl verifyProofReturn {
            fn _tokenize(
                &self,
            ) -> <verifyProofCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyProof(bytes32,bytes,bytes)";
            const SELECTOR: [u8; 4] = [65u8, 73u8, 60u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.programVKey),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proofBytes,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                verifyProofReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SP1VerifierGateway`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum SP1VerifierGatewayCalls {
        #[allow(missing_docs)]
        addRoute(addRouteCall),
        #[allow(missing_docs)]
        freezeRoute(freezeRouteCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        routes(routesCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        verifyProof(verifyProofCall),
    }
    #[automatically_derived]
    impl SP1VerifierGatewayCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [65u8, 73u8, 60u8, 96u8],
            [81u8, 199u8, 9u8, 79u8],
            [113u8, 80u8, 24u8, 166u8],
            [129u8, 72u8, 86u8, 244u8],
            [140u8, 149u8, 255u8, 30u8],
            [141u8, 165u8, 203u8, 91u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SP1VerifierGatewayCalls {
        const NAME: &'static str = "SP1VerifierGatewayCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addRoute(_) => <addRouteCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::freezeRoute(_) => {
                    <freezeRouteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::routes(_) => <routesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyProof(_) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls>] = &[
                {
                    fn verifyProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <verifyProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::verifyProof)
                    }
                    verifyProof
                },
                {
                    fn routes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <routesCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SP1VerifierGatewayCalls::routes)
                    }
                    routes
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn freezeRoute(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <freezeRouteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::freezeRoute)
                    }
                    freezeRoute
                },
                {
                    fn addRoute(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <addRouteCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SP1VerifierGatewayCalls::addRoute)
                    }
                    addRoute
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SP1VerifierGatewayCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls>] = &[
                {
                    fn verifyProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <verifyProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::verifyProof)
                    }
                    verifyProof
                },
                {
                    fn routes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <routesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::routes)
                    }
                    routes
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn freezeRoute(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <freezeRouteCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::freezeRoute)
                    }
                    freezeRoute
                },
                {
                    fn addRoute(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <addRouteCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::addRoute)
                    }
                    addRoute
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addRoute(inner) => {
                    <addRouteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::freezeRoute(inner) => {
                    <freezeRouteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::routes(inner) => {
                    <routesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addRoute(inner) => {
                    <addRouteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::freezeRoute(inner) => {
                    <freezeRouteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::routes(inner) => {
                    <routesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SP1VerifierGateway`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SP1VerifierGatewayErrors {
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        RouteAlreadyExists(RouteAlreadyExists),
        #[allow(missing_docs)]
        RouteIsFrozen(RouteIsFrozen),
        #[allow(missing_docs)]
        RouteNotFound(RouteNotFound),
        #[allow(missing_docs)]
        SelectorCannotBeZero(SelectorCannotBeZero),
    }
    #[automatically_derived]
    impl SP1VerifierGatewayErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [32u8, 172u8, 210u8, 139u8],
            [43u8, 135u8, 231u8, 151u8],
            [235u8, 241u8, 8u8, 35u8],
            [242u8, 8u8, 119u8, 126u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SP1VerifierGatewayErrors {
        const NAME: &'static str = "SP1VerifierGatewayErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::RouteAlreadyExists(_) => {
                    <RouteAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::RouteIsFrozen(_) => {
                    <RouteIsFrozen as alloy_sol_types::SolError>::SELECTOR
                }
                Self::RouteNotFound(_) => {
                    <RouteNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SelectorCannotBeZero(_) => {
                    <SelectorCannotBeZero as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn SelectorCannotBeZero(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <SelectorCannotBeZero as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::SelectorCannotBeZero)
                    }
                    SelectorCannotBeZero
                },
                {
                    fn RouteAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <RouteAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::RouteAlreadyExists)
                    }
                    RouteAlreadyExists
                },
                {
                    fn RouteIsFrozen(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <RouteIsFrozen as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::RouteIsFrozen)
                    }
                    RouteIsFrozen
                },
                {
                    fn RouteNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <RouteNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::RouteNotFound)
                    }
                    RouteNotFound
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn SelectorCannotBeZero(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <SelectorCannotBeZero as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::SelectorCannotBeZero)
                    }
                    SelectorCannotBeZero
                },
                {
                    fn RouteAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <RouteAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::RouteAlreadyExists)
                    }
                    RouteAlreadyExists
                },
                {
                    fn RouteIsFrozen(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <RouteIsFrozen as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::RouteIsFrozen)
                    }
                    RouteIsFrozen
                },
                {
                    fn RouteNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierGatewayErrors> {
                        <RouteNotFound as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierGatewayErrors::RouteNotFound)
                    }
                    RouteNotFound
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RouteAlreadyExists(inner) => {
                    <RouteAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RouteIsFrozen(inner) => {
                    <RouteIsFrozen as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::RouteNotFound(inner) => {
                    <RouteNotFound as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::SelectorCannotBeZero(inner) => {
                    <SelectorCannotBeZero as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RouteAlreadyExists(inner) => {
                    <RouteAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RouteIsFrozen(inner) => {
                    <RouteIsFrozen as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RouteNotFound(inner) => {
                    <RouteNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SelectorCannotBeZero(inner) => {
                    <SelectorCannotBeZero as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SP1VerifierGateway`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SP1VerifierGatewayEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RouteAdded(RouteAdded),
        #[allow(missing_docs)]
        RouteFrozen(RouteFrozen),
    }
    #[automatically_derived]
    impl SP1VerifierGatewayEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                99u8, 173u8, 35u8, 99u8, 177u8, 131u8, 203u8, 139u8, 181u8, 98u8, 185u8,
                89u8, 12u8, 91u8, 68u8, 40u8, 226u8, 165u8, 102u8, 38u8, 13u8, 240u8,
                83u8, 219u8, 21u8, 101u8, 118u8, 211u8, 209u8, 113u8, 67u8, 141u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                203u8, 92u8, 197u8, 79u8, 160u8, 253u8, 164u8, 23u8, 68u8, 25u8, 123u8,
                40u8, 106u8, 180u8, 19u8, 90u8, 236u8, 124u8, 50u8, 44u8, 172u8, 227u8,
                44u8, 79u8, 85u8, 218u8, 114u8, 61u8, 46u8, 184u8, 238u8, 230u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SP1VerifierGatewayEvents {
        const NAME: &'static str = "SP1VerifierGatewayEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(<RouteAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RouteAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RouteAdded)
                }
                Some(<RouteFrozen as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RouteFrozen as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RouteFrozen)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SP1VerifierGatewayEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RouteAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RouteFrozen(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RouteAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RouteFrozen(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SP1VerifierGateway`](self) contract instance.

See the [wrapper's documentation](`SP1VerifierGatewayInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SP1VerifierGatewayInstance<P, N> {
        SP1VerifierGatewayInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        initialOwner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SP1VerifierGatewayInstance<P, N>>,
    > {
        SP1VerifierGatewayInstance::<P, N>::deploy(provider, initialOwner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        initialOwner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        SP1VerifierGatewayInstance::<P, N>::deploy_builder(provider, initialOwner)
    }
    /**A [`SP1VerifierGateway`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SP1VerifierGateway`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SP1VerifierGatewayInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for SP1VerifierGatewayInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SP1VerifierGatewayInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SP1VerifierGatewayInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`SP1VerifierGateway`](self) contract instance.

See the [wrapper's documentation](`SP1VerifierGatewayInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            initialOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SP1VerifierGatewayInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider, initialOwner);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            initialOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { initialOwner },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> SP1VerifierGatewayInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SP1VerifierGatewayInstance<P, N> {
            SP1VerifierGatewayInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SP1VerifierGatewayInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addRoute`] function.
        pub fn addRoute(
            &self,
            verifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, addRouteCall, N> {
            self.call_builder(&addRouteCall { verifier })
        }
        ///Creates a new call builder for the [`freezeRoute`] function.
        pub fn freezeRoute(
            &self,
            selector: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, freezeRouteCall, N> {
            self.call_builder(&freezeRouteCall { selector })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`routes`] function.
        pub fn routes(
            &self,
            _0: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, routesCall, N> {
            self.call_builder(&routesCall(_0))
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`verifyProof`] function.
        pub fn verifyProof(
            &self,
            programVKey: alloy::sol_types::private::FixedBytes<32>,
            publicValues: alloy::sol_types::private::Bytes,
            proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, verifyProofCall, N> {
            self.call_builder(
                &verifyProofCall {
                    programVKey,
                    publicValues,
                    proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SP1VerifierGatewayInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RouteAdded`] event.
        pub fn RouteAdded_filter(&self) -> alloy_contract::Event<&P, RouteAdded, N> {
            self.event_filter::<RouteAdded>()
        }
        ///Creates a new event filter for the [`RouteFrozen`] event.
        pub fn RouteFrozen_filter(&self) -> alloy_contract::Event<&P, RouteFrozen, N> {
            self.event_filter::<RouteFrozen>()
        }
    }
}
