/**

Generated by the following Solidity interface...
```solidity
interface AttestationDocVerifier {
    constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, bytes32 _pcr8, uint64 _expirationTolerance);

    function attestationDocVerifierVKey() external view returns (bytes32);
    function expirationTolerance() external view returns (uint64);
    function pcr0() external view returns (bytes32);
    function pcr1() external view returns (bytes32);
    function pcr2() external view returns (bytes32);
    function pcr8() external view returns (bytes32);
    function rootCertHash() external view returns (bytes32);
    function verifier() external view returns (address);
    function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_verifier",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_attestationDocVerifierVKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_rootCertHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr8",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_expirationTolerance",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "attestationDocVerifierVKey",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "expirationTolerance",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr8",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rootCertHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyAttestationDocProof",
    "inputs": [
      {
        "name": "_publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610180604052346100bd57610024610015610239565b96959095949194939293610261565b61002c6100c2565b610e88610280823960805181818161014f0152610dac015260a0518181816104b40152610ddd015260c05181818160d10152610bde015260e0518181816102930152610c9f0152610100518181816103d30152610ce601526101205181818161023a0152610d2d0152610140518181816101e10152610d7401526101605181818161042c0152610c510152610e8890f35b6100c8565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100f4906100cc565b810190811060018060401b0382111761010c57604052565b6100d6565b9061012461011d6100c2565b92836100ea565b565b5f80fd5b60018060a01b031690565b61013e9061012a565b90565b61014a81610135565b0361015157565b5f80fd5b9050519061016282610141565b565b90565b61017081610164565b0361017757565b5f80fd5b9050519061018882610167565b565b60018060401b031690565b61019e8161018a565b036101a557565b5f80fd5b905051906101b682610195565b565b919061010083820312610234576101d1815f8501610155565b926101df826020830161017b565b926101ed836040840161017b565b926101fb816060850161017b565b92610209826080830161017b565b9261023161021a8460a0850161017b565b936102288160c0860161017b565b9360e0016101a9565b90565b610126565b6102576111088038038061024c81610111565b9283398101906101b8565b9091929394959697565b60805260a05260c05260e0526101005261012052610140526101605256fe60806040526004361015610013575b61050b565b61001d5f356100ac565b80630553f274146100a75780632b7ac3f3146100a25780632f74138d1461009d57806338f3efd41461009857806381a9d38a14610093578063c22a96941461008e578063cca3b4fe14610089578063d46e5f01146100845763e5951dd10361000e576104d6565b61047d565b6103f5565b610398565b6102b5565b61025c565b610203565b6101aa565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100ca57565b6100bc565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b6100ff906100f3565b9052565b9190610116905f602085019401906100f6565b565b34610148576101283660046100c0565b6101446101336100cf565b61013b6100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b61018590610171565b90565b6101919061017c565b9052565b91906101a8905f60208501940190610188565b565b346101da576101ba3660046100c0565b6101d66101c561014d565b6101cd6100b2565b91829182610195565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610233576102133660046100c0565b61022f61021e6101df565b6102266100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461028c5761026c3660046100c0565b610288610277610238565b61027f6100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b346102e5576102c53660046100c0565b6102e16102d0610291565b6102d86100b2565b91829182610103565b0390f35b6100b8565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103345781359167ffffffffffffffff831161032f57602001926001830284011161032a57565b6102f6565b6102f2565b6102ee565b9091604082840312610393575f82013567ffffffffffffffff811161038e57836103649184016102fa565b929093602082013567ffffffffffffffff81116103895761038592016102fa565b9091565b6102ea565b6102ea565b6100bc565b346103cc576103c86103b76103ae366004610339565b92919091610bad565b6103bf6100b2565b91829182610195565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610425576104053660046100c0565b6104216104106103d1565b6104186100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b67ffffffffffffffff1690565b6104649061044e565b9052565b919061047b905f6020850194019061045b565b565b346104ad5761048d3660046100c0565b6104a961049861042a565b6104a06100b2565b91829182610468565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610506576104e63660046100c0565b6105026104f16104b2565b6104f96100b2565b91829182610103565b0390f35b6100b8565b5f80fd5b5f90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061053f90610517565b810190811067ffffffffffffffff82111761055957604052565b610521565b9061057161056a6100b2565b9283610535565b565b61057c816100f3565b0361058357565b5f80fd5b9050359061059482610573565b565b61059f8161044e565b036105a657565b5f80fd5b905035906105b782610596565b565b6105c28161017c565b036105c957565b5f80fd5b905035906105da826105b9565b565b9190610100838203126106845761067d906105f861010061055e565b93610605825f8301610587565b5f86015261061682602083016105aa565b602086015261062882604083016105aa565b604086015261063a8260608301610587565b606086015261064c8260808301610587565b608086015261065e8260a08301610587565b60a08601526106708260c08301610587565b60c086015260e0016105cd565b60e0830152565b610513565b90610100828203126106a3576106a0915f016105dc565b90565b6100bc565b6106b290516100f3565b90565b60209181520190565b5f7f526f6f7420636572742068617368206d69736d61746368000000000000000000910152565b6106f260176020926106b5565b6106fb816106be565b0190565b6107149060208101905f8183039101526106e5565b90565b1561071e57565b6107266100b2565b62461bcd60e51b81528061073c600482016106ff565b0390fd5b61074a905161044e565b90565b90565b90565b61076761076261076c9261044e565b610750565b61074d565b90565b5f7f56616c69646974792077696e646f7720686173206e6f74207374617274656400910152565b6107a3601f6020926106b5565b6107ac8161076f565b0190565b6107c59060208101905f818303910152610796565b90565b156107cf57565b6107d76100b2565b62461bcd60e51b8152806107ed600482016107b0565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b6108116108179161044e565b9161044e565b019067ffffffffffffffff821161082a57565b6107f1565b5f7f56616c69646974792077696e646f772068617320656e64656400000000000000910152565b61086360196020926106b5565b61086c8161082f565b0190565b6108859060208101905f818303910152610856565b90565b1561088f57565b6108976100b2565b62461bcd60e51b8152806108ad60048201610870565b0390fd5b5f7f50435230206d69736d6174636800000000000000000000000000000000000000910152565b6108e5600d6020926106b5565b6108ee816108b1565b0190565b6109079060208101905f8183039101526108d8565b90565b1561091157565b6109196100b2565b62461bcd60e51b81528061092f600482016108f2565b0390fd5b5f7f50435231206d69736d6174636800000000000000000000000000000000000000910152565b610967600d6020926106b5565b61097081610933565b0190565b6109899060208101905f81830391015261095a565b90565b1561099357565b61099b6100b2565b62461bcd60e51b8152806109b160048201610974565b0390fd5b5f7f50435232206d69736d6174636800000000000000000000000000000000000000910152565b6109e9600d6020926106b5565b6109f2816109b5565b0190565b610a0b9060208101905f8183039101526109dc565b90565b15610a1557565b610a1d6100b2565b62461bcd60e51b815280610a33600482016109f6565b0390fd5b5f7f50435238206d69736d6174636800000000000000000000000000000000000000910152565b610a6b600d6020926106b5565b610a7481610a37565b0190565b610a8d9060208101905f818303910152610a5e565b90565b15610a9757565b610a9f6100b2565b62461bcd60e51b815280610ab560048201610a78565b0390fd5b610acd610ac8610ad292610171565b610750565b610171565b90565b610ade90610ab9565b90565b610aea90610ad5565b90565b610af690610ab9565b90565b610b0290610aed565b90565b5f80fd5b60e01b90565b5f910312610b1957565b6100bc565b60209181520190565b90825f939282370152565b9190610b4c81610b4581610b5195610b1e565b8095610b27565b610517565b0190565b939190610b8d9593610b7f92610b7260608801935f8901906100f6565b8683036020880152610b32565b926040818503910152610b32565b90565b610b986100b2565b3d5f823e3d90fd5b610baa905161017c565b90565b92919092610bb961050f565b50610bc78185810190610689565b92610c0e610bd65f86016106a8565b610c08610c027f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b14610717565b610c3642610c2f610c29610c2460208901610740565b610753565b9161074d565b10156107c8565b610c8842610c81610c7b610c76610c4f60408a01610740565b7f000000000000000000000000000000000000000000000000000000000000000090610805565b610753565b9161074d565b1115610888565b610ccf610c97606086016106a8565b610cc9610cc37f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b1461090a565b610d16610cde608086016106a8565b610d10610d0a7f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b1461098c565b610d5d610d2560a086016106a8565b610d57610d517f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b14610a0e565b610da4610d6c60c086016106a8565b610d9e610d987f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b14610a90565b610dd5610dd07f0000000000000000000000000000000000000000000000000000000000000000610ae1565b610af9565b906341493c607f00000000000000000000000000000000000000000000000000000000000000009396949194833b15610e83575f95610e2693610e3192610e1a6100b2565b9a8b9889978897610b09565b875260048701610b55565b03915afa908115610e7e57610e4f9260e092610e52575b5001610ba0565b90565b610e71905f3d8111610e77575b610e698183610535565b810190610b0f565b5f610e48565b503d610e5f565b610b90565b610b0556
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\x80`@R4a\0\xBDWa\0$a\0\x15a\x029V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x02aV[a\0,a\0\xC2V[a\x0E\x88a\x02\x80\x829`\x80Q\x81\x81\x81a\x01O\x01Ra\r\xAC\x01R`\xA0Q\x81\x81\x81a\x04\xB4\x01Ra\r\xDD\x01R`\xC0Q\x81\x81\x81`\xD1\x01Ra\x0B\xDE\x01R`\xE0Q\x81\x81\x81a\x02\x93\x01Ra\x0C\x9F\x01Ra\x01\0Q\x81\x81\x81a\x03\xD3\x01Ra\x0C\xE6\x01Ra\x01 Q\x81\x81\x81a\x02:\x01Ra\r-\x01Ra\x01@Q\x81\x81\x81a\x01\xE1\x01Ra\rt\x01Ra\x01`Q\x81\x81\x81a\x04,\x01Ra\x0CQ\x01Ra\x0E\x88\x90\xF3[a\0\xC8V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xF4\x90a\0\xCCV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x01\x0CW`@RV[a\0\xD6V[\x90a\x01$a\x01\x1Da\0\xC2V[\x92\x83a\0\xEAV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01>\x90a\x01*V[\x90V[a\x01J\x81a\x015V[\x03a\x01QWV[_\x80\xFD[\x90PQ\x90a\x01b\x82a\x01AV[V[\x90V[a\x01p\x81a\x01dV[\x03a\x01wWV[_\x80\xFD[\x90PQ\x90a\x01\x88\x82a\x01gV[V[`\x01\x80`@\x1B\x03\x16\x90V[a\x01\x9E\x81a\x01\x8AV[\x03a\x01\xA5WV[_\x80\xFD[\x90PQ\x90a\x01\xB6\x82a\x01\x95V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x024Wa\x01\xD1\x81_\x85\x01a\x01UV[\x92a\x01\xDF\x82` \x83\x01a\x01{V[\x92a\x01\xED\x83`@\x84\x01a\x01{V[\x92a\x01\xFB\x81``\x85\x01a\x01{V[\x92a\x02\t\x82`\x80\x83\x01a\x01{V[\x92a\x021a\x02\x1A\x84`\xA0\x85\x01a\x01{V[\x93a\x02(\x81`\xC0\x86\x01a\x01{V[\x93`\xE0\x01a\x01\xA9V[\x90V[a\x01&V[a\x02Wa\x11\x08\x808\x03\x80a\x02L\x81a\x01\x11V[\x92\x839\x81\x01\x90a\x01\xB8V[\x90\x91\x92\x93\x94\x95\x96\x97V[`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@Ra\x01`RV\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\x0BV[a\0\x1D_5a\0\xACV[\x80c\x05S\xF2t\x14a\0\xA7W\x80c+z\xC3\xF3\x14a\0\xA2W\x80c/t\x13\x8D\x14a\0\x9DW\x80c8\xF3\xEF\xD4\x14a\0\x98W\x80c\x81\xA9\xD3\x8A\x14a\0\x93W\x80c\xC2*\x96\x94\x14a\0\x8EW\x80c\xCC\xA3\xB4\xFE\x14a\0\x89W\x80c\xD4n_\x01\x14a\0\x84Wc\xE5\x95\x1D\xD1\x03a\0\x0EWa\x04\xD6V[a\x04}V[a\x03\xF5V[a\x03\x98V[a\x02\xB5V[a\x02\\V[a\x02\x03V[a\x01\xAAV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xCAWV[a\0\xBCV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\0\xFF\x90a\0\xF3V[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0\xC0V[a\x01Da\x013a\0\xCFV[a\x01;a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x85\x90a\x01qV[\x90V[a\x01\x91\x90a\x01|V[\x90RV[\x91\x90a\x01\xA8\x90_` \x85\x01\x94\x01\x90a\x01\x88V[V[4a\x01\xDAWa\x01\xBA6`\x04a\0\xC0V[a\x01\xD6a\x01\xC5a\x01MV[a\x01\xCDa\0\xB2V[\x91\x82\x91\x82a\x01\x95V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x023Wa\x02\x136`\x04a\0\xC0V[a\x02/a\x02\x1Ea\x01\xDFV[a\x02&a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x02\x8CWa\x02l6`\x04a\0\xC0V[a\x02\x88a\x02wa\x028V[a\x02\x7Fa\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x02\xE5Wa\x02\xC56`\x04a\0\xC0V[a\x02\xE1a\x02\xD0a\x02\x91V[a\x02\xD8a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x034W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03/W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03*WV[a\x02\xF6V[a\x02\xF2V[a\x02\xEEV[\x90\x91`@\x82\x84\x03\x12a\x03\x93W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x8EW\x83a\x03d\x91\x84\x01a\x02\xFAV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x89Wa\x03\x85\x92\x01a\x02\xFAV[\x90\x91V[a\x02\xEAV[a\x02\xEAV[a\0\xBCV[4a\x03\xCCWa\x03\xC8a\x03\xB7a\x03\xAE6`\x04a\x039V[\x92\x91\x90\x91a\x0B\xADV[a\x03\xBFa\0\xB2V[\x91\x82\x91\x82a\x01\x95V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x04%Wa\x04\x056`\x04a\0\xC0V[a\x04!a\x04\x10a\x03\xD1V[a\x04\x18a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04d\x90a\x04NV[\x90RV[\x91\x90a\x04{\x90_` \x85\x01\x94\x01\x90a\x04[V[V[4a\x04\xADWa\x04\x8D6`\x04a\0\xC0V[a\x04\xA9a\x04\x98a\x04*V[a\x04\xA0a\0\xB2V[\x91\x82\x91\x82a\x04hV[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x05\x06Wa\x04\xE66`\x04a\0\xC0V[a\x05\x02a\x04\xF1a\x04\xB2V[a\x04\xF9a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05?\x90a\x05\x17V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05YW`@RV[a\x05!V[\x90a\x05qa\x05ja\0\xB2V[\x92\x83a\x055V[V[a\x05|\x81a\0\xF3V[\x03a\x05\x83WV[_\x80\xFD[\x90P5\x90a\x05\x94\x82a\x05sV[V[a\x05\x9F\x81a\x04NV[\x03a\x05\xA6WV[_\x80\xFD[\x90P5\x90a\x05\xB7\x82a\x05\x96V[V[a\x05\xC2\x81a\x01|V[\x03a\x05\xC9WV[_\x80\xFD[\x90P5\x90a\x05\xDA\x82a\x05\xB9V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x06\x84Wa\x06}\x90a\x05\xF8a\x01\0a\x05^V[\x93a\x06\x05\x82_\x83\x01a\x05\x87V[_\x86\x01Ra\x06\x16\x82` \x83\x01a\x05\xAAV[` \x86\x01Ra\x06(\x82`@\x83\x01a\x05\xAAV[`@\x86\x01Ra\x06:\x82``\x83\x01a\x05\x87V[``\x86\x01Ra\x06L\x82`\x80\x83\x01a\x05\x87V[`\x80\x86\x01Ra\x06^\x82`\xA0\x83\x01a\x05\x87V[`\xA0\x86\x01Ra\x06p\x82`\xC0\x83\x01a\x05\x87V[`\xC0\x86\x01R`\xE0\x01a\x05\xCDV[`\xE0\x83\x01RV[a\x05\x13V[\x90a\x01\0\x82\x82\x03\x12a\x06\xA3Wa\x06\xA0\x91_\x01a\x05\xDCV[\x90V[a\0\xBCV[a\x06\xB2\x90Qa\0\xF3V[\x90V[` \x91\x81R\x01\x90V[_\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xF2`\x17` \x92a\x06\xB5V[a\x06\xFB\x81a\x06\xBEV[\x01\x90V[a\x07\x14\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\xE5V[\x90V[\x15a\x07\x1EWV[a\x07&a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07<`\x04\x82\x01a\x06\xFFV[\x03\x90\xFD[a\x07J\x90Qa\x04NV[\x90V[\x90V[\x90V[a\x07ga\x07ba\x07l\x92a\x04NV[a\x07PV[a\x07MV[\x90V[_\x7FValidity window has not started\0\x91\x01RV[a\x07\xA3`\x1F` \x92a\x06\xB5V[a\x07\xAC\x81a\x07oV[\x01\x90V[a\x07\xC5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\x96V[\x90V[\x15a\x07\xCFWV[a\x07\xD7a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07\xED`\x04\x82\x01a\x07\xB0V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08\x11a\x08\x17\x91a\x04NV[\x91a\x04NV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x08*WV[a\x07\xF1V[_\x7FValidity window has ended\0\0\0\0\0\0\0\x91\x01RV[a\x08c`\x19` \x92a\x06\xB5V[a\x08l\x81a\x08/V[\x01\x90V[a\x08\x85\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08VV[\x90V[\x15a\x08\x8FWV[a\x08\x97a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xAD`\x04\x82\x01a\x08pV[\x03\x90\xFD[_\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\xE5`\r` \x92a\x06\xB5V[a\x08\xEE\x81a\x08\xB1V[\x01\x90V[a\t\x07\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xD8V[\x90V[\x15a\t\x11WV[a\t\x19a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t/`\x04\x82\x01a\x08\xF2V[\x03\x90\xFD[_\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\tg`\r` \x92a\x06\xB5V[a\tp\x81a\t3V[\x01\x90V[a\t\x89\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\tZV[\x90V[\x15a\t\x93WV[a\t\x9Ba\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xB1`\x04\x82\x01a\ttV[\x03\x90\xFD[_\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\xE9`\r` \x92a\x06\xB5V[a\t\xF2\x81a\t\xB5V[\x01\x90V[a\n\x0B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\xDCV[\x90V[\x15a\n\x15WV[a\n\x1Da\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\n3`\x04\x82\x01a\t\xF6V[\x03\x90\xFD[_\x7FPCR8 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\nk`\r` \x92a\x06\xB5V[a\nt\x81a\n7V[\x01\x90V[a\n\x8D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\n^V[\x90V[\x15a\n\x97WV[a\n\x9Fa\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\n\xB5`\x04\x82\x01a\nxV[\x03\x90\xFD[a\n\xCDa\n\xC8a\n\xD2\x92a\x01qV[a\x07PV[a\x01qV[\x90V[a\n\xDE\x90a\n\xB9V[\x90V[a\n\xEA\x90a\n\xD5V[\x90V[a\n\xF6\x90a\n\xB9V[\x90V[a\x0B\x02\x90a\n\xEDV[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x0B\x19WV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0BL\x81a\x0BE\x81a\x0BQ\x95a\x0B\x1EV[\x80\x95a\x0B'V[a\x05\x17V[\x01\x90V[\x93\x91\x90a\x0B\x8D\x95\x93a\x0B\x7F\x92a\x0Br``\x88\x01\x93_\x89\x01\x90a\0\xF6V[\x86\x83\x03` \x88\x01Ra\x0B2V[\x92`@\x81\x85\x03\x91\x01Ra\x0B2V[\x90V[a\x0B\x98a\0\xB2V[=_\x82>=\x90\xFD[a\x0B\xAA\x90Qa\x01|V[\x90V[\x92\x91\x90\x92a\x0B\xB9a\x05\x0FV[Pa\x0B\xC7\x81\x85\x81\x01\x90a\x06\x89V[\x92a\x0C\x0Ea\x0B\xD6_\x86\x01a\x06\xA8V[a\x0C\x08a\x0C\x02\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\x07\x17V[a\x0C6Ba\x0C/a\x0C)a\x0C$` \x89\x01a\x07@V[a\x07SV[\x91a\x07MV[\x10\x15a\x07\xC8V[a\x0C\x88Ba\x0C\x81a\x0C{a\x0Cva\x0CO`@\x8A\x01a\x07@V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x08\x05V[a\x07SV[\x91a\x07MV[\x11\x15a\x08\x88V[a\x0C\xCFa\x0C\x97``\x86\x01a\x06\xA8V[a\x0C\xC9a\x0C\xC3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\t\nV[a\r\x16a\x0C\xDE`\x80\x86\x01a\x06\xA8V[a\r\x10a\r\n\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\t\x8CV[a\r]a\r%`\xA0\x86\x01a\x06\xA8V[a\rWa\rQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\n\x0EV[a\r\xA4a\rl`\xC0\x86\x01a\x06\xA8V[a\r\x9Ea\r\x98\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\n\x90V[a\r\xD5a\r\xD0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xE1V[a\n\xF9V[\x90cAI<`\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x96\x94\x91\x94\x83;\x15a\x0E\x83W_\x95a\x0E&\x93a\x0E1\x92a\x0E\x1Aa\0\xB2V[\x9A\x8B\x98\x89\x97\x88\x97a\x0B\tV[\x87R`\x04\x87\x01a\x0BUV[\x03\x91Z\xFA\x90\x81\x15a\x0E~Wa\x0EO\x92`\xE0\x92a\x0ERW[P\x01a\x0B\xA0V[\x90V[a\x0Eq\x90_=\x81\x11a\x0EwW[a\x0Ei\x81\x83a\x055V[\x81\x01\x90a\x0B\x0FV[_a\x0EHV[P=a\x0E_V[a\x0B\x90V[a\x0B\x05V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61050b565b61001d5f356100ac565b80630553f274146100a75780632b7ac3f3146100a25780632f74138d1461009d57806338f3efd41461009857806381a9d38a14610093578063c22a96941461008e578063cca3b4fe14610089578063d46e5f01146100845763e5951dd10361000e576104d6565b61047d565b6103f5565b610398565b6102b5565b61025c565b610203565b6101aa565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100ca57565b6100bc565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b6100ff906100f3565b9052565b9190610116905f602085019401906100f6565b565b34610148576101283660046100c0565b6101446101336100cf565b61013b6100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b61018590610171565b90565b6101919061017c565b9052565b91906101a8905f60208501940190610188565b565b346101da576101ba3660046100c0565b6101d66101c561014d565b6101cd6100b2565b91829182610195565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610233576102133660046100c0565b61022f61021e6101df565b6102266100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461028c5761026c3660046100c0565b610288610277610238565b61027f6100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b346102e5576102c53660046100c0565b6102e16102d0610291565b6102d86100b2565b91829182610103565b0390f35b6100b8565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103345781359167ffffffffffffffff831161032f57602001926001830284011161032a57565b6102f6565b6102f2565b6102ee565b9091604082840312610393575f82013567ffffffffffffffff811161038e57836103649184016102fa565b929093602082013567ffffffffffffffff81116103895761038592016102fa565b9091565b6102ea565b6102ea565b6100bc565b346103cc576103c86103b76103ae366004610339565b92919091610bad565b6103bf6100b2565b91829182610195565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610425576104053660046100c0565b6104216104106103d1565b6104186100b2565b91829182610103565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b67ffffffffffffffff1690565b6104649061044e565b9052565b919061047b905f6020850194019061045b565b565b346104ad5761048d3660046100c0565b6104a961049861042a565b6104a06100b2565b91829182610468565b0390f35b6100b8565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610506576104e63660046100c0565b6105026104f16104b2565b6104f96100b2565b91829182610103565b0390f35b6100b8565b5f80fd5b5f90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061053f90610517565b810190811067ffffffffffffffff82111761055957604052565b610521565b9061057161056a6100b2565b9283610535565b565b61057c816100f3565b0361058357565b5f80fd5b9050359061059482610573565b565b61059f8161044e565b036105a657565b5f80fd5b905035906105b782610596565b565b6105c28161017c565b036105c957565b5f80fd5b905035906105da826105b9565b565b9190610100838203126106845761067d906105f861010061055e565b93610605825f8301610587565b5f86015261061682602083016105aa565b602086015261062882604083016105aa565b604086015261063a8260608301610587565b606086015261064c8260808301610587565b608086015261065e8260a08301610587565b60a08601526106708260c08301610587565b60c086015260e0016105cd565b60e0830152565b610513565b90610100828203126106a3576106a0915f016105dc565b90565b6100bc565b6106b290516100f3565b90565b60209181520190565b5f7f526f6f7420636572742068617368206d69736d61746368000000000000000000910152565b6106f260176020926106b5565b6106fb816106be565b0190565b6107149060208101905f8183039101526106e5565b90565b1561071e57565b6107266100b2565b62461bcd60e51b81528061073c600482016106ff565b0390fd5b61074a905161044e565b90565b90565b90565b61076761076261076c9261044e565b610750565b61074d565b90565b5f7f56616c69646974792077696e646f7720686173206e6f74207374617274656400910152565b6107a3601f6020926106b5565b6107ac8161076f565b0190565b6107c59060208101905f818303910152610796565b90565b156107cf57565b6107d76100b2565b62461bcd60e51b8152806107ed600482016107b0565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b6108116108179161044e565b9161044e565b019067ffffffffffffffff821161082a57565b6107f1565b5f7f56616c69646974792077696e646f772068617320656e64656400000000000000910152565b61086360196020926106b5565b61086c8161082f565b0190565b6108859060208101905f818303910152610856565b90565b1561088f57565b6108976100b2565b62461bcd60e51b8152806108ad60048201610870565b0390fd5b5f7f50435230206d69736d6174636800000000000000000000000000000000000000910152565b6108e5600d6020926106b5565b6108ee816108b1565b0190565b6109079060208101905f8183039101526108d8565b90565b1561091157565b6109196100b2565b62461bcd60e51b81528061092f600482016108f2565b0390fd5b5f7f50435231206d69736d6174636800000000000000000000000000000000000000910152565b610967600d6020926106b5565b61097081610933565b0190565b6109899060208101905f81830391015261095a565b90565b1561099357565b61099b6100b2565b62461bcd60e51b8152806109b160048201610974565b0390fd5b5f7f50435232206d69736d6174636800000000000000000000000000000000000000910152565b6109e9600d6020926106b5565b6109f2816109b5565b0190565b610a0b9060208101905f8183039101526109dc565b90565b15610a1557565b610a1d6100b2565b62461bcd60e51b815280610a33600482016109f6565b0390fd5b5f7f50435238206d69736d6174636800000000000000000000000000000000000000910152565b610a6b600d6020926106b5565b610a7481610a37565b0190565b610a8d9060208101905f818303910152610a5e565b90565b15610a9757565b610a9f6100b2565b62461bcd60e51b815280610ab560048201610a78565b0390fd5b610acd610ac8610ad292610171565b610750565b610171565b90565b610ade90610ab9565b90565b610aea90610ad5565b90565b610af690610ab9565b90565b610b0290610aed565b90565b5f80fd5b60e01b90565b5f910312610b1957565b6100bc565b60209181520190565b90825f939282370152565b9190610b4c81610b4581610b5195610b1e565b8095610b27565b610517565b0190565b939190610b8d9593610b7f92610b7260608801935f8901906100f6565b8683036020880152610b32565b926040818503910152610b32565b90565b610b986100b2565b3d5f823e3d90fd5b610baa905161017c565b90565b92919092610bb961050f565b50610bc78185810190610689565b92610c0e610bd65f86016106a8565b610c08610c027f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b14610717565b610c3642610c2f610c29610c2460208901610740565b610753565b9161074d565b10156107c8565b610c8842610c81610c7b610c76610c4f60408a01610740565b7f000000000000000000000000000000000000000000000000000000000000000090610805565b610753565b9161074d565b1115610888565b610ccf610c97606086016106a8565b610cc9610cc37f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b1461090a565b610d16610cde608086016106a8565b610d10610d0a7f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b1461098c565b610d5d610d2560a086016106a8565b610d57610d517f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b14610a0e565b610da4610d6c60c086016106a8565b610d9e610d987f00000000000000000000000000000000000000000000000000000000000000006100f3565b916100f3565b14610a90565b610dd5610dd07f0000000000000000000000000000000000000000000000000000000000000000610ae1565b610af9565b906341493c607f00000000000000000000000000000000000000000000000000000000000000009396949194833b15610e83575f95610e2693610e3192610e1a6100b2565b9a8b9889978897610b09565b875260048701610b55565b03915afa908115610e7e57610e4f9260e092610e52575b5001610ba0565b90565b610e71905f3d8111610e77575b610e698183610535565b810190610b0f565b5f610e48565b503d610e5f565b610b90565b610b0556
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\x0BV[a\0\x1D_5a\0\xACV[\x80c\x05S\xF2t\x14a\0\xA7W\x80c+z\xC3\xF3\x14a\0\xA2W\x80c/t\x13\x8D\x14a\0\x9DW\x80c8\xF3\xEF\xD4\x14a\0\x98W\x80c\x81\xA9\xD3\x8A\x14a\0\x93W\x80c\xC2*\x96\x94\x14a\0\x8EW\x80c\xCC\xA3\xB4\xFE\x14a\0\x89W\x80c\xD4n_\x01\x14a\0\x84Wc\xE5\x95\x1D\xD1\x03a\0\x0EWa\x04\xD6V[a\x04}V[a\x03\xF5V[a\x03\x98V[a\x02\xB5V[a\x02\\V[a\x02\x03V[a\x01\xAAV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xCAWV[a\0\xBCV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\0\xFF\x90a\0\xF3V[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0\xC0V[a\x01Da\x013a\0\xCFV[a\x01;a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x85\x90a\x01qV[\x90V[a\x01\x91\x90a\x01|V[\x90RV[\x91\x90a\x01\xA8\x90_` \x85\x01\x94\x01\x90a\x01\x88V[V[4a\x01\xDAWa\x01\xBA6`\x04a\0\xC0V[a\x01\xD6a\x01\xC5a\x01MV[a\x01\xCDa\0\xB2V[\x91\x82\x91\x82a\x01\x95V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x023Wa\x02\x136`\x04a\0\xC0V[a\x02/a\x02\x1Ea\x01\xDFV[a\x02&a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x02\x8CWa\x02l6`\x04a\0\xC0V[a\x02\x88a\x02wa\x028V[a\x02\x7Fa\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x02\xE5Wa\x02\xC56`\x04a\0\xC0V[a\x02\xE1a\x02\xD0a\x02\x91V[a\x02\xD8a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x034W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03/W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03*WV[a\x02\xF6V[a\x02\xF2V[a\x02\xEEV[\x90\x91`@\x82\x84\x03\x12a\x03\x93W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x8EW\x83a\x03d\x91\x84\x01a\x02\xFAV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x89Wa\x03\x85\x92\x01a\x02\xFAV[\x90\x91V[a\x02\xEAV[a\x02\xEAV[a\0\xBCV[4a\x03\xCCWa\x03\xC8a\x03\xB7a\x03\xAE6`\x04a\x039V[\x92\x91\x90\x91a\x0B\xADV[a\x03\xBFa\0\xB2V[\x91\x82\x91\x82a\x01\x95V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x04%Wa\x04\x056`\x04a\0\xC0V[a\x04!a\x04\x10a\x03\xD1V[a\x04\x18a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04d\x90a\x04NV[\x90RV[\x91\x90a\x04{\x90_` \x85\x01\x94\x01\x90a\x04[V[V[4a\x04\xADWa\x04\x8D6`\x04a\0\xC0V[a\x04\xA9a\x04\x98a\x04*V[a\x04\xA0a\0\xB2V[\x91\x82\x91\x82a\x04hV[\x03\x90\xF3[a\0\xB8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x05\x06Wa\x04\xE66`\x04a\0\xC0V[a\x05\x02a\x04\xF1a\x04\xB2V[a\x04\xF9a\0\xB2V[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05?\x90a\x05\x17V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05YW`@RV[a\x05!V[\x90a\x05qa\x05ja\0\xB2V[\x92\x83a\x055V[V[a\x05|\x81a\0\xF3V[\x03a\x05\x83WV[_\x80\xFD[\x90P5\x90a\x05\x94\x82a\x05sV[V[a\x05\x9F\x81a\x04NV[\x03a\x05\xA6WV[_\x80\xFD[\x90P5\x90a\x05\xB7\x82a\x05\x96V[V[a\x05\xC2\x81a\x01|V[\x03a\x05\xC9WV[_\x80\xFD[\x90P5\x90a\x05\xDA\x82a\x05\xB9V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x06\x84Wa\x06}\x90a\x05\xF8a\x01\0a\x05^V[\x93a\x06\x05\x82_\x83\x01a\x05\x87V[_\x86\x01Ra\x06\x16\x82` \x83\x01a\x05\xAAV[` \x86\x01Ra\x06(\x82`@\x83\x01a\x05\xAAV[`@\x86\x01Ra\x06:\x82``\x83\x01a\x05\x87V[``\x86\x01Ra\x06L\x82`\x80\x83\x01a\x05\x87V[`\x80\x86\x01Ra\x06^\x82`\xA0\x83\x01a\x05\x87V[`\xA0\x86\x01Ra\x06p\x82`\xC0\x83\x01a\x05\x87V[`\xC0\x86\x01R`\xE0\x01a\x05\xCDV[`\xE0\x83\x01RV[a\x05\x13V[\x90a\x01\0\x82\x82\x03\x12a\x06\xA3Wa\x06\xA0\x91_\x01a\x05\xDCV[\x90V[a\0\xBCV[a\x06\xB2\x90Qa\0\xF3V[\x90V[` \x91\x81R\x01\x90V[_\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xF2`\x17` \x92a\x06\xB5V[a\x06\xFB\x81a\x06\xBEV[\x01\x90V[a\x07\x14\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\xE5V[\x90V[\x15a\x07\x1EWV[a\x07&a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07<`\x04\x82\x01a\x06\xFFV[\x03\x90\xFD[a\x07J\x90Qa\x04NV[\x90V[\x90V[\x90V[a\x07ga\x07ba\x07l\x92a\x04NV[a\x07PV[a\x07MV[\x90V[_\x7FValidity window has not started\0\x91\x01RV[a\x07\xA3`\x1F` \x92a\x06\xB5V[a\x07\xAC\x81a\x07oV[\x01\x90V[a\x07\xC5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\x96V[\x90V[\x15a\x07\xCFWV[a\x07\xD7a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07\xED`\x04\x82\x01a\x07\xB0V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08\x11a\x08\x17\x91a\x04NV[\x91a\x04NV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x08*WV[a\x07\xF1V[_\x7FValidity window has ended\0\0\0\0\0\0\0\x91\x01RV[a\x08c`\x19` \x92a\x06\xB5V[a\x08l\x81a\x08/V[\x01\x90V[a\x08\x85\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08VV[\x90V[\x15a\x08\x8FWV[a\x08\x97a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xAD`\x04\x82\x01a\x08pV[\x03\x90\xFD[_\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\xE5`\r` \x92a\x06\xB5V[a\x08\xEE\x81a\x08\xB1V[\x01\x90V[a\t\x07\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xD8V[\x90V[\x15a\t\x11WV[a\t\x19a\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t/`\x04\x82\x01a\x08\xF2V[\x03\x90\xFD[_\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\tg`\r` \x92a\x06\xB5V[a\tp\x81a\t3V[\x01\x90V[a\t\x89\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\tZV[\x90V[\x15a\t\x93WV[a\t\x9Ba\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xB1`\x04\x82\x01a\ttV[\x03\x90\xFD[_\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\xE9`\r` \x92a\x06\xB5V[a\t\xF2\x81a\t\xB5V[\x01\x90V[a\n\x0B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\xDCV[\x90V[\x15a\n\x15WV[a\n\x1Da\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\n3`\x04\x82\x01a\t\xF6V[\x03\x90\xFD[_\x7FPCR8 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\nk`\r` \x92a\x06\xB5V[a\nt\x81a\n7V[\x01\x90V[a\n\x8D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\n^V[\x90V[\x15a\n\x97WV[a\n\x9Fa\0\xB2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\n\xB5`\x04\x82\x01a\nxV[\x03\x90\xFD[a\n\xCDa\n\xC8a\n\xD2\x92a\x01qV[a\x07PV[a\x01qV[\x90V[a\n\xDE\x90a\n\xB9V[\x90V[a\n\xEA\x90a\n\xD5V[\x90V[a\n\xF6\x90a\n\xB9V[\x90V[a\x0B\x02\x90a\n\xEDV[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\x0B\x19WV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0BL\x81a\x0BE\x81a\x0BQ\x95a\x0B\x1EV[\x80\x95a\x0B'V[a\x05\x17V[\x01\x90V[\x93\x91\x90a\x0B\x8D\x95\x93a\x0B\x7F\x92a\x0Br``\x88\x01\x93_\x89\x01\x90a\0\xF6V[\x86\x83\x03` \x88\x01Ra\x0B2V[\x92`@\x81\x85\x03\x91\x01Ra\x0B2V[\x90V[a\x0B\x98a\0\xB2V[=_\x82>=\x90\xFD[a\x0B\xAA\x90Qa\x01|V[\x90V[\x92\x91\x90\x92a\x0B\xB9a\x05\x0FV[Pa\x0B\xC7\x81\x85\x81\x01\x90a\x06\x89V[\x92a\x0C\x0Ea\x0B\xD6_\x86\x01a\x06\xA8V[a\x0C\x08a\x0C\x02\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\x07\x17V[a\x0C6Ba\x0C/a\x0C)a\x0C$` \x89\x01a\x07@V[a\x07SV[\x91a\x07MV[\x10\x15a\x07\xC8V[a\x0C\x88Ba\x0C\x81a\x0C{a\x0Cva\x0CO`@\x8A\x01a\x07@V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x08\x05V[a\x07SV[\x91a\x07MV[\x11\x15a\x08\x88V[a\x0C\xCFa\x0C\x97``\x86\x01a\x06\xA8V[a\x0C\xC9a\x0C\xC3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\t\nV[a\r\x16a\x0C\xDE`\x80\x86\x01a\x06\xA8V[a\r\x10a\r\n\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\t\x8CV[a\r]a\r%`\xA0\x86\x01a\x06\xA8V[a\rWa\rQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\n\x0EV[a\r\xA4a\rl`\xC0\x86\x01a\x06\xA8V[a\r\x9Ea\r\x98\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xF3V[\x91a\0\xF3V[\x14a\n\x90V[a\r\xD5a\r\xD0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xE1V[a\n\xF9V[\x90cAI<`\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x96\x94\x91\x94\x83;\x15a\x0E\x83W_\x95a\x0E&\x93a\x0E1\x92a\x0E\x1Aa\0\xB2V[\x9A\x8B\x98\x89\x97\x88\x97a\x0B\tV[\x87R`\x04\x87\x01a\x0BUV[\x03\x91Z\xFA\x90\x81\x15a\x0E~Wa\x0EO\x92`\xE0\x92a\x0ERW[P\x01a\x0B\xA0V[\x90V[a\x0Eq\x90_=\x81\x11a\x0EwW[a\x0Ei\x81\x83a\x055V[\x81\x01\x90a\x0B\x0FV[_a\x0EHV[P=a\x0E_V[a\x0B\x90V[a\x0B\x05V",
    );
    /**Constructor`.
```solidity
constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, bytes32 _pcr8, uint64 _expirationTolerance);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _verifier: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr8: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _expirationTolerance: u64,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                u64,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._verifier,
                        value._attestationDocVerifierVKey,
                        value._rootCertHash,
                        value._pcr0,
                        value._pcr1,
                        value._pcr2,
                        value._pcr8,
                        value._expirationTolerance,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _verifier: tuple.0,
                        _attestationDocVerifierVKey: tuple.1,
                        _rootCertHash: tuple.2,
                        _pcr0: tuple.3,
                        _pcr1: tuple.4,
                        _pcr2: tuple.5,
                        _pcr8: tuple.6,
                        _expirationTolerance: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._verifier,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifierVKey,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._rootCertHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr0),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr2),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr8),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self._expirationTolerance),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `attestationDocVerifierVKey()` and selector `0xe5951dd1`.
```solidity
function attestationDocVerifierVKey() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`attestationDocVerifierVKey()`](attestationDocVerifierVKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for attestationDocVerifierVKeyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "attestationDocVerifierVKey()";
            const SELECTOR: [u8; 4] = [229u8, 149u8, 29u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: attestationDocVerifierVKeyReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: attestationDocVerifierVKeyReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `expirationTolerance()` and selector `0xd46e5f01`.
```solidity
function expirationTolerance() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expirationToleranceCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`expirationTolerance()`](expirationToleranceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expirationToleranceReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expirationToleranceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: expirationToleranceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for expirationToleranceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expirationToleranceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: expirationToleranceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for expirationToleranceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for expirationToleranceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = u64;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "expirationTolerance()";
            const SELECTOR: [u8; 4] = [212u8, 110u8, 95u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: expirationToleranceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: expirationToleranceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr0()` and selector `0x81a9d38a`.
```solidity
function pcr0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr0()`](pcr0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr0()";
            const SELECTOR: [u8; 4] = [129u8, 169u8, 211u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr0Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr0Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr1()` and selector `0xcca3b4fe`.
```solidity
function pcr1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr1()`](pcr1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr1()";
            const SELECTOR: [u8; 4] = [204u8, 163u8, 180u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr1Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr1Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr2()` and selector `0x38f3efd4`.
```solidity
function pcr2() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr2()`](pcr2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr2()";
            const SELECTOR: [u8; 4] = [56u8, 243u8, 239u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr2Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr2Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr8()` and selector `0x2f74138d`.
```solidity
function pcr8() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr8Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr8()`](pcr8Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr8Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr8Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr8Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr8Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr8Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr8Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr8Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr8Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr8()";
            const SELECTOR: [u8; 4] = [47u8, 116u8, 19u8, 141u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr8Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr8Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `rootCertHash()` and selector `0x0553f274`.
```solidity
function rootCertHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`rootCertHash()`](rootCertHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rootCertHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rootCertHash()";
            const SELECTOR: [u8; 4] = [5u8, 83u8, 242u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: rootCertHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: rootCertHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifier()` and selector `0x2b7ac3f3`.
```solidity
function verifier() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifier()`](verifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifier()";
            const SELECTOR: [u8; 4] = [43u8, 122u8, 195u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifierReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifierReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyAttestationDocProof(bytes,bytes)` and selector `0xc22a9694`.
```solidity
function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofCall {
        #[allow(missing_docs)]
        pub _publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proofBytes: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifyAttestationDocProof(bytes,bytes)`](verifyAttestationDocProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofCall) -> Self {
                    (value._publicValues, value._proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _publicValues: tuple.0,
                        _proofBytes: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyAttestationDocProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyAttestationDocProof(bytes,bytes)";
            const SELECTOR: [u8; 4] = [194u8, 42u8, 150u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proofBytes,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`AttestationDocVerifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum AttestationDocVerifierCalls {
        #[allow(missing_docs)]
        attestationDocVerifierVKey(attestationDocVerifierVKeyCall),
        #[allow(missing_docs)]
        expirationTolerance(expirationToleranceCall),
        #[allow(missing_docs)]
        pcr0(pcr0Call),
        #[allow(missing_docs)]
        pcr1(pcr1Call),
        #[allow(missing_docs)]
        pcr2(pcr2Call),
        #[allow(missing_docs)]
        pcr8(pcr8Call),
        #[allow(missing_docs)]
        rootCertHash(rootCertHashCall),
        #[allow(missing_docs)]
        verifier(verifierCall),
        #[allow(missing_docs)]
        verifyAttestationDocProof(verifyAttestationDocProofCall),
    }
    #[automatically_derived]
    impl AttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 83u8, 242u8, 116u8],
            [43u8, 122u8, 195u8, 243u8],
            [47u8, 116u8, 19u8, 141u8],
            [56u8, 243u8, 239u8, 212u8],
            [129u8, 169u8, 211u8, 138u8],
            [194u8, 42u8, 150u8, 148u8],
            [204u8, 163u8, 180u8, 254u8],
            [212u8, 110u8, 95u8, 1u8],
            [229u8, 149u8, 29u8, 209u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AttestationDocVerifierCalls {
        const NAME: &'static str = "AttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::attestationDocVerifierVKey(_) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::expirationTolerance(_) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pcr0(_) => <pcr0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr1(_) => <pcr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr2(_) => <pcr2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr8(_) => <pcr8Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::rootCertHash(_) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifier(_) => <verifierCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyAttestationDocProof(_) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr8(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr8Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr8)
                    }
                    pcr8
                },
                {
                    fn pcr2(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn pcr0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn expirationTolerance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <expirationToleranceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::expirationTolerance)
                    }
                    expirationTolerance
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr8(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr8Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr8)
                    }
                    pcr8
                },
                {
                    fn pcr2(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn pcr0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn expirationTolerance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <expirationToleranceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::expirationTolerance)
                    }
                    expirationTolerance
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::expirationTolerance(inner) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr8(inner) => {
                    <pcr8Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::expirationTolerance(inner) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr8(inner) => {
                    <pcr8Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AttestationDocVerifierInstance<P, N> {
        AttestationDocVerifierInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _pcr8: alloy::sol_types::private::FixedBytes<32>,
        _expirationTolerance: u64,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AttestationDocVerifierInstance<P, N>>,
    > {
        AttestationDocVerifierInstance::<
            P,
            N,
        >::deploy(
            provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _pcr8,
            _expirationTolerance,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _pcr8: alloy::sol_types::private::FixedBytes<32>,
        _expirationTolerance: u64,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        AttestationDocVerifierInstance::<
            P,
            N,
        >::deploy_builder(
            provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _pcr8,
            _expirationTolerance,
        )
    }
    /**A [`AttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AttestationDocVerifierInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for AttestationDocVerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AttestationDocVerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _pcr8: alloy::sol_types::private::FixedBytes<32>,
            _expirationTolerance: u64,
        ) -> alloy_contract::Result<AttestationDocVerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _verifier,
                _attestationDocVerifierVKey,
                _rootCertHash,
                _pcr0,
                _pcr1,
                _pcr2,
                _pcr8,
                _expirationTolerance,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _pcr8: alloy::sol_types::private::FixedBytes<32>,
            _expirationTolerance: u64,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _verifier,
                            _attestationDocVerifierVKey,
                            _rootCertHash,
                            _pcr0,
                            _pcr1,
                            _pcr2,
                            _pcr8,
                            _expirationTolerance,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> AttestationDocVerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AttestationDocVerifierInstance<P, N> {
            AttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`attestationDocVerifierVKey`] function.
        pub fn attestationDocVerifierVKey(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, attestationDocVerifierVKeyCall, N> {
            self.call_builder(&attestationDocVerifierVKeyCall)
        }
        ///Creates a new call builder for the [`expirationTolerance`] function.
        pub fn expirationTolerance(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, expirationToleranceCall, N> {
            self.call_builder(&expirationToleranceCall)
        }
        ///Creates a new call builder for the [`pcr0`] function.
        pub fn pcr0(&self) -> alloy_contract::SolCallBuilder<&P, pcr0Call, N> {
            self.call_builder(&pcr0Call)
        }
        ///Creates a new call builder for the [`pcr1`] function.
        pub fn pcr1(&self) -> alloy_contract::SolCallBuilder<&P, pcr1Call, N> {
            self.call_builder(&pcr1Call)
        }
        ///Creates a new call builder for the [`pcr2`] function.
        pub fn pcr2(&self) -> alloy_contract::SolCallBuilder<&P, pcr2Call, N> {
            self.call_builder(&pcr2Call)
        }
        ///Creates a new call builder for the [`pcr8`] function.
        pub fn pcr8(&self) -> alloy_contract::SolCallBuilder<&P, pcr8Call, N> {
            self.call_builder(&pcr8Call)
        }
        ///Creates a new call builder for the [`rootCertHash`] function.
        pub fn rootCertHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, rootCertHashCall, N> {
            self.call_builder(&rootCertHashCall)
        }
        ///Creates a new call builder for the [`verifier`] function.
        pub fn verifier(&self) -> alloy_contract::SolCallBuilder<&P, verifierCall, N> {
            self.call_builder(&verifierCall)
        }
        ///Creates a new call builder for the [`verifyAttestationDocProof`] function.
        pub fn verifyAttestationDocProof(
            &self,
            _publicValues: alloy::sol_types::private::Bytes,
            _proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, verifyAttestationDocProofCall, N> {
            self.call_builder(
                &verifyAttestationDocProofCall {
                    _publicValues,
                    _proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
