/**

Generated by the following Solidity interface...
```solidity
interface AttestationDocVerifier {
    constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, uint64 _expirationTolerance);

    function attestationDocVerifierVKey() external view returns (bytes32);
    function expirationTolerance() external view returns (uint64);
    function pcr0() external view returns (bytes32);
    function pcr1() external view returns (bytes32);
    function pcr2() external view returns (bytes32);
    function rootCertHash() external view returns (bytes32);
    function verifier() external view returns (address);
    function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_verifier",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_attestationDocVerifierVKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_rootCertHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_expirationTolerance",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "attestationDocVerifierVKey",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "expirationTolerance",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rootCertHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyAttestationDocProof",
    "inputs": [
      {
        "name": "_publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101603461011a57601f61099338819003918201601f19168301916001600160401b0383118484101761011e5780849260e09460405283398101031261011a578051906001600160a01b038216820361011a576020810151604082015160608301519060808401519260c060a08601519501519560018060401b038716870361011a5760805260a05260c05260e052610100526101205261014052604051610860908161013382396080518181816103420152610783015260a051818181608d01526103a2015260c05181818161022a01526107bc015260e0518181816102b901526106fa01526101005181818161011001526102e0015261012051818181610307015261073401526101405181818160d401526102760152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f274146107a7575080632b7ac3f31461075757806338f3efd41461071d57806381a9d38a146106e3578063c22a969414610133578063cca3b4fe146100f8578063d46e5f01146100b35763e5951dd114610076575f80fd5b346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100b057806003193601126100b057602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e57604060031936011261047e5760043567ffffffffffffffff811161047e576101649036906004016107df565b60243567ffffffffffffffff811161047e576101849036906004016107df565b919060e084838101031261047e576040519360e0850185811067ffffffffffffffff8211176104465760405280358086526101c16020830161080d565b602087019081526101d46040840161080d565b6040880190815260608801906060850135825260808901926080860135845260a08a019460a0870135865260c08701359a73ffffffffffffffffffffffffffffffffffffffff8c168c0361047e5760c0019a8b527f000000000000000000000000000000000000000000000000000000000000000003610685575167ffffffffffffffff1642106106275767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105fa5767ffffffffffffffff16421161059c57517f00000000000000000000000000000000000000000000000000000000000000000361053e57517f0000000000000000000000000000000000000000000000000000000000000000036104e057517f0000000000000000000000000000000000000000000000000000000000000000036104825773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561047e575f936103e96103d794604051978896879586957f41493c600000000000000000000000000000000000000000000000000000000087527f00000000000000000000000000000000000000000000000000000000000000006004880152606060248801526064870191610822565b91600319858403016044860152610822565b03915afa80156104735761041a575b602073ffffffffffffffffffffffffffffffffffffffff835116604051908152f35b67ffffffffffffffff81116104465760405273ffffffffffffffffffffffffffffffffffffffff6103f8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461047e575f60031936011261047e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b9181601f8401121561047e5782359167ffffffffffffffff831161047e576020838186019501011161047e57565b359067ffffffffffffffff8216820361047e57565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01`4a\x01\x1AW`\x1Fa\t\x938\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\x01\x1EW\x80\x84\x92`\xE0\x94`@R\x839\x81\x01\x03\x12a\x01\x1AW\x80Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\x1AW` \x81\x01Q`@\x82\x01Q``\x83\x01Q\x90`\x80\x84\x01Q\x92`\xC0`\xA0\x86\x01Q\x95\x01Q\x95`\x01\x80`@\x1B\x03\x87\x16\x87\x03a\x01\x1AW`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@R`@Qa\x08`\x90\x81a\x013\x829`\x80Q\x81\x81\x81a\x03B\x01Ra\x07\x83\x01R`\xA0Q\x81\x81\x81`\x8D\x01Ra\x03\xA2\x01R`\xC0Q\x81\x81\x81a\x02*\x01Ra\x07\xBC\x01R`\xE0Q\x81\x81\x81a\x02\xB9\x01Ra\x06\xFA\x01Ra\x01\0Q\x81\x81\x81a\x01\x10\x01Ra\x02\xE0\x01Ra\x01 Q\x81\x81\x81a\x03\x07\x01Ra\x074\x01Ra\x01@Q\x81\x81\x81`\xD4\x01Ra\x02v\x01R\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\x07\xA7WP\x80c+z\xC3\xF3\x14a\x07WW\x80c8\xF3\xEF\xD4\x14a\x07\x1DW\x80c\x81\xA9\xD3\x8A\x14a\x06\xE3W\x80c\xC2*\x96\x94\x14a\x013W\x80c\xCC\xA3\xB4\xFE\x14a\0\xF8W\x80c\xD4n_\x01\x14a\0\xB3Wc\xE5\x95\x1D\xD1\x14a\0vW_\x80\xFD[4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W`@`\x03\x196\x01\x12a\x04~W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01d\x906\x90`\x04\x01a\x07\xDFV[`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01\x84\x906\x90`\x04\x01a\x07\xDFV[\x91\x90`\xE0\x84\x83\x81\x01\x03\x12a\x04~W`@Q\x93`\xE0\x85\x01\x85\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04FW`@R\x805\x80\x86Ra\x01\xC1` \x83\x01a\x08\rV[` \x87\x01\x90\x81Ra\x01\xD4`@\x84\x01a\x08\rV[`@\x88\x01\x90\x81R``\x88\x01\x90``\x85\x015\x82R`\x80\x89\x01\x92`\x80\x86\x015\x84R`\xA0\x8A\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x9As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16\x8C\x03a\x04~W`\xC0\x01\x9A\x8BR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06\x85WQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x06'Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xFAWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05\x9CWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05>WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xE0WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\x82Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04~W_\x93a\x03\xE9a\x03\xD7\x94`@Q\x97\x88\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\x08\"V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\x08\"V[\x03\x91Z\xFA\x80\x15a\x04sWa\x04\x1AW[` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x16`@Q\x90\x81R\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04FW`@Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03\xF8V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x91\x81`\x1F\x84\x01\x12\x15a\x04~W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04~W` \x83\x81\x86\x01\x95\x01\x01\x11a\x04~WV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04~WV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f274146107a7575080632b7ac3f31461075757806338f3efd41461071d57806381a9d38a146106e3578063c22a969414610133578063cca3b4fe146100f8578063d46e5f01146100b35763e5951dd114610076575f80fd5b346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100b057806003193601126100b057602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e57604060031936011261047e5760043567ffffffffffffffff811161047e576101649036906004016107df565b60243567ffffffffffffffff811161047e576101849036906004016107df565b919060e084838101031261047e576040519360e0850185811067ffffffffffffffff8211176104465760405280358086526101c16020830161080d565b602087019081526101d46040840161080d565b6040880190815260608801906060850135825260808901926080860135845260a08a019460a0870135865260c08701359a73ffffffffffffffffffffffffffffffffffffffff8c168c0361047e5760c0019a8b527f000000000000000000000000000000000000000000000000000000000000000003610685575167ffffffffffffffff1642106106275767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105fa5767ffffffffffffffff16421161059c57517f00000000000000000000000000000000000000000000000000000000000000000361053e57517f0000000000000000000000000000000000000000000000000000000000000000036104e057517f0000000000000000000000000000000000000000000000000000000000000000036104825773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561047e575f936103e96103d794604051978896879586957f41493c600000000000000000000000000000000000000000000000000000000087527f00000000000000000000000000000000000000000000000000000000000000006004880152606060248801526064870191610822565b91600319858403016044860152610822565b03915afa80156104735761041a575b602073ffffffffffffffffffffffffffffffffffffffff835116604051908152f35b67ffffffffffffffff81116104465760405273ffffffffffffffffffffffffffffffffffffffff6103f8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461047e575f60031936011261047e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b9181601f8401121561047e5782359167ffffffffffffffff831161047e576020838186019501011161047e57565b359067ffffffffffffffff8216820361047e57565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\x07\xA7WP\x80c+z\xC3\xF3\x14a\x07WW\x80c8\xF3\xEF\xD4\x14a\x07\x1DW\x80c\x81\xA9\xD3\x8A\x14a\x06\xE3W\x80c\xC2*\x96\x94\x14a\x013W\x80c\xCC\xA3\xB4\xFE\x14a\0\xF8W\x80c\xD4n_\x01\x14a\0\xB3Wc\xE5\x95\x1D\xD1\x14a\0vW_\x80\xFD[4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W`@`\x03\x196\x01\x12a\x04~W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01d\x906\x90`\x04\x01a\x07\xDFV[`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01\x84\x906\x90`\x04\x01a\x07\xDFV[\x91\x90`\xE0\x84\x83\x81\x01\x03\x12a\x04~W`@Q\x93`\xE0\x85\x01\x85\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04FW`@R\x805\x80\x86Ra\x01\xC1` \x83\x01a\x08\rV[` \x87\x01\x90\x81Ra\x01\xD4`@\x84\x01a\x08\rV[`@\x88\x01\x90\x81R``\x88\x01\x90``\x85\x015\x82R`\x80\x89\x01\x92`\x80\x86\x015\x84R`\xA0\x8A\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x9As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16\x8C\x03a\x04~W`\xC0\x01\x9A\x8BR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06\x85WQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x06'Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xFAWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05\x9CWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05>WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xE0WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\x82Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04~W_\x93a\x03\xE9a\x03\xD7\x94`@Q\x97\x88\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\x08\"V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\x08\"V[\x03\x91Z\xFA\x80\x15a\x04sWa\x04\x1AW[` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x16`@Q\x90\x81R\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04FW`@Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03\xF8V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x91\x81`\x1F\x84\x01\x12\x15a\x04~W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04~W` \x83\x81\x86\x01\x95\x01\x01\x11a\x04~WV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04~WV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /**Constructor`.
```solidity
constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, uint64 _expirationTolerance);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _verifier: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _expirationTolerance: u64,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                u64,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._verifier,
                        value._attestationDocVerifierVKey,
                        value._rootCertHash,
                        value._pcr0,
                        value._pcr1,
                        value._pcr2,
                        value._expirationTolerance,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _verifier: tuple.0,
                        _attestationDocVerifierVKey: tuple.1,
                        _rootCertHash: tuple.2,
                        _pcr0: tuple.3,
                        _pcr1: tuple.4,
                        _pcr2: tuple.5,
                        _expirationTolerance: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._verifier,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifierVKey,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._rootCertHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr0),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr2),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self._expirationTolerance),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `attestationDocVerifierVKey()` and selector `0xe5951dd1`.
```solidity
function attestationDocVerifierVKey() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`attestationDocVerifierVKey()`](attestationDocVerifierVKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for attestationDocVerifierVKeyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "attestationDocVerifierVKey()";
            const SELECTOR: [u8; 4] = [229u8, 149u8, 29u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: attestationDocVerifierVKeyReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: attestationDocVerifierVKeyReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `expirationTolerance()` and selector `0xd46e5f01`.
```solidity
function expirationTolerance() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expirationToleranceCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`expirationTolerance()`](expirationToleranceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expirationToleranceReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expirationToleranceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: expirationToleranceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for expirationToleranceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expirationToleranceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: expirationToleranceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for expirationToleranceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for expirationToleranceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = u64;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "expirationTolerance()";
            const SELECTOR: [u8; 4] = [212u8, 110u8, 95u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: expirationToleranceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: expirationToleranceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr0()` and selector `0x81a9d38a`.
```solidity
function pcr0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr0()`](pcr0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr0()";
            const SELECTOR: [u8; 4] = [129u8, 169u8, 211u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr0Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr0Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr1()` and selector `0xcca3b4fe`.
```solidity
function pcr1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr1()`](pcr1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr1()";
            const SELECTOR: [u8; 4] = [204u8, 163u8, 180u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr1Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr1Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr2()` and selector `0x38f3efd4`.
```solidity
function pcr2() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr2()`](pcr2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr2()";
            const SELECTOR: [u8; 4] = [56u8, 243u8, 239u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr2Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr2Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `rootCertHash()` and selector `0x0553f274`.
```solidity
function rootCertHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`rootCertHash()`](rootCertHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rootCertHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rootCertHash()";
            const SELECTOR: [u8; 4] = [5u8, 83u8, 242u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: rootCertHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: rootCertHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifier()` and selector `0x2b7ac3f3`.
```solidity
function verifier() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifier()`](verifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifier()";
            const SELECTOR: [u8; 4] = [43u8, 122u8, 195u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifierReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifierReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyAttestationDocProof(bytes,bytes)` and selector `0xc22a9694`.
```solidity
function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofCall {
        #[allow(missing_docs)]
        pub _publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proofBytes: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifyAttestationDocProof(bytes,bytes)`](verifyAttestationDocProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofCall) -> Self {
                    (value._publicValues, value._proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _publicValues: tuple.0,
                        _proofBytes: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyAttestationDocProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyAttestationDocProof(bytes,bytes)";
            const SELECTOR: [u8; 4] = [194u8, 42u8, 150u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proofBytes,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`AttestationDocVerifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum AttestationDocVerifierCalls {
        #[allow(missing_docs)]
        attestationDocVerifierVKey(attestationDocVerifierVKeyCall),
        #[allow(missing_docs)]
        expirationTolerance(expirationToleranceCall),
        #[allow(missing_docs)]
        pcr0(pcr0Call),
        #[allow(missing_docs)]
        pcr1(pcr1Call),
        #[allow(missing_docs)]
        pcr2(pcr2Call),
        #[allow(missing_docs)]
        rootCertHash(rootCertHashCall),
        #[allow(missing_docs)]
        verifier(verifierCall),
        #[allow(missing_docs)]
        verifyAttestationDocProof(verifyAttestationDocProofCall),
    }
    #[automatically_derived]
    impl AttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 83u8, 242u8, 116u8],
            [43u8, 122u8, 195u8, 243u8],
            [56u8, 243u8, 239u8, 212u8],
            [129u8, 169u8, 211u8, 138u8],
            [194u8, 42u8, 150u8, 148u8],
            [204u8, 163u8, 180u8, 254u8],
            [212u8, 110u8, 95u8, 1u8],
            [229u8, 149u8, 29u8, 209u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AttestationDocVerifierCalls {
        const NAME: &'static str = "AttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::attestationDocVerifierVKey(_) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::expirationTolerance(_) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pcr0(_) => <pcr0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr1(_) => <pcr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr2(_) => <pcr2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::rootCertHash(_) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifier(_) => <verifierCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyAttestationDocProof(_) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr2(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn pcr0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn expirationTolerance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <expirationToleranceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::expirationTolerance)
                    }
                    expirationTolerance
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr2(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn pcr0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn expirationTolerance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <expirationToleranceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::expirationTolerance)
                    }
                    expirationTolerance
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::expirationTolerance(inner) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::expirationTolerance(inner) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AttestationDocVerifierInstance<P, N> {
        AttestationDocVerifierInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _expirationTolerance: u64,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AttestationDocVerifierInstance<P, N>>,
    > {
        AttestationDocVerifierInstance::<
            P,
            N,
        >::deploy(
            provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _expirationTolerance,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _expirationTolerance: u64,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        AttestationDocVerifierInstance::<
            P,
            N,
        >::deploy_builder(
            provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _expirationTolerance,
        )
    }
    /**A [`AttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AttestationDocVerifierInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for AttestationDocVerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AttestationDocVerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _expirationTolerance: u64,
        ) -> alloy_contract::Result<AttestationDocVerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _verifier,
                _attestationDocVerifierVKey,
                _rootCertHash,
                _pcr0,
                _pcr1,
                _pcr2,
                _expirationTolerance,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _expirationTolerance: u64,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _verifier,
                            _attestationDocVerifierVKey,
                            _rootCertHash,
                            _pcr0,
                            _pcr1,
                            _pcr2,
                            _expirationTolerance,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> AttestationDocVerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AttestationDocVerifierInstance<P, N> {
            AttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`attestationDocVerifierVKey`] function.
        pub fn attestationDocVerifierVKey(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, attestationDocVerifierVKeyCall, N> {
            self.call_builder(&attestationDocVerifierVKeyCall)
        }
        ///Creates a new call builder for the [`expirationTolerance`] function.
        pub fn expirationTolerance(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, expirationToleranceCall, N> {
            self.call_builder(&expirationToleranceCall)
        }
        ///Creates a new call builder for the [`pcr0`] function.
        pub fn pcr0(&self) -> alloy_contract::SolCallBuilder<&P, pcr0Call, N> {
            self.call_builder(&pcr0Call)
        }
        ///Creates a new call builder for the [`pcr1`] function.
        pub fn pcr1(&self) -> alloy_contract::SolCallBuilder<&P, pcr1Call, N> {
            self.call_builder(&pcr1Call)
        }
        ///Creates a new call builder for the [`pcr2`] function.
        pub fn pcr2(&self) -> alloy_contract::SolCallBuilder<&P, pcr2Call, N> {
            self.call_builder(&pcr2Call)
        }
        ///Creates a new call builder for the [`rootCertHash`] function.
        pub fn rootCertHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, rootCertHashCall, N> {
            self.call_builder(&rootCertHashCall)
        }
        ///Creates a new call builder for the [`verifier`] function.
        pub fn verifier(&self) -> alloy_contract::SolCallBuilder<&P, verifierCall, N> {
            self.call_builder(&verifierCall)
        }
        ///Creates a new call builder for the [`verifyAttestationDocProof`] function.
        pub fn verifyAttestationDocProof(
            &self,
            _publicValues: alloy::sol_types::private::Bytes,
            _proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, verifyAttestationDocProofCall, N> {
            self.call_builder(
                &verifyAttestationDocProofCall {
                    _publicValues,
                    _proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
