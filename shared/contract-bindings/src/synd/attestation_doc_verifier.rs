/**

Generated by the following Solidity interface...
```solidity
interface AttestationDocVerifier {
    constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, uint64 _expirationTolerance, string _syndCommitHash);

    function attestationDocVerifierVKey() external view returns (bytes32);
    function expirationTolerance() external view returns (uint64);
    function pcr0() external view returns (bytes32);
    function pcr1() external view returns (bytes32);
    function pcr2() external view returns (bytes32);
    function rootCertHash() external view returns (bytes32);
    function syndCommitHash() external view returns (string memory);
    function verifier() external view returns (address);
    function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_verifier",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_attestationDocVerifierVKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_rootCertHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_expirationTolerance",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "_syndCommitHash",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "attestationDocVerifierVKey",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "expirationTolerance",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rootCertHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "syndCommitHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyAttestationDocProof",
    "inputs": [
      {
        "name": "_publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610160604052346102c557610cf28038038061001a816102c9565b928339810190610100818303126102c55780516001600160a01b03811681036102c5576020820151604083015160608401519060808501519260a08601519460c08701519660018060401b03881688036102c55760e0810151906001600160401b0382116102c5570188601f820112156102c5578051906001600160401b0382116102b1576100b2601f8301601f19166020016102c9565b99828b52602083830101116102c557815f926020809301838d015e8a01015260805260a05260c05260e05261010052610120526101405280516001600160401b0381116102b1575f54600181811c911680156102a7575b602082101461029357601f8111610231575b50602091601f82116001146101d3579181925f926101c8575b50508160011b915f199060031b1c1916175f555b604051610a0390816102ef823960805181818161034e01526108e5015260a051818181609801526103ae015260c051818181610236015261091e015260e0518181816102c501526106ed01526101005181818161011b01526102ec015261012051818181610313015261089601526101405181818160df01526102820152f35b015190505f80610134565b601f198216925f8052805f20915f5b85811061021957508360019510610201575b505050811b015f55610148565b01515f1960f88460031b161c191690555f80806101f4565b919260206001819286850151815501940192016101e2565b5f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f830160051c81019160208410610289575b601f0160051c01905b81811061027e575061011b565b5f8155600101610271565b9091508190610268565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610109565b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102b15760405256fe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f27414610909575080632b7ac3f3146108b957806338f3efd41461087f5780635a0780751461071057806381a9d38a146106d6578063c22a96941461013e578063cca3b4fe14610103578063d46e5f01146100be5763e5951dd114610081575f80fd5b346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100bb57806003193601126100bb57602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346104445760406003193601126104445760043567ffffffffffffffff81116104445761016f903690600401610982565b9060243567ffffffffffffffff811161044457610190903690600401610982565b929060e0838381010312610444576040519260e0840184811067ffffffffffffffff8211176106a95760405280358085526101cd602083016109b0565b602086019081526101e0604084016109b0565b6040870190815260608701906060850135825260808801926080860135845260a089019460a0870135865260c08701359973ffffffffffffffffffffffffffffffffffffffff8b168b036104445760c001998a527f00000000000000000000000000000000000000000000000000000000000000000361064b575167ffffffffffffffff1642106105ed5767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105c05767ffffffffffffffff16421161056257517f00000000000000000000000000000000000000000000000000000000000000000361050457517f0000000000000000000000000000000000000000000000000000000000000000036104a657517f0000000000000000000000000000000000000000000000000000000000000000036104485773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610444575f936103f56103e394604051988996879586957f41493c600000000000000000000000000000000000000000000000000000000087527f000000000000000000000000000000000000000000000000000000000000000060048801526060602488015260648701916109c5565b916003198584030160448601526109c5565b03915afa9081156104395760209273ffffffffffffffffffffffffffffffffffffffff92610429575b505116604051908152f35b5f61043391610941565b5f61041e565b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f600319360112610444576040515f905f54918260011c60018416938415610875575b60208210851461084857818452602084019490811561080f57506001146107b3575b509061076a816040930382610941565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8351948593602085525180918160208701528686015e5f85828601015201168101030190f35b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b8082106107f55750909150810160200161076a61075a565b9192600181602092548385880101520191019092916107dd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016855250151560051b8201602001905061076a61075a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f1690610738565b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f60031936011261044457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610444575f600319360112610444576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106a957604052565b9181601f840112156104445782359167ffffffffffffffff8311610444576020838186019501011161044457565b359067ffffffffffffffff8216820361044457565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01``@R4a\x02\xC5Wa\x0C\xF2\x808\x03\x80a\0\x1A\x81a\x02\xC9V[\x92\x839\x81\x01\x90a\x01\0\x81\x83\x03\x12a\x02\xC5W\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xC5W` \x82\x01Q`@\x83\x01Q``\x84\x01Q\x90`\x80\x85\x01Q\x92`\xA0\x86\x01Q\x94`\xC0\x87\x01Q\x96`\x01\x80`@\x1B\x03\x88\x16\x88\x03a\x02\xC5W`\xE0\x81\x01Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xC5W\x01\x88`\x1F\x82\x01\x12\x15a\x02\xC5W\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xB1Wa\0\xB2`\x1F\x83\x01`\x1F\x19\x16` \x01a\x02\xC9V[\x99\x82\x8BR` \x83\x83\x01\x01\x11a\x02\xC5W\x81_\x92` \x80\x93\x01\x83\x8D\x01^\x8A\x01\x01R`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@R\x80Q`\x01`\x01`@\x1B\x03\x81\x11a\x02\xB1W_T`\x01\x81\x81\x1C\x91\x16\x80\x15a\x02\xA7W[` \x82\x10\x14a\x02\x93W`\x1F\x81\x11a\x021W[P` \x91`\x1F\x82\x11`\x01\x14a\x01\xD3W\x91\x81\x92_\x92a\x01\xC8W[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17_U[`@Qa\n\x03\x90\x81a\x02\xEF\x829`\x80Q\x81\x81\x81a\x03N\x01Ra\x08\xE5\x01R`\xA0Q\x81\x81\x81`\x98\x01Ra\x03\xAE\x01R`\xC0Q\x81\x81\x81a\x026\x01Ra\t\x1E\x01R`\xE0Q\x81\x81\x81a\x02\xC5\x01Ra\x06\xED\x01Ra\x01\0Q\x81\x81\x81a\x01\x1B\x01Ra\x02\xEC\x01Ra\x01 Q\x81\x81\x81a\x03\x13\x01Ra\x08\x96\x01Ra\x01@Q\x81\x81\x81`\xDF\x01Ra\x02\x82\x01R\xF3[\x01Q\x90P_\x80a\x014V[`\x1F\x19\x82\x16\x92_\x80R\x80_ \x91_[\x85\x81\x10a\x02\x19WP\x83`\x01\x95\x10a\x02\x01W[PPP\x81\x1B\x01_Ua\x01HV[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U_\x80\x80a\x01\xF4V[\x91\x92` `\x01\x81\x92\x86\x85\x01Q\x81U\x01\x94\x01\x92\x01a\x01\xE2V[_\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c`\x1F\x83\x01`\x05\x1C\x81\x01\x91` \x84\x10a\x02\x89W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x02~WPa\x01\x1BV[_\x81U`\x01\x01a\x02qV[\x90\x91P\x81\x90a\x02hV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x01\tV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x80\xFD[`@Q\x91\x90`\x1F\x01`\x1F\x19\x16\x82\x01`\x01`\x01`@\x1B\x03\x81\x11\x83\x82\x10\x17a\x02\xB1W`@RV\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\t\tWP\x80c+z\xC3\xF3\x14a\x08\xB9W\x80c8\xF3\xEF\xD4\x14a\x08\x7FW\x80cZ\x07\x80u\x14a\x07\x10W\x80c\x81\xA9\xD3\x8A\x14a\x06\xD6W\x80c\xC2*\x96\x94\x14a\x01>W\x80c\xCC\xA3\xB4\xFE\x14a\x01\x03W\x80c\xD4n_\x01\x14a\0\xBEWc\xE5\x95\x1D\xD1\x14a\0\x81W_\x80\xFD[4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW`@`\x03\x196\x01\x12a\x04DW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01o\x906\x90`\x04\x01a\t\x82V[\x90`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01\x90\x906\x90`\x04\x01a\t\x82V[\x92\x90`\xE0\x83\x83\x81\x01\x03\x12a\x04DW`@Q\x92`\xE0\x84\x01\x84\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@R\x805\x80\x85Ra\x01\xCD` \x83\x01a\t\xB0V[` \x86\x01\x90\x81Ra\x01\xE0`@\x84\x01a\t\xB0V[`@\x87\x01\x90\x81R``\x87\x01\x90``\x85\x015\x82R`\x80\x88\x01\x92`\x80\x86\x015\x84R`\xA0\x89\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x99s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16\x8B\x03a\x04DW`\xC0\x01\x99\x8AR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06KWQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x05\xEDWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC0Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05bWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05\x04WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xA6WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04HWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04DW_\x93a\x03\xF5a\x03\xE3\x94`@Q\x98\x89\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\t\xC5V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\t\xC5V[\x03\x91Z\xFA\x90\x81\x15a\x049W` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\x04)W[PQ\x16`@Q\x90\x81R\xF3[_a\x043\x91a\tAV[_a\x04\x1EV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW`@Q_\x90_T\x91\x82`\x01\x1C`\x01\x84\x16\x93\x84\x15a\x08uW[` \x82\x10\x85\x14a\x08HW\x81\x84R` \x84\x01\x94\x90\x81\x15a\x08\x0FWP`\x01\x14a\x07\xB3W[P\x90a\x07j\x81`@\x93\x03\x82a\tAV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83Q\x94\x85\x93` \x85RQ\x80\x91\x81` \x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[_\x80\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x93\x92P\x90[\x80\x82\x10a\x07\xF5WP\x90\x91P\x81\x01` \x01a\x07ja\x07ZV[\x91\x92`\x01\x81` \x92T\x83\x85\x88\x01\x01R\x01\x91\x01\x90\x92\x91a\x07\xDDV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16\x85RP\x15\x15`\x05\x1B\x82\x01` \x01\x90Pa\x07ja\x07ZV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x078V[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@RV[\x91\x81`\x1F\x84\x01\x12\x15a\x04DW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04DW` \x83\x81\x86\x01\x95\x01\x01\x11a\x04DWV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04DWV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f27414610909575080632b7ac3f3146108b957806338f3efd41461087f5780635a0780751461071057806381a9d38a146106d6578063c22a96941461013e578063cca3b4fe14610103578063d46e5f01146100be5763e5951dd114610081575f80fd5b346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100bb57806003193601126100bb57602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346104445760406003193601126104445760043567ffffffffffffffff81116104445761016f903690600401610982565b9060243567ffffffffffffffff811161044457610190903690600401610982565b929060e0838381010312610444576040519260e0840184811067ffffffffffffffff8211176106a95760405280358085526101cd602083016109b0565b602086019081526101e0604084016109b0565b6040870190815260608701906060850135825260808801926080860135845260a089019460a0870135865260c08701359973ffffffffffffffffffffffffffffffffffffffff8b168b036104445760c001998a527f00000000000000000000000000000000000000000000000000000000000000000361064b575167ffffffffffffffff1642106105ed5767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105c05767ffffffffffffffff16421161056257517f00000000000000000000000000000000000000000000000000000000000000000361050457517f0000000000000000000000000000000000000000000000000000000000000000036104a657517f0000000000000000000000000000000000000000000000000000000000000000036104485773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610444575f936103f56103e394604051988996879586957f41493c600000000000000000000000000000000000000000000000000000000087527f000000000000000000000000000000000000000000000000000000000000000060048801526060602488015260648701916109c5565b916003198584030160448601526109c5565b03915afa9081156104395760209273ffffffffffffffffffffffffffffffffffffffff92610429575b505116604051908152f35b5f61043391610941565b5f61041e565b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f600319360112610444576040515f905f54918260011c60018416938415610875575b60208210851461084857818452602084019490811561080f57506001146107b3575b509061076a816040930382610941565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8351948593602085525180918160208701528686015e5f85828601015201168101030190f35b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b8082106107f55750909150810160200161076a61075a565b9192600181602092548385880101520191019092916107dd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016855250151560051b8201602001905061076a61075a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f1690610738565b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f60031936011261044457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610444575f600319360112610444576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106a957604052565b9181601f840112156104445782359167ffffffffffffffff8311610444576020838186019501011161044457565b359067ffffffffffffffff8216820361044457565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\t\tWP\x80c+z\xC3\xF3\x14a\x08\xB9W\x80c8\xF3\xEF\xD4\x14a\x08\x7FW\x80cZ\x07\x80u\x14a\x07\x10W\x80c\x81\xA9\xD3\x8A\x14a\x06\xD6W\x80c\xC2*\x96\x94\x14a\x01>W\x80c\xCC\xA3\xB4\xFE\x14a\x01\x03W\x80c\xD4n_\x01\x14a\0\xBEWc\xE5\x95\x1D\xD1\x14a\0\x81W_\x80\xFD[4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW`@`\x03\x196\x01\x12a\x04DW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01o\x906\x90`\x04\x01a\t\x82V[\x90`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01\x90\x906\x90`\x04\x01a\t\x82V[\x92\x90`\xE0\x83\x83\x81\x01\x03\x12a\x04DW`@Q\x92`\xE0\x84\x01\x84\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@R\x805\x80\x85Ra\x01\xCD` \x83\x01a\t\xB0V[` \x86\x01\x90\x81Ra\x01\xE0`@\x84\x01a\t\xB0V[`@\x87\x01\x90\x81R``\x87\x01\x90``\x85\x015\x82R`\x80\x88\x01\x92`\x80\x86\x015\x84R`\xA0\x89\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x99s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16\x8B\x03a\x04DW`\xC0\x01\x99\x8AR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06KWQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x05\xEDWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC0Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05bWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05\x04WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xA6WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04HWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04DW_\x93a\x03\xF5a\x03\xE3\x94`@Q\x98\x89\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\t\xC5V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\t\xC5V[\x03\x91Z\xFA\x90\x81\x15a\x049W` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\x04)W[PQ\x16`@Q\x90\x81R\xF3[_a\x043\x91a\tAV[_a\x04\x1EV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW`@Q_\x90_T\x91\x82`\x01\x1C`\x01\x84\x16\x93\x84\x15a\x08uW[` \x82\x10\x85\x14a\x08HW\x81\x84R` \x84\x01\x94\x90\x81\x15a\x08\x0FWP`\x01\x14a\x07\xB3W[P\x90a\x07j\x81`@\x93\x03\x82a\tAV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83Q\x94\x85\x93` \x85RQ\x80\x91\x81` \x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[_\x80\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x93\x92P\x90[\x80\x82\x10a\x07\xF5WP\x90\x91P\x81\x01` \x01a\x07ja\x07ZV[\x91\x92`\x01\x81` \x92T\x83\x85\x88\x01\x01R\x01\x91\x01\x90\x92\x91a\x07\xDDV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16\x85RP\x15\x15`\x05\x1B\x82\x01` \x01\x90Pa\x07ja\x07ZV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x078V[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@RV[\x91\x81`\x1F\x84\x01\x12\x15a\x04DW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04DW` \x83\x81\x86\x01\x95\x01\x01\x11a\x04DWV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04DWV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /**Constructor`.
```solidity
constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, uint64 _expirationTolerance, string _syndCommitHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _verifier: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _expirationTolerance: u64,
        #[allow(missing_docs)]
        pub _syndCommitHash: alloy::sol_types::private::String,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                u64,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._verifier,
                        value._attestationDocVerifierVKey,
                        value._rootCertHash,
                        value._pcr0,
                        value._pcr1,
                        value._pcr2,
                        value._expirationTolerance,
                        value._syndCommitHash,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _verifier: tuple.0,
                        _attestationDocVerifierVKey: tuple.1,
                        _rootCertHash: tuple.2,
                        _pcr0: tuple.3,
                        _pcr1: tuple.4,
                        _pcr2: tuple.5,
                        _expirationTolerance: tuple.6,
                        _syndCommitHash: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._verifier,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifierVKey,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._rootCertHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr0),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr2),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self._expirationTolerance),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._syndCommitHash,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `attestationDocVerifierVKey()` and selector `0xe5951dd1`.
```solidity
function attestationDocVerifierVKey() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`attestationDocVerifierVKey()`](attestationDocVerifierVKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for attestationDocVerifierVKeyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "attestationDocVerifierVKey()";
            const SELECTOR: [u8; 4] = [229u8, 149u8, 29u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: attestationDocVerifierVKeyReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: attestationDocVerifierVKeyReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `expirationTolerance()` and selector `0xd46e5f01`.
```solidity
function expirationTolerance() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expirationToleranceCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`expirationTolerance()`](expirationToleranceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expirationToleranceReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expirationToleranceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: expirationToleranceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for expirationToleranceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expirationToleranceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: expirationToleranceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for expirationToleranceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for expirationToleranceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = u64;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "expirationTolerance()";
            const SELECTOR: [u8; 4] = [212u8, 110u8, 95u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: expirationToleranceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: expirationToleranceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr0()` and selector `0x81a9d38a`.
```solidity
function pcr0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr0()`](pcr0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr0()";
            const SELECTOR: [u8; 4] = [129u8, 169u8, 211u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr0Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr0Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr1()` and selector `0xcca3b4fe`.
```solidity
function pcr1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr1()`](pcr1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr1()";
            const SELECTOR: [u8; 4] = [204u8, 163u8, 180u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr1Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr1Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pcr2()` and selector `0x38f3efd4`.
```solidity
function pcr2() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Call;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pcr2()`](pcr2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr2()";
            const SELECTOR: [u8; 4] = [56u8, 243u8, 239u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pcr2Return = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pcr2Return = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `rootCertHash()` and selector `0x0553f274`.
```solidity
function rootCertHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`rootCertHash()`](rootCertHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rootCertHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rootCertHash()";
            const SELECTOR: [u8; 4] = [5u8, 83u8, 242u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: rootCertHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: rootCertHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `syndCommitHash()` and selector `0x5a078075`.
```solidity
function syndCommitHash() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCommitHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`syndCommitHash()`](syndCommitHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCommitHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCommitHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCommitHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCommitHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCommitHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: syndCommitHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for syndCommitHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCommitHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "syndCommitHash()";
            const SELECTOR: [u8; 4] = [90u8, 7u8, 128u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: syndCommitHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: syndCommitHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifier()` and selector `0x2b7ac3f3`.
```solidity
function verifier() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifier()`](verifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifier()";
            const SELECTOR: [u8; 4] = [43u8, 122u8, 195u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifierReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifierReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyAttestationDocProof(bytes,bytes)` and selector `0xc22a9694`.
```solidity
function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofCall {
        #[allow(missing_docs)]
        pub _publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proofBytes: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifyAttestationDocProof(bytes,bytes)`](verifyAttestationDocProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofCall) -> Self {
                    (value._publicValues, value._proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _publicValues: tuple.0,
                        _proofBytes: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyAttestationDocProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyAttestationDocProof(bytes,bytes)";
            const SELECTOR: [u8; 4] = [194u8, 42u8, 150u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proofBytes,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`AttestationDocVerifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum AttestationDocVerifierCalls {
        #[allow(missing_docs)]
        attestationDocVerifierVKey(attestationDocVerifierVKeyCall),
        #[allow(missing_docs)]
        expirationTolerance(expirationToleranceCall),
        #[allow(missing_docs)]
        pcr0(pcr0Call),
        #[allow(missing_docs)]
        pcr1(pcr1Call),
        #[allow(missing_docs)]
        pcr2(pcr2Call),
        #[allow(missing_docs)]
        rootCertHash(rootCertHashCall),
        #[allow(missing_docs)]
        syndCommitHash(syndCommitHashCall),
        #[allow(missing_docs)]
        verifier(verifierCall),
        #[allow(missing_docs)]
        verifyAttestationDocProof(verifyAttestationDocProofCall),
    }
    #[automatically_derived]
    impl AttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 83u8, 242u8, 116u8],
            [43u8, 122u8, 195u8, 243u8],
            [56u8, 243u8, 239u8, 212u8],
            [90u8, 7u8, 128u8, 117u8],
            [129u8, 169u8, 211u8, 138u8],
            [194u8, 42u8, 150u8, 148u8],
            [204u8, 163u8, 180u8, 254u8],
            [212u8, 110u8, 95u8, 1u8],
            [229u8, 149u8, 29u8, 209u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AttestationDocVerifierCalls {
        const NAME: &'static str = "AttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::attestationDocVerifierVKey(_) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::expirationTolerance(_) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pcr0(_) => <pcr0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr1(_) => <pcr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr2(_) => <pcr2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::rootCertHash(_) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::syndCommitHash(_) => {
                    <syndCommitHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifier(_) => <verifierCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyAttestationDocProof(_) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr2(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn syndCommitHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <syndCommitHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::syndCommitHash)
                    }
                    syndCommitHash
                },
                {
                    fn pcr0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn expirationTolerance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <expirationToleranceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::expirationTolerance)
                    }
                    expirationTolerance
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr2(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn syndCommitHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <syndCommitHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::syndCommitHash)
                    }
                    syndCommitHash
                },
                {
                    fn pcr0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn expirationTolerance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <expirationToleranceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::expirationTolerance)
                    }
                    expirationTolerance
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::expirationTolerance(inner) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::syndCommitHash(inner) => {
                    <syndCommitHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::expirationTolerance(inner) => {
                    <expirationToleranceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::syndCommitHash(inner) => {
                    <syndCommitHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        __provider: P,
    ) -> AttestationDocVerifierInstance<P, N> {
        AttestationDocVerifierInstance::<P, N>::new(address, __provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _expirationTolerance: u64,
        _syndCommitHash: alloy::sol_types::private::String,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AttestationDocVerifierInstance<P, N>>,
    > {
        AttestationDocVerifierInstance::<
            P,
            N,
        >::deploy(
            __provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _expirationTolerance,
            _syndCommitHash,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _expirationTolerance: u64,
        _syndCommitHash: alloy::sol_types::private::String,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        AttestationDocVerifierInstance::<
            P,
            N,
        >::deploy_builder(
            __provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _expirationTolerance,
            _syndCommitHash,
        )
    }
    /**A [`AttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AttestationDocVerifierInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for AttestationDocVerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AttestationDocVerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            __provider: P,
        ) -> Self {
            Self {
                address,
                provider: __provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            __provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _expirationTolerance: u64,
            _syndCommitHash: alloy::sol_types::private::String,
        ) -> alloy_contract::Result<AttestationDocVerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                __provider,
                _verifier,
                _attestationDocVerifierVKey,
                _rootCertHash,
                _pcr0,
                _pcr1,
                _pcr2,
                _expirationTolerance,
                _syndCommitHash,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            __provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _expirationTolerance: u64,
            _syndCommitHash: alloy::sol_types::private::String,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                __provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _verifier,
                            _attestationDocVerifierVKey,
                            _rootCertHash,
                            _pcr0,
                            _pcr1,
                            _pcr2,
                            _expirationTolerance,
                            _syndCommitHash,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> AttestationDocVerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AttestationDocVerifierInstance<P, N> {
            AttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`attestationDocVerifierVKey`] function.
        pub fn attestationDocVerifierVKey(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, attestationDocVerifierVKeyCall, N> {
            self.call_builder(&attestationDocVerifierVKeyCall)
        }
        ///Creates a new call builder for the [`expirationTolerance`] function.
        pub fn expirationTolerance(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, expirationToleranceCall, N> {
            self.call_builder(&expirationToleranceCall)
        }
        ///Creates a new call builder for the [`pcr0`] function.
        pub fn pcr0(&self) -> alloy_contract::SolCallBuilder<&P, pcr0Call, N> {
            self.call_builder(&pcr0Call)
        }
        ///Creates a new call builder for the [`pcr1`] function.
        pub fn pcr1(&self) -> alloy_contract::SolCallBuilder<&P, pcr1Call, N> {
            self.call_builder(&pcr1Call)
        }
        ///Creates a new call builder for the [`pcr2`] function.
        pub fn pcr2(&self) -> alloy_contract::SolCallBuilder<&P, pcr2Call, N> {
            self.call_builder(&pcr2Call)
        }
        ///Creates a new call builder for the [`rootCertHash`] function.
        pub fn rootCertHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, rootCertHashCall, N> {
            self.call_builder(&rootCertHashCall)
        }
        ///Creates a new call builder for the [`syndCommitHash`] function.
        pub fn syndCommitHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, syndCommitHashCall, N> {
            self.call_builder(&syndCommitHashCall)
        }
        ///Creates a new call builder for the [`verifier`] function.
        pub fn verifier(&self) -> alloy_contract::SolCallBuilder<&P, verifierCall, N> {
            self.call_builder(&verifierCall)
        }
        ///Creates a new call builder for the [`verifyAttestationDocProof`] function.
        pub fn verifyAttestationDocProof(
            &self,
            _publicValues: alloy::sol_types::private::Bytes,
            _proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, verifyAttestationDocProofCall, N> {
            self.call_builder(
                &verifyAttestationDocProofCall {
                    _publicValues,
                    _proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
