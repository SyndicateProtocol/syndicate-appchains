/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChain {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrProposerNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _appChainId);

    function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
    function appChainId() external view returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function txAcc() external view returns (bytes32);
    function txCount() external view returns (uint64);
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "TX_DATA_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "txAcc",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "txCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrProposerNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b6116576104ca8239608051816105cc015261165790f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611ce0803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610169601860209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf6102d7565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60a01b90565b906101f660ff60a01b916101e1565b9181191691161790565b151590565b61020e90610200565b90565b90565b9061022961022461023092610205565b610211565b82546101e7565b9055565b5f0190565b61024161003d565b3d5f823e3d90fd5b60018060a01b031690565b61026861026361026d92610249565b61010d565b610249565b90565b61027990610254565b90565b61028590610270565b90565b5f1b90565b9061029e60018060a01b0391610288565b9181191691161790565b6102b190610270565b90565b90565b906102cc6102c76102d3926102a8565b6102b4565b825461028d565b9055565b6102e033610344565b6102eb5f6001610214565b6102f361003d565b6101bf810181811060018060401b0382111761033f5761031b82916101bf611b218439610234565b03905ff0801561033a576103316103389161027c565b60016102b7565b565b610239565b610051565b61034d906103a5565b565b61036361035e6103689261010a565b61010d565b610249565b90565b6103749061034f565b90565b61038090610249565b90565b61038c90610377565b9052565b91906103a3905f60208501940190610383565b565b806103c06103ba6103b55f61036b565b610377565b91610377565b146103d0576103ce9061046a565b565b6103fa6103dc5f61036b565b6103e461003d565b918291631e4fbdf760e01b835260048301610390565b0390fd5b5f1c90565b60018060a01b031690565b61041a61041f916103fe565b610403565b90565b61042c905461040e565b90565b61043890610254565b90565b6104449061042f565b90565b90565b9061045f61045a6104669261043b565b610447565b825461028d565b9055565b6104735f610422565b61047d825f61044a565b906104b16104ab7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361043b565b9161043b565b916104ba61003d565b806104c481610234565b0390a356fe60806040526004361015610013575b6107b3565b61001d5f356100fc565b80630b83249d146100f757806332704864146100f25780633514d37b146100ed5780633c540687146100e857806346e2cc09146100e3578063485cc955146100de5780635b3cd6e2146100d9578063715018a6146100d45780637a3979dc146100cf57806383470923146100ca5780638da5cb5b146100c55780639d91597b146100c0578063d4f0eb4d146100bb5763f2fde38b0361000e57610780565b61074d565b6106fa565b61066a565b610613565b610591565b6104e5565b6104b0565b6103df565b610344565b61030f565b6102ac565b610202565b61019a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561015a5781359167ffffffffffffffff831161015557602001926020830284011161015057565b61011c565b610118565b610114565b90602082820312610190575f82013567ffffffffffffffff811161018b576101879201610120565b9091565b610110565b61010c565b5f0190565b346101c9576101b36101ad36600461015f565b90610870565b6101bb610102565b806101c581610195565b0390f35b610108565b5f9103126101d857565b61010c565b90565b6101e9906101dd565b9052565b9190610200905f602085019401906101e0565b565b34610232576102123660046101ce565b61022e61021d610924565b610225610102565b918291826101ed565b0390f35b610108565b909182601f830112156102715781359167ffffffffffffffff831161026c57602001926001830284011161026757565b61011c565b610118565b610114565b906020828203126102a7575f82013567ffffffffffffffff81116102a25761029e9201610237565b9091565b610110565b61010c565b346102db576102c56102bf366004610276565b90610a78565b6102cd610102565b806102d781610195565b0390f35b610108565b67ffffffffffffffff1690565b6102f6906102e0565b9052565b919061030d905f602085019401906102ed565b565b3461033f5761031f3660046101ce565b61033b61032a610ab6565b610332610102565b918291826102fa565b0390f35b610108565b346103735761035d610357366004610276565b90610b39565b610365610102565b8061036f81610195565b0390f35b610108565b60018060a01b031690565b61038c90610378565b90565b61039881610383565b0361039f57565b5f80fd5b905035906103b08261038f565b565b91906040838203126103da57806103ce6103d7925f86016103a3565b936020016103a3565b90565b61010c565b3461040e576103f86103f23660046103b2565b90610cf9565b610400610102565b8061040a81610195565b0390f35b610108565b1c90565b60018060a01b031690565b6104329060086104379302610413565b610417565b90565b906104459154610422565b90565b61045460015f9061043a565b90565b90565b61046e61046961047392610378565b610457565b610378565b90565b61047f9061045a565b90565b61048b90610476565b90565b61049790610482565b9052565b91906104ae905f6020850194019061048e565b565b346104e0576104c03660046101ce565b6104dc6104cb610448565b6104d3610102565b9182918261049b565b0390f35b610108565b34610513576104f53660046101ce565b6104fd610d2a565b610505610102565b8061050f81610195565b0390f35b610108565b916060838303126105655761052f825f85016103a3565b9261053d83602083016103a3565b92604082013567ffffffffffffffff81116105605761055c9201610237565b9091565b610110565b61010c565b151590565b6105789061056a565b9052565b919061058f905f6020850194019061056f565b565b346105c5576105c16105b06105a7366004610518565b92919091610e12565b6105b8610102565b9182918261057c565b0390f35b610108565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b6105fa906105ee565b9052565b9190610611905f602085019401906105f1565b565b34610643576106233660046101ce565b61063f61062e6105ca565b610636610102565b918291826105fe565b0390f35b610108565b61065190610383565b9052565b9190610668905f60208501940190610648565b565b3461069a5761067a3660046101ce565b610696610685610ed9565b61068d610102565b91829182610655565b0390f35b610108565b90565b5f1b90565b6106bb6106b66106c09261069f565b6106a2565b6101dd565b90565b6106ec7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a9696106a7565b90565b6106f76106c3565b90565b3461072a5761070a3660046101ce565b6107266107156106ef565b61071d610102565b918291826101ed565b0390f35b610108565b9060208282031261074857610745915f016103a3565b90565b61010c565b3461077b5761076561076036600461072f565b610fa5565b61076d610102565b8061077781610195565b0390f35b610108565b346107ae5761079861079336600461072f565b61101c565b6107a0610102565b806107aa81610195565b0390f35b610108565b5f80fd5b5090565b90565b6107d26107cd6107d7926107bb565b610457565b6105ee565b90565b60016107e691016105ee565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561084b570180359067ffffffffffffffff82116108465760200191600182023603831361084157565b610805565b610801565b6107fd565b9082101561086b5760206108679202810190610809565b9091565b6107e9565b9061087c8282906107b7565b916108865f6107be565b5b8061089a610894866105ee565b916105ee565b10156108f1576108c8906108be3332906108b686888691610850565b929091610e12565b6108cd575b6107da565b610887565b6108ec336108e66108e086888691610850565b906110aa565b906113a0565b6108c3565b50505050565b5f90565b5f1c90565b90565b61090f610914916108fb565b610900565b90565b6109219054610903565b90565b61092c6108f7565b5061093f5f61093961154f565b01610917565b90565b9061095e61095833329085859192909192610e12565b1561056a565b61096d5761096b91610a62565b565b610975610102565b6361aec64960e11b81528061098c60048201610195565b0390fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906109bc90610994565b810190811067ffffffffffffffff8211176109d657604052565b61099e565b906109ee6109e7610102565b92836109b2565b565b67ffffffffffffffff8111610a0e57610a0a602091610994565b0190565b61099e565b90825f939282370152565b90929192610a33610a2e826109f0565b6109db565b93818552602085019082840111610a4f57610a4d92610a13565b565b610990565b610a5f913691610a1e565b90565b610a70610a76923392610a54565b906113a0565b565b90610a8291610942565b565b5f90565b67ffffffffffffffff1690565b610aa1610aa6916108fb565b610a88565b90565b610ab39054610a95565b90565b610abe610a84565b50610ad26001610acc61154f565b01610aa9565b90565b90610af1610aeb33329085859192909192610e12565b1561056a565b610b0057610afe91610b23565b565b610b08610102565b6361aec64960e11b815280610b1f60048201610195565b0390fd5b610b31610b379233926110aa565b906113a0565b565b90610b4391610ad5565b565b90610b5791610b52611573565b610c5e565b565b60a01c90565b60ff1690565b610b71610b7691610b59565b610b5f565b90565b610b839054610b65565b90565b610b9a610b95610b9f926107bb565b610457565b610378565b90565b610bab90610b86565b90565b60a01b90565b90610bc360ff60a01b91610bae565b9181191691161790565b610bd69061056a565b90565b90565b90610bf1610bec610bf892610bcd565b610bd9565b8254610bb4565b9055565b610c059061045a565b90565b610c1190610bfc565b90565b90610c2560018060a01b03916106a2565b9181191691161790565b610c3890610bfc565b90565b90565b90610c53610c4e610c5a92610c2f565b610c3b565b8254610c14565b9055565b610c686001610b79565b610cd75781610c87610c81610c7c5f610ba2565b610383565b91610383565b14610cb457610cad610ca6610cb293610ca1600180610bdc565b610c08565b6001610c3e565b61101c565b565b610cbc610102565b632e7f3c7f60e11b815280610cd360048201610195565b0390fd5b610cdf610102565b62dc149f60e41b815280610cf560048201610195565b0390fd5b90610d0391610b45565b565b610d0d611573565b610d15610d17565b565b610d28610d235f610ba2565b6115eb565b565b610d32610d05565b565b5f90565b610d44610d49916108fb565b610417565b90565b610d569054610d38565b90565b60e01b90565b610d688161056a565b03610d6f57565b5f80fd5b90505190610d8082610d5f565b565b90602082820312610d9b57610d98915f01610d73565b90565b61010c565b60209181520190565b9190610dc381610dbc81610dc895610da0565b8095610a13565b610994565b0190565b610df2610dff9593949294610de860608401965f850190610648565b6020830190610648565b6040818503910152610da9565b90565b610e0a610102565b3d5f823e3d90fd5b92610e5560209394610e22610d34565b50610e60610e38610e336001610d4c565b610482565b93637a3979dc929597610e49610102565b98899788968796610d59565b865260048601610dcc565b03915afa908115610ea4575f91610e76575b5090565b610e97915060203d8111610e9d575b610e8f81836109b2565b810190610d82565b5f610e72565b503d610e85565b610e02565b5f90565b60018060a01b031690565b610ec4610ec9916108fb565b610ead565b90565b610ed69054610eb8565b90565b610ee1610ea9565b50610eeb5f610ecc565b90565b610eff90610efa611573565b610f0d565b565b610f0a90610476565b90565b80610f28610f22610f1d5f610ba2565b610383565b91610383565b14610f8257610f40610f3982610c08565b6001610c3e565b610f6a7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610f01565b90610f73610102565b80610f7d81610195565b0390a2565b610f8a610102565b632e7f3c7f60e11b815280610fa160048201610195565b0390fd5b610fae90610eee565b565b610fc190610fbc611573565b610fc3565b565b80610fde610fd8610fd35f610ba2565b610383565b91610383565b14610fee57610fec906115eb565b565b611018610ffa5f610ba2565b611002610102565b918291631e4fbdf760e01b835260048301610655565b0390fd5b61102590610fb0565b565b606090565b60ff60f81b1690565b60f81b90565b61104f61104a611054926107bb565b611035565b61102c565b90565b90565b61106661106b9161102c565b611057565b9052565b905090565b9091826110848161108b9361106f565b8093610a13565b0190565b806110a06001926110a7969461105a565b0191611074565b90565b6110e8906110b6611027565b506110d96110c35f61103b565b91936110cd610102565b9485936020850161108f565b602082018103825203826109b2565b90565b6110f49061045a565b90565b611100906110eb565b90565b61110d60646110f7565b90565b61111990610476565b90565b611125816105ee565b0361112c57565b5f80fd5b9050519061113d8261111c565b565b9060208282031261115857611155915f01611130565b90565b61010c565b60200190565b5190565b90565b61117661117b916101dd565b611167565b9052565b60601b90565b61118e9061117f565b90565b61119a90611185565b90565b6111a96111ae91610383565b611191565b9052565b90565b6111c16111c6916105ee565b6111b2565b9052565b60c01b90565b6111d9906111ca565b90565b6111e86111ed916102e0565b6111d0565b9052565b6112419461123160206008966112296014839c9b986112218589611219829b6112399d61116a565b01809261119d565b0180926111b5565b0180926111b5565b0180926111dc565b01809261116a565b0190565b906112515f19916106a2565b9181191691161790565b611264906101dd565b90565b611270906108fb565b90565b9061128861128361128f9261125b565b611267565b8254611245565b9055565b90565b6112aa6112a56112af92611293565b610457565b6102e0565b90565b634e487b7160e01b5f52601160045260245ffd5b6112d26112d8916102e0565b916102e0565b019067ffffffffffffffff82116112eb57565b6112b2565b9061130367ffffffffffffffff916106a2565b9181191691161790565b61132161131c611326926102e0565b610457565b6102e0565b90565b90565b9061134161133c6113489261130d565b611329565b82546112f0565b9055565b90825f9392825e0152565b61137661137f6020936113849361136d81611163565b93848093610da0565b9586910161134c565b610994565b0190565b61139d9160208201915f818403910152611357565b90565b6114716113ab61154f565b61144c436113bf6113ba611103565b611110565b3b6113d26113cc5f6107be565b916105ee565b116114b5575b6114316113e65f8501610917565b6114228793426113f860018901610aa9565b908b61140c61140682611163565b9161115d565b2092611416610102565b978896602088016111f1565b602082018103825203826109b2565b61144361143d82611163565b9161115d565b205f8301611273565b61146b600161145a81611296565b92019161146683610aa9565b6112c6565b9061132c565b6114b061149e7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610f01565b926114a7610102565b91829182611388565b0390a2565b6114e060206114ca6114c5611103565b611110565b63a3b1b31d906114d8610102565b938492610d59565b825281806114f060048201610195565b03915afa80915f9261151f575b50155f1461151857506001611513575b5b6113d8565b61150d565b905061150e565b61154191925060203d8111611548575b61153981836109b2565b81019061113f565b905f6114fd565b503d61152f565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b61157b610ed9565b61159461158e61158961164a565b610383565b91610383565b0361159b57565b6115c46115a661164a565b6115ae610102565b91829163118cdaa760e01b835260048301610655565b0390fd5b90565b906115e06115db6115e792610f01565b6115c8565b8254610c14565b9055565b6115f45f610ecc565b6115fe825f6115cb565b9061163261162c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f01565b91610f01565b9161163b610102565b8061164581610195565b0390a3565b611652610ea9565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x16Wa\x04\xCA\x829`\x80Q\x81a\x05\xCC\x01Ra\x16W\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x1C\xE0\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x18` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x02\xD7V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\xA0\x1B\x90V[\x90a\x01\xF6`\xFF`\xA0\x1B\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0E\x90a\x02\0V[\x90V[\x90V[\x90a\x02)a\x02$a\x020\x92a\x02\x05V[a\x02\x11V[\x82Ta\x01\xE7V[\x90UV[_\x01\x90V[a\x02Aa\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ha\x02ca\x02m\x92a\x02IV[a\x01\rV[a\x02IV[\x90V[a\x02y\x90a\x02TV[\x90V[a\x02\x85\x90a\x02pV[\x90V[_\x1B\x90V[\x90a\x02\x9E`\x01\x80`\xA0\x1B\x03\x91a\x02\x88V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xB1\x90a\x02pV[\x90V[\x90V[\x90a\x02\xCCa\x02\xC7a\x02\xD3\x92a\x02\xA8V[a\x02\xB4V[\x82Ta\x02\x8DV[\x90UV[a\x02\xE03a\x03DV[a\x02\xEB_`\x01a\x02\x14V[a\x02\xF3a\0=V[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03?Wa\x03\x1B\x82\x91a\x01\xBFa\x1B!\x849a\x024V[\x03\x90_\xF0\x80\x15a\x03:Wa\x031a\x038\x91a\x02|V[`\x01a\x02\xB7V[V[a\x029V[a\0QV[a\x03M\x90a\x03\xA5V[V[a\x03ca\x03^a\x03h\x92a\x01\nV[a\x01\rV[a\x02IV[\x90V[a\x03t\x90a\x03OV[\x90V[a\x03\x80\x90a\x02IV[\x90V[a\x03\x8C\x90a\x03wV[\x90RV[\x91\x90a\x03\xA3\x90_` \x85\x01\x94\x01\x90a\x03\x83V[V[\x80a\x03\xC0a\x03\xBAa\x03\xB5_a\x03kV[a\x03wV[\x91a\x03wV[\x14a\x03\xD0Wa\x03\xCE\x90a\x04jV[V[a\x03\xFAa\x03\xDC_a\x03kV[a\x03\xE4a\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x90V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x1Aa\x04\x1F\x91a\x03\xFEV[a\x04\x03V[\x90V[a\x04,\x90Ta\x04\x0EV[\x90V[a\x048\x90a\x02TV[\x90V[a\x04D\x90a\x04/V[\x90V[\x90V[\x90a\x04_a\x04Za\x04f\x92a\x04;V[a\x04GV[\x82Ta\x02\x8DV[\x90UV[a\x04s_a\x04\"V[a\x04}\x82_a\x04JV[\x90a\x04\xB1a\x04\xAB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04;V[\x91a\x04;V[\x91a\x04\xBAa\0=V[\x80a\x04\xC4\x81a\x024V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\xB3V[a\0\x1D_5a\0\xFCV[\x80c\x0B\x83$\x9D\x14a\0\xF7W\x80c2pHd\x14a\0\xF2W\x80c5\x14\xD3{\x14a\0\xEDW\x80c<T\x06\x87\x14a\0\xE8W\x80cF\xE2\xCC\t\x14a\0\xE3W\x80cH\\\xC9U\x14a\0\xDEW\x80c[<\xD6\xE2\x14a\0\xD9W\x80cqP\x18\xA6\x14a\0\xD4W\x80cz9y\xDC\x14a\0\xCFW\x80c\x83G\t#\x14a\0\xCAW\x80c\x8D\xA5\xCB[\x14a\0\xC5W\x80c\x9D\x91Y{\x14a\0\xC0W\x80c\xD4\xF0\xEBM\x14a\0\xBBWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07\x80V[a\x07MV[a\x06\xFAV[a\x06jV[a\x06\x13V[a\x05\x91V[a\x04\xE5V[a\x04\xB0V[a\x03\xDFV[a\x03DV[a\x03\x0FV[a\x02\xACV[a\x02\x02V[a\x01\x9AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01ZW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01UW` \x01\x92` \x83\x02\x84\x01\x11a\x01PWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x01\x90W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x8BWa\x01\x87\x92\x01a\x01 V[\x90\x91V[a\x01\x10V[a\x01\x0CV[_\x01\x90V[4a\x01\xC9Wa\x01\xB3a\x01\xAD6`\x04a\x01_V[\x90a\x08pV[a\x01\xBBa\x01\x02V[\x80a\x01\xC5\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x01\xD8WV[a\x01\x0CV[\x90V[a\x01\xE9\x90a\x01\xDDV[\x90RV[\x91\x90a\x02\0\x90_` \x85\x01\x94\x01\x90a\x01\xE0V[V[4a\x022Wa\x02\x126`\x04a\x01\xCEV[a\x02.a\x02\x1Da\t$V[a\x02%a\x01\x02V[\x91\x82\x91\x82a\x01\xEDV[\x03\x90\xF3[a\x01\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02qW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02lW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02gWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x02\xA7W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xA2Wa\x02\x9E\x92\x01a\x027V[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x02\xDBWa\x02\xC5a\x02\xBF6`\x04a\x02vV[\x90a\nxV[a\x02\xCDa\x01\x02V[\x80a\x02\xD7\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x02\xF6\x90a\x02\xE0V[\x90RV[\x91\x90a\x03\r\x90_` \x85\x01\x94\x01\x90a\x02\xEDV[V[4a\x03?Wa\x03\x1F6`\x04a\x01\xCEV[a\x03;a\x03*a\n\xB6V[a\x032a\x01\x02V[\x91\x82\x91\x82a\x02\xFAV[\x03\x90\xF3[a\x01\x08V[4a\x03sWa\x03]a\x03W6`\x04a\x02vV[\x90a\x0B9V[a\x03ea\x01\x02V[\x80a\x03o\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x8C\x90a\x03xV[\x90V[a\x03\x98\x81a\x03\x83V[\x03a\x03\x9FWV[_\x80\xFD[\x90P5\x90a\x03\xB0\x82a\x03\x8FV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xDAW\x80a\x03\xCEa\x03\xD7\x92_\x86\x01a\x03\xA3V[\x93` \x01a\x03\xA3V[\x90V[a\x01\x0CV[4a\x04\x0EWa\x03\xF8a\x03\xF26`\x04a\x03\xB2V[\x90a\x0C\xF9V[a\x04\0a\x01\x02V[\x80a\x04\n\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x042\x90`\x08a\x047\x93\x02a\x04\x13V[a\x04\x17V[\x90V[\x90a\x04E\x91Ta\x04\"V[\x90V[a\x04T`\x01_\x90a\x04:V[\x90V[\x90V[a\x04na\x04ia\x04s\x92a\x03xV[a\x04WV[a\x03xV[\x90V[a\x04\x7F\x90a\x04ZV[\x90V[a\x04\x8B\x90a\x04vV[\x90V[a\x04\x97\x90a\x04\x82V[\x90RV[\x91\x90a\x04\xAE\x90_` \x85\x01\x94\x01\x90a\x04\x8EV[V[4a\x04\xE0Wa\x04\xC06`\x04a\x01\xCEV[a\x04\xDCa\x04\xCBa\x04HV[a\x04\xD3a\x01\x02V[\x91\x82\x91\x82a\x04\x9BV[\x03\x90\xF3[a\x01\x08V[4a\x05\x13Wa\x04\xF56`\x04a\x01\xCEV[a\x04\xFDa\r*V[a\x05\x05a\x01\x02V[\x80a\x05\x0F\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x91``\x83\x83\x03\x12a\x05eWa\x05/\x82_\x85\x01a\x03\xA3V[\x92a\x05=\x83` \x83\x01a\x03\xA3V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05`Wa\x05\\\x92\x01a\x027V[\x90\x91V[a\x01\x10V[a\x01\x0CV[\x15\x15\x90V[a\x05x\x90a\x05jV[\x90RV[\x91\x90a\x05\x8F\x90_` \x85\x01\x94\x01\x90a\x05oV[V[4a\x05\xC5Wa\x05\xC1a\x05\xB0a\x05\xA76`\x04a\x05\x18V[\x92\x91\x90\x91a\x0E\x12V[a\x05\xB8a\x01\x02V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05\xFA\x90a\x05\xEEV[\x90RV[\x91\x90a\x06\x11\x90_` \x85\x01\x94\x01\x90a\x05\xF1V[V[4a\x06CWa\x06#6`\x04a\x01\xCEV[a\x06?a\x06.a\x05\xCAV[a\x066a\x01\x02V[\x91\x82\x91\x82a\x05\xFEV[\x03\x90\xF3[a\x01\x08V[a\x06Q\x90a\x03\x83V[\x90RV[\x91\x90a\x06h\x90_` \x85\x01\x94\x01\x90a\x06HV[V[4a\x06\x9AWa\x06z6`\x04a\x01\xCEV[a\x06\x96a\x06\x85a\x0E\xD9V[a\x06\x8Da\x01\x02V[\x91\x82\x91\x82a\x06UV[\x03\x90\xF3[a\x01\x08V[\x90V[_\x1B\x90V[a\x06\xBBa\x06\xB6a\x06\xC0\x92a\x06\x9FV[a\x06\xA2V[a\x01\xDDV[\x90V[a\x06\xEC\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\x06\xA7V[\x90V[a\x06\xF7a\x06\xC3V[\x90V[4a\x07*Wa\x07\n6`\x04a\x01\xCEV[a\x07&a\x07\x15a\x06\xEFV[a\x07\x1Da\x01\x02V[\x91\x82\x91\x82a\x01\xEDV[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x07HWa\x07E\x91_\x01a\x03\xA3V[\x90V[a\x01\x0CV[4a\x07{Wa\x07ea\x07`6`\x04a\x07/V[a\x0F\xA5V[a\x07ma\x01\x02V[\x80a\x07w\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[4a\x07\xAEWa\x07\x98a\x07\x936`\x04a\x07/V[a\x10\x1CV[a\x07\xA0a\x01\x02V[\x80a\x07\xAA\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[P\x90V[\x90V[a\x07\xD2a\x07\xCDa\x07\xD7\x92a\x07\xBBV[a\x04WV[a\x05\xEEV[\x90V[`\x01a\x07\xE6\x91\x01a\x05\xEEV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x08KW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x08FW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x08AWV[a\x08\x05V[a\x08\x01V[a\x07\xFDV[\x90\x82\x10\x15a\x08kW` a\x08g\x92\x02\x81\x01\x90a\x08\tV[\x90\x91V[a\x07\xE9V[\x90a\x08|\x82\x82\x90a\x07\xB7V[\x91a\x08\x86_a\x07\xBEV[[\x80a\x08\x9Aa\x08\x94\x86a\x05\xEEV[\x91a\x05\xEEV[\x10\x15a\x08\xF1Wa\x08\xC8\x90a\x08\xBE32\x90a\x08\xB6\x86\x88\x86\x91a\x08PV[\x92\x90\x91a\x0E\x12V[a\x08\xCDW[a\x07\xDAV[a\x08\x87V[a\x08\xEC3a\x08\xE6a\x08\xE0\x86\x88\x86\x91a\x08PV[\x90a\x10\xAAV[\x90a\x13\xA0V[a\x08\xC3V[PPPPV[_\x90V[_\x1C\x90V[\x90V[a\t\x0Fa\t\x14\x91a\x08\xFBV[a\t\0V[\x90V[a\t!\x90Ta\t\x03V[\x90V[a\t,a\x08\xF7V[Pa\t?_a\t9a\x15OV[\x01a\t\x17V[\x90V[\x90a\t^a\tX32\x90\x85\x85\x91\x92\x90\x91\x92a\x0E\x12V[\x15a\x05jV[a\tmWa\tk\x91a\nbV[V[a\tua\x01\x02V[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\t\x8C`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\t\xBC\x90a\t\x94V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xD6W`@RV[a\t\x9EV[\x90a\t\xEEa\t\xE7a\x01\x02V[\x92\x83a\t\xB2V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x0EWa\n\n` \x91a\t\x94V[\x01\x90V[a\t\x9EV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\n3a\n.\x82a\t\xF0V[a\t\xDBV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\nOWa\nM\x92a\n\x13V[V[a\t\x90V[a\n_\x916\x91a\n\x1EV[\x90V[a\npa\nv\x923\x92a\nTV[\x90a\x13\xA0V[V[\x90a\n\x82\x91a\tBV[V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\n\xA1a\n\xA6\x91a\x08\xFBV[a\n\x88V[\x90V[a\n\xB3\x90Ta\n\x95V[\x90V[a\n\xBEa\n\x84V[Pa\n\xD2`\x01a\n\xCCa\x15OV[\x01a\n\xA9V[\x90V[\x90a\n\xF1a\n\xEB32\x90\x85\x85\x91\x92\x90\x91\x92a\x0E\x12V[\x15a\x05jV[a\x0B\0Wa\n\xFE\x91a\x0B#V[V[a\x0B\x08a\x01\x02V[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0B\x1F`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0B1a\x0B7\x923\x92a\x10\xAAV[\x90a\x13\xA0V[V[\x90a\x0BC\x91a\n\xD5V[V[\x90a\x0BW\x91a\x0BRa\x15sV[a\x0C^V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0Bqa\x0Bv\x91a\x0BYV[a\x0B_V[\x90V[a\x0B\x83\x90Ta\x0BeV[\x90V[a\x0B\x9Aa\x0B\x95a\x0B\x9F\x92a\x07\xBBV[a\x04WV[a\x03xV[\x90V[a\x0B\xAB\x90a\x0B\x86V[\x90V[`\xA0\x1B\x90V[\x90a\x0B\xC3`\xFF`\xA0\x1B\x91a\x0B\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xD6\x90a\x05jV[\x90V[\x90V[\x90a\x0B\xF1a\x0B\xECa\x0B\xF8\x92a\x0B\xCDV[a\x0B\xD9V[\x82Ta\x0B\xB4V[\x90UV[a\x0C\x05\x90a\x04ZV[\x90V[a\x0C\x11\x90a\x0B\xFCV[\x90V[\x90a\x0C%`\x01\x80`\xA0\x1B\x03\x91a\x06\xA2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C8\x90a\x0B\xFCV[\x90V[\x90V[\x90a\x0CSa\x0CNa\x0CZ\x92a\x0C/V[a\x0C;V[\x82Ta\x0C\x14V[\x90UV[a\x0Ch`\x01a\x0ByV[a\x0C\xD7W\x81a\x0C\x87a\x0C\x81a\x0C|_a\x0B\xA2V[a\x03\x83V[\x91a\x03\x83V[\x14a\x0C\xB4Wa\x0C\xADa\x0C\xA6a\x0C\xB2\x93a\x0C\xA1`\x01\x80a\x0B\xDCV[a\x0C\x08V[`\x01a\x0C>V[a\x10\x1CV[V[a\x0C\xBCa\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C\xD3`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0C\xDFa\x01\x02V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C\xF5`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[\x90a\r\x03\x91a\x0BEV[V[a\r\ra\x15sV[a\r\x15a\r\x17V[V[a\r(a\r#_a\x0B\xA2V[a\x15\xEBV[V[a\r2a\r\x05V[V[_\x90V[a\rDa\rI\x91a\x08\xFBV[a\x04\x17V[\x90V[a\rV\x90Ta\r8V[\x90V[`\xE0\x1B\x90V[a\rh\x81a\x05jV[\x03a\roWV[_\x80\xFD[\x90PQ\x90a\r\x80\x82a\r_V[V[\x90` \x82\x82\x03\x12a\r\x9BWa\r\x98\x91_\x01a\rsV[\x90V[a\x01\x0CV[` \x91\x81R\x01\x90V[\x91\x90a\r\xC3\x81a\r\xBC\x81a\r\xC8\x95a\r\xA0V[\x80\x95a\n\x13V[a\t\x94V[\x01\x90V[a\r\xF2a\r\xFF\x95\x93\x94\x92\x94a\r\xE8``\x84\x01\x96_\x85\x01\x90a\x06HV[` \x83\x01\x90a\x06HV[`@\x81\x85\x03\x91\x01Ra\r\xA9V[\x90V[a\x0E\na\x01\x02V[=_\x82>=\x90\xFD[\x92a\x0EU` \x93\x94a\x0E\"a\r4V[Pa\x0E`a\x0E8a\x0E3`\x01a\rLV[a\x04\x82V[\x93cz9y\xDC\x92\x95\x97a\x0EIa\x01\x02V[\x98\x89\x97\x88\x96\x87\x96a\rYV[\x86R`\x04\x86\x01a\r\xCCV[\x03\x91Z\xFA\x90\x81\x15a\x0E\xA4W_\x91a\x0EvW[P\x90V[a\x0E\x97\x91P` =\x81\x11a\x0E\x9DW[a\x0E\x8F\x81\x83a\t\xB2V[\x81\x01\x90a\r\x82V[_a\x0ErV[P=a\x0E\x85V[a\x0E\x02V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\xC4a\x0E\xC9\x91a\x08\xFBV[a\x0E\xADV[\x90V[a\x0E\xD6\x90Ta\x0E\xB8V[\x90V[a\x0E\xE1a\x0E\xA9V[Pa\x0E\xEB_a\x0E\xCCV[\x90V[a\x0E\xFF\x90a\x0E\xFAa\x15sV[a\x0F\rV[V[a\x0F\n\x90a\x04vV[\x90V[\x80a\x0F(a\x0F\"a\x0F\x1D_a\x0B\xA2V[a\x03\x83V[\x91a\x03\x83V[\x14a\x0F\x82Wa\x0F@a\x0F9\x82a\x0C\x08V[`\x01a\x0C>V[a\x0Fj\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F\x01V[\x90a\x0Fsa\x01\x02V[\x80a\x0F}\x81a\x01\x95V[\x03\x90\xA2V[a\x0F\x8Aa\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0F\xA1`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0F\xAE\x90a\x0E\xEEV[V[a\x0F\xC1\x90a\x0F\xBCa\x15sV[a\x0F\xC3V[V[\x80a\x0F\xDEa\x0F\xD8a\x0F\xD3_a\x0B\xA2V[a\x03\x83V[\x91a\x03\x83V[\x14a\x0F\xEEWa\x0F\xEC\x90a\x15\xEBV[V[a\x10\x18a\x0F\xFA_a\x0B\xA2V[a\x10\x02a\x01\x02V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06UV[\x03\x90\xFD[a\x10%\x90a\x0F\xB0V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10Oa\x10Ja\x10T\x92a\x07\xBBV[a\x105V[a\x10,V[\x90V[\x90V[a\x10fa\x10k\x91a\x10,V[a\x10WV[\x90RV[\x90P\x90V[\x90\x91\x82a\x10\x84\x81a\x10\x8B\x93a\x10oV[\x80\x93a\n\x13V[\x01\x90V[\x80a\x10\xA0`\x01\x92a\x10\xA7\x96\x94a\x10ZV[\x01\x91a\x10tV[\x90V[a\x10\xE8\x90a\x10\xB6a\x10'V[Pa\x10\xD9a\x10\xC3_a\x10;V[\x91\x93a\x10\xCDa\x01\x02V[\x94\x85\x93` \x85\x01a\x10\x8FV[` \x82\x01\x81\x03\x82R\x03\x82a\t\xB2V[\x90V[a\x10\xF4\x90a\x04ZV[\x90V[a\x11\0\x90a\x10\xEBV[\x90V[a\x11\r`da\x10\xF7V[\x90V[a\x11\x19\x90a\x04vV[\x90V[a\x11%\x81a\x05\xEEV[\x03a\x11,WV[_\x80\xFD[\x90PQ\x90a\x11=\x82a\x11\x1CV[V[\x90` \x82\x82\x03\x12a\x11XWa\x11U\x91_\x01a\x110V[\x90V[a\x01\x0CV[` \x01\x90V[Q\x90V[\x90V[a\x11va\x11{\x91a\x01\xDDV[a\x11gV[\x90RV[``\x1B\x90V[a\x11\x8E\x90a\x11\x7FV[\x90V[a\x11\x9A\x90a\x11\x85V[\x90V[a\x11\xA9a\x11\xAE\x91a\x03\x83V[a\x11\x91V[\x90RV[\x90V[a\x11\xC1a\x11\xC6\x91a\x05\xEEV[a\x11\xB2V[\x90RV[`\xC0\x1B\x90V[a\x11\xD9\x90a\x11\xCAV[\x90V[a\x11\xE8a\x11\xED\x91a\x02\xE0V[a\x11\xD0V[\x90RV[a\x12A\x94a\x121` `\x08\x96a\x12)`\x14\x83\x9C\x9B\x98a\x12!\x85\x89a\x12\x19\x82\x9Ba\x129\x9Da\x11jV[\x01\x80\x92a\x11\x9DV[\x01\x80\x92a\x11\xB5V[\x01\x80\x92a\x11\xB5V[\x01\x80\x92a\x11\xDCV[\x01\x80\x92a\x11jV[\x01\x90V[\x90a\x12Q_\x19\x91a\x06\xA2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12d\x90a\x01\xDDV[\x90V[a\x12p\x90a\x08\xFBV[\x90V[\x90a\x12\x88a\x12\x83a\x12\x8F\x92a\x12[V[a\x12gV[\x82Ta\x12EV[\x90UV[\x90V[a\x12\xAAa\x12\xA5a\x12\xAF\x92a\x12\x93V[a\x04WV[a\x02\xE0V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12\xD2a\x12\xD8\x91a\x02\xE0V[\x91a\x02\xE0V[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12\xEBWV[a\x12\xB2V[\x90a\x13\x03g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x06\xA2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13!a\x13\x1Ca\x13&\x92a\x02\xE0V[a\x04WV[a\x02\xE0V[\x90V[\x90V[\x90a\x13Aa\x13<a\x13H\x92a\x13\rV[a\x13)V[\x82Ta\x12\xF0V[\x90UV[\x90\x82_\x93\x92\x82^\x01RV[a\x13va\x13\x7F` \x93a\x13\x84\x93a\x13m\x81a\x11cV[\x93\x84\x80\x93a\r\xA0V[\x95\x86\x91\x01a\x13LV[a\t\x94V[\x01\x90V[a\x13\x9D\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x13WV[\x90V[a\x14qa\x13\xABa\x15OV[a\x14LCa\x13\xBFa\x13\xBAa\x11\x03V[a\x11\x10V[;a\x13\xD2a\x13\xCC_a\x07\xBEV[\x91a\x05\xEEV[\x11a\x14\xB5W[a\x141a\x13\xE6_\x85\x01a\t\x17V[a\x14\"\x87\x93Ba\x13\xF8`\x01\x89\x01a\n\xA9V[\x90\x8Ba\x14\x0Ca\x14\x06\x82a\x11cV[\x91a\x11]V[ \x92a\x14\x16a\x01\x02V[\x97\x88\x96` \x88\x01a\x11\xF1V[` \x82\x01\x81\x03\x82R\x03\x82a\t\xB2V[a\x14Ca\x14=\x82a\x11cV[\x91a\x11]V[ _\x83\x01a\x12sV[a\x14k`\x01a\x14Z\x81a\x12\x96V[\x92\x01\x91a\x14f\x83a\n\xA9V[a\x12\xC6V[\x90a\x13,V[a\x14\xB0a\x14\x9E\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F\x01V[\x92a\x14\xA7a\x01\x02V[\x91\x82\x91\x82a\x13\x88V[\x03\x90\xA2V[a\x14\xE0` a\x14\xCAa\x14\xC5a\x11\x03V[a\x11\x10V[c\xA3\xB1\xB3\x1D\x90a\x14\xD8a\x01\x02V[\x93\x84\x92a\rYV[\x82R\x81\x80a\x14\xF0`\x04\x82\x01a\x01\x95V[\x03\x91Z\xFA\x80\x91_\x92a\x15\x1FW[P\x15_\x14a\x15\x18WP`\x01a\x15\x13W[[a\x13\xD8V[a\x15\rV[\x90Pa\x15\x0EV[a\x15A\x91\x92P` =\x81\x11a\x15HW[a\x159\x81\x83a\t\xB2V[\x81\x01\x90a\x11?V[\x90_a\x14\xFDV[P=a\x15/V[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x15{a\x0E\xD9V[a\x15\x94a\x15\x8Ea\x15\x89a\x16JV[a\x03\x83V[\x91a\x03\x83V[\x03a\x15\x9BWV[a\x15\xC4a\x15\xA6a\x16JV[a\x15\xAEa\x01\x02V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06UV[\x03\x90\xFD[\x90V[\x90a\x15\xE0a\x15\xDBa\x15\xE7\x92a\x0F\x01V[a\x15\xC8V[\x82Ta\x0C\x14V[\x90UV[a\x15\xF4_a\x0E\xCCV[a\x15\xFE\x82_a\x15\xCBV[\x90a\x162a\x16,\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\x01V[\x91a\x0F\x01V[\x91a\x16;a\x01\x02V[\x80a\x16E\x81a\x01\x95V[\x03\x90\xA3V[a\x16Ra\x0E\xA9V[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6107b3565b61001d5f356100fc565b80630b83249d146100f757806332704864146100f25780633514d37b146100ed5780633c540687146100e857806346e2cc09146100e3578063485cc955146100de5780635b3cd6e2146100d9578063715018a6146100d45780637a3979dc146100cf57806383470923146100ca5780638da5cb5b146100c55780639d91597b146100c0578063d4f0eb4d146100bb5763f2fde38b0361000e57610780565b61074d565b6106fa565b61066a565b610613565b610591565b6104e5565b6104b0565b6103df565b610344565b61030f565b6102ac565b610202565b61019a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561015a5781359167ffffffffffffffff831161015557602001926020830284011161015057565b61011c565b610118565b610114565b90602082820312610190575f82013567ffffffffffffffff811161018b576101879201610120565b9091565b610110565b61010c565b5f0190565b346101c9576101b36101ad36600461015f565b90610870565b6101bb610102565b806101c581610195565b0390f35b610108565b5f9103126101d857565b61010c565b90565b6101e9906101dd565b9052565b9190610200905f602085019401906101e0565b565b34610232576102123660046101ce565b61022e61021d610924565b610225610102565b918291826101ed565b0390f35b610108565b909182601f830112156102715781359167ffffffffffffffff831161026c57602001926001830284011161026757565b61011c565b610118565b610114565b906020828203126102a7575f82013567ffffffffffffffff81116102a25761029e9201610237565b9091565b610110565b61010c565b346102db576102c56102bf366004610276565b90610a78565b6102cd610102565b806102d781610195565b0390f35b610108565b67ffffffffffffffff1690565b6102f6906102e0565b9052565b919061030d905f602085019401906102ed565b565b3461033f5761031f3660046101ce565b61033b61032a610ab6565b610332610102565b918291826102fa565b0390f35b610108565b346103735761035d610357366004610276565b90610b39565b610365610102565b8061036f81610195565b0390f35b610108565b60018060a01b031690565b61038c90610378565b90565b61039881610383565b0361039f57565b5f80fd5b905035906103b08261038f565b565b91906040838203126103da57806103ce6103d7925f86016103a3565b936020016103a3565b90565b61010c565b3461040e576103f86103f23660046103b2565b90610cf9565b610400610102565b8061040a81610195565b0390f35b610108565b1c90565b60018060a01b031690565b6104329060086104379302610413565b610417565b90565b906104459154610422565b90565b61045460015f9061043a565b90565b90565b61046e61046961047392610378565b610457565b610378565b90565b61047f9061045a565b90565b61048b90610476565b90565b61049790610482565b9052565b91906104ae905f6020850194019061048e565b565b346104e0576104c03660046101ce565b6104dc6104cb610448565b6104d3610102565b9182918261049b565b0390f35b610108565b34610513576104f53660046101ce565b6104fd610d2a565b610505610102565b8061050f81610195565b0390f35b610108565b916060838303126105655761052f825f85016103a3565b9261053d83602083016103a3565b92604082013567ffffffffffffffff81116105605761055c9201610237565b9091565b610110565b61010c565b151590565b6105789061056a565b9052565b919061058f905f6020850194019061056f565b565b346105c5576105c16105b06105a7366004610518565b92919091610e12565b6105b8610102565b9182918261057c565b0390f35b610108565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b6105fa906105ee565b9052565b9190610611905f602085019401906105f1565b565b34610643576106233660046101ce565b61063f61062e6105ca565b610636610102565b918291826105fe565b0390f35b610108565b61065190610383565b9052565b9190610668905f60208501940190610648565b565b3461069a5761067a3660046101ce565b610696610685610ed9565b61068d610102565b91829182610655565b0390f35b610108565b90565b5f1b90565b6106bb6106b66106c09261069f565b6106a2565b6101dd565b90565b6106ec7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a9696106a7565b90565b6106f76106c3565b90565b3461072a5761070a3660046101ce565b6107266107156106ef565b61071d610102565b918291826101ed565b0390f35b610108565b9060208282031261074857610745915f016103a3565b90565b61010c565b3461077b5761076561076036600461072f565b610fa5565b61076d610102565b8061077781610195565b0390f35b610108565b346107ae5761079861079336600461072f565b61101c565b6107a0610102565b806107aa81610195565b0390f35b610108565b5f80fd5b5090565b90565b6107d26107cd6107d7926107bb565b610457565b6105ee565b90565b60016107e691016105ee565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561084b570180359067ffffffffffffffff82116108465760200191600182023603831361084157565b610805565b610801565b6107fd565b9082101561086b5760206108679202810190610809565b9091565b6107e9565b9061087c8282906107b7565b916108865f6107be565b5b8061089a610894866105ee565b916105ee565b10156108f1576108c8906108be3332906108b686888691610850565b929091610e12565b6108cd575b6107da565b610887565b6108ec336108e66108e086888691610850565b906110aa565b906113a0565b6108c3565b50505050565b5f90565b5f1c90565b90565b61090f610914916108fb565b610900565b90565b6109219054610903565b90565b61092c6108f7565b5061093f5f61093961154f565b01610917565b90565b9061095e61095833329085859192909192610e12565b1561056a565b61096d5761096b91610a62565b565b610975610102565b6361aec64960e11b81528061098c60048201610195565b0390fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906109bc90610994565b810190811067ffffffffffffffff8211176109d657604052565b61099e565b906109ee6109e7610102565b92836109b2565b565b67ffffffffffffffff8111610a0e57610a0a602091610994565b0190565b61099e565b90825f939282370152565b90929192610a33610a2e826109f0565b6109db565b93818552602085019082840111610a4f57610a4d92610a13565b565b610990565b610a5f913691610a1e565b90565b610a70610a76923392610a54565b906113a0565b565b90610a8291610942565b565b5f90565b67ffffffffffffffff1690565b610aa1610aa6916108fb565b610a88565b90565b610ab39054610a95565b90565b610abe610a84565b50610ad26001610acc61154f565b01610aa9565b90565b90610af1610aeb33329085859192909192610e12565b1561056a565b610b0057610afe91610b23565b565b610b08610102565b6361aec64960e11b815280610b1f60048201610195565b0390fd5b610b31610b379233926110aa565b906113a0565b565b90610b4391610ad5565b565b90610b5791610b52611573565b610c5e565b565b60a01c90565b60ff1690565b610b71610b7691610b59565b610b5f565b90565b610b839054610b65565b90565b610b9a610b95610b9f926107bb565b610457565b610378565b90565b610bab90610b86565b90565b60a01b90565b90610bc360ff60a01b91610bae565b9181191691161790565b610bd69061056a565b90565b90565b90610bf1610bec610bf892610bcd565b610bd9565b8254610bb4565b9055565b610c059061045a565b90565b610c1190610bfc565b90565b90610c2560018060a01b03916106a2565b9181191691161790565b610c3890610bfc565b90565b90565b90610c53610c4e610c5a92610c2f565b610c3b565b8254610c14565b9055565b610c686001610b79565b610cd75781610c87610c81610c7c5f610ba2565b610383565b91610383565b14610cb457610cad610ca6610cb293610ca1600180610bdc565b610c08565b6001610c3e565b61101c565b565b610cbc610102565b632e7f3c7f60e11b815280610cd360048201610195565b0390fd5b610cdf610102565b62dc149f60e41b815280610cf560048201610195565b0390fd5b90610d0391610b45565b565b610d0d611573565b610d15610d17565b565b610d28610d235f610ba2565b6115eb565b565b610d32610d05565b565b5f90565b610d44610d49916108fb565b610417565b90565b610d569054610d38565b90565b60e01b90565b610d688161056a565b03610d6f57565b5f80fd5b90505190610d8082610d5f565b565b90602082820312610d9b57610d98915f01610d73565b90565b61010c565b60209181520190565b9190610dc381610dbc81610dc895610da0565b8095610a13565b610994565b0190565b610df2610dff9593949294610de860608401965f850190610648565b6020830190610648565b6040818503910152610da9565b90565b610e0a610102565b3d5f823e3d90fd5b92610e5560209394610e22610d34565b50610e60610e38610e336001610d4c565b610482565b93637a3979dc929597610e49610102565b98899788968796610d59565b865260048601610dcc565b03915afa908115610ea4575f91610e76575b5090565b610e97915060203d8111610e9d575b610e8f81836109b2565b810190610d82565b5f610e72565b503d610e85565b610e02565b5f90565b60018060a01b031690565b610ec4610ec9916108fb565b610ead565b90565b610ed69054610eb8565b90565b610ee1610ea9565b50610eeb5f610ecc565b90565b610eff90610efa611573565b610f0d565b565b610f0a90610476565b90565b80610f28610f22610f1d5f610ba2565b610383565b91610383565b14610f8257610f40610f3982610c08565b6001610c3e565b610f6a7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610f01565b90610f73610102565b80610f7d81610195565b0390a2565b610f8a610102565b632e7f3c7f60e11b815280610fa160048201610195565b0390fd5b610fae90610eee565b565b610fc190610fbc611573565b610fc3565b565b80610fde610fd8610fd35f610ba2565b610383565b91610383565b14610fee57610fec906115eb565b565b611018610ffa5f610ba2565b611002610102565b918291631e4fbdf760e01b835260048301610655565b0390fd5b61102590610fb0565b565b606090565b60ff60f81b1690565b60f81b90565b61104f61104a611054926107bb565b611035565b61102c565b90565b90565b61106661106b9161102c565b611057565b9052565b905090565b9091826110848161108b9361106f565b8093610a13565b0190565b806110a06001926110a7969461105a565b0191611074565b90565b6110e8906110b6611027565b506110d96110c35f61103b565b91936110cd610102565b9485936020850161108f565b602082018103825203826109b2565b90565b6110f49061045a565b90565b611100906110eb565b90565b61110d60646110f7565b90565b61111990610476565b90565b611125816105ee565b0361112c57565b5f80fd5b9050519061113d8261111c565b565b9060208282031261115857611155915f01611130565b90565b61010c565b60200190565b5190565b90565b61117661117b916101dd565b611167565b9052565b60601b90565b61118e9061117f565b90565b61119a90611185565b90565b6111a96111ae91610383565b611191565b9052565b90565b6111c16111c6916105ee565b6111b2565b9052565b60c01b90565b6111d9906111ca565b90565b6111e86111ed916102e0565b6111d0565b9052565b6112419461123160206008966112296014839c9b986112218589611219829b6112399d61116a565b01809261119d565b0180926111b5565b0180926111b5565b0180926111dc565b01809261116a565b0190565b906112515f19916106a2565b9181191691161790565b611264906101dd565b90565b611270906108fb565b90565b9061128861128361128f9261125b565b611267565b8254611245565b9055565b90565b6112aa6112a56112af92611293565b610457565b6102e0565b90565b634e487b7160e01b5f52601160045260245ffd5b6112d26112d8916102e0565b916102e0565b019067ffffffffffffffff82116112eb57565b6112b2565b9061130367ffffffffffffffff916106a2565b9181191691161790565b61132161131c611326926102e0565b610457565b6102e0565b90565b90565b9061134161133c6113489261130d565b611329565b82546112f0565b9055565b90825f9392825e0152565b61137661137f6020936113849361136d81611163565b93848093610da0565b9586910161134c565b610994565b0190565b61139d9160208201915f818403910152611357565b90565b6114716113ab61154f565b61144c436113bf6113ba611103565b611110565b3b6113d26113cc5f6107be565b916105ee565b116114b5575b6114316113e65f8501610917565b6114228793426113f860018901610aa9565b908b61140c61140682611163565b9161115d565b2092611416610102565b978896602088016111f1565b602082018103825203826109b2565b61144361143d82611163565b9161115d565b205f8301611273565b61146b600161145a81611296565b92019161146683610aa9565b6112c6565b9061132c565b6114b061149e7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610f01565b926114a7610102565b91829182611388565b0390a2565b6114e060206114ca6114c5611103565b611110565b63a3b1b31d906114d8610102565b938492610d59565b825281806114f060048201610195565b03915afa80915f9261151f575b50155f1461151857506001611513575b5b6113d8565b61150d565b905061150e565b61154191925060203d8111611548575b61153981836109b2565b81019061113f565b905f6114fd565b503d61152f565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b61157b610ed9565b61159461158e61158961164a565b610383565b91610383565b0361159b57565b6115c46115a661164a565b6115ae610102565b91829163118cdaa760e01b835260048301610655565b0390fd5b90565b906115e06115db6115e792610f01565b6115c8565b8254610c14565b9055565b6115f45f610ecc565b6115fe825f6115cb565b9061163261162c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f01565b91610f01565b9161163b610102565b8061164581610195565b0390a3565b611652610ea9565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\xB3V[a\0\x1D_5a\0\xFCV[\x80c\x0B\x83$\x9D\x14a\0\xF7W\x80c2pHd\x14a\0\xF2W\x80c5\x14\xD3{\x14a\0\xEDW\x80c<T\x06\x87\x14a\0\xE8W\x80cF\xE2\xCC\t\x14a\0\xE3W\x80cH\\\xC9U\x14a\0\xDEW\x80c[<\xD6\xE2\x14a\0\xD9W\x80cqP\x18\xA6\x14a\0\xD4W\x80cz9y\xDC\x14a\0\xCFW\x80c\x83G\t#\x14a\0\xCAW\x80c\x8D\xA5\xCB[\x14a\0\xC5W\x80c\x9D\x91Y{\x14a\0\xC0W\x80c\xD4\xF0\xEBM\x14a\0\xBBWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07\x80V[a\x07MV[a\x06\xFAV[a\x06jV[a\x06\x13V[a\x05\x91V[a\x04\xE5V[a\x04\xB0V[a\x03\xDFV[a\x03DV[a\x03\x0FV[a\x02\xACV[a\x02\x02V[a\x01\x9AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01ZW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01UW` \x01\x92` \x83\x02\x84\x01\x11a\x01PWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x01\x90W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x8BWa\x01\x87\x92\x01a\x01 V[\x90\x91V[a\x01\x10V[a\x01\x0CV[_\x01\x90V[4a\x01\xC9Wa\x01\xB3a\x01\xAD6`\x04a\x01_V[\x90a\x08pV[a\x01\xBBa\x01\x02V[\x80a\x01\xC5\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x01\xD8WV[a\x01\x0CV[\x90V[a\x01\xE9\x90a\x01\xDDV[\x90RV[\x91\x90a\x02\0\x90_` \x85\x01\x94\x01\x90a\x01\xE0V[V[4a\x022Wa\x02\x126`\x04a\x01\xCEV[a\x02.a\x02\x1Da\t$V[a\x02%a\x01\x02V[\x91\x82\x91\x82a\x01\xEDV[\x03\x90\xF3[a\x01\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02qW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02lW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02gWV[a\x01\x1CV[a\x01\x18V[a\x01\x14V[\x90` \x82\x82\x03\x12a\x02\xA7W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xA2Wa\x02\x9E\x92\x01a\x027V[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x02\xDBWa\x02\xC5a\x02\xBF6`\x04a\x02vV[\x90a\nxV[a\x02\xCDa\x01\x02V[\x80a\x02\xD7\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x02\xF6\x90a\x02\xE0V[\x90RV[\x91\x90a\x03\r\x90_` \x85\x01\x94\x01\x90a\x02\xEDV[V[4a\x03?Wa\x03\x1F6`\x04a\x01\xCEV[a\x03;a\x03*a\n\xB6V[a\x032a\x01\x02V[\x91\x82\x91\x82a\x02\xFAV[\x03\x90\xF3[a\x01\x08V[4a\x03sWa\x03]a\x03W6`\x04a\x02vV[\x90a\x0B9V[a\x03ea\x01\x02V[\x80a\x03o\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x8C\x90a\x03xV[\x90V[a\x03\x98\x81a\x03\x83V[\x03a\x03\x9FWV[_\x80\xFD[\x90P5\x90a\x03\xB0\x82a\x03\x8FV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xDAW\x80a\x03\xCEa\x03\xD7\x92_\x86\x01a\x03\xA3V[\x93` \x01a\x03\xA3V[\x90V[a\x01\x0CV[4a\x04\x0EWa\x03\xF8a\x03\xF26`\x04a\x03\xB2V[\x90a\x0C\xF9V[a\x04\0a\x01\x02V[\x80a\x04\n\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x042\x90`\x08a\x047\x93\x02a\x04\x13V[a\x04\x17V[\x90V[\x90a\x04E\x91Ta\x04\"V[\x90V[a\x04T`\x01_\x90a\x04:V[\x90V[\x90V[a\x04na\x04ia\x04s\x92a\x03xV[a\x04WV[a\x03xV[\x90V[a\x04\x7F\x90a\x04ZV[\x90V[a\x04\x8B\x90a\x04vV[\x90V[a\x04\x97\x90a\x04\x82V[\x90RV[\x91\x90a\x04\xAE\x90_` \x85\x01\x94\x01\x90a\x04\x8EV[V[4a\x04\xE0Wa\x04\xC06`\x04a\x01\xCEV[a\x04\xDCa\x04\xCBa\x04HV[a\x04\xD3a\x01\x02V[\x91\x82\x91\x82a\x04\x9BV[\x03\x90\xF3[a\x01\x08V[4a\x05\x13Wa\x04\xF56`\x04a\x01\xCEV[a\x04\xFDa\r*V[a\x05\x05a\x01\x02V[\x80a\x05\x0F\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[\x91``\x83\x83\x03\x12a\x05eWa\x05/\x82_\x85\x01a\x03\xA3V[\x92a\x05=\x83` \x83\x01a\x03\xA3V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05`Wa\x05\\\x92\x01a\x027V[\x90\x91V[a\x01\x10V[a\x01\x0CV[\x15\x15\x90V[a\x05x\x90a\x05jV[\x90RV[\x91\x90a\x05\x8F\x90_` \x85\x01\x94\x01\x90a\x05oV[V[4a\x05\xC5Wa\x05\xC1a\x05\xB0a\x05\xA76`\x04a\x05\x18V[\x92\x91\x90\x91a\x0E\x12V[a\x05\xB8a\x01\x02V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05\xFA\x90a\x05\xEEV[\x90RV[\x91\x90a\x06\x11\x90_` \x85\x01\x94\x01\x90a\x05\xF1V[V[4a\x06CWa\x06#6`\x04a\x01\xCEV[a\x06?a\x06.a\x05\xCAV[a\x066a\x01\x02V[\x91\x82\x91\x82a\x05\xFEV[\x03\x90\xF3[a\x01\x08V[a\x06Q\x90a\x03\x83V[\x90RV[\x91\x90a\x06h\x90_` \x85\x01\x94\x01\x90a\x06HV[V[4a\x06\x9AWa\x06z6`\x04a\x01\xCEV[a\x06\x96a\x06\x85a\x0E\xD9V[a\x06\x8Da\x01\x02V[\x91\x82\x91\x82a\x06UV[\x03\x90\xF3[a\x01\x08V[\x90V[_\x1B\x90V[a\x06\xBBa\x06\xB6a\x06\xC0\x92a\x06\x9FV[a\x06\xA2V[a\x01\xDDV[\x90V[a\x06\xEC\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\x06\xA7V[\x90V[a\x06\xF7a\x06\xC3V[\x90V[4a\x07*Wa\x07\n6`\x04a\x01\xCEV[a\x07&a\x07\x15a\x06\xEFV[a\x07\x1Da\x01\x02V[\x91\x82\x91\x82a\x01\xEDV[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x07HWa\x07E\x91_\x01a\x03\xA3V[\x90V[a\x01\x0CV[4a\x07{Wa\x07ea\x07`6`\x04a\x07/V[a\x0F\xA5V[a\x07ma\x01\x02V[\x80a\x07w\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[4a\x07\xAEWa\x07\x98a\x07\x936`\x04a\x07/V[a\x10\x1CV[a\x07\xA0a\x01\x02V[\x80a\x07\xAA\x81a\x01\x95V[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[P\x90V[\x90V[a\x07\xD2a\x07\xCDa\x07\xD7\x92a\x07\xBBV[a\x04WV[a\x05\xEEV[\x90V[`\x01a\x07\xE6\x91\x01a\x05\xEEV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x08KW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x08FW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x08AWV[a\x08\x05V[a\x08\x01V[a\x07\xFDV[\x90\x82\x10\x15a\x08kW` a\x08g\x92\x02\x81\x01\x90a\x08\tV[\x90\x91V[a\x07\xE9V[\x90a\x08|\x82\x82\x90a\x07\xB7V[\x91a\x08\x86_a\x07\xBEV[[\x80a\x08\x9Aa\x08\x94\x86a\x05\xEEV[\x91a\x05\xEEV[\x10\x15a\x08\xF1Wa\x08\xC8\x90a\x08\xBE32\x90a\x08\xB6\x86\x88\x86\x91a\x08PV[\x92\x90\x91a\x0E\x12V[a\x08\xCDW[a\x07\xDAV[a\x08\x87V[a\x08\xEC3a\x08\xE6a\x08\xE0\x86\x88\x86\x91a\x08PV[\x90a\x10\xAAV[\x90a\x13\xA0V[a\x08\xC3V[PPPPV[_\x90V[_\x1C\x90V[\x90V[a\t\x0Fa\t\x14\x91a\x08\xFBV[a\t\0V[\x90V[a\t!\x90Ta\t\x03V[\x90V[a\t,a\x08\xF7V[Pa\t?_a\t9a\x15OV[\x01a\t\x17V[\x90V[\x90a\t^a\tX32\x90\x85\x85\x91\x92\x90\x91\x92a\x0E\x12V[\x15a\x05jV[a\tmWa\tk\x91a\nbV[V[a\tua\x01\x02V[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\t\x8C`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\t\xBC\x90a\t\x94V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xD6W`@RV[a\t\x9EV[\x90a\t\xEEa\t\xE7a\x01\x02V[\x92\x83a\t\xB2V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x0EWa\n\n` \x91a\t\x94V[\x01\x90V[a\t\x9EV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\n3a\n.\x82a\t\xF0V[a\t\xDBV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\nOWa\nM\x92a\n\x13V[V[a\t\x90V[a\n_\x916\x91a\n\x1EV[\x90V[a\npa\nv\x923\x92a\nTV[\x90a\x13\xA0V[V[\x90a\n\x82\x91a\tBV[V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\n\xA1a\n\xA6\x91a\x08\xFBV[a\n\x88V[\x90V[a\n\xB3\x90Ta\n\x95V[\x90V[a\n\xBEa\n\x84V[Pa\n\xD2`\x01a\n\xCCa\x15OV[\x01a\n\xA9V[\x90V[\x90a\n\xF1a\n\xEB32\x90\x85\x85\x91\x92\x90\x91\x92a\x0E\x12V[\x15a\x05jV[a\x0B\0Wa\n\xFE\x91a\x0B#V[V[a\x0B\x08a\x01\x02V[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0B\x1F`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0B1a\x0B7\x923\x92a\x10\xAAV[\x90a\x13\xA0V[V[\x90a\x0BC\x91a\n\xD5V[V[\x90a\x0BW\x91a\x0BRa\x15sV[a\x0C^V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0Bqa\x0Bv\x91a\x0BYV[a\x0B_V[\x90V[a\x0B\x83\x90Ta\x0BeV[\x90V[a\x0B\x9Aa\x0B\x95a\x0B\x9F\x92a\x07\xBBV[a\x04WV[a\x03xV[\x90V[a\x0B\xAB\x90a\x0B\x86V[\x90V[`\xA0\x1B\x90V[\x90a\x0B\xC3`\xFF`\xA0\x1B\x91a\x0B\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xD6\x90a\x05jV[\x90V[\x90V[\x90a\x0B\xF1a\x0B\xECa\x0B\xF8\x92a\x0B\xCDV[a\x0B\xD9V[\x82Ta\x0B\xB4V[\x90UV[a\x0C\x05\x90a\x04ZV[\x90V[a\x0C\x11\x90a\x0B\xFCV[\x90V[\x90a\x0C%`\x01\x80`\xA0\x1B\x03\x91a\x06\xA2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C8\x90a\x0B\xFCV[\x90V[\x90V[\x90a\x0CSa\x0CNa\x0CZ\x92a\x0C/V[a\x0C;V[\x82Ta\x0C\x14V[\x90UV[a\x0Ch`\x01a\x0ByV[a\x0C\xD7W\x81a\x0C\x87a\x0C\x81a\x0C|_a\x0B\xA2V[a\x03\x83V[\x91a\x03\x83V[\x14a\x0C\xB4Wa\x0C\xADa\x0C\xA6a\x0C\xB2\x93a\x0C\xA1`\x01\x80a\x0B\xDCV[a\x0C\x08V[`\x01a\x0C>V[a\x10\x1CV[V[a\x0C\xBCa\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C\xD3`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0C\xDFa\x01\x02V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C\xF5`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[\x90a\r\x03\x91a\x0BEV[V[a\r\ra\x15sV[a\r\x15a\r\x17V[V[a\r(a\r#_a\x0B\xA2V[a\x15\xEBV[V[a\r2a\r\x05V[V[_\x90V[a\rDa\rI\x91a\x08\xFBV[a\x04\x17V[\x90V[a\rV\x90Ta\r8V[\x90V[`\xE0\x1B\x90V[a\rh\x81a\x05jV[\x03a\roWV[_\x80\xFD[\x90PQ\x90a\r\x80\x82a\r_V[V[\x90` \x82\x82\x03\x12a\r\x9BWa\r\x98\x91_\x01a\rsV[\x90V[a\x01\x0CV[` \x91\x81R\x01\x90V[\x91\x90a\r\xC3\x81a\r\xBC\x81a\r\xC8\x95a\r\xA0V[\x80\x95a\n\x13V[a\t\x94V[\x01\x90V[a\r\xF2a\r\xFF\x95\x93\x94\x92\x94a\r\xE8``\x84\x01\x96_\x85\x01\x90a\x06HV[` \x83\x01\x90a\x06HV[`@\x81\x85\x03\x91\x01Ra\r\xA9V[\x90V[a\x0E\na\x01\x02V[=_\x82>=\x90\xFD[\x92a\x0EU` \x93\x94a\x0E\"a\r4V[Pa\x0E`a\x0E8a\x0E3`\x01a\rLV[a\x04\x82V[\x93cz9y\xDC\x92\x95\x97a\x0EIa\x01\x02V[\x98\x89\x97\x88\x96\x87\x96a\rYV[\x86R`\x04\x86\x01a\r\xCCV[\x03\x91Z\xFA\x90\x81\x15a\x0E\xA4W_\x91a\x0EvW[P\x90V[a\x0E\x97\x91P` =\x81\x11a\x0E\x9DW[a\x0E\x8F\x81\x83a\t\xB2V[\x81\x01\x90a\r\x82V[_a\x0ErV[P=a\x0E\x85V[a\x0E\x02V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\xC4a\x0E\xC9\x91a\x08\xFBV[a\x0E\xADV[\x90V[a\x0E\xD6\x90Ta\x0E\xB8V[\x90V[a\x0E\xE1a\x0E\xA9V[Pa\x0E\xEB_a\x0E\xCCV[\x90V[a\x0E\xFF\x90a\x0E\xFAa\x15sV[a\x0F\rV[V[a\x0F\n\x90a\x04vV[\x90V[\x80a\x0F(a\x0F\"a\x0F\x1D_a\x0B\xA2V[a\x03\x83V[\x91a\x03\x83V[\x14a\x0F\x82Wa\x0F@a\x0F9\x82a\x0C\x08V[`\x01a\x0C>V[a\x0Fj\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F\x01V[\x90a\x0Fsa\x01\x02V[\x80a\x0F}\x81a\x01\x95V[\x03\x90\xA2V[a\x0F\x8Aa\x01\x02V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0F\xA1`\x04\x82\x01a\x01\x95V[\x03\x90\xFD[a\x0F\xAE\x90a\x0E\xEEV[V[a\x0F\xC1\x90a\x0F\xBCa\x15sV[a\x0F\xC3V[V[\x80a\x0F\xDEa\x0F\xD8a\x0F\xD3_a\x0B\xA2V[a\x03\x83V[\x91a\x03\x83V[\x14a\x0F\xEEWa\x0F\xEC\x90a\x15\xEBV[V[a\x10\x18a\x0F\xFA_a\x0B\xA2V[a\x10\x02a\x01\x02V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06UV[\x03\x90\xFD[a\x10%\x90a\x0F\xB0V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10Oa\x10Ja\x10T\x92a\x07\xBBV[a\x105V[a\x10,V[\x90V[\x90V[a\x10fa\x10k\x91a\x10,V[a\x10WV[\x90RV[\x90P\x90V[\x90\x91\x82a\x10\x84\x81a\x10\x8B\x93a\x10oV[\x80\x93a\n\x13V[\x01\x90V[\x80a\x10\xA0`\x01\x92a\x10\xA7\x96\x94a\x10ZV[\x01\x91a\x10tV[\x90V[a\x10\xE8\x90a\x10\xB6a\x10'V[Pa\x10\xD9a\x10\xC3_a\x10;V[\x91\x93a\x10\xCDa\x01\x02V[\x94\x85\x93` \x85\x01a\x10\x8FV[` \x82\x01\x81\x03\x82R\x03\x82a\t\xB2V[\x90V[a\x10\xF4\x90a\x04ZV[\x90V[a\x11\0\x90a\x10\xEBV[\x90V[a\x11\r`da\x10\xF7V[\x90V[a\x11\x19\x90a\x04vV[\x90V[a\x11%\x81a\x05\xEEV[\x03a\x11,WV[_\x80\xFD[\x90PQ\x90a\x11=\x82a\x11\x1CV[V[\x90` \x82\x82\x03\x12a\x11XWa\x11U\x91_\x01a\x110V[\x90V[a\x01\x0CV[` \x01\x90V[Q\x90V[\x90V[a\x11va\x11{\x91a\x01\xDDV[a\x11gV[\x90RV[``\x1B\x90V[a\x11\x8E\x90a\x11\x7FV[\x90V[a\x11\x9A\x90a\x11\x85V[\x90V[a\x11\xA9a\x11\xAE\x91a\x03\x83V[a\x11\x91V[\x90RV[\x90V[a\x11\xC1a\x11\xC6\x91a\x05\xEEV[a\x11\xB2V[\x90RV[`\xC0\x1B\x90V[a\x11\xD9\x90a\x11\xCAV[\x90V[a\x11\xE8a\x11\xED\x91a\x02\xE0V[a\x11\xD0V[\x90RV[a\x12A\x94a\x121` `\x08\x96a\x12)`\x14\x83\x9C\x9B\x98a\x12!\x85\x89a\x12\x19\x82\x9Ba\x129\x9Da\x11jV[\x01\x80\x92a\x11\x9DV[\x01\x80\x92a\x11\xB5V[\x01\x80\x92a\x11\xB5V[\x01\x80\x92a\x11\xDCV[\x01\x80\x92a\x11jV[\x01\x90V[\x90a\x12Q_\x19\x91a\x06\xA2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12d\x90a\x01\xDDV[\x90V[a\x12p\x90a\x08\xFBV[\x90V[\x90a\x12\x88a\x12\x83a\x12\x8F\x92a\x12[V[a\x12gV[\x82Ta\x12EV[\x90UV[\x90V[a\x12\xAAa\x12\xA5a\x12\xAF\x92a\x12\x93V[a\x04WV[a\x02\xE0V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12\xD2a\x12\xD8\x91a\x02\xE0V[\x91a\x02\xE0V[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12\xEBWV[a\x12\xB2V[\x90a\x13\x03g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x06\xA2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13!a\x13\x1Ca\x13&\x92a\x02\xE0V[a\x04WV[a\x02\xE0V[\x90V[\x90V[\x90a\x13Aa\x13<a\x13H\x92a\x13\rV[a\x13)V[\x82Ta\x12\xF0V[\x90UV[\x90\x82_\x93\x92\x82^\x01RV[a\x13va\x13\x7F` \x93a\x13\x84\x93a\x13m\x81a\x11cV[\x93\x84\x80\x93a\r\xA0V[\x95\x86\x91\x01a\x13LV[a\t\x94V[\x01\x90V[a\x13\x9D\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x13WV[\x90V[a\x14qa\x13\xABa\x15OV[a\x14LCa\x13\xBFa\x13\xBAa\x11\x03V[a\x11\x10V[;a\x13\xD2a\x13\xCC_a\x07\xBEV[\x91a\x05\xEEV[\x11a\x14\xB5W[a\x141a\x13\xE6_\x85\x01a\t\x17V[a\x14\"\x87\x93Ba\x13\xF8`\x01\x89\x01a\n\xA9V[\x90\x8Ba\x14\x0Ca\x14\x06\x82a\x11cV[\x91a\x11]V[ \x92a\x14\x16a\x01\x02V[\x97\x88\x96` \x88\x01a\x11\xF1V[` \x82\x01\x81\x03\x82R\x03\x82a\t\xB2V[a\x14Ca\x14=\x82a\x11cV[\x91a\x11]V[ _\x83\x01a\x12sV[a\x14k`\x01a\x14Z\x81a\x12\x96V[\x92\x01\x91a\x14f\x83a\n\xA9V[a\x12\xC6V[\x90a\x13,V[a\x14\xB0a\x14\x9E\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F\x01V[\x92a\x14\xA7a\x01\x02V[\x91\x82\x91\x82a\x13\x88V[\x03\x90\xA2V[a\x14\xE0` a\x14\xCAa\x14\xC5a\x11\x03V[a\x11\x10V[c\xA3\xB1\xB3\x1D\x90a\x14\xD8a\x01\x02V[\x93\x84\x92a\rYV[\x82R\x81\x80a\x14\xF0`\x04\x82\x01a\x01\x95V[\x03\x91Z\xFA\x80\x91_\x92a\x15\x1FW[P\x15_\x14a\x15\x18WP`\x01a\x15\x13W[[a\x13\xD8V[a\x15\rV[\x90Pa\x15\x0EV[a\x15A\x91\x92P` =\x81\x11a\x15HW[a\x159\x81\x83a\t\xB2V[\x81\x01\x90a\x11?V[\x90_a\x14\xFDV[P=a\x15/V[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x15{a\x0E\xD9V[a\x15\x94a\x15\x8Ea\x15\x89a\x16JV[a\x03\x83V[\x91a\x03\x83V[\x03a\x15\x9BWV[a\x15\xC4a\x15\xA6a\x16JV[a\x15\xAEa\x01\x02V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06UV[\x03\x90\xFD[\x90V[\x90a\x15\xE0a\x15\xDBa\x15\xE7\x92a\x0F\x01V[a\x15\xC8V[\x82Ta\x0C\x14V[\x90UV[a\x15\xF4_a\x0E\xCCV[a\x15\xFE\x82_a\x15\xCBV[\x90a\x162a\x16,\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\x01V[\x91a\x0F\x01V[\x91a\x16;a\x01\x02V[\x80a\x16E\x81a\x01\x95V[\x03\x90\xA3V[a\x16Ra\x0E\xA9V[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrProposerNotAllowed()` and selector `0xc35d8c92`.
```solidity
error TransactionOrProposerNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrProposerNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrProposerNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrProposerNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrProposerNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrProposerNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrProposerNotAllowed()";
            const SELECTOR: [u8; 4] = [195u8, 93u8, 140u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appChainId),
                )
            }
        }
    };
    /**Function with signature `TX_DATA_STORAGE_LOCATION()` and selector `0x9d91597b`.
```solidity
function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`TX_DATA_STORAGE_LOCATION()`](TX_DATA_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TX_DATA_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TX_DATA_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TX_DATA_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [157u8, 145u8, 89u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appChainId()` and selector `0x83470923`.
```solidity
function appChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdCall {}
    ///Container type for the return parameters of the [`appChainId()`](appChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appChainId()";
            const SELECTOR: [u8; 4] = [131u8, 71u8, 9u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txAcc()` and selector `0x32704864`.
```solidity
function txAcc() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccCall {}
    ///Container type for the return parameters of the [`txAcc()`](txAccCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccCall> for UnderlyingRustTuple<'_> {
                fn from(value: txAccCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txAccReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txAccCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txAccReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txAcc()";
            const SELECTOR: [u8; 4] = [50u8, 112u8, 72u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txCount()` and selector `0x3c540687`.
```solidity
function txCount() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountCall {}
    ///Container type for the return parameters of the [`txCount()`](txCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: txCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txCount()";
            const SELECTOR: [u8; 4] = [60u8, 84u8, 6u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChain`](self) function calls.
    pub enum SyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        TX_DATA_STORAGE_LOCATION(TX_DATA_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        appChainId(appChainIdCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        txAcc(txAccCall),
        #[allow(missing_docs)]
        txCount(txCountCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [50u8, 112u8, 72u8, 100u8],
            [53u8, 20u8, 211u8, 123u8],
            [60u8, 84u8, 6u8, 135u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [131u8, 71u8, 9u8, 35u8],
            [141u8, 165u8, 203u8, 91u8],
            [157u8, 145u8, 89u8, 123u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainCalls {
        const NAME: &'static str = "SyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::TX_DATA_STORAGE_LOCATION(_) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appChainId(_) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::txAcc(_) => <txAccCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::txCount(_) => <txCountCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processBulkTransactions)
                    }
                    processBulkTransactions
                },
                {
                    fn txAcc(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <txAccCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::txAcc)
                    }
                    txAcc
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransactionRaw)
                    }
                    processTransactionRaw
                },
                {
                    fn txCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <txCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::txCount)
                    }
                    txCount
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn appChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <appChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::appChainId)
                    }
                    appChainId
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::owner)
                    }
                    owner
                },
                {
                    fn TX_DATA_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::TX_DATA_STORAGE_LOCATION)
                    }
                    TX_DATA_STORAGE_LOCATION
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) custom errors.
    pub enum SyndicateSequencingChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrProposerNotAllowed(TransactionOrProposerNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [195u8, 93u8, 140u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainErrors {
        const NAME: &'static str = "SyndicateSequencingChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrProposerNotAllowed(_) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrProposerNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::TransactionOrProposerNotAllowed,
                            )
                    }
                    TransactionOrProposerNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) events.
    pub enum SyndicateSequencingChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateSequencingChainEvents {
        const NAME: &'static str = "SyndicateSequencingChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainInstance<T, P, N> {
        SyndicateSequencingChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>>,
    > {
        SyndicateSequencingChainInstance::<T, P, N>::deploy(provider, _appChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appChainId)
    }
    /**A [`SyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateSequencingChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _appChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateSequencingChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateSequencingChainInstance<T, P, N> {
            SyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`TX_DATA_STORAGE_LOCATION`] function.
        pub fn TX_DATA_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TX_DATA_STORAGE_LOCATIONCall, N> {
            self.call_builder(&TX_DATA_STORAGE_LOCATIONCall {})
        }
        ///Creates a new call builder for the [`appChainId`] function.
        pub fn appChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appChainIdCall, N> {
            self.call_builder(&appChainIdCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`txAcc`] function.
        pub fn txAcc(&self) -> alloy_contract::SolCallBuilder<T, &P, txAccCall, N> {
            self.call_builder(&txAccCall {})
        }
        ///Creates a new call builder for the [`txCount`] function.
        pub fn txCount(&self) -> alloy_contract::SolCallBuilder<T, &P, txCountCall, N> {
            self.call_builder(&txCountCall {})
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
