/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChain {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _appchainId);

    function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
    function appchainId() external view returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function txAcc() external view returns (bytes32);
    function txCount() external view returns (uint64);
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "TX_DATA_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "txAcc",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "txCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b6116666104cd8239608051816107b5015261166690f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611cf2803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610169601860209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf6101e1565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b6101e96102e1565b565b60a01b90565b9061020060ff60a01b916101eb565b9181191691161790565b151590565b6102189061020a565b90565b90565b9061023361022e61023a9261020f565b61021b565b82546101f1565b9055565b5f0190565b61024b61003d565b3d5f823e3d90fd5b60018060a01b031690565b61027261026d61027792610253565b61010d565b610253565b90565b6102839061025e565b90565b61028f9061027a565b90565b5f1b90565b906102a860018060a01b0391610292565b9181191691161790565b6102bb9061027a565b90565b90565b906102d66102d16102dd926102b2565b6102be565b8254610297565b9055565b6102ea3361034e565b6102f55f600161021e565b6102fd61003d565b6101bf810181811060018060401b038211176103495761032582916101bf611b33843961023e565b03905ff080156103445761033b61034291610286565b60016102c1565b565b610243565b610051565b610357906103af565b565b61036d6103686103729261010a565b61010d565b610253565b90565b61037e90610359565b90565b61038a90610253565b90565b61039690610381565b9052565b91906103ad905f6020850194019061038d565b565b806103ca6103c46103bf5f610375565b610381565b91610381565b146103da576103d89061046d565b565b6103fd6103e65f610375565b5f918291631e4fbdf760e01b83526004830161039a565b0390fd5b5f1c90565b60018060a01b031690565b61041d61042291610401565b610406565b90565b61042f9054610411565b90565b61043b9061025e565b90565b61044790610432565b90565b90565b9061046261045d6104699261043e565b61044a565b8254610297565b9055565b6104765f610425565b610480825f61044d565b906104b46104ae7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361043e565b9161043e565b916104bd61003d565b806104c78161023e565b0390a356fe60806040526004361015610013575b610864565b61001d5f3561010c565b80633270486414610107578063366cbab7146101025780633c540687146100fd57806346e2cc09146100f8578063485cc955146100f35780635b3cd6e2146100ee578063715018a6146100e95780637a3979dc146100e4578063804e5123146100df5780638da5cb5b146100da5780639d91597b146100d5578063cdafb978146100d0578063d4f0eb4d146100cb578063d8781342146100c65763f2fde38b0361000e57610831565b6107fc565b610780565b61072e565b610684565b6105f4565b61059e565b610565565b6104b9565b610484565b6103b3565b610318565b6102de565b610279565b610154565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012a57565b61011c565b90565b61013b9061012f565b9052565b9190610152905f60208501940190610132565b565b3461018457610164366004610120565b61018061016f610895565b610177610112565b9182918261013f565b0390f35b610118565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b90602082820312610209575f82013567ffffffffffffffff8111610204576102009201610199565b9091565b610189565b61011c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61024f61025860209361025d936102468161020e565b93848093610212565b9586910161021b565b610226565b0190565b6102769160208201915f818403910152610230565b90565b346102aa576102a661029561028f3660046101d8565b90610981565b61029d610112565b91829182610261565b0390f35b610118565b67ffffffffffffffff1690565b6102c5906102af565b9052565b91906102dc905f602085019401906102bc565b565b3461030e576102ee366004610120565b61030a6102f96109f4565b610301610112565b918291826102c9565b0390f35b610118565b5f0190565b346103475761033161032b3660046101d8565b90610aee565b610339610112565b8061034381610313565b0390f35b610118565b60018060a01b031690565b6103609061034c565b90565b61036c81610357565b0361037357565b5f80fd5b9050359061038482610363565b565b91906040838203126103ae57806103a26103ab925f8601610377565b93602001610377565b90565b61011c565b346103e2576103cc6103c6366004610386565b90610ca0565b6103d4610112565b806103de81610313565b0390f35b610118565b1c90565b60018060a01b031690565b61040690600861040b93026103e7565b6103eb565b90565b9061041991546103f6565b90565b61042860015f9061040e565b90565b90565b61044261043d6104479261034c565b61042b565b61034c565b90565b6104539061042e565b90565b61045f9061044a565b90565b61046b90610456565b9052565b9190610482905f60208501940190610462565b565b346104b457610494366004610120565b6104b061049f61041c565b6104a7610112565b9182918261046f565b0390f35b610118565b346104e7576104c9366004610120565b6104d1610cd1565b6104d9610112565b806104e381610313565b0390f35b610118565b9160608383031261053957610503825f8501610377565b926105118360208301610377565b92604082013567ffffffffffffffff8111610534576105309201610199565b9091565b610189565b61011c565b151590565b61054c9061053e565b9052565b9190610563905f60208501940190610543565b565b346105995761059561058461057b3660046104ec565b92919091610db0565b61058c610112565b91829182610550565b0390f35b610118565b346105cd576105b76105b13660046101d8565b90610ea2565b6105bf610112565b806105c981610313565b0390f35b610118565b6105db90610357565b9052565b91906105f2905f602085019401906105d2565b565b3461062457610604366004610120565b61062061060f610ede565b610617610112565b918291826105df565b0390f35b610118565b90565b5f1b90565b61064561064061064a92610629565b61062c565b61012f565b90565b6106767fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a969610631565b90565b61068161064d565b90565b346106b457610694366004610120565b6106b061069f610679565b6106a7610112565b9182918261013f565b0390f35b610118565b909182601f830112156106f35781359167ffffffffffffffff83116106ee5760200192602083028401116106e957565b610195565b610191565b61018d565b90602082820312610729575f82013567ffffffffffffffff81116107245761072092016106b9565b9091565b610189565b61011c565b3461075d576107476107413660046106f8565b90610fa9565b61074f610112565b8061075981610313565b0390f35b610118565b9060208282031261077b57610778915f01610377565b90565b61011c565b346107ae57610798610793366004610762565b6110dd565b6107a0610112565b806107aa81610313565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b6107e3906107d7565b9052565b91906107fa905f602085019401906107da565b565b3461082c5761080c366004610120565b6108286108176107b3565b61081f610112565b918291826107e7565b0390f35b610118565b3461085f57610849610844366004610762565b61114d565b610851610112565b8061085b81610313565b0390f35b610118565b5f80fd5b5f90565b5f1c90565b90565b6108806108859161086c565b610871565b90565b6108929054610874565b90565b61089d610868565b506108b05f6108aa611158565b01610888565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b6108de6108d96108e3926108b8565b6108c4565b6108bb565b90565b90565b6108f56108fa916108bb565b6108e6565b9052565b905090565b90825f939282370152565b90918261091e81610925936108fe565b8093610903565b0190565b8061093a60019261094196946108e9565b019161090e565b90565b634e487b7160e01b5f52604160045260245ffd5b9061096290610226565b810190811067ffffffffffffffff82111761097c57604052565b610944565b6109bf9061098d6108b3565b506109b061099a5f6108ca565b91936109a4610112565b94859360208501610929565b60208201810382520382610958565b90565b5f90565b67ffffffffffffffff1690565b6109df6109e49161086c565b6109c6565b90565b6109f190546109d3565b90565b6109fc6109c2565b50610a106001610a0a611158565b016109e7565b90565b90610a2f610a2933329085859192909192610db0565b1561053e565b610a3e57610a3c91610ada565b565b5f631b8e828b60e31b815280610a5660048201610313565b0390fd5b5f80fd5b90610a71610a6a610112565b9283610958565b565b67ffffffffffffffff8111610a9157610a8d602091610226565b0190565b610944565b90929192610aab610aa682610a73565b610a5e565b93818552602085019082840111610ac757610ac592610903565b565b610a5a565b610ad7913691610a96565b90565b610aec91610ae791610acc565b6113d9565b565b90610af891610a13565b565b90610b0c91610b07611589565b610c13565b565b60a01c90565b60ff1690565b610b26610b2b91610b0e565b610b14565b90565b610b389054610b1a565b90565b610b4f610b4a610b54926108b8565b61042b565b61034c565b90565b610b6090610b3b565b90565b60a01b90565b90610b7860ff60a01b91610b63565b9181191691161790565b610b8b9061053e565b90565b90565b90610ba6610ba1610bad92610b82565b610b8e565b8254610b69565b9055565b610bba9061042e565b90565b610bc690610bb1565b90565b90610bda60018060a01b039161062c565b9181191691161790565b610bed90610bb1565b90565b90565b90610c08610c03610c0f92610be4565b610bf0565b8254610bc9565b9055565b610c1d6001610b2e565b610c855781610c3c610c36610c315f610b57565b610357565b91610357565b14610c6957610c62610c5b610c6793610c56600180610b91565b610bbd565b6001610bf3565b61114d565b565b5f632e7f3c7f60e11b815280610c8160048201610313565b0390fd5b5f62dc149f60e41b815280610c9c60048201610313565b0390fd5b90610caa91610afa565b565b610cb4611589565b610cbc610cbe565b565b610ccf610cca5f610b57565b6115fa565b565b610cd9610cac565b565b5f90565b610ceb610cf09161086c565b6103eb565b90565b610cfd9054610cdf565b90565b60e01b90565b610d0f8161053e565b03610d1657565b5f80fd5b90505190610d2782610d06565b565b90602082820312610d4257610d3f915f01610d1a565b90565b61011c565b9190610d6181610d5a81610d6695610212565b8095610903565b610226565b0190565b610d90610d9d9593949294610d8660608401965f8501906105d2565b60208301906105d2565b6040818503910152610d47565b90565b610da8610112565b3d5f823e3d90fd5b92610df360209394610dc0610cdb565b50610dfe610dd6610dd16001610cf3565b610456565b93637a3979dc929597610de7610112565b98899788968796610d00565b865260048601610d6a565b03915afa908115610e42575f91610e14575b5090565b610e35915060203d8111610e3b575b610e2d8183610958565b810190610d29565b5f610e10565b503d610e23565b610da0565b90610e63610e5d33329085859192909192610db0565b1561053e565b610e7257610e7091610e8e565b565b5f631b8e828b60e31b815280610e8a60048201610313565b0390fd5b610ea091610e9b91610981565b6113d9565b565b90610eac91610e47565b565b5f90565b60018060a01b031690565b610ec9610ece9161086c565b610eb2565b90565b610edb9054610ebd565b90565b610ee6610eae565b50610ef05f610ed1565b90565b5090565b610f0b610f06610f10926108b8565b61042b565b6107d7565b90565b6001610f1f91016107d7565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610f84570180359067ffffffffffffffff8211610f7f57602001916001820236038313610f7a57565b610f3e565b610f3a565b610f36565b90821015610fa4576020610fa09202810190610f42565b9091565b610f22565b610fb4818390610ef3565b91610fbe5f610ef7565b5b80610fd2610fcc866107d7565b916107d7565b10156110275761100090610ff6333290610fee87878691610f89565b929091610db0565b611005575b610f13565b610fbf565b61102261101d61101786868591610f89565b90610981565b6113d9565b610ffb565b50505050565b61103e90611039611589565b61104c565b565b6110499061044a565b90565b8061106761106161105c5f610b57565b610357565b91610357565b146110c15761107f61107882610bbd565b6001610bf3565b6110a97f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991611040565b906110b2610112565b806110bc81610313565b0390a2565b5f632e7f3c7f60e11b8152806110d960048201610313565b0390fd5b6110e69061102d565b565b6110f9906110f4611589565b6110fb565b565b8061111661111061110b5f610b57565b610357565b91610357565b1461112657611124906115fa565b565b6111496111325f610b57565b5f918291631e4fbdf760e01b8352600483016105df565b0390fd5b611156906110e8565b565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b6111859061042e565b90565b6111919061117c565b90565b61119e6064611188565b90565b6111aa9061044a565b90565b6111b6816107d7565b036111bd57565b5f80fd5b905051906111ce826111ad565b565b906020828203126111e9576111e6915f016111c1565b90565b61011c565b60200190565b90565b6112036112089161012f565b6111f4565b9052565b60601b90565b61121b9061120c565b90565b61122790611212565b90565b61123661123b91610357565b61121e565b9052565b90565b61124e611253916107d7565b61123f565b9052565b60c01b90565b61126690611257565b90565b61127561127a916102af565b61125d565b9052565b6112ce946112be60206008966112b66014839c9b986112ae85896112a6829b6112c69d6111f7565b01809261122a565b018092611242565b018092611242565b018092611269565b0180926111f7565b0190565b906112de5f199161062c565b9181191691161790565b6112f19061012f565b90565b6112fd9061086c565b90565b9061131561131061131c926112e8565b6112f4565b82546112d2565b9055565b90565b61133761133261133c92611320565b61042b565b6102af565b90565b634e487b7160e01b5f52601160045260245ffd5b61135f611365916102af565b916102af565b019067ffffffffffffffff821161137857565b61133f565b9061139067ffffffffffffffff9161062c565b9181191691161790565b6113ae6113a96113b3926102af565b61042b565b6102af565b90565b90565b906113ce6113c96113d59261139a565b6113b6565b825461137d565b9055565b6114aa6113e4611158565b611485436113f86113f3611194565b6111a1565b3b61140b6114055f610ef7565b916107d7565b116114ef575b61146a61141f5f8501610888565b61145b339342611431600189016109e7565b908a61144561143f8261020e565b916111ee565b209261144f610112565b9788966020880161127e565b60208201810382520382610958565b61147c6114768261020e565b916111ee565b205f8301611300565b6114a4600161149381611323565b92019161149f836109e7565b611353565b906113b9565b336114ea6114d87f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611040565b926114e1610112565b91829182610261565b0390a2565b61151a60206115046114ff611194565b6111a1565b63a3b1b31d90611512610112565b938492610d00565b8252818061152a60048201610313565b03915afa80915f92611559575b50155f146115525750600161154d575b5b611411565b611547565b9050611548565b61157b91925060203d8111611582575b6115738183610958565b8101906111d0565b905f611537565b503d611569565b611591610ede565b6115aa6115a461159f611659565b610357565b91610357565b036115b157565b6115d36115bc611659565b5f91829163118cdaa760e01b8352600483016105df565b0390fd5b90565b906115ef6115ea6115f692611040565b6115d7565b8254610bc9565b9055565b6116035f610ed1565b61160d825f6115da565b9061164161163b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611040565b91611040565b9161164a610112565b8061165481610313565b0390a3565b611661610eae565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x16fa\x04\xCD\x829`\x80Q\x81a\x07\xB5\x01Ra\x16f\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x1C\xF2\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x18` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x01\xE1V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[a\x01\xE9a\x02\xE1V[V[`\xA0\x1B\x90V[\x90a\x02\0`\xFF`\xA0\x1B\x91a\x01\xEBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x18\x90a\x02\nV[\x90V[\x90V[\x90a\x023a\x02.a\x02:\x92a\x02\x0FV[a\x02\x1BV[\x82Ta\x01\xF1V[\x90UV[_\x01\x90V[a\x02Ka\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ra\x02ma\x02w\x92a\x02SV[a\x01\rV[a\x02SV[\x90V[a\x02\x83\x90a\x02^V[\x90V[a\x02\x8F\x90a\x02zV[\x90V[_\x1B\x90V[\x90a\x02\xA8`\x01\x80`\xA0\x1B\x03\x91a\x02\x92V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xBB\x90a\x02zV[\x90V[\x90V[\x90a\x02\xD6a\x02\xD1a\x02\xDD\x92a\x02\xB2V[a\x02\xBEV[\x82Ta\x02\x97V[\x90UV[a\x02\xEA3a\x03NV[a\x02\xF5_`\x01a\x02\x1EV[a\x02\xFDa\0=V[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03IWa\x03%\x82\x91a\x01\xBFa\x1B3\x849a\x02>V[\x03\x90_\xF0\x80\x15a\x03DWa\x03;a\x03B\x91a\x02\x86V[`\x01a\x02\xC1V[V[a\x02CV[a\0QV[a\x03W\x90a\x03\xAFV[V[a\x03ma\x03ha\x03r\x92a\x01\nV[a\x01\rV[a\x02SV[\x90V[a\x03~\x90a\x03YV[\x90V[a\x03\x8A\x90a\x02SV[\x90V[a\x03\x96\x90a\x03\x81V[\x90RV[\x91\x90a\x03\xAD\x90_` \x85\x01\x94\x01\x90a\x03\x8DV[V[\x80a\x03\xCAa\x03\xC4a\x03\xBF_a\x03uV[a\x03\x81V[\x91a\x03\x81V[\x14a\x03\xDAWa\x03\xD8\x90a\x04mV[V[a\x03\xFDa\x03\xE6_a\x03uV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x9AV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x1Da\x04\"\x91a\x04\x01V[a\x04\x06V[\x90V[a\x04/\x90Ta\x04\x11V[\x90V[a\x04;\x90a\x02^V[\x90V[a\x04G\x90a\x042V[\x90V[\x90V[\x90a\x04ba\x04]a\x04i\x92a\x04>V[a\x04JV[\x82Ta\x02\x97V[\x90UV[a\x04v_a\x04%V[a\x04\x80\x82_a\x04MV[\x90a\x04\xB4a\x04\xAE\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04>V[\x91a\x04>V[\x91a\x04\xBDa\0=V[\x80a\x04\xC7\x81a\x02>V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08dV[a\0\x1D_5a\x01\x0CV[\x80c2pHd\x14a\x01\x07W\x80c6l\xBA\xB7\x14a\x01\x02W\x80c<T\x06\x87\x14a\0\xFDW\x80cF\xE2\xCC\t\x14a\0\xF8W\x80cH\\\xC9U\x14a\0\xF3W\x80c[<\xD6\xE2\x14a\0\xEEW\x80cqP\x18\xA6\x14a\0\xE9W\x80cz9y\xDC\x14a\0\xE4W\x80c\x80NQ#\x14a\0\xDFW\x80c\x8D\xA5\xCB[\x14a\0\xDAW\x80c\x9D\x91Y{\x14a\0\xD5W\x80c\xCD\xAF\xB9x\x14a\0\xD0W\x80c\xD4\xF0\xEBM\x14a\0\xCBW\x80c\xD8x\x13B\x14a\0\xC6Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x081V[a\x07\xFCV[a\x07\x80V[a\x07.V[a\x06\x84V[a\x05\xF4V[a\x05\x9EV[a\x05eV[a\x04\xB9V[a\x04\x84V[a\x03\xB3V[a\x03\x18V[a\x02\xDEV[a\x02yV[a\x01TV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01*WV[a\x01\x1CV[\x90V[a\x01;\x90a\x01/V[\x90RV[\x91\x90a\x01R\x90_` \x85\x01\x94\x01\x90a\x012V[V[4a\x01\x84Wa\x01d6`\x04a\x01 V[a\x01\x80a\x01oa\x08\x95V[a\x01wa\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x02\tW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x04Wa\x02\0\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02Oa\x02X` \x93a\x02]\x93a\x02F\x81a\x02\x0EV[\x93\x84\x80\x93a\x02\x12V[\x95\x86\x91\x01a\x02\x1BV[a\x02&V[\x01\x90V[a\x02v\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x020V[\x90V[4a\x02\xAAWa\x02\xA6a\x02\x95a\x02\x8F6`\x04a\x01\xD8V[\x90a\t\x81V[a\x02\x9Da\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\x01\x18V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x02\xC5\x90a\x02\xAFV[\x90RV[\x91\x90a\x02\xDC\x90_` \x85\x01\x94\x01\x90a\x02\xBCV[V[4a\x03\x0EWa\x02\xEE6`\x04a\x01 V[a\x03\na\x02\xF9a\t\xF4V[a\x03\x01a\x01\x12V[\x91\x82\x91\x82a\x02\xC9V[\x03\x90\xF3[a\x01\x18V[_\x01\x90V[4a\x03GWa\x031a\x03+6`\x04a\x01\xD8V[\x90a\n\xEEV[a\x039a\x01\x12V[\x80a\x03C\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03`\x90a\x03LV[\x90V[a\x03l\x81a\x03WV[\x03a\x03sWV[_\x80\xFD[\x90P5\x90a\x03\x84\x82a\x03cV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xAEW\x80a\x03\xA2a\x03\xAB\x92_\x86\x01a\x03wV[\x93` \x01a\x03wV[\x90V[a\x01\x1CV[4a\x03\xE2Wa\x03\xCCa\x03\xC66`\x04a\x03\x86V[\x90a\x0C\xA0V[a\x03\xD4a\x01\x12V[\x80a\x03\xDE\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x06\x90`\x08a\x04\x0B\x93\x02a\x03\xE7V[a\x03\xEBV[\x90V[\x90a\x04\x19\x91Ta\x03\xF6V[\x90V[a\x04(`\x01_\x90a\x04\x0EV[\x90V[\x90V[a\x04Ba\x04=a\x04G\x92a\x03LV[a\x04+V[a\x03LV[\x90V[a\x04S\x90a\x04.V[\x90V[a\x04_\x90a\x04JV[\x90V[a\x04k\x90a\x04VV[\x90RV[\x91\x90a\x04\x82\x90_` \x85\x01\x94\x01\x90a\x04bV[V[4a\x04\xB4Wa\x04\x946`\x04a\x01 V[a\x04\xB0a\x04\x9Fa\x04\x1CV[a\x04\xA7a\x01\x12V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x01\x18V[4a\x04\xE7Wa\x04\xC96`\x04a\x01 V[a\x04\xD1a\x0C\xD1V[a\x04\xD9a\x01\x12V[\x80a\x04\xE3\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x91``\x83\x83\x03\x12a\x059Wa\x05\x03\x82_\x85\x01a\x03wV[\x92a\x05\x11\x83` \x83\x01a\x03wV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x054Wa\x050\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[\x15\x15\x90V[a\x05L\x90a\x05>V[\x90RV[\x91\x90a\x05c\x90_` \x85\x01\x94\x01\x90a\x05CV[V[4a\x05\x99Wa\x05\x95a\x05\x84a\x05{6`\x04a\x04\xECV[\x92\x91\x90\x91a\r\xB0V[a\x05\x8Ca\x01\x12V[\x91\x82\x91\x82a\x05PV[\x03\x90\xF3[a\x01\x18V[4a\x05\xCDWa\x05\xB7a\x05\xB16`\x04a\x01\xD8V[\x90a\x0E\xA2V[a\x05\xBFa\x01\x12V[\x80a\x05\xC9\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[a\x05\xDB\x90a\x03WV[\x90RV[\x91\x90a\x05\xF2\x90_` \x85\x01\x94\x01\x90a\x05\xD2V[V[4a\x06$Wa\x06\x046`\x04a\x01 V[a\x06 a\x06\x0Fa\x0E\xDEV[a\x06\x17a\x01\x12V[\x91\x82\x91\x82a\x05\xDFV[\x03\x90\xF3[a\x01\x18V[\x90V[_\x1B\x90V[a\x06Ea\x06@a\x06J\x92a\x06)V[a\x06,V[a\x01/V[\x90V[a\x06v\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\x061V[\x90V[a\x06\x81a\x06MV[\x90V[4a\x06\xB4Wa\x06\x946`\x04a\x01 V[a\x06\xB0a\x06\x9Fa\x06yV[a\x06\xA7a\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\xF3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\xEEW` \x01\x92` \x83\x02\x84\x01\x11a\x06\xE9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x07)W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07$Wa\x07 \x92\x01a\x06\xB9V[\x90\x91V[a\x01\x89V[a\x01\x1CV[4a\x07]Wa\x07Ga\x07A6`\x04a\x06\xF8V[\x90a\x0F\xA9V[a\x07Oa\x01\x12V[\x80a\x07Y\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x90` \x82\x82\x03\x12a\x07{Wa\x07x\x91_\x01a\x03wV[\x90V[a\x01\x1CV[4a\x07\xAEWa\x07\x98a\x07\x936`\x04a\x07bV[a\x10\xDDV[a\x07\xA0a\x01\x12V[\x80a\x07\xAA\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07\xE3\x90a\x07\xD7V[\x90RV[\x91\x90a\x07\xFA\x90_` \x85\x01\x94\x01\x90a\x07\xDAV[V[4a\x08,Wa\x08\x0C6`\x04a\x01 V[a\x08(a\x08\x17a\x07\xB3V[a\x08\x1Fa\x01\x12V[\x91\x82\x91\x82a\x07\xE7V[\x03\x90\xF3[a\x01\x18V[4a\x08_Wa\x08Ia\x08D6`\x04a\x07bV[a\x11MV[a\x08Qa\x01\x12V[\x80a\x08[\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08\x80a\x08\x85\x91a\x08lV[a\x08qV[\x90V[a\x08\x92\x90Ta\x08tV[\x90V[a\x08\x9Da\x08hV[Pa\x08\xB0_a\x08\xAAa\x11XV[\x01a\x08\x88V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08\xDEa\x08\xD9a\x08\xE3\x92a\x08\xB8V[a\x08\xC4V[a\x08\xBBV[\x90V[\x90V[a\x08\xF5a\x08\xFA\x91a\x08\xBBV[a\x08\xE6V[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\t\x1E\x81a\t%\x93a\x08\xFEV[\x80\x93a\t\x03V[\x01\x90V[\x80a\t:`\x01\x92a\tA\x96\x94a\x08\xE9V[\x01\x91a\t\x0EV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\tb\x90a\x02&V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t|W`@RV[a\tDV[a\t\xBF\x90a\t\x8Da\x08\xB3V[Pa\t\xB0a\t\x9A_a\x08\xCAV[\x91\x93a\t\xA4a\x01\x12V[\x94\x85\x93` \x85\x01a\t)V[` \x82\x01\x81\x03\x82R\x03\x82a\tXV[\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\t\xDFa\t\xE4\x91a\x08lV[a\t\xC6V[\x90V[a\t\xF1\x90Ta\t\xD3V[\x90V[a\t\xFCa\t\xC2V[Pa\n\x10`\x01a\n\na\x11XV[\x01a\t\xE7V[\x90V[\x90a\n/a\n)32\x90\x85\x85\x91\x92\x90\x91\x92a\r\xB0V[\x15a\x05>V[a\n>Wa\n<\x91a\n\xDAV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\nV`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[_\x80\xFD[\x90a\nqa\nja\x01\x12V[\x92\x83a\tXV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x91Wa\n\x8D` \x91a\x02&V[\x01\x90V[a\tDV[\x90\x92\x91\x92a\n\xABa\n\xA6\x82a\nsV[a\n^V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\xC7Wa\n\xC5\x92a\t\x03V[V[a\nZV[a\n\xD7\x916\x91a\n\x96V[\x90V[a\n\xEC\x91a\n\xE7\x91a\n\xCCV[a\x13\xD9V[V[\x90a\n\xF8\x91a\n\x13V[V[\x90a\x0B\x0C\x91a\x0B\x07a\x15\x89V[a\x0C\x13V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0B&a\x0B+\x91a\x0B\x0EV[a\x0B\x14V[\x90V[a\x0B8\x90Ta\x0B\x1AV[\x90V[a\x0BOa\x0BJa\x0BT\x92a\x08\xB8V[a\x04+V[a\x03LV[\x90V[a\x0B`\x90a\x0B;V[\x90V[`\xA0\x1B\x90V[\x90a\x0Bx`\xFF`\xA0\x1B\x91a\x0BcV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x8B\x90a\x05>V[\x90V[\x90V[\x90a\x0B\xA6a\x0B\xA1a\x0B\xAD\x92a\x0B\x82V[a\x0B\x8EV[\x82Ta\x0BiV[\x90UV[a\x0B\xBA\x90a\x04.V[\x90V[a\x0B\xC6\x90a\x0B\xB1V[\x90V[\x90a\x0B\xDA`\x01\x80`\xA0\x1B\x03\x91a\x06,V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xED\x90a\x0B\xB1V[\x90V[\x90V[\x90a\x0C\x08a\x0C\x03a\x0C\x0F\x92a\x0B\xE4V[a\x0B\xF0V[\x82Ta\x0B\xC9V[\x90UV[a\x0C\x1D`\x01a\x0B.V[a\x0C\x85W\x81a\x0C<a\x0C6a\x0C1_a\x0BWV[a\x03WV[\x91a\x03WV[\x14a\x0CiWa\x0Cba\x0C[a\x0Cg\x93a\x0CV`\x01\x80a\x0B\x91V[a\x0B\xBDV[`\x01a\x0B\xF3V[a\x11MV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C\x81`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C\x9C`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[\x90a\x0C\xAA\x91a\n\xFAV[V[a\x0C\xB4a\x15\x89V[a\x0C\xBCa\x0C\xBEV[V[a\x0C\xCFa\x0C\xCA_a\x0BWV[a\x15\xFAV[V[a\x0C\xD9a\x0C\xACV[V[_\x90V[a\x0C\xEBa\x0C\xF0\x91a\x08lV[a\x03\xEBV[\x90V[a\x0C\xFD\x90Ta\x0C\xDFV[\x90V[`\xE0\x1B\x90V[a\r\x0F\x81a\x05>V[\x03a\r\x16WV[_\x80\xFD[\x90PQ\x90a\r'\x82a\r\x06V[V[\x90` \x82\x82\x03\x12a\rBWa\r?\x91_\x01a\r\x1AV[\x90V[a\x01\x1CV[\x91\x90a\ra\x81a\rZ\x81a\rf\x95a\x02\x12V[\x80\x95a\t\x03V[a\x02&V[\x01\x90V[a\r\x90a\r\x9D\x95\x93\x94\x92\x94a\r\x86``\x84\x01\x96_\x85\x01\x90a\x05\xD2V[` \x83\x01\x90a\x05\xD2V[`@\x81\x85\x03\x91\x01Ra\rGV[\x90V[a\r\xA8a\x01\x12V[=_\x82>=\x90\xFD[\x92a\r\xF3` \x93\x94a\r\xC0a\x0C\xDBV[Pa\r\xFEa\r\xD6a\r\xD1`\x01a\x0C\xF3V[a\x04VV[\x93cz9y\xDC\x92\x95\x97a\r\xE7a\x01\x12V[\x98\x89\x97\x88\x96\x87\x96a\r\0V[\x86R`\x04\x86\x01a\rjV[\x03\x91Z\xFA\x90\x81\x15a\x0EBW_\x91a\x0E\x14W[P\x90V[a\x0E5\x91P` =\x81\x11a\x0E;W[a\x0E-\x81\x83a\tXV[\x81\x01\x90a\r)V[_a\x0E\x10V[P=a\x0E#V[a\r\xA0V[\x90a\x0Eca\x0E]32\x90\x85\x85\x91\x92\x90\x91\x92a\r\xB0V[\x15a\x05>V[a\x0ErWa\x0Ep\x91a\x0E\x8EV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E\x8A`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[a\x0E\xA0\x91a\x0E\x9B\x91a\t\x81V[a\x13\xD9V[V[\x90a\x0E\xAC\x91a\x0EGV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\xC9a\x0E\xCE\x91a\x08lV[a\x0E\xB2V[\x90V[a\x0E\xDB\x90Ta\x0E\xBDV[\x90V[a\x0E\xE6a\x0E\xAEV[Pa\x0E\xF0_a\x0E\xD1V[\x90V[P\x90V[a\x0F\x0Ba\x0F\x06a\x0F\x10\x92a\x08\xB8V[a\x04+V[a\x07\xD7V[\x90V[`\x01a\x0F\x1F\x91\x01a\x07\xD7V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0F\x84W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F\x7FW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0FzWV[a\x0F>V[a\x0F:V[a\x0F6V[\x90\x82\x10\x15a\x0F\xA4W` a\x0F\xA0\x92\x02\x81\x01\x90a\x0FBV[\x90\x91V[a\x0F\"V[a\x0F\xB4\x81\x83\x90a\x0E\xF3V[\x91a\x0F\xBE_a\x0E\xF7V[[\x80a\x0F\xD2a\x0F\xCC\x86a\x07\xD7V[\x91a\x07\xD7V[\x10\x15a\x10'Wa\x10\0\x90a\x0F\xF632\x90a\x0F\xEE\x87\x87\x86\x91a\x0F\x89V[\x92\x90\x91a\r\xB0V[a\x10\x05W[a\x0F\x13V[a\x0F\xBFV[a\x10\"a\x10\x1Da\x10\x17\x86\x86\x85\x91a\x0F\x89V[\x90a\t\x81V[a\x13\xD9V[a\x0F\xFBV[PPPPV[a\x10>\x90a\x109a\x15\x89V[a\x10LV[V[a\x10I\x90a\x04JV[\x90V[\x80a\x10ga\x10aa\x10\\_a\x0BWV[a\x03WV[\x91a\x03WV[\x14a\x10\xC1Wa\x10\x7Fa\x10x\x82a\x0B\xBDV[`\x01a\x0B\xF3V[a\x10\xA9\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x10@V[\x90a\x10\xB2a\x01\x12V[\x80a\x10\xBC\x81a\x03\x13V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\xD9`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[a\x10\xE6\x90a\x10-V[V[a\x10\xF9\x90a\x10\xF4a\x15\x89V[a\x10\xFBV[V[\x80a\x11\x16a\x11\x10a\x11\x0B_a\x0BWV[a\x03WV[\x91a\x03WV[\x14a\x11&Wa\x11$\x90a\x15\xFAV[V[a\x11Ia\x112_a\x0BWV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xDFV[\x03\x90\xFD[a\x11V\x90a\x10\xE8V[V[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x11\x85\x90a\x04.V[\x90V[a\x11\x91\x90a\x11|V[\x90V[a\x11\x9E`da\x11\x88V[\x90V[a\x11\xAA\x90a\x04JV[\x90V[a\x11\xB6\x81a\x07\xD7V[\x03a\x11\xBDWV[_\x80\xFD[\x90PQ\x90a\x11\xCE\x82a\x11\xADV[V[\x90` \x82\x82\x03\x12a\x11\xE9Wa\x11\xE6\x91_\x01a\x11\xC1V[\x90V[a\x01\x1CV[` \x01\x90V[\x90V[a\x12\x03a\x12\x08\x91a\x01/V[a\x11\xF4V[\x90RV[``\x1B\x90V[a\x12\x1B\x90a\x12\x0CV[\x90V[a\x12'\x90a\x12\x12V[\x90V[a\x126a\x12;\x91a\x03WV[a\x12\x1EV[\x90RV[\x90V[a\x12Na\x12S\x91a\x07\xD7V[a\x12?V[\x90RV[`\xC0\x1B\x90V[a\x12f\x90a\x12WV[\x90V[a\x12ua\x12z\x91a\x02\xAFV[a\x12]V[\x90RV[a\x12\xCE\x94a\x12\xBE` `\x08\x96a\x12\xB6`\x14\x83\x9C\x9B\x98a\x12\xAE\x85\x89a\x12\xA6\x82\x9Ba\x12\xC6\x9Da\x11\xF7V[\x01\x80\x92a\x12*V[\x01\x80\x92a\x12BV[\x01\x80\x92a\x12BV[\x01\x80\x92a\x12iV[\x01\x80\x92a\x11\xF7V[\x01\x90V[\x90a\x12\xDE_\x19\x91a\x06,V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xF1\x90a\x01/V[\x90V[a\x12\xFD\x90a\x08lV[\x90V[\x90a\x13\x15a\x13\x10a\x13\x1C\x92a\x12\xE8V[a\x12\xF4V[\x82Ta\x12\xD2V[\x90UV[\x90V[a\x137a\x132a\x13<\x92a\x13 V[a\x04+V[a\x02\xAFV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13_a\x13e\x91a\x02\xAFV[\x91a\x02\xAFV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x13xWV[a\x13?V[\x90a\x13\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x06,V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\xAEa\x13\xA9a\x13\xB3\x92a\x02\xAFV[a\x04+V[a\x02\xAFV[\x90V[\x90V[\x90a\x13\xCEa\x13\xC9a\x13\xD5\x92a\x13\x9AV[a\x13\xB6V[\x82Ta\x13}V[\x90UV[a\x14\xAAa\x13\xE4a\x11XV[a\x14\x85Ca\x13\xF8a\x13\xF3a\x11\x94V[a\x11\xA1V[;a\x14\x0Ba\x14\x05_a\x0E\xF7V[\x91a\x07\xD7V[\x11a\x14\xEFW[a\x14ja\x14\x1F_\x85\x01a\x08\x88V[a\x14[3\x93Ba\x141`\x01\x89\x01a\t\xE7V[\x90\x8Aa\x14Ea\x14?\x82a\x02\x0EV[\x91a\x11\xEEV[ \x92a\x14Oa\x01\x12V[\x97\x88\x96` \x88\x01a\x12~V[` \x82\x01\x81\x03\x82R\x03\x82a\tXV[a\x14|a\x14v\x82a\x02\x0EV[\x91a\x11\xEEV[ _\x83\x01a\x13\0V[a\x14\xA4`\x01a\x14\x93\x81a\x13#V[\x92\x01\x91a\x14\x9F\x83a\t\xE7V[a\x13SV[\x90a\x13\xB9V[3a\x14\xEAa\x14\xD8\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x10@V[\x92a\x14\xE1a\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xA2V[a\x15\x1A` a\x15\x04a\x14\xFFa\x11\x94V[a\x11\xA1V[c\xA3\xB1\xB3\x1D\x90a\x15\x12a\x01\x12V[\x93\x84\x92a\r\0V[\x82R\x81\x80a\x15*`\x04\x82\x01a\x03\x13V[\x03\x91Z\xFA\x80\x91_\x92a\x15YW[P\x15_\x14a\x15RWP`\x01a\x15MW[[a\x14\x11V[a\x15GV[\x90Pa\x15HV[a\x15{\x91\x92P` =\x81\x11a\x15\x82W[a\x15s\x81\x83a\tXV[\x81\x01\x90a\x11\xD0V[\x90_a\x157V[P=a\x15iV[a\x15\x91a\x0E\xDEV[a\x15\xAAa\x15\xA4a\x15\x9Fa\x16YV[a\x03WV[\x91a\x03WV[\x03a\x15\xB1WV[a\x15\xD3a\x15\xBCa\x16YV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xDFV[\x03\x90\xFD[\x90V[\x90a\x15\xEFa\x15\xEAa\x15\xF6\x92a\x10@V[a\x15\xD7V[\x82Ta\x0B\xC9V[\x90UV[a\x16\x03_a\x0E\xD1V[a\x16\r\x82_a\x15\xDAV[\x90a\x16Aa\x16;\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x10@V[\x91a\x10@V[\x91a\x16Ja\x01\x12V[\x80a\x16T\x81a\x03\x13V[\x03\x90\xA3V[a\x16aa\x0E\xAEV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610864565b61001d5f3561010c565b80633270486414610107578063366cbab7146101025780633c540687146100fd57806346e2cc09146100f8578063485cc955146100f35780635b3cd6e2146100ee578063715018a6146100e95780637a3979dc146100e4578063804e5123146100df5780638da5cb5b146100da5780639d91597b146100d5578063cdafb978146100d0578063d4f0eb4d146100cb578063d8781342146100c65763f2fde38b0361000e57610831565b6107fc565b610780565b61072e565b610684565b6105f4565b61059e565b610565565b6104b9565b610484565b6103b3565b610318565b6102de565b610279565b610154565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012a57565b61011c565b90565b61013b9061012f565b9052565b9190610152905f60208501940190610132565b565b3461018457610164366004610120565b61018061016f610895565b610177610112565b9182918261013f565b0390f35b610118565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b90602082820312610209575f82013567ffffffffffffffff8111610204576102009201610199565b9091565b610189565b61011c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61024f61025860209361025d936102468161020e565b93848093610212565b9586910161021b565b610226565b0190565b6102769160208201915f818403910152610230565b90565b346102aa576102a661029561028f3660046101d8565b90610981565b61029d610112565b91829182610261565b0390f35b610118565b67ffffffffffffffff1690565b6102c5906102af565b9052565b91906102dc905f602085019401906102bc565b565b3461030e576102ee366004610120565b61030a6102f96109f4565b610301610112565b918291826102c9565b0390f35b610118565b5f0190565b346103475761033161032b3660046101d8565b90610aee565b610339610112565b8061034381610313565b0390f35b610118565b60018060a01b031690565b6103609061034c565b90565b61036c81610357565b0361037357565b5f80fd5b9050359061038482610363565b565b91906040838203126103ae57806103a26103ab925f8601610377565b93602001610377565b90565b61011c565b346103e2576103cc6103c6366004610386565b90610ca0565b6103d4610112565b806103de81610313565b0390f35b610118565b1c90565b60018060a01b031690565b61040690600861040b93026103e7565b6103eb565b90565b9061041991546103f6565b90565b61042860015f9061040e565b90565b90565b61044261043d6104479261034c565b61042b565b61034c565b90565b6104539061042e565b90565b61045f9061044a565b90565b61046b90610456565b9052565b9190610482905f60208501940190610462565b565b346104b457610494366004610120565b6104b061049f61041c565b6104a7610112565b9182918261046f565b0390f35b610118565b346104e7576104c9366004610120565b6104d1610cd1565b6104d9610112565b806104e381610313565b0390f35b610118565b9160608383031261053957610503825f8501610377565b926105118360208301610377565b92604082013567ffffffffffffffff8111610534576105309201610199565b9091565b610189565b61011c565b151590565b61054c9061053e565b9052565b9190610563905f60208501940190610543565b565b346105995761059561058461057b3660046104ec565b92919091610db0565b61058c610112565b91829182610550565b0390f35b610118565b346105cd576105b76105b13660046101d8565b90610ea2565b6105bf610112565b806105c981610313565b0390f35b610118565b6105db90610357565b9052565b91906105f2905f602085019401906105d2565b565b3461062457610604366004610120565b61062061060f610ede565b610617610112565b918291826105df565b0390f35b610118565b90565b5f1b90565b61064561064061064a92610629565b61062c565b61012f565b90565b6106767fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a969610631565b90565b61068161064d565b90565b346106b457610694366004610120565b6106b061069f610679565b6106a7610112565b9182918261013f565b0390f35b610118565b909182601f830112156106f35781359167ffffffffffffffff83116106ee5760200192602083028401116106e957565b610195565b610191565b61018d565b90602082820312610729575f82013567ffffffffffffffff81116107245761072092016106b9565b9091565b610189565b61011c565b3461075d576107476107413660046106f8565b90610fa9565b61074f610112565b8061075981610313565b0390f35b610118565b9060208282031261077b57610778915f01610377565b90565b61011c565b346107ae57610798610793366004610762565b6110dd565b6107a0610112565b806107aa81610313565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b6107e3906107d7565b9052565b91906107fa905f602085019401906107da565b565b3461082c5761080c366004610120565b6108286108176107b3565b61081f610112565b918291826107e7565b0390f35b610118565b3461085f57610849610844366004610762565b61114d565b610851610112565b8061085b81610313565b0390f35b610118565b5f80fd5b5f90565b5f1c90565b90565b6108806108859161086c565b610871565b90565b6108929054610874565b90565b61089d610868565b506108b05f6108aa611158565b01610888565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b6108de6108d96108e3926108b8565b6108c4565b6108bb565b90565b90565b6108f56108fa916108bb565b6108e6565b9052565b905090565b90825f939282370152565b90918261091e81610925936108fe565b8093610903565b0190565b8061093a60019261094196946108e9565b019161090e565b90565b634e487b7160e01b5f52604160045260245ffd5b9061096290610226565b810190811067ffffffffffffffff82111761097c57604052565b610944565b6109bf9061098d6108b3565b506109b061099a5f6108ca565b91936109a4610112565b94859360208501610929565b60208201810382520382610958565b90565b5f90565b67ffffffffffffffff1690565b6109df6109e49161086c565b6109c6565b90565b6109f190546109d3565b90565b6109fc6109c2565b50610a106001610a0a611158565b016109e7565b90565b90610a2f610a2933329085859192909192610db0565b1561053e565b610a3e57610a3c91610ada565b565b5f631b8e828b60e31b815280610a5660048201610313565b0390fd5b5f80fd5b90610a71610a6a610112565b9283610958565b565b67ffffffffffffffff8111610a9157610a8d602091610226565b0190565b610944565b90929192610aab610aa682610a73565b610a5e565b93818552602085019082840111610ac757610ac592610903565b565b610a5a565b610ad7913691610a96565b90565b610aec91610ae791610acc565b6113d9565b565b90610af891610a13565b565b90610b0c91610b07611589565b610c13565b565b60a01c90565b60ff1690565b610b26610b2b91610b0e565b610b14565b90565b610b389054610b1a565b90565b610b4f610b4a610b54926108b8565b61042b565b61034c565b90565b610b6090610b3b565b90565b60a01b90565b90610b7860ff60a01b91610b63565b9181191691161790565b610b8b9061053e565b90565b90565b90610ba6610ba1610bad92610b82565b610b8e565b8254610b69565b9055565b610bba9061042e565b90565b610bc690610bb1565b90565b90610bda60018060a01b039161062c565b9181191691161790565b610bed90610bb1565b90565b90565b90610c08610c03610c0f92610be4565b610bf0565b8254610bc9565b9055565b610c1d6001610b2e565b610c855781610c3c610c36610c315f610b57565b610357565b91610357565b14610c6957610c62610c5b610c6793610c56600180610b91565b610bbd565b6001610bf3565b61114d565b565b5f632e7f3c7f60e11b815280610c8160048201610313565b0390fd5b5f62dc149f60e41b815280610c9c60048201610313565b0390fd5b90610caa91610afa565b565b610cb4611589565b610cbc610cbe565b565b610ccf610cca5f610b57565b6115fa565b565b610cd9610cac565b565b5f90565b610ceb610cf09161086c565b6103eb565b90565b610cfd9054610cdf565b90565b60e01b90565b610d0f8161053e565b03610d1657565b5f80fd5b90505190610d2782610d06565b565b90602082820312610d4257610d3f915f01610d1a565b90565b61011c565b9190610d6181610d5a81610d6695610212565b8095610903565b610226565b0190565b610d90610d9d9593949294610d8660608401965f8501906105d2565b60208301906105d2565b6040818503910152610d47565b90565b610da8610112565b3d5f823e3d90fd5b92610df360209394610dc0610cdb565b50610dfe610dd6610dd16001610cf3565b610456565b93637a3979dc929597610de7610112565b98899788968796610d00565b865260048601610d6a565b03915afa908115610e42575f91610e14575b5090565b610e35915060203d8111610e3b575b610e2d8183610958565b810190610d29565b5f610e10565b503d610e23565b610da0565b90610e63610e5d33329085859192909192610db0565b1561053e565b610e7257610e7091610e8e565b565b5f631b8e828b60e31b815280610e8a60048201610313565b0390fd5b610ea091610e9b91610981565b6113d9565b565b90610eac91610e47565b565b5f90565b60018060a01b031690565b610ec9610ece9161086c565b610eb2565b90565b610edb9054610ebd565b90565b610ee6610eae565b50610ef05f610ed1565b90565b5090565b610f0b610f06610f10926108b8565b61042b565b6107d7565b90565b6001610f1f91016107d7565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610f84570180359067ffffffffffffffff8211610f7f57602001916001820236038313610f7a57565b610f3e565b610f3a565b610f36565b90821015610fa4576020610fa09202810190610f42565b9091565b610f22565b610fb4818390610ef3565b91610fbe5f610ef7565b5b80610fd2610fcc866107d7565b916107d7565b10156110275761100090610ff6333290610fee87878691610f89565b929091610db0565b611005575b610f13565b610fbf565b61102261101d61101786868591610f89565b90610981565b6113d9565b610ffb565b50505050565b61103e90611039611589565b61104c565b565b6110499061044a565b90565b8061106761106161105c5f610b57565b610357565b91610357565b146110c15761107f61107882610bbd565b6001610bf3565b6110a97f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991611040565b906110b2610112565b806110bc81610313565b0390a2565b5f632e7f3c7f60e11b8152806110d960048201610313565b0390fd5b6110e69061102d565b565b6110f9906110f4611589565b6110fb565b565b8061111661111061110b5f610b57565b610357565b91610357565b1461112657611124906115fa565b565b6111496111325f610b57565b5f918291631e4fbdf760e01b8352600483016105df565b0390fd5b611156906110e8565b565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b6111859061042e565b90565b6111919061117c565b90565b61119e6064611188565b90565b6111aa9061044a565b90565b6111b6816107d7565b036111bd57565b5f80fd5b905051906111ce826111ad565b565b906020828203126111e9576111e6915f016111c1565b90565b61011c565b60200190565b90565b6112036112089161012f565b6111f4565b9052565b60601b90565b61121b9061120c565b90565b61122790611212565b90565b61123661123b91610357565b61121e565b9052565b90565b61124e611253916107d7565b61123f565b9052565b60c01b90565b61126690611257565b90565b61127561127a916102af565b61125d565b9052565b6112ce946112be60206008966112b66014839c9b986112ae85896112a6829b6112c69d6111f7565b01809261122a565b018092611242565b018092611242565b018092611269565b0180926111f7565b0190565b906112de5f199161062c565b9181191691161790565b6112f19061012f565b90565b6112fd9061086c565b90565b9061131561131061131c926112e8565b6112f4565b82546112d2565b9055565b90565b61133761133261133c92611320565b61042b565b6102af565b90565b634e487b7160e01b5f52601160045260245ffd5b61135f611365916102af565b916102af565b019067ffffffffffffffff821161137857565b61133f565b9061139067ffffffffffffffff9161062c565b9181191691161790565b6113ae6113a96113b3926102af565b61042b565b6102af565b90565b90565b906113ce6113c96113d59261139a565b6113b6565b825461137d565b9055565b6114aa6113e4611158565b611485436113f86113f3611194565b6111a1565b3b61140b6114055f610ef7565b916107d7565b116114ef575b61146a61141f5f8501610888565b61145b339342611431600189016109e7565b908a61144561143f8261020e565b916111ee565b209261144f610112565b9788966020880161127e565b60208201810382520382610958565b61147c6114768261020e565b916111ee565b205f8301611300565b6114a4600161149381611323565b92019161149f836109e7565b611353565b906113b9565b336114ea6114d87f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92611040565b926114e1610112565b91829182610261565b0390a2565b61151a60206115046114ff611194565b6111a1565b63a3b1b31d90611512610112565b938492610d00565b8252818061152a60048201610313565b03915afa80915f92611559575b50155f146115525750600161154d575b5b611411565b611547565b9050611548565b61157b91925060203d8111611582575b6115738183610958565b8101906111d0565b905f611537565b503d611569565b611591610ede565b6115aa6115a461159f611659565b610357565b91610357565b036115b157565b6115d36115bc611659565b5f91829163118cdaa760e01b8352600483016105df565b0390fd5b90565b906115ef6115ea6115f692611040565b6115d7565b8254610bc9565b9055565b6116035f610ed1565b61160d825f6115da565b9061164161163b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611040565b91611040565b9161164a610112565b8061165481610313565b0390a3565b611661610eae565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08dV[a\0\x1D_5a\x01\x0CV[\x80c2pHd\x14a\x01\x07W\x80c6l\xBA\xB7\x14a\x01\x02W\x80c<T\x06\x87\x14a\0\xFDW\x80cF\xE2\xCC\t\x14a\0\xF8W\x80cH\\\xC9U\x14a\0\xF3W\x80c[<\xD6\xE2\x14a\0\xEEW\x80cqP\x18\xA6\x14a\0\xE9W\x80cz9y\xDC\x14a\0\xE4W\x80c\x80NQ#\x14a\0\xDFW\x80c\x8D\xA5\xCB[\x14a\0\xDAW\x80c\x9D\x91Y{\x14a\0\xD5W\x80c\xCD\xAF\xB9x\x14a\0\xD0W\x80c\xD4\xF0\xEBM\x14a\0\xCBW\x80c\xD8x\x13B\x14a\0\xC6Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x081V[a\x07\xFCV[a\x07\x80V[a\x07.V[a\x06\x84V[a\x05\xF4V[a\x05\x9EV[a\x05eV[a\x04\xB9V[a\x04\x84V[a\x03\xB3V[a\x03\x18V[a\x02\xDEV[a\x02yV[a\x01TV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01*WV[a\x01\x1CV[\x90V[a\x01;\x90a\x01/V[\x90RV[\x91\x90a\x01R\x90_` \x85\x01\x94\x01\x90a\x012V[V[4a\x01\x84Wa\x01d6`\x04a\x01 V[a\x01\x80a\x01oa\x08\x95V[a\x01wa\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x02\tW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x04Wa\x02\0\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02Oa\x02X` \x93a\x02]\x93a\x02F\x81a\x02\x0EV[\x93\x84\x80\x93a\x02\x12V[\x95\x86\x91\x01a\x02\x1BV[a\x02&V[\x01\x90V[a\x02v\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x020V[\x90V[4a\x02\xAAWa\x02\xA6a\x02\x95a\x02\x8F6`\x04a\x01\xD8V[\x90a\t\x81V[a\x02\x9Da\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\x01\x18V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x02\xC5\x90a\x02\xAFV[\x90RV[\x91\x90a\x02\xDC\x90_` \x85\x01\x94\x01\x90a\x02\xBCV[V[4a\x03\x0EWa\x02\xEE6`\x04a\x01 V[a\x03\na\x02\xF9a\t\xF4V[a\x03\x01a\x01\x12V[\x91\x82\x91\x82a\x02\xC9V[\x03\x90\xF3[a\x01\x18V[_\x01\x90V[4a\x03GWa\x031a\x03+6`\x04a\x01\xD8V[\x90a\n\xEEV[a\x039a\x01\x12V[\x80a\x03C\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03`\x90a\x03LV[\x90V[a\x03l\x81a\x03WV[\x03a\x03sWV[_\x80\xFD[\x90P5\x90a\x03\x84\x82a\x03cV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xAEW\x80a\x03\xA2a\x03\xAB\x92_\x86\x01a\x03wV[\x93` \x01a\x03wV[\x90V[a\x01\x1CV[4a\x03\xE2Wa\x03\xCCa\x03\xC66`\x04a\x03\x86V[\x90a\x0C\xA0V[a\x03\xD4a\x01\x12V[\x80a\x03\xDE\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x06\x90`\x08a\x04\x0B\x93\x02a\x03\xE7V[a\x03\xEBV[\x90V[\x90a\x04\x19\x91Ta\x03\xF6V[\x90V[a\x04(`\x01_\x90a\x04\x0EV[\x90V[\x90V[a\x04Ba\x04=a\x04G\x92a\x03LV[a\x04+V[a\x03LV[\x90V[a\x04S\x90a\x04.V[\x90V[a\x04_\x90a\x04JV[\x90V[a\x04k\x90a\x04VV[\x90RV[\x91\x90a\x04\x82\x90_` \x85\x01\x94\x01\x90a\x04bV[V[4a\x04\xB4Wa\x04\x946`\x04a\x01 V[a\x04\xB0a\x04\x9Fa\x04\x1CV[a\x04\xA7a\x01\x12V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x01\x18V[4a\x04\xE7Wa\x04\xC96`\x04a\x01 V[a\x04\xD1a\x0C\xD1V[a\x04\xD9a\x01\x12V[\x80a\x04\xE3\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x91``\x83\x83\x03\x12a\x059Wa\x05\x03\x82_\x85\x01a\x03wV[\x92a\x05\x11\x83` \x83\x01a\x03wV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x054Wa\x050\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[\x15\x15\x90V[a\x05L\x90a\x05>V[\x90RV[\x91\x90a\x05c\x90_` \x85\x01\x94\x01\x90a\x05CV[V[4a\x05\x99Wa\x05\x95a\x05\x84a\x05{6`\x04a\x04\xECV[\x92\x91\x90\x91a\r\xB0V[a\x05\x8Ca\x01\x12V[\x91\x82\x91\x82a\x05PV[\x03\x90\xF3[a\x01\x18V[4a\x05\xCDWa\x05\xB7a\x05\xB16`\x04a\x01\xD8V[\x90a\x0E\xA2V[a\x05\xBFa\x01\x12V[\x80a\x05\xC9\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[a\x05\xDB\x90a\x03WV[\x90RV[\x91\x90a\x05\xF2\x90_` \x85\x01\x94\x01\x90a\x05\xD2V[V[4a\x06$Wa\x06\x046`\x04a\x01 V[a\x06 a\x06\x0Fa\x0E\xDEV[a\x06\x17a\x01\x12V[\x91\x82\x91\x82a\x05\xDFV[\x03\x90\xF3[a\x01\x18V[\x90V[_\x1B\x90V[a\x06Ea\x06@a\x06J\x92a\x06)V[a\x06,V[a\x01/V[\x90V[a\x06v\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\x061V[\x90V[a\x06\x81a\x06MV[\x90V[4a\x06\xB4Wa\x06\x946`\x04a\x01 V[a\x06\xB0a\x06\x9Fa\x06yV[a\x06\xA7a\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\xF3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\xEEW` \x01\x92` \x83\x02\x84\x01\x11a\x06\xE9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x07)W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07$Wa\x07 \x92\x01a\x06\xB9V[\x90\x91V[a\x01\x89V[a\x01\x1CV[4a\x07]Wa\x07Ga\x07A6`\x04a\x06\xF8V[\x90a\x0F\xA9V[a\x07Oa\x01\x12V[\x80a\x07Y\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x90` \x82\x82\x03\x12a\x07{Wa\x07x\x91_\x01a\x03wV[\x90V[a\x01\x1CV[4a\x07\xAEWa\x07\x98a\x07\x936`\x04a\x07bV[a\x10\xDDV[a\x07\xA0a\x01\x12V[\x80a\x07\xAA\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07\xE3\x90a\x07\xD7V[\x90RV[\x91\x90a\x07\xFA\x90_` \x85\x01\x94\x01\x90a\x07\xDAV[V[4a\x08,Wa\x08\x0C6`\x04a\x01 V[a\x08(a\x08\x17a\x07\xB3V[a\x08\x1Fa\x01\x12V[\x91\x82\x91\x82a\x07\xE7V[\x03\x90\xF3[a\x01\x18V[4a\x08_Wa\x08Ia\x08D6`\x04a\x07bV[a\x11MV[a\x08Qa\x01\x12V[\x80a\x08[\x81a\x03\x13V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08\x80a\x08\x85\x91a\x08lV[a\x08qV[\x90V[a\x08\x92\x90Ta\x08tV[\x90V[a\x08\x9Da\x08hV[Pa\x08\xB0_a\x08\xAAa\x11XV[\x01a\x08\x88V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08\xDEa\x08\xD9a\x08\xE3\x92a\x08\xB8V[a\x08\xC4V[a\x08\xBBV[\x90V[\x90V[a\x08\xF5a\x08\xFA\x91a\x08\xBBV[a\x08\xE6V[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\t\x1E\x81a\t%\x93a\x08\xFEV[\x80\x93a\t\x03V[\x01\x90V[\x80a\t:`\x01\x92a\tA\x96\x94a\x08\xE9V[\x01\x91a\t\x0EV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\tb\x90a\x02&V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t|W`@RV[a\tDV[a\t\xBF\x90a\t\x8Da\x08\xB3V[Pa\t\xB0a\t\x9A_a\x08\xCAV[\x91\x93a\t\xA4a\x01\x12V[\x94\x85\x93` \x85\x01a\t)V[` \x82\x01\x81\x03\x82R\x03\x82a\tXV[\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\t\xDFa\t\xE4\x91a\x08lV[a\t\xC6V[\x90V[a\t\xF1\x90Ta\t\xD3V[\x90V[a\t\xFCa\t\xC2V[Pa\n\x10`\x01a\n\na\x11XV[\x01a\t\xE7V[\x90V[\x90a\n/a\n)32\x90\x85\x85\x91\x92\x90\x91\x92a\r\xB0V[\x15a\x05>V[a\n>Wa\n<\x91a\n\xDAV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\nV`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[_\x80\xFD[\x90a\nqa\nja\x01\x12V[\x92\x83a\tXV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x91Wa\n\x8D` \x91a\x02&V[\x01\x90V[a\tDV[\x90\x92\x91\x92a\n\xABa\n\xA6\x82a\nsV[a\n^V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\xC7Wa\n\xC5\x92a\t\x03V[V[a\nZV[a\n\xD7\x916\x91a\n\x96V[\x90V[a\n\xEC\x91a\n\xE7\x91a\n\xCCV[a\x13\xD9V[V[\x90a\n\xF8\x91a\n\x13V[V[\x90a\x0B\x0C\x91a\x0B\x07a\x15\x89V[a\x0C\x13V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0B&a\x0B+\x91a\x0B\x0EV[a\x0B\x14V[\x90V[a\x0B8\x90Ta\x0B\x1AV[\x90V[a\x0BOa\x0BJa\x0BT\x92a\x08\xB8V[a\x04+V[a\x03LV[\x90V[a\x0B`\x90a\x0B;V[\x90V[`\xA0\x1B\x90V[\x90a\x0Bx`\xFF`\xA0\x1B\x91a\x0BcV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x8B\x90a\x05>V[\x90V[\x90V[\x90a\x0B\xA6a\x0B\xA1a\x0B\xAD\x92a\x0B\x82V[a\x0B\x8EV[\x82Ta\x0BiV[\x90UV[a\x0B\xBA\x90a\x04.V[\x90V[a\x0B\xC6\x90a\x0B\xB1V[\x90V[\x90a\x0B\xDA`\x01\x80`\xA0\x1B\x03\x91a\x06,V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xED\x90a\x0B\xB1V[\x90V[\x90V[\x90a\x0C\x08a\x0C\x03a\x0C\x0F\x92a\x0B\xE4V[a\x0B\xF0V[\x82Ta\x0B\xC9V[\x90UV[a\x0C\x1D`\x01a\x0B.V[a\x0C\x85W\x81a\x0C<a\x0C6a\x0C1_a\x0BWV[a\x03WV[\x91a\x03WV[\x14a\x0CiWa\x0Cba\x0C[a\x0Cg\x93a\x0CV`\x01\x80a\x0B\x91V[a\x0B\xBDV[`\x01a\x0B\xF3V[a\x11MV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C\x81`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C\x9C`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[\x90a\x0C\xAA\x91a\n\xFAV[V[a\x0C\xB4a\x15\x89V[a\x0C\xBCa\x0C\xBEV[V[a\x0C\xCFa\x0C\xCA_a\x0BWV[a\x15\xFAV[V[a\x0C\xD9a\x0C\xACV[V[_\x90V[a\x0C\xEBa\x0C\xF0\x91a\x08lV[a\x03\xEBV[\x90V[a\x0C\xFD\x90Ta\x0C\xDFV[\x90V[`\xE0\x1B\x90V[a\r\x0F\x81a\x05>V[\x03a\r\x16WV[_\x80\xFD[\x90PQ\x90a\r'\x82a\r\x06V[V[\x90` \x82\x82\x03\x12a\rBWa\r?\x91_\x01a\r\x1AV[\x90V[a\x01\x1CV[\x91\x90a\ra\x81a\rZ\x81a\rf\x95a\x02\x12V[\x80\x95a\t\x03V[a\x02&V[\x01\x90V[a\r\x90a\r\x9D\x95\x93\x94\x92\x94a\r\x86``\x84\x01\x96_\x85\x01\x90a\x05\xD2V[` \x83\x01\x90a\x05\xD2V[`@\x81\x85\x03\x91\x01Ra\rGV[\x90V[a\r\xA8a\x01\x12V[=_\x82>=\x90\xFD[\x92a\r\xF3` \x93\x94a\r\xC0a\x0C\xDBV[Pa\r\xFEa\r\xD6a\r\xD1`\x01a\x0C\xF3V[a\x04VV[\x93cz9y\xDC\x92\x95\x97a\r\xE7a\x01\x12V[\x98\x89\x97\x88\x96\x87\x96a\r\0V[\x86R`\x04\x86\x01a\rjV[\x03\x91Z\xFA\x90\x81\x15a\x0EBW_\x91a\x0E\x14W[P\x90V[a\x0E5\x91P` =\x81\x11a\x0E;W[a\x0E-\x81\x83a\tXV[\x81\x01\x90a\r)V[_a\x0E\x10V[P=a\x0E#V[a\r\xA0V[\x90a\x0Eca\x0E]32\x90\x85\x85\x91\x92\x90\x91\x92a\r\xB0V[\x15a\x05>V[a\x0ErWa\x0Ep\x91a\x0E\x8EV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E\x8A`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[a\x0E\xA0\x91a\x0E\x9B\x91a\t\x81V[a\x13\xD9V[V[\x90a\x0E\xAC\x91a\x0EGV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\xC9a\x0E\xCE\x91a\x08lV[a\x0E\xB2V[\x90V[a\x0E\xDB\x90Ta\x0E\xBDV[\x90V[a\x0E\xE6a\x0E\xAEV[Pa\x0E\xF0_a\x0E\xD1V[\x90V[P\x90V[a\x0F\x0Ba\x0F\x06a\x0F\x10\x92a\x08\xB8V[a\x04+V[a\x07\xD7V[\x90V[`\x01a\x0F\x1F\x91\x01a\x07\xD7V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0F\x84W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F\x7FW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0FzWV[a\x0F>V[a\x0F:V[a\x0F6V[\x90\x82\x10\x15a\x0F\xA4W` a\x0F\xA0\x92\x02\x81\x01\x90a\x0FBV[\x90\x91V[a\x0F\"V[a\x0F\xB4\x81\x83\x90a\x0E\xF3V[\x91a\x0F\xBE_a\x0E\xF7V[[\x80a\x0F\xD2a\x0F\xCC\x86a\x07\xD7V[\x91a\x07\xD7V[\x10\x15a\x10'Wa\x10\0\x90a\x0F\xF632\x90a\x0F\xEE\x87\x87\x86\x91a\x0F\x89V[\x92\x90\x91a\r\xB0V[a\x10\x05W[a\x0F\x13V[a\x0F\xBFV[a\x10\"a\x10\x1Da\x10\x17\x86\x86\x85\x91a\x0F\x89V[\x90a\t\x81V[a\x13\xD9V[a\x0F\xFBV[PPPPV[a\x10>\x90a\x109a\x15\x89V[a\x10LV[V[a\x10I\x90a\x04JV[\x90V[\x80a\x10ga\x10aa\x10\\_a\x0BWV[a\x03WV[\x91a\x03WV[\x14a\x10\xC1Wa\x10\x7Fa\x10x\x82a\x0B\xBDV[`\x01a\x0B\xF3V[a\x10\xA9\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x10@V[\x90a\x10\xB2a\x01\x12V[\x80a\x10\xBC\x81a\x03\x13V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\xD9`\x04\x82\x01a\x03\x13V[\x03\x90\xFD[a\x10\xE6\x90a\x10-V[V[a\x10\xF9\x90a\x10\xF4a\x15\x89V[a\x10\xFBV[V[\x80a\x11\x16a\x11\x10a\x11\x0B_a\x0BWV[a\x03WV[\x91a\x03WV[\x14a\x11&Wa\x11$\x90a\x15\xFAV[V[a\x11Ia\x112_a\x0BWV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xDFV[\x03\x90\xFD[a\x11V\x90a\x10\xE8V[V[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x11\x85\x90a\x04.V[\x90V[a\x11\x91\x90a\x11|V[\x90V[a\x11\x9E`da\x11\x88V[\x90V[a\x11\xAA\x90a\x04JV[\x90V[a\x11\xB6\x81a\x07\xD7V[\x03a\x11\xBDWV[_\x80\xFD[\x90PQ\x90a\x11\xCE\x82a\x11\xADV[V[\x90` \x82\x82\x03\x12a\x11\xE9Wa\x11\xE6\x91_\x01a\x11\xC1V[\x90V[a\x01\x1CV[` \x01\x90V[\x90V[a\x12\x03a\x12\x08\x91a\x01/V[a\x11\xF4V[\x90RV[``\x1B\x90V[a\x12\x1B\x90a\x12\x0CV[\x90V[a\x12'\x90a\x12\x12V[\x90V[a\x126a\x12;\x91a\x03WV[a\x12\x1EV[\x90RV[\x90V[a\x12Na\x12S\x91a\x07\xD7V[a\x12?V[\x90RV[`\xC0\x1B\x90V[a\x12f\x90a\x12WV[\x90V[a\x12ua\x12z\x91a\x02\xAFV[a\x12]V[\x90RV[a\x12\xCE\x94a\x12\xBE` `\x08\x96a\x12\xB6`\x14\x83\x9C\x9B\x98a\x12\xAE\x85\x89a\x12\xA6\x82\x9Ba\x12\xC6\x9Da\x11\xF7V[\x01\x80\x92a\x12*V[\x01\x80\x92a\x12BV[\x01\x80\x92a\x12BV[\x01\x80\x92a\x12iV[\x01\x80\x92a\x11\xF7V[\x01\x90V[\x90a\x12\xDE_\x19\x91a\x06,V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xF1\x90a\x01/V[\x90V[a\x12\xFD\x90a\x08lV[\x90V[\x90a\x13\x15a\x13\x10a\x13\x1C\x92a\x12\xE8V[a\x12\xF4V[\x82Ta\x12\xD2V[\x90UV[\x90V[a\x137a\x132a\x13<\x92a\x13 V[a\x04+V[a\x02\xAFV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13_a\x13e\x91a\x02\xAFV[\x91a\x02\xAFV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x13xWV[a\x13?V[\x90a\x13\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x06,V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\xAEa\x13\xA9a\x13\xB3\x92a\x02\xAFV[a\x04+V[a\x02\xAFV[\x90V[\x90V[\x90a\x13\xCEa\x13\xC9a\x13\xD5\x92a\x13\x9AV[a\x13\xB6V[\x82Ta\x13}V[\x90UV[a\x14\xAAa\x13\xE4a\x11XV[a\x14\x85Ca\x13\xF8a\x13\xF3a\x11\x94V[a\x11\xA1V[;a\x14\x0Ba\x14\x05_a\x0E\xF7V[\x91a\x07\xD7V[\x11a\x14\xEFW[a\x14ja\x14\x1F_\x85\x01a\x08\x88V[a\x14[3\x93Ba\x141`\x01\x89\x01a\t\xE7V[\x90\x8Aa\x14Ea\x14?\x82a\x02\x0EV[\x91a\x11\xEEV[ \x92a\x14Oa\x01\x12V[\x97\x88\x96` \x88\x01a\x12~V[` \x82\x01\x81\x03\x82R\x03\x82a\tXV[a\x14|a\x14v\x82a\x02\x0EV[\x91a\x11\xEEV[ _\x83\x01a\x13\0V[a\x14\xA4`\x01a\x14\x93\x81a\x13#V[\x92\x01\x91a\x14\x9F\x83a\t\xE7V[a\x13SV[\x90a\x13\xB9V[3a\x14\xEAa\x14\xD8\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x10@V[\x92a\x14\xE1a\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xA2V[a\x15\x1A` a\x15\x04a\x14\xFFa\x11\x94V[a\x11\xA1V[c\xA3\xB1\xB3\x1D\x90a\x15\x12a\x01\x12V[\x93\x84\x92a\r\0V[\x82R\x81\x80a\x15*`\x04\x82\x01a\x03\x13V[\x03\x91Z\xFA\x80\x91_\x92a\x15YW[P\x15_\x14a\x15RWP`\x01a\x15MW[[a\x14\x11V[a\x15GV[\x90Pa\x15HV[a\x15{\x91\x92P` =\x81\x11a\x15\x82W[a\x15s\x81\x83a\tXV[\x81\x01\x90a\x11\xD0V[\x90_a\x157V[P=a\x15iV[a\x15\x91a\x0E\xDEV[a\x15\xAAa\x15\xA4a\x15\x9Fa\x16YV[a\x03WV[\x91a\x03WV[\x03a\x15\xB1WV[a\x15\xD3a\x15\xBCa\x16YV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xDFV[\x03\x90\xFD[\x90V[\x90a\x15\xEFa\x15\xEAa\x15\xF6\x92a\x10@V[a\x15\xD7V[\x82Ta\x0B\xC9V[\x90UV[a\x16\x03_a\x0E\xD1V[a\x16\r\x82_a\x15\xDAV[\x90a\x16Aa\x16;\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x10@V[\x91a\x10@V[\x91a\x16Ja\x01\x12V[\x80a\x16T\x81a\x03\x13V[\x03\x90\xA3V[a\x16aa\x0E\xAEV[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `TX_DATA_STORAGE_LOCATION()` and selector `0x9d91597b`.
```solidity
function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`TX_DATA_STORAGE_LOCATION()`](TX_DATA_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TX_DATA_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TX_DATA_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TX_DATA_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [157u8, 145u8, 89u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulkCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulkCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulkReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txAcc()` and selector `0x32704864`.
```solidity
function txAcc() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccCall {}
    ///Container type for the return parameters of the [`txAcc()`](txAccCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccCall> for UnderlyingRustTuple<'_> {
                fn from(value: txAccCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txAccReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txAccCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txAccReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txAcc()";
            const SELECTOR: [u8; 4] = [50u8, 112u8, 72u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txCount()` and selector `0x3c540687`.
```solidity
function txCount() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountCall {}
    ///Container type for the return parameters of the [`txCount()`](txCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: txCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txCount()";
            const SELECTOR: [u8; 4] = [60u8, 84u8, 6u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChain`](self) function calls.
    pub enum SyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        TX_DATA_STORAGE_LOCATION(TX_DATA_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionUncompressed(processTransactionUncompressedCall),
        #[allow(missing_docs)]
        processTransactionsBulk(processTransactionsBulkCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        txAcc(txAccCall),
        #[allow(missing_docs)]
        txCount(txCountCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [50u8, 112u8, 72u8, 100u8],
            [54u8, 108u8, 186u8, 183u8],
            [60u8, 84u8, 6u8, 135u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [141u8, 165u8, 203u8, 91u8],
            [157u8, 145u8, 89u8, 123u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainCalls {
        const NAME: &'static str = "SyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 15usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::TX_DATA_STORAGE_LOCATION(_) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed(_) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk(_) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::txAcc(_) => <txAccCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::txCount(_) => <txCountCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls>] = &[
                {
                    fn txAcc(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <txAccCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::txAcc)
                    }
                    txAcc
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::prependZeroByte)
                    }
                    prependZeroByte
                },
                {
                    fn txCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <txCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::txCount)
                    }
                    txCount
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::processTransactionUncompressed,
                            )
                    }
                    processTransactionUncompressed
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::owner)
                    }
                    owner
                },
                {
                    fn TX_DATA_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::TX_DATA_STORAGE_LOCATION)
                    }
                    TX_DATA_STORAGE_LOCATION
                },
                {
                    fn processTransactionsBulk(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransactionsBulk)
                    }
                    processTransactionsBulk
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::appchainId)
                    }
                    appchainId
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) custom errors.
    pub enum SyndicateSequencingChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainErrors {
        const NAME: &'static str = "SyndicateSequencingChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) events.
    pub enum SyndicateSequencingChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateSequencingChainEvents {
        const NAME: &'static str = "SyndicateSequencingChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainInstance<T, P, N> {
        SyndicateSequencingChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>>,
    > {
        SyndicateSequencingChainInstance::<T, P, N>::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateSequencingChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateSequencingChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateSequencingChainInstance<T, P, N> {
            SyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`TX_DATA_STORAGE_LOCATION`] function.
        pub fn TX_DATA_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TX_DATA_STORAGE_LOCATIONCall, N> {
            self.call_builder(&TX_DATA_STORAGE_LOCATIONCall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed`] function.
        pub fn processTransactionUncompressed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressedCall,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressedCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk`] function.
        pub fn processTransactionsBulk(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulkCall, N> {
            self.call_builder(
                &processTransactionsBulkCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`txAcc`] function.
        pub fn txAcc(&self) -> alloy_contract::SolCallBuilder<T, &P, txAccCall, N> {
            self.call_builder(&txAccCall {})
        }
        ///Creates a new call builder for the [`txCount`] function.
        pub fn txCount(&self) -> alloy_contract::SolCallBuilder<T, &P, txCountCall, N> {
            self.call_builder(&txCountCall {})
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
