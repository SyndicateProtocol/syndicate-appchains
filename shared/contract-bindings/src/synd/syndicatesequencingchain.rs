/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChain {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrProposerNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _appChainId);

    function appChainId() external view returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "appChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrProposerNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b61105b6104c38239608051816104de015261105b90f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611713803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610169601860209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf6102d7565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60a01b90565b906101f660ff60a01b916101e1565b9181191691161790565b151590565b61020e90610200565b90565b90565b9061022961022461023092610205565b610211565b82546101e7565b9055565b5f0190565b61024161003d565b3d5f823e3d90fd5b60018060a01b031690565b61026861026361026d92610249565b61010d565b610249565b90565b61027990610254565b90565b61028590610270565b90565b5f1b90565b9061029e60018060a01b0391610288565b9181191691161790565b6102b190610270565b90565b90565b906102cc6102c76102d3926102a8565b6102b4565b825461028d565b9055565b6102e033610344565b6102eb5f6001610214565b6102f361003d565b6101f5810181811060018060401b0382111761033f5761031b82916101f561151e8439610234565b03905ff0801561033a576103316103389161027c565b60016102b7565b565b610239565b610051565b61034d906103a5565b565b61036361035e6103689261010a565b61010d565b610249565b90565b6103749061034f565b90565b61038090610249565b90565b61038c90610377565b9052565b91906103a3905f60208501940190610383565b565b806103c06103ba6103b55f61036b565b610377565b91610377565b146103d0576103ce90610463565b565b6103f36103dc5f61036b565b5f918291631e4fbdf760e01b835260048301610390565b0390fd5b5f1c90565b60018060a01b031690565b610413610418916103f7565b6103fc565b90565b6104259054610407565b90565b61043190610254565b90565b61043d90610428565b90565b90565b9061045861045361045f92610434565b610440565b825461028d565b9055565b61046c5f61041b565b610476825f610443565b906104aa6104a47f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610434565b91610434565b916104b361003d565b806104bd81610234565b0390a356fe60806040526004361015610013575b610635565b61001d5f356100cc565b80630b83249d146100c75780633514d37b146100c257806346e2cc09146100bd578063485cc955146100b85780635b3cd6e2146100b3578063715018a6146100ae5780637a3979dc146100a957806383470923146100a45780638da5cb5b1461009f578063d4f0eb4d1461009a5763f2fde38b0361000e57610602565b6105cf565b61057c565b610525565b6104a3565b6103f7565b6103c2565b6102e2565b610247565b610213565b61016a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561012a5781359167ffffffffffffffff831161012557602001926020830284011161012057565b6100ec565b6100e8565b6100e4565b90602082820312610160575f82013567ffffffffffffffff811161015b5761015792016100f0565b9091565b6100e0565b6100dc565b5f0190565b346101995761018361017d36600461012f565b90610769565b61018b6100d2565b8061019581610165565b0390f35b6100d8565b909182601f830112156101d85781359167ffffffffffffffff83116101d35760200192600183028401116101ce57565b6100ec565b6100e8565b6100e4565b9060208282031261020e575f82013567ffffffffffffffff811161020957610205920161019e565b9091565b6100e0565b6100dc565b346102425761022c6102263660046101dd565b906108ff565b6102346100d2565b8061023e81610165565b0390f35b6100d8565b346102765761026061025a3660046101dd565b906109a3565b6102686100d2565b8061027281610165565b0390f35b6100d8565b60018060a01b031690565b61028f9061027b565b90565b61029b81610286565b036102a257565b5f80fd5b905035906102b382610292565b565b91906040838203126102dd57806102d16102da925f86016102a6565b936020016102a6565b90565b6100dc565b34610311576102fb6102f53660046102b5565b90610b5a565b6103036100d2565b8061030d81610165565b0390f35b6100d8565b5f91031261032057565b6100dc565b1c90565b60018060a01b031690565b6103449060086103499302610325565b610329565b90565b906103579154610334565b90565b61036660015f9061034c565b90565b90565b61038061037b6103859261027b565b610369565b61027b565b90565b6103919061036c565b90565b61039d90610388565b90565b6103a990610394565b9052565b91906103c0905f602085019401906103a0565b565b346103f2576103d2366004610316565b6103ee6103dd61035a565b6103e56100d2565b918291826103ad565b0390f35b6100d8565b3461042557610407366004610316565b61040f610b8b565b6104176100d2565b8061042181610165565b0390f35b6100d8565b9160608383031261047757610441825f85016102a6565b9261044f83602083016102a6565b92604082013567ffffffffffffffff81116104725761046e920161019e565b9091565b6100e0565b6100dc565b151590565b61048a9061047c565b9052565b91906104a1905f60208501940190610481565b565b346104d7576104d36104c26104b936600461042a565b92919091610c89565b6104ca6100d2565b9182918261048e565b0390f35b6100d8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61050c90610500565b9052565b9190610523905f60208501940190610503565b565b3461055557610535366004610316565b6105516105406104dc565b6105486100d2565b91829182610510565b0390f35b6100d8565b61056390610286565b9052565b919061057a905f6020850194019061055a565b565b346105ac5761058c366004610316565b6105a8610597610d50565b61059f6100d2565b91829182610567565b0390f35b6100d8565b906020828203126105ca576105c7915f016102a6565b90565b6100dc565b346105fd576105e76105e23660046105b1565b610e09565b6105ef6100d2565b806105f981610165565b0390f35b6100d8565b346106305761061a6106153660046105b1565b610e79565b6106226100d2565b8061062c81610165565b0390f35b6100d8565b5f80fd5b5090565b90565b61065461064f6106599261063d565b610369565b610500565b90565b60016106689101610500565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156106cd570180359067ffffffffffffffff82116106c8576020019160018202360383136106c357565b610687565b610683565b61067f565b908210156106ed5760206106e9920281019061068b565b9091565b61066b565b6106fb90610388565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61073f61074860209361074d93610736816106fe565b93848093610702565b9586910161070b565b610716565b0190565b6107669160208201915f818403910152610720565b90565b610774818390610639565b9161077e5f610640565b5b8061079261078c86610500565b91610500565b1015610823576107c0906107b63332906107ae878786916106d2565b929091610c89565b6107c5575b61065c565b61077f565b336107db6107d5868685916106d2565b90610f07565b9061081b6108097f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106f2565b926108126100d2565b91829182610751565b0390a26107bb565b50505050565b9061084561083f33329085859192909192610c89565b1561047c565b61085457610852916108b8565b565b5f6361aec64960e11b81528061086c60048201610165565b0390fd5b90825f939282370152565b91906108958161088e8161089a95610702565b8095610870565b610716565b0190565b90916108b59260208301925f81850391015261087b565b90565b3390916108e57f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106f2565b926108fa6108f16100d2565b9283928361089e565b0390a2565b9061090991610829565b565b9061092761092133329085859192909192610c89565b1561047c565b6109365761093491610952565b565b5f6361aec64960e11b81528061094e60048201610165565b0390fd5b9061095e903392610f07565b9061099e61098c7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106f2565b926109956100d2565b91829182610751565b0390a2565b906109ad9161090b565b565b906109c1916109bc610f48565b610acd565b565b60a01c90565b60ff1690565b6109db6109e0916109c3565b6109c9565b90565b6109ed90546109cf565b90565b610a046109ff610a099261063d565b610369565b61027b565b90565b610a15906109f0565b90565b60a01b90565b90610a2d60ff60a01b91610a18565b9181191691161790565b610a409061047c565b90565b90565b90610a5b610a56610a6292610a37565b610a43565b8254610a1e565b9055565b610a6f9061036c565b90565b610a7b90610a66565b90565b5f1b90565b90610a9460018060a01b0391610a7e565b9181191691161790565b610aa790610a66565b90565b90565b90610ac2610abd610ac992610a9e565b610aaa565b8254610a83565b9055565b610ad760016109e3565b610b3f5781610af6610af0610aeb5f610a0c565b610286565b91610286565b14610b2357610b1c610b15610b2193610b10600180610a46565b610a72565b6001610aad565b610e79565b565b5f632e7f3c7f60e11b815280610b3b60048201610165565b0390fd5b5f62dc149f60e41b815280610b5660048201610165565b0390fd5b90610b64916109af565b565b610b6e610f48565b610b76610b78565b565b610b89610b845f610a0c565b610fb9565b565b610b93610b66565b565b5f90565b5f1c90565b610baa610baf91610b99565b610329565b90565b610bbc9054610b9e565b90565b634e487b7160e01b5f52604160045260245ffd5b90610bdd90610716565b810190811067ffffffffffffffff821117610bf757604052565b610bbf565b60e01b90565b610c0b8161047c565b03610c1257565b5f80fd5b90505190610c2382610c02565b565b90602082820312610c3e57610c3b915f01610c16565b90565b6100dc565b610c69610c769593949294610c5f60608401965f85019061055a565b602083019061055a565b604081850391015261087b565b90565b610c816100d2565b3d5f823e3d90fd5b92610ccc60209394610c99610b95565b50610cd7610caf610caa6001610bb2565b610394565b93637a3979dc929597610cc06100d2565b98899788968796610bfc565b865260048601610c43565b03915afa908115610d1b575f91610ced575b5090565b610d0e915060203d8111610d14575b610d068183610bd3565b810190610c25565b5f610ce9565b503d610cfc565b610c79565b5f90565b60018060a01b031690565b610d3b610d4091610b99565b610d24565b90565b610d4d9054610d2f565b90565b610d58610d20565b50610d625f610d43565b90565b610d7690610d71610f48565b610d78565b565b80610d93610d8d610d885f610a0c565b610286565b91610286565b14610ded57610dab610da482610a72565b6001610aad565b610dd57f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916106f2565b90610dde6100d2565b80610de881610165565b0390a2565b5f632e7f3c7f60e11b815280610e0560048201610165565b0390fd5b610e1290610d65565b565b610e2590610e20610f48565b610e27565b565b80610e42610e3c610e375f610a0c565b610286565b91610286565b14610e5257610e5090610fb9565b565b610e75610e5e5f610a0c565b5f918291631e4fbdf760e01b835260048301610567565b0390fd5b610e8290610e14565b565b606090565b60ff60f81b1690565b60f81b90565b610eac610ea7610eb19261063d565b610e92565b610e89565b90565b90565b610ec3610ec891610e89565b610eb4565b9052565b905090565b909182610ee181610ee893610ecc565b8093610870565b0190565b80610efd600192610f049694610eb7565b0191610ed1565b90565b610f4590610f13610e84565b50610f36610f205f610e98565b9193610f2a6100d2565b94859360208501610eec565b60208201810382520382610bd3565b90565b610f50610d50565b610f69610f63610f5e611018565b610286565b91610286565b03610f7057565b610f92610f7b611018565b5f91829163118cdaa760e01b835260048301610567565b0390fd5b90565b90610fae610fa9610fb5926106f2565b610f96565b8254610a83565b9055565b610fc25f610d43565b610fcc825f610f99565b90611000610ffa7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936106f2565b916106f2565b916110096100d2565b8061101381610165565b0390a3565b611020610d20565b50339056fea2646970667358221220fc5f409a88cdcebe00bec98001350e35b64f7c2c5d664736f49dc39b228e610b64736f6c634300081d0033608060405234601c57600e6020565b6101ca61002b82396101ca90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056fea26469706673582212205baa94c760d01094dc1eb4e8e08181ad9e7e2911290105d06b0e345979f7b0c664736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x10[a\x04\xC3\x829`\x80Q\x81a\x04\xDE\x01Ra\x10[\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x17\x13\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x18` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x02\xD7V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\xA0\x1B\x90V[\x90a\x01\xF6`\xFF`\xA0\x1B\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0E\x90a\x02\0V[\x90V[\x90V[\x90a\x02)a\x02$a\x020\x92a\x02\x05V[a\x02\x11V[\x82Ta\x01\xE7V[\x90UV[_\x01\x90V[a\x02Aa\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ha\x02ca\x02m\x92a\x02IV[a\x01\rV[a\x02IV[\x90V[a\x02y\x90a\x02TV[\x90V[a\x02\x85\x90a\x02pV[\x90V[_\x1B\x90V[\x90a\x02\x9E`\x01\x80`\xA0\x1B\x03\x91a\x02\x88V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xB1\x90a\x02pV[\x90V[\x90V[\x90a\x02\xCCa\x02\xC7a\x02\xD3\x92a\x02\xA8V[a\x02\xB4V[\x82Ta\x02\x8DV[\x90UV[a\x02\xE03a\x03DV[a\x02\xEB_`\x01a\x02\x14V[a\x02\xF3a\0=V[a\x01\xF5\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03?Wa\x03\x1B\x82\x91a\x01\xF5a\x15\x1E\x849a\x024V[\x03\x90_\xF0\x80\x15a\x03:Wa\x031a\x038\x91a\x02|V[`\x01a\x02\xB7V[V[a\x029V[a\0QV[a\x03M\x90a\x03\xA5V[V[a\x03ca\x03^a\x03h\x92a\x01\nV[a\x01\rV[a\x02IV[\x90V[a\x03t\x90a\x03OV[\x90V[a\x03\x80\x90a\x02IV[\x90V[a\x03\x8C\x90a\x03wV[\x90RV[\x91\x90a\x03\xA3\x90_` \x85\x01\x94\x01\x90a\x03\x83V[V[\x80a\x03\xC0a\x03\xBAa\x03\xB5_a\x03kV[a\x03wV[\x91a\x03wV[\x14a\x03\xD0Wa\x03\xCE\x90a\x04cV[V[a\x03\xF3a\x03\xDC_a\x03kV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x90V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x13a\x04\x18\x91a\x03\xF7V[a\x03\xFCV[\x90V[a\x04%\x90Ta\x04\x07V[\x90V[a\x041\x90a\x02TV[\x90V[a\x04=\x90a\x04(V[\x90V[\x90V[\x90a\x04Xa\x04Sa\x04_\x92a\x044V[a\x04@V[\x82Ta\x02\x8DV[\x90UV[a\x04l_a\x04\x1BV[a\x04v\x82_a\x04CV[\x90a\x04\xAAa\x04\xA4\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x044V[\x91a\x044V[\x91a\x04\xB3a\0=V[\x80a\x04\xBD\x81a\x024V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x065V[a\0\x1D_5a\0\xCCV[\x80c\x0B\x83$\x9D\x14a\0\xC7W\x80c5\x14\xD3{\x14a\0\xC2W\x80cF\xE2\xCC\t\x14a\0\xBDW\x80cH\\\xC9U\x14a\0\xB8W\x80c[<\xD6\xE2\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cz9y\xDC\x14a\0\xA9W\x80c\x83G\t#\x14a\0\xA4W\x80c\x8D\xA5\xCB[\x14a\0\x9FW\x80c\xD4\xF0\xEBM\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06\x02V[a\x05\xCFV[a\x05|V[a\x05%V[a\x04\xA3V[a\x03\xF7V[a\x03\xC2V[a\x02\xE2V[a\x02GV[a\x02\x13V[a\x01jV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01*W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01%W` \x01\x92` \x83\x02\x84\x01\x11a\x01 WV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x01`W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01[Wa\x01W\x92\x01a\0\xF0V[\x90\x91V[a\0\xE0V[a\0\xDCV[_\x01\x90V[4a\x01\x99Wa\x01\x83a\x01}6`\x04a\x01/V[\x90a\x07iV[a\x01\x8Ba\0\xD2V[\x80a\x01\x95\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xCEWV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x02\x0EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\tWa\x02\x05\x92\x01a\x01\x9EV[\x90\x91V[a\0\xE0V[a\0\xDCV[4a\x02BWa\x02,a\x02&6`\x04a\x01\xDDV[\x90a\x08\xFFV[a\x024a\0\xD2V[\x80a\x02>\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x02vWa\x02`a\x02Z6`\x04a\x01\xDDV[\x90a\t\xA3V[a\x02ha\0\xD2V[\x80a\x02r\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x8F\x90a\x02{V[\x90V[a\x02\x9B\x81a\x02\x86V[\x03a\x02\xA2WV[_\x80\xFD[\x90P5\x90a\x02\xB3\x82a\x02\x92V[V[\x91\x90`@\x83\x82\x03\x12a\x02\xDDW\x80a\x02\xD1a\x02\xDA\x92_\x86\x01a\x02\xA6V[\x93` \x01a\x02\xA6V[\x90V[a\0\xDCV[4a\x03\x11Wa\x02\xFBa\x02\xF56`\x04a\x02\xB5V[\x90a\x0BZV[a\x03\x03a\0\xD2V[\x80a\x03\r\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x03 WV[a\0\xDCV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03D\x90`\x08a\x03I\x93\x02a\x03%V[a\x03)V[\x90V[\x90a\x03W\x91Ta\x034V[\x90V[a\x03f`\x01_\x90a\x03LV[\x90V[\x90V[a\x03\x80a\x03{a\x03\x85\x92a\x02{V[a\x03iV[a\x02{V[\x90V[a\x03\x91\x90a\x03lV[\x90V[a\x03\x9D\x90a\x03\x88V[\x90V[a\x03\xA9\x90a\x03\x94V[\x90RV[\x91\x90a\x03\xC0\x90_` \x85\x01\x94\x01\x90a\x03\xA0V[V[4a\x03\xF2Wa\x03\xD26`\x04a\x03\x16V[a\x03\xEEa\x03\xDDa\x03ZV[a\x03\xE5a\0\xD2V[\x91\x82\x91\x82a\x03\xADV[\x03\x90\xF3[a\0\xD8V[4a\x04%Wa\x04\x076`\x04a\x03\x16V[a\x04\x0Fa\x0B\x8BV[a\x04\x17a\0\xD2V[\x80a\x04!\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x91``\x83\x83\x03\x12a\x04wWa\x04A\x82_\x85\x01a\x02\xA6V[\x92a\x04O\x83` \x83\x01a\x02\xA6V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04rWa\x04n\x92\x01a\x01\x9EV[\x90\x91V[a\0\xE0V[a\0\xDCV[\x15\x15\x90V[a\x04\x8A\x90a\x04|V[\x90RV[\x91\x90a\x04\xA1\x90_` \x85\x01\x94\x01\x90a\x04\x81V[V[4a\x04\xD7Wa\x04\xD3a\x04\xC2a\x04\xB96`\x04a\x04*V[\x92\x91\x90\x91a\x0C\x89V[a\x04\xCAa\0\xD2V[\x91\x82\x91\x82a\x04\x8EV[\x03\x90\xF3[a\0\xD8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05\x0C\x90a\x05\0V[\x90RV[\x91\x90a\x05#\x90_` \x85\x01\x94\x01\x90a\x05\x03V[V[4a\x05UWa\x0556`\x04a\x03\x16V[a\x05Qa\x05@a\x04\xDCV[a\x05Ha\0\xD2V[\x91\x82\x91\x82a\x05\x10V[\x03\x90\xF3[a\0\xD8V[a\x05c\x90a\x02\x86V[\x90RV[\x91\x90a\x05z\x90_` \x85\x01\x94\x01\x90a\x05ZV[V[4a\x05\xACWa\x05\x8C6`\x04a\x03\x16V[a\x05\xA8a\x05\x97a\rPV[a\x05\x9Fa\0\xD2V[\x91\x82\x91\x82a\x05gV[\x03\x90\xF3[a\0\xD8V[\x90` \x82\x82\x03\x12a\x05\xCAWa\x05\xC7\x91_\x01a\x02\xA6V[\x90V[a\0\xDCV[4a\x05\xFDWa\x05\xE7a\x05\xE26`\x04a\x05\xB1V[a\x0E\tV[a\x05\xEFa\0\xD2V[\x80a\x05\xF9\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x060Wa\x06\x1Aa\x06\x156`\x04a\x05\xB1V[a\x0EyV[a\x06\"a\0\xD2V[\x80a\x06,\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[P\x90V[\x90V[a\x06Ta\x06Oa\x06Y\x92a\x06=V[a\x03iV[a\x05\0V[\x90V[`\x01a\x06h\x91\x01a\x05\0V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x06\xCDW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x06\xC8W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x06\xC3WV[a\x06\x87V[a\x06\x83V[a\x06\x7FV[\x90\x82\x10\x15a\x06\xEDW` a\x06\xE9\x92\x02\x81\x01\x90a\x06\x8BV[\x90\x91V[a\x06kV[a\x06\xFB\x90a\x03\x88V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x07?a\x07H` \x93a\x07M\x93a\x076\x81a\x06\xFEV[\x93\x84\x80\x93a\x07\x02V[\x95\x86\x91\x01a\x07\x0BV[a\x07\x16V[\x01\x90V[a\x07f\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07 V[\x90V[a\x07t\x81\x83\x90a\x069V[\x91a\x07~_a\x06@V[[\x80a\x07\x92a\x07\x8C\x86a\x05\0V[\x91a\x05\0V[\x10\x15a\x08#Wa\x07\xC0\x90a\x07\xB632\x90a\x07\xAE\x87\x87\x86\x91a\x06\xD2V[\x92\x90\x91a\x0C\x89V[a\x07\xC5W[a\x06\\V[a\x07\x7FV[3a\x07\xDBa\x07\xD5\x86\x86\x85\x91a\x06\xD2V[\x90a\x0F\x07V[\x90a\x08\x1Ba\x08\t\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xF2V[\x92a\x08\x12a\0\xD2V[\x91\x82\x91\x82a\x07QV[\x03\x90\xA2a\x07\xBBV[PPPPV[\x90a\x08Ea\x08?32\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\x89V[\x15a\x04|V[a\x08TWa\x08R\x91a\x08\xB8V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x08l`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x08\x95\x81a\x08\x8E\x81a\x08\x9A\x95a\x07\x02V[\x80\x95a\x08pV[a\x07\x16V[\x01\x90V[\x90\x91a\x08\xB5\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08{V[\x90V[3\x90\x91a\x08\xE5\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xF2V[\x92a\x08\xFAa\x08\xF1a\0\xD2V[\x92\x83\x92\x83a\x08\x9EV[\x03\x90\xA2V[\x90a\t\t\x91a\x08)V[V[\x90a\t'a\t!32\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\x89V[\x15a\x04|V[a\t6Wa\t4\x91a\tRV[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\tN`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90a\t^\x903\x92a\x0F\x07V[\x90a\t\x9Ea\t\x8C\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xF2V[\x92a\t\x95a\0\xD2V[\x91\x82\x91\x82a\x07QV[\x03\x90\xA2V[\x90a\t\xAD\x91a\t\x0BV[V[\x90a\t\xC1\x91a\t\xBCa\x0FHV[a\n\xCDV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\t\xDBa\t\xE0\x91a\t\xC3V[a\t\xC9V[\x90V[a\t\xED\x90Ta\t\xCFV[\x90V[a\n\x04a\t\xFFa\n\t\x92a\x06=V[a\x03iV[a\x02{V[\x90V[a\n\x15\x90a\t\xF0V[\x90V[`\xA0\x1B\x90V[\x90a\n-`\xFF`\xA0\x1B\x91a\n\x18V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n@\x90a\x04|V[\x90V[\x90V[\x90a\n[a\nVa\nb\x92a\n7V[a\nCV[\x82Ta\n\x1EV[\x90UV[a\no\x90a\x03lV[\x90V[a\n{\x90a\nfV[\x90V[_\x1B\x90V[\x90a\n\x94`\x01\x80`\xA0\x1B\x03\x91a\n~V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n\xA7\x90a\nfV[\x90V[\x90V[\x90a\n\xC2a\n\xBDa\n\xC9\x92a\n\x9EV[a\n\xAAV[\x82Ta\n\x83V[\x90UV[a\n\xD7`\x01a\t\xE3V[a\x0B?W\x81a\n\xF6a\n\xF0a\n\xEB_a\n\x0CV[a\x02\x86V[\x91a\x02\x86V[\x14a\x0B#Wa\x0B\x1Ca\x0B\x15a\x0B!\x93a\x0B\x10`\x01\x80a\nFV[a\nrV[`\x01a\n\xADV[a\x0EyV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0B;`\x04\x82\x01a\x01eV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0BV`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90a\x0Bd\x91a\t\xAFV[V[a\x0Bna\x0FHV[a\x0Bva\x0BxV[V[a\x0B\x89a\x0B\x84_a\n\x0CV[a\x0F\xB9V[V[a\x0B\x93a\x0BfV[V[_\x90V[_\x1C\x90V[a\x0B\xAAa\x0B\xAF\x91a\x0B\x99V[a\x03)V[\x90V[a\x0B\xBC\x90Ta\x0B\x9EV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0B\xDD\x90a\x07\x16V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\xF7W`@RV[a\x0B\xBFV[`\xE0\x1B\x90V[a\x0C\x0B\x81a\x04|V[\x03a\x0C\x12WV[_\x80\xFD[\x90PQ\x90a\x0C#\x82a\x0C\x02V[V[\x90` \x82\x82\x03\x12a\x0C>Wa\x0C;\x91_\x01a\x0C\x16V[\x90V[a\0\xDCV[a\x0Cia\x0Cv\x95\x93\x94\x92\x94a\x0C_``\x84\x01\x96_\x85\x01\x90a\x05ZV[` \x83\x01\x90a\x05ZV[`@\x81\x85\x03\x91\x01Ra\x08{V[\x90V[a\x0C\x81a\0\xD2V[=_\x82>=\x90\xFD[\x92a\x0C\xCC` \x93\x94a\x0C\x99a\x0B\x95V[Pa\x0C\xD7a\x0C\xAFa\x0C\xAA`\x01a\x0B\xB2V[a\x03\x94V[\x93cz9y\xDC\x92\x95\x97a\x0C\xC0a\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\x0B\xFCV[\x86R`\x04\x86\x01a\x0CCV[\x03\x91Z\xFA\x90\x81\x15a\r\x1BW_\x91a\x0C\xEDW[P\x90V[a\r\x0E\x91P` =\x81\x11a\r\x14W[a\r\x06\x81\x83a\x0B\xD3V[\x81\x01\x90a\x0C%V[_a\x0C\xE9V[P=a\x0C\xFCV[a\x0CyV[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\r;a\r@\x91a\x0B\x99V[a\r$V[\x90V[a\rM\x90Ta\r/V[\x90V[a\rXa\r V[Pa\rb_a\rCV[\x90V[a\rv\x90a\rqa\x0FHV[a\rxV[V[\x80a\r\x93a\r\x8Da\r\x88_a\n\x0CV[a\x02\x86V[\x91a\x02\x86V[\x14a\r\xEDWa\r\xABa\r\xA4\x82a\nrV[`\x01a\n\xADV[a\r\xD5\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x06\xF2V[\x90a\r\xDEa\0\xD2V[\x80a\r\xE8\x81a\x01eV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0E\x05`\x04\x82\x01a\x01eV[\x03\x90\xFD[a\x0E\x12\x90a\reV[V[a\x0E%\x90a\x0E a\x0FHV[a\x0E'V[V[\x80a\x0EBa\x0E<a\x0E7_a\n\x0CV[a\x02\x86V[\x91a\x02\x86V[\x14a\x0ERWa\x0EP\x90a\x0F\xB9V[V[a\x0Eua\x0E^_a\n\x0CV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05gV[\x03\x90\xFD[a\x0E\x82\x90a\x0E\x14V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0E\xACa\x0E\xA7a\x0E\xB1\x92a\x06=V[a\x0E\x92V[a\x0E\x89V[\x90V[\x90V[a\x0E\xC3a\x0E\xC8\x91a\x0E\x89V[a\x0E\xB4V[\x90RV[\x90P\x90V[\x90\x91\x82a\x0E\xE1\x81a\x0E\xE8\x93a\x0E\xCCV[\x80\x93a\x08pV[\x01\x90V[\x80a\x0E\xFD`\x01\x92a\x0F\x04\x96\x94a\x0E\xB7V[\x01\x91a\x0E\xD1V[\x90V[a\x0FE\x90a\x0F\x13a\x0E\x84V[Pa\x0F6a\x0F _a\x0E\x98V[\x91\x93a\x0F*a\0\xD2V[\x94\x85\x93` \x85\x01a\x0E\xECV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\xD3V[\x90V[a\x0FPa\rPV[a\x0Fia\x0Fca\x0F^a\x10\x18V[a\x02\x86V[\x91a\x02\x86V[\x03a\x0FpWV[a\x0F\x92a\x0F{a\x10\x18V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05gV[\x03\x90\xFD[\x90V[\x90a\x0F\xAEa\x0F\xA9a\x0F\xB5\x92a\x06\xF2V[a\x0F\x96V[\x82Ta\n\x83V[\x90UV[a\x0F\xC2_a\rCV[a\x0F\xCC\x82_a\x0F\x99V[\x90a\x10\0a\x0F\xFA\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06\xF2V[\x91a\x06\xF2V[\x91a\x10\ta\0\xD2V[\x80a\x10\x13\x81a\x01eV[\x03\x90\xA3V[a\x10 a\r V[P3\x90V\xFE\xA2dipfsX\"\x12 \xFC_@\x9A\x88\xCD\xCE\xBE\0\xBE\xC9\x80\x015\x0E5\xB6O|,]fG6\xF4\x9D\xC3\x9B\"\x8Ea\x0BdsolcC\0\x08\x1D\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\xCAa\0+\x829a\x01\xCA\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V\xFE\xA2dipfsX\"\x12 [\xAA\x94\xC7`\xD0\x10\x94\xDC\x1E\xB4\xE8\xE0\x81\x81\xAD\x9E~)\x11)\x01\x05\xD0k\x0E4Yy\xF7\xB0\xC6dsolcC\0\x08\x1D\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610635565b61001d5f356100cc565b80630b83249d146100c75780633514d37b146100c257806346e2cc09146100bd578063485cc955146100b85780635b3cd6e2146100b3578063715018a6146100ae5780637a3979dc146100a957806383470923146100a45780638da5cb5b1461009f578063d4f0eb4d1461009a5763f2fde38b0361000e57610602565b6105cf565b61057c565b610525565b6104a3565b6103f7565b6103c2565b6102e2565b610247565b610213565b61016a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561012a5781359167ffffffffffffffff831161012557602001926020830284011161012057565b6100ec565b6100e8565b6100e4565b90602082820312610160575f82013567ffffffffffffffff811161015b5761015792016100f0565b9091565b6100e0565b6100dc565b5f0190565b346101995761018361017d36600461012f565b90610769565b61018b6100d2565b8061019581610165565b0390f35b6100d8565b909182601f830112156101d85781359167ffffffffffffffff83116101d35760200192600183028401116101ce57565b6100ec565b6100e8565b6100e4565b9060208282031261020e575f82013567ffffffffffffffff811161020957610205920161019e565b9091565b6100e0565b6100dc565b346102425761022c6102263660046101dd565b906108ff565b6102346100d2565b8061023e81610165565b0390f35b6100d8565b346102765761026061025a3660046101dd565b906109a3565b6102686100d2565b8061027281610165565b0390f35b6100d8565b60018060a01b031690565b61028f9061027b565b90565b61029b81610286565b036102a257565b5f80fd5b905035906102b382610292565b565b91906040838203126102dd57806102d16102da925f86016102a6565b936020016102a6565b90565b6100dc565b34610311576102fb6102f53660046102b5565b90610b5a565b6103036100d2565b8061030d81610165565b0390f35b6100d8565b5f91031261032057565b6100dc565b1c90565b60018060a01b031690565b6103449060086103499302610325565b610329565b90565b906103579154610334565b90565b61036660015f9061034c565b90565b90565b61038061037b6103859261027b565b610369565b61027b565b90565b6103919061036c565b90565b61039d90610388565b90565b6103a990610394565b9052565b91906103c0905f602085019401906103a0565b565b346103f2576103d2366004610316565b6103ee6103dd61035a565b6103e56100d2565b918291826103ad565b0390f35b6100d8565b3461042557610407366004610316565b61040f610b8b565b6104176100d2565b8061042181610165565b0390f35b6100d8565b9160608383031261047757610441825f85016102a6565b9261044f83602083016102a6565b92604082013567ffffffffffffffff81116104725761046e920161019e565b9091565b6100e0565b6100dc565b151590565b61048a9061047c565b9052565b91906104a1905f60208501940190610481565b565b346104d7576104d36104c26104b936600461042a565b92919091610c89565b6104ca6100d2565b9182918261048e565b0390f35b6100d8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61050c90610500565b9052565b9190610523905f60208501940190610503565b565b3461055557610535366004610316565b6105516105406104dc565b6105486100d2565b91829182610510565b0390f35b6100d8565b61056390610286565b9052565b919061057a905f6020850194019061055a565b565b346105ac5761058c366004610316565b6105a8610597610d50565b61059f6100d2565b91829182610567565b0390f35b6100d8565b906020828203126105ca576105c7915f016102a6565b90565b6100dc565b346105fd576105e76105e23660046105b1565b610e09565b6105ef6100d2565b806105f981610165565b0390f35b6100d8565b346106305761061a6106153660046105b1565b610e79565b6106226100d2565b8061062c81610165565b0390f35b6100d8565b5f80fd5b5090565b90565b61065461064f6106599261063d565b610369565b610500565b90565b60016106689101610500565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156106cd570180359067ffffffffffffffff82116106c8576020019160018202360383136106c357565b610687565b610683565b61067f565b908210156106ed5760206106e9920281019061068b565b9091565b61066b565b6106fb90610388565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61073f61074860209361074d93610736816106fe565b93848093610702565b9586910161070b565b610716565b0190565b6107669160208201915f818403910152610720565b90565b610774818390610639565b9161077e5f610640565b5b8061079261078c86610500565b91610500565b1015610823576107c0906107b63332906107ae878786916106d2565b929091610c89565b6107c5575b61065c565b61077f565b336107db6107d5868685916106d2565b90610f07565b9061081b6108097f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106f2565b926108126100d2565b91829182610751565b0390a26107bb565b50505050565b9061084561083f33329085859192909192610c89565b1561047c565b61085457610852916108b8565b565b5f6361aec64960e11b81528061086c60048201610165565b0390fd5b90825f939282370152565b91906108958161088e8161089a95610702565b8095610870565b610716565b0190565b90916108b59260208301925f81850391015261087b565b90565b3390916108e57f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106f2565b926108fa6108f16100d2565b9283928361089e565b0390a2565b9061090991610829565b565b9061092761092133329085859192909192610c89565b1561047c565b6109365761093491610952565b565b5f6361aec64960e11b81528061094e60048201610165565b0390fd5b9061095e903392610f07565b9061099e61098c7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106f2565b926109956100d2565b91829182610751565b0390a2565b906109ad9161090b565b565b906109c1916109bc610f48565b610acd565b565b60a01c90565b60ff1690565b6109db6109e0916109c3565b6109c9565b90565b6109ed90546109cf565b90565b610a046109ff610a099261063d565b610369565b61027b565b90565b610a15906109f0565b90565b60a01b90565b90610a2d60ff60a01b91610a18565b9181191691161790565b610a409061047c565b90565b90565b90610a5b610a56610a6292610a37565b610a43565b8254610a1e565b9055565b610a6f9061036c565b90565b610a7b90610a66565b90565b5f1b90565b90610a9460018060a01b0391610a7e565b9181191691161790565b610aa790610a66565b90565b90565b90610ac2610abd610ac992610a9e565b610aaa565b8254610a83565b9055565b610ad760016109e3565b610b3f5781610af6610af0610aeb5f610a0c565b610286565b91610286565b14610b2357610b1c610b15610b2193610b10600180610a46565b610a72565b6001610aad565b610e79565b565b5f632e7f3c7f60e11b815280610b3b60048201610165565b0390fd5b5f62dc149f60e41b815280610b5660048201610165565b0390fd5b90610b64916109af565b565b610b6e610f48565b610b76610b78565b565b610b89610b845f610a0c565b610fb9565b565b610b93610b66565b565b5f90565b5f1c90565b610baa610baf91610b99565b610329565b90565b610bbc9054610b9e565b90565b634e487b7160e01b5f52604160045260245ffd5b90610bdd90610716565b810190811067ffffffffffffffff821117610bf757604052565b610bbf565b60e01b90565b610c0b8161047c565b03610c1257565b5f80fd5b90505190610c2382610c02565b565b90602082820312610c3e57610c3b915f01610c16565b90565b6100dc565b610c69610c769593949294610c5f60608401965f85019061055a565b602083019061055a565b604081850391015261087b565b90565b610c816100d2565b3d5f823e3d90fd5b92610ccc60209394610c99610b95565b50610cd7610caf610caa6001610bb2565b610394565b93637a3979dc929597610cc06100d2565b98899788968796610bfc565b865260048601610c43565b03915afa908115610d1b575f91610ced575b5090565b610d0e915060203d8111610d14575b610d068183610bd3565b810190610c25565b5f610ce9565b503d610cfc565b610c79565b5f90565b60018060a01b031690565b610d3b610d4091610b99565b610d24565b90565b610d4d9054610d2f565b90565b610d58610d20565b50610d625f610d43565b90565b610d7690610d71610f48565b610d78565b565b80610d93610d8d610d885f610a0c565b610286565b91610286565b14610ded57610dab610da482610a72565b6001610aad565b610dd57f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916106f2565b90610dde6100d2565b80610de881610165565b0390a2565b5f632e7f3c7f60e11b815280610e0560048201610165565b0390fd5b610e1290610d65565b565b610e2590610e20610f48565b610e27565b565b80610e42610e3c610e375f610a0c565b610286565b91610286565b14610e5257610e5090610fb9565b565b610e75610e5e5f610a0c565b5f918291631e4fbdf760e01b835260048301610567565b0390fd5b610e8290610e14565b565b606090565b60ff60f81b1690565b60f81b90565b610eac610ea7610eb19261063d565b610e92565b610e89565b90565b90565b610ec3610ec891610e89565b610eb4565b9052565b905090565b909182610ee181610ee893610ecc565b8093610870565b0190565b80610efd600192610f049694610eb7565b0191610ed1565b90565b610f4590610f13610e84565b50610f36610f205f610e98565b9193610f2a6100d2565b94859360208501610eec565b60208201810382520382610bd3565b90565b610f50610d50565b610f69610f63610f5e611018565b610286565b91610286565b03610f7057565b610f92610f7b611018565b5f91829163118cdaa760e01b835260048301610567565b0390fd5b90565b90610fae610fa9610fb5926106f2565b610f96565b8254610a83565b9055565b610fc25f610d43565b610fcc825f610f99565b90611000610ffa7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936106f2565b916106f2565b916110096100d2565b8061101381610165565b0390a3565b611020610d20565b50339056fea2646970667358221220fc5f409a88cdcebe00bec98001350e35b64f7c2c5d664736f49dc39b228e610b64736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x065V[a\0\x1D_5a\0\xCCV[\x80c\x0B\x83$\x9D\x14a\0\xC7W\x80c5\x14\xD3{\x14a\0\xC2W\x80cF\xE2\xCC\t\x14a\0\xBDW\x80cH\\\xC9U\x14a\0\xB8W\x80c[<\xD6\xE2\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cz9y\xDC\x14a\0\xA9W\x80c\x83G\t#\x14a\0\xA4W\x80c\x8D\xA5\xCB[\x14a\0\x9FW\x80c\xD4\xF0\xEBM\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06\x02V[a\x05\xCFV[a\x05|V[a\x05%V[a\x04\xA3V[a\x03\xF7V[a\x03\xC2V[a\x02\xE2V[a\x02GV[a\x02\x13V[a\x01jV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01*W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01%W` \x01\x92` \x83\x02\x84\x01\x11a\x01 WV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x01`W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01[Wa\x01W\x92\x01a\0\xF0V[\x90\x91V[a\0\xE0V[a\0\xDCV[_\x01\x90V[4a\x01\x99Wa\x01\x83a\x01}6`\x04a\x01/V[\x90a\x07iV[a\x01\x8Ba\0\xD2V[\x80a\x01\x95\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xCEWV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x02\x0EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\tWa\x02\x05\x92\x01a\x01\x9EV[\x90\x91V[a\0\xE0V[a\0\xDCV[4a\x02BWa\x02,a\x02&6`\x04a\x01\xDDV[\x90a\x08\xFFV[a\x024a\0\xD2V[\x80a\x02>\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x02vWa\x02`a\x02Z6`\x04a\x01\xDDV[\x90a\t\xA3V[a\x02ha\0\xD2V[\x80a\x02r\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x8F\x90a\x02{V[\x90V[a\x02\x9B\x81a\x02\x86V[\x03a\x02\xA2WV[_\x80\xFD[\x90P5\x90a\x02\xB3\x82a\x02\x92V[V[\x91\x90`@\x83\x82\x03\x12a\x02\xDDW\x80a\x02\xD1a\x02\xDA\x92_\x86\x01a\x02\xA6V[\x93` \x01a\x02\xA6V[\x90V[a\0\xDCV[4a\x03\x11Wa\x02\xFBa\x02\xF56`\x04a\x02\xB5V[\x90a\x0BZV[a\x03\x03a\0\xD2V[\x80a\x03\r\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x03 WV[a\0\xDCV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03D\x90`\x08a\x03I\x93\x02a\x03%V[a\x03)V[\x90V[\x90a\x03W\x91Ta\x034V[\x90V[a\x03f`\x01_\x90a\x03LV[\x90V[\x90V[a\x03\x80a\x03{a\x03\x85\x92a\x02{V[a\x03iV[a\x02{V[\x90V[a\x03\x91\x90a\x03lV[\x90V[a\x03\x9D\x90a\x03\x88V[\x90V[a\x03\xA9\x90a\x03\x94V[\x90RV[\x91\x90a\x03\xC0\x90_` \x85\x01\x94\x01\x90a\x03\xA0V[V[4a\x03\xF2Wa\x03\xD26`\x04a\x03\x16V[a\x03\xEEa\x03\xDDa\x03ZV[a\x03\xE5a\0\xD2V[\x91\x82\x91\x82a\x03\xADV[\x03\x90\xF3[a\0\xD8V[4a\x04%Wa\x04\x076`\x04a\x03\x16V[a\x04\x0Fa\x0B\x8BV[a\x04\x17a\0\xD2V[\x80a\x04!\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x91``\x83\x83\x03\x12a\x04wWa\x04A\x82_\x85\x01a\x02\xA6V[\x92a\x04O\x83` \x83\x01a\x02\xA6V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04rWa\x04n\x92\x01a\x01\x9EV[\x90\x91V[a\0\xE0V[a\0\xDCV[\x15\x15\x90V[a\x04\x8A\x90a\x04|V[\x90RV[\x91\x90a\x04\xA1\x90_` \x85\x01\x94\x01\x90a\x04\x81V[V[4a\x04\xD7Wa\x04\xD3a\x04\xC2a\x04\xB96`\x04a\x04*V[\x92\x91\x90\x91a\x0C\x89V[a\x04\xCAa\0\xD2V[\x91\x82\x91\x82a\x04\x8EV[\x03\x90\xF3[a\0\xD8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x05\x0C\x90a\x05\0V[\x90RV[\x91\x90a\x05#\x90_` \x85\x01\x94\x01\x90a\x05\x03V[V[4a\x05UWa\x0556`\x04a\x03\x16V[a\x05Qa\x05@a\x04\xDCV[a\x05Ha\0\xD2V[\x91\x82\x91\x82a\x05\x10V[\x03\x90\xF3[a\0\xD8V[a\x05c\x90a\x02\x86V[\x90RV[\x91\x90a\x05z\x90_` \x85\x01\x94\x01\x90a\x05ZV[V[4a\x05\xACWa\x05\x8C6`\x04a\x03\x16V[a\x05\xA8a\x05\x97a\rPV[a\x05\x9Fa\0\xD2V[\x91\x82\x91\x82a\x05gV[\x03\x90\xF3[a\0\xD8V[\x90` \x82\x82\x03\x12a\x05\xCAWa\x05\xC7\x91_\x01a\x02\xA6V[\x90V[a\0\xDCV[4a\x05\xFDWa\x05\xE7a\x05\xE26`\x04a\x05\xB1V[a\x0E\tV[a\x05\xEFa\0\xD2V[\x80a\x05\xF9\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x060Wa\x06\x1Aa\x06\x156`\x04a\x05\xB1V[a\x0EyV[a\x06\"a\0\xD2V[\x80a\x06,\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[P\x90V[\x90V[a\x06Ta\x06Oa\x06Y\x92a\x06=V[a\x03iV[a\x05\0V[\x90V[`\x01a\x06h\x91\x01a\x05\0V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x06\xCDW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x06\xC8W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x06\xC3WV[a\x06\x87V[a\x06\x83V[a\x06\x7FV[\x90\x82\x10\x15a\x06\xEDW` a\x06\xE9\x92\x02\x81\x01\x90a\x06\x8BV[\x90\x91V[a\x06kV[a\x06\xFB\x90a\x03\x88V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x07?a\x07H` \x93a\x07M\x93a\x076\x81a\x06\xFEV[\x93\x84\x80\x93a\x07\x02V[\x95\x86\x91\x01a\x07\x0BV[a\x07\x16V[\x01\x90V[a\x07f\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07 V[\x90V[a\x07t\x81\x83\x90a\x069V[\x91a\x07~_a\x06@V[[\x80a\x07\x92a\x07\x8C\x86a\x05\0V[\x91a\x05\0V[\x10\x15a\x08#Wa\x07\xC0\x90a\x07\xB632\x90a\x07\xAE\x87\x87\x86\x91a\x06\xD2V[\x92\x90\x91a\x0C\x89V[a\x07\xC5W[a\x06\\V[a\x07\x7FV[3a\x07\xDBa\x07\xD5\x86\x86\x85\x91a\x06\xD2V[\x90a\x0F\x07V[\x90a\x08\x1Ba\x08\t\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xF2V[\x92a\x08\x12a\0\xD2V[\x91\x82\x91\x82a\x07QV[\x03\x90\xA2a\x07\xBBV[PPPPV[\x90a\x08Ea\x08?32\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\x89V[\x15a\x04|V[a\x08TWa\x08R\x91a\x08\xB8V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x08l`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x08\x95\x81a\x08\x8E\x81a\x08\x9A\x95a\x07\x02V[\x80\x95a\x08pV[a\x07\x16V[\x01\x90V[\x90\x91a\x08\xB5\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08{V[\x90V[3\x90\x91a\x08\xE5\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xF2V[\x92a\x08\xFAa\x08\xF1a\0\xD2V[\x92\x83\x92\x83a\x08\x9EV[\x03\x90\xA2V[\x90a\t\t\x91a\x08)V[V[\x90a\t'a\t!32\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\x89V[\x15a\x04|V[a\t6Wa\t4\x91a\tRV[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\tN`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90a\t^\x903\x92a\x0F\x07V[\x90a\t\x9Ea\t\x8C\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xF2V[\x92a\t\x95a\0\xD2V[\x91\x82\x91\x82a\x07QV[\x03\x90\xA2V[\x90a\t\xAD\x91a\t\x0BV[V[\x90a\t\xC1\x91a\t\xBCa\x0FHV[a\n\xCDV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\t\xDBa\t\xE0\x91a\t\xC3V[a\t\xC9V[\x90V[a\t\xED\x90Ta\t\xCFV[\x90V[a\n\x04a\t\xFFa\n\t\x92a\x06=V[a\x03iV[a\x02{V[\x90V[a\n\x15\x90a\t\xF0V[\x90V[`\xA0\x1B\x90V[\x90a\n-`\xFF`\xA0\x1B\x91a\n\x18V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n@\x90a\x04|V[\x90V[\x90V[\x90a\n[a\nVa\nb\x92a\n7V[a\nCV[\x82Ta\n\x1EV[\x90UV[a\no\x90a\x03lV[\x90V[a\n{\x90a\nfV[\x90V[_\x1B\x90V[\x90a\n\x94`\x01\x80`\xA0\x1B\x03\x91a\n~V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n\xA7\x90a\nfV[\x90V[\x90V[\x90a\n\xC2a\n\xBDa\n\xC9\x92a\n\x9EV[a\n\xAAV[\x82Ta\n\x83V[\x90UV[a\n\xD7`\x01a\t\xE3V[a\x0B?W\x81a\n\xF6a\n\xF0a\n\xEB_a\n\x0CV[a\x02\x86V[\x91a\x02\x86V[\x14a\x0B#Wa\x0B\x1Ca\x0B\x15a\x0B!\x93a\x0B\x10`\x01\x80a\nFV[a\nrV[`\x01a\n\xADV[a\x0EyV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0B;`\x04\x82\x01a\x01eV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0BV`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90a\x0Bd\x91a\t\xAFV[V[a\x0Bna\x0FHV[a\x0Bva\x0BxV[V[a\x0B\x89a\x0B\x84_a\n\x0CV[a\x0F\xB9V[V[a\x0B\x93a\x0BfV[V[_\x90V[_\x1C\x90V[a\x0B\xAAa\x0B\xAF\x91a\x0B\x99V[a\x03)V[\x90V[a\x0B\xBC\x90Ta\x0B\x9EV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0B\xDD\x90a\x07\x16V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\xF7W`@RV[a\x0B\xBFV[`\xE0\x1B\x90V[a\x0C\x0B\x81a\x04|V[\x03a\x0C\x12WV[_\x80\xFD[\x90PQ\x90a\x0C#\x82a\x0C\x02V[V[\x90` \x82\x82\x03\x12a\x0C>Wa\x0C;\x91_\x01a\x0C\x16V[\x90V[a\0\xDCV[a\x0Cia\x0Cv\x95\x93\x94\x92\x94a\x0C_``\x84\x01\x96_\x85\x01\x90a\x05ZV[` \x83\x01\x90a\x05ZV[`@\x81\x85\x03\x91\x01Ra\x08{V[\x90V[a\x0C\x81a\0\xD2V[=_\x82>=\x90\xFD[\x92a\x0C\xCC` \x93\x94a\x0C\x99a\x0B\x95V[Pa\x0C\xD7a\x0C\xAFa\x0C\xAA`\x01a\x0B\xB2V[a\x03\x94V[\x93cz9y\xDC\x92\x95\x97a\x0C\xC0a\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\x0B\xFCV[\x86R`\x04\x86\x01a\x0CCV[\x03\x91Z\xFA\x90\x81\x15a\r\x1BW_\x91a\x0C\xEDW[P\x90V[a\r\x0E\x91P` =\x81\x11a\r\x14W[a\r\x06\x81\x83a\x0B\xD3V[\x81\x01\x90a\x0C%V[_a\x0C\xE9V[P=a\x0C\xFCV[a\x0CyV[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\r;a\r@\x91a\x0B\x99V[a\r$V[\x90V[a\rM\x90Ta\r/V[\x90V[a\rXa\r V[Pa\rb_a\rCV[\x90V[a\rv\x90a\rqa\x0FHV[a\rxV[V[\x80a\r\x93a\r\x8Da\r\x88_a\n\x0CV[a\x02\x86V[\x91a\x02\x86V[\x14a\r\xEDWa\r\xABa\r\xA4\x82a\nrV[`\x01a\n\xADV[a\r\xD5\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x06\xF2V[\x90a\r\xDEa\0\xD2V[\x80a\r\xE8\x81a\x01eV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0E\x05`\x04\x82\x01a\x01eV[\x03\x90\xFD[a\x0E\x12\x90a\reV[V[a\x0E%\x90a\x0E a\x0FHV[a\x0E'V[V[\x80a\x0EBa\x0E<a\x0E7_a\n\x0CV[a\x02\x86V[\x91a\x02\x86V[\x14a\x0ERWa\x0EP\x90a\x0F\xB9V[V[a\x0Eua\x0E^_a\n\x0CV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05gV[\x03\x90\xFD[a\x0E\x82\x90a\x0E\x14V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0E\xACa\x0E\xA7a\x0E\xB1\x92a\x06=V[a\x0E\x92V[a\x0E\x89V[\x90V[\x90V[a\x0E\xC3a\x0E\xC8\x91a\x0E\x89V[a\x0E\xB4V[\x90RV[\x90P\x90V[\x90\x91\x82a\x0E\xE1\x81a\x0E\xE8\x93a\x0E\xCCV[\x80\x93a\x08pV[\x01\x90V[\x80a\x0E\xFD`\x01\x92a\x0F\x04\x96\x94a\x0E\xB7V[\x01\x91a\x0E\xD1V[\x90V[a\x0FE\x90a\x0F\x13a\x0E\x84V[Pa\x0F6a\x0F _a\x0E\x98V[\x91\x93a\x0F*a\0\xD2V[\x94\x85\x93` \x85\x01a\x0E\xECV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\xD3V[\x90V[a\x0FPa\rPV[a\x0Fia\x0Fca\x0F^a\x10\x18V[a\x02\x86V[\x91a\x02\x86V[\x03a\x0FpWV[a\x0F\x92a\x0F{a\x10\x18V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05gV[\x03\x90\xFD[\x90V[\x90a\x0F\xAEa\x0F\xA9a\x0F\xB5\x92a\x06\xF2V[a\x0F\x96V[\x82Ta\n\x83V[\x90UV[a\x0F\xC2_a\rCV[a\x0F\xCC\x82_a\x0F\x99V[\x90a\x10\0a\x0F\xFA\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06\xF2V[\x91a\x06\xF2V[\x91a\x10\ta\0\xD2V[\x80a\x10\x13\x81a\x01eV[\x03\x90\xA3V[a\x10 a\r V[P3\x90V\xFE\xA2dipfsX\"\x12 \xFC_@\x9A\x88\xCD\xCE\xBE\0\xBE\xC9\x80\x015\x0E5\xB6O|,]fG6\xF4\x9D\xC3\x9B\"\x8Ea\x0BdsolcC\0\x08\x1D\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrProposerNotAllowed()` and selector `0xc35d8c92`.
```solidity
error TransactionOrProposerNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrProposerNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrProposerNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrProposerNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrProposerNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrProposerNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrProposerNotAllowed()";
            const SELECTOR: [u8; 4] = [195u8, 93u8, 140u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appChainId),
                )
            }
        }
    };
    /**Function with signature `appChainId()` and selector `0x83470923`.
```solidity
function appChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdCall {}
    ///Container type for the return parameters of the [`appChainId()`](appChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appChainId()";
            const SELECTOR: [u8; 4] = [131u8, 71u8, 9u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChain`](self) function calls.
    pub enum SyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        appChainId(appChainIdCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [53u8, 20u8, 211u8, 123u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [131u8, 71u8, 9u8, 35u8],
            [141u8, 165u8, 203u8, 91u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainCalls {
        const NAME: &'static str = "SyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::appChainId(_) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processBulkTransactions)
                    }
                    processBulkTransactions
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransactionRaw)
                    }
                    processTransactionRaw
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn appChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <appChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::appChainId)
                    }
                    appChainId
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::owner)
                    }
                    owner
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) custom errors.
    pub enum SyndicateSequencingChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrProposerNotAllowed(TransactionOrProposerNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [195u8, 93u8, 140u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainErrors {
        const NAME: &'static str = "SyndicateSequencingChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrProposerNotAllowed(_) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrProposerNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::TransactionOrProposerNotAllowed,
                            )
                    }
                    TransactionOrProposerNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) events.
    pub enum SyndicateSequencingChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateSequencingChainEvents {
        const NAME: &'static str = "SyndicateSequencingChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainInstance<T, P, N> {
        SyndicateSequencingChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>>,
    > {
        SyndicateSequencingChainInstance::<T, P, N>::deploy(provider, _appChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appChainId)
    }
    /**A [`SyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateSequencingChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _appChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateSequencingChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateSequencingChainInstance<T, P, N> {
            SyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`appChainId`] function.
        pub fn appChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appChainIdCall, N> {
            self.call_builder(&appChainIdCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
