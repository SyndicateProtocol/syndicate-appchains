/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChain {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _appchainId);

    function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
    function accumulator() external view returns (bytes32);
    function appchainId() external view returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function isArbChain() external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ACCUMULATOR_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "accumulator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isArbChain",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234610048576100196100146100f9565b6101c7565b61002161004d565b61158f6106b282396080518181816107cf01526112f5015260a05181610751015261158f90f35b610053565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007f90610057565b810190811060018060401b0382111761009757604052565b610061565b906100af6100a861004d565b9283610075565b565b5f80fd5b90565b6100c1816100b5565b036100c857565b5f80fd5b905051906100d9826100b8565b565b906020828203126100f4576100f1915f016100cc565b90565b6100b1565b610117611e008038038061010c8161009c565b9283398101906100db565b90565b90565b90565b61013461012f6101399261011a565b61011d565b6100b5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b610179601860209261013c565b61018281610145565b0190565b61019b9060208101905f81830391015261016c565b90565b156101a557565b6101ad61004d565b62461bcd60e51b8152806101c360048201610186565b0390fd5b6101cf61032a565b6101ec816101e56101df5f610120565b916100b5565b141561019e565b60a052565b60018060a01b031690565b61021061020b610215926101f1565b61011d565b6101f1565b90565b610221906101fc565b90565b61022d90610218565b90565b61023a6064610224565b90565b610246906101fc565b90565b6102529061023d565b90565b151590565b6102649051610255565b90565b60e01b90565b5f0190565b61027a61004d565b3d5f823e3d90fd5b60207f6c65640000000000000000000000000000000000000000000000000000000000917f41726253797320707265636f6d70696c652076616c69646174696f6e206661695f8201520152565b6102dc602360409261013c565b6102e581610282565b0190565b6102fe9060208101905f8183039101526102cf565b90565b1561030857565b61031061004d565b62461bcd60e51b815280610326600482016102e9565b0390fd5b6103326104d2565b61034261033d610230565b610249565b3b61035561034f5f610120565b916100b5565b1160805261036c610366608061025a565b15610255565b801561037e575b61037c90610301565b565b506103aa602061039461038f610230565b610249565b63a3b1b31d906103a261004d565b938492610267565b825281806103ba6004820161026d565b03915afa80156104185761037c915f916103ea575b506103e26103dc5f610120565b916100b5565b119050610373565b61040b915060203d8111610411575b6104038183610075565b8101906100db565b5f6103cf565b503d6103f9565b610272565b60a01b90565b9061043260ff60a01b9161041d565b9181191691161790565b61044590610255565b90565b90565b9061046061045b6104679261043c565b610448565b8254610423565b9055565b610474906101fc565b90565b6104809061046b565b90565b5f1b90565b9061049960018060a01b0391610483565b9181191691161790565b6104ac9061046b565b90565b90565b906104c76104c26104ce926104a3565b6104af565b8254610488565b9055565b6104db3361053f565b6104e65f600161044b565b6104ee61004d565b6101bf810181811060018060401b0382111761053a5761051682916101bf611c41843961026d565b03905ff080156105355761052c61053391610477565b60016104b2565b565b610272565b610061565b610548906105a0565b565b61055e6105596105639261011a565b61011d565b6101f1565b90565b61056f9061054a565b90565b61057b906101f1565b90565b61058790610572565b9052565b919061059e905f6020850194019061057e565b565b806105bb6105b56105b05f610566565b610572565b91610572565b146105cb576105c990610652565b565b6105ee6105d75f610566565b5f918291631e4fbdf760e01b83526004830161058b565b0390fd5b5f1c90565b60018060a01b031690565b61060e610613916105f2565b6105f7565b90565b6106209054610602565b90565b61062c9061023d565b90565b90565b9061064761064261064e92610623565b61062f565b8254610488565b9055565b61065b5f610616565b610665825f610632565b906106996106937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610623565b91610623565b916106a261004d565b806106ac8161026d565b0390a356fe60806040526004361015610013575b610859565b61001d5f3561010c565b80630338115414610107578063366cbab71461010257806346e2cc09146100fd578063485cc955146100f85780635b3cd6e2146100f357806363d96437146100ee578063715018a6146100e95780637a3979dc146100e4578063804e5123146100df5780638da5cb5b146100da578063cdafb978146100d5578063d4f0eb4d146100d0578063d8781342146100cb578063ea161ce6146100c65763f2fde38b0361000e57610826565b6107f1565b610798565b61071c565b6106ca565b610620565b6105ca565b610591565b6104e5565b6104b0565b610420565b61034f565b6102b4565b610279565b610154565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012a57565b61011c565b90565b61013b9061012f565b9052565b9190610152905f60208501940190610132565b565b3461018457610164366004610120565b61018061016f61088a565b610177610112565b9182918261013f565b0390f35b610118565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b90602082820312610209575f82013567ffffffffffffffff8111610204576102009201610199565b9091565b610189565b61011c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61024f61025860209361025d936102468161020e565b93848093610212565b9586910161021b565b610226565b0190565b6102769160208201915f818403910152610230565b90565b346102aa576102a661029561028f3660046101d8565b90610976565b61029d610112565b91829182610261565b0390f35b610118565b5f0190565b346102e3576102cd6102c73660046101d8565b90610a92565b6102d5610112565b806102df816102af565b0390f35b610118565b60018060a01b031690565b6102fc906102e8565b90565b610308816102f3565b0361030f57565b5f80fd5b90503590610320826102ff565b565b919060408382031261034a578061033e610347925f8601610313565b93602001610313565b90565b61011c565b3461037e57610368610362366004610322565b90610c44565b610370610112565b8061037a816102af565b0390f35b610118565b1c90565b60018060a01b031690565b6103a29060086103a79302610383565b610387565b90565b906103b59154610392565b90565b6103c460015f906103aa565b90565b90565b6103de6103d96103e3926102e8565b6103c7565b6102e8565b90565b6103ef906103ca565b90565b6103fb906103e6565b90565b610407906103f2565b9052565b919061041e905f602085019401906103fe565b565b3461045057610430366004610120565b61044c61043b6103b8565b610443610112565b9182918261040b565b0390f35b610118565b90565b5f1b90565b61047161046c61047692610455565b610458565b61012f565b90565b6104a27f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9061045d565b90565b6104ad610479565b90565b346104e0576104c0366004610120565b6104dc6104cb6104a5565b6104d3610112565b9182918261013f565b0390f35b610118565b34610513576104f5366004610120565b6104fd610c75565b610505610112565b8061050f816102af565b0390f35b610118565b916060838303126105655761052f825f8501610313565b9261053d8360208301610313565b92604082013567ffffffffffffffff81116105605761055c9201610199565b9091565b610189565b61011c565b151590565b6105789061056a565b9052565b919061058f905f6020850194019061056f565b565b346105c5576105c16105b06105a7366004610518565b92919091610d54565b6105b8610112565b9182918261057c565b0390f35b610118565b346105f9576105e36105dd3660046101d8565b90610e46565b6105eb610112565b806105f5816102af565b0390f35b610118565b610607906102f3565b9052565b919061061e905f602085019401906105fe565b565b3461065057610630366004610120565b61064c61063b610e82565b610643610112565b9182918261060b565b0390f35b610118565b909182601f8301121561068f5781359167ffffffffffffffff831161068a57602001926020830284011161068557565b610195565b610191565b61018d565b906020828203126106c5575f82013567ffffffffffffffff81116106c0576106bc9201610655565b9091565b610189565b61011c565b346106f9576106e36106dd366004610694565b90610f51565b6106eb610112565b806106f5816102af565b0390f35b610118565b9060208282031261071757610714915f01610313565b90565b61011c565b3461074a5761073461072f3660046106fe565b61108e565b61073c610112565b80610746816102af565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61077f90610773565b9052565b9190610796905f60208501940190610776565b565b346107c8576107a8366004610120565b6107c46107b361074f565b6107bb610112565b91829182610783565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461082157610801366004610120565b61081d61080c6107cd565b610814610112565b9182918261057c565b0390f35b610118565b346108545761083e6108393660046106fe565b6110fe565b610846610112565b80610850816102af565b0390f35b610118565b5f80fd5b5f90565b5f1c90565b90565b61087561087a91610861565b610866565b90565b6108879054610869565b90565b61089261085d565b506108a55f61089f611109565b0161087d565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b6108d36108ce6108d8926108ad565b6108b9565b6108b0565b90565b90565b6108ea6108ef916108b0565b6108db565b9052565b905090565b90825f939282370152565b9091826109138161091a936108f3565b80936108f8565b0190565b8061092f60019261093696946108de565b0191610903565b90565b634e487b7160e01b5f52604160045260245ffd5b9061095790610226565b810190811067ffffffffffffffff82111761097157604052565b610939565b6109b4906109826108a8565b506109a561098f5f6108bf565b9193610999610112565b9485936020850161091e565b6020820181038252038261094d565b90565b906109d36109cd33329085859192909192610d54565b1561056a565b6109e2576109e091610a7e565b565b5f631b8e828b60e31b8152806109fa600482016102af565b0390fd5b5f80fd5b90610a15610a0e610112565b928361094d565b565b67ffffffffffffffff8111610a3557610a31602091610226565b0190565b610939565b90929192610a4f610a4a82610a17565b610a02565b93818552602085019082840111610a6b57610a69926108f8565b565b6109fe565b610a7b913691610a3a565b90565b610a9091610a8b91610a70565b6112ea565b565b90610a9c916109b7565b565b90610ab091610aab6114b2565b610bb7565b565b60a01c90565b60ff1690565b610aca610acf91610ab2565b610ab8565b90565b610adc9054610abe565b90565b610af3610aee610af8926108ad565b6103c7565b6102e8565b90565b610b0490610adf565b90565b60a01b90565b90610b1c60ff60a01b91610b07565b9181191691161790565b610b2f9061056a565b90565b90565b90610b4a610b45610b5192610b26565b610b32565b8254610b0d565b9055565b610b5e906103ca565b90565b610b6a90610b55565b90565b90610b7e60018060a01b0391610458565b9181191691161790565b610b9190610b55565b90565b90565b90610bac610ba7610bb392610b88565b610b94565b8254610b6d565b9055565b610bc16001610ad2565b610c295781610be0610bda610bd55f610afb565b6102f3565b916102f3565b14610c0d57610c06610bff610c0b93610bfa600180610b35565b610b61565b6001610b97565b6110fe565b565b5f632e7f3c7f60e11b815280610c25600482016102af565b0390fd5b5f62dc149f60e41b815280610c40600482016102af565b0390fd5b90610c4e91610a9e565b565b610c586114b2565b610c60610c62565b565b610c73610c6e5f610afb565b611523565b565b610c7d610c50565b565b5f90565b610c8f610c9491610861565b610387565b90565b610ca19054610c83565b90565b60e01b90565b610cb38161056a565b03610cba57565b5f80fd5b90505190610ccb82610caa565b565b90602082820312610ce657610ce3915f01610cbe565b90565b61011c565b9190610d0581610cfe81610d0a95610212565b80956108f8565b610226565b0190565b610d34610d419593949294610d2a60608401965f8501906105fe565b60208301906105fe565b6040818503910152610ceb565b90565b610d4c610112565b3d5f823e3d90fd5b92610d9760209394610d64610c7f565b50610da2610d7a610d756001610c97565b6103f2565b93637a3979dc929597610d8b610112565b98899788968796610ca4565b865260048601610d0e565b03915afa908115610de6575f91610db8575b5090565b610dd9915060203d8111610ddf575b610dd1818361094d565b810190610ccd565b5f610db4565b503d610dc7565b610d44565b90610e07610e0133329085859192909192610d54565b1561056a565b610e1657610e1491610e32565b565b5f631b8e828b60e31b815280610e2e600482016102af565b0390fd5b610e4491610e3f91610976565b6112ea565b565b90610e5091610deb565b565b5f90565b60018060a01b031690565b610e6d610e7291610861565b610e56565b90565b610e7f9054610e61565b90565b610e8a610e52565b50610e945f610e75565b90565b5090565b5f90565b610eb3610eae610eb8926108ad565b6103c7565b610773565b90565b6001610ec79101610773565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610f2c570180359067ffffffffffffffff8211610f2757602001916001820236038313610f2257565b610ee6565b610ee2565b610ede565b90821015610f4c576020610f489202810190610eea565b9091565b610eca565b610f5c818390610e97565b91610f65610e9b565b50610f6f5f610e9f565b5b80610f83610f7d86610773565b91610773565b1015610fd857610fb190610fa7333290610f9f87878691610f31565b929091610d54565b610fb6575b610ebb565b610f70565b610fd3610fce610fc886868591610f31565b90610976565b6112ea565b610fac565b50505050565b610fef90610fea6114b2565b610ffd565b565b610ffa906103e6565b90565b8061101861101261100d5f610afb565b6102f3565b916102f3565b146110725761103061102982610b61565b6001610b97565b61105a7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610ff1565b90611063610112565b8061106d816102af565b0390a2565b5f632e7f3c7f60e11b81528061108a600482016102af565b0390fd5b61109790610fde565b565b6110aa906110a56114b2565b6110ac565b565b806110c76110c16110bc5f610afb565b6102f3565b916102f3565b146110d7576110d590611523565b565b6110fa6110e35f610afb565b5f918291631e4fbdf760e01b83526004830161060b565b0390fd5b61110790611099565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61115261114d61115792610773565b6103c7565b611131565b90565b611163906103ca565b90565b61116f9061115a565b90565b61117c6064611166565b90565b611188906103e6565b90565b61119481610773565b0361119b57565b5f80fd5b905051906111ac8261118b565b565b906020828203126111c7576111c4915f0161119f565b90565b61011c565b60200190565b60601b90565b6111e1906111d2565b90565b6111ed906111d8565b90565b6111fc611201916102f3565b6111e4565b9052565b60c01b90565b61121490611205565b90565b61122361122891611131565b61120b565b9052565b90565b61123b6112409161012f565b61122c565b9052565b92611272600861127a9461126a60148861126260209b9a86996111f0565b018092611217565b018092611217565b01809261122f565b0190565b6020816112906112989383969561122f565b01809261122f565b0190565b906112a85f1991610458565b9181191691161790565b6112bb9061012f565b90565b6112c790610861565b90565b906112df6112da6112e6926112b2565b6112be565b825461129c565b9055565b6112f261112d565b507f00000000000000000000000000000000000000000000000000000000000000005f146114a157611345602061132f61132a611172565b61117f565b63a3b1b31d9061133d610112565b938492610ca4565b82528180611355600482016102af565b03915afa90811561149c5761142991611375915f9161146e575b5061113e565b5b5f61137f611109565b916113c8336113b96113904261113e565b886113a361139d8261020e565b916111cc565b20906113ad610112565b95869460208601611244565b6020820181038252038261094d565b6113da6113d48261020e565b916111cc565b2061140f6113e983850161087d565b6114006113f4610112565b9384926020840161127e565b6020820181038252038261094d565b61142161141b8261020e565b916111cc565b2091016112ca565b336114696114577f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ff1565b92611460610112565b91829182610261565b0390a2565b61148f915060203d8111611495575b611487818361094d565b8101906111ae565b5f61136f565b503d61147d565b610d44565b6114296114ad4361113e565b611376565b6114ba610e82565b6114d36114cd6114c8611582565b6102f3565b916102f3565b036114da57565b6114fc6114e5611582565b5f91829163118cdaa760e01b83526004830161060b565b0390fd5b90565b9061151861151361151f92610ff1565b611500565b8254610b6d565b9055565b61152c5f610e75565b611536825f611503565b9061156a6115647f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ff1565b91610ff1565b91611573610112565b8061157d816102af565b0390a3565b61158a610e52565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4a\0HWa\0\x19a\0\x14a\0\xF9V[a\x01\xC7V[a\0!a\0MV[a\x15\x8Fa\x06\xB2\x829`\x80Q\x81\x81\x81a\x07\xCF\x01Ra\x12\xF5\x01R`\xA0Q\x81a\x07Q\x01Ra\x15\x8F\x90\xF3[a\0SV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x7F\x90a\0WV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x97W`@RV[a\0aV[\x90a\0\xAFa\0\xA8a\0MV[\x92\x83a\0uV[V[_\x80\xFD[\x90V[a\0\xC1\x81a\0\xB5V[\x03a\0\xC8WV[_\x80\xFD[\x90PQ\x90a\0\xD9\x82a\0\xB8V[V[\x90` \x82\x82\x03\x12a\0\xF4Wa\0\xF1\x91_\x01a\0\xCCV[\x90V[a\0\xB1V[a\x01\x17a\x1E\0\x808\x03\x80a\x01\x0C\x81a\0\x9CV[\x92\x839\x81\x01\x90a\0\xDBV[\x90V[\x90V[\x90V[a\x014a\x01/a\x019\x92a\x01\x1AV[a\x01\x1DV[a\0\xB5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01y`\x18` \x92a\x01<V[a\x01\x82\x81a\x01EV[\x01\x90V[a\x01\x9B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01lV[\x90V[\x15a\x01\xA5WV[a\x01\xADa\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xC3`\x04\x82\x01a\x01\x86V[\x03\x90\xFD[a\x01\xCFa\x03*V[a\x01\xEC\x81a\x01\xE5a\x01\xDF_a\x01 V[\x91a\0\xB5V[\x14\x15a\x01\x9EV[`\xA0RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x10a\x02\x0Ba\x02\x15\x92a\x01\xF1V[a\x01\x1DV[a\x01\xF1V[\x90V[a\x02!\x90a\x01\xFCV[\x90V[a\x02-\x90a\x02\x18V[\x90V[a\x02:`da\x02$V[\x90V[a\x02F\x90a\x01\xFCV[\x90V[a\x02R\x90a\x02=V[\x90V[\x15\x15\x90V[a\x02d\x90Qa\x02UV[\x90V[`\xE0\x1B\x90V[_\x01\x90V[a\x02za\0MV[=_\x82>=\x90\xFD[` \x7Fled\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbSys precompile validation fai_\x82\x01R\x01RV[a\x02\xDC`#`@\x92a\x01<V[a\x02\xE5\x81a\x02\x82V[\x01\x90V[a\x02\xFE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xCFV[\x90V[\x15a\x03\x08WV[a\x03\x10a\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03&`\x04\x82\x01a\x02\xE9V[\x03\x90\xFD[a\x032a\x04\xD2V[a\x03Ba\x03=a\x020V[a\x02IV[;a\x03Ua\x03O_a\x01 V[\x91a\0\xB5V[\x11`\x80Ra\x03la\x03f`\x80a\x02ZV[\x15a\x02UV[\x80\x15a\x03~W[a\x03|\x90a\x03\x01V[V[Pa\x03\xAA` a\x03\x94a\x03\x8Fa\x020V[a\x02IV[c\xA3\xB1\xB3\x1D\x90a\x03\xA2a\0MV[\x93\x84\x92a\x02gV[\x82R\x81\x80a\x03\xBA`\x04\x82\x01a\x02mV[\x03\x91Z\xFA\x80\x15a\x04\x18Wa\x03|\x91_\x91a\x03\xEAW[Pa\x03\xE2a\x03\xDC_a\x01 V[\x91a\0\xB5V[\x11\x90Pa\x03sV[a\x04\x0B\x91P` =\x81\x11a\x04\x11W[a\x04\x03\x81\x83a\0uV[\x81\x01\x90a\0\xDBV[_a\x03\xCFV[P=a\x03\xF9V[a\x02rV[`\xA0\x1B\x90V[\x90a\x042`\xFF`\xA0\x1B\x91a\x04\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04E\x90a\x02UV[\x90V[\x90V[\x90a\x04`a\x04[a\x04g\x92a\x04<V[a\x04HV[\x82Ta\x04#V[\x90UV[a\x04t\x90a\x01\xFCV[\x90V[a\x04\x80\x90a\x04kV[\x90V[_\x1B\x90V[\x90a\x04\x99`\x01\x80`\xA0\x1B\x03\x91a\x04\x83V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xAC\x90a\x04kV[\x90V[\x90V[\x90a\x04\xC7a\x04\xC2a\x04\xCE\x92a\x04\xA3V[a\x04\xAFV[\x82Ta\x04\x88V[\x90UV[a\x04\xDB3a\x05?V[a\x04\xE6_`\x01a\x04KV[a\x04\xEEa\0MV[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x05:Wa\x05\x16\x82\x91a\x01\xBFa\x1CA\x849a\x02mV[\x03\x90_\xF0\x80\x15a\x055Wa\x05,a\x053\x91a\x04wV[`\x01a\x04\xB2V[V[a\x02rV[a\0aV[a\x05H\x90a\x05\xA0V[V[a\x05^a\x05Ya\x05c\x92a\x01\x1AV[a\x01\x1DV[a\x01\xF1V[\x90V[a\x05o\x90a\x05JV[\x90V[a\x05{\x90a\x01\xF1V[\x90V[a\x05\x87\x90a\x05rV[\x90RV[\x91\x90a\x05\x9E\x90_` \x85\x01\x94\x01\x90a\x05~V[V[\x80a\x05\xBBa\x05\xB5a\x05\xB0_a\x05fV[a\x05rV[\x91a\x05rV[\x14a\x05\xCBWa\x05\xC9\x90a\x06RV[V[a\x05\xEEa\x05\xD7_a\x05fV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\x8BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\x0Ea\x06\x13\x91a\x05\xF2V[a\x05\xF7V[\x90V[a\x06 \x90Ta\x06\x02V[\x90V[a\x06,\x90a\x02=V[\x90V[\x90V[\x90a\x06Ga\x06Ba\x06N\x92a\x06#V[a\x06/V[\x82Ta\x04\x88V[\x90UV[a\x06[_a\x06\x16V[a\x06e\x82_a\x062V[\x90a\x06\x99a\x06\x93\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06#V[\x91a\x06#V[\x91a\x06\xA2a\0MV[\x80a\x06\xAC\x81a\x02mV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08YV[a\0\x1D_5a\x01\x0CV[\x80c\x038\x11T\x14a\x01\x07W\x80c6l\xBA\xB7\x14a\x01\x02W\x80cF\xE2\xCC\t\x14a\0\xFDW\x80cH\\\xC9U\x14a\0\xF8W\x80c[<\xD6\xE2\x14a\0\xF3W\x80cc\xD9d7\x14a\0\xEEW\x80cqP\x18\xA6\x14a\0\xE9W\x80cz9y\xDC\x14a\0\xE4W\x80c\x80NQ#\x14a\0\xDFW\x80c\x8D\xA5\xCB[\x14a\0\xDAW\x80c\xCD\xAF\xB9x\x14a\0\xD5W\x80c\xD4\xF0\xEBM\x14a\0\xD0W\x80c\xD8x\x13B\x14a\0\xCBW\x80c\xEA\x16\x1C\xE6\x14a\0\xC6Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x08&V[a\x07\xF1V[a\x07\x98V[a\x07\x1CV[a\x06\xCAV[a\x06 V[a\x05\xCAV[a\x05\x91V[a\x04\xE5V[a\x04\xB0V[a\x04 V[a\x03OV[a\x02\xB4V[a\x02yV[a\x01TV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01*WV[a\x01\x1CV[\x90V[a\x01;\x90a\x01/V[\x90RV[\x91\x90a\x01R\x90_` \x85\x01\x94\x01\x90a\x012V[V[4a\x01\x84Wa\x01d6`\x04a\x01 V[a\x01\x80a\x01oa\x08\x8AV[a\x01wa\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x02\tW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x04Wa\x02\0\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02Oa\x02X` \x93a\x02]\x93a\x02F\x81a\x02\x0EV[\x93\x84\x80\x93a\x02\x12V[\x95\x86\x91\x01a\x02\x1BV[a\x02&V[\x01\x90V[a\x02v\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x020V[\x90V[4a\x02\xAAWa\x02\xA6a\x02\x95a\x02\x8F6`\x04a\x01\xD8V[\x90a\tvV[a\x02\x9Da\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\x01\x18V[_\x01\x90V[4a\x02\xE3Wa\x02\xCDa\x02\xC76`\x04a\x01\xD8V[\x90a\n\x92V[a\x02\xD5a\x01\x12V[\x80a\x02\xDF\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFC\x90a\x02\xE8V[\x90V[a\x03\x08\x81a\x02\xF3V[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x91\x90`@\x83\x82\x03\x12a\x03JW\x80a\x03>a\x03G\x92_\x86\x01a\x03\x13V[\x93` \x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x03~Wa\x03ha\x03b6`\x04a\x03\"V[\x90a\x0CDV[a\x03pa\x01\x12V[\x80a\x03z\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA2\x90`\x08a\x03\xA7\x93\x02a\x03\x83V[a\x03\x87V[\x90V[\x90a\x03\xB5\x91Ta\x03\x92V[\x90V[a\x03\xC4`\x01_\x90a\x03\xAAV[\x90V[\x90V[a\x03\xDEa\x03\xD9a\x03\xE3\x92a\x02\xE8V[a\x03\xC7V[a\x02\xE8V[\x90V[a\x03\xEF\x90a\x03\xCAV[\x90V[a\x03\xFB\x90a\x03\xE6V[\x90V[a\x04\x07\x90a\x03\xF2V[\x90RV[\x91\x90a\x04\x1E\x90_` \x85\x01\x94\x01\x90a\x03\xFEV[V[4a\x04PWa\x0406`\x04a\x01 V[a\x04La\x04;a\x03\xB8V[a\x04Ca\x01\x12V[\x91\x82\x91\x82a\x04\x0BV[\x03\x90\xF3[a\x01\x18V[\x90V[_\x1B\x90V[a\x04qa\x04la\x04v\x92a\x04UV[a\x04XV[a\x01/V[\x90V[a\x04\xA2\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x04]V[\x90V[a\x04\xADa\x04yV[\x90V[4a\x04\xE0Wa\x04\xC06`\x04a\x01 V[a\x04\xDCa\x04\xCBa\x04\xA5V[a\x04\xD3a\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[4a\x05\x13Wa\x04\xF56`\x04a\x01 V[a\x04\xFDa\x0CuV[a\x05\x05a\x01\x12V[\x80a\x05\x0F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x91``\x83\x83\x03\x12a\x05eWa\x05/\x82_\x85\x01a\x03\x13V[\x92a\x05=\x83` \x83\x01a\x03\x13V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05`Wa\x05\\\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[\x15\x15\x90V[a\x05x\x90a\x05jV[\x90RV[\x91\x90a\x05\x8F\x90_` \x85\x01\x94\x01\x90a\x05oV[V[4a\x05\xC5Wa\x05\xC1a\x05\xB0a\x05\xA76`\x04a\x05\x18V[\x92\x91\x90\x91a\rTV[a\x05\xB8a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x05\xF9Wa\x05\xE3a\x05\xDD6`\x04a\x01\xD8V[\x90a\x0EFV[a\x05\xEBa\x01\x12V[\x80a\x05\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[a\x06\x07\x90a\x02\xF3V[\x90RV[\x91\x90a\x06\x1E\x90_` \x85\x01\x94\x01\x90a\x05\xFEV[V[4a\x06PWa\x0606`\x04a\x01 V[a\x06La\x06;a\x0E\x82V[a\x06Ca\x01\x12V[\x91\x82\x91\x82a\x06\x0BV[\x03\x90\xF3[a\x01\x18V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x8FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\x8AW` \x01\x92` \x83\x02\x84\x01\x11a\x06\x85WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x06\xC5W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xC0Wa\x06\xBC\x92\x01a\x06UV[\x90\x91V[a\x01\x89V[a\x01\x1CV[4a\x06\xF9Wa\x06\xE3a\x06\xDD6`\x04a\x06\x94V[\x90a\x0FQV[a\x06\xEBa\x01\x12V[\x80a\x06\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x90` \x82\x82\x03\x12a\x07\x17Wa\x07\x14\x91_\x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x07JWa\x074a\x07/6`\x04a\x06\xFEV[a\x10\x8EV[a\x07<a\x01\x12V[\x80a\x07F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07\x7F\x90a\x07sV[\x90RV[\x91\x90a\x07\x96\x90_` \x85\x01\x94\x01\x90a\x07vV[V[4a\x07\xC8Wa\x07\xA86`\x04a\x01 V[a\x07\xC4a\x07\xB3a\x07OV[a\x07\xBBa\x01\x12V[\x91\x82\x91\x82a\x07\x83V[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x08!Wa\x08\x016`\x04a\x01 V[a\x08\x1Da\x08\x0Ca\x07\xCDV[a\x08\x14a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x08TWa\x08>a\x0896`\x04a\x06\xFEV[a\x10\xFEV[a\x08Fa\x01\x12V[\x80a\x08P\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08ua\x08z\x91a\x08aV[a\x08fV[\x90V[a\x08\x87\x90Ta\x08iV[\x90V[a\x08\x92a\x08]V[Pa\x08\xA5_a\x08\x9Fa\x11\tV[\x01a\x08}V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08\xD3a\x08\xCEa\x08\xD8\x92a\x08\xADV[a\x08\xB9V[a\x08\xB0V[\x90V[\x90V[a\x08\xEAa\x08\xEF\x91a\x08\xB0V[a\x08\xDBV[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\t\x13\x81a\t\x1A\x93a\x08\xF3V[\x80\x93a\x08\xF8V[\x01\x90V[\x80a\t/`\x01\x92a\t6\x96\x94a\x08\xDEV[\x01\x91a\t\x03V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\tW\x90a\x02&V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\tqW`@RV[a\t9V[a\t\xB4\x90a\t\x82a\x08\xA8V[Pa\t\xA5a\t\x8F_a\x08\xBFV[\x91\x93a\t\x99a\x01\x12V[\x94\x85\x93` \x85\x01a\t\x1EV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[\x90V[\x90a\t\xD3a\t\xCD32\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\t\xE2Wa\t\xE0\x91a\n~V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\xFA`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_\x80\xFD[\x90a\n\x15a\n\x0Ea\x01\x12V[\x92\x83a\tMV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n5Wa\n1` \x91a\x02&V[\x01\x90V[a\t9V[\x90\x92\x91\x92a\nOa\nJ\x82a\n\x17V[a\n\x02V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\nkWa\ni\x92a\x08\xF8V[V[a\t\xFEV[a\n{\x916\x91a\n:V[\x90V[a\n\x90\x91a\n\x8B\x91a\npV[a\x12\xEAV[V[\x90a\n\x9C\x91a\t\xB7V[V[\x90a\n\xB0\x91a\n\xABa\x14\xB2V[a\x0B\xB7V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\n\xCAa\n\xCF\x91a\n\xB2V[a\n\xB8V[\x90V[a\n\xDC\x90Ta\n\xBEV[\x90V[a\n\xF3a\n\xEEa\n\xF8\x92a\x08\xADV[a\x03\xC7V[a\x02\xE8V[\x90V[a\x0B\x04\x90a\n\xDFV[\x90V[`\xA0\x1B\x90V[\x90a\x0B\x1C`\xFF`\xA0\x1B\x91a\x0B\x07V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B/\x90a\x05jV[\x90V[\x90V[\x90a\x0BJa\x0BEa\x0BQ\x92a\x0B&V[a\x0B2V[\x82Ta\x0B\rV[\x90UV[a\x0B^\x90a\x03\xCAV[\x90V[a\x0Bj\x90a\x0BUV[\x90V[\x90a\x0B~`\x01\x80`\xA0\x1B\x03\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x91\x90a\x0BUV[\x90V[\x90V[\x90a\x0B\xACa\x0B\xA7a\x0B\xB3\x92a\x0B\x88V[a\x0B\x94V[\x82Ta\x0BmV[\x90UV[a\x0B\xC1`\x01a\n\xD2V[a\x0C)W\x81a\x0B\xE0a\x0B\xDAa\x0B\xD5_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x0C\rWa\x0C\x06a\x0B\xFFa\x0C\x0B\x93a\x0B\xFA`\x01\x80a\x0B5V[a\x0BaV[`\x01a\x0B\x97V[a\x10\xFEV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C%`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C@`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[\x90a\x0CN\x91a\n\x9EV[V[a\x0CXa\x14\xB2V[a\x0C`a\x0CbV[V[a\x0Csa\x0Cn_a\n\xFBV[a\x15#V[V[a\x0C}a\x0CPV[V[_\x90V[a\x0C\x8Fa\x0C\x94\x91a\x08aV[a\x03\x87V[\x90V[a\x0C\xA1\x90Ta\x0C\x83V[\x90V[`\xE0\x1B\x90V[a\x0C\xB3\x81a\x05jV[\x03a\x0C\xBAWV[_\x80\xFD[\x90PQ\x90a\x0C\xCB\x82a\x0C\xAAV[V[\x90` \x82\x82\x03\x12a\x0C\xE6Wa\x0C\xE3\x91_\x01a\x0C\xBEV[\x90V[a\x01\x1CV[\x91\x90a\r\x05\x81a\x0C\xFE\x81a\r\n\x95a\x02\x12V[\x80\x95a\x08\xF8V[a\x02&V[\x01\x90V[a\r4a\rA\x95\x93\x94\x92\x94a\r*``\x84\x01\x96_\x85\x01\x90a\x05\xFEV[` \x83\x01\x90a\x05\xFEV[`@\x81\x85\x03\x91\x01Ra\x0C\xEBV[\x90V[a\rLa\x01\x12V[=_\x82>=\x90\xFD[\x92a\r\x97` \x93\x94a\rda\x0C\x7FV[Pa\r\xA2a\rza\ru`\x01a\x0C\x97V[a\x03\xF2V[\x93cz9y\xDC\x92\x95\x97a\r\x8Ba\x01\x12V[\x98\x89\x97\x88\x96\x87\x96a\x0C\xA4V[\x86R`\x04\x86\x01a\r\x0EV[\x03\x91Z\xFA\x90\x81\x15a\r\xE6W_\x91a\r\xB8W[P\x90V[a\r\xD9\x91P` =\x81\x11a\r\xDFW[a\r\xD1\x81\x83a\tMV[\x81\x01\x90a\x0C\xCDV[_a\r\xB4V[P=a\r\xC7V[a\rDV[\x90a\x0E\x07a\x0E\x0132\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\x0E\x16Wa\x0E\x14\x91a\x0E2V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E.`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x0ED\x91a\x0E?\x91a\tvV[a\x12\xEAV[V[\x90a\x0EP\x91a\r\xEBV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0Ema\x0Er\x91a\x08aV[a\x0EVV[\x90V[a\x0E\x7F\x90Ta\x0EaV[\x90V[a\x0E\x8Aa\x0ERV[Pa\x0E\x94_a\x0EuV[\x90V[P\x90V[_\x90V[a\x0E\xB3a\x0E\xAEa\x0E\xB8\x92a\x08\xADV[a\x03\xC7V[a\x07sV[\x90V[`\x01a\x0E\xC7\x91\x01a\x07sV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0F,W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F'W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0F\"WV[a\x0E\xE6V[a\x0E\xE2V[a\x0E\xDEV[\x90\x82\x10\x15a\x0FLW` a\x0FH\x92\x02\x81\x01\x90a\x0E\xEAV[\x90\x91V[a\x0E\xCAV[a\x0F\\\x81\x83\x90a\x0E\x97V[\x91a\x0Fea\x0E\x9BV[Pa\x0Fo_a\x0E\x9FV[[\x80a\x0F\x83a\x0F}\x86a\x07sV[\x91a\x07sV[\x10\x15a\x0F\xD8Wa\x0F\xB1\x90a\x0F\xA732\x90a\x0F\x9F\x87\x87\x86\x91a\x0F1V[\x92\x90\x91a\rTV[a\x0F\xB6W[a\x0E\xBBV[a\x0FpV[a\x0F\xD3a\x0F\xCEa\x0F\xC8\x86\x86\x85\x91a\x0F1V[\x90a\tvV[a\x12\xEAV[a\x0F\xACV[PPPPV[a\x0F\xEF\x90a\x0F\xEAa\x14\xB2V[a\x0F\xFDV[V[a\x0F\xFA\x90a\x03\xE6V[\x90V[\x80a\x10\x18a\x10\x12a\x10\r_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10rWa\x100a\x10)\x82a\x0BaV[`\x01a\x0B\x97V[a\x10Z\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F\xF1V[\x90a\x10ca\x01\x12V[\x80a\x10m\x81a\x02\xAFV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\x8A`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x10\x97\x90a\x0F\xDEV[V[a\x10\xAA\x90a\x10\xA5a\x14\xB2V[a\x10\xACV[V[\x80a\x10\xC7a\x10\xC1a\x10\xBC_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10\xD7Wa\x10\xD5\x90a\x15#V[V[a\x10\xFAa\x10\xE3_a\n\xFBV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[a\x11\x07\x90a\x10\x99V[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11Ra\x11Ma\x11W\x92a\x07sV[a\x03\xC7V[a\x111V[\x90V[a\x11c\x90a\x03\xCAV[\x90V[a\x11o\x90a\x11ZV[\x90V[a\x11|`da\x11fV[\x90V[a\x11\x88\x90a\x03\xE6V[\x90V[a\x11\x94\x81a\x07sV[\x03a\x11\x9BWV[_\x80\xFD[\x90PQ\x90a\x11\xAC\x82a\x11\x8BV[V[\x90` \x82\x82\x03\x12a\x11\xC7Wa\x11\xC4\x91_\x01a\x11\x9FV[\x90V[a\x01\x1CV[` \x01\x90V[``\x1B\x90V[a\x11\xE1\x90a\x11\xD2V[\x90V[a\x11\xED\x90a\x11\xD8V[\x90V[a\x11\xFCa\x12\x01\x91a\x02\xF3V[a\x11\xE4V[\x90RV[`\xC0\x1B\x90V[a\x12\x14\x90a\x12\x05V[\x90V[a\x12#a\x12(\x91a\x111V[a\x12\x0BV[\x90RV[\x90V[a\x12;a\x12@\x91a\x01/V[a\x12,V[\x90RV[\x92a\x12r`\x08a\x12z\x94a\x12j`\x14\x88a\x12b` \x9B\x9A\x86\x99a\x11\xF0V[\x01\x80\x92a\x12\x17V[\x01\x80\x92a\x12\x17V[\x01\x80\x92a\x12/V[\x01\x90V[` \x81a\x12\x90a\x12\x98\x93\x83\x96\x95a\x12/V[\x01\x80\x92a\x12/V[\x01\x90V[\x90a\x12\xA8_\x19\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xBB\x90a\x01/V[\x90V[a\x12\xC7\x90a\x08aV[\x90V[\x90a\x12\xDFa\x12\xDAa\x12\xE6\x92a\x12\xB2V[a\x12\xBEV[\x82Ta\x12\x9CV[\x90UV[a\x12\xF2a\x11-V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x14\xA1Wa\x13E` a\x13/a\x13*a\x11rV[a\x11\x7FV[c\xA3\xB1\xB3\x1D\x90a\x13=a\x01\x12V[\x93\x84\x92a\x0C\xA4V[\x82R\x81\x80a\x13U`\x04\x82\x01a\x02\xAFV[\x03\x91Z\xFA\x90\x81\x15a\x14\x9CWa\x14)\x91a\x13u\x91_\x91a\x14nW[Pa\x11>V[[_a\x13\x7Fa\x11\tV[\x91a\x13\xC83a\x13\xB9a\x13\x90Ba\x11>V[\x88a\x13\xA3a\x13\x9D\x82a\x02\x0EV[\x91a\x11\xCCV[ \x90a\x13\xADa\x01\x12V[\x95\x86\x94` \x86\x01a\x12DV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x13\xDAa\x13\xD4\x82a\x02\x0EV[\x91a\x11\xCCV[ a\x14\x0Fa\x13\xE9\x83\x85\x01a\x08}V[a\x14\0a\x13\xF4a\x01\x12V[\x93\x84\x92` \x84\x01a\x12~V[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x14!a\x14\x1B\x82a\x02\x0EV[\x91a\x11\xCCV[ \x91\x01a\x12\xCAV[3a\x14ia\x14W\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F\xF1V[\x92a\x14`a\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xA2V[a\x14\x8F\x91P` =\x81\x11a\x14\x95W[a\x14\x87\x81\x83a\tMV[\x81\x01\x90a\x11\xAEV[_a\x13oV[P=a\x14}V[a\rDV[a\x14)a\x14\xADCa\x11>V[a\x13vV[a\x14\xBAa\x0E\x82V[a\x14\xD3a\x14\xCDa\x14\xC8a\x15\x82V[a\x02\xF3V[\x91a\x02\xF3V[\x03a\x14\xDAWV[a\x14\xFCa\x14\xE5a\x15\x82V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[\x90V[\x90a\x15\x18a\x15\x13a\x15\x1F\x92a\x0F\xF1V[a\x15\0V[\x82Ta\x0BmV[\x90UV[a\x15,_a\x0EuV[a\x156\x82_a\x15\x03V[\x90a\x15ja\x15d\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\xF1V[\x91a\x0F\xF1V[\x91a\x15sa\x01\x12V[\x80a\x15}\x81a\x02\xAFV[\x03\x90\xA3V[a\x15\x8Aa\x0ERV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610859565b61001d5f3561010c565b80630338115414610107578063366cbab71461010257806346e2cc09146100fd578063485cc955146100f85780635b3cd6e2146100f357806363d96437146100ee578063715018a6146100e95780637a3979dc146100e4578063804e5123146100df5780638da5cb5b146100da578063cdafb978146100d5578063d4f0eb4d146100d0578063d8781342146100cb578063ea161ce6146100c65763f2fde38b0361000e57610826565b6107f1565b610798565b61071c565b6106ca565b610620565b6105ca565b610591565b6104e5565b6104b0565b610420565b61034f565b6102b4565b610279565b610154565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012a57565b61011c565b90565b61013b9061012f565b9052565b9190610152905f60208501940190610132565b565b3461018457610164366004610120565b61018061016f61088a565b610177610112565b9182918261013f565b0390f35b610118565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b90602082820312610209575f82013567ffffffffffffffff8111610204576102009201610199565b9091565b610189565b61011c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61024f61025860209361025d936102468161020e565b93848093610212565b9586910161021b565b610226565b0190565b6102769160208201915f818403910152610230565b90565b346102aa576102a661029561028f3660046101d8565b90610976565b61029d610112565b91829182610261565b0390f35b610118565b5f0190565b346102e3576102cd6102c73660046101d8565b90610a92565b6102d5610112565b806102df816102af565b0390f35b610118565b60018060a01b031690565b6102fc906102e8565b90565b610308816102f3565b0361030f57565b5f80fd5b90503590610320826102ff565b565b919060408382031261034a578061033e610347925f8601610313565b93602001610313565b90565b61011c565b3461037e57610368610362366004610322565b90610c44565b610370610112565b8061037a816102af565b0390f35b610118565b1c90565b60018060a01b031690565b6103a29060086103a79302610383565b610387565b90565b906103b59154610392565b90565b6103c460015f906103aa565b90565b90565b6103de6103d96103e3926102e8565b6103c7565b6102e8565b90565b6103ef906103ca565b90565b6103fb906103e6565b90565b610407906103f2565b9052565b919061041e905f602085019401906103fe565b565b3461045057610430366004610120565b61044c61043b6103b8565b610443610112565b9182918261040b565b0390f35b610118565b90565b5f1b90565b61047161046c61047692610455565b610458565b61012f565b90565b6104a27f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9061045d565b90565b6104ad610479565b90565b346104e0576104c0366004610120565b6104dc6104cb6104a5565b6104d3610112565b9182918261013f565b0390f35b610118565b34610513576104f5366004610120565b6104fd610c75565b610505610112565b8061050f816102af565b0390f35b610118565b916060838303126105655761052f825f8501610313565b9261053d8360208301610313565b92604082013567ffffffffffffffff81116105605761055c9201610199565b9091565b610189565b61011c565b151590565b6105789061056a565b9052565b919061058f905f6020850194019061056f565b565b346105c5576105c16105b06105a7366004610518565b92919091610d54565b6105b8610112565b9182918261057c565b0390f35b610118565b346105f9576105e36105dd3660046101d8565b90610e46565b6105eb610112565b806105f5816102af565b0390f35b610118565b610607906102f3565b9052565b919061061e905f602085019401906105fe565b565b3461065057610630366004610120565b61064c61063b610e82565b610643610112565b9182918261060b565b0390f35b610118565b909182601f8301121561068f5781359167ffffffffffffffff831161068a57602001926020830284011161068557565b610195565b610191565b61018d565b906020828203126106c5575f82013567ffffffffffffffff81116106c0576106bc9201610655565b9091565b610189565b61011c565b346106f9576106e36106dd366004610694565b90610f51565b6106eb610112565b806106f5816102af565b0390f35b610118565b9060208282031261071757610714915f01610313565b90565b61011c565b3461074a5761073461072f3660046106fe565b61108e565b61073c610112565b80610746816102af565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61077f90610773565b9052565b9190610796905f60208501940190610776565b565b346107c8576107a8366004610120565b6107c46107b361074f565b6107bb610112565b91829182610783565b0390f35b610118565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461082157610801366004610120565b61081d61080c6107cd565b610814610112565b9182918261057c565b0390f35b610118565b346108545761083e6108393660046106fe565b6110fe565b610846610112565b80610850816102af565b0390f35b610118565b5f80fd5b5f90565b5f1c90565b90565b61087561087a91610861565b610866565b90565b6108879054610869565b90565b61089261085d565b506108a55f61089f611109565b0161087d565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b6108d36108ce6108d8926108ad565b6108b9565b6108b0565b90565b90565b6108ea6108ef916108b0565b6108db565b9052565b905090565b90825f939282370152565b9091826109138161091a936108f3565b80936108f8565b0190565b8061092f60019261093696946108de565b0191610903565b90565b634e487b7160e01b5f52604160045260245ffd5b9061095790610226565b810190811067ffffffffffffffff82111761097157604052565b610939565b6109b4906109826108a8565b506109a561098f5f6108bf565b9193610999610112565b9485936020850161091e565b6020820181038252038261094d565b90565b906109d36109cd33329085859192909192610d54565b1561056a565b6109e2576109e091610a7e565b565b5f631b8e828b60e31b8152806109fa600482016102af565b0390fd5b5f80fd5b90610a15610a0e610112565b928361094d565b565b67ffffffffffffffff8111610a3557610a31602091610226565b0190565b610939565b90929192610a4f610a4a82610a17565b610a02565b93818552602085019082840111610a6b57610a69926108f8565b565b6109fe565b610a7b913691610a3a565b90565b610a9091610a8b91610a70565b6112ea565b565b90610a9c916109b7565b565b90610ab091610aab6114b2565b610bb7565b565b60a01c90565b60ff1690565b610aca610acf91610ab2565b610ab8565b90565b610adc9054610abe565b90565b610af3610aee610af8926108ad565b6103c7565b6102e8565b90565b610b0490610adf565b90565b60a01b90565b90610b1c60ff60a01b91610b07565b9181191691161790565b610b2f9061056a565b90565b90565b90610b4a610b45610b5192610b26565b610b32565b8254610b0d565b9055565b610b5e906103ca565b90565b610b6a90610b55565b90565b90610b7e60018060a01b0391610458565b9181191691161790565b610b9190610b55565b90565b90565b90610bac610ba7610bb392610b88565b610b94565b8254610b6d565b9055565b610bc16001610ad2565b610c295781610be0610bda610bd55f610afb565b6102f3565b916102f3565b14610c0d57610c06610bff610c0b93610bfa600180610b35565b610b61565b6001610b97565b6110fe565b565b5f632e7f3c7f60e11b815280610c25600482016102af565b0390fd5b5f62dc149f60e41b815280610c40600482016102af565b0390fd5b90610c4e91610a9e565b565b610c586114b2565b610c60610c62565b565b610c73610c6e5f610afb565b611523565b565b610c7d610c50565b565b5f90565b610c8f610c9491610861565b610387565b90565b610ca19054610c83565b90565b60e01b90565b610cb38161056a565b03610cba57565b5f80fd5b90505190610ccb82610caa565b565b90602082820312610ce657610ce3915f01610cbe565b90565b61011c565b9190610d0581610cfe81610d0a95610212565b80956108f8565b610226565b0190565b610d34610d419593949294610d2a60608401965f8501906105fe565b60208301906105fe565b6040818503910152610ceb565b90565b610d4c610112565b3d5f823e3d90fd5b92610d9760209394610d64610c7f565b50610da2610d7a610d756001610c97565b6103f2565b93637a3979dc929597610d8b610112565b98899788968796610ca4565b865260048601610d0e565b03915afa908115610de6575f91610db8575b5090565b610dd9915060203d8111610ddf575b610dd1818361094d565b810190610ccd565b5f610db4565b503d610dc7565b610d44565b90610e07610e0133329085859192909192610d54565b1561056a565b610e1657610e1491610e32565b565b5f631b8e828b60e31b815280610e2e600482016102af565b0390fd5b610e4491610e3f91610976565b6112ea565b565b90610e5091610deb565b565b5f90565b60018060a01b031690565b610e6d610e7291610861565b610e56565b90565b610e7f9054610e61565b90565b610e8a610e52565b50610e945f610e75565b90565b5090565b5f90565b610eb3610eae610eb8926108ad565b6103c7565b610773565b90565b6001610ec79101610773565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610f2c570180359067ffffffffffffffff8211610f2757602001916001820236038313610f2257565b610ee6565b610ee2565b610ede565b90821015610f4c576020610f489202810190610eea565b9091565b610eca565b610f5c818390610e97565b91610f65610e9b565b50610f6f5f610e9f565b5b80610f83610f7d86610773565b91610773565b1015610fd857610fb190610fa7333290610f9f87878691610f31565b929091610d54565b610fb6575b610ebb565b610f70565b610fd3610fce610fc886868591610f31565b90610976565b6112ea565b610fac565b50505050565b610fef90610fea6114b2565b610ffd565b565b610ffa906103e6565b90565b8061101861101261100d5f610afb565b6102f3565b916102f3565b146110725761103061102982610b61565b6001610b97565b61105a7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610ff1565b90611063610112565b8061106d816102af565b0390a2565b5f632e7f3c7f60e11b81528061108a600482016102af565b0390fd5b61109790610fde565b565b6110aa906110a56114b2565b6110ac565b565b806110c76110c16110bc5f610afb565b6102f3565b916102f3565b146110d7576110d590611523565b565b6110fa6110e35f610afb565b5f918291631e4fbdf760e01b83526004830161060b565b0390fd5b61110790611099565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61115261114d61115792610773565b6103c7565b611131565b90565b611163906103ca565b90565b61116f9061115a565b90565b61117c6064611166565b90565b611188906103e6565b90565b61119481610773565b0361119b57565b5f80fd5b905051906111ac8261118b565b565b906020828203126111c7576111c4915f0161119f565b90565b61011c565b60200190565b60601b90565b6111e1906111d2565b90565b6111ed906111d8565b90565b6111fc611201916102f3565b6111e4565b9052565b60c01b90565b61121490611205565b90565b61122361122891611131565b61120b565b9052565b90565b61123b6112409161012f565b61122c565b9052565b92611272600861127a9461126a60148861126260209b9a86996111f0565b018092611217565b018092611217565b01809261122f565b0190565b6020816112906112989383969561122f565b01809261122f565b0190565b906112a85f1991610458565b9181191691161790565b6112bb9061012f565b90565b6112c790610861565b90565b906112df6112da6112e6926112b2565b6112be565b825461129c565b9055565b6112f261112d565b507f00000000000000000000000000000000000000000000000000000000000000005f146114a157611345602061132f61132a611172565b61117f565b63a3b1b31d9061133d610112565b938492610ca4565b82528180611355600482016102af565b03915afa90811561149c5761142991611375915f9161146e575b5061113e565b5b5f61137f611109565b916113c8336113b96113904261113e565b886113a361139d8261020e565b916111cc565b20906113ad610112565b95869460208601611244565b6020820181038252038261094d565b6113da6113d48261020e565b916111cc565b2061140f6113e983850161087d565b6114006113f4610112565b9384926020840161127e565b6020820181038252038261094d565b61142161141b8261020e565b916111cc565b2091016112ca565b336114696114577f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610ff1565b92611460610112565b91829182610261565b0390a2565b61148f915060203d8111611495575b611487818361094d565b8101906111ae565b5f61136f565b503d61147d565b610d44565b6114296114ad4361113e565b611376565b6114ba610e82565b6114d36114cd6114c8611582565b6102f3565b916102f3565b036114da57565b6114fc6114e5611582565b5f91829163118cdaa760e01b83526004830161060b565b0390fd5b90565b9061151861151361151f92610ff1565b611500565b8254610b6d565b9055565b61152c5f610e75565b611536825f611503565b9061156a6115647f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ff1565b91610ff1565b91611573610112565b8061157d816102af565b0390a3565b61158a610e52565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08YV[a\0\x1D_5a\x01\x0CV[\x80c\x038\x11T\x14a\x01\x07W\x80c6l\xBA\xB7\x14a\x01\x02W\x80cF\xE2\xCC\t\x14a\0\xFDW\x80cH\\\xC9U\x14a\0\xF8W\x80c[<\xD6\xE2\x14a\0\xF3W\x80cc\xD9d7\x14a\0\xEEW\x80cqP\x18\xA6\x14a\0\xE9W\x80cz9y\xDC\x14a\0\xE4W\x80c\x80NQ#\x14a\0\xDFW\x80c\x8D\xA5\xCB[\x14a\0\xDAW\x80c\xCD\xAF\xB9x\x14a\0\xD5W\x80c\xD4\xF0\xEBM\x14a\0\xD0W\x80c\xD8x\x13B\x14a\0\xCBW\x80c\xEA\x16\x1C\xE6\x14a\0\xC6Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x08&V[a\x07\xF1V[a\x07\x98V[a\x07\x1CV[a\x06\xCAV[a\x06 V[a\x05\xCAV[a\x05\x91V[a\x04\xE5V[a\x04\xB0V[a\x04 V[a\x03OV[a\x02\xB4V[a\x02yV[a\x01TV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01*WV[a\x01\x1CV[\x90V[a\x01;\x90a\x01/V[\x90RV[\x91\x90a\x01R\x90_` \x85\x01\x94\x01\x90a\x012V[V[4a\x01\x84Wa\x01d6`\x04a\x01 V[a\x01\x80a\x01oa\x08\x8AV[a\x01wa\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x02\tW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x04Wa\x02\0\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02Oa\x02X` \x93a\x02]\x93a\x02F\x81a\x02\x0EV[\x93\x84\x80\x93a\x02\x12V[\x95\x86\x91\x01a\x02\x1BV[a\x02&V[\x01\x90V[a\x02v\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x020V[\x90V[4a\x02\xAAWa\x02\xA6a\x02\x95a\x02\x8F6`\x04a\x01\xD8V[\x90a\tvV[a\x02\x9Da\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\x01\x18V[_\x01\x90V[4a\x02\xE3Wa\x02\xCDa\x02\xC76`\x04a\x01\xD8V[\x90a\n\x92V[a\x02\xD5a\x01\x12V[\x80a\x02\xDF\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFC\x90a\x02\xE8V[\x90V[a\x03\x08\x81a\x02\xF3V[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x91\x90`@\x83\x82\x03\x12a\x03JW\x80a\x03>a\x03G\x92_\x86\x01a\x03\x13V[\x93` \x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x03~Wa\x03ha\x03b6`\x04a\x03\"V[\x90a\x0CDV[a\x03pa\x01\x12V[\x80a\x03z\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xA2\x90`\x08a\x03\xA7\x93\x02a\x03\x83V[a\x03\x87V[\x90V[\x90a\x03\xB5\x91Ta\x03\x92V[\x90V[a\x03\xC4`\x01_\x90a\x03\xAAV[\x90V[\x90V[a\x03\xDEa\x03\xD9a\x03\xE3\x92a\x02\xE8V[a\x03\xC7V[a\x02\xE8V[\x90V[a\x03\xEF\x90a\x03\xCAV[\x90V[a\x03\xFB\x90a\x03\xE6V[\x90V[a\x04\x07\x90a\x03\xF2V[\x90RV[\x91\x90a\x04\x1E\x90_` \x85\x01\x94\x01\x90a\x03\xFEV[V[4a\x04PWa\x0406`\x04a\x01 V[a\x04La\x04;a\x03\xB8V[a\x04Ca\x01\x12V[\x91\x82\x91\x82a\x04\x0BV[\x03\x90\xF3[a\x01\x18V[\x90V[_\x1B\x90V[a\x04qa\x04la\x04v\x92a\x04UV[a\x04XV[a\x01/V[\x90V[a\x04\xA2\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x04]V[\x90V[a\x04\xADa\x04yV[\x90V[4a\x04\xE0Wa\x04\xC06`\x04a\x01 V[a\x04\xDCa\x04\xCBa\x04\xA5V[a\x04\xD3a\x01\x12V[\x91\x82\x91\x82a\x01?V[\x03\x90\xF3[a\x01\x18V[4a\x05\x13Wa\x04\xF56`\x04a\x01 V[a\x04\xFDa\x0CuV[a\x05\x05a\x01\x12V[\x80a\x05\x0F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x91``\x83\x83\x03\x12a\x05eWa\x05/\x82_\x85\x01a\x03\x13V[\x92a\x05=\x83` \x83\x01a\x03\x13V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05`Wa\x05\\\x92\x01a\x01\x99V[\x90\x91V[a\x01\x89V[a\x01\x1CV[\x15\x15\x90V[a\x05x\x90a\x05jV[\x90RV[\x91\x90a\x05\x8F\x90_` \x85\x01\x94\x01\x90a\x05oV[V[4a\x05\xC5Wa\x05\xC1a\x05\xB0a\x05\xA76`\x04a\x05\x18V[\x92\x91\x90\x91a\rTV[a\x05\xB8a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x05\xF9Wa\x05\xE3a\x05\xDD6`\x04a\x01\xD8V[\x90a\x0EFV[a\x05\xEBa\x01\x12V[\x80a\x05\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[a\x06\x07\x90a\x02\xF3V[\x90RV[\x91\x90a\x06\x1E\x90_` \x85\x01\x94\x01\x90a\x05\xFEV[V[4a\x06PWa\x0606`\x04a\x01 V[a\x06La\x06;a\x0E\x82V[a\x06Ca\x01\x12V[\x91\x82\x91\x82a\x06\x0BV[\x03\x90\xF3[a\x01\x18V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x8FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\x8AW` \x01\x92` \x83\x02\x84\x01\x11a\x06\x85WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90` \x82\x82\x03\x12a\x06\xC5W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xC0Wa\x06\xBC\x92\x01a\x06UV[\x90\x91V[a\x01\x89V[a\x01\x1CV[4a\x06\xF9Wa\x06\xE3a\x06\xDD6`\x04a\x06\x94V[\x90a\x0FQV[a\x06\xEBa\x01\x12V[\x80a\x06\xF5\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x90` \x82\x82\x03\x12a\x07\x17Wa\x07\x14\x91_\x01a\x03\x13V[\x90V[a\x01\x1CV[4a\x07JWa\x074a\x07/6`\x04a\x06\xFEV[a\x10\x8EV[a\x07<a\x01\x12V[\x80a\x07F\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07\x7F\x90a\x07sV[\x90RV[\x91\x90a\x07\x96\x90_` \x85\x01\x94\x01\x90a\x07vV[V[4a\x07\xC8Wa\x07\xA86`\x04a\x01 V[a\x07\xC4a\x07\xB3a\x07OV[a\x07\xBBa\x01\x12V[\x91\x82\x91\x82a\x07\x83V[\x03\x90\xF3[a\x01\x18V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x08!Wa\x08\x016`\x04a\x01 V[a\x08\x1Da\x08\x0Ca\x07\xCDV[a\x08\x14a\x01\x12V[\x91\x82\x91\x82a\x05|V[\x03\x90\xF3[a\x01\x18V[4a\x08TWa\x08>a\x0896`\x04a\x06\xFEV[a\x10\xFEV[a\x08Fa\x01\x12V[\x80a\x08P\x81a\x02\xAFV[\x03\x90\xF3[a\x01\x18V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08ua\x08z\x91a\x08aV[a\x08fV[\x90V[a\x08\x87\x90Ta\x08iV[\x90V[a\x08\x92a\x08]V[Pa\x08\xA5_a\x08\x9Fa\x11\tV[\x01a\x08}V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08\xD3a\x08\xCEa\x08\xD8\x92a\x08\xADV[a\x08\xB9V[a\x08\xB0V[\x90V[\x90V[a\x08\xEAa\x08\xEF\x91a\x08\xB0V[a\x08\xDBV[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\t\x13\x81a\t\x1A\x93a\x08\xF3V[\x80\x93a\x08\xF8V[\x01\x90V[\x80a\t/`\x01\x92a\t6\x96\x94a\x08\xDEV[\x01\x91a\t\x03V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\tW\x90a\x02&V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\tqW`@RV[a\t9V[a\t\xB4\x90a\t\x82a\x08\xA8V[Pa\t\xA5a\t\x8F_a\x08\xBFV[\x91\x93a\t\x99a\x01\x12V[\x94\x85\x93` \x85\x01a\t\x1EV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[\x90V[\x90a\t\xD3a\t\xCD32\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\t\xE2Wa\t\xE0\x91a\n~V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\xFA`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_\x80\xFD[\x90a\n\x15a\n\x0Ea\x01\x12V[\x92\x83a\tMV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n5Wa\n1` \x91a\x02&V[\x01\x90V[a\t9V[\x90\x92\x91\x92a\nOa\nJ\x82a\n\x17V[a\n\x02V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\nkWa\ni\x92a\x08\xF8V[V[a\t\xFEV[a\n{\x916\x91a\n:V[\x90V[a\n\x90\x91a\n\x8B\x91a\npV[a\x12\xEAV[V[\x90a\n\x9C\x91a\t\xB7V[V[\x90a\n\xB0\x91a\n\xABa\x14\xB2V[a\x0B\xB7V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\n\xCAa\n\xCF\x91a\n\xB2V[a\n\xB8V[\x90V[a\n\xDC\x90Ta\n\xBEV[\x90V[a\n\xF3a\n\xEEa\n\xF8\x92a\x08\xADV[a\x03\xC7V[a\x02\xE8V[\x90V[a\x0B\x04\x90a\n\xDFV[\x90V[`\xA0\x1B\x90V[\x90a\x0B\x1C`\xFF`\xA0\x1B\x91a\x0B\x07V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B/\x90a\x05jV[\x90V[\x90V[\x90a\x0BJa\x0BEa\x0BQ\x92a\x0B&V[a\x0B2V[\x82Ta\x0B\rV[\x90UV[a\x0B^\x90a\x03\xCAV[\x90V[a\x0Bj\x90a\x0BUV[\x90V[\x90a\x0B~`\x01\x80`\xA0\x1B\x03\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x91\x90a\x0BUV[\x90V[\x90V[\x90a\x0B\xACa\x0B\xA7a\x0B\xB3\x92a\x0B\x88V[a\x0B\x94V[\x82Ta\x0BmV[\x90UV[a\x0B\xC1`\x01a\n\xD2V[a\x0C)W\x81a\x0B\xE0a\x0B\xDAa\x0B\xD5_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x0C\rWa\x0C\x06a\x0B\xFFa\x0C\x0B\x93a\x0B\xFA`\x01\x80a\x0B5V[a\x0BaV[`\x01a\x0B\x97V[a\x10\xFEV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0C%`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0C@`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[\x90a\x0CN\x91a\n\x9EV[V[a\x0CXa\x14\xB2V[a\x0C`a\x0CbV[V[a\x0Csa\x0Cn_a\n\xFBV[a\x15#V[V[a\x0C}a\x0CPV[V[_\x90V[a\x0C\x8Fa\x0C\x94\x91a\x08aV[a\x03\x87V[\x90V[a\x0C\xA1\x90Ta\x0C\x83V[\x90V[`\xE0\x1B\x90V[a\x0C\xB3\x81a\x05jV[\x03a\x0C\xBAWV[_\x80\xFD[\x90PQ\x90a\x0C\xCB\x82a\x0C\xAAV[V[\x90` \x82\x82\x03\x12a\x0C\xE6Wa\x0C\xE3\x91_\x01a\x0C\xBEV[\x90V[a\x01\x1CV[\x91\x90a\r\x05\x81a\x0C\xFE\x81a\r\n\x95a\x02\x12V[\x80\x95a\x08\xF8V[a\x02&V[\x01\x90V[a\r4a\rA\x95\x93\x94\x92\x94a\r*``\x84\x01\x96_\x85\x01\x90a\x05\xFEV[` \x83\x01\x90a\x05\xFEV[`@\x81\x85\x03\x91\x01Ra\x0C\xEBV[\x90V[a\rLa\x01\x12V[=_\x82>=\x90\xFD[\x92a\r\x97` \x93\x94a\rda\x0C\x7FV[Pa\r\xA2a\rza\ru`\x01a\x0C\x97V[a\x03\xF2V[\x93cz9y\xDC\x92\x95\x97a\r\x8Ba\x01\x12V[\x98\x89\x97\x88\x96\x87\x96a\x0C\xA4V[\x86R`\x04\x86\x01a\r\x0EV[\x03\x91Z\xFA\x90\x81\x15a\r\xE6W_\x91a\r\xB8W[P\x90V[a\r\xD9\x91P` =\x81\x11a\r\xDFW[a\r\xD1\x81\x83a\tMV[\x81\x01\x90a\x0C\xCDV[_a\r\xB4V[P=a\r\xC7V[a\rDV[\x90a\x0E\x07a\x0E\x0132\x90\x85\x85\x91\x92\x90\x91\x92a\rTV[\x15a\x05jV[a\x0E\x16Wa\x0E\x14\x91a\x0E2V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E.`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x0ED\x91a\x0E?\x91a\tvV[a\x12\xEAV[V[\x90a\x0EP\x91a\r\xEBV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0Ema\x0Er\x91a\x08aV[a\x0EVV[\x90V[a\x0E\x7F\x90Ta\x0EaV[\x90V[a\x0E\x8Aa\x0ERV[Pa\x0E\x94_a\x0EuV[\x90V[P\x90V[_\x90V[a\x0E\xB3a\x0E\xAEa\x0E\xB8\x92a\x08\xADV[a\x03\xC7V[a\x07sV[\x90V[`\x01a\x0E\xC7\x91\x01a\x07sV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0F,W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F'W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0F\"WV[a\x0E\xE6V[a\x0E\xE2V[a\x0E\xDEV[\x90\x82\x10\x15a\x0FLW` a\x0FH\x92\x02\x81\x01\x90a\x0E\xEAV[\x90\x91V[a\x0E\xCAV[a\x0F\\\x81\x83\x90a\x0E\x97V[\x91a\x0Fea\x0E\x9BV[Pa\x0Fo_a\x0E\x9FV[[\x80a\x0F\x83a\x0F}\x86a\x07sV[\x91a\x07sV[\x10\x15a\x0F\xD8Wa\x0F\xB1\x90a\x0F\xA732\x90a\x0F\x9F\x87\x87\x86\x91a\x0F1V[\x92\x90\x91a\rTV[a\x0F\xB6W[a\x0E\xBBV[a\x0FpV[a\x0F\xD3a\x0F\xCEa\x0F\xC8\x86\x86\x85\x91a\x0F1V[\x90a\tvV[a\x12\xEAV[a\x0F\xACV[PPPPV[a\x0F\xEF\x90a\x0F\xEAa\x14\xB2V[a\x0F\xFDV[V[a\x0F\xFA\x90a\x03\xE6V[\x90V[\x80a\x10\x18a\x10\x12a\x10\r_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10rWa\x100a\x10)\x82a\x0BaV[`\x01a\x0B\x97V[a\x10Z\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F\xF1V[\x90a\x10ca\x01\x12V[\x80a\x10m\x81a\x02\xAFV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\x8A`\x04\x82\x01a\x02\xAFV[\x03\x90\xFD[a\x10\x97\x90a\x0F\xDEV[V[a\x10\xAA\x90a\x10\xA5a\x14\xB2V[a\x10\xACV[V[\x80a\x10\xC7a\x10\xC1a\x10\xBC_a\n\xFBV[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x10\xD7Wa\x10\xD5\x90a\x15#V[V[a\x10\xFAa\x10\xE3_a\n\xFBV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[a\x11\x07\x90a\x10\x99V[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11Ra\x11Ma\x11W\x92a\x07sV[a\x03\xC7V[a\x111V[\x90V[a\x11c\x90a\x03\xCAV[\x90V[a\x11o\x90a\x11ZV[\x90V[a\x11|`da\x11fV[\x90V[a\x11\x88\x90a\x03\xE6V[\x90V[a\x11\x94\x81a\x07sV[\x03a\x11\x9BWV[_\x80\xFD[\x90PQ\x90a\x11\xAC\x82a\x11\x8BV[V[\x90` \x82\x82\x03\x12a\x11\xC7Wa\x11\xC4\x91_\x01a\x11\x9FV[\x90V[a\x01\x1CV[` \x01\x90V[``\x1B\x90V[a\x11\xE1\x90a\x11\xD2V[\x90V[a\x11\xED\x90a\x11\xD8V[\x90V[a\x11\xFCa\x12\x01\x91a\x02\xF3V[a\x11\xE4V[\x90RV[`\xC0\x1B\x90V[a\x12\x14\x90a\x12\x05V[\x90V[a\x12#a\x12(\x91a\x111V[a\x12\x0BV[\x90RV[\x90V[a\x12;a\x12@\x91a\x01/V[a\x12,V[\x90RV[\x92a\x12r`\x08a\x12z\x94a\x12j`\x14\x88a\x12b` \x9B\x9A\x86\x99a\x11\xF0V[\x01\x80\x92a\x12\x17V[\x01\x80\x92a\x12\x17V[\x01\x80\x92a\x12/V[\x01\x90V[` \x81a\x12\x90a\x12\x98\x93\x83\x96\x95a\x12/V[\x01\x80\x92a\x12/V[\x01\x90V[\x90a\x12\xA8_\x19\x91a\x04XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xBB\x90a\x01/V[\x90V[a\x12\xC7\x90a\x08aV[\x90V[\x90a\x12\xDFa\x12\xDAa\x12\xE6\x92a\x12\xB2V[a\x12\xBEV[\x82Ta\x12\x9CV[\x90UV[a\x12\xF2a\x11-V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x14\xA1Wa\x13E` a\x13/a\x13*a\x11rV[a\x11\x7FV[c\xA3\xB1\xB3\x1D\x90a\x13=a\x01\x12V[\x93\x84\x92a\x0C\xA4V[\x82R\x81\x80a\x13U`\x04\x82\x01a\x02\xAFV[\x03\x91Z\xFA\x90\x81\x15a\x14\x9CWa\x14)\x91a\x13u\x91_\x91a\x14nW[Pa\x11>V[[_a\x13\x7Fa\x11\tV[\x91a\x13\xC83a\x13\xB9a\x13\x90Ba\x11>V[\x88a\x13\xA3a\x13\x9D\x82a\x02\x0EV[\x91a\x11\xCCV[ \x90a\x13\xADa\x01\x12V[\x95\x86\x94` \x86\x01a\x12DV[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x13\xDAa\x13\xD4\x82a\x02\x0EV[\x91a\x11\xCCV[ a\x14\x0Fa\x13\xE9\x83\x85\x01a\x08}V[a\x14\0a\x13\xF4a\x01\x12V[\x93\x84\x92` \x84\x01a\x12~V[` \x82\x01\x81\x03\x82R\x03\x82a\tMV[a\x14!a\x14\x1B\x82a\x02\x0EV[\x91a\x11\xCCV[ \x91\x01a\x12\xCAV[3a\x14ia\x14W\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F\xF1V[\x92a\x14`a\x01\x12V[\x91\x82\x91\x82a\x02aV[\x03\x90\xA2V[a\x14\x8F\x91P` =\x81\x11a\x14\x95W[a\x14\x87\x81\x83a\tMV[\x81\x01\x90a\x11\xAEV[_a\x13oV[P=a\x14}V[a\rDV[a\x14)a\x14\xADCa\x11>V[a\x13vV[a\x14\xBAa\x0E\x82V[a\x14\xD3a\x14\xCDa\x14\xC8a\x15\x82V[a\x02\xF3V[\x91a\x02\xF3V[\x03a\x14\xDAWV[a\x14\xFCa\x14\xE5a\x15\x82V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x0BV[\x03\x90\xFD[\x90V[\x90a\x15\x18a\x15\x13a\x15\x1F\x92a\x0F\xF1V[a\x15\0V[\x82Ta\x0BmV[\x90UV[a\x15,_a\x0EuV[a\x156\x82_a\x15\x03V[\x90a\x15ja\x15d\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F\xF1V[\x91a\x0F\xF1V[\x91a\x15sa\x01\x12V[\x80a\x15}\x81a\x02\xAFV[\x03\x90\xA3V[a\x15\x8Aa\x0ERV[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `ACCUMULATOR_STORAGE_LOCATION()` and selector `0x63d96437`.
```solidity
function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`ACCUMULATOR_STORAGE_LOCATION()`](ACCUMULATOR_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ACCUMULATOR_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ACCUMULATOR_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ACCUMULATOR_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [99u8, 217u8, 100u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `accumulator()` and selector `0x03381154`.
```solidity
function accumulator() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorCall {}
    ///Container type for the return parameters of the [`accumulator()`](accumulatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for accumulatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = accumulatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "accumulator()";
            const SELECTOR: [u8; 4] = [3u8, 56u8, 17u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isArbChain()` and selector `0xea161ce6`.
```solidity
function isArbChain() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArbChainCall {}
    ///Container type for the return parameters of the [`isArbChain()`](isArbChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArbChainReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArbChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: isArbChainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArbChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArbChainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isArbChainReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArbChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isArbChainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isArbChainReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isArbChain()";
            const SELECTOR: [u8; 4] = [234u8, 22u8, 28u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulkCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulkCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulkReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChain`](self) function calls.
    pub enum SyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        ACCUMULATOR_STORAGE_LOCATION(ACCUMULATOR_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        accumulator(accumulatorCall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isArbChain(isArbChainCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionUncompressed(processTransactionUncompressedCall),
        #[allow(missing_docs)]
        processTransactionsBulk(processTransactionsBulkCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [3u8, 56u8, 17u8, 84u8],
            [54u8, 108u8, 186u8, 183u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [99u8, 217u8, 100u8, 55u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [141u8, 165u8, 203u8, 91u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [234u8, 22u8, 28u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainCalls {
        const NAME: &'static str = "SyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 15usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(_) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::accumulator(_) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isArbChain(_) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed(_) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk(_) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls>] = &[
                {
                    fn accumulator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <accumulatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::accumulator)
                    }
                    accumulator
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::prependZeroByte)
                    }
                    prependZeroByte
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn ACCUMULATOR_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::ACCUMULATOR_STORAGE_LOCATION,
                            )
                    }
                    ACCUMULATOR_STORAGE_LOCATION
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::processTransactionUncompressed,
                            )
                    }
                    processTransactionUncompressed
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::owner)
                    }
                    owner
                },
                {
                    fn processTransactionsBulk(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransactionsBulk)
                    }
                    processTransactionsBulk
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::appchainId)
                    }
                    appchainId
                },
                {
                    fn isArbChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <isArbChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::isArbChain)
                    }
                    isArbChain
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isArbChain(inner) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isArbChain(inner) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) custom errors.
    pub enum SyndicateSequencingChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainErrors {
        const NAME: &'static str = "SyndicateSequencingChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) events.
    pub enum SyndicateSequencingChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateSequencingChainEvents {
        const NAME: &'static str = "SyndicateSequencingChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainInstance<T, P, N> {
        SyndicateSequencingChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>>,
    > {
        SyndicateSequencingChainInstance::<T, P, N>::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateSequencingChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateSequencingChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateSequencingChainInstance<T, P, N> {
            SyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ACCUMULATOR_STORAGE_LOCATION`] function.
        pub fn ACCUMULATOR_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ACCUMULATOR_STORAGE_LOCATIONCall, N> {
            self.call_builder(
                &ACCUMULATOR_STORAGE_LOCATIONCall {
                },
            )
        }
        ///Creates a new call builder for the [`accumulator`] function.
        pub fn accumulator(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, accumulatorCall, N> {
            self.call_builder(&accumulatorCall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`isArbChain`] function.
        pub fn isArbChain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isArbChainCall, N> {
            self.call_builder(&isArbChainCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed`] function.
        pub fn processTransactionUncompressed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressedCall,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressedCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk`] function.
        pub fn processTransactionsBulk(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulkCall, N> {
            self.call_builder(
                &processTransactionsBulkCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
