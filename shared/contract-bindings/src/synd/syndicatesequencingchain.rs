/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChain {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _appchainId);

    function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
    function accumulator() external view returns (bytes32);
    function appchainId() external view returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ACCUMULATOR_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "accumulator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234610041576100196100146100f2565b6101c0565b610021610046565b61151b61052e82396080518161127f015260a05181610741015261151b90f35b61004c565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007890610050565b810190811060018060401b0382111761009057604052565b61005a565b906100a86100a1610046565b928361006e565b565b5f80fd5b90565b6100ba816100ae565b036100c157565b5f80fd5b905051906100d2826100b1565b565b906020828203126100ed576100ea915f016100c5565b90565b6100aa565b610110611c088038038061010581610095565b9283398101906100d4565b90565b90565b90565b61012d61012861013292610113565b610116565b6100ae565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6101726018602092610135565b61017b8161013e565b0190565b6101949060208101905f818303910152610165565b90565b1561019e57565b6101a6610046565b62461bcd60e51b8152806101bc6004820161017f565b0390fd5b6101c861024e565b6101e5816101de6101d85f610119565b916100ae565b1415610197565b60a052565b60018060a01b031690565b61020961020461020e926101ea565b610116565b6101ea565b90565b61021a906101f5565b90565b61022690610211565b90565b610233606461021d565b90565b61023f906101f5565b90565b61024b90610236565b90565b61025661034e565b610266610261610229565b610242565b3b6102796102735f610119565b916100ae565b11608052565b60a01b90565b9061029460ff60a01b9161027f565b9181191691161790565b151590565b6102ac9061029e565b90565b90565b906102c76102c26102ce926102a3565b6102af565b8254610285565b9055565b5f0190565b6102df610046565b3d5f823e3d90fd5b6102f0906101f5565b90565b6102fc906102e7565b90565b5f1b90565b9061031560018060a01b03916102ff565b9181191691161790565b610328906102e7565b90565b90565b9061034361033e61034a9261031f565b61032b565b8254610304565b9055565b610357336103bb565b6103625f60016102b2565b61036a610046565b6101bf810181811060018060401b038211176103b65761039282916101bf611a4984396102d2565b03905ff080156103b1576103a86103af916102f3565b600161032e565b565b6102d7565b61005a565b6103c49061041c565b565b6103da6103d56103df92610113565b610116565b6101ea565b90565b6103eb906103c6565b90565b6103f7906101ea565b90565b610403906103ee565b9052565b919061041a905f602085019401906103fa565b565b8061043761043161042c5f6103e2565b6103ee565b916103ee565b1461044757610445906104ce565b565b61046a6104535f6103e2565b5f918291631e4fbdf760e01b835260048301610407565b0390fd5b5f1c90565b60018060a01b031690565b61048a61048f9161046e565b610473565b90565b61049c905461047e565b90565b6104a890610236565b90565b90565b906104c36104be6104ca9261049f565b6104ab565b8254610304565b9055565b6104d75f610492565b6104e1825f6104ae565b9061051561050f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361049f565b9161049f565b9161051e610046565b80610528816102d2565b0390a356fe60806040526004361015610013575b6107f0565b61001d5f356100fc565b806303381154146100f7578063366cbab7146100f257806346e2cc09146100ed578063485cc955146100e85780635b3cd6e2146100e357806363d96437146100de578063715018a6146100d95780637a3979dc146100d4578063804e5123146100cf5780638da5cb5b146100ca578063cdafb978146100c5578063d4f0eb4d146100c0578063d8781342146100bb5763f2fde38b0361000e576107bd565b610788565b61070c565b6106ba565b610610565b6105ba565b610581565b6104d5565b6104a0565b610410565b61033f565b6102a4565b610269565b610144565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261011a57565b61010c565b90565b61012b9061011f565b9052565b9190610142905f60208501940190610122565b565b3461017457610154366004610110565b61017061015f610821565b610167610102565b9182918261012f565b0390f35b610108565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101c35781359167ffffffffffffffff83116101be5760200192600183028401116101b957565b610185565b610181565b61017d565b906020828203126101f9575f82013567ffffffffffffffff81116101f4576101f09201610189565b9091565b610179565b61010c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61023f61024860209361024d93610236816101fe565b93848093610202565b9586910161020b565b610216565b0190565b6102669160208201915f818403910152610220565b90565b3461029a5761029661028561027f3660046101c8565b9061090d565b61028d610102565b91829182610251565b0390f35b610108565b5f0190565b346102d3576102bd6102b73660046101c8565b90610a29565b6102c5610102565b806102cf8161029f565b0390f35b610108565b60018060a01b031690565b6102ec906102d8565b90565b6102f8816102e3565b036102ff57565b5f80fd5b90503590610310826102ef565b565b919060408382031261033a578061032e610337925f8601610303565b93602001610303565b90565b61010c565b3461036e57610358610352366004610312565b90610bdb565b610360610102565b8061036a8161029f565b0390f35b610108565b1c90565b60018060a01b031690565b6103929060086103979302610373565b610377565b90565b906103a59154610382565b90565b6103b460015f9061039a565b90565b90565b6103ce6103c96103d3926102d8565b6103b7565b6102d8565b90565b6103df906103ba565b90565b6103eb906103d6565b90565b6103f7906103e2565b9052565b919061040e905f602085019401906103ee565b565b3461044057610420366004610110565b61043c61042b6103a8565b610433610102565b918291826103fb565b0390f35b610108565b90565b5f1b90565b61046161045c61046692610445565b610448565b61011f565b90565b6104927f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9061044d565b90565b61049d610469565b90565b346104d0576104b0366004610110565b6104cc6104bb610495565b6104c3610102565b9182918261012f565b0390f35b610108565b34610503576104e5366004610110565b6104ed610c0c565b6104f5610102565b806104ff8161029f565b0390f35b610108565b916060838303126105555761051f825f8501610303565b9261052d8360208301610303565b92604082013567ffffffffffffffff81116105505761054c9201610189565b9091565b610179565b61010c565b151590565b6105689061055a565b9052565b919061057f905f6020850194019061055f565b565b346105b5576105b16105a0610597366004610508565b92919091610ceb565b6105a8610102565b9182918261056c565b0390f35b610108565b346105e9576105d36105cd3660046101c8565b90610ddd565b6105db610102565b806105e58161029f565b0390f35b610108565b6105f7906102e3565b9052565b919061060e905f602085019401906105ee565b565b3461064057610620366004610110565b61063c61062b610e19565b610633610102565b918291826105fb565b0390f35b610108565b909182601f8301121561067f5781359167ffffffffffffffff831161067a57602001926020830284011161067557565b610185565b610181565b61017d565b906020828203126106b5575f82013567ffffffffffffffff81116106b0576106ac9201610645565b9091565b610179565b61010c565b346106e9576106d36106cd366004610684565b90610ee4565b6106db610102565b806106e58161029f565b0390f35b610108565b9060208282031261070757610704915f01610303565b90565b61010c565b3461073a5761072461071f3660046106ee565b611018565b61072c610102565b806107368161029f565b0390f35b610108565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61076f90610763565b9052565b9190610786905f60208501940190610766565b565b346107b857610798366004610110565b6107b46107a361073f565b6107ab610102565b91829182610773565b0390f35b610108565b346107eb576107d56107d03660046106ee565b611088565b6107dd610102565b806107e78161029f565b0390f35b610108565b5f80fd5b5f90565b5f1c90565b90565b61080c610811916107f8565b6107fd565b90565b61081e9054610800565b90565b6108296107f4565b5061083c5f610836611093565b01610814565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b61086a61086561086f92610844565b610850565b610847565b90565b90565b61088161088691610847565b610872565b9052565b905090565b90825f939282370152565b9091826108aa816108b19361088a565b809361088f565b0190565b806108c66001926108cd9694610875565b019161089a565b90565b634e487b7160e01b5f52604160045260245ffd5b906108ee90610216565b810190811067ffffffffffffffff82111761090857604052565b6108d0565b61094b9061091961083f565b5061093c6109265f610856565b9193610930610102565b948593602085016108b5565b602082018103825203826108e4565b90565b9061096a61096433329085859192909192610ceb565b1561055a565b6109795761097791610a15565b565b5f631b8e828b60e31b8152806109916004820161029f565b0390fd5b5f80fd5b906109ac6109a5610102565b92836108e4565b565b67ffffffffffffffff81116109cc576109c8602091610216565b0190565b6108d0565b909291926109e66109e1826109ae565b610999565b93818552602085019082840111610a0257610a009261088f565b565b610995565b610a129136916109d1565b90565b610a2791610a2291610a07565b611274565b565b90610a339161094e565b565b90610a4791610a4261143e565b610b4e565b565b60a01c90565b60ff1690565b610a61610a6691610a49565b610a4f565b90565b610a739054610a55565b90565b610a8a610a85610a8f92610844565b6103b7565b6102d8565b90565b610a9b90610a76565b90565b60a01b90565b90610ab360ff60a01b91610a9e565b9181191691161790565b610ac69061055a565b90565b90565b90610ae1610adc610ae892610abd565b610ac9565b8254610aa4565b9055565b610af5906103ba565b90565b610b0190610aec565b90565b90610b1560018060a01b0391610448565b9181191691161790565b610b2890610aec565b90565b90565b90610b43610b3e610b4a92610b1f565b610b2b565b8254610b04565b9055565b610b586001610a69565b610bc05781610b77610b71610b6c5f610a92565b6102e3565b916102e3565b14610ba457610b9d610b96610ba293610b91600180610acc565b610af8565b6001610b2e565b611088565b565b5f632e7f3c7f60e11b815280610bbc6004820161029f565b0390fd5b5f62dc149f60e41b815280610bd76004820161029f565b0390fd5b90610be591610a35565b565b610bef61143e565b610bf7610bf9565b565b610c0a610c055f610a92565b6114af565b565b610c14610be7565b565b5f90565b610c26610c2b916107f8565b610377565b90565b610c389054610c1a565b90565b60e01b90565b610c4a8161055a565b03610c5157565b5f80fd5b90505190610c6282610c41565b565b90602082820312610c7d57610c7a915f01610c55565b90565b61010c565b9190610c9c81610c9581610ca195610202565b809561088f565b610216565b0190565b610ccb610cd89593949294610cc160608401965f8501906105ee565b60208301906105ee565b6040818503910152610c82565b90565b610ce3610102565b3d5f823e3d90fd5b92610d2e60209394610cfb610c16565b50610d39610d11610d0c6001610c2e565b6103e2565b93637a3979dc929597610d22610102565b98899788968796610c3b565b865260048601610ca5565b03915afa908115610d7d575f91610d4f575b5090565b610d70915060203d8111610d76575b610d6881836108e4565b810190610c64565b5f610d4b565b503d610d5e565b610cdb565b90610d9e610d9833329085859192909192610ceb565b1561055a565b610dad57610dab91610dc9565b565b5f631b8e828b60e31b815280610dc56004820161029f565b0390fd5b610ddb91610dd69161090d565b611274565b565b90610de791610d82565b565b5f90565b60018060a01b031690565b610e04610e09916107f8565b610ded565b90565b610e169054610df8565b90565b610e21610de9565b50610e2b5f610e0c565b90565b5090565b610e46610e41610e4b92610844565b6103b7565b610763565b90565b6001610e5a9101610763565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610ebf570180359067ffffffffffffffff8211610eba57602001916001820236038313610eb557565b610e79565b610e75565b610e71565b90821015610edf576020610edb9202810190610e7d565b9091565b610e5d565b610eef818390610e2e565b91610ef95f610e32565b5b80610f0d610f0786610763565b91610763565b1015610f6257610f3b90610f31333290610f2987878691610ec4565b929091610ceb565b610f40575b610e4e565b610efa565b610f5d610f58610f5286868591610ec4565b9061090d565b611274565b610f36565b50505050565b610f7990610f7461143e565b610f87565b565b610f84906103d6565b90565b80610fa2610f9c610f975f610a92565b6102e3565b916102e3565b14610ffc57610fba610fb382610af8565b6001610b2e565b610fe47f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610f7b565b90610fed610102565b80610ff78161029f565b0390a2565b5f632e7f3c7f60e11b8152806110146004820161029f565b0390fd5b61102190610f68565b565b6110349061102f61143e565b611036565b565b8061105161104b6110465f610a92565b6102e3565b916102e3565b146110615761105f906114af565b565b61108461106d5f610a92565b5f918291631e4fbdf760e01b8352600483016105fb565b0390fd5b61109190611023565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b6110dc6110d76110e192610763565b6103b7565b6110bb565b90565b6110ed906103ba565b90565b6110f9906110e4565b90565b61110660646110f0565b90565b611112906103d6565b90565b61111e81610763565b0361112557565b5f80fd5b9050519061113682611115565b565b906020828203126111515761114e915f01611129565b90565b61010c565b60200190565b60601b90565b61116b9061115c565b90565b61117790611162565b90565b61118661118b916102e3565b61116e565b9052565b60c01b90565b61119e9061118f565b90565b6111ad6111b2916110bb565b611195565b9052565b90565b6111c56111ca9161011f565b6111b6565b9052565b926111fc6008611204946111f46014886111ec60209b9a869961117a565b0180926111a1565b0180926111a1565b0180926111b9565b0190565b60208161121a611222938396956111b9565b0180926111b9565b0190565b906112325f1991610448565b9181191691161790565b6112459061011f565b90565b611251906107f8565b90565b906112696112646112709261123c565b611248565b8254611226565b9055565b61127c6110b7565b507f00000000000000000000000000000000000000000000000000000000000000005f1461142d576112cf60206112b96112b46110fc565b611109565b63a3b1b31d906112c7610102565b938492610c3b565b825281806112df6004820161029f565b03915afa908115611428576113b5916112ff915f916113fa575b506110c8565b5b5f611309611093565b9161139b611318838501610814565b9161136133611352611329426110c8565b8a61133c611336826101fe565b91611156565b2090611346610102565b958694602086016111ce565b602082018103825203826108e4565b61137361136d826101fe565b91611156565b209161138c611380610102565b93849260208401611208565b602082018103825203826108e4565b6113ad6113a7826101fe565b91611156565b209101611254565b336113f56113e37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610f7b565b926113ec610102565b91829182610251565b0390a2565b61141b915060203d8111611421575b61141381836108e4565b810190611138565b5f6112f9565b503d611409565b610cdb565b6113b5611439436110c8565b611300565b611446610e19565b61145f61145961145461150e565b6102e3565b916102e3565b0361146657565b61148861147161150e565b5f91829163118cdaa760e01b8352600483016105fb565b0390fd5b90565b906114a461149f6114ab92610f7b565b61148c565b8254610b04565b9055565b6114b85f610e0c565b6114c2825f61148f565b906114f66114f07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f7b565b91610f7b565b916114ff610102565b806115098161029f565b0390a3565b611516610de9565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4a\0AWa\0\x19a\0\x14a\0\xF2V[a\x01\xC0V[a\0!a\0FV[a\x15\x1Ba\x05.\x829`\x80Q\x81a\x12\x7F\x01R`\xA0Q\x81a\x07A\x01Ra\x15\x1B\x90\xF3[a\0LV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0x\x90a\0PV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x90W`@RV[a\0ZV[\x90a\0\xA8a\0\xA1a\0FV[\x92\x83a\0nV[V[_\x80\xFD[\x90V[a\0\xBA\x81a\0\xAEV[\x03a\0\xC1WV[_\x80\xFD[\x90PQ\x90a\0\xD2\x82a\0\xB1V[V[\x90` \x82\x82\x03\x12a\0\xEDWa\0\xEA\x91_\x01a\0\xC5V[\x90V[a\0\xAAV[a\x01\x10a\x1C\x08\x808\x03\x80a\x01\x05\x81a\0\x95V[\x92\x839\x81\x01\x90a\0\xD4V[\x90V[\x90V[\x90V[a\x01-a\x01(a\x012\x92a\x01\x13V[a\x01\x16V[a\0\xAEV[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01r`\x18` \x92a\x015V[a\x01{\x81a\x01>V[\x01\x90V[a\x01\x94\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01eV[\x90V[\x15a\x01\x9EWV[a\x01\xA6a\0FV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xBC`\x04\x82\x01a\x01\x7FV[\x03\x90\xFD[a\x01\xC8a\x02NV[a\x01\xE5\x81a\x01\xDEa\x01\xD8_a\x01\x19V[\x91a\0\xAEV[\x14\x15a\x01\x97V[`\xA0RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\ta\x02\x04a\x02\x0E\x92a\x01\xEAV[a\x01\x16V[a\x01\xEAV[\x90V[a\x02\x1A\x90a\x01\xF5V[\x90V[a\x02&\x90a\x02\x11V[\x90V[a\x023`da\x02\x1DV[\x90V[a\x02?\x90a\x01\xF5V[\x90V[a\x02K\x90a\x026V[\x90V[a\x02Va\x03NV[a\x02fa\x02aa\x02)V[a\x02BV[;a\x02ya\x02s_a\x01\x19V[\x91a\0\xAEV[\x11`\x80RV[`\xA0\x1B\x90V[\x90a\x02\x94`\xFF`\xA0\x1B\x91a\x02\x7FV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\xAC\x90a\x02\x9EV[\x90V[\x90V[\x90a\x02\xC7a\x02\xC2a\x02\xCE\x92a\x02\xA3V[a\x02\xAFV[\x82Ta\x02\x85V[\x90UV[_\x01\x90V[a\x02\xDFa\0FV[=_\x82>=\x90\xFD[a\x02\xF0\x90a\x01\xF5V[\x90V[a\x02\xFC\x90a\x02\xE7V[\x90V[_\x1B\x90V[\x90a\x03\x15`\x01\x80`\xA0\x1B\x03\x91a\x02\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03(\x90a\x02\xE7V[\x90V[\x90V[\x90a\x03Ca\x03>a\x03J\x92a\x03\x1FV[a\x03+V[\x82Ta\x03\x04V[\x90UV[a\x03W3a\x03\xBBV[a\x03b_`\x01a\x02\xB2V[a\x03ja\0FV[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03\xB6Wa\x03\x92\x82\x91a\x01\xBFa\x1AI\x849a\x02\xD2V[\x03\x90_\xF0\x80\x15a\x03\xB1Wa\x03\xA8a\x03\xAF\x91a\x02\xF3V[`\x01a\x03.V[V[a\x02\xD7V[a\0ZV[a\x03\xC4\x90a\x04\x1CV[V[a\x03\xDAa\x03\xD5a\x03\xDF\x92a\x01\x13V[a\x01\x16V[a\x01\xEAV[\x90V[a\x03\xEB\x90a\x03\xC6V[\x90V[a\x03\xF7\x90a\x01\xEAV[\x90V[a\x04\x03\x90a\x03\xEEV[\x90RV[\x91\x90a\x04\x1A\x90_` \x85\x01\x94\x01\x90a\x03\xFAV[V[\x80a\x047a\x041a\x04,_a\x03\xE2V[a\x03\xEEV[\x91a\x03\xEEV[\x14a\x04GWa\x04E\x90a\x04\xCEV[V[a\x04ja\x04S_a\x03\xE2V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04\x07V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x8Aa\x04\x8F\x91a\x04nV[a\x04sV[\x90V[a\x04\x9C\x90Ta\x04~V[\x90V[a\x04\xA8\x90a\x026V[\x90V[\x90V[\x90a\x04\xC3a\x04\xBEa\x04\xCA\x92a\x04\x9FV[a\x04\xABV[\x82Ta\x03\x04V[\x90UV[a\x04\xD7_a\x04\x92V[a\x04\xE1\x82_a\x04\xAEV[\x90a\x05\x15a\x05\x0F\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\x9FV[\x91a\x04\x9FV[\x91a\x05\x1Ea\0FV[\x80a\x05(\x81a\x02\xD2V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\xF0V[a\0\x1D_5a\0\xFCV[\x80c\x038\x11T\x14a\0\xF7W\x80c6l\xBA\xB7\x14a\0\xF2W\x80cF\xE2\xCC\t\x14a\0\xEDW\x80cH\\\xC9U\x14a\0\xE8W\x80c[<\xD6\xE2\x14a\0\xE3W\x80cc\xD9d7\x14a\0\xDEW\x80cqP\x18\xA6\x14a\0\xD9W\x80cz9y\xDC\x14a\0\xD4W\x80c\x80NQ#\x14a\0\xCFW\x80c\x8D\xA5\xCB[\x14a\0\xCAW\x80c\xCD\xAF\xB9x\x14a\0\xC5W\x80c\xD4\xF0\xEBM\x14a\0\xC0W\x80c\xD8x\x13B\x14a\0\xBBWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07\xBDV[a\x07\x88V[a\x07\x0CV[a\x06\xBAV[a\x06\x10V[a\x05\xBAV[a\x05\x81V[a\x04\xD5V[a\x04\xA0V[a\x04\x10V[a\x03?V[a\x02\xA4V[a\x02iV[a\x01DV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01\x1AWV[a\x01\x0CV[\x90V[a\x01+\x90a\x01\x1FV[\x90RV[\x91\x90a\x01B\x90_` \x85\x01\x94\x01\x90a\x01\"V[V[4a\x01tWa\x01T6`\x04a\x01\x10V[a\x01pa\x01_a\x08!V[a\x01ga\x01\x02V[\x91\x82\x91\x82a\x01/V[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xC3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xBEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xB9WV[a\x01\x85V[a\x01\x81V[a\x01}V[\x90` \x82\x82\x03\x12a\x01\xF9W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xF4Wa\x01\xF0\x92\x01a\x01\x89V[\x90\x91V[a\x01yV[a\x01\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02?a\x02H` \x93a\x02M\x93a\x026\x81a\x01\xFEV[\x93\x84\x80\x93a\x02\x02V[\x95\x86\x91\x01a\x02\x0BV[a\x02\x16V[\x01\x90V[a\x02f\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02 V[\x90V[4a\x02\x9AWa\x02\x96a\x02\x85a\x02\x7F6`\x04a\x01\xC8V[\x90a\t\rV[a\x02\x8Da\x01\x02V[\x91\x82\x91\x82a\x02QV[\x03\x90\xF3[a\x01\x08V[_\x01\x90V[4a\x02\xD3Wa\x02\xBDa\x02\xB76`\x04a\x01\xC8V[\x90a\n)V[a\x02\xC5a\x01\x02V[\x80a\x02\xCF\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xEC\x90a\x02\xD8V[\x90V[a\x02\xF8\x81a\x02\xE3V[\x03a\x02\xFFWV[_\x80\xFD[\x90P5\x90a\x03\x10\x82a\x02\xEFV[V[\x91\x90`@\x83\x82\x03\x12a\x03:W\x80a\x03.a\x037\x92_\x86\x01a\x03\x03V[\x93` \x01a\x03\x03V[\x90V[a\x01\x0CV[4a\x03nWa\x03Xa\x03R6`\x04a\x03\x12V[\x90a\x0B\xDBV[a\x03`a\x01\x02V[\x80a\x03j\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x92\x90`\x08a\x03\x97\x93\x02a\x03sV[a\x03wV[\x90V[\x90a\x03\xA5\x91Ta\x03\x82V[\x90V[a\x03\xB4`\x01_\x90a\x03\x9AV[\x90V[\x90V[a\x03\xCEa\x03\xC9a\x03\xD3\x92a\x02\xD8V[a\x03\xB7V[a\x02\xD8V[\x90V[a\x03\xDF\x90a\x03\xBAV[\x90V[a\x03\xEB\x90a\x03\xD6V[\x90V[a\x03\xF7\x90a\x03\xE2V[\x90RV[\x91\x90a\x04\x0E\x90_` \x85\x01\x94\x01\x90a\x03\xEEV[V[4a\x04@Wa\x04 6`\x04a\x01\x10V[a\x04<a\x04+a\x03\xA8V[a\x043a\x01\x02V[\x91\x82\x91\x82a\x03\xFBV[\x03\x90\xF3[a\x01\x08V[\x90V[_\x1B\x90V[a\x04aa\x04\\a\x04f\x92a\x04EV[a\x04HV[a\x01\x1FV[\x90V[a\x04\x92\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x04MV[\x90V[a\x04\x9Da\x04iV[\x90V[4a\x04\xD0Wa\x04\xB06`\x04a\x01\x10V[a\x04\xCCa\x04\xBBa\x04\x95V[a\x04\xC3a\x01\x02V[\x91\x82\x91\x82a\x01/V[\x03\x90\xF3[a\x01\x08V[4a\x05\x03Wa\x04\xE56`\x04a\x01\x10V[a\x04\xEDa\x0C\x0CV[a\x04\xF5a\x01\x02V[\x80a\x04\xFF\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x91``\x83\x83\x03\x12a\x05UWa\x05\x1F\x82_\x85\x01a\x03\x03V[\x92a\x05-\x83` \x83\x01a\x03\x03V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05PWa\x05L\x92\x01a\x01\x89V[\x90\x91V[a\x01yV[a\x01\x0CV[\x15\x15\x90V[a\x05h\x90a\x05ZV[\x90RV[\x91\x90a\x05\x7F\x90_` \x85\x01\x94\x01\x90a\x05_V[V[4a\x05\xB5Wa\x05\xB1a\x05\xA0a\x05\x976`\x04a\x05\x08V[\x92\x91\x90\x91a\x0C\xEBV[a\x05\xA8a\x01\x02V[\x91\x82\x91\x82a\x05lV[\x03\x90\xF3[a\x01\x08V[4a\x05\xE9Wa\x05\xD3a\x05\xCD6`\x04a\x01\xC8V[\x90a\r\xDDV[a\x05\xDBa\x01\x02V[\x80a\x05\xE5\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[a\x05\xF7\x90a\x02\xE3V[\x90RV[\x91\x90a\x06\x0E\x90_` \x85\x01\x94\x01\x90a\x05\xEEV[V[4a\x06@Wa\x06 6`\x04a\x01\x10V[a\x06<a\x06+a\x0E\x19V[a\x063a\x01\x02V[\x91\x82\x91\x82a\x05\xFBV[\x03\x90\xF3[a\x01\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x7FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06zW` \x01\x92` \x83\x02\x84\x01\x11a\x06uWV[a\x01\x85V[a\x01\x81V[a\x01}V[\x90` \x82\x82\x03\x12a\x06\xB5W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xB0Wa\x06\xAC\x92\x01a\x06EV[\x90\x91V[a\x01yV[a\x01\x0CV[4a\x06\xE9Wa\x06\xD3a\x06\xCD6`\x04a\x06\x84V[\x90a\x0E\xE4V[a\x06\xDBa\x01\x02V[\x80a\x06\xE5\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x07\x07Wa\x07\x04\x91_\x01a\x03\x03V[\x90V[a\x01\x0CV[4a\x07:Wa\x07$a\x07\x1F6`\x04a\x06\xEEV[a\x10\x18V[a\x07,a\x01\x02V[\x80a\x076\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07o\x90a\x07cV[\x90RV[\x91\x90a\x07\x86\x90_` \x85\x01\x94\x01\x90a\x07fV[V[4a\x07\xB8Wa\x07\x986`\x04a\x01\x10V[a\x07\xB4a\x07\xA3a\x07?V[a\x07\xABa\x01\x02V[\x91\x82\x91\x82a\x07sV[\x03\x90\xF3[a\x01\x08V[4a\x07\xEBWa\x07\xD5a\x07\xD06`\x04a\x06\xEEV[a\x10\x88V[a\x07\xDDa\x01\x02V[\x80a\x07\xE7\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08\x0Ca\x08\x11\x91a\x07\xF8V[a\x07\xFDV[\x90V[a\x08\x1E\x90Ta\x08\0V[\x90V[a\x08)a\x07\xF4V[Pa\x08<_a\x086a\x10\x93V[\x01a\x08\x14V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08ja\x08ea\x08o\x92a\x08DV[a\x08PV[a\x08GV[\x90V[\x90V[a\x08\x81a\x08\x86\x91a\x08GV[a\x08rV[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\x08\xAA\x81a\x08\xB1\x93a\x08\x8AV[\x80\x93a\x08\x8FV[\x01\x90V[\x80a\x08\xC6`\x01\x92a\x08\xCD\x96\x94a\x08uV[\x01\x91a\x08\x9AV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\xEE\x90a\x02\x16V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\x08W`@RV[a\x08\xD0V[a\tK\x90a\t\x19a\x08?V[Pa\t<a\t&_a\x08VV[\x91\x93a\t0a\x01\x02V[\x94\x85\x93` \x85\x01a\x08\xB5V[` \x82\x01\x81\x03\x82R\x03\x82a\x08\xE4V[\x90V[\x90a\tja\td32\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\xEBV[\x15a\x05ZV[a\tyWa\tw\x91a\n\x15V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\x91`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[_\x80\xFD[\x90a\t\xACa\t\xA5a\x01\x02V[\x92\x83a\x08\xE4V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xCCWa\t\xC8` \x91a\x02\x16V[\x01\x90V[a\x08\xD0V[\x90\x92\x91\x92a\t\xE6a\t\xE1\x82a\t\xAEV[a\t\x99V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\x02Wa\n\0\x92a\x08\x8FV[V[a\t\x95V[a\n\x12\x916\x91a\t\xD1V[\x90V[a\n'\x91a\n\"\x91a\n\x07V[a\x12tV[V[\x90a\n3\x91a\tNV[V[\x90a\nG\x91a\nBa\x14>V[a\x0BNV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\naa\nf\x91a\nIV[a\nOV[\x90V[a\ns\x90Ta\nUV[\x90V[a\n\x8Aa\n\x85a\n\x8F\x92a\x08DV[a\x03\xB7V[a\x02\xD8V[\x90V[a\n\x9B\x90a\nvV[\x90V[`\xA0\x1B\x90V[\x90a\n\xB3`\xFF`\xA0\x1B\x91a\n\x9EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n\xC6\x90a\x05ZV[\x90V[\x90V[\x90a\n\xE1a\n\xDCa\n\xE8\x92a\n\xBDV[a\n\xC9V[\x82Ta\n\xA4V[\x90UV[a\n\xF5\x90a\x03\xBAV[\x90V[a\x0B\x01\x90a\n\xECV[\x90V[\x90a\x0B\x15`\x01\x80`\xA0\x1B\x03\x91a\x04HV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B(\x90a\n\xECV[\x90V[\x90V[\x90a\x0BCa\x0B>a\x0BJ\x92a\x0B\x1FV[a\x0B+V[\x82Ta\x0B\x04V[\x90UV[a\x0BX`\x01a\niV[a\x0B\xC0W\x81a\x0Bwa\x0Bqa\x0Bl_a\n\x92V[a\x02\xE3V[\x91a\x02\xE3V[\x14a\x0B\xA4Wa\x0B\x9Da\x0B\x96a\x0B\xA2\x93a\x0B\x91`\x01\x80a\n\xCCV[a\n\xF8V[`\x01a\x0B.V[a\x10\x88V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0B\xBC`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0B\xD7`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[\x90a\x0B\xE5\x91a\n5V[V[a\x0B\xEFa\x14>V[a\x0B\xF7a\x0B\xF9V[V[a\x0C\na\x0C\x05_a\n\x92V[a\x14\xAFV[V[a\x0C\x14a\x0B\xE7V[V[_\x90V[a\x0C&a\x0C+\x91a\x07\xF8V[a\x03wV[\x90V[a\x0C8\x90Ta\x0C\x1AV[\x90V[`\xE0\x1B\x90V[a\x0CJ\x81a\x05ZV[\x03a\x0CQWV[_\x80\xFD[\x90PQ\x90a\x0Cb\x82a\x0CAV[V[\x90` \x82\x82\x03\x12a\x0C}Wa\x0Cz\x91_\x01a\x0CUV[\x90V[a\x01\x0CV[\x91\x90a\x0C\x9C\x81a\x0C\x95\x81a\x0C\xA1\x95a\x02\x02V[\x80\x95a\x08\x8FV[a\x02\x16V[\x01\x90V[a\x0C\xCBa\x0C\xD8\x95\x93\x94\x92\x94a\x0C\xC1``\x84\x01\x96_\x85\x01\x90a\x05\xEEV[` \x83\x01\x90a\x05\xEEV[`@\x81\x85\x03\x91\x01Ra\x0C\x82V[\x90V[a\x0C\xE3a\x01\x02V[=_\x82>=\x90\xFD[\x92a\r.` \x93\x94a\x0C\xFBa\x0C\x16V[Pa\r9a\r\x11a\r\x0C`\x01a\x0C.V[a\x03\xE2V[\x93cz9y\xDC\x92\x95\x97a\r\"a\x01\x02V[\x98\x89\x97\x88\x96\x87\x96a\x0C;V[\x86R`\x04\x86\x01a\x0C\xA5V[\x03\x91Z\xFA\x90\x81\x15a\r}W_\x91a\rOW[P\x90V[a\rp\x91P` =\x81\x11a\rvW[a\rh\x81\x83a\x08\xE4V[\x81\x01\x90a\x0CdV[_a\rKV[P=a\r^V[a\x0C\xDBV[\x90a\r\x9Ea\r\x9832\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\xEBV[\x15a\x05ZV[a\r\xADWa\r\xAB\x91a\r\xC9V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\r\xC5`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[a\r\xDB\x91a\r\xD6\x91a\t\rV[a\x12tV[V[\x90a\r\xE7\x91a\r\x82V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\x04a\x0E\t\x91a\x07\xF8V[a\r\xEDV[\x90V[a\x0E\x16\x90Ta\r\xF8V[\x90V[a\x0E!a\r\xE9V[Pa\x0E+_a\x0E\x0CV[\x90V[P\x90V[a\x0EFa\x0EAa\x0EK\x92a\x08DV[a\x03\xB7V[a\x07cV[\x90V[`\x01a\x0EZ\x91\x01a\x07cV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0E\xBFW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0E\xBAW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0E\xB5WV[a\x0EyV[a\x0EuV[a\x0EqV[\x90\x82\x10\x15a\x0E\xDFW` a\x0E\xDB\x92\x02\x81\x01\x90a\x0E}V[\x90\x91V[a\x0E]V[a\x0E\xEF\x81\x83\x90a\x0E.V[\x91a\x0E\xF9_a\x0E2V[[\x80a\x0F\ra\x0F\x07\x86a\x07cV[\x91a\x07cV[\x10\x15a\x0FbWa\x0F;\x90a\x0F132\x90a\x0F)\x87\x87\x86\x91a\x0E\xC4V[\x92\x90\x91a\x0C\xEBV[a\x0F@W[a\x0ENV[a\x0E\xFAV[a\x0F]a\x0FXa\x0FR\x86\x86\x85\x91a\x0E\xC4V[\x90a\t\rV[a\x12tV[a\x0F6V[PPPPV[a\x0Fy\x90a\x0Fta\x14>V[a\x0F\x87V[V[a\x0F\x84\x90a\x03\xD6V[\x90V[\x80a\x0F\xA2a\x0F\x9Ca\x0F\x97_a\n\x92V[a\x02\xE3V[\x91a\x02\xE3V[\x14a\x0F\xFCWa\x0F\xBAa\x0F\xB3\x82a\n\xF8V[`\x01a\x0B.V[a\x0F\xE4\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F{V[\x90a\x0F\xEDa\x01\x02V[\x80a\x0F\xF7\x81a\x02\x9FV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\x14`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[a\x10!\x90a\x0FhV[V[a\x104\x90a\x10/a\x14>V[a\x106V[V[\x80a\x10Qa\x10Ka\x10F_a\n\x92V[a\x02\xE3V[\x91a\x02\xE3V[\x14a\x10aWa\x10_\x90a\x14\xAFV[V[a\x10\x84a\x10m_a\n\x92V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xFBV[\x03\x90\xFD[a\x10\x91\x90a\x10#V[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\xDCa\x10\xD7a\x10\xE1\x92a\x07cV[a\x03\xB7V[a\x10\xBBV[\x90V[a\x10\xED\x90a\x03\xBAV[\x90V[a\x10\xF9\x90a\x10\xE4V[\x90V[a\x11\x06`da\x10\xF0V[\x90V[a\x11\x12\x90a\x03\xD6V[\x90V[a\x11\x1E\x81a\x07cV[\x03a\x11%WV[_\x80\xFD[\x90PQ\x90a\x116\x82a\x11\x15V[V[\x90` \x82\x82\x03\x12a\x11QWa\x11N\x91_\x01a\x11)V[\x90V[a\x01\x0CV[` \x01\x90V[``\x1B\x90V[a\x11k\x90a\x11\\V[\x90V[a\x11w\x90a\x11bV[\x90V[a\x11\x86a\x11\x8B\x91a\x02\xE3V[a\x11nV[\x90RV[`\xC0\x1B\x90V[a\x11\x9E\x90a\x11\x8FV[\x90V[a\x11\xADa\x11\xB2\x91a\x10\xBBV[a\x11\x95V[\x90RV[\x90V[a\x11\xC5a\x11\xCA\x91a\x01\x1FV[a\x11\xB6V[\x90RV[\x92a\x11\xFC`\x08a\x12\x04\x94a\x11\xF4`\x14\x88a\x11\xEC` \x9B\x9A\x86\x99a\x11zV[\x01\x80\x92a\x11\xA1V[\x01\x80\x92a\x11\xA1V[\x01\x80\x92a\x11\xB9V[\x01\x90V[` \x81a\x12\x1Aa\x12\"\x93\x83\x96\x95a\x11\xB9V[\x01\x80\x92a\x11\xB9V[\x01\x90V[\x90a\x122_\x19\x91a\x04HV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12E\x90a\x01\x1FV[\x90V[a\x12Q\x90a\x07\xF8V[\x90V[\x90a\x12ia\x12da\x12p\x92a\x12<V[a\x12HV[\x82Ta\x12&V[\x90UV[a\x12|a\x10\xB7V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x14-Wa\x12\xCF` a\x12\xB9a\x12\xB4a\x10\xFCV[a\x11\tV[c\xA3\xB1\xB3\x1D\x90a\x12\xC7a\x01\x02V[\x93\x84\x92a\x0C;V[\x82R\x81\x80a\x12\xDF`\x04\x82\x01a\x02\x9FV[\x03\x91Z\xFA\x90\x81\x15a\x14(Wa\x13\xB5\x91a\x12\xFF\x91_\x91a\x13\xFAW[Pa\x10\xC8V[[_a\x13\ta\x10\x93V[\x91a\x13\x9Ba\x13\x18\x83\x85\x01a\x08\x14V[\x91a\x13a3a\x13Ra\x13)Ba\x10\xC8V[\x8Aa\x13<a\x136\x82a\x01\xFEV[\x91a\x11VV[ \x90a\x13Fa\x01\x02V[\x95\x86\x94` \x86\x01a\x11\xCEV[` \x82\x01\x81\x03\x82R\x03\x82a\x08\xE4V[a\x13sa\x13m\x82a\x01\xFEV[\x91a\x11VV[ \x91a\x13\x8Ca\x13\x80a\x01\x02V[\x93\x84\x92` \x84\x01a\x12\x08V[` \x82\x01\x81\x03\x82R\x03\x82a\x08\xE4V[a\x13\xADa\x13\xA7\x82a\x01\xFEV[\x91a\x11VV[ \x91\x01a\x12TV[3a\x13\xF5a\x13\xE3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F{V[\x92a\x13\xECa\x01\x02V[\x91\x82\x91\x82a\x02QV[\x03\x90\xA2V[a\x14\x1B\x91P` =\x81\x11a\x14!W[a\x14\x13\x81\x83a\x08\xE4V[\x81\x01\x90a\x118V[_a\x12\xF9V[P=a\x14\tV[a\x0C\xDBV[a\x13\xB5a\x149Ca\x10\xC8V[a\x13\0V[a\x14Fa\x0E\x19V[a\x14_a\x14Ya\x14Ta\x15\x0EV[a\x02\xE3V[\x91a\x02\xE3V[\x03a\x14fWV[a\x14\x88a\x14qa\x15\x0EV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xFBV[\x03\x90\xFD[\x90V[\x90a\x14\xA4a\x14\x9Fa\x14\xAB\x92a\x0F{V[a\x14\x8CV[\x82Ta\x0B\x04V[\x90UV[a\x14\xB8_a\x0E\x0CV[a\x14\xC2\x82_a\x14\x8FV[\x90a\x14\xF6a\x14\xF0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F{V[\x91a\x0F{V[\x91a\x14\xFFa\x01\x02V[\x80a\x15\t\x81a\x02\x9FV[\x03\x90\xA3V[a\x15\x16a\r\xE9V[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6107f0565b61001d5f356100fc565b806303381154146100f7578063366cbab7146100f257806346e2cc09146100ed578063485cc955146100e85780635b3cd6e2146100e357806363d96437146100de578063715018a6146100d95780637a3979dc146100d4578063804e5123146100cf5780638da5cb5b146100ca578063cdafb978146100c5578063d4f0eb4d146100c0578063d8781342146100bb5763f2fde38b0361000e576107bd565b610788565b61070c565b6106ba565b610610565b6105ba565b610581565b6104d5565b6104a0565b610410565b61033f565b6102a4565b610269565b610144565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261011a57565b61010c565b90565b61012b9061011f565b9052565b9190610142905f60208501940190610122565b565b3461017457610154366004610110565b61017061015f610821565b610167610102565b9182918261012f565b0390f35b610108565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101c35781359167ffffffffffffffff83116101be5760200192600183028401116101b957565b610185565b610181565b61017d565b906020828203126101f9575f82013567ffffffffffffffff81116101f4576101f09201610189565b9091565b610179565b61010c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61023f61024860209361024d93610236816101fe565b93848093610202565b9586910161020b565b610216565b0190565b6102669160208201915f818403910152610220565b90565b3461029a5761029661028561027f3660046101c8565b9061090d565b61028d610102565b91829182610251565b0390f35b610108565b5f0190565b346102d3576102bd6102b73660046101c8565b90610a29565b6102c5610102565b806102cf8161029f565b0390f35b610108565b60018060a01b031690565b6102ec906102d8565b90565b6102f8816102e3565b036102ff57565b5f80fd5b90503590610310826102ef565b565b919060408382031261033a578061032e610337925f8601610303565b93602001610303565b90565b61010c565b3461036e57610358610352366004610312565b90610bdb565b610360610102565b8061036a8161029f565b0390f35b610108565b1c90565b60018060a01b031690565b6103929060086103979302610373565b610377565b90565b906103a59154610382565b90565b6103b460015f9061039a565b90565b90565b6103ce6103c96103d3926102d8565b6103b7565b6102d8565b90565b6103df906103ba565b90565b6103eb906103d6565b90565b6103f7906103e2565b9052565b919061040e905f602085019401906103ee565b565b3461044057610420366004610110565b61043c61042b6103a8565b610433610102565b918291826103fb565b0390f35b610108565b90565b5f1b90565b61046161045c61046692610445565b610448565b61011f565b90565b6104927f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9061044d565b90565b61049d610469565b90565b346104d0576104b0366004610110565b6104cc6104bb610495565b6104c3610102565b9182918261012f565b0390f35b610108565b34610503576104e5366004610110565b6104ed610c0c565b6104f5610102565b806104ff8161029f565b0390f35b610108565b916060838303126105555761051f825f8501610303565b9261052d8360208301610303565b92604082013567ffffffffffffffff81116105505761054c9201610189565b9091565b610179565b61010c565b151590565b6105689061055a565b9052565b919061057f905f6020850194019061055f565b565b346105b5576105b16105a0610597366004610508565b92919091610ceb565b6105a8610102565b9182918261056c565b0390f35b610108565b346105e9576105d36105cd3660046101c8565b90610ddd565b6105db610102565b806105e58161029f565b0390f35b610108565b6105f7906102e3565b9052565b919061060e905f602085019401906105ee565b565b3461064057610620366004610110565b61063c61062b610e19565b610633610102565b918291826105fb565b0390f35b610108565b909182601f8301121561067f5781359167ffffffffffffffff831161067a57602001926020830284011161067557565b610185565b610181565b61017d565b906020828203126106b5575f82013567ffffffffffffffff81116106b0576106ac9201610645565b9091565b610179565b61010c565b346106e9576106d36106cd366004610684565b90610ee4565b6106db610102565b806106e58161029f565b0390f35b610108565b9060208282031261070757610704915f01610303565b90565b61010c565b3461073a5761072461071f3660046106ee565b611018565b61072c610102565b806107368161029f565b0390f35b610108565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61076f90610763565b9052565b9190610786905f60208501940190610766565b565b346107b857610798366004610110565b6107b46107a361073f565b6107ab610102565b91829182610773565b0390f35b610108565b346107eb576107d56107d03660046106ee565b611088565b6107dd610102565b806107e78161029f565b0390f35b610108565b5f80fd5b5f90565b5f1c90565b90565b61080c610811916107f8565b6107fd565b90565b61081e9054610800565b90565b6108296107f4565b5061083c5f610836611093565b01610814565b90565b606090565b90565b60ff60f81b1690565b60f81b90565b61086a61086561086f92610844565b610850565b610847565b90565b90565b61088161088691610847565b610872565b9052565b905090565b90825f939282370152565b9091826108aa816108b19361088a565b809361088f565b0190565b806108c66001926108cd9694610875565b019161089a565b90565b634e487b7160e01b5f52604160045260245ffd5b906108ee90610216565b810190811067ffffffffffffffff82111761090857604052565b6108d0565b61094b9061091961083f565b5061093c6109265f610856565b9193610930610102565b948593602085016108b5565b602082018103825203826108e4565b90565b9061096a61096433329085859192909192610ceb565b1561055a565b6109795761097791610a15565b565b5f631b8e828b60e31b8152806109916004820161029f565b0390fd5b5f80fd5b906109ac6109a5610102565b92836108e4565b565b67ffffffffffffffff81116109cc576109c8602091610216565b0190565b6108d0565b909291926109e66109e1826109ae565b610999565b93818552602085019082840111610a0257610a009261088f565b565b610995565b610a129136916109d1565b90565b610a2791610a2291610a07565b611274565b565b90610a339161094e565b565b90610a4791610a4261143e565b610b4e565b565b60a01c90565b60ff1690565b610a61610a6691610a49565b610a4f565b90565b610a739054610a55565b90565b610a8a610a85610a8f92610844565b6103b7565b6102d8565b90565b610a9b90610a76565b90565b60a01b90565b90610ab360ff60a01b91610a9e565b9181191691161790565b610ac69061055a565b90565b90565b90610ae1610adc610ae892610abd565b610ac9565b8254610aa4565b9055565b610af5906103ba565b90565b610b0190610aec565b90565b90610b1560018060a01b0391610448565b9181191691161790565b610b2890610aec565b90565b90565b90610b43610b3e610b4a92610b1f565b610b2b565b8254610b04565b9055565b610b586001610a69565b610bc05781610b77610b71610b6c5f610a92565b6102e3565b916102e3565b14610ba457610b9d610b96610ba293610b91600180610acc565b610af8565b6001610b2e565b611088565b565b5f632e7f3c7f60e11b815280610bbc6004820161029f565b0390fd5b5f62dc149f60e41b815280610bd76004820161029f565b0390fd5b90610be591610a35565b565b610bef61143e565b610bf7610bf9565b565b610c0a610c055f610a92565b6114af565b565b610c14610be7565b565b5f90565b610c26610c2b916107f8565b610377565b90565b610c389054610c1a565b90565b60e01b90565b610c4a8161055a565b03610c5157565b5f80fd5b90505190610c6282610c41565b565b90602082820312610c7d57610c7a915f01610c55565b90565b61010c565b9190610c9c81610c9581610ca195610202565b809561088f565b610216565b0190565b610ccb610cd89593949294610cc160608401965f8501906105ee565b60208301906105ee565b6040818503910152610c82565b90565b610ce3610102565b3d5f823e3d90fd5b92610d2e60209394610cfb610c16565b50610d39610d11610d0c6001610c2e565b6103e2565b93637a3979dc929597610d22610102565b98899788968796610c3b565b865260048601610ca5565b03915afa908115610d7d575f91610d4f575b5090565b610d70915060203d8111610d76575b610d6881836108e4565b810190610c64565b5f610d4b565b503d610d5e565b610cdb565b90610d9e610d9833329085859192909192610ceb565b1561055a565b610dad57610dab91610dc9565b565b5f631b8e828b60e31b815280610dc56004820161029f565b0390fd5b610ddb91610dd69161090d565b611274565b565b90610de791610d82565b565b5f90565b60018060a01b031690565b610e04610e09916107f8565b610ded565b90565b610e169054610df8565b90565b610e21610de9565b50610e2b5f610e0c565b90565b5090565b610e46610e41610e4b92610844565b6103b7565b610763565b90565b6001610e5a9101610763565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610ebf570180359067ffffffffffffffff8211610eba57602001916001820236038313610eb557565b610e79565b610e75565b610e71565b90821015610edf576020610edb9202810190610e7d565b9091565b610e5d565b610eef818390610e2e565b91610ef95f610e32565b5b80610f0d610f0786610763565b91610763565b1015610f6257610f3b90610f31333290610f2987878691610ec4565b929091610ceb565b610f40575b610e4e565b610efa565b610f5d610f58610f5286868591610ec4565b9061090d565b611274565b610f36565b50505050565b610f7990610f7461143e565b610f87565b565b610f84906103d6565b90565b80610fa2610f9c610f975f610a92565b6102e3565b916102e3565b14610ffc57610fba610fb382610af8565b6001610b2e565b610fe47f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610f7b565b90610fed610102565b80610ff78161029f565b0390a2565b5f632e7f3c7f60e11b8152806110146004820161029f565b0390fd5b61102190610f68565b565b6110349061102f61143e565b611036565b565b8061105161104b6110465f610a92565b6102e3565b916102e3565b146110615761105f906114af565b565b61108461106d5f610a92565b5f918291631e4fbdf760e01b8352600483016105fb565b0390fd5b61109190611023565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b6110dc6110d76110e192610763565b6103b7565b6110bb565b90565b6110ed906103ba565b90565b6110f9906110e4565b90565b61110660646110f0565b90565b611112906103d6565b90565b61111e81610763565b0361112557565b5f80fd5b9050519061113682611115565b565b906020828203126111515761114e915f01611129565b90565b61010c565b60200190565b60601b90565b61116b9061115c565b90565b61117790611162565b90565b61118661118b916102e3565b61116e565b9052565b60c01b90565b61119e9061118f565b90565b6111ad6111b2916110bb565b611195565b9052565b90565b6111c56111ca9161011f565b6111b6565b9052565b926111fc6008611204946111f46014886111ec60209b9a869961117a565b0180926111a1565b0180926111a1565b0180926111b9565b0190565b60208161121a611222938396956111b9565b0180926111b9565b0190565b906112325f1991610448565b9181191691161790565b6112459061011f565b90565b611251906107f8565b90565b906112696112646112709261123c565b611248565b8254611226565b9055565b61127c6110b7565b507f00000000000000000000000000000000000000000000000000000000000000005f1461142d576112cf60206112b96112b46110fc565b611109565b63a3b1b31d906112c7610102565b938492610c3b565b825281806112df6004820161029f565b03915afa908115611428576113b5916112ff915f916113fa575b506110c8565b5b5f611309611093565b9161139b611318838501610814565b9161136133611352611329426110c8565b8a61133c611336826101fe565b91611156565b2090611346610102565b958694602086016111ce565b602082018103825203826108e4565b61137361136d826101fe565b91611156565b209161138c611380610102565b93849260208401611208565b602082018103825203826108e4565b6113ad6113a7826101fe565b91611156565b209101611254565b336113f56113e37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610f7b565b926113ec610102565b91829182610251565b0390a2565b61141b915060203d8111611421575b61141381836108e4565b810190611138565b5f6112f9565b503d611409565b610cdb565b6113b5611439436110c8565b611300565b611446610e19565b61145f61145961145461150e565b6102e3565b916102e3565b0361146657565b61148861147161150e565b5f91829163118cdaa760e01b8352600483016105fb565b0390fd5b90565b906114a461149f6114ab92610f7b565b61148c565b8254610b04565b9055565b6114b85f610e0c565b6114c2825f61148f565b906114f66114f07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f7b565b91610f7b565b916114ff610102565b806115098161029f565b0390a3565b611516610de9565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\xF0V[a\0\x1D_5a\0\xFCV[\x80c\x038\x11T\x14a\0\xF7W\x80c6l\xBA\xB7\x14a\0\xF2W\x80cF\xE2\xCC\t\x14a\0\xEDW\x80cH\\\xC9U\x14a\0\xE8W\x80c[<\xD6\xE2\x14a\0\xE3W\x80cc\xD9d7\x14a\0\xDEW\x80cqP\x18\xA6\x14a\0\xD9W\x80cz9y\xDC\x14a\0\xD4W\x80c\x80NQ#\x14a\0\xCFW\x80c\x8D\xA5\xCB[\x14a\0\xCAW\x80c\xCD\xAF\xB9x\x14a\0\xC5W\x80c\xD4\xF0\xEBM\x14a\0\xC0W\x80c\xD8x\x13B\x14a\0\xBBWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07\xBDV[a\x07\x88V[a\x07\x0CV[a\x06\xBAV[a\x06\x10V[a\x05\xBAV[a\x05\x81V[a\x04\xD5V[a\x04\xA0V[a\x04\x10V[a\x03?V[a\x02\xA4V[a\x02iV[a\x01DV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01\x1AWV[a\x01\x0CV[\x90V[a\x01+\x90a\x01\x1FV[\x90RV[\x91\x90a\x01B\x90_` \x85\x01\x94\x01\x90a\x01\"V[V[4a\x01tWa\x01T6`\x04a\x01\x10V[a\x01pa\x01_a\x08!V[a\x01ga\x01\x02V[\x91\x82\x91\x82a\x01/V[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xC3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xBEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xB9WV[a\x01\x85V[a\x01\x81V[a\x01}V[\x90` \x82\x82\x03\x12a\x01\xF9W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xF4Wa\x01\xF0\x92\x01a\x01\x89V[\x90\x91V[a\x01yV[a\x01\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02?a\x02H` \x93a\x02M\x93a\x026\x81a\x01\xFEV[\x93\x84\x80\x93a\x02\x02V[\x95\x86\x91\x01a\x02\x0BV[a\x02\x16V[\x01\x90V[a\x02f\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02 V[\x90V[4a\x02\x9AWa\x02\x96a\x02\x85a\x02\x7F6`\x04a\x01\xC8V[\x90a\t\rV[a\x02\x8Da\x01\x02V[\x91\x82\x91\x82a\x02QV[\x03\x90\xF3[a\x01\x08V[_\x01\x90V[4a\x02\xD3Wa\x02\xBDa\x02\xB76`\x04a\x01\xC8V[\x90a\n)V[a\x02\xC5a\x01\x02V[\x80a\x02\xCF\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xEC\x90a\x02\xD8V[\x90V[a\x02\xF8\x81a\x02\xE3V[\x03a\x02\xFFWV[_\x80\xFD[\x90P5\x90a\x03\x10\x82a\x02\xEFV[V[\x91\x90`@\x83\x82\x03\x12a\x03:W\x80a\x03.a\x037\x92_\x86\x01a\x03\x03V[\x93` \x01a\x03\x03V[\x90V[a\x01\x0CV[4a\x03nWa\x03Xa\x03R6`\x04a\x03\x12V[\x90a\x0B\xDBV[a\x03`a\x01\x02V[\x80a\x03j\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x92\x90`\x08a\x03\x97\x93\x02a\x03sV[a\x03wV[\x90V[\x90a\x03\xA5\x91Ta\x03\x82V[\x90V[a\x03\xB4`\x01_\x90a\x03\x9AV[\x90V[\x90V[a\x03\xCEa\x03\xC9a\x03\xD3\x92a\x02\xD8V[a\x03\xB7V[a\x02\xD8V[\x90V[a\x03\xDF\x90a\x03\xBAV[\x90V[a\x03\xEB\x90a\x03\xD6V[\x90V[a\x03\xF7\x90a\x03\xE2V[\x90RV[\x91\x90a\x04\x0E\x90_` \x85\x01\x94\x01\x90a\x03\xEEV[V[4a\x04@Wa\x04 6`\x04a\x01\x10V[a\x04<a\x04+a\x03\xA8V[a\x043a\x01\x02V[\x91\x82\x91\x82a\x03\xFBV[\x03\x90\xF3[a\x01\x08V[\x90V[_\x1B\x90V[a\x04aa\x04\\a\x04f\x92a\x04EV[a\x04HV[a\x01\x1FV[\x90V[a\x04\x92\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x04MV[\x90V[a\x04\x9Da\x04iV[\x90V[4a\x04\xD0Wa\x04\xB06`\x04a\x01\x10V[a\x04\xCCa\x04\xBBa\x04\x95V[a\x04\xC3a\x01\x02V[\x91\x82\x91\x82a\x01/V[\x03\x90\xF3[a\x01\x08V[4a\x05\x03Wa\x04\xE56`\x04a\x01\x10V[a\x04\xEDa\x0C\x0CV[a\x04\xF5a\x01\x02V[\x80a\x04\xFF\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x91``\x83\x83\x03\x12a\x05UWa\x05\x1F\x82_\x85\x01a\x03\x03V[\x92a\x05-\x83` \x83\x01a\x03\x03V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05PWa\x05L\x92\x01a\x01\x89V[\x90\x91V[a\x01yV[a\x01\x0CV[\x15\x15\x90V[a\x05h\x90a\x05ZV[\x90RV[\x91\x90a\x05\x7F\x90_` \x85\x01\x94\x01\x90a\x05_V[V[4a\x05\xB5Wa\x05\xB1a\x05\xA0a\x05\x976`\x04a\x05\x08V[\x92\x91\x90\x91a\x0C\xEBV[a\x05\xA8a\x01\x02V[\x91\x82\x91\x82a\x05lV[\x03\x90\xF3[a\x01\x08V[4a\x05\xE9Wa\x05\xD3a\x05\xCD6`\x04a\x01\xC8V[\x90a\r\xDDV[a\x05\xDBa\x01\x02V[\x80a\x05\xE5\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[a\x05\xF7\x90a\x02\xE3V[\x90RV[\x91\x90a\x06\x0E\x90_` \x85\x01\x94\x01\x90a\x05\xEEV[V[4a\x06@Wa\x06 6`\x04a\x01\x10V[a\x06<a\x06+a\x0E\x19V[a\x063a\x01\x02V[\x91\x82\x91\x82a\x05\xFBV[\x03\x90\xF3[a\x01\x08V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x7FW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06zW` \x01\x92` \x83\x02\x84\x01\x11a\x06uWV[a\x01\x85V[a\x01\x81V[a\x01}V[\x90` \x82\x82\x03\x12a\x06\xB5W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xB0Wa\x06\xAC\x92\x01a\x06EV[\x90\x91V[a\x01yV[a\x01\x0CV[4a\x06\xE9Wa\x06\xD3a\x06\xCD6`\x04a\x06\x84V[\x90a\x0E\xE4V[a\x06\xDBa\x01\x02V[\x80a\x06\xE5\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x07\x07Wa\x07\x04\x91_\x01a\x03\x03V[\x90V[a\x01\x0CV[4a\x07:Wa\x07$a\x07\x1F6`\x04a\x06\xEEV[a\x10\x18V[a\x07,a\x01\x02V[\x80a\x076\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x07o\x90a\x07cV[\x90RV[\x91\x90a\x07\x86\x90_` \x85\x01\x94\x01\x90a\x07fV[V[4a\x07\xB8Wa\x07\x986`\x04a\x01\x10V[a\x07\xB4a\x07\xA3a\x07?V[a\x07\xABa\x01\x02V[\x91\x82\x91\x82a\x07sV[\x03\x90\xF3[a\x01\x08V[4a\x07\xEBWa\x07\xD5a\x07\xD06`\x04a\x06\xEEV[a\x10\x88V[a\x07\xDDa\x01\x02V[\x80a\x07\xE7\x81a\x02\x9FV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x08\x0Ca\x08\x11\x91a\x07\xF8V[a\x07\xFDV[\x90V[a\x08\x1E\x90Ta\x08\0V[\x90V[a\x08)a\x07\xF4V[Pa\x08<_a\x086a\x10\x93V[\x01a\x08\x14V[\x90V[``\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x08ja\x08ea\x08o\x92a\x08DV[a\x08PV[a\x08GV[\x90V[\x90V[a\x08\x81a\x08\x86\x91a\x08GV[a\x08rV[\x90RV[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\x08\xAA\x81a\x08\xB1\x93a\x08\x8AV[\x80\x93a\x08\x8FV[\x01\x90V[\x80a\x08\xC6`\x01\x92a\x08\xCD\x96\x94a\x08uV[\x01\x91a\x08\x9AV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\xEE\x90a\x02\x16V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\x08W`@RV[a\x08\xD0V[a\tK\x90a\t\x19a\x08?V[Pa\t<a\t&_a\x08VV[\x91\x93a\t0a\x01\x02V[\x94\x85\x93` \x85\x01a\x08\xB5V[` \x82\x01\x81\x03\x82R\x03\x82a\x08\xE4V[\x90V[\x90a\tja\td32\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\xEBV[\x15a\x05ZV[a\tyWa\tw\x91a\n\x15V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\x91`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[_\x80\xFD[\x90a\t\xACa\t\xA5a\x01\x02V[\x92\x83a\x08\xE4V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xCCWa\t\xC8` \x91a\x02\x16V[\x01\x90V[a\x08\xD0V[\x90\x92\x91\x92a\t\xE6a\t\xE1\x82a\t\xAEV[a\t\x99V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\x02Wa\n\0\x92a\x08\x8FV[V[a\t\x95V[a\n\x12\x916\x91a\t\xD1V[\x90V[a\n'\x91a\n\"\x91a\n\x07V[a\x12tV[V[\x90a\n3\x91a\tNV[V[\x90a\nG\x91a\nBa\x14>V[a\x0BNV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\naa\nf\x91a\nIV[a\nOV[\x90V[a\ns\x90Ta\nUV[\x90V[a\n\x8Aa\n\x85a\n\x8F\x92a\x08DV[a\x03\xB7V[a\x02\xD8V[\x90V[a\n\x9B\x90a\nvV[\x90V[`\xA0\x1B\x90V[\x90a\n\xB3`\xFF`\xA0\x1B\x91a\n\x9EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n\xC6\x90a\x05ZV[\x90V[\x90V[\x90a\n\xE1a\n\xDCa\n\xE8\x92a\n\xBDV[a\n\xC9V[\x82Ta\n\xA4V[\x90UV[a\n\xF5\x90a\x03\xBAV[\x90V[a\x0B\x01\x90a\n\xECV[\x90V[\x90a\x0B\x15`\x01\x80`\xA0\x1B\x03\x91a\x04HV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B(\x90a\n\xECV[\x90V[\x90V[\x90a\x0BCa\x0B>a\x0BJ\x92a\x0B\x1FV[a\x0B+V[\x82Ta\x0B\x04V[\x90UV[a\x0BX`\x01a\niV[a\x0B\xC0W\x81a\x0Bwa\x0Bqa\x0Bl_a\n\x92V[a\x02\xE3V[\x91a\x02\xE3V[\x14a\x0B\xA4Wa\x0B\x9Da\x0B\x96a\x0B\xA2\x93a\x0B\x91`\x01\x80a\n\xCCV[a\n\xF8V[`\x01a\x0B.V[a\x10\x88V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0B\xBC`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0B\xD7`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[\x90a\x0B\xE5\x91a\n5V[V[a\x0B\xEFa\x14>V[a\x0B\xF7a\x0B\xF9V[V[a\x0C\na\x0C\x05_a\n\x92V[a\x14\xAFV[V[a\x0C\x14a\x0B\xE7V[V[_\x90V[a\x0C&a\x0C+\x91a\x07\xF8V[a\x03wV[\x90V[a\x0C8\x90Ta\x0C\x1AV[\x90V[`\xE0\x1B\x90V[a\x0CJ\x81a\x05ZV[\x03a\x0CQWV[_\x80\xFD[\x90PQ\x90a\x0Cb\x82a\x0CAV[V[\x90` \x82\x82\x03\x12a\x0C}Wa\x0Cz\x91_\x01a\x0CUV[\x90V[a\x01\x0CV[\x91\x90a\x0C\x9C\x81a\x0C\x95\x81a\x0C\xA1\x95a\x02\x02V[\x80\x95a\x08\x8FV[a\x02\x16V[\x01\x90V[a\x0C\xCBa\x0C\xD8\x95\x93\x94\x92\x94a\x0C\xC1``\x84\x01\x96_\x85\x01\x90a\x05\xEEV[` \x83\x01\x90a\x05\xEEV[`@\x81\x85\x03\x91\x01Ra\x0C\x82V[\x90V[a\x0C\xE3a\x01\x02V[=_\x82>=\x90\xFD[\x92a\r.` \x93\x94a\x0C\xFBa\x0C\x16V[Pa\r9a\r\x11a\r\x0C`\x01a\x0C.V[a\x03\xE2V[\x93cz9y\xDC\x92\x95\x97a\r\"a\x01\x02V[\x98\x89\x97\x88\x96\x87\x96a\x0C;V[\x86R`\x04\x86\x01a\x0C\xA5V[\x03\x91Z\xFA\x90\x81\x15a\r}W_\x91a\rOW[P\x90V[a\rp\x91P` =\x81\x11a\rvW[a\rh\x81\x83a\x08\xE4V[\x81\x01\x90a\x0CdV[_a\rKV[P=a\r^V[a\x0C\xDBV[\x90a\r\x9Ea\r\x9832\x90\x85\x85\x91\x92\x90\x91\x92a\x0C\xEBV[\x15a\x05ZV[a\r\xADWa\r\xAB\x91a\r\xC9V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\r\xC5`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[a\r\xDB\x91a\r\xD6\x91a\t\rV[a\x12tV[V[\x90a\r\xE7\x91a\r\x82V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\x04a\x0E\t\x91a\x07\xF8V[a\r\xEDV[\x90V[a\x0E\x16\x90Ta\r\xF8V[\x90V[a\x0E!a\r\xE9V[Pa\x0E+_a\x0E\x0CV[\x90V[P\x90V[a\x0EFa\x0EAa\x0EK\x92a\x08DV[a\x03\xB7V[a\x07cV[\x90V[`\x01a\x0EZ\x91\x01a\x07cV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0E\xBFW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0E\xBAW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0E\xB5WV[a\x0EyV[a\x0EuV[a\x0EqV[\x90\x82\x10\x15a\x0E\xDFW` a\x0E\xDB\x92\x02\x81\x01\x90a\x0E}V[\x90\x91V[a\x0E]V[a\x0E\xEF\x81\x83\x90a\x0E.V[\x91a\x0E\xF9_a\x0E2V[[\x80a\x0F\ra\x0F\x07\x86a\x07cV[\x91a\x07cV[\x10\x15a\x0FbWa\x0F;\x90a\x0F132\x90a\x0F)\x87\x87\x86\x91a\x0E\xC4V[\x92\x90\x91a\x0C\xEBV[a\x0F@W[a\x0ENV[a\x0E\xFAV[a\x0F]a\x0FXa\x0FR\x86\x86\x85\x91a\x0E\xC4V[\x90a\t\rV[a\x12tV[a\x0F6V[PPPPV[a\x0Fy\x90a\x0Fta\x14>V[a\x0F\x87V[V[a\x0F\x84\x90a\x03\xD6V[\x90V[\x80a\x0F\xA2a\x0F\x9Ca\x0F\x97_a\n\x92V[a\x02\xE3V[\x91a\x02\xE3V[\x14a\x0F\xFCWa\x0F\xBAa\x0F\xB3\x82a\n\xF8V[`\x01a\x0B.V[a\x0F\xE4\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0F{V[\x90a\x0F\xEDa\x01\x02V[\x80a\x0F\xF7\x81a\x02\x9FV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\x14`\x04\x82\x01a\x02\x9FV[\x03\x90\xFD[a\x10!\x90a\x0FhV[V[a\x104\x90a\x10/a\x14>V[a\x106V[V[\x80a\x10Qa\x10Ka\x10F_a\n\x92V[a\x02\xE3V[\x91a\x02\xE3V[\x14a\x10aWa\x10_\x90a\x14\xAFV[V[a\x10\x84a\x10m_a\n\x92V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xFBV[\x03\x90\xFD[a\x10\x91\x90a\x10#V[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\xDCa\x10\xD7a\x10\xE1\x92a\x07cV[a\x03\xB7V[a\x10\xBBV[\x90V[a\x10\xED\x90a\x03\xBAV[\x90V[a\x10\xF9\x90a\x10\xE4V[\x90V[a\x11\x06`da\x10\xF0V[\x90V[a\x11\x12\x90a\x03\xD6V[\x90V[a\x11\x1E\x81a\x07cV[\x03a\x11%WV[_\x80\xFD[\x90PQ\x90a\x116\x82a\x11\x15V[V[\x90` \x82\x82\x03\x12a\x11QWa\x11N\x91_\x01a\x11)V[\x90V[a\x01\x0CV[` \x01\x90V[``\x1B\x90V[a\x11k\x90a\x11\\V[\x90V[a\x11w\x90a\x11bV[\x90V[a\x11\x86a\x11\x8B\x91a\x02\xE3V[a\x11nV[\x90RV[`\xC0\x1B\x90V[a\x11\x9E\x90a\x11\x8FV[\x90V[a\x11\xADa\x11\xB2\x91a\x10\xBBV[a\x11\x95V[\x90RV[\x90V[a\x11\xC5a\x11\xCA\x91a\x01\x1FV[a\x11\xB6V[\x90RV[\x92a\x11\xFC`\x08a\x12\x04\x94a\x11\xF4`\x14\x88a\x11\xEC` \x9B\x9A\x86\x99a\x11zV[\x01\x80\x92a\x11\xA1V[\x01\x80\x92a\x11\xA1V[\x01\x80\x92a\x11\xB9V[\x01\x90V[` \x81a\x12\x1Aa\x12\"\x93\x83\x96\x95a\x11\xB9V[\x01\x80\x92a\x11\xB9V[\x01\x90V[\x90a\x122_\x19\x91a\x04HV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12E\x90a\x01\x1FV[\x90V[a\x12Q\x90a\x07\xF8V[\x90V[\x90a\x12ia\x12da\x12p\x92a\x12<V[a\x12HV[\x82Ta\x12&V[\x90UV[a\x12|a\x10\xB7V[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x14-Wa\x12\xCF` a\x12\xB9a\x12\xB4a\x10\xFCV[a\x11\tV[c\xA3\xB1\xB3\x1D\x90a\x12\xC7a\x01\x02V[\x93\x84\x92a\x0C;V[\x82R\x81\x80a\x12\xDF`\x04\x82\x01a\x02\x9FV[\x03\x91Z\xFA\x90\x81\x15a\x14(Wa\x13\xB5\x91a\x12\xFF\x91_\x91a\x13\xFAW[Pa\x10\xC8V[[_a\x13\ta\x10\x93V[\x91a\x13\x9Ba\x13\x18\x83\x85\x01a\x08\x14V[\x91a\x13a3a\x13Ra\x13)Ba\x10\xC8V[\x8Aa\x13<a\x136\x82a\x01\xFEV[\x91a\x11VV[ \x90a\x13Fa\x01\x02V[\x95\x86\x94` \x86\x01a\x11\xCEV[` \x82\x01\x81\x03\x82R\x03\x82a\x08\xE4V[a\x13sa\x13m\x82a\x01\xFEV[\x91a\x11VV[ \x91a\x13\x8Ca\x13\x80a\x01\x02V[\x93\x84\x92` \x84\x01a\x12\x08V[` \x82\x01\x81\x03\x82R\x03\x82a\x08\xE4V[a\x13\xADa\x13\xA7\x82a\x01\xFEV[\x91a\x11VV[ \x91\x01a\x12TV[3a\x13\xF5a\x13\xE3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0F{V[\x92a\x13\xECa\x01\x02V[\x91\x82\x91\x82a\x02QV[\x03\x90\xA2V[a\x14\x1B\x91P` =\x81\x11a\x14!W[a\x14\x13\x81\x83a\x08\xE4V[\x81\x01\x90a\x118V[_a\x12\xF9V[P=a\x14\tV[a\x0C\xDBV[a\x13\xB5a\x149Ca\x10\xC8V[a\x13\0V[a\x14Fa\x0E\x19V[a\x14_a\x14Ya\x14Ta\x15\x0EV[a\x02\xE3V[\x91a\x02\xE3V[\x03a\x14fWV[a\x14\x88a\x14qa\x15\x0EV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xFBV[\x03\x90\xFD[\x90V[\x90a\x14\xA4a\x14\x9Fa\x14\xAB\x92a\x0F{V[a\x14\x8CV[\x82Ta\x0B\x04V[\x90UV[a\x14\xB8_a\x0E\x0CV[a\x14\xC2\x82_a\x14\x8FV[\x90a\x14\xF6a\x14\xF0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0F{V[\x91a\x0F{V[\x91a\x14\xFFa\x01\x02V[\x80a\x15\t\x81a\x02\x9FV[\x03\x90\xA3V[a\x15\x16a\r\xE9V[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `ACCUMULATOR_STORAGE_LOCATION()` and selector `0x63d96437`.
```solidity
function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`ACCUMULATOR_STORAGE_LOCATION()`](ACCUMULATOR_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ACCUMULATOR_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ACCUMULATOR_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ACCUMULATOR_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [99u8, 217u8, 100u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `accumulator()` and selector `0x03381154`.
```solidity
function accumulator() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorCall {}
    ///Container type for the return parameters of the [`accumulator()`](accumulatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for accumulatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = accumulatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "accumulator()";
            const SELECTOR: [u8; 4] = [3u8, 56u8, 17u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulkCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulkCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulkReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChain`](self) function calls.
    pub enum SyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        ACCUMULATOR_STORAGE_LOCATION(ACCUMULATOR_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        accumulator(accumulatorCall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionUncompressed(processTransactionUncompressedCall),
        #[allow(missing_docs)]
        processTransactionsBulk(processTransactionsBulkCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [3u8, 56u8, 17u8, 84u8],
            [54u8, 108u8, 186u8, 183u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [99u8, 217u8, 100u8, 55u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [141u8, 165u8, 203u8, 91u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainCalls {
        const NAME: &'static str = "SyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(_) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::accumulator(_) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed(_) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk(_) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls>] = &[
                {
                    fn accumulator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <accumulatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::accumulator)
                    }
                    accumulator
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::prependZeroByte)
                    }
                    prependZeroByte
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn ACCUMULATOR_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::ACCUMULATOR_STORAGE_LOCATION,
                            )
                    }
                    ACCUMULATOR_STORAGE_LOCATION
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainCalls::processTransactionUncompressed,
                            )
                    }
                    processTransactionUncompressed
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::owner)
                    }
                    owner
                },
                {
                    fn processTransactionsBulk(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::processTransactionsBulk)
                    }
                    processTransactionsBulk
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::appchainId)
                    }
                    appchainId
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) custom errors.
    pub enum SyndicateSequencingChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateSequencingChainErrors {
        const NAME: &'static str = "SyndicateSequencingChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateSequencingChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateSequencingChainErrors> {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChain`](self) events.
    pub enum SyndicateSequencingChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateSequencingChainEvents {
        const NAME: &'static str = "SyndicateSequencingChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateSequencingChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainInstance<T, P, N> {
        SyndicateSequencingChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>>,
    > {
        SyndicateSequencingChainInstance::<T, P, N>::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateSequencingChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<SyndicateSequencingChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateSequencingChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateSequencingChainInstance<T, P, N> {
            SyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ACCUMULATOR_STORAGE_LOCATION`] function.
        pub fn ACCUMULATOR_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ACCUMULATOR_STORAGE_LOCATIONCall, N> {
            self.call_builder(
                &ACCUMULATOR_STORAGE_LOCATIONCall {
                },
            )
        }
        ///Creates a new call builder for the [`accumulator`] function.
        pub fn accumulator(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, accumulatorCall, N> {
            self.call_builder(&accumulatorCall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed`] function.
        pub fn processTransactionUncompressed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressedCall,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressedCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk`] function.
        pub fn processTransactionsBulk(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulkCall, N> {
            self.call_builder(
                &processTransactionsBulkCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
