/**

Generated by the following Solidity interface...
```solidity
interface Airdrop {
    error ArrayLengthMismatch();
    error TransferFailed();

    function airdropERC20(address _token, address[] memory _addresses, uint256[] memory _amounts, uint256 _totalAmount) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "airdropERC20",
    "inputs": [
      {
        "name": "_token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_addresses",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "_amounts",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "_totalAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "error",
    "name": "ArrayLengthMismatch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TransferFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Airdrop {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b6102a361002b82396102a390f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6101db565b61001d5f3561002c565b6382947abe0361000e576101ab565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61005490610040565b90565b6100608161004b565b0361006757565b5f80fd5b9050359061007882610057565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c05781359167ffffffffffffffff83116100bb5760200192602083028401116100b657565b610082565b61007e565b61007a565b909182601f830112156100ff5781359167ffffffffffffffff83116100fa5760200192602083028401116100f557565b610082565b61007e565b61007a565b90565b61011081610104565b0361011757565b5f80fd5b9050359061012882610107565b565b91906080838203126101a157610142815f850161006b565b92602081013567ffffffffffffffff811161019c5782610163918301610086565b929093604083013567ffffffffffffffff811161019757610189836101949286016100c5565b93909460600161011b565b90565b61003c565b61003c565b610038565b5f0190565b6101c56101b936600461012a565b949390939291926101df565b6101cd610032565b806101d7816101a6565b0390f35b5f80fd5b9180939591940361029f577f23b872dd000000000000000000000000000000000000000000000000000000005f5233600452306024526044525f8060648180855af11561029b5791907fa9059cbb000000000000000000000000000000000000000000000000000000005f5260051b8101928103905b8035600452818103356024525f8060648180875af1156102975760200191838310156102915760645f8080949381949550959350505050610255565b50505050565b5f80fd5b5f80fd5b5f80fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x02\xA3a\0+\x829a\x02\xA3\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xDBV[a\0\x1D_5a\0,V[c\x82\x94z\xBE\x03a\0\x0EWa\x01\xABV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0T\x90a\0@V[\x90V[a\0`\x81a\0KV[\x03a\0gWV[_\x80\xFD[\x90P5\x90a\0x\x82a\0WV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC0W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBBW` \x01\x92` \x83\x02\x84\x01\x11a\0\xB6WV[a\0\x82V[a\0~V[a\0zV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFFW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xFAW` \x01\x92` \x83\x02\x84\x01\x11a\0\xF5WV[a\0\x82V[a\0~V[a\0zV[\x90V[a\x01\x10\x81a\x01\x04V[\x03a\x01\x17WV[_\x80\xFD[\x90P5\x90a\x01(\x82a\x01\x07V[V[\x91\x90`\x80\x83\x82\x03\x12a\x01\xA1Wa\x01B\x81_\x85\x01a\0kV[\x92` \x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x9CW\x82a\x01c\x91\x83\x01a\0\x86V[\x92\x90\x93`@\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x97Wa\x01\x89\x83a\x01\x94\x92\x86\x01a\0\xC5V[\x93\x90\x94``\x01a\x01\x1BV[\x90V[a\0<V[a\0<V[a\08V[_\x01\x90V[a\x01\xC5a\x01\xB96`\x04a\x01*V[\x94\x93\x90\x93\x92\x91\x92a\x01\xDFV[a\x01\xCDa\x002V[\x80a\x01\xD7\x81a\x01\xA6V[\x03\x90\xF3[_\x80\xFD[\x91\x80\x93\x95\x91\x94\x03a\x02\x9FW\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R0`$R`DR_\x80`d\x81\x80\x85Z\xF1\x15a\x02\x9BW\x91\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x05\x1B\x81\x01\x92\x81\x03\x90[\x805`\x04R\x81\x81\x035`$R_\x80`d\x81\x80\x87Z\xF1\x15a\x02\x97W` \x01\x91\x83\x83\x10\x15a\x02\x91W`d_\x80\x80\x94\x93\x81\x94\x95P\x95\x93PPPPa\x02UV[PPPPV[_\x80\xFD[_\x80\xFD[_\x80\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6101db565b61001d5f3561002c565b6382947abe0361000e576101ab565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61005490610040565b90565b6100608161004b565b0361006757565b5f80fd5b9050359061007882610057565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c05781359167ffffffffffffffff83116100bb5760200192602083028401116100b657565b610082565b61007e565b61007a565b909182601f830112156100ff5781359167ffffffffffffffff83116100fa5760200192602083028401116100f557565b610082565b61007e565b61007a565b90565b61011081610104565b0361011757565b5f80fd5b9050359061012882610107565b565b91906080838203126101a157610142815f850161006b565b92602081013567ffffffffffffffff811161019c5782610163918301610086565b929093604083013567ffffffffffffffff811161019757610189836101949286016100c5565b93909460600161011b565b90565b61003c565b61003c565b610038565b5f0190565b6101c56101b936600461012a565b949390939291926101df565b6101cd610032565b806101d7816101a6565b0390f35b5f80fd5b9180939591940361029f577f23b872dd000000000000000000000000000000000000000000000000000000005f5233600452306024526044525f8060648180855af11561029b5791907fa9059cbb000000000000000000000000000000000000000000000000000000005f5260051b8101928103905b8035600452818103356024525f8060648180875af1156102975760200191838310156102915760645f8080949381949550959350505050610255565b50505050565b5f80fd5b5f80fd5b5f80fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xDBV[a\0\x1D_5a\0,V[c\x82\x94z\xBE\x03a\0\x0EWa\x01\xABV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0T\x90a\0@V[\x90V[a\0`\x81a\0KV[\x03a\0gWV[_\x80\xFD[\x90P5\x90a\0x\x82a\0WV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC0W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBBW` \x01\x92` \x83\x02\x84\x01\x11a\0\xB6WV[a\0\x82V[a\0~V[a\0zV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFFW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xFAW` \x01\x92` \x83\x02\x84\x01\x11a\0\xF5WV[a\0\x82V[a\0~V[a\0zV[\x90V[a\x01\x10\x81a\x01\x04V[\x03a\x01\x17WV[_\x80\xFD[\x90P5\x90a\x01(\x82a\x01\x07V[V[\x91\x90`\x80\x83\x82\x03\x12a\x01\xA1Wa\x01B\x81_\x85\x01a\0kV[\x92` \x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x9CW\x82a\x01c\x91\x83\x01a\0\x86V[\x92\x90\x93`@\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x97Wa\x01\x89\x83a\x01\x94\x92\x86\x01a\0\xC5V[\x93\x90\x94``\x01a\x01\x1BV[\x90V[a\0<V[a\0<V[a\08V[_\x01\x90V[a\x01\xC5a\x01\xB96`\x04a\x01*V[\x94\x93\x90\x93\x92\x91\x92a\x01\xDFV[a\x01\xCDa\x002V[\x80a\x01\xD7\x81a\x01\xA6V[\x03\x90\xF3[_\x80\xFD[\x91\x80\x93\x95\x91\x94\x03a\x02\x9FW\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R0`$R`DR_\x80`d\x81\x80\x85Z\xF1\x15a\x02\x9BW\x91\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x05\x1B\x81\x01\x92\x81\x03\x90[\x805`\x04R\x81\x81\x035`$R_\x80`d\x81\x80\x87Z\xF1\x15a\x02\x97W` \x01\x91\x83\x83\x10\x15a\x02\x91W`d_\x80\x80\x94\x93\x81\x94\x95P\x95\x93PPPPa\x02UV[PPPPV[_\x80\xFD[_\x80\xFD[_\x80\xFD",
    );
    /**Custom error with signature `ArrayLengthMismatch()` and selector `0xa24a13a6`.
```solidity
error ArrayLengthMismatch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ArrayLengthMismatch {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ArrayLengthMismatch> for UnderlyingRustTuple<'_> {
            fn from(value: ArrayLengthMismatch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ArrayLengthMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ArrayLengthMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ArrayLengthMismatch()";
            const SELECTOR: [u8; 4] = [162u8, 74u8, 19u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TransferFailed()` and selector `0x90b8ec18`.
```solidity
error TransferFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransferFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransferFailed> for UnderlyingRustTuple<'_> {
            fn from(value: TransferFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransferFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransferFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransferFailed()";
            const SELECTOR: [u8; 4] = [144u8, 184u8, 236u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `airdropERC20(address,address[],uint256[],uint256)` and selector `0x82947abe`.
```solidity
function airdropERC20(address _token, address[] memory _addresses, uint256[] memory _amounts, uint256 _totalAmount) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct airdropERC20Call {
        #[allow(missing_docs)]
        pub _token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _addresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
        #[allow(missing_docs)]
        pub _amounts: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub _totalAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`airdropERC20(address,address[],uint256[],uint256)`](airdropERC20Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct airdropERC20Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<airdropERC20Call> for UnderlyingRustTuple<'_> {
                fn from(value: airdropERC20Call) -> Self {
                    (value._token, value._addresses, value._amounts, value._totalAmount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for airdropERC20Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _token: tuple.0,
                        _addresses: tuple.1,
                        _amounts: tuple.2,
                        _totalAmount: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<airdropERC20Return> for UnderlyingRustTuple<'_> {
                fn from(value: airdropERC20Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for airdropERC20Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for airdropERC20Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = airdropERC20Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "airdropERC20(address,address[],uint256[],uint256)";
            const SELECTOR: [u8; 4] = [130u8, 148u8, 122u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._token,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self._addresses),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self._amounts),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._totalAmount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Airdrop`](self) function calls.
    pub enum AirdropCalls {
        #[allow(missing_docs)]
        airdropERC20(airdropERC20Call),
    }
    #[automatically_derived]
    impl AirdropCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[130u8, 148u8, 122u8, 190u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AirdropCalls {
        const NAME: &'static str = "AirdropCalls";
        const MIN_DATA_LENGTH: usize = 192usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::airdropERC20(_) => {
                    <airdropERC20Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AirdropCalls>] = &[
                {
                    fn airdropERC20(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AirdropCalls> {
                        <airdropERC20Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AirdropCalls::airdropERC20)
                    }
                    airdropERC20
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::airdropERC20(inner) => {
                    <airdropERC20Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::airdropERC20(inner) => {
                    <airdropERC20Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Airdrop`](self) custom errors.
    pub enum AirdropErrors {
        #[allow(missing_docs)]
        ArrayLengthMismatch(ArrayLengthMismatch),
        #[allow(missing_docs)]
        TransferFailed(TransferFailed),
    }
    #[automatically_derived]
    impl AirdropErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [144u8, 184u8, 236u8, 24u8],
            [162u8, 74u8, 19u8, 166u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AirdropErrors {
        const NAME: &'static str = "AirdropErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ArrayLengthMismatch(_) => {
                    <ArrayLengthMismatch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransferFailed(_) => {
                    <TransferFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AirdropErrors>] = &[
                {
                    fn TransferFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AirdropErrors> {
                        <TransferFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AirdropErrors::TransferFailed)
                    }
                    TransferFailed
                },
                {
                    fn ArrayLengthMismatch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AirdropErrors> {
                        <ArrayLengthMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AirdropErrors::ArrayLengthMismatch)
                    }
                    ArrayLengthMismatch
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ArrayLengthMismatch(inner) => {
                    <ArrayLengthMismatch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransferFailed(inner) => {
                    <TransferFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ArrayLengthMismatch(inner) => {
                    <ArrayLengthMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransferFailed(inner) => {
                    <TransferFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Airdrop`](self) contract instance.

See the [wrapper's documentation](`AirdropInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AirdropInstance<T, P, N> {
        AirdropInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AirdropInstance<T, P, N>>,
    > {
        AirdropInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AirdropInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Airdrop`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Airdrop`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AirdropInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AirdropInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AirdropInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AirdropInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Airdrop`](self) contract instance.

See the [wrapper's documentation](`AirdropInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AirdropInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AirdropInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AirdropInstance<T, P, N> {
            AirdropInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AirdropInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`airdropERC20`] function.
        pub fn airdropERC20(
            &self,
            _token: alloy::sol_types::private::Address,
            _addresses: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
            _amounts: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            _totalAmount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, airdropERC20Call, N> {
            self.call_builder(
                &airdropERC20Call {
                    _token,
                    _addresses,
                    _amounts,
                    _totalAmount,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AirdropInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
