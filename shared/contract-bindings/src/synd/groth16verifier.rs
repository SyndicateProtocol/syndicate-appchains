/**

Generated by the following Solidity interface...
```solidity
interface Groth16Verifier {
    error ProofInvalid();
    error PublicInputNotInField();

    function Verify(uint256[8] memory proof, uint256[2] memory input) external view;
    function compressProof(uint256[8] memory proof) external view returns (uint256[4] memory compressed);
    function verifyCompressedProof(uint256[4] memory compressedProof, uint256[2] memory input) external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "Verify",
    "inputs": [
      {
        "name": "proof",
        "type": "uint256[8]",
        "internalType": "uint256[8]"
      },
      {
        "name": "input",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "compressProof",
    "inputs": [
      {
        "name": "proof",
        "type": "uint256[8]",
        "internalType": "uint256[8]"
      }
    ],
    "outputs": [
      {
        "name": "compressed",
        "type": "uint256[4]",
        "internalType": "uint256[4]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyCompressedProof",
    "inputs": [
      {
        "name": "compressedProof",
        "type": "uint256[4]",
        "internalType": "uint256[4]"
      },
      {
        "name": "input",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "ProofInvalid",
    "inputs": []
  },
  {
    "type": "error",
    "name": "PublicInputNotInField",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Groth16Verifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601557611269908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806344f63692146108c6578063eddf243c146104e45763f11817b21461003a575f80fd5b346104e05760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104e057366084116104e0573660c4116104e05761030061008581610979565b81368237610094600435610db6565b6100a5602493929335604435610e5a565b919392906100b4606435610db6565b9390926040519660408801967f26091e1cafb0ad8a4ea0a694cd3743ebf524779233db734c451d28b58aa9758e895288600160208201997e9ff50a6b8b11c3ca6fdb2690a124f8ce25489fefa65a3e782e7ba70b66690e8b527f061c3fd0fd3da25d2607c227d090cca750ed36c6ec878755e537c1c48951fb4c81527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060608501927f0fa17ae9c2033379df7b5c65eff0e107055e9a273e6119a212dd09eb5170721984527f07236256d21c60d02f0bdbf95cff83e03ea9e16fca56b18d5544b0889a65c1f560843596836080820198808a5286828660608160075afa9110169160808160065afa16947f04eab241388a79817fe0e0e2ead0b2ec4ffdec51a16028dee020634fd129e71c83525260a43580965260608160075afa931016161660408a60808160065afa169851975198156104b85760209a8a528a8a015260408901526060880152608087015260a086015260c085015260e08401527f1cc7cb8de715675f21f01ecc9b46d236e0865e0cc020024521998269845f74e66101008401527f03ff41f4ba0c37fe2caf27354d28e4b8f83d3b76777a63b327d736bffb0122ed6101208401527f01909cd7827e0278e6b60843a4abc7b111d7f8b2725cd5902a6b20da7a2938fb6101408401527f192bd3274441670227b4f69a44005b8711266e474227c6439ca25ca8e1ec1fc26101608401527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808401527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08401527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08401527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08401527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008401527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f6102208401526102408301526102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e082015261046882610979565b9283918336843760085afa159081156104ab575b5061048357005b7f7fcdd1f4000000000000000000000000000000000000000000000000000000005f5260045ffd5b600191505114155f61047c565b7fa54f8e27000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b346104e0576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104e05736610104116104e05736610144116104e05760405160408101907f26091e1cafb0ad8a4ea0a694cd3743ebf524779233db734c451d28b58aa9758e815260208101917e9ff50a6b8b11c3ca6fdb2690a124f8ce25489fefa65a3e782e7ba70b66690e83527f061c3fd0fd3da25d2607c227d090cca750ed36c6ec878755e537c1c48951fb4c81526001606083017f0fa17ae9c2033379df7b5c65eff0e107055e9a273e6119a212dd09eb5170721981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604061010435947f07236256d21c60d02f0bdbf95cff83e03ea9e16fca56b18d5544b0889a65c1f5608088019680885284848460608160075afa911016838960808160065afa16947f04eab241388a79817fe0e0e2ead0b2ec4ffdec51a16028dee020634fd129e71c8352526101243580965260608160075afa931016161660408260808160065afa169051915190156104b85760405191610100600484377f1cc7cb8de715675f21f01ecc9b46d236e0865e0cc020024521998269845f74e66101008401527f03ff41f4ba0c37fe2caf27354d28e4b8f83d3b76777a63b327d736bffb0122ed6101208401527f01909cd7827e0278e6b60843a4abc7b111d7f8b2725cd5902a6b20da7a2938fb6101408401527f192bd3274441670227b4f69a44005b8711266e474227c6439ca25ca8e1ec1fc26101608401527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808401527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08401527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08401527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08401527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008401527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f6102208401526102408301526102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e08201526020816103008160085afa9051161561048357005b346104e0576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104e05736610104116104e0576109096080610979565b608036823761091c6024356004356109ea565b815261093260843560a435604435606435610ad7565b6020830152604082015261094a60e43560c4356109ea565b6060820152604051905f825b6004821061096357608084f35b6020806001928551815201930191019091610956565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff8211176109bd57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210801590610aad575b61048357811580610aa5575b610a9f57610a597f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038185818180090908610fdf565b818103610a6857505060011b90565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47809106810306145f1461048357600190811b1790565b50505f90565b508015610a22565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610a16565b919093927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310801590610d8c575b8015610d62575b8015610d38575b610483578082868517171715610d2d57908291610c6a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808080888180808f9d7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd448f839290839109099d8e0981848181800909087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5089a09818c8181800909087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e7750806810306947f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea481610c3181808b80098187800908610fdf565b8408097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610c5e826111ee565b80091415958691611015565b929080821480610d24575b15610c9c5750505050905f14610c945760ff60025b169060021b179190565b60ff5f610c8a565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47809106810306149182610cf2575b5050156104835760019115610cea5760ff60025b169060021b17179190565b60ff5f610cdf565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47919250819006810306145f80610ccb565b50838314610c75565b50505090505f905f90565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610b14565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47821015610b0d565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47851015610b06565b8015610e53578060011c917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783101561048357600180610e1f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038188818180090908610fdf565b931614610e2857565b907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780910681030690565b505f905f90565b801580610fd7575b610fcb578060021c92827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510801590610fa1575b6104835784817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808080808080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4481610f589d8d0909998a0981898181800909087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e7750806810306936002808a16149509818a8181800909087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e508611015565b80929160018082961614610f6a575050565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478093945080929550809106810306930681030690565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610e97565b50505f905f905f905f90565b508115610e62565b90610fe9826111ee565b917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478380090361048357565b917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4816110809396949661107282808a8009818a800908610fdf565b906111e2575b860809610fdf565b927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600285096040519060208252602080830152602060408301528060608301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4560808301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a083015260208260c08160055afa91519115610483577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47826001920903610483577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47908209927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808087800906810306818780090814908115916111b0575b5061048357565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478084860960020914155f6111a9565b81809106810306611078565b9060405191602083526020808401526020604084015260608301527f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260808301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a083015260208260c08160055afa915191156104835756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x12i\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80cD\xF66\x92\x14a\x08\xC6W\x80c\xED\xDF$<\x14a\x04\xE4Wc\xF1\x18\x17\xB2\x14a\0:W_\x80\xFD[4a\x04\xE0W`\xC0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xE0W6`\x84\x11a\x04\xE0W6`\xC4\x11a\x04\xE0Wa\x03\0a\0\x85\x81a\tyV[\x816\x827a\0\x94`\x045a\r\xB6V[a\0\xA5`$\x93\x92\x935`D5a\x0EZV[\x91\x93\x92\x90a\0\xB4`d5a\r\xB6V[\x93\x90\x92`@Q\x96`@\x88\x01\x96\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x89R\x88`\x01` \x82\x01\x99~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x8BR\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@``\x85\x01\x92\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x84R\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x845\x96\x83`\x80\x82\x01\x98\x80\x8AR\x86\x82\x86``\x81`\x07Z\xFA\x91\x10\x16\x91`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RR`\xA45\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x8A`\x80\x81`\x06Z\xFA\x16\x98Q\x97Q\x98\x15a\x04\xB8W` \x9A\x8AR\x8A\x8A\x01R`@\x89\x01R``\x88\x01R`\x80\x87\x01R`\xA0\x86\x01R`\xC0\x85\x01R`\xE0\x84\x01R\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01Ra\x04h\x82a\tyV[\x92\x83\x91\x836\x847`\x08Z\xFA\x15\x90\x81\x15a\x04\xABW[Pa\x04\x83W\0[\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`\x01\x91PQ\x14\x15_a\x04|V[\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[_\x80\xFD[4a\x04\xE0Wa\x01@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xE0W6a\x01\x04\x11a\x04\xE0W6a\x01D\x11a\x04\xE0W`@Q`@\x81\x01\x90\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x81R` \x81\x01\x91~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x83R\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R`\x01``\x83\x01\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@a\x01\x045\x94\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x80\x88\x01\x96\x80\x88R\x84\x84\x84``\x81`\x07Z\xFA\x91\x10\x16\x83\x89`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RRa\x01$5\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x82`\x80\x81`\x06Z\xFA\x16\x90Q\x91Q\x90\x15a\x04\xB8W`@Q\x91a\x01\0`\x04\x847\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01R` \x81a\x03\0\x81`\x08Z\xFA\x90Q\x16\x15a\x04\x83W\0[4a\x04\xE0Wa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xE0W6a\x01\x04\x11a\x04\xE0Wa\t\t`\x80a\tyV[`\x806\x827a\t\x1C`$5`\x045a\t\xEAV[\x81Ra\t2`\x845`\xA45`D5`d5a\n\xD7V[` \x83\x01R`@\x82\x01Ra\tJ`\xE45`\xC45a\t\xEAV[``\x82\x01R`@Q\x90_\x82[`\x04\x82\x10a\tcW`\x80\x84\xF3[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\tVV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F`@Q\x93\x01\x16\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xBDW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x80\x15\x90a\n\xADW[a\x04\x83W\x81\x15\x80a\n\xA5W[a\n\x9FWa\nY\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x85\x81\x81\x80\t\t\x08a\x0F\xDFV[\x81\x81\x03a\nhWPP`\x01\x1B\x90V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14_\x14a\x04\x83W`\x01\x90\x81\x1B\x17\x90V[PP_\x90V[P\x80\x15a\n\"V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\n\x16V[\x91\x90\x93\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x80\x15\x90a\r\x8CW[\x80\x15a\rbW[\x80\x15a\r8W[a\x04\x83W\x80\x82\x86\x85\x17\x17\x17\x15a\r-W\x90\x82\x91a\x0Cj\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x88\x81\x80\x80\x8F\x9D\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x8F\x83\x92\x90\x83\x91\t\t\x9D\x8E\t\x81\x84\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x9A\t\x81\x8C\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x94\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x0C1\x81\x80\x8B\x80\t\x81\x87\x80\t\x08a\x0F\xDFV[\x84\x08\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\x0C^\x82a\x11\xEEV[\x80\t\x14\x15\x95\x86\x91a\x10\x15V[\x92\x90\x80\x82\x14\x80a\r$W[\x15a\x0C\x9CWPPPP\x90_\x14a\x0C\x94W`\xFF`\x02[\x16\x90`\x02\x1B\x17\x91\x90V[`\xFF_a\x0C\x8AV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14\x91\x82a\x0C\xF2W[PP\x15a\x04\x83W`\x01\x91\x15a\x0C\xEAW`\xFF`\x02[\x16\x90`\x02\x1B\x17\x17\x91\x90V[`\xFF_a\x0C\xDFV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x91\x92P\x81\x90\x06\x81\x03\x06\x14_\x80a\x0C\xCBV[P\x83\x83\x14a\x0CuV[PPP\x90P_\x90_\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0B\x14V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x15a\x0B\rV[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15a\x0B\x06V[\x80\x15a\x0ESW\x80`\x01\x1C\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15a\x04\x83W`\x01\x80a\x0E\x1F\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x88\x81\x81\x80\t\t\x08a\x0F\xDFV[\x93\x16\x14a\x0E(WV[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x90V[P_\x90_\x90V[\x80\x15\x80a\x0F\xD7W[a\x0F\xCBW\x80`\x02\x1C\x92\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x80\x15\x90a\x0F\xA1W[a\x04\x83W\x84\x81\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x80\x80\x80\x80\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x81a\x0FX\x9D\x8D\t\t\x99\x8A\t\x81\x89\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x93`\x02\x80\x8A\x16\x14\x95\t\x81\x8A\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08a\x10\x15V[\x80\x92\x91`\x01\x80\x82\x96\x16\x14a\x0FjWPPV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x93\x94P\x80\x92\x95P\x80\x91\x06\x81\x03\x06\x93\x06\x81\x03\x06\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0E\x97V[PP_\x90_\x90_\x90_\x90V[P\x81\x15a\x0EbV[\x90a\x0F\xE9\x82a\x11\xEEV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x80\t\x03a\x04\x83WV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x10\x80\x93\x96\x94\x96a\x10r\x82\x80\x8A\x80\t\x81\x8A\x80\t\x08a\x0F\xDFV[\x90a\x11\xE2W[\x86\x08\ta\x0F\xDFV[\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x02\x85\t`@Q\x90` \x82R` \x80\x83\x01R` `@\x83\x01R\x80``\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDE`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x04\x83W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82`\x01\x92\t\x03a\x04\x83W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x90\x82\t\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x87\x80\t\x06\x81\x03\x06\x81\x87\x80\t\x08\x14\x90\x81\x15\x91a\x11\xB0W[Pa\x04\x83WV[\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x84\x86\t`\x02\t\x14\x15_a\x11\xA9V[\x81\x80\x91\x06\x81\x03\x06a\x10xV[\x90`@Q\x91` \x83R` \x80\x84\x01R` `@\x84\x01R``\x83\x01R\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?R`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x04\x83WV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80cD\xF66\x92\x14a\x08\xC6W\x80c\xED\xDF$<\x14a\x04\xE4Wc\xF1\x18\x17\xB2\x14a\0:W_\x80\xFD[4a\x04\xE0W`\xC0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xE0W6`\x84\x11a\x04\xE0W6`\xC4\x11a\x04\xE0Wa\x03\0a\0\x85\x81a\tyV[\x816\x827a\0\x94`\x045a\r\xB6V[a\0\xA5`$\x93\x92\x935`D5a\x0EZV[\x91\x93\x92\x90a\0\xB4`d5a\r\xB6V[\x93\x90\x92`@Q\x96`@\x88\x01\x96\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x89R\x88`\x01` \x82\x01\x99~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x8BR\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@``\x85\x01\x92\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x84R\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x845\x96\x83`\x80\x82\x01\x98\x80\x8AR\x86\x82\x86``\x81`\x07Z\xFA\x91\x10\x16\x91`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RR`\xA45\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x8A`\x80\x81`\x06Z\xFA\x16\x98Q\x97Q\x98\x15a\x04\xB8W` \x9A\x8AR\x8A\x8A\x01R`@\x89\x01R``\x88\x01R`\x80\x87\x01R`\xA0\x86\x01R`\xC0\x85\x01R`\xE0\x84\x01R\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01Ra\x04h\x82a\tyV[\x92\x83\x91\x836\x847`\x08Z\xFA\x15\x90\x81\x15a\x04\xABW[Pa\x04\x83W\0[\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`\x01\x91PQ\x14\x15_a\x04|V[\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[_\x80\xFD[4a\x04\xE0Wa\x01@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xE0W6a\x01\x04\x11a\x04\xE0W6a\x01D\x11a\x04\xE0W`@Q`@\x81\x01\x90\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x81R` \x81\x01\x91~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x83R\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R`\x01``\x83\x01\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@a\x01\x045\x94\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x80\x88\x01\x96\x80\x88R\x84\x84\x84``\x81`\x07Z\xFA\x91\x10\x16\x83\x89`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RRa\x01$5\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x82`\x80\x81`\x06Z\xFA\x16\x90Q\x91Q\x90\x15a\x04\xB8W`@Q\x91a\x01\0`\x04\x847\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01R` \x81a\x03\0\x81`\x08Z\xFA\x90Q\x16\x15a\x04\x83W\0[4a\x04\xE0Wa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xE0W6a\x01\x04\x11a\x04\xE0Wa\t\t`\x80a\tyV[`\x806\x827a\t\x1C`$5`\x045a\t\xEAV[\x81Ra\t2`\x845`\xA45`D5`d5a\n\xD7V[` \x83\x01R`@\x82\x01Ra\tJ`\xE45`\xC45a\t\xEAV[``\x82\x01R`@Q\x90_\x82[`\x04\x82\x10a\tcW`\x80\x84\xF3[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\tVV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F`@Q\x93\x01\x16\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xBDW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x80\x15\x90a\n\xADW[a\x04\x83W\x81\x15\x80a\n\xA5W[a\n\x9FWa\nY\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x85\x81\x81\x80\t\t\x08a\x0F\xDFV[\x81\x81\x03a\nhWPP`\x01\x1B\x90V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14_\x14a\x04\x83W`\x01\x90\x81\x1B\x17\x90V[PP_\x90V[P\x80\x15a\n\"V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\n\x16V[\x91\x90\x93\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x80\x15\x90a\r\x8CW[\x80\x15a\rbW[\x80\x15a\r8W[a\x04\x83W\x80\x82\x86\x85\x17\x17\x17\x15a\r-W\x90\x82\x91a\x0Cj\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x88\x81\x80\x80\x8F\x9D\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x8F\x83\x92\x90\x83\x91\t\t\x9D\x8E\t\x81\x84\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x9A\t\x81\x8C\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x94\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x0C1\x81\x80\x8B\x80\t\x81\x87\x80\t\x08a\x0F\xDFV[\x84\x08\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\x0C^\x82a\x11\xEEV[\x80\t\x14\x15\x95\x86\x91a\x10\x15V[\x92\x90\x80\x82\x14\x80a\r$W[\x15a\x0C\x9CWPPPP\x90_\x14a\x0C\x94W`\xFF`\x02[\x16\x90`\x02\x1B\x17\x91\x90V[`\xFF_a\x0C\x8AV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14\x91\x82a\x0C\xF2W[PP\x15a\x04\x83W`\x01\x91\x15a\x0C\xEAW`\xFF`\x02[\x16\x90`\x02\x1B\x17\x17\x91\x90V[`\xFF_a\x0C\xDFV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x91\x92P\x81\x90\x06\x81\x03\x06\x14_\x80a\x0C\xCBV[P\x83\x83\x14a\x0CuV[PPP\x90P_\x90_\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0B\x14V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x15a\x0B\rV[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15a\x0B\x06V[\x80\x15a\x0ESW\x80`\x01\x1C\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15a\x04\x83W`\x01\x80a\x0E\x1F\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x88\x81\x81\x80\t\t\x08a\x0F\xDFV[\x93\x16\x14a\x0E(WV[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x90V[P_\x90_\x90V[\x80\x15\x80a\x0F\xD7W[a\x0F\xCBW\x80`\x02\x1C\x92\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x80\x15\x90a\x0F\xA1W[a\x04\x83W\x84\x81\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x80\x80\x80\x80\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x81a\x0FX\x9D\x8D\t\t\x99\x8A\t\x81\x89\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x93`\x02\x80\x8A\x16\x14\x95\t\x81\x8A\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08a\x10\x15V[\x80\x92\x91`\x01\x80\x82\x96\x16\x14a\x0FjWPPV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x93\x94P\x80\x92\x95P\x80\x91\x06\x81\x03\x06\x93\x06\x81\x03\x06\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0E\x97V[PP_\x90_\x90_\x90_\x90V[P\x81\x15a\x0EbV[\x90a\x0F\xE9\x82a\x11\xEEV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x80\t\x03a\x04\x83WV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x10\x80\x93\x96\x94\x96a\x10r\x82\x80\x8A\x80\t\x81\x8A\x80\t\x08a\x0F\xDFV[\x90a\x11\xE2W[\x86\x08\ta\x0F\xDFV[\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x02\x85\t`@Q\x90` \x82R` \x80\x83\x01R` `@\x83\x01R\x80``\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDE`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x04\x83W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82`\x01\x92\t\x03a\x04\x83W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x90\x82\t\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x87\x80\t\x06\x81\x03\x06\x81\x87\x80\t\x08\x14\x90\x81\x15\x91a\x11\xB0W[Pa\x04\x83WV[\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x84\x86\t`\x02\t\x14\x15_a\x11\xA9V[\x81\x80\x91\x06\x81\x03\x06a\x10xV[\x90`@Q\x91` \x83R` \x80\x84\x01R` `@\x84\x01R``\x83\x01R\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?R`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x04\x83WV",
    );
    /**Custom error with signature `ProofInvalid()` and selector `0x7fcdd1f4`.
```solidity
error ProofInvalid();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProofInvalid {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProofInvalid> for UnderlyingRustTuple<'_> {
            fn from(value: ProofInvalid) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProofInvalid {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProofInvalid {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProofInvalid()";
            const SELECTOR: [u8; 4] = [127u8, 205u8, 209u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `PublicInputNotInField()` and selector `0xa54f8e27`.
```solidity
error PublicInputNotInField();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PublicInputNotInField {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PublicInputNotInField> for UnderlyingRustTuple<'_> {
            fn from(value: PublicInputNotInField) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PublicInputNotInField {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PublicInputNotInField {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PublicInputNotInField()";
            const SELECTOR: [u8; 4] = [165u8, 79u8, 142u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `Verify(uint256[8],uint256[2])` and selector `0xeddf243c`.
```solidity
function Verify(uint256[8] memory proof, uint256[2] memory input) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VerifyCall {
        #[allow(missing_docs)]
        pub proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
        #[allow(missing_docs)]
        pub input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    ///Container type for the return parameters of the [`Verify(uint256[8],uint256[2])`](VerifyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VerifyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 8usize],
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VerifyCall> for UnderlyingRustTuple<'_> {
                fn from(value: VerifyCall) -> Self {
                    (value.proof, value.input)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VerifyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proof: tuple.0,
                        input: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VerifyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VerifyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VerifyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VerifyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = VerifyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Verify(uint256[8],uint256[2])";
            const SELECTOR: [u8; 4] = [237u8, 223u8, 36u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        8usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.input),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `compressProof(uint256[8])` and selector `0x44f63692`.
```solidity
function compressProof(uint256[8] memory proof) external view returns (uint256[4] memory compressed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compressProofCall {
        #[allow(missing_docs)]
        pub proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
    }
    ///Container type for the return parameters of the [`compressProof(uint256[8])`](compressProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compressProofReturn {
        #[allow(missing_docs)]
        pub compressed: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 8usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compressProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: compressProofCall) -> Self {
                    (value.proof,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for compressProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proof: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compressProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: compressProofReturn) -> Self {
                    (value.compressed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for compressProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { compressed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for compressProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = compressProofReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "compressProof(uint256[8])";
            const SELECTOR: [u8; 4] = [68u8, 246u8, 54u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        8usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `verifyCompressedProof(uint256[4],uint256[2])` and selector `0xf11817b2`.
```solidity
function verifyCompressedProof(uint256[4] memory compressedProof, uint256[2] memory input) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCompressedProofCall {
        #[allow(missing_docs)]
        pub compressedProof: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
        #[allow(missing_docs)]
        pub input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    ///Container type for the return parameters of the [`verifyCompressedProof(uint256[4],uint256[2])`](verifyCompressedProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCompressedProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 4usize],
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCompressedProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyCompressedProofCall) -> Self {
                    (value.compressedProof, value.input)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyCompressedProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        compressedProof: tuple.0,
                        input: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCompressedProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyCompressedProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyCompressedProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyCompressedProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyCompressedProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyCompressedProof(uint256[4],uint256[2])";
            const SELECTOR: [u8; 4] = [241u8, 24u8, 23u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.compressedProof),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.input),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Groth16Verifier`](self) function calls.
    pub enum Groth16VerifierCalls {
        #[allow(missing_docs)]
        Verify(VerifyCall),
        #[allow(missing_docs)]
        compressProof(compressProofCall),
        #[allow(missing_docs)]
        verifyCompressedProof(verifyCompressedProofCall),
    }
    #[automatically_derived]
    impl Groth16VerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [68u8, 246u8, 54u8, 146u8],
            [237u8, 223u8, 36u8, 60u8],
            [241u8, 24u8, 23u8, 178u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for Groth16VerifierCalls {
        const NAME: &'static str = "Groth16VerifierCalls";
        const MIN_DATA_LENGTH: usize = 192usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::Verify(_) => <VerifyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::compressProof(_) => {
                    <compressProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyCompressedProof(_) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<Groth16VerifierCalls>] = &[
                {
                    fn compressProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierCalls> {
                        <compressProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierCalls::compressProof)
                    }
                    compressProof
                },
                {
                    fn Verify(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierCalls> {
                        <VerifyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierCalls::Verify)
                    }
                    Verify
                },
                {
                    fn verifyCompressedProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierCalls> {
                        <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierCalls::verifyCompressedProof)
                    }
                    verifyCompressedProof
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::Verify(inner) => {
                    <VerifyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::compressProof(inner) => {
                    <compressProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyCompressedProof(inner) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::Verify(inner) => {
                    <VerifyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::compressProof(inner) => {
                    <compressProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyCompressedProof(inner) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Groth16Verifier`](self) custom errors.
    pub enum Groth16VerifierErrors {
        #[allow(missing_docs)]
        ProofInvalid(ProofInvalid),
        #[allow(missing_docs)]
        PublicInputNotInField(PublicInputNotInField),
    }
    #[automatically_derived]
    impl Groth16VerifierErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [127u8, 205u8, 209u8, 244u8],
            [165u8, 79u8, 142u8, 39u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for Groth16VerifierErrors {
        const NAME: &'static str = "Groth16VerifierErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ProofInvalid(_) => {
                    <ProofInvalid as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PublicInputNotInField(_) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<Groth16VerifierErrors>] = &[
                {
                    fn ProofInvalid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierErrors> {
                        <ProofInvalid as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierErrors::ProofInvalid)
                    }
                    ProofInvalid
                },
                {
                    fn PublicInputNotInField(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Groth16VerifierErrors> {
                        <PublicInputNotInField as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Groth16VerifierErrors::PublicInputNotInField)
                    }
                    PublicInputNotInField
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ProofInvalid(inner) => {
                    <ProofInvalid as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::PublicInputNotInField(inner) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ProofInvalid(inner) => {
                    <ProofInvalid as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PublicInputNotInField(inner) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Groth16Verifier`](self) contract instance.

See the [wrapper's documentation](`Groth16VerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> Groth16VerifierInstance<T, P, N> {
        Groth16VerifierInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<Groth16VerifierInstance<T, P, N>>,
    > {
        Groth16VerifierInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        Groth16VerifierInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Groth16Verifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Groth16Verifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct Groth16VerifierInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for Groth16VerifierInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("Groth16VerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Groth16VerifierInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Groth16Verifier`](self) contract instance.

See the [wrapper's documentation](`Groth16VerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<Groth16VerifierInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> Groth16VerifierInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> Groth16VerifierInstance<T, P, N> {
            Groth16VerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Groth16VerifierInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`Verify`] function.
        pub fn Verify(
            &self,
            proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
            input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
        ) -> alloy_contract::SolCallBuilder<T, &P, VerifyCall, N> {
            self.call_builder(&VerifyCall { proof, input })
        }
        ///Creates a new call builder for the [`compressProof`] function.
        pub fn compressProof(
            &self,
            proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
        ) -> alloy_contract::SolCallBuilder<T, &P, compressProofCall, N> {
            self.call_builder(&compressProofCall { proof })
        }
        ///Creates a new call builder for the [`verifyCompressedProof`] function.
        pub fn verifyCompressedProof(
            &self,
            compressedProof: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyCompressedProofCall, N> {
            self.call_builder(
                &verifyCompressedProofCall {
                    compressedProof,
                    input,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Groth16VerifierInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
