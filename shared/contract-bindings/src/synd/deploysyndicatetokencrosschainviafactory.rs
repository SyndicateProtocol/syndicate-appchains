/**

Generated by the following Solidity interface...
```solidity
interface DeploySyndicateTokenCrosschainViaFactory {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DeploySyndicateTokenCrosschainViaFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611584610106823961158490f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610c0f565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b90565b60018060a01b031690565b90565b61015c61015761016192610137565b610145565b61013a565b90565b61016d90610148565b90565b6101795f610164565b90565b6101859061013a565b90565b60209181520190565b5f7f466163746f72792061646472657373206e6f7420736574000000000000000000910152565b6101c56017602092610188565b6101ce81610191565b0190565b6101e79060208101905f8183039101526101b8565b90565b156101f157565b6101f9610042565b62461bcd60e51b81528061020f600482016101d2565b0390fd5b5f1c90565b90565b61022f61022a61023492610218565b610145565b610218565b90565b61024361024891610213565b61021b565b90565b61025f61025a61026492610218565b610145565b61013a565b90565b61027b6102766102809261013a565b610145565b61013a565b90565b61028c90610267565b90565b6102c86102c36102be7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610237565b61024b565b610283565b90565b6102d490610267565b90565b6102e0906102cb565b90565b6102f36102ee61028f565b6102d7565b90565b6102ff90610283565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061032e90610306565b810190811067ffffffffffffffff82111761034857604052565b610310565b60e01b90565b5f91031261035d57565b61004c565b61036a610042565b3d5f823e3d90fd5b5f80fd5b61037f8161017c565b0361038657565b5f80fd5b9050519061039782610376565b565b906020828203126103b2576103af915f0161038a565b90565b61004c565b5f7f41444d494e5f4144445200000000000000000000000000000000000000000000910152565b6103eb600a602092610188565b6103f4816103b7565b0190565b61040d9060208101905f8183039101526103de565b90565b5f7f4d414e414745525f414444520000000000000000000000000000000000000000910152565b610444600c602092610188565b61044d81610410565b0190565b6104669060208101905f818303910152610437565b90565b5f7f41444d494e5f41444452206e6f74207365740000000000000000000000000000910152565b61049d6012602092610188565b6104a681610469565b0190565b6104bf9060208101905f818303910152610490565b90565b156104c957565b6104d1610042565b62461bcd60e51b8152806104e7600482016104aa565b0390fd5b5f7f4d414e414745525f41444452206e6f7420736574000000000000000000000000910152565b61051f6014602092610188565b610528816104eb565b0190565b6105419060208101905f818303910152610512565b90565b1561054b57565b610553610042565b62461bcd60e51b8152806105696004820161052c565b0390fd5b61057690610267565b90565b6105829061056d565b90565b61058e90610283565b90565b90565b61059d81610591565b036105a457565b5f80fd5b905051906105b582610594565b565b906020828203126105d0576105cd915f016105a8565b90565b61004c565b6105de9061017c565b9052565b6105eb90610218565b9052565b60409061061861061f949695939661060e60608401985f8501906105d5565b60208301906105d5565b01906105e2565b565b61062a90610591565b9052565b9190610641905f60208501940190610621565b565b9061065661064f610042565b9283610324565b565b67ffffffffffffffff811161067657610672602091610306565b0190565b610310565b9061068d61068883610658565b610643565b918252565b60207f696e20616464726573733a000000000000000000000000000000000000000000917f5072656469637465642053796e646963617465546f6b656e43726f73736368615f8201520152565b6106e9602b61067b565b906106f660208301610692565b565b6107006106df565b90565b60409061072c610733949695939661072260608401985f8501906105d5565b60208301906105d5565b0190610621565b565b60207f642061743a000000000000000000000000000000000000000000000000000000917f53796e646963617465546f6b656e43726f7373636861696e206465706c6f79655f8201520152565b61078c602561067b565b9061079960208301610735565b565b6107a3610782565b90565b5f7f41646d696e20616464726573733a000000000000000000000000000000000000910152565b6107d7600e61067b565b906107e4602083016107a6565b565b6107ee6107cd565b90565b5f7f547265617375727920616464726573733a000000000000000000000000000000910152565b610822601161067b565b9061082f602083016107f1565b565b610839610818565b90565b5f80fd5b5f80fd5b90825f9392825e0152565b9092919261086461085f82610658565b610643565b938185526020850190828401116108805761087e92610844565b565b610840565b9080601f830112156108a3578160206108a09351910161084f565b90565b61083c565b906020828203126108d8575f82015167ffffffffffffffff81116108d3576108d09201610885565b90565b610372565b61004c565b5f7f53616c7420757365643a00000000000000000000000000000000000000000000910152565b61090e600a61067b565b9061091b602083016108dd565b565b610925610904565b90565b5f7f416464726573732070726564696374696f6e206661696c656400000000000000910152565b61095c6019602092610188565b61096581610928565b0190565b61097e9060208101905f81830391015261094f565b90565b1561098857565b610990610042565b62461bcd60e51b8152806109a660048201610969565b0390fd5b60207f65737366756c6c79000000000000000000000000000000000000000000000000917f416464726573732070726564696374696f6e20766572696669656420737563635f8201520152565b610a01602861067b565b90610a0e602083016109aa565b565b610a186109f7565b90565b610a2490610267565b90565b610a3090610a1b565b90565b610a3c90610283565b90565b5f7f546f6b656e206e616d653a000000000000000000000000000000000000000000910152565b610a70600b61067b565b90610a7d60208301610a3f565b565b610a87610a66565b90565b5f7f546f6b656e2073796d626f6c3a00000000000000000000000000000000000000910152565b610abb600d61067b565b90610ac860208301610a8a565b565b610ad2610ab1565b90565b60ff1690565b610ae481610ad5565b03610aeb57565b5f80fd5b90505190610afc82610adb565b565b90602082820312610b1757610b14915f01610aef565b90565b61004c565b5f7f546f6b656e20646563696d616c733a0000000000000000000000000000000000910152565b610b4d600f61067b565b90610b5a60208301610b1c565b565b610b64610b43565b90565b610b7b610b76610b8092610ad5565b610145565b610218565b90565b610b8c81610218565b03610b9357565b5f80fd5b90505190610ba482610b83565b565b90602082820312610bbf57610bbc915f01610b97565b90565b61004c565b5f7f496e697469616c20737570706c793a0000000000000000000000000000000000910152565b610bf5600f61067b565b90610c0260208301610bc4565b565b610c0c610beb565b90565b610c3b610c1a610170565b610c34610c2e610c295f610164565b61017c565b9161017c565b14156101ea565b610c4b610c466102e3565b6102f6565b637fb5297f90803b1561134357610c6e915f91610c66610042565b93849261034d565b8252818381610c7f6004820161005f565b03925af1801561133e57611312575b50610cba6020610ca4610c9f6102e3565b6102f6565b63350d56bf90610cb2610042565b93849261034d565b82528180610cca600482016103f8565b03915afa90811561130d575f916112df575b50610d086020610cf2610ced6102e3565b6102f6565b63350d56bf90610d00610042565b93849261034d565b82528180610d1860048201610451565b03915afa9081156112da575f916112ac575b5090610d5181610d4a610d44610d3f5f610164565b61017c565b9161017c565b14156104c2565b610d7682610d6f610d69610d645f610164565b61017c565b9161017c565b1415610544565b610d86610d81610170565b610579565b610d8f81610585565b602063a166bf06918490610db68794610dc146610daa610042565b9788968795869561034d565b8552600485016105ef565b03915afa9081156112a7575f91611279575b50610e0c6020610de284610585565b63ffb623df90610e018592610df5610042565b9586948593849361034d565b83526004830161062e565b03915afa801561127457610e39915f91611246575b5092610e3484610e2f6106f8565b6113a3565b610585565b90602063d1e15b84928590610e625f8996610e6d87610e56610042565b998a978896879561034d565b855260048501610703565b03925af1801561124157610eef95610eab610eb8925f958691611213575b5096610e9e88610e9961079b565b6113a3565b610ea66107e6565b6113a3565b610eb3610831565b6113a3565b610ec8610ec36102e3565b6102f6565b610ee463b11a19e8610ed8610042565b9788948593849361034d565b83526004830161062e565b03915afa90811561120e57610f1a610f3392610f48955f916111ec575b50610f1561091d565b611410565b610f2d610f27849261017c565b9161017c565b14610981565b610f43610f3e610a10565b61146a565b610a27565b610f6b5f610f5583610a33565b6306fdde0390610f63610042565b93849261034d565b82528180610f7b6004820161005f565b03915afa80156111e757610f9e915f916111c5575b50610f99610a7f565b611410565b610fc15f610fab83610a33565b6395d89b4190610fb9610042565b93849261034d565b82528180610fd16004820161005f565b03915afa80156111c057610ff4915f9161119e575b50610fef610aca565b611410565b611018602061100283610a33565b63313ce56790611010610042565b93849261034d565b825281806110286004820161005f565b03915afa80156111995761107a9261105f611064926020945f9161116c575b50611059611053610b5c565b91610b67565b906114d1565b610a33565b6318160ddd90611072610042565b93849261034d565b8252818061108a6004820161005f565b03915afa8015611167576110ad915f91611139575b506110a8610c04565b6114d1565b6110bd6110b86102e3565b6102f6565b6376eadd3690803b15611134576110e0915f916110d8610042565b93849261034d565b82528183816110f16004820161005f565b03925af1801561112f57611103575b50565b611122905f3d8111611128575b61111a8183610324565b810190610353565b5f611100565b503d611110565b610362565b610302565b61115a915060203d8111611160575b6111528183610324565b810190610ba6565b5f61109f565b503d611148565b610362565b61118c9150853d8111611192575b6111848183610324565b810190610afe565b5f611047565b503d61117a565b610362565b6111ba91503d805f833e6111b28183610324565b8101906108a8565b5f610fe6565b610362565b6111e191503d805f833e6111d98183610324565b8101906108a8565b5f610f90565b610362565b61120891503d805f833e6112008183610324565b8101906108a8565b5f610f0c565b610362565b611234915060203d811161123a575b61122c8183610324565b810190610399565b5f610e8b565b503d611222565b610362565b611267915060203d811161126d575b61125f8183610324565b810190610399565b5f610e21565b503d611255565b610362565b61129a915060203d81116112a0575b6112928183610324565b8101906105b7565b5f610dd3565b503d611288565b610362565b6112cd915060203d81116112d3575b6112c58183610324565b810190610399565b5f610d2a565b503d6112bb565b610362565b611300915060203d8111611306575b6112f88183610324565b810190610399565b5f610cdc565b503d6112ee565b610362565b611331905f3d8111611337575b6113298183610324565b810190610353565b5f610c8e565b503d61131f565b610362565b610302565b5190565b61136b6113746020936113799361136281611348565b93848093610188565b95869101610844565b610306565b0190565b929160206113996113a19360408701908782035f89015261134c565b9401906105d5565b565b906113de6113e3926113cf6113b6610042565b93849260046020850163319af33360e01b81520161137d565b60208201810382520382610324565b611513565b565b90916113ff61140d9360408401908482035f86015261134c565b91602081840391015261134c565b90565b9061144b6114509261143c611423610042565b938492600460208501634b5c427760e01b8152016113e5565b60208201810382520382610324565b611513565b565b6114679160208201915f81840391015261134c565b90565b6114956114a46114a99261147c610042565b92839160046020840163104c13eb60e21b815201611452565b60208201810382520382610324565b611513565b565b929160206114c76114cf9360408701908782035f89015261134c565b9401906105e2565b565b9061150c611511926114fd6114e4610042565b938492600460208501632d839cb360e21b8152016114ab565b60208201810382520382610324565b611513565b565b611526906115216001611552565b611572565b565b6a636f6e736f6c652e6c6f6790565b5f8091611542611528565b602082519201905afa50565b5f90565b61155a61154e565b5090565b634e487b7160e01b5f52605160045260245ffd5b60010361155e5761158290611537565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x15\x84a\x01\x06\x829a\x15\x84\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x0C\x0FV[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\\a\x01Wa\x01a\x92a\x017V[a\x01EV[a\x01:V[\x90V[a\x01m\x90a\x01HV[\x90V[a\x01y_a\x01dV[\x90V[a\x01\x85\x90a\x01:V[\x90V[` \x91\x81R\x01\x90V[_\x7FFactory address not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xC5`\x17` \x92a\x01\x88V[a\x01\xCE\x81a\x01\x91V[\x01\x90V[a\x01\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xB8V[\x90V[\x15a\x01\xF1WV[a\x01\xF9a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02\x0F`\x04\x82\x01a\x01\xD2V[\x03\x90\xFD[_\x1C\x90V[\x90V[a\x02/a\x02*a\x024\x92a\x02\x18V[a\x01EV[a\x02\x18V[\x90V[a\x02Ca\x02H\x91a\x02\x13V[a\x02\x1BV[\x90V[a\x02_a\x02Za\x02d\x92a\x02\x18V[a\x01EV[a\x01:V[\x90V[a\x02{a\x02va\x02\x80\x92a\x01:V[a\x01EV[a\x01:V[\x90V[a\x02\x8C\x90a\x02gV[\x90V[a\x02\xC8a\x02\xC3a\x02\xBE\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x027V[a\x02KV[a\x02\x83V[\x90V[a\x02\xD4\x90a\x02gV[\x90V[a\x02\xE0\x90a\x02\xCBV[\x90V[a\x02\xF3a\x02\xEEa\x02\x8FV[a\x02\xD7V[\x90V[a\x02\xFF\x90a\x02\x83V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03.\x90a\x03\x06V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03HW`@RV[a\x03\x10V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03]WV[a\0LV[a\x03ja\0BV[=_\x82>=\x90\xFD[_\x80\xFD[a\x03\x7F\x81a\x01|V[\x03a\x03\x86WV[_\x80\xFD[\x90PQ\x90a\x03\x97\x82a\x03vV[V[\x90` \x82\x82\x03\x12a\x03\xB2Wa\x03\xAF\x91_\x01a\x03\x8AV[\x90V[a\0LV[_\x7FADMIN_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\xEB`\n` \x92a\x01\x88V[a\x03\xF4\x81a\x03\xB7V[\x01\x90V[a\x04\r\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xDEV[\x90V[_\x7FMANAGER_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04D`\x0C` \x92a\x01\x88V[a\x04M\x81a\x04\x10V[\x01\x90V[a\x04f\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x047V[\x90V[_\x7FADMIN_ADDR not set\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\x9D`\x12` \x92a\x01\x88V[a\x04\xA6\x81a\x04iV[\x01\x90V[a\x04\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\x90V[\x90V[\x15a\x04\xC9WV[a\x04\xD1a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\xE7`\x04\x82\x01a\x04\xAAV[\x03\x90\xFD[_\x7FMANAGER_ADDR not set\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\x1F`\x14` \x92a\x01\x88V[a\x05(\x81a\x04\xEBV[\x01\x90V[a\x05A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\x12V[\x90V[\x15a\x05KWV[a\x05Sa\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05i`\x04\x82\x01a\x05,V[\x03\x90\xFD[a\x05v\x90a\x02gV[\x90V[a\x05\x82\x90a\x05mV[\x90V[a\x05\x8E\x90a\x02\x83V[\x90V[\x90V[a\x05\x9D\x81a\x05\x91V[\x03a\x05\xA4WV[_\x80\xFD[\x90PQ\x90a\x05\xB5\x82a\x05\x94V[V[\x90` \x82\x82\x03\x12a\x05\xD0Wa\x05\xCD\x91_\x01a\x05\xA8V[\x90V[a\0LV[a\x05\xDE\x90a\x01|V[\x90RV[a\x05\xEB\x90a\x02\x18V[\x90RV[`@\x90a\x06\x18a\x06\x1F\x94\x96\x95\x93\x96a\x06\x0E``\x84\x01\x98_\x85\x01\x90a\x05\xD5V[` \x83\x01\x90a\x05\xD5V[\x01\x90a\x05\xE2V[V[a\x06*\x90a\x05\x91V[\x90RV[\x91\x90a\x06A\x90_` \x85\x01\x94\x01\x90a\x06!V[V[\x90a\x06Va\x06Oa\0BV[\x92\x83a\x03$V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06vWa\x06r` \x91a\x03\x06V[\x01\x90V[a\x03\x10V[\x90a\x06\x8Da\x06\x88\x83a\x06XV[a\x06CV[\x91\x82RV[` \x7Fin address:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FPredicted SyndicateTokenCrosscha_\x82\x01R\x01RV[a\x06\xE9`+a\x06{V[\x90a\x06\xF6` \x83\x01a\x06\x92V[V[a\x07\0a\x06\xDFV[\x90V[`@\x90a\x07,a\x073\x94\x96\x95\x93\x96a\x07\"``\x84\x01\x98_\x85\x01\x90a\x05\xD5V[` \x83\x01\x90a\x05\xD5V[\x01\x90a\x06!V[V[` \x7Fd at:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSyndicateTokenCrosschain deploye_\x82\x01R\x01RV[a\x07\x8C`%a\x06{V[\x90a\x07\x99` \x83\x01a\x075V[V[a\x07\xA3a\x07\x82V[\x90V[_\x7FAdmin address:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\xD7`\x0Ea\x06{V[\x90a\x07\xE4` \x83\x01a\x07\xA6V[V[a\x07\xEEa\x07\xCDV[\x90V[_\x7FTreasury address:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\"`\x11a\x06{V[\x90a\x08/` \x83\x01a\x07\xF1V[V[a\x089a\x08\x18V[\x90V[_\x80\xFD[_\x80\xFD[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x08da\x08_\x82a\x06XV[a\x06CV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x08\x80Wa\x08~\x92a\x08DV[V[a\x08@V[\x90\x80`\x1F\x83\x01\x12\x15a\x08\xA3W\x81` a\x08\xA0\x93Q\x91\x01a\x08OV[\x90V[a\x08<V[\x90` \x82\x82\x03\x12a\x08\xD8W_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xD3Wa\x08\xD0\x92\x01a\x08\x85V[\x90V[a\x03rV[a\0LV[_\x7FSalt used:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\x0E`\na\x06{V[\x90a\t\x1B` \x83\x01a\x08\xDDV[V[a\t%a\t\x04V[\x90V[_\x7FAddress prediction failed\0\0\0\0\0\0\0\x91\x01RV[a\t\\`\x19` \x92a\x01\x88V[a\te\x81a\t(V[\x01\x90V[a\t~\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\tOV[\x90V[\x15a\t\x88WV[a\t\x90a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xA6`\x04\x82\x01a\tiV[\x03\x90\xFD[` \x7Fessfully\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FAddress prediction verified succ_\x82\x01R\x01RV[a\n\x01`(a\x06{V[\x90a\n\x0E` \x83\x01a\t\xAAV[V[a\n\x18a\t\xF7V[\x90V[a\n$\x90a\x02gV[\x90V[a\n0\x90a\n\x1BV[\x90V[a\n<\x90a\x02\x83V[\x90V[_\x7FToken name:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\np`\x0Ba\x06{V[\x90a\n}` \x83\x01a\n?V[V[a\n\x87a\nfV[\x90V[_\x7FToken symbol:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\n\xBB`\ra\x06{V[\x90a\n\xC8` \x83\x01a\n\x8AV[V[a\n\xD2a\n\xB1V[\x90V[`\xFF\x16\x90V[a\n\xE4\x81a\n\xD5V[\x03a\n\xEBWV[_\x80\xFD[\x90PQ\x90a\n\xFC\x82a\n\xDBV[V[\x90` \x82\x82\x03\x12a\x0B\x17Wa\x0B\x14\x91_\x01a\n\xEFV[\x90V[a\0LV[_\x7FToken decimals:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0BM`\x0Fa\x06{V[\x90a\x0BZ` \x83\x01a\x0B\x1CV[V[a\x0Bda\x0BCV[\x90V[a\x0B{a\x0Bva\x0B\x80\x92a\n\xD5V[a\x01EV[a\x02\x18V[\x90V[a\x0B\x8C\x81a\x02\x18V[\x03a\x0B\x93WV[_\x80\xFD[\x90PQ\x90a\x0B\xA4\x82a\x0B\x83V[V[\x90` \x82\x82\x03\x12a\x0B\xBFWa\x0B\xBC\x91_\x01a\x0B\x97V[\x90V[a\0LV[_\x7FInitial supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xF5`\x0Fa\x06{V[\x90a\x0C\x02` \x83\x01a\x0B\xC4V[V[a\x0C\x0Ca\x0B\xEBV[\x90V[a\x0C;a\x0C\x1Aa\x01pV[a\x0C4a\x0C.a\x0C)_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x01\xEAV[a\x0CKa\x0CFa\x02\xE3V[a\x02\xF6V[c\x7F\xB5)\x7F\x90\x80;\x15a\x13CWa\x0Cn\x91_\x91a\x0Cfa\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x0C\x7F`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x13>Wa\x13\x12W[Pa\x0C\xBA` a\x0C\xA4a\x0C\x9Fa\x02\xE3V[a\x02\xF6V[c5\rV\xBF\x90a\x0C\xB2a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x0C\xCA`\x04\x82\x01a\x03\xF8V[\x03\x91Z\xFA\x90\x81\x15a\x13\rW_\x91a\x12\xDFW[Pa\r\x08` a\x0C\xF2a\x0C\xEDa\x02\xE3V[a\x02\xF6V[c5\rV\xBF\x90a\r\0a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\r\x18`\x04\x82\x01a\x04QV[\x03\x91Z\xFA\x90\x81\x15a\x12\xDAW_\x91a\x12\xACW[P\x90a\rQ\x81a\rJa\rDa\r?_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x04\xC2V[a\rv\x82a\roa\ria\rd_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x05DV[a\r\x86a\r\x81a\x01pV[a\x05yV[a\r\x8F\x81a\x05\x85V[` c\xA1f\xBF\x06\x91\x84\x90a\r\xB6\x87\x94a\r\xC1Fa\r\xAAa\0BV[\x97\x88\x96\x87\x95\x86\x95a\x03MV[\x85R`\x04\x85\x01a\x05\xEFV[\x03\x91Z\xFA\x90\x81\x15a\x12\xA7W_\x91a\x12yW[Pa\x0E\x0C` a\r\xE2\x84a\x05\x85V[c\xFF\xB6#\xDF\x90a\x0E\x01\x85\x92a\r\xF5a\0BV[\x95\x86\x94\x85\x93\x84\x93a\x03MV[\x83R`\x04\x83\x01a\x06.V[\x03\x91Z\xFA\x80\x15a\x12tWa\x0E9\x91_\x91a\x12FW[P\x92a\x0E4\x84a\x0E/a\x06\xF8V[a\x13\xA3V[a\x05\x85V[\x90` c\xD1\xE1[\x84\x92\x85\x90a\x0Eb_\x89\x96a\x0Em\x87a\x0EVa\0BV[\x99\x8A\x97\x88\x96\x87\x95a\x03MV[\x85R`\x04\x85\x01a\x07\x03V[\x03\x92Z\xF1\x80\x15a\x12AWa\x0E\xEF\x95a\x0E\xABa\x0E\xB8\x92_\x95\x86\x91a\x12\x13W[P\x96a\x0E\x9E\x88a\x0E\x99a\x07\x9BV[a\x13\xA3V[a\x0E\xA6a\x07\xE6V[a\x13\xA3V[a\x0E\xB3a\x081V[a\x13\xA3V[a\x0E\xC8a\x0E\xC3a\x02\xE3V[a\x02\xF6V[a\x0E\xE4c\xB1\x1A\x19\xE8a\x0E\xD8a\0BV[\x97\x88\x94\x85\x93\x84\x93a\x03MV[\x83R`\x04\x83\x01a\x06.V[\x03\x91Z\xFA\x90\x81\x15a\x12\x0EWa\x0F\x1Aa\x0F3\x92a\x0FH\x95_\x91a\x11\xECW[Pa\x0F\x15a\t\x1DV[a\x14\x10V[a\x0F-a\x0F'\x84\x92a\x01|V[\x91a\x01|V[\x14a\t\x81V[a\x0FCa\x0F>a\n\x10V[a\x14jV[a\n'V[a\x0Fk_a\x0FU\x83a\n3V[c\x06\xFD\xDE\x03\x90a\x0Fca\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x0F{`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11\xE7Wa\x0F\x9E\x91_\x91a\x11\xC5W[Pa\x0F\x99a\n\x7FV[a\x14\x10V[a\x0F\xC1_a\x0F\xAB\x83a\n3V[c\x95\xD8\x9BA\x90a\x0F\xB9a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x0F\xD1`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11\xC0Wa\x0F\xF4\x91_\x91a\x11\x9EW[Pa\x0F\xEFa\n\xCAV[a\x14\x10V[a\x10\x18` a\x10\x02\x83a\n3V[c1<\xE5g\x90a\x10\x10a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x10(`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11\x99Wa\x10z\x92a\x10_a\x10d\x92` \x94_\x91a\x11lW[Pa\x10Ya\x10Sa\x0B\\V[\x91a\x0BgV[\x90a\x14\xD1V[a\n3V[c\x18\x16\r\xDD\x90a\x10ra\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x10\x8A`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11gWa\x10\xAD\x91_\x91a\x119W[Pa\x10\xA8a\x0C\x04V[a\x14\xD1V[a\x10\xBDa\x10\xB8a\x02\xE3V[a\x02\xF6V[cv\xEA\xDD6\x90\x80;\x15a\x114Wa\x10\xE0\x91_\x91a\x10\xD8a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x10\xF1`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x11/Wa\x11\x03W[PV[a\x11\"\x90_=\x81\x11a\x11(W[a\x11\x1A\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x11\0V[P=a\x11\x10V[a\x03bV[a\x03\x02V[a\x11Z\x91P` =\x81\x11a\x11`W[a\x11R\x81\x83a\x03$V[\x81\x01\x90a\x0B\xA6V[_a\x10\x9FV[P=a\x11HV[a\x03bV[a\x11\x8C\x91P\x85=\x81\x11a\x11\x92W[a\x11\x84\x81\x83a\x03$V[\x81\x01\x90a\n\xFEV[_a\x10GV[P=a\x11zV[a\x03bV[a\x11\xBA\x91P=\x80_\x83>a\x11\xB2\x81\x83a\x03$V[\x81\x01\x90a\x08\xA8V[_a\x0F\xE6V[a\x03bV[a\x11\xE1\x91P=\x80_\x83>a\x11\xD9\x81\x83a\x03$V[\x81\x01\x90a\x08\xA8V[_a\x0F\x90V[a\x03bV[a\x12\x08\x91P=\x80_\x83>a\x12\0\x81\x83a\x03$V[\x81\x01\x90a\x08\xA8V[_a\x0F\x0CV[a\x03bV[a\x124\x91P` =\x81\x11a\x12:W[a\x12,\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\x0E\x8BV[P=a\x12\"V[a\x03bV[a\x12g\x91P` =\x81\x11a\x12mW[a\x12_\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\x0E!V[P=a\x12UV[a\x03bV[a\x12\x9A\x91P` =\x81\x11a\x12\xA0W[a\x12\x92\x81\x83a\x03$V[\x81\x01\x90a\x05\xB7V[_a\r\xD3V[P=a\x12\x88V[a\x03bV[a\x12\xCD\x91P` =\x81\x11a\x12\xD3W[a\x12\xC5\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\r*V[P=a\x12\xBBV[a\x03bV[a\x13\0\x91P` =\x81\x11a\x13\x06W[a\x12\xF8\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\x0C\xDCV[P=a\x12\xEEV[a\x03bV[a\x131\x90_=\x81\x11a\x137W[a\x13)\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x0C\x8EV[P=a\x13\x1FV[a\x03bV[a\x03\x02V[Q\x90V[a\x13ka\x13t` \x93a\x13y\x93a\x13b\x81a\x13HV[\x93\x84\x80\x93a\x01\x88V[\x95\x86\x91\x01a\x08DV[a\x03\x06V[\x01\x90V[\x92\x91` a\x13\x99a\x13\xA1\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x13LV[\x94\x01\x90a\x05\xD5V[V[\x90a\x13\xDEa\x13\xE3\x92a\x13\xCFa\x13\xB6a\0BV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x13}V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[\x90\x91a\x13\xFFa\x14\r\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x13LV[\x91` \x81\x84\x03\x91\x01Ra\x13LV[\x90V[\x90a\x14Ka\x14P\x92a\x14<a\x14#a\0BV[\x93\x84\x92`\x04` \x85\x01cK\\Bw`\xE0\x1B\x81R\x01a\x13\xE5V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[a\x14g\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x13LV[\x90V[a\x14\x95a\x14\xA4a\x14\xA9\x92a\x14|a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x14RV[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[\x92\x91` a\x14\xC7a\x14\xCF\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x13LV[\x94\x01\x90a\x05\xE2V[V[\x90a\x15\x0Ca\x15\x11\x92a\x14\xFDa\x14\xE4a\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x14\xABV[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[a\x15&\x90a\x15!`\x01a\x15RV[a\x15rV[V[jconsole.log\x90V[_\x80\x91a\x15Ba\x15(V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x15Za\x15NV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x15^Wa\x15\x82\x90a\x157V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610c0f565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b90565b60018060a01b031690565b90565b61015c61015761016192610137565b610145565b61013a565b90565b61016d90610148565b90565b6101795f610164565b90565b6101859061013a565b90565b60209181520190565b5f7f466163746f72792061646472657373206e6f7420736574000000000000000000910152565b6101c56017602092610188565b6101ce81610191565b0190565b6101e79060208101905f8183039101526101b8565b90565b156101f157565b6101f9610042565b62461bcd60e51b81528061020f600482016101d2565b0390fd5b5f1c90565b90565b61022f61022a61023492610218565b610145565b610218565b90565b61024361024891610213565b61021b565b90565b61025f61025a61026492610218565b610145565b61013a565b90565b61027b6102766102809261013a565b610145565b61013a565b90565b61028c90610267565b90565b6102c86102c36102be7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610237565b61024b565b610283565b90565b6102d490610267565b90565b6102e0906102cb565b90565b6102f36102ee61028f565b6102d7565b90565b6102ff90610283565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061032e90610306565b810190811067ffffffffffffffff82111761034857604052565b610310565b60e01b90565b5f91031261035d57565b61004c565b61036a610042565b3d5f823e3d90fd5b5f80fd5b61037f8161017c565b0361038657565b5f80fd5b9050519061039782610376565b565b906020828203126103b2576103af915f0161038a565b90565b61004c565b5f7f41444d494e5f4144445200000000000000000000000000000000000000000000910152565b6103eb600a602092610188565b6103f4816103b7565b0190565b61040d9060208101905f8183039101526103de565b90565b5f7f4d414e414745525f414444520000000000000000000000000000000000000000910152565b610444600c602092610188565b61044d81610410565b0190565b6104669060208101905f818303910152610437565b90565b5f7f41444d494e5f41444452206e6f74207365740000000000000000000000000000910152565b61049d6012602092610188565b6104a681610469565b0190565b6104bf9060208101905f818303910152610490565b90565b156104c957565b6104d1610042565b62461bcd60e51b8152806104e7600482016104aa565b0390fd5b5f7f4d414e414745525f41444452206e6f7420736574000000000000000000000000910152565b61051f6014602092610188565b610528816104eb565b0190565b6105419060208101905f818303910152610512565b90565b1561054b57565b610553610042565b62461bcd60e51b8152806105696004820161052c565b0390fd5b61057690610267565b90565b6105829061056d565b90565b61058e90610283565b90565b90565b61059d81610591565b036105a457565b5f80fd5b905051906105b582610594565b565b906020828203126105d0576105cd915f016105a8565b90565b61004c565b6105de9061017c565b9052565b6105eb90610218565b9052565b60409061061861061f949695939661060e60608401985f8501906105d5565b60208301906105d5565b01906105e2565b565b61062a90610591565b9052565b9190610641905f60208501940190610621565b565b9061065661064f610042565b9283610324565b565b67ffffffffffffffff811161067657610672602091610306565b0190565b610310565b9061068d61068883610658565b610643565b918252565b60207f696e20616464726573733a000000000000000000000000000000000000000000917f5072656469637465642053796e646963617465546f6b656e43726f73736368615f8201520152565b6106e9602b61067b565b906106f660208301610692565b565b6107006106df565b90565b60409061072c610733949695939661072260608401985f8501906105d5565b60208301906105d5565b0190610621565b565b60207f642061743a000000000000000000000000000000000000000000000000000000917f53796e646963617465546f6b656e43726f7373636861696e206465706c6f79655f8201520152565b61078c602561067b565b9061079960208301610735565b565b6107a3610782565b90565b5f7f41646d696e20616464726573733a000000000000000000000000000000000000910152565b6107d7600e61067b565b906107e4602083016107a6565b565b6107ee6107cd565b90565b5f7f547265617375727920616464726573733a000000000000000000000000000000910152565b610822601161067b565b9061082f602083016107f1565b565b610839610818565b90565b5f80fd5b5f80fd5b90825f9392825e0152565b9092919261086461085f82610658565b610643565b938185526020850190828401116108805761087e92610844565b565b610840565b9080601f830112156108a3578160206108a09351910161084f565b90565b61083c565b906020828203126108d8575f82015167ffffffffffffffff81116108d3576108d09201610885565b90565b610372565b61004c565b5f7f53616c7420757365643a00000000000000000000000000000000000000000000910152565b61090e600a61067b565b9061091b602083016108dd565b565b610925610904565b90565b5f7f416464726573732070726564696374696f6e206661696c656400000000000000910152565b61095c6019602092610188565b61096581610928565b0190565b61097e9060208101905f81830391015261094f565b90565b1561098857565b610990610042565b62461bcd60e51b8152806109a660048201610969565b0390fd5b60207f65737366756c6c79000000000000000000000000000000000000000000000000917f416464726573732070726564696374696f6e20766572696669656420737563635f8201520152565b610a01602861067b565b90610a0e602083016109aa565b565b610a186109f7565b90565b610a2490610267565b90565b610a3090610a1b565b90565b610a3c90610283565b90565b5f7f546f6b656e206e616d653a000000000000000000000000000000000000000000910152565b610a70600b61067b565b90610a7d60208301610a3f565b565b610a87610a66565b90565b5f7f546f6b656e2073796d626f6c3a00000000000000000000000000000000000000910152565b610abb600d61067b565b90610ac860208301610a8a565b565b610ad2610ab1565b90565b60ff1690565b610ae481610ad5565b03610aeb57565b5f80fd5b90505190610afc82610adb565b565b90602082820312610b1757610b14915f01610aef565b90565b61004c565b5f7f546f6b656e20646563696d616c733a0000000000000000000000000000000000910152565b610b4d600f61067b565b90610b5a60208301610b1c565b565b610b64610b43565b90565b610b7b610b76610b8092610ad5565b610145565b610218565b90565b610b8c81610218565b03610b9357565b5f80fd5b90505190610ba482610b83565b565b90602082820312610bbf57610bbc915f01610b97565b90565b61004c565b5f7f496e697469616c20737570706c793a0000000000000000000000000000000000910152565b610bf5600f61067b565b90610c0260208301610bc4565b565b610c0c610beb565b90565b610c3b610c1a610170565b610c34610c2e610c295f610164565b61017c565b9161017c565b14156101ea565b610c4b610c466102e3565b6102f6565b637fb5297f90803b1561134357610c6e915f91610c66610042565b93849261034d565b8252818381610c7f6004820161005f565b03925af1801561133e57611312575b50610cba6020610ca4610c9f6102e3565b6102f6565b63350d56bf90610cb2610042565b93849261034d565b82528180610cca600482016103f8565b03915afa90811561130d575f916112df575b50610d086020610cf2610ced6102e3565b6102f6565b63350d56bf90610d00610042565b93849261034d565b82528180610d1860048201610451565b03915afa9081156112da575f916112ac575b5090610d5181610d4a610d44610d3f5f610164565b61017c565b9161017c565b14156104c2565b610d7682610d6f610d69610d645f610164565b61017c565b9161017c565b1415610544565b610d86610d81610170565b610579565b610d8f81610585565b602063a166bf06918490610db68794610dc146610daa610042565b9788968795869561034d565b8552600485016105ef565b03915afa9081156112a7575f91611279575b50610e0c6020610de284610585565b63ffb623df90610e018592610df5610042565b9586948593849361034d565b83526004830161062e565b03915afa801561127457610e39915f91611246575b5092610e3484610e2f6106f8565b6113a3565b610585565b90602063d1e15b84928590610e625f8996610e6d87610e56610042565b998a978896879561034d565b855260048501610703565b03925af1801561124157610eef95610eab610eb8925f958691611213575b5096610e9e88610e9961079b565b6113a3565b610ea66107e6565b6113a3565b610eb3610831565b6113a3565b610ec8610ec36102e3565b6102f6565b610ee463b11a19e8610ed8610042565b9788948593849361034d565b83526004830161062e565b03915afa90811561120e57610f1a610f3392610f48955f916111ec575b50610f1561091d565b611410565b610f2d610f27849261017c565b9161017c565b14610981565b610f43610f3e610a10565b61146a565b610a27565b610f6b5f610f5583610a33565b6306fdde0390610f63610042565b93849261034d565b82528180610f7b6004820161005f565b03915afa80156111e757610f9e915f916111c5575b50610f99610a7f565b611410565b610fc15f610fab83610a33565b6395d89b4190610fb9610042565b93849261034d565b82528180610fd16004820161005f565b03915afa80156111c057610ff4915f9161119e575b50610fef610aca565b611410565b611018602061100283610a33565b63313ce56790611010610042565b93849261034d565b825281806110286004820161005f565b03915afa80156111995761107a9261105f611064926020945f9161116c575b50611059611053610b5c565b91610b67565b906114d1565b610a33565b6318160ddd90611072610042565b93849261034d565b8252818061108a6004820161005f565b03915afa8015611167576110ad915f91611139575b506110a8610c04565b6114d1565b6110bd6110b86102e3565b6102f6565b6376eadd3690803b15611134576110e0915f916110d8610042565b93849261034d565b82528183816110f16004820161005f565b03925af1801561112f57611103575b50565b611122905f3d8111611128575b61111a8183610324565b810190610353565b5f611100565b503d611110565b610362565b610302565b61115a915060203d8111611160575b6111528183610324565b810190610ba6565b5f61109f565b503d611148565b610362565b61118c9150853d8111611192575b6111848183610324565b810190610afe565b5f611047565b503d61117a565b610362565b6111ba91503d805f833e6111b28183610324565b8101906108a8565b5f610fe6565b610362565b6111e191503d805f833e6111d98183610324565b8101906108a8565b5f610f90565b610362565b61120891503d805f833e6112008183610324565b8101906108a8565b5f610f0c565b610362565b611234915060203d811161123a575b61122c8183610324565b810190610399565b5f610e8b565b503d611222565b610362565b611267915060203d811161126d575b61125f8183610324565b810190610399565b5f610e21565b503d611255565b610362565b61129a915060203d81116112a0575b6112928183610324565b8101906105b7565b5f610dd3565b503d611288565b610362565b6112cd915060203d81116112d3575b6112c58183610324565b810190610399565b5f610d2a565b503d6112bb565b610362565b611300915060203d8111611306575b6112f88183610324565b810190610399565b5f610cdc565b503d6112ee565b610362565b611331905f3d8111611337575b6113298183610324565b810190610353565b5f610c8e565b503d61131f565b610362565b610302565b5190565b61136b6113746020936113799361136281611348565b93848093610188565b95869101610844565b610306565b0190565b929160206113996113a19360408701908782035f89015261134c565b9401906105d5565b565b906113de6113e3926113cf6113b6610042565b93849260046020850163319af33360e01b81520161137d565b60208201810382520382610324565b611513565b565b90916113ff61140d9360408401908482035f86015261134c565b91602081840391015261134c565b90565b9061144b6114509261143c611423610042565b938492600460208501634b5c427760e01b8152016113e5565b60208201810382520382610324565b611513565b565b6114679160208201915f81840391015261134c565b90565b6114956114a46114a99261147c610042565b92839160046020840163104c13eb60e21b815201611452565b60208201810382520382610324565b611513565b565b929160206114c76114cf9360408701908782035f89015261134c565b9401906105e2565b565b9061150c611511926114fd6114e4610042565b938492600460208501632d839cb360e21b8152016114ab565b60208201810382520382610324565b611513565b565b611526906115216001611552565b611572565b565b6a636f6e736f6c652e6c6f6790565b5f8091611542611528565b602082519201905afa50565b5f90565b61155a61154e565b5090565b634e487b7160e01b5f52605160045260245ffd5b60010361155e5761158290611537565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x0C\x0FV[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\\a\x01Wa\x01a\x92a\x017V[a\x01EV[a\x01:V[\x90V[a\x01m\x90a\x01HV[\x90V[a\x01y_a\x01dV[\x90V[a\x01\x85\x90a\x01:V[\x90V[` \x91\x81R\x01\x90V[_\x7FFactory address not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xC5`\x17` \x92a\x01\x88V[a\x01\xCE\x81a\x01\x91V[\x01\x90V[a\x01\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xB8V[\x90V[\x15a\x01\xF1WV[a\x01\xF9a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02\x0F`\x04\x82\x01a\x01\xD2V[\x03\x90\xFD[_\x1C\x90V[\x90V[a\x02/a\x02*a\x024\x92a\x02\x18V[a\x01EV[a\x02\x18V[\x90V[a\x02Ca\x02H\x91a\x02\x13V[a\x02\x1BV[\x90V[a\x02_a\x02Za\x02d\x92a\x02\x18V[a\x01EV[a\x01:V[\x90V[a\x02{a\x02va\x02\x80\x92a\x01:V[a\x01EV[a\x01:V[\x90V[a\x02\x8C\x90a\x02gV[\x90V[a\x02\xC8a\x02\xC3a\x02\xBE\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x027V[a\x02KV[a\x02\x83V[\x90V[a\x02\xD4\x90a\x02gV[\x90V[a\x02\xE0\x90a\x02\xCBV[\x90V[a\x02\xF3a\x02\xEEa\x02\x8FV[a\x02\xD7V[\x90V[a\x02\xFF\x90a\x02\x83V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03.\x90a\x03\x06V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03HW`@RV[a\x03\x10V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03]WV[a\0LV[a\x03ja\0BV[=_\x82>=\x90\xFD[_\x80\xFD[a\x03\x7F\x81a\x01|V[\x03a\x03\x86WV[_\x80\xFD[\x90PQ\x90a\x03\x97\x82a\x03vV[V[\x90` \x82\x82\x03\x12a\x03\xB2Wa\x03\xAF\x91_\x01a\x03\x8AV[\x90V[a\0LV[_\x7FADMIN_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\xEB`\n` \x92a\x01\x88V[a\x03\xF4\x81a\x03\xB7V[\x01\x90V[a\x04\r\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xDEV[\x90V[_\x7FMANAGER_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04D`\x0C` \x92a\x01\x88V[a\x04M\x81a\x04\x10V[\x01\x90V[a\x04f\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x047V[\x90V[_\x7FADMIN_ADDR not set\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\x9D`\x12` \x92a\x01\x88V[a\x04\xA6\x81a\x04iV[\x01\x90V[a\x04\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\x90V[\x90V[\x15a\x04\xC9WV[a\x04\xD1a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\xE7`\x04\x82\x01a\x04\xAAV[\x03\x90\xFD[_\x7FMANAGER_ADDR not set\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\x1F`\x14` \x92a\x01\x88V[a\x05(\x81a\x04\xEBV[\x01\x90V[a\x05A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\x12V[\x90V[\x15a\x05KWV[a\x05Sa\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05i`\x04\x82\x01a\x05,V[\x03\x90\xFD[a\x05v\x90a\x02gV[\x90V[a\x05\x82\x90a\x05mV[\x90V[a\x05\x8E\x90a\x02\x83V[\x90V[\x90V[a\x05\x9D\x81a\x05\x91V[\x03a\x05\xA4WV[_\x80\xFD[\x90PQ\x90a\x05\xB5\x82a\x05\x94V[V[\x90` \x82\x82\x03\x12a\x05\xD0Wa\x05\xCD\x91_\x01a\x05\xA8V[\x90V[a\0LV[a\x05\xDE\x90a\x01|V[\x90RV[a\x05\xEB\x90a\x02\x18V[\x90RV[`@\x90a\x06\x18a\x06\x1F\x94\x96\x95\x93\x96a\x06\x0E``\x84\x01\x98_\x85\x01\x90a\x05\xD5V[` \x83\x01\x90a\x05\xD5V[\x01\x90a\x05\xE2V[V[a\x06*\x90a\x05\x91V[\x90RV[\x91\x90a\x06A\x90_` \x85\x01\x94\x01\x90a\x06!V[V[\x90a\x06Va\x06Oa\0BV[\x92\x83a\x03$V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06vWa\x06r` \x91a\x03\x06V[\x01\x90V[a\x03\x10V[\x90a\x06\x8Da\x06\x88\x83a\x06XV[a\x06CV[\x91\x82RV[` \x7Fin address:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FPredicted SyndicateTokenCrosscha_\x82\x01R\x01RV[a\x06\xE9`+a\x06{V[\x90a\x06\xF6` \x83\x01a\x06\x92V[V[a\x07\0a\x06\xDFV[\x90V[`@\x90a\x07,a\x073\x94\x96\x95\x93\x96a\x07\"``\x84\x01\x98_\x85\x01\x90a\x05\xD5V[` \x83\x01\x90a\x05\xD5V[\x01\x90a\x06!V[V[` \x7Fd at:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSyndicateTokenCrosschain deploye_\x82\x01R\x01RV[a\x07\x8C`%a\x06{V[\x90a\x07\x99` \x83\x01a\x075V[V[a\x07\xA3a\x07\x82V[\x90V[_\x7FAdmin address:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\xD7`\x0Ea\x06{V[\x90a\x07\xE4` \x83\x01a\x07\xA6V[V[a\x07\xEEa\x07\xCDV[\x90V[_\x7FTreasury address:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\"`\x11a\x06{V[\x90a\x08/` \x83\x01a\x07\xF1V[V[a\x089a\x08\x18V[\x90V[_\x80\xFD[_\x80\xFD[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x08da\x08_\x82a\x06XV[a\x06CV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x08\x80Wa\x08~\x92a\x08DV[V[a\x08@V[\x90\x80`\x1F\x83\x01\x12\x15a\x08\xA3W\x81` a\x08\xA0\x93Q\x91\x01a\x08OV[\x90V[a\x08<V[\x90` \x82\x82\x03\x12a\x08\xD8W_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xD3Wa\x08\xD0\x92\x01a\x08\x85V[\x90V[a\x03rV[a\0LV[_\x7FSalt used:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\x0E`\na\x06{V[\x90a\t\x1B` \x83\x01a\x08\xDDV[V[a\t%a\t\x04V[\x90V[_\x7FAddress prediction failed\0\0\0\0\0\0\0\x91\x01RV[a\t\\`\x19` \x92a\x01\x88V[a\te\x81a\t(V[\x01\x90V[a\t~\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\tOV[\x90V[\x15a\t\x88WV[a\t\x90a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xA6`\x04\x82\x01a\tiV[\x03\x90\xFD[` \x7Fessfully\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FAddress prediction verified succ_\x82\x01R\x01RV[a\n\x01`(a\x06{V[\x90a\n\x0E` \x83\x01a\t\xAAV[V[a\n\x18a\t\xF7V[\x90V[a\n$\x90a\x02gV[\x90V[a\n0\x90a\n\x1BV[\x90V[a\n<\x90a\x02\x83V[\x90V[_\x7FToken name:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\np`\x0Ba\x06{V[\x90a\n}` \x83\x01a\n?V[V[a\n\x87a\nfV[\x90V[_\x7FToken symbol:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\n\xBB`\ra\x06{V[\x90a\n\xC8` \x83\x01a\n\x8AV[V[a\n\xD2a\n\xB1V[\x90V[`\xFF\x16\x90V[a\n\xE4\x81a\n\xD5V[\x03a\n\xEBWV[_\x80\xFD[\x90PQ\x90a\n\xFC\x82a\n\xDBV[V[\x90` \x82\x82\x03\x12a\x0B\x17Wa\x0B\x14\x91_\x01a\n\xEFV[\x90V[a\0LV[_\x7FToken decimals:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0BM`\x0Fa\x06{V[\x90a\x0BZ` \x83\x01a\x0B\x1CV[V[a\x0Bda\x0BCV[\x90V[a\x0B{a\x0Bva\x0B\x80\x92a\n\xD5V[a\x01EV[a\x02\x18V[\x90V[a\x0B\x8C\x81a\x02\x18V[\x03a\x0B\x93WV[_\x80\xFD[\x90PQ\x90a\x0B\xA4\x82a\x0B\x83V[V[\x90` \x82\x82\x03\x12a\x0B\xBFWa\x0B\xBC\x91_\x01a\x0B\x97V[\x90V[a\0LV[_\x7FInitial supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xF5`\x0Fa\x06{V[\x90a\x0C\x02` \x83\x01a\x0B\xC4V[V[a\x0C\x0Ca\x0B\xEBV[\x90V[a\x0C;a\x0C\x1Aa\x01pV[a\x0C4a\x0C.a\x0C)_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x01\xEAV[a\x0CKa\x0CFa\x02\xE3V[a\x02\xF6V[c\x7F\xB5)\x7F\x90\x80;\x15a\x13CWa\x0Cn\x91_\x91a\x0Cfa\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x0C\x7F`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x13>Wa\x13\x12W[Pa\x0C\xBA` a\x0C\xA4a\x0C\x9Fa\x02\xE3V[a\x02\xF6V[c5\rV\xBF\x90a\x0C\xB2a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x0C\xCA`\x04\x82\x01a\x03\xF8V[\x03\x91Z\xFA\x90\x81\x15a\x13\rW_\x91a\x12\xDFW[Pa\r\x08` a\x0C\xF2a\x0C\xEDa\x02\xE3V[a\x02\xF6V[c5\rV\xBF\x90a\r\0a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\r\x18`\x04\x82\x01a\x04QV[\x03\x91Z\xFA\x90\x81\x15a\x12\xDAW_\x91a\x12\xACW[P\x90a\rQ\x81a\rJa\rDa\r?_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x04\xC2V[a\rv\x82a\roa\ria\rd_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x05DV[a\r\x86a\r\x81a\x01pV[a\x05yV[a\r\x8F\x81a\x05\x85V[` c\xA1f\xBF\x06\x91\x84\x90a\r\xB6\x87\x94a\r\xC1Fa\r\xAAa\0BV[\x97\x88\x96\x87\x95\x86\x95a\x03MV[\x85R`\x04\x85\x01a\x05\xEFV[\x03\x91Z\xFA\x90\x81\x15a\x12\xA7W_\x91a\x12yW[Pa\x0E\x0C` a\r\xE2\x84a\x05\x85V[c\xFF\xB6#\xDF\x90a\x0E\x01\x85\x92a\r\xF5a\0BV[\x95\x86\x94\x85\x93\x84\x93a\x03MV[\x83R`\x04\x83\x01a\x06.V[\x03\x91Z\xFA\x80\x15a\x12tWa\x0E9\x91_\x91a\x12FW[P\x92a\x0E4\x84a\x0E/a\x06\xF8V[a\x13\xA3V[a\x05\x85V[\x90` c\xD1\xE1[\x84\x92\x85\x90a\x0Eb_\x89\x96a\x0Em\x87a\x0EVa\0BV[\x99\x8A\x97\x88\x96\x87\x95a\x03MV[\x85R`\x04\x85\x01a\x07\x03V[\x03\x92Z\xF1\x80\x15a\x12AWa\x0E\xEF\x95a\x0E\xABa\x0E\xB8\x92_\x95\x86\x91a\x12\x13W[P\x96a\x0E\x9E\x88a\x0E\x99a\x07\x9BV[a\x13\xA3V[a\x0E\xA6a\x07\xE6V[a\x13\xA3V[a\x0E\xB3a\x081V[a\x13\xA3V[a\x0E\xC8a\x0E\xC3a\x02\xE3V[a\x02\xF6V[a\x0E\xE4c\xB1\x1A\x19\xE8a\x0E\xD8a\0BV[\x97\x88\x94\x85\x93\x84\x93a\x03MV[\x83R`\x04\x83\x01a\x06.V[\x03\x91Z\xFA\x90\x81\x15a\x12\x0EWa\x0F\x1Aa\x0F3\x92a\x0FH\x95_\x91a\x11\xECW[Pa\x0F\x15a\t\x1DV[a\x14\x10V[a\x0F-a\x0F'\x84\x92a\x01|V[\x91a\x01|V[\x14a\t\x81V[a\x0FCa\x0F>a\n\x10V[a\x14jV[a\n'V[a\x0Fk_a\x0FU\x83a\n3V[c\x06\xFD\xDE\x03\x90a\x0Fca\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x0F{`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11\xE7Wa\x0F\x9E\x91_\x91a\x11\xC5W[Pa\x0F\x99a\n\x7FV[a\x14\x10V[a\x0F\xC1_a\x0F\xAB\x83a\n3V[c\x95\xD8\x9BA\x90a\x0F\xB9a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x0F\xD1`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11\xC0Wa\x0F\xF4\x91_\x91a\x11\x9EW[Pa\x0F\xEFa\n\xCAV[a\x14\x10V[a\x10\x18` a\x10\x02\x83a\n3V[c1<\xE5g\x90a\x10\x10a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x10(`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11\x99Wa\x10z\x92a\x10_a\x10d\x92` \x94_\x91a\x11lW[Pa\x10Ya\x10Sa\x0B\\V[\x91a\x0BgV[\x90a\x14\xD1V[a\n3V[c\x18\x16\r\xDD\x90a\x10ra\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x80a\x10\x8A`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x11gWa\x10\xAD\x91_\x91a\x119W[Pa\x10\xA8a\x0C\x04V[a\x14\xD1V[a\x10\xBDa\x10\xB8a\x02\xE3V[a\x02\xF6V[cv\xEA\xDD6\x90\x80;\x15a\x114Wa\x10\xE0\x91_\x91a\x10\xD8a\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x10\xF1`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x11/Wa\x11\x03W[PV[a\x11\"\x90_=\x81\x11a\x11(W[a\x11\x1A\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x11\0V[P=a\x11\x10V[a\x03bV[a\x03\x02V[a\x11Z\x91P` =\x81\x11a\x11`W[a\x11R\x81\x83a\x03$V[\x81\x01\x90a\x0B\xA6V[_a\x10\x9FV[P=a\x11HV[a\x03bV[a\x11\x8C\x91P\x85=\x81\x11a\x11\x92W[a\x11\x84\x81\x83a\x03$V[\x81\x01\x90a\n\xFEV[_a\x10GV[P=a\x11zV[a\x03bV[a\x11\xBA\x91P=\x80_\x83>a\x11\xB2\x81\x83a\x03$V[\x81\x01\x90a\x08\xA8V[_a\x0F\xE6V[a\x03bV[a\x11\xE1\x91P=\x80_\x83>a\x11\xD9\x81\x83a\x03$V[\x81\x01\x90a\x08\xA8V[_a\x0F\x90V[a\x03bV[a\x12\x08\x91P=\x80_\x83>a\x12\0\x81\x83a\x03$V[\x81\x01\x90a\x08\xA8V[_a\x0F\x0CV[a\x03bV[a\x124\x91P` =\x81\x11a\x12:W[a\x12,\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\x0E\x8BV[P=a\x12\"V[a\x03bV[a\x12g\x91P` =\x81\x11a\x12mW[a\x12_\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\x0E!V[P=a\x12UV[a\x03bV[a\x12\x9A\x91P` =\x81\x11a\x12\xA0W[a\x12\x92\x81\x83a\x03$V[\x81\x01\x90a\x05\xB7V[_a\r\xD3V[P=a\x12\x88V[a\x03bV[a\x12\xCD\x91P` =\x81\x11a\x12\xD3W[a\x12\xC5\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\r*V[P=a\x12\xBBV[a\x03bV[a\x13\0\x91P` =\x81\x11a\x13\x06W[a\x12\xF8\x81\x83a\x03$V[\x81\x01\x90a\x03\x99V[_a\x0C\xDCV[P=a\x12\xEEV[a\x03bV[a\x131\x90_=\x81\x11a\x137W[a\x13)\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x0C\x8EV[P=a\x13\x1FV[a\x03bV[a\x03\x02V[Q\x90V[a\x13ka\x13t` \x93a\x13y\x93a\x13b\x81a\x13HV[\x93\x84\x80\x93a\x01\x88V[\x95\x86\x91\x01a\x08DV[a\x03\x06V[\x01\x90V[\x92\x91` a\x13\x99a\x13\xA1\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x13LV[\x94\x01\x90a\x05\xD5V[V[\x90a\x13\xDEa\x13\xE3\x92a\x13\xCFa\x13\xB6a\0BV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x13}V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[\x90\x91a\x13\xFFa\x14\r\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x13LV[\x91` \x81\x84\x03\x91\x01Ra\x13LV[\x90V[\x90a\x14Ka\x14P\x92a\x14<a\x14#a\0BV[\x93\x84\x92`\x04` \x85\x01cK\\Bw`\xE0\x1B\x81R\x01a\x13\xE5V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[a\x14g\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x13LV[\x90V[a\x14\x95a\x14\xA4a\x14\xA9\x92a\x14|a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x14RV[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[\x92\x91` a\x14\xC7a\x14\xCF\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x13LV[\x94\x01\x90a\x05\xE2V[V[\x90a\x15\x0Ca\x15\x11\x92a\x14\xFDa\x14\xE4a\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x14\xABV[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\x15\x13V[V[a\x15&\x90a\x15!`\x01a\x15RV[a\x15rV[V[jconsole.log\x90V[_\x80\x91a\x15Ba\x15(V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x15Za\x15NV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x15^Wa\x15\x82\x90a\x157V[V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DeploySyndicateTokenCrosschainViaFactory`](self) function calls.
    pub enum DeploySyndicateTokenCrosschainViaFactoryCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl DeploySyndicateTokenCrosschainViaFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for DeploySyndicateTokenCrosschainViaFactoryCalls {
        const NAME: &'static str = "DeploySyndicateTokenCrosschainViaFactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                DeploySyndicateTokenCrosschainViaFactoryCalls,
            >] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DeploySyndicateTokenCrosschainViaFactoryCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DeploySyndicateTokenCrosschainViaFactoryCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DeploySyndicateTokenCrosschainViaFactoryCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DeploySyndicateTokenCrosschainViaFactoryCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DeploySyndicateTokenCrosschainViaFactory`](self) contract instance.

See the [wrapper's documentation](`DeploySyndicateTokenCrosschainViaFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N> {
        DeploySyndicateTokenCrosschainViaFactoryInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N>,
        >,
    > {
        DeploySyndicateTokenCrosschainViaFactoryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DeploySyndicateTokenCrosschainViaFactoryInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider)
    }
    /**A [`DeploySyndicateTokenCrosschainViaFactory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DeploySyndicateTokenCrosschainViaFactory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DeploySyndicateTokenCrosschainViaFactoryInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DeploySyndicateTokenCrosschainViaFactoryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DeploySyndicateTokenCrosschainViaFactory`](self) contract instance.

See the [wrapper's documentation](`DeploySyndicateTokenCrosschainViaFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > DeploySyndicateTokenCrosschainViaFactoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N> {
            DeploySyndicateTokenCrosschainViaFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeploySyndicateTokenCrosschainViaFactoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
