/**

Generated by the following Solidity interface...
```solidity
interface VerifyCrosschainAddressConsistency {
    function IS_SCRIPT() external view returns (bool);
    function run() external pure;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod VerifyCrosschainAddressConsistency {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610a966101068239610a9690f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610722565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b90565b90565b90565b61015461014f61015992610137565b61013d565b61013a565b90565b905090565b5f7f53594e445f43524f5353434841494e0000000000000000000000000000000000910152565b610194600f809261015c565b61019d81610161565b0190565b60018060a01b031690565b6101b5906101a1565b90565b60601b90565b6101c7906101b8565b90565b6101d3906101be565b90565b6101e26101e7916101ac565b6101ca565b9052565b90565b6101fa6101ff9161013a565b6101eb565b9052565b6020939261022c60146102349461022461021d8396610188565b80926101d6565b0180926101d6565b0180926101ee565b0190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061026090610238565b810190811067ffffffffffffffff82111761027a57604052565b610242565b60200190565b5190565b90565b6102a061029b6102a592610289565b61013d565b61013a565b90565b5f7f544553544e45545f53594e445f43524f5353434841494e000000000000000000910152565b6102db6017809261015c565b6102e4816102a8565b0190565b6020939261031160146103199461030961030283966102cf565b80926101d6565b0180926101d6565b0180926101ee565b0190565b5f1c90565b61033661033161033b9261013a565b61013d565b61013a565b90565b61034a61034f9161031d565b610322565b90565b61036661036161036b9261013a565b61013d565b6101a1565b90565b61038261037d610387926101a1565b61013d565b6101a1565b90565b6103939061036e565b90565b6103cf6103ca6103c57f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61033e565b610352565b61038a565b90565b6103db9061036e565b90565b6103e7906103d2565b90565b6103fa6103f5610396565b6103de565b90565b6104069061038a565b90565b60e01b90565b5f80fd5b5f80fd5b5f80fd5b9061042e610427610042565b9283610256565b565b67ffffffffffffffff811161044e5761044a602091610238565b0190565b610242565b90825f9392825e0152565b9092919261047361046e82610430565b61041b565b9381855260208501908284011161048f5761048d92610453565b565b610417565b9080601f830112156104b2578160206104af9351910161045e565b90565b610413565b906020828203126104e7575f82015167ffffffffffffffff81116104e2576104df9201610494565b90565b61040f565b61004c565b90565b6104f8906104ec565b9052565b919061050f905f602085019401906104ef565b565b610519610042565b3d5f823e3d90fd5b9061053361052e83610430565b61041b565b918252565b5f7f4d61696e6e65742053616c743a00000000000000000000000000000000000000910152565b610569600d610521565b9061057660208301610538565b565b61058061055f565b90565b5f7f546573746e65742053616c743a00000000000000000000000000000000000000910152565b6105b4600d610521565b906105c160208301610583565b565b6105cb6105aa565b90565b60607f6164647265737300000000000000000000000000000000000000000000000000917f5573696e67204352454154453220776974682073616d652073616c742077696c5f8201527f6c2070726f6475636520636f6e73697374656e7420616464726573736573207760208201527f68656e206465706c6f7965642066726f6d2073616d65206465706c6f7965722060408201520152565b6106716067610521565b9061067e602083016105ce565b565b610688610667565b90565b60407f697374656e742061646472657373657300000000000000000000000000000000917f4465706c6f79206f6e206561636820636861696e20776974682073616d6520655f8201527f6e7669726f6e6d656e74207661726961626c657320746f2067657420636f6e7360208201520152565b6107086050610521565b906107156020830161068b565b565b61071f6106fe565b90565b61082e7311111111111111111111111111111111111111115f7333333333333333333333333333333333333333336107e37355555555555555555555555555555555555555559161079d8561078e61077a6001610140565b610782610042565b94859360208501610203565b60208201810382520382610256565b6107af6107a982610285565b9161027f565b20936107d46107c062aa36a761028c565b6107c8610042565b948593602085016102e8565b60208201810382520382610256565b6107f56107ef82610285565b9161027f565b20916108076108026103ea565b6103fd565b61082363b11a19e8610817610042565b96879485938493610409565b8352600483016104fc565b03915afa90811561091c576108575f9261088e9484916108fa575b50610852610578565b61098a565b6108676108626103ea565b6103fd565b61088363b11a19e8610877610042565b95869485938493610409565b8352600483016104fc565b03915afa80156108f5576108b1915f916108d3575b506108ac6105c3565b61098a565b6108c16108bc610680565b6109e4565b6108d16108cc610717565b6109e4565b565b6108ef91503d805f833e6108e78183610256565b8101906104b7565b5f6108a3565b610511565b61091691503d8086833e61090e8183610256565b8101906104b7565b5f610849565b610511565b5190565b60209181520190565b61094d61095660209361095b9361094481610921565b93848093610925565b95869101610453565b610238565b0190565b90916109796109879360408401908482035f86015261092e565b91602081840391015261092e565b90565b906109c56109ca926109b661099d610042565b938492600460208501634b5c427760e01b81520161095f565b60208201810382520382610256565b610a25565b565b6109e19160208201915f81840391015261092e565b90565b610a0f610a1e610a23926109f6610042565b92839160046020840163104c13eb60e21b8152016109cc565b60208201810382520382610256565b610a25565b565b610a3890610a336001610a64565b610a84565b565b6a636f6e736f6c652e6c6f6790565b5f8091610a54610a3a565b602082519201905afa50565b5f90565b610a6c610a60565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610a7057610a9490610a49565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\n\x96a\x01\x06\x829a\n\x96\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x07\"V[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[\x90V[\x90V[\x90V[a\x01Ta\x01Oa\x01Y\x92a\x017V[a\x01=V[a\x01:V[\x90V[\x90P\x90V[_\x7FSYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\x94`\x0F\x80\x92a\x01\\V[a\x01\x9D\x81a\x01aV[\x01\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xB5\x90a\x01\xA1V[\x90V[``\x1B\x90V[a\x01\xC7\x90a\x01\xB8V[\x90V[a\x01\xD3\x90a\x01\xBEV[\x90V[a\x01\xE2a\x01\xE7\x91a\x01\xACV[a\x01\xCAV[\x90RV[\x90V[a\x01\xFAa\x01\xFF\x91a\x01:V[a\x01\xEBV[\x90RV[` \x93\x92a\x02,`\x14a\x024\x94a\x02$a\x02\x1D\x83\x96a\x01\x88V[\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xEEV[\x01\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02`\x90a\x028V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02zW`@RV[a\x02BV[` \x01\x90V[Q\x90V[\x90V[a\x02\xA0a\x02\x9Ba\x02\xA5\x92a\x02\x89V[a\x01=V[a\x01:V[\x90V[_\x7FTESTNET_SYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xDB`\x17\x80\x92a\x01\\V[a\x02\xE4\x81a\x02\xA8V[\x01\x90V[` \x93\x92a\x03\x11`\x14a\x03\x19\x94a\x03\ta\x03\x02\x83\x96a\x02\xCFV[\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xEEV[\x01\x90V[_\x1C\x90V[a\x036a\x031a\x03;\x92a\x01:V[a\x01=V[a\x01:V[\x90V[a\x03Ja\x03O\x91a\x03\x1DV[a\x03\"V[\x90V[a\x03fa\x03aa\x03k\x92a\x01:V[a\x01=V[a\x01\xA1V[\x90V[a\x03\x82a\x03}a\x03\x87\x92a\x01\xA1V[a\x01=V[a\x01\xA1V[\x90V[a\x03\x93\x90a\x03nV[\x90V[a\x03\xCFa\x03\xCAa\x03\xC5\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x03>V[a\x03RV[a\x03\x8AV[\x90V[a\x03\xDB\x90a\x03nV[\x90V[a\x03\xE7\x90a\x03\xD2V[\x90V[a\x03\xFAa\x03\xF5a\x03\x96V[a\x03\xDEV[\x90V[a\x04\x06\x90a\x03\x8AV[\x90V[`\xE0\x1B\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90a\x04.a\x04'a\0BV[\x92\x83a\x02VV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04NWa\x04J` \x91a\x028V[\x01\x90V[a\x02BV[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x04sa\x04n\x82a\x040V[a\x04\x1BV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x04\x8FWa\x04\x8D\x92a\x04SV[V[a\x04\x17V[\x90\x80`\x1F\x83\x01\x12\x15a\x04\xB2W\x81` a\x04\xAF\x93Q\x91\x01a\x04^V[\x90V[a\x04\x13V[\x90` \x82\x82\x03\x12a\x04\xE7W_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xE2Wa\x04\xDF\x92\x01a\x04\x94V[\x90V[a\x04\x0FV[a\0LV[\x90V[a\x04\xF8\x90a\x04\xECV[\x90RV[\x91\x90a\x05\x0F\x90_` \x85\x01\x94\x01\x90a\x04\xEFV[V[a\x05\x19a\0BV[=_\x82>=\x90\xFD[\x90a\x053a\x05.\x83a\x040V[a\x04\x1BV[\x91\x82RV[_\x7FMainnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05i`\ra\x05!V[\x90a\x05v` \x83\x01a\x058V[V[a\x05\x80a\x05_V[\x90V[_\x7FTestnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xB4`\ra\x05!V[\x90a\x05\xC1` \x83\x01a\x05\x83V[V[a\x05\xCBa\x05\xAAV[\x90V[``\x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUsing CREATE2 with same salt wil_\x82\x01R\x7Fl produce consistent addresses w` \x82\x01R\x7Fhen deployed from same deployer `@\x82\x01R\x01RV[a\x06q`ga\x05!V[\x90a\x06~` \x83\x01a\x05\xCEV[V[a\x06\x88a\x06gV[\x90V[`@\x7Fistent addresses\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FDeploy on each chain with same e_\x82\x01R\x7Fnvironment variables to get cons` \x82\x01R\x01RV[a\x07\x08`Pa\x05!V[\x90a\x07\x15` \x83\x01a\x06\x8BV[V[a\x07\x1Fa\x06\xFEV[\x90V[a\x08.s\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11_s33333333333333333333a\x07\xE3sUUUUUUUUUUUUUUUUUUUU\x91a\x07\x9D\x85a\x07\x8Ea\x07z`\x01a\x01@V[a\x07\x82a\0BV[\x94\x85\x93` \x85\x01a\x02\x03V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\x07\xAFa\x07\xA9\x82a\x02\x85V[\x91a\x02\x7FV[ \x93a\x07\xD4a\x07\xC0b\xAA6\xA7a\x02\x8CV[a\x07\xC8a\0BV[\x94\x85\x93` \x85\x01a\x02\xE8V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\x07\xF5a\x07\xEF\x82a\x02\x85V[\x91a\x02\x7FV[ \x91a\x08\x07a\x08\x02a\x03\xEAV[a\x03\xFDV[a\x08#c\xB1\x1A\x19\xE8a\x08\x17a\0BV[\x96\x87\x94\x85\x93\x84\x93a\x04\tV[\x83R`\x04\x83\x01a\x04\xFCV[\x03\x91Z\xFA\x90\x81\x15a\t\x1CWa\x08W_\x92a\x08\x8E\x94\x84\x91a\x08\xFAW[Pa\x08Ra\x05xV[a\t\x8AV[a\x08ga\x08ba\x03\xEAV[a\x03\xFDV[a\x08\x83c\xB1\x1A\x19\xE8a\x08wa\0BV[\x95\x86\x94\x85\x93\x84\x93a\x04\tV[\x83R`\x04\x83\x01a\x04\xFCV[\x03\x91Z\xFA\x80\x15a\x08\xF5Wa\x08\xB1\x91_\x91a\x08\xD3W[Pa\x08\xACa\x05\xC3V[a\t\x8AV[a\x08\xC1a\x08\xBCa\x06\x80V[a\t\xE4V[a\x08\xD1a\x08\xCCa\x07\x17V[a\t\xE4V[V[a\x08\xEF\x91P=\x80_\x83>a\x08\xE7\x81\x83a\x02VV[\x81\x01\x90a\x04\xB7V[_a\x08\xA3V[a\x05\x11V[a\t\x16\x91P=\x80\x86\x83>a\t\x0E\x81\x83a\x02VV[\x81\x01\x90a\x04\xB7V[_a\x08IV[a\x05\x11V[Q\x90V[` \x91\x81R\x01\x90V[a\tMa\tV` \x93a\t[\x93a\tD\x81a\t!V[\x93\x84\x80\x93a\t%V[\x95\x86\x91\x01a\x04SV[a\x028V[\x01\x90V[\x90\x91a\tya\t\x87\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\t.V[\x91` \x81\x84\x03\x91\x01Ra\t.V[\x90V[\x90a\t\xC5a\t\xCA\x92a\t\xB6a\t\x9Da\0BV[\x93\x84\x92`\x04` \x85\x01cK\\Bw`\xE0\x1B\x81R\x01a\t_V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n%V[V[a\t\xE1\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\t.V[\x90V[a\n\x0Fa\n\x1Ea\n#\x92a\t\xF6a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\t\xCCV[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n%V[V[a\n8\x90a\n3`\x01a\ndV[a\n\x84V[V[jconsole.log\x90V[_\x80\x91a\nTa\n:V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\nla\n`V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\npWa\n\x94\x90a\nIV[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610722565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b90565b90565b90565b61015461014f61015992610137565b61013d565b61013a565b90565b905090565b5f7f53594e445f43524f5353434841494e0000000000000000000000000000000000910152565b610194600f809261015c565b61019d81610161565b0190565b60018060a01b031690565b6101b5906101a1565b90565b60601b90565b6101c7906101b8565b90565b6101d3906101be565b90565b6101e26101e7916101ac565b6101ca565b9052565b90565b6101fa6101ff9161013a565b6101eb565b9052565b6020939261022c60146102349461022461021d8396610188565b80926101d6565b0180926101d6565b0180926101ee565b0190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061026090610238565b810190811067ffffffffffffffff82111761027a57604052565b610242565b60200190565b5190565b90565b6102a061029b6102a592610289565b61013d565b61013a565b90565b5f7f544553544e45545f53594e445f43524f5353434841494e000000000000000000910152565b6102db6017809261015c565b6102e4816102a8565b0190565b6020939261031160146103199461030961030283966102cf565b80926101d6565b0180926101d6565b0180926101ee565b0190565b5f1c90565b61033661033161033b9261013a565b61013d565b61013a565b90565b61034a61034f9161031d565b610322565b90565b61036661036161036b9261013a565b61013d565b6101a1565b90565b61038261037d610387926101a1565b61013d565b6101a1565b90565b6103939061036e565b90565b6103cf6103ca6103c57f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61033e565b610352565b61038a565b90565b6103db9061036e565b90565b6103e7906103d2565b90565b6103fa6103f5610396565b6103de565b90565b6104069061038a565b90565b60e01b90565b5f80fd5b5f80fd5b5f80fd5b9061042e610427610042565b9283610256565b565b67ffffffffffffffff811161044e5761044a602091610238565b0190565b610242565b90825f9392825e0152565b9092919261047361046e82610430565b61041b565b9381855260208501908284011161048f5761048d92610453565b565b610417565b9080601f830112156104b2578160206104af9351910161045e565b90565b610413565b906020828203126104e7575f82015167ffffffffffffffff81116104e2576104df9201610494565b90565b61040f565b61004c565b90565b6104f8906104ec565b9052565b919061050f905f602085019401906104ef565b565b610519610042565b3d5f823e3d90fd5b9061053361052e83610430565b61041b565b918252565b5f7f4d61696e6e65742053616c743a00000000000000000000000000000000000000910152565b610569600d610521565b9061057660208301610538565b565b61058061055f565b90565b5f7f546573746e65742053616c743a00000000000000000000000000000000000000910152565b6105b4600d610521565b906105c160208301610583565b565b6105cb6105aa565b90565b60607f6164647265737300000000000000000000000000000000000000000000000000917f5573696e67204352454154453220776974682073616d652073616c742077696c5f8201527f6c2070726f6475636520636f6e73697374656e7420616464726573736573207760208201527f68656e206465706c6f7965642066726f6d2073616d65206465706c6f7965722060408201520152565b6106716067610521565b9061067e602083016105ce565b565b610688610667565b90565b60407f697374656e742061646472657373657300000000000000000000000000000000917f4465706c6f79206f6e206561636820636861696e20776974682073616d6520655f8201527f6e7669726f6e6d656e74207661726961626c657320746f2067657420636f6e7360208201520152565b6107086050610521565b906107156020830161068b565b565b61071f6106fe565b90565b61082e7311111111111111111111111111111111111111115f7333333333333333333333333333333333333333336107e37355555555555555555555555555555555555555559161079d8561078e61077a6001610140565b610782610042565b94859360208501610203565b60208201810382520382610256565b6107af6107a982610285565b9161027f565b20936107d46107c062aa36a761028c565b6107c8610042565b948593602085016102e8565b60208201810382520382610256565b6107f56107ef82610285565b9161027f565b20916108076108026103ea565b6103fd565b61082363b11a19e8610817610042565b96879485938493610409565b8352600483016104fc565b03915afa90811561091c576108575f9261088e9484916108fa575b50610852610578565b61098a565b6108676108626103ea565b6103fd565b61088363b11a19e8610877610042565b95869485938493610409565b8352600483016104fc565b03915afa80156108f5576108b1915f916108d3575b506108ac6105c3565b61098a565b6108c16108bc610680565b6109e4565b6108d16108cc610717565b6109e4565b565b6108ef91503d805f833e6108e78183610256565b8101906104b7565b5f6108a3565b610511565b61091691503d8086833e61090e8183610256565b8101906104b7565b5f610849565b610511565b5190565b60209181520190565b61094d61095660209361095b9361094481610921565b93848093610925565b95869101610453565b610238565b0190565b90916109796109879360408401908482035f86015261092e565b91602081840391015261092e565b90565b906109c56109ca926109b661099d610042565b938492600460208501634b5c427760e01b81520161095f565b60208201810382520382610256565b610a25565b565b6109e19160208201915f81840391015261092e565b90565b610a0f610a1e610a23926109f6610042565b92839160046020840163104c13eb60e21b8152016109cc565b60208201810382520382610256565b610a25565b565b610a3890610a336001610a64565b610a84565b565b6a636f6e736f6c652e6c6f6790565b5f8091610a54610a3a565b602082519201905afa50565b5f90565b610a6c610a60565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610a7057610a9490610a49565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x07\"V[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[\x90V[\x90V[\x90V[a\x01Ta\x01Oa\x01Y\x92a\x017V[a\x01=V[a\x01:V[\x90V[\x90P\x90V[_\x7FSYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\x94`\x0F\x80\x92a\x01\\V[a\x01\x9D\x81a\x01aV[\x01\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xB5\x90a\x01\xA1V[\x90V[``\x1B\x90V[a\x01\xC7\x90a\x01\xB8V[\x90V[a\x01\xD3\x90a\x01\xBEV[\x90V[a\x01\xE2a\x01\xE7\x91a\x01\xACV[a\x01\xCAV[\x90RV[\x90V[a\x01\xFAa\x01\xFF\x91a\x01:V[a\x01\xEBV[\x90RV[` \x93\x92a\x02,`\x14a\x024\x94a\x02$a\x02\x1D\x83\x96a\x01\x88V[\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xEEV[\x01\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02`\x90a\x028V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02zW`@RV[a\x02BV[` \x01\x90V[Q\x90V[\x90V[a\x02\xA0a\x02\x9Ba\x02\xA5\x92a\x02\x89V[a\x01=V[a\x01:V[\x90V[_\x7FTESTNET_SYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xDB`\x17\x80\x92a\x01\\V[a\x02\xE4\x81a\x02\xA8V[\x01\x90V[` \x93\x92a\x03\x11`\x14a\x03\x19\x94a\x03\ta\x03\x02\x83\x96a\x02\xCFV[\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xD6V[\x01\x80\x92a\x01\xEEV[\x01\x90V[_\x1C\x90V[a\x036a\x031a\x03;\x92a\x01:V[a\x01=V[a\x01:V[\x90V[a\x03Ja\x03O\x91a\x03\x1DV[a\x03\"V[\x90V[a\x03fa\x03aa\x03k\x92a\x01:V[a\x01=V[a\x01\xA1V[\x90V[a\x03\x82a\x03}a\x03\x87\x92a\x01\xA1V[a\x01=V[a\x01\xA1V[\x90V[a\x03\x93\x90a\x03nV[\x90V[a\x03\xCFa\x03\xCAa\x03\xC5\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x03>V[a\x03RV[a\x03\x8AV[\x90V[a\x03\xDB\x90a\x03nV[\x90V[a\x03\xE7\x90a\x03\xD2V[\x90V[a\x03\xFAa\x03\xF5a\x03\x96V[a\x03\xDEV[\x90V[a\x04\x06\x90a\x03\x8AV[\x90V[`\xE0\x1B\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90a\x04.a\x04'a\0BV[\x92\x83a\x02VV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04NWa\x04J` \x91a\x028V[\x01\x90V[a\x02BV[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x04sa\x04n\x82a\x040V[a\x04\x1BV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x04\x8FWa\x04\x8D\x92a\x04SV[V[a\x04\x17V[\x90\x80`\x1F\x83\x01\x12\x15a\x04\xB2W\x81` a\x04\xAF\x93Q\x91\x01a\x04^V[\x90V[a\x04\x13V[\x90` \x82\x82\x03\x12a\x04\xE7W_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xE2Wa\x04\xDF\x92\x01a\x04\x94V[\x90V[a\x04\x0FV[a\0LV[\x90V[a\x04\xF8\x90a\x04\xECV[\x90RV[\x91\x90a\x05\x0F\x90_` \x85\x01\x94\x01\x90a\x04\xEFV[V[a\x05\x19a\0BV[=_\x82>=\x90\xFD[\x90a\x053a\x05.\x83a\x040V[a\x04\x1BV[\x91\x82RV[_\x7FMainnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05i`\ra\x05!V[\x90a\x05v` \x83\x01a\x058V[V[a\x05\x80a\x05_V[\x90V[_\x7FTestnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xB4`\ra\x05!V[\x90a\x05\xC1` \x83\x01a\x05\x83V[V[a\x05\xCBa\x05\xAAV[\x90V[``\x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUsing CREATE2 with same salt wil_\x82\x01R\x7Fl produce consistent addresses w` \x82\x01R\x7Fhen deployed from same deployer `@\x82\x01R\x01RV[a\x06q`ga\x05!V[\x90a\x06~` \x83\x01a\x05\xCEV[V[a\x06\x88a\x06gV[\x90V[`@\x7Fistent addresses\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FDeploy on each chain with same e_\x82\x01R\x7Fnvironment variables to get cons` \x82\x01R\x01RV[a\x07\x08`Pa\x05!V[\x90a\x07\x15` \x83\x01a\x06\x8BV[V[a\x07\x1Fa\x06\xFEV[\x90V[a\x08.s\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11_s33333333333333333333a\x07\xE3sUUUUUUUUUUUUUUUUUUUU\x91a\x07\x9D\x85a\x07\x8Ea\x07z`\x01a\x01@V[a\x07\x82a\0BV[\x94\x85\x93` \x85\x01a\x02\x03V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\x07\xAFa\x07\xA9\x82a\x02\x85V[\x91a\x02\x7FV[ \x93a\x07\xD4a\x07\xC0b\xAA6\xA7a\x02\x8CV[a\x07\xC8a\0BV[\x94\x85\x93` \x85\x01a\x02\xE8V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\x07\xF5a\x07\xEF\x82a\x02\x85V[\x91a\x02\x7FV[ \x91a\x08\x07a\x08\x02a\x03\xEAV[a\x03\xFDV[a\x08#c\xB1\x1A\x19\xE8a\x08\x17a\0BV[\x96\x87\x94\x85\x93\x84\x93a\x04\tV[\x83R`\x04\x83\x01a\x04\xFCV[\x03\x91Z\xFA\x90\x81\x15a\t\x1CWa\x08W_\x92a\x08\x8E\x94\x84\x91a\x08\xFAW[Pa\x08Ra\x05xV[a\t\x8AV[a\x08ga\x08ba\x03\xEAV[a\x03\xFDV[a\x08\x83c\xB1\x1A\x19\xE8a\x08wa\0BV[\x95\x86\x94\x85\x93\x84\x93a\x04\tV[\x83R`\x04\x83\x01a\x04\xFCV[\x03\x91Z\xFA\x80\x15a\x08\xF5Wa\x08\xB1\x91_\x91a\x08\xD3W[Pa\x08\xACa\x05\xC3V[a\t\x8AV[a\x08\xC1a\x08\xBCa\x06\x80V[a\t\xE4V[a\x08\xD1a\x08\xCCa\x07\x17V[a\t\xE4V[V[a\x08\xEF\x91P=\x80_\x83>a\x08\xE7\x81\x83a\x02VV[\x81\x01\x90a\x04\xB7V[_a\x08\xA3V[a\x05\x11V[a\t\x16\x91P=\x80\x86\x83>a\t\x0E\x81\x83a\x02VV[\x81\x01\x90a\x04\xB7V[_a\x08IV[a\x05\x11V[Q\x90V[` \x91\x81R\x01\x90V[a\tMa\tV` \x93a\t[\x93a\tD\x81a\t!V[\x93\x84\x80\x93a\t%V[\x95\x86\x91\x01a\x04SV[a\x028V[\x01\x90V[\x90\x91a\tya\t\x87\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\t.V[\x91` \x81\x84\x03\x91\x01Ra\t.V[\x90V[\x90a\t\xC5a\t\xCA\x92a\t\xB6a\t\x9Da\0BV[\x93\x84\x92`\x04` \x85\x01cK\\Bw`\xE0\x1B\x81R\x01a\t_V[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n%V[V[a\t\xE1\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\t.V[\x90V[a\n\x0Fa\n\x1Ea\n#\x92a\t\xF6a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\t\xCCV[` \x82\x01\x81\x03\x82R\x03\x82a\x02VV[a\n%V[V[a\n8\x90a\n3`\x01a\ndV[a\n\x84V[V[jconsole.log\x90V[_\x80\x91a\nTa\n:V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\nla\n`V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\npWa\n\x94\x90a\nIV[V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external pure;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`VerifyCrosschainAddressConsistency`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum VerifyCrosschainAddressConsistencyCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl VerifyCrosschainAddressConsistencyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VerifyCrosschainAddressConsistencyCalls {
        const NAME: &'static str = "VerifyCrosschainAddressConsistencyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<VerifyCrosschainAddressConsistencyCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        VerifyCrosschainAddressConsistencyCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(VerifyCrosschainAddressConsistencyCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        VerifyCrosschainAddressConsistencyCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(VerifyCrosschainAddressConsistencyCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<VerifyCrosschainAddressConsistencyCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        VerifyCrosschainAddressConsistencyCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VerifyCrosschainAddressConsistencyCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        VerifyCrosschainAddressConsistencyCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VerifyCrosschainAddressConsistencyCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`VerifyCrosschainAddressConsistency`](self) contract instance.

See the [wrapper's documentation](`VerifyCrosschainAddressConsistencyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VerifyCrosschainAddressConsistencyInstance<P, N> {
        VerifyCrosschainAddressConsistencyInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VerifyCrosschainAddressConsistencyInstance<P, N>>,
    > {
        VerifyCrosschainAddressConsistencyInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        VerifyCrosschainAddressConsistencyInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`VerifyCrosschainAddressConsistency`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`VerifyCrosschainAddressConsistency`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VerifyCrosschainAddressConsistencyInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for VerifyCrosschainAddressConsistencyInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VerifyCrosschainAddressConsistencyInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > VerifyCrosschainAddressConsistencyInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`VerifyCrosschainAddressConsistency`](self) contract instance.

See the [wrapper's documentation](`VerifyCrosschainAddressConsistencyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VerifyCrosschainAddressConsistencyInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> VerifyCrosschainAddressConsistencyInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> VerifyCrosschainAddressConsistencyInstance<P, N> {
            VerifyCrosschainAddressConsistencyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > VerifyCrosschainAddressConsistencyInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > VerifyCrosschainAddressConsistencyInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
