/**

Generated by the following Solidity interface...
```solidity
interface MockBridge {
    function sequencerInboxAccs(uint256 index) external view returns (bytes32);
    function sequencerMessageCount() external view returns (uint256);
    function setSequencerInboxAcc(uint256 index, bytes32 acc) external;
    function setSequencerMessageCount(uint256 count) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "sequencerInboxAccs",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sequencerMessageCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setSequencerInboxAcc",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "acc",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSequencerMessageCount",
    "inputs": [
      {
        "name": "count",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockBridge {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b61038961002b823961038990f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61022f565b61001d5f3561005b565b806284120c1461005657806316bf557914610051578063468eff501461004c5763d202deaa0361000e576101fc565b6101c8565b61013e565b6100a3565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261007957565b61006b565b90565b61008a9061007e565b9052565b91906100a1905f60208501940190610081565b565b346100d3576100b336600461006f565b6100cf6100be610260565b6100c6610061565b9182918261008e565b0390f35b610067565b6100e18161007e565b036100e857565b5f80fd5b905035906100f9826100d8565b565b9060208282031261011457610111915f016100ec565b90565b61006b565b90565b61012590610119565b9052565b919061013c905f6020850194019061011c565b565b3461016e5761016a6101596101543660046100fb565b6102d2565b610161610061565b91829182610129565b0390f35b610067565b61017c81610119565b0361018357565b5f80fd5b9050359061019482610173565b565b91906040838203126101be57806101b26101bb925f86016100ec565b93602001610187565b90565b61006b565b5f0190565b346101f7576101e16101db366004610196565b90610344565b6101e9610061565b806101f3816101c3565b0390f35b610067565b3461022a5761021461020f3660046100fb565b61037d565b61021c610061565b80610226816101c3565b0390f35b610067565b5f80fd5b5f90565b5f1c90565b90565b61024b61025091610237565b61023c565b90565b61025d905461023f565b90565b610268610233565b506102725f610253565b90565b5f90565b90565b61029061028b6102959261007e565b610279565b61007e565b90565b906102a29061027c565b5f5260205260405f2090565b90565b6102bd6102c291610237565b6102ae565b90565b6102cf90546102b1565b90565b6102e96102ee916102e1610275565b506001610298565b6102c5565b90565b5f1b90565b906103025f19916102f1565b9181191691161790565b61031590610119565b90565b61032190610237565b90565b906103396103346103409261030c565b610318565b82546102f6565b9055565b61035361035892916001610298565b610324565b565b90565b9061037261036d6103799261027c565b61035a565b82546102f6565b9055565b610387905f61035d565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x03\x89a\0+\x829a\x03\x89\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02/V[a\0\x1D_5a\0[V[\x80b\x84\x12\x0C\x14a\0VW\x80c\x16\xBFUy\x14a\0QW\x80cF\x8E\xFFP\x14a\0LWc\xD2\x02\xDE\xAA\x03a\0\x0EWa\x01\xFCV[a\x01\xC8V[a\x01>V[a\0\xA3V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0yWV[a\0kV[\x90V[a\0\x8A\x90a\0~V[\x90RV[\x91\x90a\0\xA1\x90_` \x85\x01\x94\x01\x90a\0\x81V[V[4a\0\xD3Wa\0\xB36`\x04a\0oV[a\0\xCFa\0\xBEa\x02`V[a\0\xC6a\0aV[\x91\x82\x91\x82a\0\x8EV[\x03\x90\xF3[a\0gV[a\0\xE1\x81a\0~V[\x03a\0\xE8WV[_\x80\xFD[\x90P5\x90a\0\xF9\x82a\0\xD8V[V[\x90` \x82\x82\x03\x12a\x01\x14Wa\x01\x11\x91_\x01a\0\xECV[\x90V[a\0kV[\x90V[a\x01%\x90a\x01\x19V[\x90RV[\x91\x90a\x01<\x90_` \x85\x01\x94\x01\x90a\x01\x1CV[V[4a\x01nWa\x01ja\x01Ya\x01T6`\x04a\0\xFBV[a\x02\xD2V[a\x01aa\0aV[\x91\x82\x91\x82a\x01)V[\x03\x90\xF3[a\0gV[a\x01|\x81a\x01\x19V[\x03a\x01\x83WV[_\x80\xFD[\x90P5\x90a\x01\x94\x82a\x01sV[V[\x91\x90`@\x83\x82\x03\x12a\x01\xBEW\x80a\x01\xB2a\x01\xBB\x92_\x86\x01a\0\xECV[\x93` \x01a\x01\x87V[\x90V[a\0kV[_\x01\x90V[4a\x01\xF7Wa\x01\xE1a\x01\xDB6`\x04a\x01\x96V[\x90a\x03DV[a\x01\xE9a\0aV[\x80a\x01\xF3\x81a\x01\xC3V[\x03\x90\xF3[a\0gV[4a\x02*Wa\x02\x14a\x02\x0F6`\x04a\0\xFBV[a\x03}V[a\x02\x1Ca\0aV[\x80a\x02&\x81a\x01\xC3V[\x03\x90\xF3[a\0gV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x02Ka\x02P\x91a\x027V[a\x02<V[\x90V[a\x02]\x90Ta\x02?V[\x90V[a\x02ha\x023V[Pa\x02r_a\x02SV[\x90V[_\x90V[\x90V[a\x02\x90a\x02\x8Ba\x02\x95\x92a\0~V[a\x02yV[a\0~V[\x90V[\x90a\x02\xA2\x90a\x02|V[_R` R`@_ \x90V[\x90V[a\x02\xBDa\x02\xC2\x91a\x027V[a\x02\xAEV[\x90V[a\x02\xCF\x90Ta\x02\xB1V[\x90V[a\x02\xE9a\x02\xEE\x91a\x02\xE1a\x02uV[P`\x01a\x02\x98V[a\x02\xC5V[\x90V[_\x1B\x90V[\x90a\x03\x02_\x19\x91a\x02\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x15\x90a\x01\x19V[\x90V[a\x03!\x90a\x027V[\x90V[\x90a\x039a\x034a\x03@\x92a\x03\x0CV[a\x03\x18V[\x82Ta\x02\xF6V[\x90UV[a\x03Sa\x03X\x92\x91`\x01a\x02\x98V[a\x03$V[V[\x90V[\x90a\x03ra\x03ma\x03y\x92a\x02|V[a\x03ZV[\x82Ta\x02\xF6V[\x90UV[a\x03\x87\x90_a\x03]V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61022f565b61001d5f3561005b565b806284120c1461005657806316bf557914610051578063468eff501461004c5763d202deaa0361000e576101fc565b6101c8565b61013e565b6100a3565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261007957565b61006b565b90565b61008a9061007e565b9052565b91906100a1905f60208501940190610081565b565b346100d3576100b336600461006f565b6100cf6100be610260565b6100c6610061565b9182918261008e565b0390f35b610067565b6100e18161007e565b036100e857565b5f80fd5b905035906100f9826100d8565b565b9060208282031261011457610111915f016100ec565b90565b61006b565b90565b61012590610119565b9052565b919061013c905f6020850194019061011c565b565b3461016e5761016a6101596101543660046100fb565b6102d2565b610161610061565b91829182610129565b0390f35b610067565b61017c81610119565b0361018357565b5f80fd5b9050359061019482610173565b565b91906040838203126101be57806101b26101bb925f86016100ec565b93602001610187565b90565b61006b565b5f0190565b346101f7576101e16101db366004610196565b90610344565b6101e9610061565b806101f3816101c3565b0390f35b610067565b3461022a5761021461020f3660046100fb565b61037d565b61021c610061565b80610226816101c3565b0390f35b610067565b5f80fd5b5f90565b5f1c90565b90565b61024b61025091610237565b61023c565b90565b61025d905461023f565b90565b610268610233565b506102725f610253565b90565b5f90565b90565b61029061028b6102959261007e565b610279565b61007e565b90565b906102a29061027c565b5f5260205260405f2090565b90565b6102bd6102c291610237565b6102ae565b90565b6102cf90546102b1565b90565b6102e96102ee916102e1610275565b506001610298565b6102c5565b90565b5f1b90565b906103025f19916102f1565b9181191691161790565b61031590610119565b90565b61032190610237565b90565b906103396103346103409261030c565b610318565b82546102f6565b9055565b61035361035892916001610298565b610324565b565b90565b9061037261036d6103799261027c565b61035a565b82546102f6565b9055565b610387905f61035d565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02/V[a\0\x1D_5a\0[V[\x80b\x84\x12\x0C\x14a\0VW\x80c\x16\xBFUy\x14a\0QW\x80cF\x8E\xFFP\x14a\0LWc\xD2\x02\xDE\xAA\x03a\0\x0EWa\x01\xFCV[a\x01\xC8V[a\x01>V[a\0\xA3V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0yWV[a\0kV[\x90V[a\0\x8A\x90a\0~V[\x90RV[\x91\x90a\0\xA1\x90_` \x85\x01\x94\x01\x90a\0\x81V[V[4a\0\xD3Wa\0\xB36`\x04a\0oV[a\0\xCFa\0\xBEa\x02`V[a\0\xC6a\0aV[\x91\x82\x91\x82a\0\x8EV[\x03\x90\xF3[a\0gV[a\0\xE1\x81a\0~V[\x03a\0\xE8WV[_\x80\xFD[\x90P5\x90a\0\xF9\x82a\0\xD8V[V[\x90` \x82\x82\x03\x12a\x01\x14Wa\x01\x11\x91_\x01a\0\xECV[\x90V[a\0kV[\x90V[a\x01%\x90a\x01\x19V[\x90RV[\x91\x90a\x01<\x90_` \x85\x01\x94\x01\x90a\x01\x1CV[V[4a\x01nWa\x01ja\x01Ya\x01T6`\x04a\0\xFBV[a\x02\xD2V[a\x01aa\0aV[\x91\x82\x91\x82a\x01)V[\x03\x90\xF3[a\0gV[a\x01|\x81a\x01\x19V[\x03a\x01\x83WV[_\x80\xFD[\x90P5\x90a\x01\x94\x82a\x01sV[V[\x91\x90`@\x83\x82\x03\x12a\x01\xBEW\x80a\x01\xB2a\x01\xBB\x92_\x86\x01a\0\xECV[\x93` \x01a\x01\x87V[\x90V[a\0kV[_\x01\x90V[4a\x01\xF7Wa\x01\xE1a\x01\xDB6`\x04a\x01\x96V[\x90a\x03DV[a\x01\xE9a\0aV[\x80a\x01\xF3\x81a\x01\xC3V[\x03\x90\xF3[a\0gV[4a\x02*Wa\x02\x14a\x02\x0F6`\x04a\0\xFBV[a\x03}V[a\x02\x1Ca\0aV[\x80a\x02&\x81a\x01\xC3V[\x03\x90\xF3[a\0gV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x02Ka\x02P\x91a\x027V[a\x02<V[\x90V[a\x02]\x90Ta\x02?V[\x90V[a\x02ha\x023V[Pa\x02r_a\x02SV[\x90V[_\x90V[\x90V[a\x02\x90a\x02\x8Ba\x02\x95\x92a\0~V[a\x02yV[a\0~V[\x90V[\x90a\x02\xA2\x90a\x02|V[_R` R`@_ \x90V[\x90V[a\x02\xBDa\x02\xC2\x91a\x027V[a\x02\xAEV[\x90V[a\x02\xCF\x90Ta\x02\xB1V[\x90V[a\x02\xE9a\x02\xEE\x91a\x02\xE1a\x02uV[P`\x01a\x02\x98V[a\x02\xC5V[\x90V[_\x1B\x90V[\x90a\x03\x02_\x19\x91a\x02\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x15\x90a\x01\x19V[\x90V[a\x03!\x90a\x027V[\x90V[\x90a\x039a\x034a\x03@\x92a\x03\x0CV[a\x03\x18V[\x82Ta\x02\xF6V[\x90UV[a\x03Sa\x03X\x92\x91`\x01a\x02\x98V[a\x03$V[V[\x90V[\x90a\x03ra\x03ma\x03y\x92a\x02|V[a\x03ZV[\x82Ta\x02\xF6V[\x90UV[a\x03\x87\x90_a\x03]V[V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `sequencerInboxAccs(uint256)` and selector `0x16bf5579`.
```solidity
function sequencerInboxAccs(uint256 index) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerInboxAccsCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`sequencerInboxAccs(uint256)`](sequencerInboxAccsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerInboxAccsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerInboxAccsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerInboxAccsCall) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerInboxAccsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerInboxAccsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerInboxAccsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerInboxAccsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerInboxAccsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerInboxAccs(uint256)";
            const SELECTOR: [u8; 4] = [22u8, 191u8, 85u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: sequencerInboxAccsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: sequencerInboxAccsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `sequencerMessageCount()` and selector `0x0084120c`.
```solidity
function sequencerMessageCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerMessageCountCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`sequencerMessageCount()`](sequencerMessageCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerMessageCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerMessageCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerMessageCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerMessageCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerMessageCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerMessageCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerMessageCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerMessageCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerMessageCount()";
            const SELECTOR: [u8; 4] = [0u8, 132u8, 18u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: sequencerMessageCountReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: sequencerMessageCountReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setSequencerInboxAcc(uint256,bytes32)` and selector `0x468eff50`.
```solidity
function setSequencerInboxAcc(uint256 index, bytes32 acc) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerInboxAccCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub acc: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setSequencerInboxAcc(uint256,bytes32)`](setSequencerInboxAccCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerInboxAccReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerInboxAccCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerInboxAccCall) -> Self {
                    (value.index, value.acc)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerInboxAccCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        index: tuple.0,
                        acc: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerInboxAccReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerInboxAccReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerInboxAccReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setSequencerInboxAccReturn {
            fn _tokenize(
                &self,
            ) -> <setSequencerInboxAccCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSequencerInboxAccCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSequencerInboxAccReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSequencerInboxAcc(uint256,bytes32)";
            const SELECTOR: [u8; 4] = [70u8, 142u8, 255u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.acc),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setSequencerInboxAccReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setSequencerMessageCount(uint256)` and selector `0xd202deaa`.
```solidity
function setSequencerMessageCount(uint256 count) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerMessageCountCall {
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setSequencerMessageCount(uint256)`](setSequencerMessageCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerMessageCountReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerMessageCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerMessageCountCall) -> Self {
                    (value.count,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerMessageCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { count: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerMessageCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerMessageCountReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerMessageCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setSequencerMessageCountReturn {
            fn _tokenize(
                &self,
            ) -> <setSequencerMessageCountCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSequencerMessageCountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSequencerMessageCountReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSequencerMessageCount(uint256)";
            const SELECTOR: [u8; 4] = [210u8, 2u8, 222u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.count),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setSequencerMessageCountReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockBridge`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MockBridgeCalls {
        #[allow(missing_docs)]
        sequencerInboxAccs(sequencerInboxAccsCall),
        #[allow(missing_docs)]
        sequencerMessageCount(sequencerMessageCountCall),
        #[allow(missing_docs)]
        setSequencerInboxAcc(setSequencerInboxAccCall),
        #[allow(missing_docs)]
        setSequencerMessageCount(setSequencerMessageCountCall),
    }
    #[automatically_derived]
    impl MockBridgeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 132u8, 18u8, 12u8],
            [22u8, 191u8, 85u8, 121u8],
            [70u8, 142u8, 255u8, 80u8],
            [210u8, 2u8, 222u8, 170u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockBridgeCalls {
        const NAME: &'static str = "MockBridgeCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::sequencerInboxAccs(_) => {
                    <sequencerInboxAccsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sequencerMessageCount(_) => {
                    <sequencerMessageCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSequencerInboxAcc(_) => {
                    <setSequencerInboxAccCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSequencerMessageCount(_) => {
                    <setSequencerMessageCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockBridgeCalls>] = &[
                {
                    fn sequencerMessageCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockBridgeCalls::sequencerMessageCount)
                    }
                    sequencerMessageCount
                },
                {
                    fn sequencerInboxAccs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockBridgeCalls::sequencerInboxAccs)
                    }
                    sequencerInboxAccs
                },
                {
                    fn setSequencerInboxAcc(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <setSequencerInboxAccCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockBridgeCalls::setSequencerInboxAcc)
                    }
                    setSequencerInboxAcc
                },
                {
                    fn setSequencerMessageCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <setSequencerMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockBridgeCalls::setSequencerMessageCount)
                    }
                    setSequencerMessageCount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockBridgeCalls>] = &[
                {
                    fn sequencerMessageCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockBridgeCalls::sequencerMessageCount)
                    }
                    sequencerMessageCount
                },
                {
                    fn sequencerInboxAccs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockBridgeCalls::sequencerInboxAccs)
                    }
                    sequencerInboxAccs
                },
                {
                    fn setSequencerInboxAcc(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <setSequencerInboxAccCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockBridgeCalls::setSequencerInboxAcc)
                    }
                    setSequencerInboxAcc
                },
                {
                    fn setSequencerMessageCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockBridgeCalls> {
                        <setSequencerMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockBridgeCalls::setSequencerMessageCount)
                    }
                    setSequencerMessageCount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::sequencerInboxAccs(inner) => {
                    <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sequencerMessageCount(inner) => {
                    <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSequencerInboxAcc(inner) => {
                    <setSequencerInboxAccCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSequencerMessageCount(inner) => {
                    <setSequencerMessageCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::sequencerInboxAccs(inner) => {
                    <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sequencerMessageCount(inner) => {
                    <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSequencerInboxAcc(inner) => {
                    <setSequencerInboxAccCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSequencerMessageCount(inner) => {
                    <setSequencerMessageCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockBridge`](self) contract instance.

See the [wrapper's documentation](`MockBridgeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockBridgeInstance<P, N> {
        MockBridgeInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockBridgeInstance<P, N>>,
    > {
        MockBridgeInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        MockBridgeInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`MockBridge`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockBridge`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockBridgeInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for MockBridgeInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockBridgeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockBridgeInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`MockBridge`](self) contract instance.

See the [wrapper's documentation](`MockBridgeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockBridgeInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> MockBridgeInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockBridgeInstance<P, N> {
            MockBridgeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockBridgeInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`sequencerInboxAccs`] function.
        pub fn sequencerInboxAccs(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, sequencerInboxAccsCall, N> {
            self.call_builder(&sequencerInboxAccsCall { index })
        }
        ///Creates a new call builder for the [`sequencerMessageCount`] function.
        pub fn sequencerMessageCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, sequencerMessageCountCall, N> {
            self.call_builder(&sequencerMessageCountCall)
        }
        ///Creates a new call builder for the [`setSequencerInboxAcc`] function.
        pub fn setSequencerInboxAcc(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
            acc: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, setSequencerInboxAccCall, N> {
            self.call_builder(
                &setSequencerInboxAccCall {
                    index,
                    acc,
                },
            )
        }
        ///Creates a new call builder for the [`setSequencerMessageCount`] function.
        pub fn setSequencerMessageCount(
            &self,
            count: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setSequencerMessageCountCall, N> {
            self.call_builder(
                &setSequencerMessageCountCall {
                    count,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockBridgeInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
