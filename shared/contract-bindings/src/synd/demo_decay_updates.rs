/**

Generated by the following Solidity interface...
```solidity
interface DemoDecayUpdates {
    function IS_SCRIPT() external view returns (bool);
    function run() external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DemoDecayUpdates {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55610b63908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163c040622614610079575063f8ccbf4714610032575f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060ff600c5460101c166040519015158152f35b5f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610075577f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43414c43554c41544f525f4144445200000000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa8015610851575f906109c4575b73ffffffffffffffffffffffffffffffffffffffff9150168015610966576101ac604051610157606082610a27565b602181527f3d3d3d20456d697373696f6e732043616c63756c61746f722044656d6f203d3d60208201527f3d000000000000000000000000000000000000000000000000000000000000006040820152610a9c565b5f8061022961023d6040516101c2604082610a27565b601381527f43616c63756c61746f7220616464726573733a0000000000000000000000000060208201526040519283917f319af333000000000000000000000000000000000000000000000000000000006020840152604060248401526064830190610a77565b86604483015203601f198101835282610a27565b6020815191016a636f6e736f6c652e6c6f675afa506040517f76671808000000000000000000000000000000000000000000000000000000008152602081600481855afa8015610851575f90610932575b6102d091506040516102a1604082610a27565b600e81527f43757272656e742065706f63683a0000000000000000000000000000000000006020820152610b07565b6040517fdf0244b1000000000000000000000000000000000000000000000000000000008152602081600481855afa8015610851575f906108fe575b61034e915060405161031f604082610a27565b600e81527f546f74616c20656d69747465643a0000000000000000000000000000000000006020820152610b07565b6040517fe4b7fb73000000000000000000000000000000000000000000000000000000008152602081600481855afa8015610851575f906108ca575b6103cc915060405161039d604082610a27565b601181527f52656d61696e696e6720737570706c793a0000000000000000000000000000006020820152610b07565b6040517ffa391c64000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610851575f9161088f575b505f61048961049f829360405190610422604083610a27565b600d82527f497320636f6d706c657465643a0000000000000000000000000000000000000060208301526040519384927fc3b55635000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610a77565b901515604483015203601f198101835282610a27565b6020815191016a636f6e736f6c652e6c6f675afa506040517f43a3f8a1000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610851575f9161085c575b50602491610537602092604051610509604082610a27565b601681527f4e65787420656d697373696f6e20707265766965773a0000000000000000000085820152610b07565b604051928380927f236640b90000000000000000000000000000000000000000000000000000000082525f60048301525afa8015610851575f9061081d575b6105b790604051610588604082610a27565b601781527f43756d756c61746976652070726f6475637420505f303a0000000000000000006020820152610b07565b61061d6040516105c8606082610a27565b602481527f3d3d3d204578616d706c6520446563617920466163746f72205570646174657360208201527f203d3d3d000000000000000000000000000000000000000000000000000000006040820152610a9c565b61065d60405161062e604082610a27565b601d81527f546f207365742065706f636820313020746f203930252064656361793a0000006020820152610a9c565b6106c360405161066e606082610a27565b602681527f63616c63756c61746f722e7365744465636179466163746f722831302c20302e60208201527f39306531382900000000000000000000000000000000000000000000000000006040820152610a9c565b6107296040516106d4606082610a27565b602781527f546f207365742065706f6368732032302d323520776974682076617279696e6760208201527f2064656361793a000000000000000000000000000000000000000000000000006040820152610a9c565b6107b560405161073a608082610a27565b605181527f75696e743235365b5d206d656d6f727920646563617973203d205b302e38356560208201527f31382c20302e38306531382c20302e37356531382c20302e37306531382c203060408201527f2e36356531382c20302e36306531385d3b0000000000000000000000000000006060820152610a9c565b61081b6040516107c6606082610a27565b602781527f63616c63756c61746f722e7365744465636179466163746f72732832302c206460208201527f6563617973293b000000000000000000000000000000000000000000000000006040820152610a9c565b005b506020813d602011610849575b8161083760209383610a27565b81010312610075576105b79051610576565b3d915061082a565b6040513d5f823e3d90fd5b90506020813d602011610887575b8161087760209383610a27565b81010312610075575160246104f1565b3d915061086a565b90506020813d6020116108c2575b816108aa60209383610a27565b8101031261007557518015158103610075575f610409565b3d915061089d565b506020813d6020116108f6575b816108e460209383610a27565b81010312610075576103cc905161038a565b3d91506108d7565b506020813d60201161092a575b8161091860209383610a27565b810103126100755761034e905161030c565b3d915061090b565b506020813d60201161095e575b8161094c60209383610a27565b81010312610075576102d0905161028e565b3d915061093f565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43414c43554c41544f525f41444452206e6f74207365740000000000000000006044820152fd5b506020813d602011610a1f575b816109de60209383610a27565b81010312610075575173ffffffffffffffffffffffffffffffffffffffff811681036100755773ffffffffffffffffffffffffffffffffffffffff90610128565b3d91506109d1565b90601f601f19910116810190811067ffffffffffffffff821117610a4a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b5f610ae2610af082936040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610a77565b03601f198101835282610a27565b6020815191016a636f6e736f6c652e6c6f675afa50565b610b4f610af05f939284936040519384927fb60e72cc000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610a77565b90604483015203601f198101835282610a2756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x0Bc\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0yWPc\xF8\xCC\xBFG\x14a\x002W_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x08QW_\x90a\t\xC4W[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91P\x16\x80\x15a\tfWa\x01\xAC`@Qa\x01W``\x82a\n'V[`!\x81R\x7F=== Emissions Calculator Demo ==` \x82\x01R\x7F=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[_\x80a\x02)a\x02=`@Qa\x01\xC2`@\x82a\n'V[`\x13\x81R\x7FCalculator address:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x92\x83\x91\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R`@`$\x84\x01R`d\x83\x01\x90a\nwV[\x86`D\x83\x01R\x03`\x1F\x19\x81\x01\x83R\x82a\n'V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7Fvg\x18\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x80\x15a\x08QW_\x90a\t2W[a\x02\xD0\x91P`@Qa\x02\xA1`@\x82a\n'V[`\x0E\x81R\x7FCurrent epoch:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[`@Q\x7F\xDF\x02D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x80\x15a\x08QW_\x90a\x08\xFEW[a\x03N\x91P`@Qa\x03\x1F`@\x82a\n'V[`\x0E\x81R\x7FTotal emitted:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[`@Q\x7F\xE4\xB7\xFBs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x80\x15a\x08QW_\x90a\x08\xCAW[a\x03\xCC\x91P`@Qa\x03\x9D`@\x82a\n'V[`\x11\x81R\x7FRemaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[`@Q\x7F\xFA9\x1Cd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x08QW_\x91a\x08\x8FW[P_a\x04\x89a\x04\x9F\x82\x93`@Q\x90a\x04\"`@\x83a\n'V[`\r\x82R\x7FIs completed:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01R`@Q\x93\x84\x92\x7F\xC3\xB5V5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\nwV[\x90\x15\x15`D\x83\x01R\x03`\x1F\x19\x81\x01\x83R\x82a\n'V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7FC\xA3\xF8\xA1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x08QW_\x91a\x08\\W[P`$\x91a\x057` \x92`@Qa\x05\t`@\x82a\n'V[`\x16\x81R\x7FNext emission preview:\0\0\0\0\0\0\0\0\0\0\x85\x82\x01Ra\x0B\x07V[`@Q\x92\x83\x80\x92\x7F#f@\xB9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R_`\x04\x83\x01RZ\xFA\x80\x15a\x08QW_\x90a\x08\x1DW[a\x05\xB7\x90`@Qa\x05\x88`@\x82a\n'V[`\x17\x81R\x7FCumulative product P_0:\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[a\x06\x1D`@Qa\x05\xC8``\x82a\n'V[`$\x81R\x7F=== Example Decay Factor Updates` \x82\x01R\x7F ===\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[a\x06]`@Qa\x06.`@\x82a\n'V[`\x1D\x81R\x7FTo set epoch 10 to 90% decay:\0\0\0` \x82\x01Ra\n\x9CV[a\x06\xC3`@Qa\x06n``\x82a\n'V[`&\x81R\x7Fcalculator.setDecayFactor(10, 0.` \x82\x01R\x7F90e18)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[a\x07)`@Qa\x06\xD4``\x82a\n'V[`'\x81R\x7FTo set epochs 20-25 with varying` \x82\x01R\x7F decay:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[a\x07\xB5`@Qa\x07:`\x80\x82a\n'V[`Q\x81R\x7Fuint256[] memory decays = [0.85e` \x82\x01R\x7F18, 0.80e18, 0.75e18, 0.70e18, 0`@\x82\x01R\x7F.65e18, 0.60e18];\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x82\x01Ra\n\x9CV[a\x08\x1B`@Qa\x07\xC6``\x82a\n'V[`'\x81R\x7Fcalculator.setDecayFactors(20, d` \x82\x01R\x7Fecays);\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[\0[P` \x81=` \x11a\x08IW[\x81a\x087` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x05\xB7\x90Qa\x05vV[=\x91Pa\x08*V[`@Q=_\x82>=\x90\xFD[\x90P` \x81=` \x11a\x08\x87W[\x81a\x08w` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWQ`$a\x04\xF1V[=\x91Pa\x08jV[\x90P` \x81=` \x11a\x08\xC2W[\x81a\x08\xAA` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWQ\x80\x15\x15\x81\x03a\0uW_a\x04\tV[=\x91Pa\x08\x9DV[P` \x81=` \x11a\x08\xF6W[\x81a\x08\xE4` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x03\xCC\x90Qa\x03\x8AV[=\x91Pa\x08\xD7V[P` \x81=` \x11a\t*W[\x81a\t\x18` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x03N\x90Qa\x03\x0CV[=\x91Pa\t\x0BV[P` \x81=` \x11a\t^W[\x81a\tL` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x02\xD0\x90Qa\x02\x8EV[=\x91Pa\t?V[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P` \x81=` \x11a\n\x1FW[\x81a\t\xDE` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\0uWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90a\x01(V[=\x91Pa\t\xD1V[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\nJW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x19`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[_a\n\xE2a\n\xF0\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\nwV[\x03`\x1F\x19\x81\x01\x83R\x82a\n'V[` \x81Q\x91\x01jconsole.logZ\xFAPV[a\x0BOa\n\xF0_\x93\x92\x84\x93`@Q\x93\x84\x92\x7F\xB6\x0Er\xCC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\nwV[\x90`D\x83\x01R\x03`\x1F\x19\x81\x01\x83R\x82a\n'V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c908163c040622614610079575063f8ccbf4714610032575f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060ff600c5460101c166040519015158152f35b5f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610075577f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43414c43554c41544f525f4144445200000000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa8015610851575f906109c4575b73ffffffffffffffffffffffffffffffffffffffff9150168015610966576101ac604051610157606082610a27565b602181527f3d3d3d20456d697373696f6e732043616c63756c61746f722044656d6f203d3d60208201527f3d000000000000000000000000000000000000000000000000000000000000006040820152610a9c565b5f8061022961023d6040516101c2604082610a27565b601381527f43616c63756c61746f7220616464726573733a0000000000000000000000000060208201526040519283917f319af333000000000000000000000000000000000000000000000000000000006020840152604060248401526064830190610a77565b86604483015203601f198101835282610a27565b6020815191016a636f6e736f6c652e6c6f675afa506040517f76671808000000000000000000000000000000000000000000000000000000008152602081600481855afa8015610851575f90610932575b6102d091506040516102a1604082610a27565b600e81527f43757272656e742065706f63683a0000000000000000000000000000000000006020820152610b07565b6040517fdf0244b1000000000000000000000000000000000000000000000000000000008152602081600481855afa8015610851575f906108fe575b61034e915060405161031f604082610a27565b600e81527f546f74616c20656d69747465643a0000000000000000000000000000000000006020820152610b07565b6040517fe4b7fb73000000000000000000000000000000000000000000000000000000008152602081600481855afa8015610851575f906108ca575b6103cc915060405161039d604082610a27565b601181527f52656d61696e696e6720737570706c793a0000000000000000000000000000006020820152610b07565b6040517ffa391c64000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610851575f9161088f575b505f61048961049f829360405190610422604083610a27565b600d82527f497320636f6d706c657465643a0000000000000000000000000000000000000060208301526040519384927fc3b55635000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610a77565b901515604483015203601f198101835282610a27565b6020815191016a636f6e736f6c652e6c6f675afa506040517f43a3f8a1000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610851575f9161085c575b50602491610537602092604051610509604082610a27565b601681527f4e65787420656d697373696f6e20707265766965773a0000000000000000000085820152610b07565b604051928380927f236640b90000000000000000000000000000000000000000000000000000000082525f60048301525afa8015610851575f9061081d575b6105b790604051610588604082610a27565b601781527f43756d756c61746976652070726f6475637420505f303a0000000000000000006020820152610b07565b61061d6040516105c8606082610a27565b602481527f3d3d3d204578616d706c6520446563617920466163746f72205570646174657360208201527f203d3d3d000000000000000000000000000000000000000000000000000000006040820152610a9c565b61065d60405161062e604082610a27565b601d81527f546f207365742065706f636820313020746f203930252064656361793a0000006020820152610a9c565b6106c360405161066e606082610a27565b602681527f63616c63756c61746f722e7365744465636179466163746f722831302c20302e60208201527f39306531382900000000000000000000000000000000000000000000000000006040820152610a9c565b6107296040516106d4606082610a27565b602781527f546f207365742065706f6368732032302d323520776974682076617279696e6760208201527f2064656361793a000000000000000000000000000000000000000000000000006040820152610a9c565b6107b560405161073a608082610a27565b605181527f75696e743235365b5d206d656d6f727920646563617973203d205b302e38356560208201527f31382c20302e38306531382c20302e37356531382c20302e37306531382c203060408201527f2e36356531382c20302e36306531385d3b0000000000000000000000000000006060820152610a9c565b61081b6040516107c6606082610a27565b602781527f63616c63756c61746f722e7365744465636179466163746f72732832302c206460208201527f6563617973293b000000000000000000000000000000000000000000000000006040820152610a9c565b005b506020813d602011610849575b8161083760209383610a27565b81010312610075576105b79051610576565b3d915061082a565b6040513d5f823e3d90fd5b90506020813d602011610887575b8161087760209383610a27565b81010312610075575160246104f1565b3d915061086a565b90506020813d6020116108c2575b816108aa60209383610a27565b8101031261007557518015158103610075575f610409565b3d915061089d565b506020813d6020116108f6575b816108e460209383610a27565b81010312610075576103cc905161038a565b3d91506108d7565b506020813d60201161092a575b8161091860209383610a27565b810103126100755761034e905161030c565b3d915061090b565b506020813d60201161095e575b8161094c60209383610a27565b81010312610075576102d0905161028e565b3d915061093f565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43414c43554c41544f525f41444452206e6f74207365740000000000000000006044820152fd5b506020813d602011610a1f575b816109de60209383610a27565b81010312610075575173ffffffffffffffffffffffffffffffffffffffff811681036100755773ffffffffffffffffffffffffffffffffffffffff90610128565b3d91506109d1565b90601f601f19910116810190811067ffffffffffffffff821117610a4a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b5f610ae2610af082936040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610a77565b03601f198101835282610a27565b6020815191016a636f6e736f6c652e6c6f675afa50565b610b4f610af05f939284936040519384927fb60e72cc000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610a77565b90604483015203601f198101835282610a2756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0yWPc\xF8\xCC\xBFG\x14a\x002W_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x08QW_\x90a\t\xC4W[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91P\x16\x80\x15a\tfWa\x01\xAC`@Qa\x01W``\x82a\n'V[`!\x81R\x7F=== Emissions Calculator Demo ==` \x82\x01R\x7F=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[_\x80a\x02)a\x02=`@Qa\x01\xC2`@\x82a\n'V[`\x13\x81R\x7FCalculator address:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x92\x83\x91\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R`@`$\x84\x01R`d\x83\x01\x90a\nwV[\x86`D\x83\x01R\x03`\x1F\x19\x81\x01\x83R\x82a\n'V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7Fvg\x18\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x80\x15a\x08QW_\x90a\t2W[a\x02\xD0\x91P`@Qa\x02\xA1`@\x82a\n'V[`\x0E\x81R\x7FCurrent epoch:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[`@Q\x7F\xDF\x02D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x80\x15a\x08QW_\x90a\x08\xFEW[a\x03N\x91P`@Qa\x03\x1F`@\x82a\n'V[`\x0E\x81R\x7FTotal emitted:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[`@Q\x7F\xE4\xB7\xFBs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x80\x15a\x08QW_\x90a\x08\xCAW[a\x03\xCC\x91P`@Qa\x03\x9D`@\x82a\n'V[`\x11\x81R\x7FRemaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[`@Q\x7F\xFA9\x1Cd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x08QW_\x91a\x08\x8FW[P_a\x04\x89a\x04\x9F\x82\x93`@Q\x90a\x04\"`@\x83a\n'V[`\r\x82R\x7FIs completed:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01R`@Q\x93\x84\x92\x7F\xC3\xB5V5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\nwV[\x90\x15\x15`D\x83\x01R\x03`\x1F\x19\x81\x01\x83R\x82a\n'V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7FC\xA3\xF8\xA1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x08QW_\x91a\x08\\W[P`$\x91a\x057` \x92`@Qa\x05\t`@\x82a\n'V[`\x16\x81R\x7FNext emission preview:\0\0\0\0\0\0\0\0\0\0\x85\x82\x01Ra\x0B\x07V[`@Q\x92\x83\x80\x92\x7F#f@\xB9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R_`\x04\x83\x01RZ\xFA\x80\x15a\x08QW_\x90a\x08\x1DW[a\x05\xB7\x90`@Qa\x05\x88`@\x82a\n'V[`\x17\x81R\x7FCumulative product P_0:\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x0B\x07V[a\x06\x1D`@Qa\x05\xC8``\x82a\n'V[`$\x81R\x7F=== Example Decay Factor Updates` \x82\x01R\x7F ===\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[a\x06]`@Qa\x06.`@\x82a\n'V[`\x1D\x81R\x7FTo set epoch 10 to 90% decay:\0\0\0` \x82\x01Ra\n\x9CV[a\x06\xC3`@Qa\x06n``\x82a\n'V[`&\x81R\x7Fcalculator.setDecayFactor(10, 0.` \x82\x01R\x7F90e18)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[a\x07)`@Qa\x06\xD4``\x82a\n'V[`'\x81R\x7FTo set epochs 20-25 with varying` \x82\x01R\x7F decay:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[a\x07\xB5`@Qa\x07:`\x80\x82a\n'V[`Q\x81R\x7Fuint256[] memory decays = [0.85e` \x82\x01R\x7F18, 0.80e18, 0.75e18, 0.70e18, 0`@\x82\x01R\x7F.65e18, 0.60e18];\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x82\x01Ra\n\x9CV[a\x08\x1B`@Qa\x07\xC6``\x82a\n'V[`'\x81R\x7Fcalculator.setDecayFactors(20, d` \x82\x01R\x7Fecays);\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\x9CV[\0[P` \x81=` \x11a\x08IW[\x81a\x087` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x05\xB7\x90Qa\x05vV[=\x91Pa\x08*V[`@Q=_\x82>=\x90\xFD[\x90P` \x81=` \x11a\x08\x87W[\x81a\x08w` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWQ`$a\x04\xF1V[=\x91Pa\x08jV[\x90P` \x81=` \x11a\x08\xC2W[\x81a\x08\xAA` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWQ\x80\x15\x15\x81\x03a\0uW_a\x04\tV[=\x91Pa\x08\x9DV[P` \x81=` \x11a\x08\xF6W[\x81a\x08\xE4` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x03\xCC\x90Qa\x03\x8AV[=\x91Pa\x08\xD7V[P` \x81=` \x11a\t*W[\x81a\t\x18` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x03N\x90Qa\x03\x0CV[=\x91Pa\t\x0BV[P` \x81=` \x11a\t^W[\x81a\tL` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWa\x02\xD0\x90Qa\x02\x8EV[=\x91Pa\t?V[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P` \x81=` \x11a\n\x1FW[\x81a\t\xDE` \x93\x83a\n'V[\x81\x01\x03\x12a\0uWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\0uWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90a\x01(V[=\x91Pa\t\xD1V[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\nJW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x19`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[_a\n\xE2a\n\xF0\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\nwV[\x03`\x1F\x19\x81\x01\x83R\x82a\n'V[` \x81Q\x91\x01jconsole.logZ\xFAPV[a\x0BOa\n\xF0_\x93\x92\x84\x93`@Q\x93\x84\x92\x7F\xB6\x0Er\xCC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\nwV[\x90`D\x83\x01R\x03`\x1F\x19\x81\x01\x83R\x82a\n'V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DemoDecayUpdates`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum DemoDecayUpdatesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl DemoDecayUpdatesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DemoDecayUpdatesCalls {
        const NAME: &'static str = "DemoDecayUpdatesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(DemoDecayUpdatesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(DemoDecayUpdatesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DemoDecayUpdatesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DemoDecayUpdatesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DemoDecayUpdates`](self) contract instance.

See the [wrapper's documentation](`DemoDecayUpdatesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DemoDecayUpdatesInstance<P, N> {
        DemoDecayUpdatesInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DemoDecayUpdatesInstance<P, N>>,
    > {
        DemoDecayUpdatesInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        DemoDecayUpdatesInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`DemoDecayUpdates`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DemoDecayUpdates`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DemoDecayUpdatesInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for DemoDecayUpdatesInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DemoDecayUpdatesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DemoDecayUpdatesInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`DemoDecayUpdates`](self) contract instance.

See the [wrapper's documentation](`DemoDecayUpdatesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DemoDecayUpdatesInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> DemoDecayUpdatesInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DemoDecayUpdatesInstance<P, N> {
            DemoDecayUpdatesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DemoDecayUpdatesInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DemoDecayUpdatesInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
