/**

Generated by the following Solidity interface...
```solidity
interface MintSYNDToAddresses {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function synd() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "synd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract TestnetSyndToken"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MintSYNDToAddresses {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610d766101068239610d7690f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b61021d565b61001d5f3561004c565b8063a5220ded14610047578063c0406226146100425763f8ccbf470361000e576101e8565b610152565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b60018060a01b031690565b61008e906008610093930261006f565b610073565b90565b906100a1915461007e565b90565b6100b1600c600390610096565b90565b60018060a01b031690565b90565b6100d66100d16100db926100b4565b6100bf565b6100b4565b90565b6100e7906100c2565b90565b6100f3906100de565b90565b6100ff906100ea565b9052565b9190610116905f602085019401906100f6565b565b3461014857610128366004610060565b6101446101336100a4565b61013b610052565b91829182610103565b0390f35b610058565b5f0190565b3461018057610162366004610060565b61016a6107ff565b610172610052565b8061017c8161014d565b0390f35b610058565b60ff1690565b61019b9060086101a0930261006f565b610185565b90565b906101ae915461018b565b90565b6101be600c6002906101a3565b90565b151590565b6101cf906101c1565b9052565b91906101e6905f602085019401906101c6565b565b34610218576101f8366004610060565b6102146102036101b1565b61020b610052565b918291826101d3565b0390f35b610058565b5f80fd5b5f1c90565b90565b61023d61023861024292610226565b6100bf565b610226565b90565b61025161025691610221565b610229565b90565b61026d61026861027292610226565b6100bf565b6100b4565b90565b6102ae6102a96102a47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610245565b610259565b6100de565b90565b6102ba906100c2565b90565b6102c6906102b1565b90565b6102d96102d4610275565b6102bd565b90565b6102e5906100de565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610314906102ec565b810190811067ffffffffffffffff82111761032e57604052565b6102f6565b60e01b90565b5f91031261034357565b61005c565b610350610052565b3d5f823e3d90fd5b90565b61036f61036a61037492610358565b6100bf565b610226565b90565b9061038a610383610052565b928361030a565b565b67ffffffffffffffff81116103a45760208091020190565b6102f6565b906103bb6103b68361038c565b610377565b918252565b369037565b906103ea6103d2836103a9565b926020806103e0869361038c565b92019103906103c0565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b9061040e82610400565b81101561041f576020809102010190565b6103ec565b90565b61043b61043661044092610424565b6100bf565b610226565b90565b61044c906100b4565b90565b9061045990610443565b9052565b90565b61047461046f6104799261045d565b6100bf565b610226565b90565b90565b61049361048e6104989261047c565b6100bf565b610226565b90565b90565b6104b26104ad6104b79261049b565b6100bf565b610226565b90565b67ffffffffffffffff81116104d25760208091020190565b6102f6565b906104e96104e4836104ba565b610377565b918252565b369037565b90610518610500836104d7565b9260208061050e86936104ba565b92019103906104ee565b565b90565b61053161052c6105369261051a565b6100bf565b610226565b90565b5190565b9061054782610539565b811015610558576020809102010190565b6103ec565b9061056790610226565b9052565b7355f6e82a8bf5736d46837246dcbeaf7e61b3c27c90565b61058c906100c2565b90565b61059890610583565b90565b60181b90565b906105b66301000000600160b81b039161059b565b9181191691161790565b6105c990610583565b90565b90565b906105e46105df6105eb926105c0565b6105cc565b82546105a1565b9055565b60016105fb9101610226565b90565b6106089051610443565b90565b61061f61061a61062492610424565b6100bf565b6100b4565b90565b6106309061060b565b90565b60209181520190565b5f7f496e76616c696420616464726573730000000000000000000000000000000000910152565b610670600f602092610633565b6106798161063c565b0190565b6106929060208101905f818303910152610663565b90565b1561069c57565b6106a4610052565b62461bcd60e51b8152806106ba6004820161067d565b0390fd5b60181c90565b6106d06106d5916106be565b610073565b90565b6106e290546106c4565b90565b6106ef9051610226565b90565b6106fb90610443565b9052565b61070890610226565b9052565b91602061072d92949361072660408201965f8301906106f2565b01906106ff565b565b67ffffffffffffffff811161074d576107496020916102ec565b0190565b6102f6565b9061076461075f8361072f565b610377565b918252565b5f7f4d696e7465640000000000000000000000000000000000000000000000000000910152565b61079a6006610752565b906107a760208301610769565b565b6107b1610790565b90565b5f7f53594e4420746f00000000000000000000000000000000000000000000000000910152565b6107e56007610752565b906107f2602083016107b4565b565b6107fc6107db565b90565b61080f61080a6102c9565b6102dc565b637fb5297f90803b15610c3457610832915f9161082a610052565b938492610333565b82528183816108436004820161014d565b03925af18015610c2f57610c03575b50610865610860600461035b565b6103c5565b906108967319aaf160da8985c54bb97adaf9304b5ac78904216108918461088b5f610427565b90610404565b61044f565b6108c77337d911cbd7bb03521a975ec2de03ce1dd01568836108c2846108bc6001610460565b90610404565b61044f565b6108f8739a0ef1333681b357047282144dc06d7daa1f76ba6108f3846108ed600261047f565b90610404565b61044f565b6109297328fab3a5b69711cc64b09240d2694d9f0f07ebf66109248461091e600361049e565b90610404565b61044f565b61093b610936600461035b565b6104f3565b91610969610951680ad78ebc5ac620000061051d565b6109648561095e5f610427565b9061053d565b61055d565b61099761097e680ad78ebc5ac620000061051d565b6109928561098c6001610460565b9061053d565b61055d565b6109c56109ac680ad78ebc5ac620000061051d565b6109c0856109ba600261047f565b9061053d565b61055d565b6109f36109da680ad78ebc5ac620000061051d565b6109ee856109e8600361049e565b9061053d565b61055d565b610a0d610a06610a0161056b565b61058f565b600c6105cf565b610a165f610427565b5b80610a32610a2c610a2785610400565b610226565b91610226565b1015610b7357610a6f610a4e610a49848490610404565b6105fe565b610a68610a62610a5d5f610627565b610443565b91610443565b1415610695565b610a81610a7c600c6106d8565b6100ea565b906340c10f19610a9a610a95858490610404565b6105fe565b610aad610aa888859061053d565b6106e5565b93803b15610b6e57610ad25f8094610add610ac6610052565b98899687958694610333565b84526004840161070c565b03925af1918215610b6957610b3892610b3d575b50610b33610b08610b0387849061053d565b6106e5565b610b1b610b16868590610404565b6105fe565b90610b246107a9565b90610b2d6107f4565b91610cc0565b6105ef565b610a17565b610b5c905f3d8111610b62575b610b54818361030a565b810190610339565b5f610af1565b503d610b4a565b610348565b6102e8565b50509050610b87610b826102c9565b6102dc565b6376eadd3690803b15610bfe57610baa915f91610ba2610052565b938492610333565b8252818381610bbb6004820161014d565b03925af18015610bf957610bcd575b50565b610bec905f3d8111610bf2575b610be4818361030a565b810190610339565b5f610bca565b503d610bda565b610348565b6102e8565b610c22905f3d8111610c28575b610c1a818361030a565b810190610339565b5f610852565b503d610c10565b610348565b6102e8565b5190565b90825f9392825e0152565b610c67610c70602093610c7593610c5e81610c39565b93848093610633565b95869101610c3d565b6102ec565b0190565b949391610cb690610cbe94610ca9610c9e60609560808b01908b82035f8d0152610c48565b9260208a01906106ff565b8782036040890152610c48565b9401906106f2565b565b90610cef610d0394610cfe939294610cd6610052565b958694600460208701631f118ca960e21b815201610c79565b6020820181038252038261030a565b610d05565b565b610d1890610d136001610d44565b610d64565b565b6a636f6e736f6c652e6c6f6790565b5f8091610d34610d1a565b602082519201905afa50565b5f90565b610d4c610d40565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610d5057610d7490610d29565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\rva\x01\x06\x829a\rv\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1DV[a\0\x1D_5a\0LV[\x80c\xA5\"\r\xED\x14a\0GW\x80c\xC0@b&\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x01\xE8V[a\x01RV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x8E\x90`\x08a\0\x93\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\xA1\x91Ta\0~V[\x90V[a\0\xB1`\x0C`\x03\x90a\0\x96V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xD6a\0\xD1a\0\xDB\x92a\0\xB4V[a\0\xBFV[a\0\xB4V[\x90V[a\0\xE7\x90a\0\xC2V[\x90V[a\0\xF3\x90a\0\xDEV[\x90V[a\0\xFF\x90a\0\xEAV[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0`V[a\x01Da\x013a\0\xA4V[a\x01;a\0RV[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0XV[_\x01\x90V[4a\x01\x80Wa\x01b6`\x04a\0`V[a\x01ja\x07\xFFV[a\x01ra\0RV[\x80a\x01|\x81a\x01MV[\x03\x90\xF3[a\0XV[`\xFF\x16\x90V[a\x01\x9B\x90`\x08a\x01\xA0\x93\x02a\0oV[a\x01\x85V[\x90V[\x90a\x01\xAE\x91Ta\x01\x8BV[\x90V[a\x01\xBE`\x0C`\x02\x90a\x01\xA3V[\x90V[\x15\x15\x90V[a\x01\xCF\x90a\x01\xC1V[\x90RV[\x91\x90a\x01\xE6\x90_` \x85\x01\x94\x01\x90a\x01\xC6V[V[4a\x02\x18Wa\x01\xF86`\x04a\0`V[a\x02\x14a\x02\x03a\x01\xB1V[a\x02\x0Ba\0RV[\x91\x82\x91\x82a\x01\xD3V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02=a\x028a\x02B\x92a\x02&V[a\0\xBFV[a\x02&V[\x90V[a\x02Qa\x02V\x91a\x02!V[a\x02)V[\x90V[a\x02ma\x02ha\x02r\x92a\x02&V[a\0\xBFV[a\0\xB4V[\x90V[a\x02\xAEa\x02\xA9a\x02\xA4\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02EV[a\x02YV[a\0\xDEV[\x90V[a\x02\xBA\x90a\0\xC2V[\x90V[a\x02\xC6\x90a\x02\xB1V[\x90V[a\x02\xD9a\x02\xD4a\x02uV[a\x02\xBDV[\x90V[a\x02\xE5\x90a\0\xDEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x14\x90a\x02\xECV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03.W`@RV[a\x02\xF6V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03CWV[a\0\\V[a\x03Pa\0RV[=_\x82>=\x90\xFD[\x90V[a\x03oa\x03ja\x03t\x92a\x03XV[a\0\xBFV[a\x02&V[\x90V[\x90a\x03\x8Aa\x03\x83a\0RV[\x92\x83a\x03\nV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xA4W` \x80\x91\x02\x01\x90V[a\x02\xF6V[\x90a\x03\xBBa\x03\xB6\x83a\x03\x8CV[a\x03wV[\x91\x82RV[6\x907V[\x90a\x03\xEAa\x03\xD2\x83a\x03\xA9V[\x92` \x80a\x03\xE0\x86\x93a\x03\x8CV[\x92\x01\x91\x03\x90a\x03\xC0V[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x04\x0E\x82a\x04\0V[\x81\x10\x15a\x04\x1FW` \x80\x91\x02\x01\x01\x90V[a\x03\xECV[\x90V[a\x04;a\x046a\x04@\x92a\x04$V[a\0\xBFV[a\x02&V[\x90V[a\x04L\x90a\0\xB4V[\x90V[\x90a\x04Y\x90a\x04CV[\x90RV[\x90V[a\x04ta\x04oa\x04y\x92a\x04]V[a\0\xBFV[a\x02&V[\x90V[\x90V[a\x04\x93a\x04\x8Ea\x04\x98\x92a\x04|V[a\0\xBFV[a\x02&V[\x90V[\x90V[a\x04\xB2a\x04\xADa\x04\xB7\x92a\x04\x9BV[a\0\xBFV[a\x02&V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xD2W` \x80\x91\x02\x01\x90V[a\x02\xF6V[\x90a\x04\xE9a\x04\xE4\x83a\x04\xBAV[a\x03wV[\x91\x82RV[6\x907V[\x90a\x05\x18a\x05\0\x83a\x04\xD7V[\x92` \x80a\x05\x0E\x86\x93a\x04\xBAV[\x92\x01\x91\x03\x90a\x04\xEEV[V[\x90V[a\x051a\x05,a\x056\x92a\x05\x1AV[a\0\xBFV[a\x02&V[\x90V[Q\x90V[\x90a\x05G\x82a\x059V[\x81\x10\x15a\x05XW` \x80\x91\x02\x01\x01\x90V[a\x03\xECV[\x90a\x05g\x90a\x02&V[\x90RV[sU\xF6\xE8*\x8B\xF5smF\x83rF\xDC\xBE\xAF~a\xB3\xC2|\x90V[a\x05\x8C\x90a\0\xC2V[\x90V[a\x05\x98\x90a\x05\x83V[\x90V[`\x18\x1B\x90V[\x90a\x05\xB6c\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x05\x9BV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xC9\x90a\x05\x83V[\x90V[\x90V[\x90a\x05\xE4a\x05\xDFa\x05\xEB\x92a\x05\xC0V[a\x05\xCCV[\x82Ta\x05\xA1V[\x90UV[`\x01a\x05\xFB\x91\x01a\x02&V[\x90V[a\x06\x08\x90Qa\x04CV[\x90V[a\x06\x1Fa\x06\x1Aa\x06$\x92a\x04$V[a\0\xBFV[a\0\xB4V[\x90V[a\x060\x90a\x06\x0BV[\x90V[` \x91\x81R\x01\x90V[_\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06p`\x0F` \x92a\x063V[a\x06y\x81a\x06<V[\x01\x90V[a\x06\x92\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06cV[\x90V[\x15a\x06\x9CWV[a\x06\xA4a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xBA`\x04\x82\x01a\x06}V[\x03\x90\xFD[`\x18\x1C\x90V[a\x06\xD0a\x06\xD5\x91a\x06\xBEV[a\0sV[\x90V[a\x06\xE2\x90Ta\x06\xC4V[\x90V[a\x06\xEF\x90Qa\x02&V[\x90V[a\x06\xFB\x90a\x04CV[\x90RV[a\x07\x08\x90a\x02&V[\x90RV[\x91` a\x07-\x92\x94\x93a\x07&`@\x82\x01\x96_\x83\x01\x90a\x06\xF2V[\x01\x90a\x06\xFFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07MWa\x07I` \x91a\x02\xECV[\x01\x90V[a\x02\xF6V[\x90a\x07da\x07_\x83a\x07/V[a\x03wV[\x91\x82RV[_\x7FMinted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\x9A`\x06a\x07RV[\x90a\x07\xA7` \x83\x01a\x07iV[V[a\x07\xB1a\x07\x90V[\x90V[_\x7FSYND to\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\xE5`\x07a\x07RV[\x90a\x07\xF2` \x83\x01a\x07\xB4V[V[a\x07\xFCa\x07\xDBV[\x90V[a\x08\x0Fa\x08\na\x02\xC9V[a\x02\xDCV[c\x7F\xB5)\x7F\x90\x80;\x15a\x0C4Wa\x082\x91_\x91a\x08*a\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x08C`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\x0C/Wa\x0C\x03W[Pa\x08ea\x08``\x04a\x03[V[a\x03\xC5V[\x90a\x08\x96s\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!a\x08\x91\x84a\x08\x8B_a\x04'V[\x90a\x04\x04V[a\x04OV[a\x08\xC7s7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x08\xC2\x84a\x08\xBC`\x01a\x04`V[\x90a\x04\x04V[a\x04OV[a\x08\xF8s\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBAa\x08\xF3\x84a\x08\xED`\x02a\x04\x7FV[\x90a\x04\x04V[a\x04OV[a\t)s(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6a\t$\x84a\t\x1E`\x03a\x04\x9EV[\x90a\x04\x04V[a\x04OV[a\t;a\t6`\x04a\x03[V[a\x04\xF3V[\x91a\tia\tQh\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\td\x85a\t^_a\x04'V[\x90a\x05=V[a\x05]V[a\t\x97a\t~h\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\t\x92\x85a\t\x8C`\x01a\x04`V[\x90a\x05=V[a\x05]V[a\t\xC5a\t\xACh\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\t\xC0\x85a\t\xBA`\x02a\x04\x7FV[\x90a\x05=V[a\x05]V[a\t\xF3a\t\xDAh\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\t\xEE\x85a\t\xE8`\x03a\x04\x9EV[\x90a\x05=V[a\x05]V[a\n\ra\n\x06a\n\x01a\x05kV[a\x05\x8FV[`\x0Ca\x05\xCFV[a\n\x16_a\x04'V[[\x80a\n2a\n,a\n'\x85a\x04\0V[a\x02&V[\x91a\x02&V[\x10\x15a\x0BsWa\noa\nNa\nI\x84\x84\x90a\x04\x04V[a\x05\xFEV[a\nha\nba\n]_a\x06'V[a\x04CV[\x91a\x04CV[\x14\x15a\x06\x95V[a\n\x81a\n|`\x0Ca\x06\xD8V[a\0\xEAV[\x90c@\xC1\x0F\x19a\n\x9Aa\n\x95\x85\x84\x90a\x04\x04V[a\x05\xFEV[a\n\xADa\n\xA8\x88\x85\x90a\x05=V[a\x06\xE5V[\x93\x80;\x15a\x0BnWa\n\xD2_\x80\x94a\n\xDDa\n\xC6a\0RV[\x98\x89\x96\x87\x95\x86\x94a\x033V[\x84R`\x04\x84\x01a\x07\x0CV[\x03\x92Z\xF1\x91\x82\x15a\x0BiWa\x0B8\x92a\x0B=W[Pa\x0B3a\x0B\x08a\x0B\x03\x87\x84\x90a\x05=V[a\x06\xE5V[a\x0B\x1Ba\x0B\x16\x86\x85\x90a\x04\x04V[a\x05\xFEV[\x90a\x0B$a\x07\xA9V[\x90a\x0B-a\x07\xF4V[\x91a\x0C\xC0V[a\x05\xEFV[a\n\x17V[a\x0B\\\x90_=\x81\x11a\x0BbW[a\x0BT\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\n\xF1V[P=a\x0BJV[a\x03HV[a\x02\xE8V[PP\x90Pa\x0B\x87a\x0B\x82a\x02\xC9V[a\x02\xDCV[cv\xEA\xDD6\x90\x80;\x15a\x0B\xFEWa\x0B\xAA\x91_\x91a\x0B\xA2a\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x0B\xBB`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\x0B\xF9Wa\x0B\xCDW[PV[a\x0B\xEC\x90_=\x81\x11a\x0B\xF2W[a\x0B\xE4\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x0B\xCAV[P=a\x0B\xDAV[a\x03HV[a\x02\xE8V[a\x0C\"\x90_=\x81\x11a\x0C(W[a\x0C\x1A\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08RV[P=a\x0C\x10V[a\x03HV[a\x02\xE8V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0Cga\x0Cp` \x93a\x0Cu\x93a\x0C^\x81a\x0C9V[\x93\x84\x80\x93a\x063V[\x95\x86\x91\x01a\x0C=V[a\x02\xECV[\x01\x90V[\x94\x93\x91a\x0C\xB6\x90a\x0C\xBE\x94a\x0C\xA9a\x0C\x9E``\x95`\x80\x8B\x01\x90\x8B\x82\x03_\x8D\x01Ra\x0CHV[\x92` \x8A\x01\x90a\x06\xFFV[\x87\x82\x03`@\x89\x01Ra\x0CHV[\x94\x01\x90a\x06\xF2V[V[\x90a\x0C\xEFa\r\x03\x94a\x0C\xFE\x93\x92\x94a\x0C\xD6a\0RV[\x95\x86\x94`\x04` \x87\x01c\x1F\x11\x8C\xA9`\xE2\x1B\x81R\x01a\x0CyV[` \x82\x01\x81\x03\x82R\x03\x82a\x03\nV[a\r\x05V[V[a\r\x18\x90a\r\x13`\x01a\rDV[a\rdV[V[jconsole.log\x90V[_\x80\x91a\r4a\r\x1AV[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\rLa\r@V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\rPWa\rt\x90a\r)V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61021d565b61001d5f3561004c565b8063a5220ded14610047578063c0406226146100425763f8ccbf470361000e576101e8565b610152565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b60018060a01b031690565b61008e906008610093930261006f565b610073565b90565b906100a1915461007e565b90565b6100b1600c600390610096565b90565b60018060a01b031690565b90565b6100d66100d16100db926100b4565b6100bf565b6100b4565b90565b6100e7906100c2565b90565b6100f3906100de565b90565b6100ff906100ea565b9052565b9190610116905f602085019401906100f6565b565b3461014857610128366004610060565b6101446101336100a4565b61013b610052565b91829182610103565b0390f35b610058565b5f0190565b3461018057610162366004610060565b61016a6107ff565b610172610052565b8061017c8161014d565b0390f35b610058565b60ff1690565b61019b9060086101a0930261006f565b610185565b90565b906101ae915461018b565b90565b6101be600c6002906101a3565b90565b151590565b6101cf906101c1565b9052565b91906101e6905f602085019401906101c6565b565b34610218576101f8366004610060565b6102146102036101b1565b61020b610052565b918291826101d3565b0390f35b610058565b5f80fd5b5f1c90565b90565b61023d61023861024292610226565b6100bf565b610226565b90565b61025161025691610221565b610229565b90565b61026d61026861027292610226565b6100bf565b6100b4565b90565b6102ae6102a96102a47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610245565b610259565b6100de565b90565b6102ba906100c2565b90565b6102c6906102b1565b90565b6102d96102d4610275565b6102bd565b90565b6102e5906100de565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610314906102ec565b810190811067ffffffffffffffff82111761032e57604052565b6102f6565b60e01b90565b5f91031261034357565b61005c565b610350610052565b3d5f823e3d90fd5b90565b61036f61036a61037492610358565b6100bf565b610226565b90565b9061038a610383610052565b928361030a565b565b67ffffffffffffffff81116103a45760208091020190565b6102f6565b906103bb6103b68361038c565b610377565b918252565b369037565b906103ea6103d2836103a9565b926020806103e0869361038c565b92019103906103c0565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b9061040e82610400565b81101561041f576020809102010190565b6103ec565b90565b61043b61043661044092610424565b6100bf565b610226565b90565b61044c906100b4565b90565b9061045990610443565b9052565b90565b61047461046f6104799261045d565b6100bf565b610226565b90565b90565b61049361048e6104989261047c565b6100bf565b610226565b90565b90565b6104b26104ad6104b79261049b565b6100bf565b610226565b90565b67ffffffffffffffff81116104d25760208091020190565b6102f6565b906104e96104e4836104ba565b610377565b918252565b369037565b90610518610500836104d7565b9260208061050e86936104ba565b92019103906104ee565b565b90565b61053161052c6105369261051a565b6100bf565b610226565b90565b5190565b9061054782610539565b811015610558576020809102010190565b6103ec565b9061056790610226565b9052565b7355f6e82a8bf5736d46837246dcbeaf7e61b3c27c90565b61058c906100c2565b90565b61059890610583565b90565b60181b90565b906105b66301000000600160b81b039161059b565b9181191691161790565b6105c990610583565b90565b90565b906105e46105df6105eb926105c0565b6105cc565b82546105a1565b9055565b60016105fb9101610226565b90565b6106089051610443565b90565b61061f61061a61062492610424565b6100bf565b6100b4565b90565b6106309061060b565b90565b60209181520190565b5f7f496e76616c696420616464726573730000000000000000000000000000000000910152565b610670600f602092610633565b6106798161063c565b0190565b6106929060208101905f818303910152610663565b90565b1561069c57565b6106a4610052565b62461bcd60e51b8152806106ba6004820161067d565b0390fd5b60181c90565b6106d06106d5916106be565b610073565b90565b6106e290546106c4565b90565b6106ef9051610226565b90565b6106fb90610443565b9052565b61070890610226565b9052565b91602061072d92949361072660408201965f8301906106f2565b01906106ff565b565b67ffffffffffffffff811161074d576107496020916102ec565b0190565b6102f6565b9061076461075f8361072f565b610377565b918252565b5f7f4d696e7465640000000000000000000000000000000000000000000000000000910152565b61079a6006610752565b906107a760208301610769565b565b6107b1610790565b90565b5f7f53594e4420746f00000000000000000000000000000000000000000000000000910152565b6107e56007610752565b906107f2602083016107b4565b565b6107fc6107db565b90565b61080f61080a6102c9565b6102dc565b637fb5297f90803b15610c3457610832915f9161082a610052565b938492610333565b82528183816108436004820161014d565b03925af18015610c2f57610c03575b50610865610860600461035b565b6103c5565b906108967319aaf160da8985c54bb97adaf9304b5ac78904216108918461088b5f610427565b90610404565b61044f565b6108c77337d911cbd7bb03521a975ec2de03ce1dd01568836108c2846108bc6001610460565b90610404565b61044f565b6108f8739a0ef1333681b357047282144dc06d7daa1f76ba6108f3846108ed600261047f565b90610404565b61044f565b6109297328fab3a5b69711cc64b09240d2694d9f0f07ebf66109248461091e600361049e565b90610404565b61044f565b61093b610936600461035b565b6104f3565b91610969610951680ad78ebc5ac620000061051d565b6109648561095e5f610427565b9061053d565b61055d565b61099761097e680ad78ebc5ac620000061051d565b6109928561098c6001610460565b9061053d565b61055d565b6109c56109ac680ad78ebc5ac620000061051d565b6109c0856109ba600261047f565b9061053d565b61055d565b6109f36109da680ad78ebc5ac620000061051d565b6109ee856109e8600361049e565b9061053d565b61055d565b610a0d610a06610a0161056b565b61058f565b600c6105cf565b610a165f610427565b5b80610a32610a2c610a2785610400565b610226565b91610226565b1015610b7357610a6f610a4e610a49848490610404565b6105fe565b610a68610a62610a5d5f610627565b610443565b91610443565b1415610695565b610a81610a7c600c6106d8565b6100ea565b906340c10f19610a9a610a95858490610404565b6105fe565b610aad610aa888859061053d565b6106e5565b93803b15610b6e57610ad25f8094610add610ac6610052565b98899687958694610333565b84526004840161070c565b03925af1918215610b6957610b3892610b3d575b50610b33610b08610b0387849061053d565b6106e5565b610b1b610b16868590610404565b6105fe565b90610b246107a9565b90610b2d6107f4565b91610cc0565b6105ef565b610a17565b610b5c905f3d8111610b62575b610b54818361030a565b810190610339565b5f610af1565b503d610b4a565b610348565b6102e8565b50509050610b87610b826102c9565b6102dc565b6376eadd3690803b15610bfe57610baa915f91610ba2610052565b938492610333565b8252818381610bbb6004820161014d565b03925af18015610bf957610bcd575b50565b610bec905f3d8111610bf2575b610be4818361030a565b810190610339565b5f610bca565b503d610bda565b610348565b6102e8565b610c22905f3d8111610c28575b610c1a818361030a565b810190610339565b5f610852565b503d610c10565b610348565b6102e8565b5190565b90825f9392825e0152565b610c67610c70602093610c7593610c5e81610c39565b93848093610633565b95869101610c3d565b6102ec565b0190565b949391610cb690610cbe94610ca9610c9e60609560808b01908b82035f8d0152610c48565b9260208a01906106ff565b8782036040890152610c48565b9401906106f2565b565b90610cef610d0394610cfe939294610cd6610052565b958694600460208701631f118ca960e21b815201610c79565b6020820181038252038261030a565b610d05565b565b610d1890610d136001610d44565b610d64565b565b6a636f6e736f6c652e6c6f6790565b5f8091610d34610d1a565b602082519201905afa50565b5f90565b610d4c610d40565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610d5057610d7490610d29565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1DV[a\0\x1D_5a\0LV[\x80c\xA5\"\r\xED\x14a\0GW\x80c\xC0@b&\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x01\xE8V[a\x01RV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x8E\x90`\x08a\0\x93\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\xA1\x91Ta\0~V[\x90V[a\0\xB1`\x0C`\x03\x90a\0\x96V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xD6a\0\xD1a\0\xDB\x92a\0\xB4V[a\0\xBFV[a\0\xB4V[\x90V[a\0\xE7\x90a\0\xC2V[\x90V[a\0\xF3\x90a\0\xDEV[\x90V[a\0\xFF\x90a\0\xEAV[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0`V[a\x01Da\x013a\0\xA4V[a\x01;a\0RV[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0XV[_\x01\x90V[4a\x01\x80Wa\x01b6`\x04a\0`V[a\x01ja\x07\xFFV[a\x01ra\0RV[\x80a\x01|\x81a\x01MV[\x03\x90\xF3[a\0XV[`\xFF\x16\x90V[a\x01\x9B\x90`\x08a\x01\xA0\x93\x02a\0oV[a\x01\x85V[\x90V[\x90a\x01\xAE\x91Ta\x01\x8BV[\x90V[a\x01\xBE`\x0C`\x02\x90a\x01\xA3V[\x90V[\x15\x15\x90V[a\x01\xCF\x90a\x01\xC1V[\x90RV[\x91\x90a\x01\xE6\x90_` \x85\x01\x94\x01\x90a\x01\xC6V[V[4a\x02\x18Wa\x01\xF86`\x04a\0`V[a\x02\x14a\x02\x03a\x01\xB1V[a\x02\x0Ba\0RV[\x91\x82\x91\x82a\x01\xD3V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02=a\x028a\x02B\x92a\x02&V[a\0\xBFV[a\x02&V[\x90V[a\x02Qa\x02V\x91a\x02!V[a\x02)V[\x90V[a\x02ma\x02ha\x02r\x92a\x02&V[a\0\xBFV[a\0\xB4V[\x90V[a\x02\xAEa\x02\xA9a\x02\xA4\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02EV[a\x02YV[a\0\xDEV[\x90V[a\x02\xBA\x90a\0\xC2V[\x90V[a\x02\xC6\x90a\x02\xB1V[\x90V[a\x02\xD9a\x02\xD4a\x02uV[a\x02\xBDV[\x90V[a\x02\xE5\x90a\0\xDEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x14\x90a\x02\xECV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03.W`@RV[a\x02\xF6V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03CWV[a\0\\V[a\x03Pa\0RV[=_\x82>=\x90\xFD[\x90V[a\x03oa\x03ja\x03t\x92a\x03XV[a\0\xBFV[a\x02&V[\x90V[\x90a\x03\x8Aa\x03\x83a\0RV[\x92\x83a\x03\nV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xA4W` \x80\x91\x02\x01\x90V[a\x02\xF6V[\x90a\x03\xBBa\x03\xB6\x83a\x03\x8CV[a\x03wV[\x91\x82RV[6\x907V[\x90a\x03\xEAa\x03\xD2\x83a\x03\xA9V[\x92` \x80a\x03\xE0\x86\x93a\x03\x8CV[\x92\x01\x91\x03\x90a\x03\xC0V[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x04\x0E\x82a\x04\0V[\x81\x10\x15a\x04\x1FW` \x80\x91\x02\x01\x01\x90V[a\x03\xECV[\x90V[a\x04;a\x046a\x04@\x92a\x04$V[a\0\xBFV[a\x02&V[\x90V[a\x04L\x90a\0\xB4V[\x90V[\x90a\x04Y\x90a\x04CV[\x90RV[\x90V[a\x04ta\x04oa\x04y\x92a\x04]V[a\0\xBFV[a\x02&V[\x90V[\x90V[a\x04\x93a\x04\x8Ea\x04\x98\x92a\x04|V[a\0\xBFV[a\x02&V[\x90V[\x90V[a\x04\xB2a\x04\xADa\x04\xB7\x92a\x04\x9BV[a\0\xBFV[a\x02&V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xD2W` \x80\x91\x02\x01\x90V[a\x02\xF6V[\x90a\x04\xE9a\x04\xE4\x83a\x04\xBAV[a\x03wV[\x91\x82RV[6\x907V[\x90a\x05\x18a\x05\0\x83a\x04\xD7V[\x92` \x80a\x05\x0E\x86\x93a\x04\xBAV[\x92\x01\x91\x03\x90a\x04\xEEV[V[\x90V[a\x051a\x05,a\x056\x92a\x05\x1AV[a\0\xBFV[a\x02&V[\x90V[Q\x90V[\x90a\x05G\x82a\x059V[\x81\x10\x15a\x05XW` \x80\x91\x02\x01\x01\x90V[a\x03\xECV[\x90a\x05g\x90a\x02&V[\x90RV[sU\xF6\xE8*\x8B\xF5smF\x83rF\xDC\xBE\xAF~a\xB3\xC2|\x90V[a\x05\x8C\x90a\0\xC2V[\x90V[a\x05\x98\x90a\x05\x83V[\x90V[`\x18\x1B\x90V[\x90a\x05\xB6c\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x05\x9BV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xC9\x90a\x05\x83V[\x90V[\x90V[\x90a\x05\xE4a\x05\xDFa\x05\xEB\x92a\x05\xC0V[a\x05\xCCV[\x82Ta\x05\xA1V[\x90UV[`\x01a\x05\xFB\x91\x01a\x02&V[\x90V[a\x06\x08\x90Qa\x04CV[\x90V[a\x06\x1Fa\x06\x1Aa\x06$\x92a\x04$V[a\0\xBFV[a\0\xB4V[\x90V[a\x060\x90a\x06\x0BV[\x90V[` \x91\x81R\x01\x90V[_\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06p`\x0F` \x92a\x063V[a\x06y\x81a\x06<V[\x01\x90V[a\x06\x92\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06cV[\x90V[\x15a\x06\x9CWV[a\x06\xA4a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xBA`\x04\x82\x01a\x06}V[\x03\x90\xFD[`\x18\x1C\x90V[a\x06\xD0a\x06\xD5\x91a\x06\xBEV[a\0sV[\x90V[a\x06\xE2\x90Ta\x06\xC4V[\x90V[a\x06\xEF\x90Qa\x02&V[\x90V[a\x06\xFB\x90a\x04CV[\x90RV[a\x07\x08\x90a\x02&V[\x90RV[\x91` a\x07-\x92\x94\x93a\x07&`@\x82\x01\x96_\x83\x01\x90a\x06\xF2V[\x01\x90a\x06\xFFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07MWa\x07I` \x91a\x02\xECV[\x01\x90V[a\x02\xF6V[\x90a\x07da\x07_\x83a\x07/V[a\x03wV[\x91\x82RV[_\x7FMinted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\x9A`\x06a\x07RV[\x90a\x07\xA7` \x83\x01a\x07iV[V[a\x07\xB1a\x07\x90V[\x90V[_\x7FSYND to\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\xE5`\x07a\x07RV[\x90a\x07\xF2` \x83\x01a\x07\xB4V[V[a\x07\xFCa\x07\xDBV[\x90V[a\x08\x0Fa\x08\na\x02\xC9V[a\x02\xDCV[c\x7F\xB5)\x7F\x90\x80;\x15a\x0C4Wa\x082\x91_\x91a\x08*a\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x08C`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\x0C/Wa\x0C\x03W[Pa\x08ea\x08``\x04a\x03[V[a\x03\xC5V[\x90a\x08\x96s\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!a\x08\x91\x84a\x08\x8B_a\x04'V[\x90a\x04\x04V[a\x04OV[a\x08\xC7s7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x08\xC2\x84a\x08\xBC`\x01a\x04`V[\x90a\x04\x04V[a\x04OV[a\x08\xF8s\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBAa\x08\xF3\x84a\x08\xED`\x02a\x04\x7FV[\x90a\x04\x04V[a\x04OV[a\t)s(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6a\t$\x84a\t\x1E`\x03a\x04\x9EV[\x90a\x04\x04V[a\x04OV[a\t;a\t6`\x04a\x03[V[a\x04\xF3V[\x91a\tia\tQh\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\td\x85a\t^_a\x04'V[\x90a\x05=V[a\x05]V[a\t\x97a\t~h\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\t\x92\x85a\t\x8C`\x01a\x04`V[\x90a\x05=V[a\x05]V[a\t\xC5a\t\xACh\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\t\xC0\x85a\t\xBA`\x02a\x04\x7FV[\x90a\x05=V[a\x05]V[a\t\xF3a\t\xDAh\n\xD7\x8E\xBCZ\xC6 \0\0a\x05\x1DV[a\t\xEE\x85a\t\xE8`\x03a\x04\x9EV[\x90a\x05=V[a\x05]V[a\n\ra\n\x06a\n\x01a\x05kV[a\x05\x8FV[`\x0Ca\x05\xCFV[a\n\x16_a\x04'V[[\x80a\n2a\n,a\n'\x85a\x04\0V[a\x02&V[\x91a\x02&V[\x10\x15a\x0BsWa\noa\nNa\nI\x84\x84\x90a\x04\x04V[a\x05\xFEV[a\nha\nba\n]_a\x06'V[a\x04CV[\x91a\x04CV[\x14\x15a\x06\x95V[a\n\x81a\n|`\x0Ca\x06\xD8V[a\0\xEAV[\x90c@\xC1\x0F\x19a\n\x9Aa\n\x95\x85\x84\x90a\x04\x04V[a\x05\xFEV[a\n\xADa\n\xA8\x88\x85\x90a\x05=V[a\x06\xE5V[\x93\x80;\x15a\x0BnWa\n\xD2_\x80\x94a\n\xDDa\n\xC6a\0RV[\x98\x89\x96\x87\x95\x86\x94a\x033V[\x84R`\x04\x84\x01a\x07\x0CV[\x03\x92Z\xF1\x91\x82\x15a\x0BiWa\x0B8\x92a\x0B=W[Pa\x0B3a\x0B\x08a\x0B\x03\x87\x84\x90a\x05=V[a\x06\xE5V[a\x0B\x1Ba\x0B\x16\x86\x85\x90a\x04\x04V[a\x05\xFEV[\x90a\x0B$a\x07\xA9V[\x90a\x0B-a\x07\xF4V[\x91a\x0C\xC0V[a\x05\xEFV[a\n\x17V[a\x0B\\\x90_=\x81\x11a\x0BbW[a\x0BT\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\n\xF1V[P=a\x0BJV[a\x03HV[a\x02\xE8V[PP\x90Pa\x0B\x87a\x0B\x82a\x02\xC9V[a\x02\xDCV[cv\xEA\xDD6\x90\x80;\x15a\x0B\xFEWa\x0B\xAA\x91_\x91a\x0B\xA2a\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x0B\xBB`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\x0B\xF9Wa\x0B\xCDW[PV[a\x0B\xEC\x90_=\x81\x11a\x0B\xF2W[a\x0B\xE4\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x0B\xCAV[P=a\x0B\xDAV[a\x03HV[a\x02\xE8V[a\x0C\"\x90_=\x81\x11a\x0C(W[a\x0C\x1A\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08RV[P=a\x0C\x10V[a\x03HV[a\x02\xE8V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0Cga\x0Cp` \x93a\x0Cu\x93a\x0C^\x81a\x0C9V[\x93\x84\x80\x93a\x063V[\x95\x86\x91\x01a\x0C=V[a\x02\xECV[\x01\x90V[\x94\x93\x91a\x0C\xB6\x90a\x0C\xBE\x94a\x0C\xA9a\x0C\x9E``\x95`\x80\x8B\x01\x90\x8B\x82\x03_\x8D\x01Ra\x0CHV[\x92` \x8A\x01\x90a\x06\xFFV[\x87\x82\x03`@\x89\x01Ra\x0CHV[\x94\x01\x90a\x06\xF2V[V[\x90a\x0C\xEFa\r\x03\x94a\x0C\xFE\x93\x92\x94a\x0C\xD6a\0RV[\x95\x86\x94`\x04` \x87\x01c\x1F\x11\x8C\xA9`\xE2\x1B\x81R\x01a\x0CyV[` \x82\x01\x81\x03\x82R\x03\x82a\x03\nV[a\r\x05V[V[a\r\x18\x90a\r\x13`\x01a\rDV[a\rdV[V[jconsole.log\x90V[_\x80\x91a\r4a\r\x1AV[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\rLa\r@V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\rPWa\rt\x90a\r)V[V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `synd()` and selector `0xa5220ded`.
```solidity
function synd() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`synd()`](syndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "synd()";
            const SELECTOR: [u8; 4] = [165u8, 34u8, 13u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: syndReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: syndReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`MintSYNDToAddresses`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MintSYNDToAddressesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
        #[allow(missing_docs)]
        synd(syndCall),
    }
    #[automatically_derived]
    impl MintSYNDToAddressesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [165u8, 34u8, 13u8, 237u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MintSYNDToAddressesCalls {
        const NAME: &'static str = "MintSYNDToAddressesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::synd(_) => <syndCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(MintSYNDToAddressesCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(MintSYNDToAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(MintSYNDToAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MintSYNDToAddressesCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MintSYNDToAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MintSYNDToAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MintSYNDToAddressesInstance<P, N> {
        MintSYNDToAddressesInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MintSYNDToAddressesInstance<P, N>>,
    > {
        MintSYNDToAddressesInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        MintSYNDToAddressesInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`MintSYNDToAddresses`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MintSYNDToAddresses`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MintSYNDToAddressesInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for MintSYNDToAddressesInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MintSYNDToAddressesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MintSYNDToAddressesInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> MintSYNDToAddressesInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MintSYNDToAddressesInstance<P, N> {
            MintSYNDToAddressesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
        ///Creates a new call builder for the [`synd`] function.
        pub fn synd(&self) -> alloy_contract::SolCallBuilder<&P, syndCall, N> {
            self.call_builder(&syndCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
