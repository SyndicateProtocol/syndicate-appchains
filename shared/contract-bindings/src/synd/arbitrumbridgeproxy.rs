/**

Generated by the following Solidity interface...
```solidity
interface ArbitrumBridgeProxy {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error BridgeCallFailed(string reason);
    error BridgeNotActive();
    error ExcessiveAmount();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    error UnauthorizedCaller();
    error ZeroAddress();
    error ZeroAmount();

    event ArbitrumConfigUpdated(address recipient, uint256 maxGas, uint256 gasPriceBid);
    event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
    event BridgeStatusUpdated(bool active);
    event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
    event DailyLimitReset(uint256 day, uint256 previousUsed);
    event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
    event EthWithdrawn(address indexed to, uint256 amount);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _recipient, uint256 _maxGas, uint256 _gasPriceBid);

    receive() external payable;

    function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
    function BRIDGE_CALLER_ROLE() external view returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function bridgeActive() external view returns (bool);
    function bridgeName() external view returns (string memory);
    function bridgeTarget() external view returns (address);
    function calculateEthValue(uint256 _maxGas, uint256 _gasPriceBid) external pure returns (uint256 ethValue);
    function dailyLimit() external view returns (uint256);
    function dailyUsed() external view returns (uint256);
    function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
    function gasPriceBid() external view returns (uint256);
    function getArbitrumConfig() external view returns (address recipientAddr, uint256 maxGasLimit, uint256 gasPriceBidAmount);
    function getBridgeInfo() external view returns (string memory name, address target, bool active);
    function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function lastResetDay() external view returns (uint256);
    function maxGas() external view returns (uint256);
    function maxSingleTransfer() external view returns (uint256);
    function recipient() external view returns (address);
    function recoverTokens(address token, uint256 amount, address to) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function setArbitrumConfig(address _recipient, uint256 _maxGas, uint256 _gasPriceBid) external;
    function setBridgeActive(bool active) external;
    function setBridgeTarget(address target) external;
    function setDailyLimit(uint256 limit) external;
    function setMaxSingleTransfer(uint256 amount) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function withdrawEth(address payable to, uint256 amount) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_bridgeTarget",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxSingleTransfer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_dailyLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "BRIDGE_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BRIDGE_CALLER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeName",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeTarget",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEthValue",
    "inputs": [
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "ethValue",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "dailyLimit",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "dailyUsed",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "executeBridge",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dynamicData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "gasPriceBid",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getArbitrumConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "recipientAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "maxGasLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBidAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeInfo",
    "inputs": [],
    "outputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getDailyUsage",
    "inputs": [],
    "outputs": [
      {
        "name": "used",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "remaining",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastResetDay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxGas",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxSingleTransfer",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recipient",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recoverTokens",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setArbitrumConfig",
    "inputs": [
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeActive",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeTarget",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDailyLimit",
    "inputs": [
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxSingleTransfer",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawEth",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address payable"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ArbitrumConfigUpdated",
    "inputs": [
      {
        "name": "recipient",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "maxGas",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeExecuted",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeStatusUpdated",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeTargetUpdated",
    "inputs": [
      {
        "name": "oldTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitReset",
    "inputs": [
      {
        "name": "day",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "previousUsed",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitUpdated",
    "inputs": [
      {
        "name": "oldLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EthWithdrawn",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeCallFailed",
    "inputs": [
      {
        "name": "reason",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExcessiveAmount",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeERC20FailedOperation",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnauthorizedCaller",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbitrumBridgeProxy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461003957610023610014610187565b96959095949194939293610301565b61002b61003e565b612ad961097f8239612ad990f35b610044565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007090610048565b810190811060018060401b0382111761008857604052565b610052565b906100a061009961003e565b9283610066565b565b5f80fd5b60018060a01b031690565b6100ba906100a6565b90565b6100c6816100b1565b036100cd57565b5f80fd5b905051906100de826100bd565b565b90565b6100ec816100e0565b036100f357565b5f80fd5b90505190610104826100e3565b565b9190610100838203126101825761011f815f85016100d1565b9261012d82602083016100d1565b9261013b83604084016100d1565b9261014981606085016100f7565b9261015782608083016100f7565b9261017f6101688460a085016100d1565b936101768160c086016100f7565b9360e0016100f7565b90565b6100a2565b6101a56134588038038061019a8161008d565b928339810190610106565b9091929394959697565b60018060401b0381116101cb576101c7602091610048565b0190565b610052565b906101e26101dd836101af565b61008d565b918252565b5f7f417262697472756d204272696467650000000000000000000000000000000000910152565b610218600f6101d0565b90610225602083016101e7565b565b61022f61020e565b90565b5f1b90565b9061024860018060a01b0391610232565b9181191691161790565b90565b61026961026461026e926100a6565b610252565b6100a6565b90565b61027a90610255565b90565b61028690610271565b90565b90565b906102a161029c6102a89261027d565b610289565b8254610237565b9055565b906102b85f1991610232565b9181191691161790565b6102d66102d16102db926100e0565b610252565b6100e0565b90565b90565b906102f66102f16102fd926102c2565b6102de565b82546102ac565b9055565b9061033c97969461032e946103359794610327949361031e610227565b919293946106bb565b600861028c565b60096102e1565b600a6102e1565b565b90565b61035561035061035a9261033e565b610252565b6100a6565b90565b61036690610341565b90565b5f0190565b90565b61038561038061038a9261033e565b610232565b61036e565b90565b6103965f610371565b90565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b5190565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610419575b602083101461041457565b6103e5565b91607f1691610409565b5f5260205f2090565b601f602091010490565b1b90565b9190600861045591029161044f5f1984610436565b92610436565b9181191691161790565b919061047561047061047d936102c2565b6102de565b90835461043a565b9055565b5f90565b61049791610491610481565b9161045f565b565b5b8181106104a5575050565b806104b25f600193610485565b0161049a565b9190601f81116104c8575b505050565b6104d46104f993610423565b9060206104e08461042c565b83019310610501575b6104f29061042c565b0190610499565b5f80806104c3565b91506104f2819290506104e9565b1c90565b90610523905f199060080261050f565b191690565b8161053291610513565b906002021790565b90610544816103e1565b9060018060401b038211610602576105668261056085546103f9565b856104b8565b602090601f831160011461059a57918091610589935f9261058e575b5050610528565b90555b565b90915001515f80610582565b601f198316916105a985610423565b925f5b8181106105ea575091600293918560019694106105d0575b5050500201905561058c565b6105e0910151601f841690610513565b90555f80806105c4565b919360206001819287870151815501950192016105ac565b610052565b906106119161053a565b565b60a01b90565b9061062860ff60a01b91610613565b9181191691161790565b151590565b61064090610632565b90565b90565b9061065b61065661066292610637565b610643565b8254610619565b9055565b90565b61067d61067861068292610666565b610252565b6100e0565b90565b634e487b7160e01b5f52601260045260245ffd5b6106a56106ab916100e0565b916100e0565b9081156106b6570490565b610685565b90949391926106c86107e7565b816106e36106dd6106d85f61035d565b6100b1565b916100b1565b148015610799575b61077d5761073a6107489461073261074f986107246107419661071661070f61038d565b829061086d565b5061071f610399565b61086d565b5061072d6103bd565b61086d565b506007610607565b600261028c565b60036102e1565b60046102e1565b61075b60016002610646565b61077b6107744261076e62015180610669565b90610699565b60066102e1565b565b5f63d92e233d60e01b81528061079560048201610369565b0390fd5b50856107b56107af6107aa5f61035d565b6100b1565b916100b1565b146106eb565b90565b6107d26107cd6107d7926107bb565b610252565b6100e0565b90565b6107e460016107be565b90565b6107f96107f26107da565b60016102e1565b565b5f90565b6108089061036e565b90565b90610815906107ff565b5f5260205260405f2090565b9061082b9061027d565b5f5260205260405f2090565b9061084360ff91610232565b9181191691161790565b9061086261085d61086992610637565b610643565b8254610837565b9055565b6108756107fb565b5061088a610884828490610944565b15610632565b5f14610912576108b160016108ac5f6108a481869061080b565b018590610821565b61084d565b906108ba610971565b906108f76108f16108eb7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956107ff565b9261027d565b9261027d565b9261090061003e565b8061090a81610369565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61092f61093491610918565b61091d565b90565b6109419054610923565b90565b61096a915f61095f610965936109586107fb565b508261080b565b01610821565b610937565b90565b5f90565b61097961096d565b50339056fe60806040526004361015610015575b3661109757005b61001f5f3561020e565b806301ffc9a7146102095780630e1508d9146102045780631033b4cc146101ff578063118c38c7146101fa5780631259a5c8146101f557806318b68b8c146101f05780631b9a91a4146101eb578063248a9ca3146101e65780632f2ff15d146101e15780633462fac3146101dc57806336568abe146101d757806336b089d8146101d25780634a65855a146101cd578063501d815c146101c85780635ab1d61c146101c35780635d942ac1146101be57806361b0a56e146101b957806363221490146101b457806365d7a3c9146101af57806366d003ac146101aa57806367eeba0c146101a55780636bcc8c14146101a057806391d148541461019b578063a217fddf14610196578063b20d30a914610191578063c9f5b63e1461018c578063caed5c7f14610187578063d547741f14610182578063ead93c8f1461017d578063ede7cebd146101785763fb8c4b510361000e5761105f565b610ff5565b610f8b565b610f1b565b610ee7565b610e78565b610e36565b610e01565b610d90565b610d5d565b610d0a565b610cc6565b610c3c565b610a1c565b6109ca565b61095b565b610919565b6108a3565b61085e565b6107fc565b6107b9565b610784565b610721565b6106bf565b61064a565b6105b7565b61049a565b610456565b6103cd565b610344565b61029a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61023b81610226565b0361024257565b5f80fd5b9050359061025382610232565b565b9060208282031261026e5761026b915f01610246565b90565b61021e565b151590565b61028190610273565b9052565b9190610298905f60208501940190610278565b565b346102ca576102c66102b56102b0366004610255565b61109f565b6102bd610214565b91829182610285565b0390f35b61021a565b5f9103126102d957565b61021e565b60018060a01b031690565b6102f2906102de565b90565b6102fe906102e9565b9052565b90565b61030e90610302565b9052565b60409061033b610342949695939661033160608401985f8501906102f5565b6020830190610305565b0190610305565b565b34610377576103543660046102cf565b61037361035f61112e565b61036a939193610214565b93849384610312565b0390f35b61021a565b1c90565b90565b610393906008610398930261037c565b610380565b90565b906103a69154610383565b90565b6103b560055f9061039b565b90565b91906103cb905f60208501940190610305565b565b346103fd576103dd3660046102cf565b6103f96103e86103a9565b6103f0610214565b918291826103b8565b0390f35b61021a565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61042e610402565b90565b90565b61043d90610431565b9052565b9190610454905f60208501940190610434565b565b34610486576104663660046102cf565b610482610471610426565b610479610214565b91829182610441565b0390f35b61021a565b61049760065f9061039b565b90565b346104ca576104aa3660046102cf565b6104c66104b561048b565b6104bd610214565b918291826103b8565b0390f35b61021a565b6104d8816102e9565b036104df57565b5f80fd5b905035906104f0826104cf565b565b6104fb81610302565b0361050257565b5f80fd5b90503590610513826104f2565b565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561055b5781359167ffffffffffffffff831161055657602001926001830284011161055157565b61051d565b610519565b610515565b916060838303126105ad57610577825f85016104e3565b926105858360208301610506565b92604082013567ffffffffffffffff81116105a8576105a49201610521565b9091565b610222565b61021e565b5f0190565b346105e9576105d36105ca366004610560565b92919091611515565b6105db610214565b806105e5816105b2565b0390f35b61021a565b6105f7906102de565b90565b610603816105ee565b0361060a57565b5f80fd5b9050359061061b826105fa565b565b91906040838203126106455780610639610642925f860161060e565b93602001610506565b90565b61021e565b346106795761066361065d36600461061d565b906118af565b61066b610214565b80610675816105b2565b0390f35b61021a565b61068781610431565b0361068e57565b5f80fd5b9050359061069f8261067e565b565b906020828203126106ba576106b7915f01610692565b90565b61021e565b346106ef576106eb6106da6106d53660046106a1565b611905565b6106e2610214565b91829182610441565b0390f35b61021a565b919060408382031261071c5780610710610719925f8601610692565b936020016104e3565b90565b61021e565b346107505761073a6107343660046106f4565b90611950565b610742610214565b8061074c816105b2565b0390f35b61021a565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b610781610755565b90565b346107b4576107943660046102cf565b6107b061079f610779565b6107a7610214565b91829182610441565b0390f35b61021a565b346107e8576107d26107cc3660046106f4565b9061195c565b6107da610214565b806107e4816105b2565b0390f35b61021a565b6107f960035f9061039b565b90565b3461082c5761080c3660046102cf565b6108286108176107ed565b61081f610214565b918291826103b8565b0390f35b61021a565b9190604083820312610859578061084d610856925f8601610506565b93602001610506565b90565b61021e565b3461088f5761088b61087a610874366004610831565b906119d9565b610882610214565b918291826103b8565b0390f35b61021a565b6108a060095f9061039b565b90565b346108d3576108b33660046102cf565b6108cf6108be610894565b6108c6610214565b918291826103b8565b0390f35b61021a565b6108e181610273565b036108e857565b5f80fd5b905035906108f9826108d8565b565b9060208282031261091457610911915f016108ec565b90565b61021e565b346109475761093161092c3660046108fb565b611a9e565b610939610214565b80610943816105b2565b0390f35b61021a565b610958600a5f9061039b565b90565b3461098b5761096b3660046102cf565b61098761097661094c565b61097e610214565b918291826103b8565b0390f35b61021a565b90916060828403126109c5576109c26109ab845f85016104e3565b936109b98160208601610506565b936040016104e3565b90565b61021e565b346109f9576109e36109dd366004610990565b91611b1a565b6109eb610214565b806109f5816105b2565b0390f35b61021a565b90602082820312610a1757610a14915f01610506565b90565b61021e565b34610a4a57610a34610a2f3660046109fe565b611b4f565b610a3c610214565b80610a46816105b2565b0390f35b61021a565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610a96575b6020831014610a9157565b610a62565b91607f1691610a86565b60209181520190565b5f5260205f2090565b905f9291805490610acc610ac583610a76565b8094610aa0565b916001811690815f14610b235750600114610ae7575b505050565b610af49192939450610aa9565b915f925b818410610b0b57505001905f8080610ae2565b60018160209295939554848601520191019290610af8565b92949550505060ff19168252151560200201905f8080610ae2565b90610b4891610ab2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610b7390610b4b565b810190811067ffffffffffffffff821117610b8d57604052565b610b55565b90610bb2610bab92610ba2610214565b93848092610b3e565b0383610b69565b565b905f10610bc757610bc490610b92565b90565b610a4f565b610bd860075f90610bb4565b90565b5190565b60209181520190565b90825f9392825e0152565b610c12610c1b602093610c2093610c0981610bdb565b93848093610bdf565b95869101610be8565b610b4b565b0190565b610c399160208201915f818403910152610bf3565b90565b34610c6c57610c4c3660046102cf565b610c68610c57610bcc565b610c5f610214565b91829182610c24565b0390f35b61021a565b60018060a01b031690565b610c8c906008610c91930261037c565b610c71565b90565b90610c9f9154610c7c565b90565b610cae60085f90610c94565b90565b9190610cc4905f602085019401906102f5565b565b34610cf657610cd63660046102cf565b610cf2610ce1610ca2565b610ce9610214565b91829182610cb1565b0390f35b61021a565b610d0760045f9061039b565b90565b34610d3a57610d1a3660046102cf565b610d36610d25610cfb565b610d2d610214565b918291826103b8565b0390f35b61021a565b90602082820312610d5857610d55915f016104e3565b90565b61021e565b34610d8b57610d75610d70366004610d3f565b611c50565b610d7d610214565b80610d87816105b2565b0390f35b61021a565b34610dc157610dbd610dac610da63660046106f4565b90611c92565b610db4610214565b91829182610285565b0390f35b61021a565b90565b5f1b90565b610de2610ddd610de792610dc6565b610dc9565b610431565b90565b610df35f610dce565b90565b610dfe610dea565b90565b34610e3157610e113660046102cf565b610e2d610e1c610df6565b610e24610214565b91829182610441565b0390f35b61021a565b34610e6457610e4e610e493660046109fe565b611d4a565b610e56610214565b80610e60816105b2565b0390f35b61021a565b610e7560025f90610c94565b90565b34610ea857610e883660046102cf565b610ea4610e93610e69565b610e9b610214565b91829182610cb1565b0390f35b61021a565b9091606082840312610ee257610edf610ec8845f85016104e3565b93610ed68160208601610506565b93604001610506565b90565b61021e565b34610f1657610f00610efa366004610ead565b91611dd4565b610f08610214565b80610f12816105b2565b0390f35b61021a565b34610f4a57610f34610f2e3660046106f4565b90611e0b565b610f3c610214565b80610f46816105b2565b0390f35b61021a565b60ff1690565b610f65906008610f6a930261037c565b610f4f565b90565b90610f789154610f55565b90565b610f886002601490610f6d565b90565b34610fbb57610f9b3660046102cf565b610fb7610fa6610f7b565b610fae610214565b91829182610285565b0390f35b61021a565b604090610fec610fe1610ff39597969460608401908482035f860152610bf3565b9660208301906102f5565b0190610278565b565b34611028576110053660046102cf565b611024611010611e28565b61101b939193610214565b93849384610fc0565b0390f35b61021a565b60409061105661105d949695939661104c60608401985f850190610305565b6020830190610305565b0190610305565b565b346110925761106f3660046102cf565b61108e61107a611e8d565b611085939193610214565b9384938461102d565b0390f35b61021a565b5f80fd5b5f90565b6110a761109b565b50806110c26110bc637965db0b60e01b610226565b91610226565b149081156110cf575b5090565b6110d99150611f1b565b5f6110cb565b5f90565b5f90565b5f1c90565b6110f86110fd916110e7565b610c71565b90565b61110a90546110ec565b90565b61111961111e916110e7565b610380565b90565b61112b905461110d565b90565b6111366110df565b5061113f6110e3565b506111486110e3565b506111536008611100565b61115d6009611121565b91611168600a611121565b91929190565b9061118293929161117d611f6d565b6111b3565b61118a611ff1565b565b60a01c90565b61119e6111a39161118c565b610f4f565b90565b6111b09054611192565b90565b9291906111c96111c360026111a6565b15610273565b6111d8576111d6936111f4565b565b5f633df5105960e11b8152806111f0600482016105b2565b0390fd5b92919061121261120c611205610755565b3390611c92565b15610273565b6112215761121f9361136a565b565b5f635c427cd960e01b815280611239600482016105b2565b0390fd5b90565b61125461124f61125992610dc6565b61123d565b6102de565b90565b61126590611240565b90565b61127c61127761128192610dc6565b61123d565b610302565b90565b634e487b7160e01b5f52601160045260245ffd5b6112a76112ad91939293610302565b92610302565b82018092116112b857565b611284565b6112d16112cc6112d6926102de565b61123d565b6102de565b90565b6112e2906112bd565b90565b6112ee906112d9565b90565b6112fa906112bd565b90565b611306906112f1565b90565b906113155f1991610dc9565b9181191691161790565b61133361132e61133892610302565b61123d565b610302565b90565b90565b9061135361134e61135a9261131f565b61133b565b8254611309565b9055565b611367906112f1565b90565b919290928261138961138361137e5f61125c565b6102e9565b916102e9565b146114f957836113a161139b5f611268565b91610302565b146114dd57836113c26113bc6113b76003611121565b610302565b91610302565b116114c1576113cf61205a565b6113e36113dc6005611121565b8590611298565b6113fe6113f86113f36004611121565b610302565b91610302565b116114a55761143091611425611413856112e5565b3361141d306112fd565b908892612166565b839185909192612407565b61144d611446836114416005611121565b611298565b600561133e565b6114576002611100565b906114a061148e6114887f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e89361135e565b9361135e565b93611497610214565b918291826103b8565b0390a3565b5f631c345a2f60e21b8152806114bd600482016105b2565b0390fd5b5f631c345a2f60e21b8152806114d9600482016105b2565b0390fd5b5f631f2a200560e01b8152806114f5600482016105b2565b0390fd5b5f63d92e233d60e01b815280611511600482016105b2565b0390fd5b9061152193929161116e565b565b9061153d91611538611533610402565b612625565b6117ec565b565b611548906112f1565b90565b60207f7300000000000000000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a207a65726f206164647265735f8201520152565b6115a56021604092610bdf565b6115ae8161154b565b0190565b6115c79060208101905f818303910152611598565b90565b156115d157565b6115d9610214565b62461bcd60e51b8152806115ef600482016115b2565b0390fd5b6115fc906112f1565b90565b60207f742062616c616e63650000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20696e73756666696369656e5f8201520152565b6116596029604092610bdf565b611662816115ff565b0190565b61167b9060208101905f81830391015261164c565b90565b1561168557565b61168d610214565b62461bcd60e51b8152806116a360048201611666565b0390fd5b905090565b6116b75f80926116a7565b0190565b6116c4906116ac565b90565b906116da6116d3610214565b9283610b69565b565b67ffffffffffffffff81116116fa576116f6602091610b4b565b0190565b610b55565b9061171161170c836116dc565b6116c7565b918252565b606090565b3d5f146117365761172b3d6116ff565b903d5f602084013e5b565b61173e611716565b90611734565b60207f72206661696c6564000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20455448207472616e7366655f8201520152565b61179e6028604092610bdf565b6117a781611744565b0190565b6117c09060208101905f818303910152611791565b90565b156117ca57565b6117d2610214565b62461bcd60e51b8152806117e8600482016117ab565b0390fd5b6118118161180a6118046117ff5f61125c565b6102e9565b9161153f565b14156115ca565b6118378261183061182a611824306115f3565b31610302565b91610302565b111561167e565b61186b5f806118458461153f565b8561184e610214565b9081611859816116bb565b03925af161186561171b565b506117c3565b6118aa6118987f8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b9261153f565b926118a1610214565b918291826103b8565b0390a2565b906118b991611523565b565b5f90565b6118c890610431565b90565b906118d5906118bf565b5f5260205260405f2090565b90565b6118f06118f5916110e7565b6118e1565b90565b61190290546118e4565b90565b600161191d611923926119166118bb565b505f6118cb565b016118f8565b90565b906119419161193c61193782611905565b612625565b611943565b565b9061194d9161266f565b50565b9061195a91611926565b565b908061197761197161196c61271a565b6102e9565b916102e9565b036119885761198591612727565b50565b5f63334bd91960e11b8152806119a0600482016105b2565b0390fd5b6119b36119b991939293610302565b92610302565b916119c5838202610302565b9281840414901517156119d457565b611284565b906119ec916119e66110e3565b506119a4565b90565b611a0890611a036119fe610402565b612625565b611a58565b565b60a01b90565b90611a1f60ff60a01b91611a0a565b9181191691161790565b611a3290610273565b90565b90565b90611a4d611a48611a5492611a29565b611a35565b8254611a10565b9055565b611a63816002611a38565b611a997fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d591611a90610214565b91829182610285565b0390a1565b611aa7906119ef565b565b90611ac49291611abf611aba610dea565b612625565b611ac6565b565b919081611ae3611add611ad85f61125c565b6102e9565b916102e9565b14611afe57611af4611afc936112e5565b9190916127eb565b565b5f63d92e233d60e01b815280611b16600482016105b2565b0390fd5b90611b259291611aa9565b565b611b4090611b3b611b36610402565b612625565b611b42565b565b611b4d90600361133e565b565b611b5890611b27565b565b611b7390611b6e611b69610402565b612625565b611bb3565b565b90611b8660018060a01b0391610dc9565b9181191691161790565b90565b90611ba8611ba3611baf9261135e565b611b90565b8254611b75565b9055565b80611bce611bc8611bc35f61125c565b6102e9565b916102e9565b14611c3457611bdd6002611100565b611be8826002611b93565b90611c1c611c167fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd1082980699361135e565b9161135e565b91611c25610214565b80611c2f816105b2565b0390a3565b5f63d92e233d60e01b815280611c4c600482016105b2565b0390fd5b611c5990611b5a565b565b90611c659061135e565b5f5260205260405f2090565b611c7d611c82916110e7565b610f4f565b90565b611c8f9054611c71565b90565b611cb8915f611cad611cb393611ca661109b565b50826118cb565b01611c5b565b611c85565b90565b611cd490611ccf611cca610402565b612625565b611cf9565b565b916020611cf7929493611cf060408201965f830190610305565b0190610305565b565b611d036004611121565b611d0e82600461133e565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf91611d45611d3c610214565b92839283611cd6565b0390a1565b611d5390611cbb565b565b90611d709291611d6b611d66610402565b612625565b611d72565b565b919091611d80816008611b93565b611d8b83600961133e565b611d9682600a61133e565b919091611dcf7fb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da320093611dc6610214565b93849384610312565b0390a1565b90611ddf9291611d55565b565b90611dfc91611df7611df282611905565b612625565b611dfe565b565b90611e0891612727565b50565b90611e1591611de1565b565b606090565b611e2590610b92565b90565b611e30611e17565b50611e396110df565b50611e4261109b565b506007611e4f6002611100565b91611e63611e5d60026111a6565b92611e1c565b929190565b611e77611e7d91939293610302565b92610302565b8203918211611e8857565b611284565b611e956110e3565b50611e9e6110e3565b50611ea76110e3565b50611eb26005611121565b611ebc6004611121565b91611ec76004611121565b611ee2611edc611ed76005611121565b610302565b91610302565b115f14611f0d57611f06611ef66004611121565b611f006005611121565b90611e68565b5b91929190565b611f165f611268565b611f07565b611f2361109b565b50611f3d611f376301ffc9a760e01b610226565b91610226565b1490565b90565b611f58611f53611f5d92611f41565b61123d565b610302565b90565b611f6a6002611f44565b90565b611f776001611121565b611f90611f8a611f85611f60565b610302565b91610302565b14611fa957611fa7611fa0611f60565b600161133e565b565b5f633ee5aeb560e01b815280611fc1600482016105b2565b0390fd5b90565b611fdc611fd7611fe192611fc5565b61123d565b610302565b90565b611fee6001611fc8565b90565b612003611ffc611fe4565b600161133e565b565b90565b61201c61201761202192612005565b61123d565b610302565b90565b634e487b7160e01b5f52601260045260245ffd5b61204461204a91610302565b91610302565b908115612055570490565b612024565b6120704261206a62015180612008565b90612038565b8061208c6120866120816006611121565b610302565b91610302565b11612095575b50565b806120f7916120a46005611121565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab916120da6120d1610214565b92839283611cd6565b0390a16120f06120e95f611268565b600561133e565b600661133e565b5f612092565b612106906112f1565b90565b63ffffffff1690565b60e01b90565b61212c61212761213192612109565b612112565b610226565b90565b60409061215d612164949695939661215360608401985f8501906102f5565b60208301906102f5565b0190610305565b565b6004926121a06121b495936121af93946121876323b872dd92949192612118565b93612190610214565b9788956020870190815201612134565b60208201810382520383610b69565b612839565b565b5090565b90916060828403126121ef576121ec6121d5845f850161060e565b936121e38160208601610506565b93604001610506565b90565b61021e565b61220c6122066122129295939561153f565b9461131f565b9261131f565b90565b90565b61222c61222761223192612215565b61123d565b610302565b90565b61223d906112bd565b90565b61224990612234565b90565b612255906112f1565b90565b90505190612265826104cf565b565b906020828203126122805761227d915f01612258565b90565b61021e565b61228d610214565b3d5f823e3d90fd5b6122a05f8092610bdf565b0190565b906122c7916122ba60408201925f830190610305565b6020818303910152612295565b90565b5f80fd5b909291926122e36122de826116dc565b6116c7565b938185526020850190828401116122ff576122fd92610be8565b565b6122ca565b9080601f830112156123225781602061231f935191016122ce565b90565b610515565b90602082820312612357575f82015167ffffffffffffffff81116123525761234f9201612304565b90565b610222565b61021e565b5190565b60209181520190565b6123886123916020936123969361237f8161235c565b93848093612360565b95869101610be8565b610b4b565b0190565b93946123e361240498966123d96123f7966123cf6123ed969b976123c560e08c019d5f8d01906102f5565b60208b01906102f5565b60408901906102f5565b6060870190610305565b6080850190610305565b60a0830190610305565b60c0818403910152612369565b90565b919290926124168183906121b6565b6124286124225f611268565b91610302565b115f146125f5576124446124dd939261244a92908101906121ba565b916121f4565b92919490945b94929161246366038d7ea4c68000612218565b926124796124728683906119a4565b8590611298565b93612497612486846112e5565b6124906002611100565b869161291d565b60206124b36124ae6124a96002611100565b612240565b61224c565b63bda009fe906124d286926124c6610214565b9b8c9485938493612112565b835260048301610cb1565b03915afa9384156125f05761252861253761258b93612514612580985f9c8d916125c2575b5061250c896112e5565b90869161291d565b61251c610214565b928391602083016122a4565b60208201810382520382610b69565b61255161254c6125476002611100565b612240565b61224c565b93634fb1a07b979497949598612566306115f3565b9b9390919293612574610214565b9c8d9b8c9a8b99612112565b89526004890161239a565b03925af180156125bd5761259d575b50565b6125b8903d805f833e6125b08183610b69565b810190612327565b61259a565b612285565b6125e3915060203d81116125e9575b6125db8183610b69565b810190612267565b5f612502565b503d6125d1565b612285565b5050906124dd906126066008611100565b926126116009611121565b9161261c600a611121565b94929492612450565b6126379061263161271a565b906129fc565b565b9061264560ff91610dc9565b9181191691161790565b9061266461265f61266b92611a29565b611a35565b8254612639565b9055565b61267761109b565b5061268c612686828490611c92565b15610273565b5f14612714576126b360016126ae5f6126a68186906118cb565b018590611c5b565b61264f565b906126bc61271a565b906126f96126f36126ed7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956118bf565b9261135e565b9261135e565b92612702610214565b8061270c816105b2565b0390a4600190565b50505f90565b6127226110df565b503390565b61272f61109b565b5061273b818390611c92565b5f146127c2576127615f61275c5f6127548186906118cb565b018590611c5b565b61264f565b9061276a61271a565b906127a76127a161279b7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956118bf565b9261135e565b9261135e565b926127b0610214565b806127ba816105b2565b0390a4600190565b50505f90565b9160206127e99294936127e260408201965f8301906102f5565b0190610305565b565b90612832612837936128236004949361280a63a9059cbb919391612118565b92612813610214565b96879460208601908152016127c8565b60208201810382520383610b69565b612839565b565b905f6020916128466110e3565b5061284f6110e3565b50828151910182855af1156128e2573d5f519061287461286e5f611268565b91610302565b145f146128c85750612885816120fd565b3b6128986128925f611268565b91610302565b145b6128a15750565b6128ad6128c4916120fd565b5f918291635274afe760e01b835260048301610cb1565b0390fd5b6128db6128d56001611fc8565b91610302565b141561289a565b6040513d5f823e3d90fd5b6128f690611268565b9052565b91602061291b92949361291460408201965f8301906102f5565b01906128ed565b565b909161296060049161295163095ea7b3612938879391612118565b92612941610214565b95869460208601908152016127c8565b60208201810382520382610b69565b9061297561296f828490612a37565b15610273565b61297f575b505050565b6129cc60046129d1946129c784916129b863095ea7b361299f5f91612118565b926129a8610214565b96879460208601908152016128fa565b60208201810382520383610b69565b612839565b612839565b5f808061297a565b9160206129fa9294936129f360408201965f8301906102f5565b0190610434565b565b90612a11612a0b838390611c92565b15610273565b612a19575050565b612a335f92839263e2517d3f60e01b8452600484016129d9565b0390fd5b905f602091612a4461109b565b50612a4d61109b565b50612a566110e3565b50612a5f6110e3565b50828151910182855af13d915f51919283612a7b575b50505090565b90919250612a91612a8b5f611268565b91610302565b145f14612abf57612aa291506120fd565b3b612ab5612aaf5f611268565b91610302565b115b5f8080612a75565b50612ad3612acd6001611fc8565b91610302565b14612ab756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\09Wa\0#a\0\x14a\x01\x87V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x03\x01V[a\0+a\0>V[a*\xD9a\t\x7F\x829a*\xD9\x90\xF3[a\0DV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0p\x90a\0HV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x88W`@RV[a\0RV[\x90a\0\xA0a\0\x99a\0>V[\x92\x83a\0fV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xBA\x90a\0\xA6V[\x90V[a\0\xC6\x81a\0\xB1V[\x03a\0\xCDWV[_\x80\xFD[\x90PQ\x90a\0\xDE\x82a\0\xBDV[V[\x90V[a\0\xEC\x81a\0\xE0V[\x03a\0\xF3WV[_\x80\xFD[\x90PQ\x90a\x01\x04\x82a\0\xE3V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x01\x82Wa\x01\x1F\x81_\x85\x01a\0\xD1V[\x92a\x01-\x82` \x83\x01a\0\xD1V[\x92a\x01;\x83`@\x84\x01a\0\xD1V[\x92a\x01I\x81``\x85\x01a\0\xF7V[\x92a\x01W\x82`\x80\x83\x01a\0\xF7V[\x92a\x01\x7Fa\x01h\x84`\xA0\x85\x01a\0\xD1V[\x93a\x01v\x81`\xC0\x86\x01a\0\xF7V[\x93`\xE0\x01a\0\xF7V[\x90V[a\0\xA2V[a\x01\xA5a4X\x808\x03\x80a\x01\x9A\x81a\0\x8DV[\x92\x839\x81\x01\x90a\x01\x06V[\x90\x91\x92\x93\x94\x95\x96\x97V[`\x01\x80`@\x1B\x03\x81\x11a\x01\xCBWa\x01\xC7` \x91a\0HV[\x01\x90V[a\0RV[\x90a\x01\xE2a\x01\xDD\x83a\x01\xAFV[a\0\x8DV[\x91\x82RV[_\x7FArbitrum Bridge\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\x18`\x0Fa\x01\xD0V[\x90a\x02%` \x83\x01a\x01\xE7V[V[a\x02/a\x02\x0EV[\x90V[_\x1B\x90V[\x90a\x02H`\x01\x80`\xA0\x1B\x03\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x02ia\x02da\x02n\x92a\0\xA6V[a\x02RV[a\0\xA6V[\x90V[a\x02z\x90a\x02UV[\x90V[a\x02\x86\x90a\x02qV[\x90V[\x90V[\x90a\x02\xA1a\x02\x9Ca\x02\xA8\x92a\x02}V[a\x02\x89V[\x82Ta\x027V[\x90UV[\x90a\x02\xB8_\x19\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xD6a\x02\xD1a\x02\xDB\x92a\0\xE0V[a\x02RV[a\0\xE0V[\x90V[\x90V[\x90a\x02\xF6a\x02\xF1a\x02\xFD\x92a\x02\xC2V[a\x02\xDEV[\x82Ta\x02\xACV[\x90UV[\x90a\x03<\x97\x96\x94a\x03.\x94a\x035\x97\x94a\x03'\x94\x93a\x03\x1Ea\x02'V[\x91\x92\x93\x94a\x06\xBBV[`\x08a\x02\x8CV[`\ta\x02\xE1V[`\na\x02\xE1V[V[\x90V[a\x03Ua\x03Pa\x03Z\x92a\x03>V[a\x02RV[a\0\xA6V[\x90V[a\x03f\x90a\x03AV[\x90V[_\x01\x90V[\x90V[a\x03\x85a\x03\x80a\x03\x8A\x92a\x03>V[a\x022V[a\x03nV[\x90V[a\x03\x96_a\x03qV[\x90V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04\x19W[` \x83\x10\x14a\x04\x14WV[a\x03\xE5V[\x91`\x7F\x16\x91a\x04\tV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x04U\x91\x02\x91a\x04O_\x19\x84a\x046V[\x92a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x04ua\x04pa\x04}\x93a\x02\xC2V[a\x02\xDEV[\x90\x83Ta\x04:V[\x90UV[_\x90V[a\x04\x97\x91a\x04\x91a\x04\x81V[\x91a\x04_V[V[[\x81\x81\x10a\x04\xA5WPPV[\x80a\x04\xB2_`\x01\x93a\x04\x85V[\x01a\x04\x9AV[\x91\x90`\x1F\x81\x11a\x04\xC8W[PPPV[a\x04\xD4a\x04\xF9\x93a\x04#V[\x90` a\x04\xE0\x84a\x04,V[\x83\x01\x93\x10a\x05\x01W[a\x04\xF2\x90a\x04,V[\x01\x90a\x04\x99V[_\x80\x80a\x04\xC3V[\x91Pa\x04\xF2\x81\x92\x90Pa\x04\xE9V[\x1C\x90V[\x90a\x05#\x90_\x19\x90`\x08\x02a\x05\x0FV[\x19\x16\x90V[\x81a\x052\x91a\x05\x13V[\x90`\x02\x02\x17\x90V[\x90a\x05D\x81a\x03\xE1V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x06\x02Wa\x05f\x82a\x05`\x85Ta\x03\xF9V[\x85a\x04\xB8V[` \x90`\x1F\x83\x11`\x01\x14a\x05\x9AW\x91\x80\x91a\x05\x89\x93_\x92a\x05\x8EW[PPa\x05(V[\x90U[V[\x90\x91P\x01Q_\x80a\x05\x82V[`\x1F\x19\x83\x16\x91a\x05\xA9\x85a\x04#V[\x92_[\x81\x81\x10a\x05\xEAWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x05\xD0W[PPP\x02\x01\x90Ua\x05\x8CV[a\x05\xE0\x91\x01Q`\x1F\x84\x16\x90a\x05\x13V[\x90U_\x80\x80a\x05\xC4V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x05\xACV[a\0RV[\x90a\x06\x11\x91a\x05:V[V[`\xA0\x1B\x90V[\x90a\x06(`\xFF`\xA0\x1B\x91a\x06\x13V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x06@\x90a\x062V[\x90V[\x90V[\x90a\x06[a\x06Va\x06b\x92a\x067V[a\x06CV[\x82Ta\x06\x19V[\x90UV[\x90V[a\x06}a\x06xa\x06\x82\x92a\x06fV[a\x02RV[a\0\xE0V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x06\xA5a\x06\xAB\x91a\0\xE0V[\x91a\0\xE0V[\x90\x81\x15a\x06\xB6W\x04\x90V[a\x06\x85V[\x90\x94\x93\x91\x92a\x06\xC8a\x07\xE7V[\x81a\x06\xE3a\x06\xDDa\x06\xD8_a\x03]V[a\0\xB1V[\x91a\0\xB1V[\x14\x80\x15a\x07\x99W[a\x07}Wa\x07:a\x07H\x94a\x072a\x07O\x98a\x07$a\x07A\x96a\x07\x16a\x07\x0Fa\x03\x8DV[\x82\x90a\x08mV[Pa\x07\x1Fa\x03\x99V[a\x08mV[Pa\x07-a\x03\xBDV[a\x08mV[P`\x07a\x06\x07V[`\x02a\x02\x8CV[`\x03a\x02\xE1V[`\x04a\x02\xE1V[a\x07[`\x01`\x02a\x06FV[a\x07{a\x07tBa\x07nb\x01Q\x80a\x06iV[\x90a\x06\x99V[`\x06a\x02\xE1V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x07\x95`\x04\x82\x01a\x03iV[\x03\x90\xFD[P\x85a\x07\xB5a\x07\xAFa\x07\xAA_a\x03]V[a\0\xB1V[\x91a\0\xB1V[\x14a\x06\xEBV[\x90V[a\x07\xD2a\x07\xCDa\x07\xD7\x92a\x07\xBBV[a\x02RV[a\0\xE0V[\x90V[a\x07\xE4`\x01a\x07\xBEV[\x90V[a\x07\xF9a\x07\xF2a\x07\xDAV[`\x01a\x02\xE1V[V[_\x90V[a\x08\x08\x90a\x03nV[\x90V[\x90a\x08\x15\x90a\x07\xFFV[_R` R`@_ \x90V[\x90a\x08+\x90a\x02}V[_R` R`@_ \x90V[\x90a\x08C`\xFF\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08ba\x08]a\x08i\x92a\x067V[a\x06CV[\x82Ta\x087V[\x90UV[a\x08ua\x07\xFBV[Pa\x08\x8Aa\x08\x84\x82\x84\x90a\tDV[\x15a\x062V[_\x14a\t\x12Wa\x08\xB1`\x01a\x08\xAC_a\x08\xA4\x81\x86\x90a\x08\x0BV[\x01\x85\x90a\x08!V[a\x08MV[\x90a\x08\xBAa\tqV[\x90a\x08\xF7a\x08\xF1a\x08\xEB\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x07\xFFV[\x92a\x02}V[\x92a\x02}V[\x92a\t\0a\0>V[\x80a\t\n\x81a\x03iV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\t/a\t4\x91a\t\x18V[a\t\x1DV[\x90V[a\tA\x90Ta\t#V[\x90V[a\tj\x91_a\t_a\te\x93a\tXa\x07\xFBV[P\x82a\x08\x0BV[\x01a\x08!V[a\t7V[\x90V[_\x90V[a\tya\tmV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x10\x97W\0[a\0\x1F_5a\x02\x0EV[\x80c\x01\xFF\xC9\xA7\x14a\x02\tW\x80c\x0E\x15\x08\xD9\x14a\x02\x04W\x80c\x103\xB4\xCC\x14a\x01\xFFW\x80c\x11\x8C8\xC7\x14a\x01\xFAW\x80c\x12Y\xA5\xC8\x14a\x01\xF5W\x80c\x18\xB6\x8B\x8C\x14a\x01\xF0W\x80c\x1B\x9A\x91\xA4\x14a\x01\xEBW\x80c$\x8A\x9C\xA3\x14a\x01\xE6W\x80c//\xF1]\x14a\x01\xE1W\x80c4b\xFA\xC3\x14a\x01\xDCW\x80c6V\x8A\xBE\x14a\x01\xD7W\x80c6\xB0\x89\xD8\x14a\x01\xD2W\x80cJe\x85Z\x14a\x01\xCDW\x80cP\x1D\x81\\\x14a\x01\xC8W\x80cZ\xB1\xD6\x1C\x14a\x01\xC3W\x80c]\x94*\xC1\x14a\x01\xBEW\x80ca\xB0\xA5n\x14a\x01\xB9W\x80cc\"\x14\x90\x14a\x01\xB4W\x80ce\xD7\xA3\xC9\x14a\x01\xAFW\x80cf\xD0\x03\xAC\x14a\x01\xAAW\x80cg\xEE\xBA\x0C\x14a\x01\xA5W\x80ck\xCC\x8C\x14\x14a\x01\xA0W\x80c\x91\xD1HT\x14a\x01\x9BW\x80c\xA2\x17\xFD\xDF\x14a\x01\x96W\x80c\xB2\r0\xA9\x14a\x01\x91W\x80c\xC9\xF5\xB6>\x14a\x01\x8CW\x80c\xCA\xED\\\x7F\x14a\x01\x87W\x80c\xD5Gt\x1F\x14a\x01\x82W\x80c\xEA\xD9<\x8F\x14a\x01}W\x80c\xED\xE7\xCE\xBD\x14a\x01xWc\xFB\x8CKQ\x03a\0\x0EWa\x10_V[a\x0F\xF5V[a\x0F\x8BV[a\x0F\x1BV[a\x0E\xE7V[a\x0ExV[a\x0E6V[a\x0E\x01V[a\r\x90V[a\r]V[a\r\nV[a\x0C\xC6V[a\x0C<V[a\n\x1CV[a\t\xCAV[a\t[V[a\t\x19V[a\x08\xA3V[a\x08^V[a\x07\xFCV[a\x07\xB9V[a\x07\x84V[a\x07!V[a\x06\xBFV[a\x06JV[a\x05\xB7V[a\x04\x9AV[a\x04VV[a\x03\xCDV[a\x03DV[a\x02\x9AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02;\x81a\x02&V[\x03a\x02BWV[_\x80\xFD[\x90P5\x90a\x02S\x82a\x022V[V[\x90` \x82\x82\x03\x12a\x02nWa\x02k\x91_\x01a\x02FV[\x90V[a\x02\x1EV[\x15\x15\x90V[a\x02\x81\x90a\x02sV[\x90RV[\x91\x90a\x02\x98\x90_` \x85\x01\x94\x01\x90a\x02xV[V[4a\x02\xCAWa\x02\xC6a\x02\xB5a\x02\xB06`\x04a\x02UV[a\x10\x9FV[a\x02\xBDa\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xF3[a\x02\x1AV[_\x91\x03\x12a\x02\xD9WV[a\x02\x1EV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xF2\x90a\x02\xDEV[\x90V[a\x02\xFE\x90a\x02\xE9V[\x90RV[\x90V[a\x03\x0E\x90a\x03\x02V[\x90RV[`@\x90a\x03;a\x03B\x94\x96\x95\x93\x96a\x031``\x84\x01\x98_\x85\x01\x90a\x02\xF5V[` \x83\x01\x90a\x03\x05V[\x01\x90a\x03\x05V[V[4a\x03wWa\x03T6`\x04a\x02\xCFV[a\x03sa\x03_a\x11.V[a\x03j\x93\x91\x93a\x02\x14V[\x93\x84\x93\x84a\x03\x12V[\x03\x90\xF3[a\x02\x1AV[\x1C\x90V[\x90V[a\x03\x93\x90`\x08a\x03\x98\x93\x02a\x03|V[a\x03\x80V[\x90V[\x90a\x03\xA6\x91Ta\x03\x83V[\x90V[a\x03\xB5`\x05_\x90a\x03\x9BV[\x90V[\x91\x90a\x03\xCB\x90_` \x85\x01\x94\x01\x90a\x03\x05V[V[4a\x03\xFDWa\x03\xDD6`\x04a\x02\xCFV[a\x03\xF9a\x03\xE8a\x03\xA9V[a\x03\xF0a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x04.a\x04\x02V[\x90V[\x90V[a\x04=\x90a\x041V[\x90RV[\x91\x90a\x04T\x90_` \x85\x01\x94\x01\x90a\x044V[V[4a\x04\x86Wa\x04f6`\x04a\x02\xCFV[a\x04\x82a\x04qa\x04&V[a\x04ya\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[a\x04\x97`\x06_\x90a\x03\x9BV[\x90V[4a\x04\xCAWa\x04\xAA6`\x04a\x02\xCFV[a\x04\xC6a\x04\xB5a\x04\x8BV[a\x04\xBDa\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[a\x04\xD8\x81a\x02\xE9V[\x03a\x04\xDFWV[_\x80\xFD[\x90P5\x90a\x04\xF0\x82a\x04\xCFV[V[a\x04\xFB\x81a\x03\x02V[\x03a\x05\x02WV[_\x80\xFD[\x90P5\x90a\x05\x13\x82a\x04\xF2V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05[W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05VW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05QWV[a\x05\x1DV[a\x05\x19V[a\x05\x15V[\x91``\x83\x83\x03\x12a\x05\xADWa\x05w\x82_\x85\x01a\x04\xE3V[\x92a\x05\x85\x83` \x83\x01a\x05\x06V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xA8Wa\x05\xA4\x92\x01a\x05!V[\x90\x91V[a\x02\"V[a\x02\x1EV[_\x01\x90V[4a\x05\xE9Wa\x05\xD3a\x05\xCA6`\x04a\x05`V[\x92\x91\x90\x91a\x15\x15V[a\x05\xDBa\x02\x14V[\x80a\x05\xE5\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x05\xF7\x90a\x02\xDEV[\x90V[a\x06\x03\x81a\x05\xEEV[\x03a\x06\nWV[_\x80\xFD[\x90P5\x90a\x06\x1B\x82a\x05\xFAV[V[\x91\x90`@\x83\x82\x03\x12a\x06EW\x80a\x069a\x06B\x92_\x86\x01a\x06\x0EV[\x93` \x01a\x05\x06V[\x90V[a\x02\x1EV[4a\x06yWa\x06ca\x06]6`\x04a\x06\x1DV[\x90a\x18\xAFV[a\x06ka\x02\x14V[\x80a\x06u\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x06\x87\x81a\x041V[\x03a\x06\x8EWV[_\x80\xFD[\x90P5\x90a\x06\x9F\x82a\x06~V[V[\x90` \x82\x82\x03\x12a\x06\xBAWa\x06\xB7\x91_\x01a\x06\x92V[\x90V[a\x02\x1EV[4a\x06\xEFWa\x06\xEBa\x06\xDAa\x06\xD56`\x04a\x06\xA1V[a\x19\x05V[a\x06\xE2a\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[\x91\x90`@\x83\x82\x03\x12a\x07\x1CW\x80a\x07\x10a\x07\x19\x92_\x86\x01a\x06\x92V[\x93` \x01a\x04\xE3V[\x90V[a\x02\x1EV[4a\x07PWa\x07:a\x0746`\x04a\x06\xF4V[\x90a\x19PV[a\x07Ba\x02\x14V[\x80a\x07L\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x07\x81a\x07UV[\x90V[4a\x07\xB4Wa\x07\x946`\x04a\x02\xCFV[a\x07\xB0a\x07\x9Fa\x07yV[a\x07\xA7a\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[4a\x07\xE8Wa\x07\xD2a\x07\xCC6`\x04a\x06\xF4V[\x90a\x19\\V[a\x07\xDAa\x02\x14V[\x80a\x07\xE4\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x07\xF9`\x03_\x90a\x03\x9BV[\x90V[4a\x08,Wa\x08\x0C6`\x04a\x02\xCFV[a\x08(a\x08\x17a\x07\xEDV[a\x08\x1Fa\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x91\x90`@\x83\x82\x03\x12a\x08YW\x80a\x08Ma\x08V\x92_\x86\x01a\x05\x06V[\x93` \x01a\x05\x06V[\x90V[a\x02\x1EV[4a\x08\x8FWa\x08\x8Ba\x08za\x08t6`\x04a\x081V[\x90a\x19\xD9V[a\x08\x82a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[a\x08\xA0`\t_\x90a\x03\x9BV[\x90V[4a\x08\xD3Wa\x08\xB36`\x04a\x02\xCFV[a\x08\xCFa\x08\xBEa\x08\x94V[a\x08\xC6a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[a\x08\xE1\x81a\x02sV[\x03a\x08\xE8WV[_\x80\xFD[\x90P5\x90a\x08\xF9\x82a\x08\xD8V[V[\x90` \x82\x82\x03\x12a\t\x14Wa\t\x11\x91_\x01a\x08\xECV[\x90V[a\x02\x1EV[4a\tGWa\t1a\t,6`\x04a\x08\xFBV[a\x1A\x9EV[a\t9a\x02\x14V[\x80a\tC\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\tX`\n_\x90a\x03\x9BV[\x90V[4a\t\x8BWa\tk6`\x04a\x02\xCFV[a\t\x87a\tva\tLV[a\t~a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x90\x91``\x82\x84\x03\x12a\t\xC5Wa\t\xC2a\t\xAB\x84_\x85\x01a\x04\xE3V[\x93a\t\xB9\x81` \x86\x01a\x05\x06V[\x93`@\x01a\x04\xE3V[\x90V[a\x02\x1EV[4a\t\xF9Wa\t\xE3a\t\xDD6`\x04a\t\x90V[\x91a\x1B\x1AV[a\t\xEBa\x02\x14V[\x80a\t\xF5\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[\x90` \x82\x82\x03\x12a\n\x17Wa\n\x14\x91_\x01a\x05\x06V[\x90V[a\x02\x1EV[4a\nJWa\n4a\n/6`\x04a\t\xFEV[a\x1BOV[a\n<a\x02\x14V[\x80a\nF\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\n\x96W[` \x83\x10\x14a\n\x91WV[a\nbV[\x91`\x7F\x16\x91a\n\x86V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\n\xCCa\n\xC5\x83a\nvV[\x80\x94a\n\xA0V[\x91`\x01\x81\x16\x90\x81_\x14a\x0B#WP`\x01\x14a\n\xE7W[PPPV[a\n\xF4\x91\x92\x93\x94Pa\n\xA9V[\x91_\x92[\x81\x84\x10a\x0B\x0BWPP\x01\x90_\x80\x80a\n\xE2V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\n\xF8V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\n\xE2V[\x90a\x0BH\x91a\n\xB2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0Bs\x90a\x0BKV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\x8DW`@RV[a\x0BUV[\x90a\x0B\xB2a\x0B\xAB\x92a\x0B\xA2a\x02\x14V[\x93\x84\x80\x92a\x0B>V[\x03\x83a\x0BiV[V[\x90_\x10a\x0B\xC7Wa\x0B\xC4\x90a\x0B\x92V[\x90V[a\nOV[a\x0B\xD8`\x07_\x90a\x0B\xB4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0C\x12a\x0C\x1B` \x93a\x0C \x93a\x0C\t\x81a\x0B\xDBV[\x93\x84\x80\x93a\x0B\xDFV[\x95\x86\x91\x01a\x0B\xE8V[a\x0BKV[\x01\x90V[a\x0C9\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0B\xF3V[\x90V[4a\x0ClWa\x0CL6`\x04a\x02\xCFV[a\x0Cha\x0CWa\x0B\xCCV[a\x0C_a\x02\x14V[\x91\x82\x91\x82a\x0C$V[\x03\x90\xF3[a\x02\x1AV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\x8C\x90`\x08a\x0C\x91\x93\x02a\x03|V[a\x0CqV[\x90V[\x90a\x0C\x9F\x91Ta\x0C|V[\x90V[a\x0C\xAE`\x08_\x90a\x0C\x94V[\x90V[\x91\x90a\x0C\xC4\x90_` \x85\x01\x94\x01\x90a\x02\xF5V[V[4a\x0C\xF6Wa\x0C\xD66`\x04a\x02\xCFV[a\x0C\xF2a\x0C\xE1a\x0C\xA2V[a\x0C\xE9a\x02\x14V[\x91\x82\x91\x82a\x0C\xB1V[\x03\x90\xF3[a\x02\x1AV[a\r\x07`\x04_\x90a\x03\x9BV[\x90V[4a\r:Wa\r\x1A6`\x04a\x02\xCFV[a\r6a\r%a\x0C\xFBV[a\r-a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x90` \x82\x82\x03\x12a\rXWa\rU\x91_\x01a\x04\xE3V[\x90V[a\x02\x1EV[4a\r\x8BWa\rua\rp6`\x04a\r?V[a\x1CPV[a\r}a\x02\x14V[\x80a\r\x87\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[4a\r\xC1Wa\r\xBDa\r\xACa\r\xA66`\x04a\x06\xF4V[\x90a\x1C\x92V[a\r\xB4a\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xF3[a\x02\x1AV[\x90V[_\x1B\x90V[a\r\xE2a\r\xDDa\r\xE7\x92a\r\xC6V[a\r\xC9V[a\x041V[\x90V[a\r\xF3_a\r\xCEV[\x90V[a\r\xFEa\r\xEAV[\x90V[4a\x0E1Wa\x0E\x116`\x04a\x02\xCFV[a\x0E-a\x0E\x1Ca\r\xF6V[a\x0E$a\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[4a\x0EdWa\x0ENa\x0EI6`\x04a\t\xFEV[a\x1DJV[a\x0EVa\x02\x14V[\x80a\x0E`\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x0Eu`\x02_\x90a\x0C\x94V[\x90V[4a\x0E\xA8Wa\x0E\x886`\x04a\x02\xCFV[a\x0E\xA4a\x0E\x93a\x0EiV[a\x0E\x9Ba\x02\x14V[\x91\x82\x91\x82a\x0C\xB1V[\x03\x90\xF3[a\x02\x1AV[\x90\x91``\x82\x84\x03\x12a\x0E\xE2Wa\x0E\xDFa\x0E\xC8\x84_\x85\x01a\x04\xE3V[\x93a\x0E\xD6\x81` \x86\x01a\x05\x06V[\x93`@\x01a\x05\x06V[\x90V[a\x02\x1EV[4a\x0F\x16Wa\x0F\0a\x0E\xFA6`\x04a\x0E\xADV[\x91a\x1D\xD4V[a\x0F\x08a\x02\x14V[\x80a\x0F\x12\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[4a\x0FJWa\x0F4a\x0F.6`\x04a\x06\xF4V[\x90a\x1E\x0BV[a\x0F<a\x02\x14V[\x80a\x0FF\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[`\xFF\x16\x90V[a\x0Fe\x90`\x08a\x0Fj\x93\x02a\x03|V[a\x0FOV[\x90V[\x90a\x0Fx\x91Ta\x0FUV[\x90V[a\x0F\x88`\x02`\x14\x90a\x0FmV[\x90V[4a\x0F\xBBWa\x0F\x9B6`\x04a\x02\xCFV[a\x0F\xB7a\x0F\xA6a\x0F{V[a\x0F\xAEa\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xF3[a\x02\x1AV[`@\x90a\x0F\xECa\x0F\xE1a\x0F\xF3\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0B\xF3V[\x96` \x83\x01\x90a\x02\xF5V[\x01\x90a\x02xV[V[4a\x10(Wa\x10\x056`\x04a\x02\xCFV[a\x10$a\x10\x10a\x1E(V[a\x10\x1B\x93\x91\x93a\x02\x14V[\x93\x84\x93\x84a\x0F\xC0V[\x03\x90\xF3[a\x02\x1AV[`@\x90a\x10Va\x10]\x94\x96\x95\x93\x96a\x10L``\x84\x01\x98_\x85\x01\x90a\x03\x05V[` \x83\x01\x90a\x03\x05V[\x01\x90a\x03\x05V[V[4a\x10\x92Wa\x10o6`\x04a\x02\xCFV[a\x10\x8Ea\x10za\x1E\x8DV[a\x10\x85\x93\x91\x93a\x02\x14V[\x93\x84\x93\x84a\x10-V[\x03\x90\xF3[a\x02\x1AV[_\x80\xFD[_\x90V[a\x10\xA7a\x10\x9BV[P\x80a\x10\xC2a\x10\xBCcye\xDB\x0B`\xE0\x1Ba\x02&V[\x91a\x02&V[\x14\x90\x81\x15a\x10\xCFW[P\x90V[a\x10\xD9\x91Pa\x1F\x1BV[_a\x10\xCBV[_\x90V[_\x90V[_\x1C\x90V[a\x10\xF8a\x10\xFD\x91a\x10\xE7V[a\x0CqV[\x90V[a\x11\n\x90Ta\x10\xECV[\x90V[a\x11\x19a\x11\x1E\x91a\x10\xE7V[a\x03\x80V[\x90V[a\x11+\x90Ta\x11\rV[\x90V[a\x116a\x10\xDFV[Pa\x11?a\x10\xE3V[Pa\x11Ha\x10\xE3V[Pa\x11S`\x08a\x11\0V[a\x11]`\ta\x11!V[\x91a\x11h`\na\x11!V[\x91\x92\x91\x90V[\x90a\x11\x82\x93\x92\x91a\x11}a\x1FmV[a\x11\xB3V[a\x11\x8Aa\x1F\xF1V[V[`\xA0\x1C\x90V[a\x11\x9Ea\x11\xA3\x91a\x11\x8CV[a\x0FOV[\x90V[a\x11\xB0\x90Ta\x11\x92V[\x90V[\x92\x91\x90a\x11\xC9a\x11\xC3`\x02a\x11\xA6V[\x15a\x02sV[a\x11\xD8Wa\x11\xD6\x93a\x11\xF4V[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x11\xF0`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x92\x91\x90a\x12\x12a\x12\x0Ca\x12\x05a\x07UV[3\x90a\x1C\x92V[\x15a\x02sV[a\x12!Wa\x12\x1F\x93a\x13jV[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x129`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90V[a\x12Ta\x12Oa\x12Y\x92a\r\xC6V[a\x12=V[a\x02\xDEV[\x90V[a\x12e\x90a\x12@V[\x90V[a\x12|a\x12wa\x12\x81\x92a\r\xC6V[a\x12=V[a\x03\x02V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12\xA7a\x12\xAD\x91\x93\x92\x93a\x03\x02V[\x92a\x03\x02V[\x82\x01\x80\x92\x11a\x12\xB8WV[a\x12\x84V[a\x12\xD1a\x12\xCCa\x12\xD6\x92a\x02\xDEV[a\x12=V[a\x02\xDEV[\x90V[a\x12\xE2\x90a\x12\xBDV[\x90V[a\x12\xEE\x90a\x12\xD9V[\x90V[a\x12\xFA\x90a\x12\xBDV[\x90V[a\x13\x06\x90a\x12\xF1V[\x90V[\x90a\x13\x15_\x19\x91a\r\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x133a\x13.a\x138\x92a\x03\x02V[a\x12=V[a\x03\x02V[\x90V[\x90V[\x90a\x13Sa\x13Na\x13Z\x92a\x13\x1FV[a\x13;V[\x82Ta\x13\tV[\x90UV[a\x13g\x90a\x12\xF1V[\x90V[\x91\x92\x90\x92\x82a\x13\x89a\x13\x83a\x13~_a\x12\\V[a\x02\xE9V[\x91a\x02\xE9V[\x14a\x14\xF9W\x83a\x13\xA1a\x13\x9B_a\x12hV[\x91a\x03\x02V[\x14a\x14\xDDW\x83a\x13\xC2a\x13\xBCa\x13\xB7`\x03a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11a\x14\xC1Wa\x13\xCFa ZV[a\x13\xE3a\x13\xDC`\x05a\x11!V[\x85\x90a\x12\x98V[a\x13\xFEa\x13\xF8a\x13\xF3`\x04a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11a\x14\xA5Wa\x140\x91a\x14%a\x14\x13\x85a\x12\xE5V[3a\x14\x1D0a\x12\xFDV[\x90\x88\x92a!fV[\x83\x91\x85\x90\x91\x92a$\x07V[a\x14Ma\x14F\x83a\x14A`\x05a\x11!V[a\x12\x98V[`\x05a\x13>V[a\x14W`\x02a\x11\0V[\x90a\x14\xA0a\x14\x8Ea\x14\x88\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x13^V[\x93a\x13^V[\x93a\x14\x97a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x14\xBD`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x14\xD9`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x14\xF5`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x15\x11`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90a\x15!\x93\x92\x91a\x11nV[V[\x90a\x15=\x91a\x158a\x153a\x04\x02V[a&%V[a\x17\xECV[V[a\x15H\x90a\x12\xF1V[\x90V[` \x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: zero addres_\x82\x01R\x01RV[a\x15\xA5`!`@\x92a\x0B\xDFV[a\x15\xAE\x81a\x15KV[\x01\x90V[a\x15\xC7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x98V[\x90V[\x15a\x15\xD1WV[a\x15\xD9a\x02\x14V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xEF`\x04\x82\x01a\x15\xB2V[\x03\x90\xFD[a\x15\xFC\x90a\x12\xF1V[\x90V[` \x7Ft balance\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: insufficien_\x82\x01R\x01RV[a\x16Y`)`@\x92a\x0B\xDFV[a\x16b\x81a\x15\xFFV[\x01\x90V[a\x16{\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16LV[\x90V[\x15a\x16\x85WV[a\x16\x8Da\x02\x14V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xA3`\x04\x82\x01a\x16fV[\x03\x90\xFD[\x90P\x90V[a\x16\xB7_\x80\x92a\x16\xA7V[\x01\x90V[a\x16\xC4\x90a\x16\xACV[\x90V[\x90a\x16\xDAa\x16\xD3a\x02\x14V[\x92\x83a\x0BiV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x16\xFAWa\x16\xF6` \x91a\x0BKV[\x01\x90V[a\x0BUV[\x90a\x17\x11a\x17\x0C\x83a\x16\xDCV[a\x16\xC7V[\x91\x82RV[``\x90V[=_\x14a\x176Wa\x17+=a\x16\xFFV[\x90=_` \x84\x01>[V[a\x17>a\x17\x16V[\x90a\x174V[` \x7Fr failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: ETH transfe_\x82\x01R\x01RV[a\x17\x9E`(`@\x92a\x0B\xDFV[a\x17\xA7\x81a\x17DV[\x01\x90V[a\x17\xC0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\x91V[\x90V[\x15a\x17\xCAWV[a\x17\xD2a\x02\x14V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xE8`\x04\x82\x01a\x17\xABV[\x03\x90\xFD[a\x18\x11\x81a\x18\na\x18\x04a\x17\xFF_a\x12\\V[a\x02\xE9V[\x91a\x15?V[\x14\x15a\x15\xCAV[a\x187\x82a\x180a\x18*a\x18$0a\x15\xF3V[1a\x03\x02V[\x91a\x03\x02V[\x11\x15a\x16~V[a\x18k_\x80a\x18E\x84a\x15?V[\x85a\x18Na\x02\x14V[\x90\x81a\x18Y\x81a\x16\xBBV[\x03\x92Z\xF1a\x18ea\x17\x1BV[Pa\x17\xC3V[a\x18\xAAa\x18\x98\x7F\x84U\xAEk\xE5\xD9/\x1D\xF1\xC3\xC1HC\x88\xE2G\xA3l~`\xD7 U\xAE!m\xBC%\x8F%}K\x92a\x15?V[\x92a\x18\xA1a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA2V[\x90a\x18\xB9\x91a\x15#V[V[_\x90V[a\x18\xC8\x90a\x041V[\x90V[\x90a\x18\xD5\x90a\x18\xBFV[_R` R`@_ \x90V[\x90V[a\x18\xF0a\x18\xF5\x91a\x10\xE7V[a\x18\xE1V[\x90V[a\x19\x02\x90Ta\x18\xE4V[\x90V[`\x01a\x19\x1Da\x19#\x92a\x19\x16a\x18\xBBV[P_a\x18\xCBV[\x01a\x18\xF8V[\x90V[\x90a\x19A\x91a\x19<a\x197\x82a\x19\x05V[a&%V[a\x19CV[V[\x90a\x19M\x91a&oV[PV[\x90a\x19Z\x91a\x19&V[V[\x90\x80a\x19wa\x19qa\x19la'\x1AV[a\x02\xE9V[\x91a\x02\xE9V[\x03a\x19\x88Wa\x19\x85\x91a''V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x19\xA0`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[a\x19\xB3a\x19\xB9\x91\x93\x92\x93a\x03\x02V[\x92a\x03\x02V[\x91a\x19\xC5\x83\x82\x02a\x03\x02V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x19\xD4WV[a\x12\x84V[\x90a\x19\xEC\x91a\x19\xE6a\x10\xE3V[Pa\x19\xA4V[\x90V[a\x1A\x08\x90a\x1A\x03a\x19\xFEa\x04\x02V[a&%V[a\x1AXV[V[`\xA0\x1B\x90V[\x90a\x1A\x1F`\xFF`\xA0\x1B\x91a\x1A\nV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A2\x90a\x02sV[\x90V[\x90V[\x90a\x1AMa\x1AHa\x1AT\x92a\x1A)V[a\x1A5V[\x82Ta\x1A\x10V[\x90UV[a\x1Ac\x81`\x02a\x1A8V[a\x1A\x99\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x1A\x90a\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xA1V[a\x1A\xA7\x90a\x19\xEFV[V[\x90a\x1A\xC4\x92\x91a\x1A\xBFa\x1A\xBAa\r\xEAV[a&%V[a\x1A\xC6V[V[\x91\x90\x81a\x1A\xE3a\x1A\xDDa\x1A\xD8_a\x12\\V[a\x02\xE9V[\x91a\x02\xE9V[\x14a\x1A\xFEWa\x1A\xF4a\x1A\xFC\x93a\x12\xE5V[\x91\x90\x91a'\xEBV[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1B\x16`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90a\x1B%\x92\x91a\x1A\xA9V[V[a\x1B@\x90a\x1B;a\x1B6a\x04\x02V[a&%V[a\x1BBV[V[a\x1BM\x90`\x03a\x13>V[V[a\x1BX\x90a\x1B'V[V[a\x1Bs\x90a\x1Bna\x1Bia\x04\x02V[a&%V[a\x1B\xB3V[V[\x90a\x1B\x86`\x01\x80`\xA0\x1B\x03\x91a\r\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x1B\xA8a\x1B\xA3a\x1B\xAF\x92a\x13^V[a\x1B\x90V[\x82Ta\x1BuV[\x90UV[\x80a\x1B\xCEa\x1B\xC8a\x1B\xC3_a\x12\\V[a\x02\xE9V[\x91a\x02\xE9V[\x14a\x1C4Wa\x1B\xDD`\x02a\x11\0V[a\x1B\xE8\x82`\x02a\x1B\x93V[\x90a\x1C\x1Ca\x1C\x16\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x13^V[\x91a\x13^V[\x91a\x1C%a\x02\x14V[\x80a\x1C/\x81a\x05\xB2V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1CL`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[a\x1CY\x90a\x1BZV[V[\x90a\x1Ce\x90a\x13^V[_R` R`@_ \x90V[a\x1C}a\x1C\x82\x91a\x10\xE7V[a\x0FOV[\x90V[a\x1C\x8F\x90Ta\x1CqV[\x90V[a\x1C\xB8\x91_a\x1C\xADa\x1C\xB3\x93a\x1C\xA6a\x10\x9BV[P\x82a\x18\xCBV[\x01a\x1C[V[a\x1C\x85V[\x90V[a\x1C\xD4\x90a\x1C\xCFa\x1C\xCAa\x04\x02V[a&%V[a\x1C\xF9V[V[\x91` a\x1C\xF7\x92\x94\x93a\x1C\xF0`@\x82\x01\x96_\x83\x01\x90a\x03\x05V[\x01\x90a\x03\x05V[V[a\x1D\x03`\x04a\x11!V[a\x1D\x0E\x82`\x04a\x13>V[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x1DEa\x1D<a\x02\x14V[\x92\x83\x92\x83a\x1C\xD6V[\x03\x90\xA1V[a\x1DS\x90a\x1C\xBBV[V[\x90a\x1Dp\x92\x91a\x1Dka\x1Dfa\x04\x02V[a&%V[a\x1DrV[V[\x91\x90\x91a\x1D\x80\x81`\x08a\x1B\x93V[a\x1D\x8B\x83`\ta\x13>V[a\x1D\x96\x82`\na\x13>V[\x91\x90\x91a\x1D\xCF\x7F\xB1\xE1g\x7F \x9A\x97L\xED\xA2\xC2\xABh\x15A\xC5\xDB\x04-\xB4\xA9\xB3T\xDD\xACy7D`\xDA2\0\x93a\x1D\xC6a\x02\x14V[\x93\x84\x93\x84a\x03\x12V[\x03\x90\xA1V[\x90a\x1D\xDF\x92\x91a\x1DUV[V[\x90a\x1D\xFC\x91a\x1D\xF7a\x1D\xF2\x82a\x19\x05V[a&%V[a\x1D\xFEV[V[\x90a\x1E\x08\x91a''V[PV[\x90a\x1E\x15\x91a\x1D\xE1V[V[``\x90V[a\x1E%\x90a\x0B\x92V[\x90V[a\x1E0a\x1E\x17V[Pa\x1E9a\x10\xDFV[Pa\x1EBa\x10\x9BV[P`\x07a\x1EO`\x02a\x11\0V[\x91a\x1Eca\x1E]`\x02a\x11\xA6V[\x92a\x1E\x1CV[\x92\x91\x90V[a\x1Ewa\x1E}\x91\x93\x92\x93a\x03\x02V[\x92a\x03\x02V[\x82\x03\x91\x82\x11a\x1E\x88WV[a\x12\x84V[a\x1E\x95a\x10\xE3V[Pa\x1E\x9Ea\x10\xE3V[Pa\x1E\xA7a\x10\xE3V[Pa\x1E\xB2`\x05a\x11!V[a\x1E\xBC`\x04a\x11!V[\x91a\x1E\xC7`\x04a\x11!V[a\x1E\xE2a\x1E\xDCa\x1E\xD7`\x05a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11_\x14a\x1F\rWa\x1F\x06a\x1E\xF6`\x04a\x11!V[a\x1F\0`\x05a\x11!V[\x90a\x1EhV[[\x91\x92\x91\x90V[a\x1F\x16_a\x12hV[a\x1F\x07V[a\x1F#a\x10\x9BV[Pa\x1F=a\x1F7c\x01\xFF\xC9\xA7`\xE0\x1Ba\x02&V[\x91a\x02&V[\x14\x90V[\x90V[a\x1FXa\x1FSa\x1F]\x92a\x1FAV[a\x12=V[a\x03\x02V[\x90V[a\x1Fj`\x02a\x1FDV[\x90V[a\x1Fw`\x01a\x11!V[a\x1F\x90a\x1F\x8Aa\x1F\x85a\x1F`V[a\x03\x02V[\x91a\x03\x02V[\x14a\x1F\xA9Wa\x1F\xA7a\x1F\xA0a\x1F`V[`\x01a\x13>V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x1F\xC1`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90V[a\x1F\xDCa\x1F\xD7a\x1F\xE1\x92a\x1F\xC5V[a\x12=V[a\x03\x02V[\x90V[a\x1F\xEE`\x01a\x1F\xC8V[\x90V[a \x03a\x1F\xFCa\x1F\xE4V[`\x01a\x13>V[V[\x90V[a \x1Ca \x17a !\x92a \x05V[a\x12=V[a\x03\x02V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a Da J\x91a\x03\x02V[\x91a\x03\x02V[\x90\x81\x15a UW\x04\x90V[a $V[a pBa jb\x01Q\x80a \x08V[\x90a 8V[\x80a \x8Ca \x86a \x81`\x06a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11a \x95W[PV[\x80a \xF7\x91a \xA4`\x05a\x11!V[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a \xDAa \xD1a\x02\x14V[\x92\x83\x92\x83a\x1C\xD6V[\x03\x90\xA1a \xF0a \xE9_a\x12hV[`\x05a\x13>V[`\x06a\x13>V[_a \x92V[a!\x06\x90a\x12\xF1V[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[`\xE0\x1B\x90V[a!,a!'a!1\x92a!\tV[a!\x12V[a\x02&V[\x90V[`@\x90a!]a!d\x94\x96\x95\x93\x96a!S``\x84\x01\x98_\x85\x01\x90a\x02\xF5V[` \x83\x01\x90a\x02\xF5V[\x01\x90a\x03\x05V[V[`\x04\x92a!\xA0a!\xB4\x95\x93a!\xAF\x93\x94a!\x87c#\xB8r\xDD\x92\x94\x91\x92a!\x18V[\x93a!\x90a\x02\x14V[\x97\x88\x95` \x87\x01\x90\x81R\x01a!4V[` \x82\x01\x81\x03\x82R\x03\x83a\x0BiV[a(9V[V[P\x90V[\x90\x91``\x82\x84\x03\x12a!\xEFWa!\xECa!\xD5\x84_\x85\x01a\x06\x0EV[\x93a!\xE3\x81` \x86\x01a\x05\x06V[\x93`@\x01a\x05\x06V[\x90V[a\x02\x1EV[a\"\x0Ca\"\x06a\"\x12\x92\x95\x93\x95a\x15?V[\x94a\x13\x1FV[\x92a\x13\x1FV[\x90V[\x90V[a\",a\"'a\"1\x92a\"\x15V[a\x12=V[a\x03\x02V[\x90V[a\"=\x90a\x12\xBDV[\x90V[a\"I\x90a\"4V[\x90V[a\"U\x90a\x12\xF1V[\x90V[\x90PQ\x90a\"e\x82a\x04\xCFV[V[\x90` \x82\x82\x03\x12a\"\x80Wa\"}\x91_\x01a\"XV[\x90V[a\x02\x1EV[a\"\x8Da\x02\x14V[=_\x82>=\x90\xFD[a\"\xA0_\x80\x92a\x0B\xDFV[\x01\x90V[\x90a\"\xC7\x91a\"\xBA`@\x82\x01\x92_\x83\x01\x90a\x03\x05V[` \x81\x83\x03\x91\x01Ra\"\x95V[\x90V[_\x80\xFD[\x90\x92\x91\x92a\"\xE3a\"\xDE\x82a\x16\xDCV[a\x16\xC7V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\"\xFFWa\"\xFD\x92a\x0B\xE8V[V[a\"\xCAV[\x90\x80`\x1F\x83\x01\x12\x15a#\"W\x81` a#\x1F\x93Q\x91\x01a\"\xCEV[\x90V[a\x05\x15V[\x90` \x82\x82\x03\x12a#WW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a#RWa#O\x92\x01a#\x04V[\x90V[a\x02\"V[a\x02\x1EV[Q\x90V[` \x91\x81R\x01\x90V[a#\x88a#\x91` \x93a#\x96\x93a#\x7F\x81a#\\V[\x93\x84\x80\x93a#`V[\x95\x86\x91\x01a\x0B\xE8V[a\x0BKV[\x01\x90V[\x93\x94a#\xE3a$\x04\x98\x96a#\xD9a#\xF7\x96a#\xCFa#\xED\x96\x9B\x97a#\xC5`\xE0\x8C\x01\x9D_\x8D\x01\x90a\x02\xF5V[` \x8B\x01\x90a\x02\xF5V[`@\x89\x01\x90a\x02\xF5V[``\x87\x01\x90a\x03\x05V[`\x80\x85\x01\x90a\x03\x05V[`\xA0\x83\x01\x90a\x03\x05V[`\xC0\x81\x84\x03\x91\x01Ra#iV[\x90V[\x91\x92\x90\x92a$\x16\x81\x83\x90a!\xB6V[a$(a$\"_a\x12hV[\x91a\x03\x02V[\x11_\x14a%\xF5Wa$Da$\xDD\x93\x92a$J\x92\x90\x81\x01\x90a!\xBAV[\x91a!\xF4V[\x92\x91\x94\x90\x94[\x94\x92\x91a$cf\x03\x8D~\xA4\xC6\x80\0a\"\x18V[\x92a$ya$r\x86\x83\x90a\x19\xA4V[\x85\x90a\x12\x98V[\x93a$\x97a$\x86\x84a\x12\xE5V[a$\x90`\x02a\x11\0V[\x86\x91a)\x1DV[` a$\xB3a$\xAEa$\xA9`\x02a\x11\0V[a\"@V[a\"LV[c\xBD\xA0\t\xFE\x90a$\xD2\x86\x92a$\xC6a\x02\x14V[\x9B\x8C\x94\x85\x93\x84\x93a!\x12V[\x83R`\x04\x83\x01a\x0C\xB1V[\x03\x91Z\xFA\x93\x84\x15a%\xF0Wa%(a%7a%\x8B\x93a%\x14a%\x80\x98_\x9C\x8D\x91a%\xC2W[Pa%\x0C\x89a\x12\xE5V[\x90\x86\x91a)\x1DV[a%\x1Ca\x02\x14V[\x92\x83\x91` \x83\x01a\"\xA4V[` \x82\x01\x81\x03\x82R\x03\x82a\x0BiV[a%Qa%La%G`\x02a\x11\0V[a\"@V[a\"LV[\x93cO\xB1\xA0{\x97\x94\x97\x94\x95\x98a%f0a\x15\xF3V[\x9B\x93\x90\x91\x92\x93a%ta\x02\x14V[\x9C\x8D\x9B\x8C\x9A\x8B\x99a!\x12V[\x89R`\x04\x89\x01a#\x9AV[\x03\x92Z\xF1\x80\x15a%\xBDWa%\x9DW[PV[a%\xB8\x90=\x80_\x83>a%\xB0\x81\x83a\x0BiV[\x81\x01\x90a#'V[a%\x9AV[a\"\x85V[a%\xE3\x91P` =\x81\x11a%\xE9W[a%\xDB\x81\x83a\x0BiV[\x81\x01\x90a\"gV[_a%\x02V[P=a%\xD1V[a\"\x85V[PP\x90a$\xDD\x90a&\x06`\x08a\x11\0V[\x92a&\x11`\ta\x11!V[\x91a&\x1C`\na\x11!V[\x94\x92\x94\x92a$PV[a&7\x90a&1a'\x1AV[\x90a)\xFCV[V[\x90a&E`\xFF\x91a\r\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a&da&_a&k\x92a\x1A)V[a\x1A5V[\x82Ta&9V[\x90UV[a&wa\x10\x9BV[Pa&\x8Ca&\x86\x82\x84\x90a\x1C\x92V[\x15a\x02sV[_\x14a'\x14Wa&\xB3`\x01a&\xAE_a&\xA6\x81\x86\x90a\x18\xCBV[\x01\x85\x90a\x1C[V[a&OV[\x90a&\xBCa'\x1AV[\x90a&\xF9a&\xF3a&\xED\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x18\xBFV[\x92a\x13^V[\x92a\x13^V[\x92a'\x02a\x02\x14V[\x80a'\x0C\x81a\x05\xB2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a'\"a\x10\xDFV[P3\x90V[a'/a\x10\x9BV[Pa';\x81\x83\x90a\x1C\x92V[_\x14a'\xC2Wa'a_a'\\_a'T\x81\x86\x90a\x18\xCBV[\x01\x85\x90a\x1C[V[a&OV[\x90a'ja'\x1AV[\x90a'\xA7a'\xA1a'\x9B\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x18\xBFV[\x92a\x13^V[\x92a\x13^V[\x92a'\xB0a\x02\x14V[\x80a'\xBA\x81a\x05\xB2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a'\xE9\x92\x94\x93a'\xE2`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a\x03\x05V[V[\x90a(2a(7\x93a(#`\x04\x94\x93a(\nc\xA9\x05\x9C\xBB\x91\x93\x91a!\x18V[\x92a(\x13a\x02\x14V[\x96\x87\x94` \x86\x01\x90\x81R\x01a'\xC8V[` \x82\x01\x81\x03\x82R\x03\x83a\x0BiV[a(9V[V[\x90_` \x91a(Fa\x10\xE3V[Pa(Oa\x10\xE3V[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a(\xE2W=_Q\x90a(ta(n_a\x12hV[\x91a\x03\x02V[\x14_\x14a(\xC8WPa(\x85\x81a \xFDV[;a(\x98a(\x92_a\x12hV[\x91a\x03\x02V[\x14[a(\xA1WPV[a(\xADa(\xC4\x91a \xFDV[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\x0C\xB1V[\x03\x90\xFD[a(\xDBa(\xD5`\x01a\x1F\xC8V[\x91a\x03\x02V[\x14\x15a(\x9AV[`@Q=_\x82>=\x90\xFD[a(\xF6\x90a\x12hV[\x90RV[\x91` a)\x1B\x92\x94\x93a)\x14`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a(\xEDV[V[\x90\x91a)``\x04\x91a)Qc\t^\xA7\xB3a)8\x87\x93\x91a!\x18V[\x92a)Aa\x02\x14V[\x95\x86\x94` \x86\x01\x90\x81R\x01a'\xC8V[` \x82\x01\x81\x03\x82R\x03\x82a\x0BiV[\x90a)ua)o\x82\x84\x90a*7V[\x15a\x02sV[a)\x7FW[PPPV[a)\xCC`\x04a)\xD1\x94a)\xC7\x84\x91a)\xB8c\t^\xA7\xB3a)\x9F_\x91a!\x18V[\x92a)\xA8a\x02\x14V[\x96\x87\x94` \x86\x01\x90\x81R\x01a(\xFAV[` \x82\x01\x81\x03\x82R\x03\x83a\x0BiV[a(9V[a(9V[_\x80\x80a)zV[\x91` a)\xFA\x92\x94\x93a)\xF3`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a\x044V[V[\x90a*\x11a*\x0B\x83\x83\x90a\x1C\x92V[\x15a\x02sV[a*\x19WPPV[a*3_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a)\xD9V[\x03\x90\xFD[\x90_` \x91a*Da\x10\x9BV[Pa*Ma\x10\x9BV[Pa*Va\x10\xE3V[Pa*_a\x10\xE3V[P\x82\x81Q\x91\x01\x82\x85Z\xF1=\x91_Q\x91\x92\x83a*{W[PPP\x90V[\x90\x91\x92Pa*\x91a*\x8B_a\x12hV[\x91a\x03\x02V[\x14_\x14a*\xBFWa*\xA2\x91Pa \xFDV[;a*\xB5a*\xAF_a\x12hV[\x91a\x03\x02V[\x11[_\x80\x80a*uV[Pa*\xD3a*\xCD`\x01a\x1F\xC8V[\x91a\x03\x02V[\x14a*\xB7V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b3661109757005b61001f5f3561020e565b806301ffc9a7146102095780630e1508d9146102045780631033b4cc146101ff578063118c38c7146101fa5780631259a5c8146101f557806318b68b8c146101f05780631b9a91a4146101eb578063248a9ca3146101e65780632f2ff15d146101e15780633462fac3146101dc57806336568abe146101d757806336b089d8146101d25780634a65855a146101cd578063501d815c146101c85780635ab1d61c146101c35780635d942ac1146101be57806361b0a56e146101b957806363221490146101b457806365d7a3c9146101af57806366d003ac146101aa57806367eeba0c146101a55780636bcc8c14146101a057806391d148541461019b578063a217fddf14610196578063b20d30a914610191578063c9f5b63e1461018c578063caed5c7f14610187578063d547741f14610182578063ead93c8f1461017d578063ede7cebd146101785763fb8c4b510361000e5761105f565b610ff5565b610f8b565b610f1b565b610ee7565b610e78565b610e36565b610e01565b610d90565b610d5d565b610d0a565b610cc6565b610c3c565b610a1c565b6109ca565b61095b565b610919565b6108a3565b61085e565b6107fc565b6107b9565b610784565b610721565b6106bf565b61064a565b6105b7565b61049a565b610456565b6103cd565b610344565b61029a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61023b81610226565b0361024257565b5f80fd5b9050359061025382610232565b565b9060208282031261026e5761026b915f01610246565b90565b61021e565b151590565b61028190610273565b9052565b9190610298905f60208501940190610278565b565b346102ca576102c66102b56102b0366004610255565b61109f565b6102bd610214565b91829182610285565b0390f35b61021a565b5f9103126102d957565b61021e565b60018060a01b031690565b6102f2906102de565b90565b6102fe906102e9565b9052565b90565b61030e90610302565b9052565b60409061033b610342949695939661033160608401985f8501906102f5565b6020830190610305565b0190610305565b565b34610377576103543660046102cf565b61037361035f61112e565b61036a939193610214565b93849384610312565b0390f35b61021a565b1c90565b90565b610393906008610398930261037c565b610380565b90565b906103a69154610383565b90565b6103b560055f9061039b565b90565b91906103cb905f60208501940190610305565b565b346103fd576103dd3660046102cf565b6103f96103e86103a9565b6103f0610214565b918291826103b8565b0390f35b61021a565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61042e610402565b90565b90565b61043d90610431565b9052565b9190610454905f60208501940190610434565b565b34610486576104663660046102cf565b610482610471610426565b610479610214565b91829182610441565b0390f35b61021a565b61049760065f9061039b565b90565b346104ca576104aa3660046102cf565b6104c66104b561048b565b6104bd610214565b918291826103b8565b0390f35b61021a565b6104d8816102e9565b036104df57565b5f80fd5b905035906104f0826104cf565b565b6104fb81610302565b0361050257565b5f80fd5b90503590610513826104f2565b565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561055b5781359167ffffffffffffffff831161055657602001926001830284011161055157565b61051d565b610519565b610515565b916060838303126105ad57610577825f85016104e3565b926105858360208301610506565b92604082013567ffffffffffffffff81116105a8576105a49201610521565b9091565b610222565b61021e565b5f0190565b346105e9576105d36105ca366004610560565b92919091611515565b6105db610214565b806105e5816105b2565b0390f35b61021a565b6105f7906102de565b90565b610603816105ee565b0361060a57565b5f80fd5b9050359061061b826105fa565b565b91906040838203126106455780610639610642925f860161060e565b93602001610506565b90565b61021e565b346106795761066361065d36600461061d565b906118af565b61066b610214565b80610675816105b2565b0390f35b61021a565b61068781610431565b0361068e57565b5f80fd5b9050359061069f8261067e565b565b906020828203126106ba576106b7915f01610692565b90565b61021e565b346106ef576106eb6106da6106d53660046106a1565b611905565b6106e2610214565b91829182610441565b0390f35b61021a565b919060408382031261071c5780610710610719925f8601610692565b936020016104e3565b90565b61021e565b346107505761073a6107343660046106f4565b90611950565b610742610214565b8061074c816105b2565b0390f35b61021a565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b610781610755565b90565b346107b4576107943660046102cf565b6107b061079f610779565b6107a7610214565b91829182610441565b0390f35b61021a565b346107e8576107d26107cc3660046106f4565b9061195c565b6107da610214565b806107e4816105b2565b0390f35b61021a565b6107f960035f9061039b565b90565b3461082c5761080c3660046102cf565b6108286108176107ed565b61081f610214565b918291826103b8565b0390f35b61021a565b9190604083820312610859578061084d610856925f8601610506565b93602001610506565b90565b61021e565b3461088f5761088b61087a610874366004610831565b906119d9565b610882610214565b918291826103b8565b0390f35b61021a565b6108a060095f9061039b565b90565b346108d3576108b33660046102cf565b6108cf6108be610894565b6108c6610214565b918291826103b8565b0390f35b61021a565b6108e181610273565b036108e857565b5f80fd5b905035906108f9826108d8565b565b9060208282031261091457610911915f016108ec565b90565b61021e565b346109475761093161092c3660046108fb565b611a9e565b610939610214565b80610943816105b2565b0390f35b61021a565b610958600a5f9061039b565b90565b3461098b5761096b3660046102cf565b61098761097661094c565b61097e610214565b918291826103b8565b0390f35b61021a565b90916060828403126109c5576109c26109ab845f85016104e3565b936109b98160208601610506565b936040016104e3565b90565b61021e565b346109f9576109e36109dd366004610990565b91611b1a565b6109eb610214565b806109f5816105b2565b0390f35b61021a565b90602082820312610a1757610a14915f01610506565b90565b61021e565b34610a4a57610a34610a2f3660046109fe565b611b4f565b610a3c610214565b80610a46816105b2565b0390f35b61021a565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610a96575b6020831014610a9157565b610a62565b91607f1691610a86565b60209181520190565b5f5260205f2090565b905f9291805490610acc610ac583610a76565b8094610aa0565b916001811690815f14610b235750600114610ae7575b505050565b610af49192939450610aa9565b915f925b818410610b0b57505001905f8080610ae2565b60018160209295939554848601520191019290610af8565b92949550505060ff19168252151560200201905f8080610ae2565b90610b4891610ab2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610b7390610b4b565b810190811067ffffffffffffffff821117610b8d57604052565b610b55565b90610bb2610bab92610ba2610214565b93848092610b3e565b0383610b69565b565b905f10610bc757610bc490610b92565b90565b610a4f565b610bd860075f90610bb4565b90565b5190565b60209181520190565b90825f9392825e0152565b610c12610c1b602093610c2093610c0981610bdb565b93848093610bdf565b95869101610be8565b610b4b565b0190565b610c399160208201915f818403910152610bf3565b90565b34610c6c57610c4c3660046102cf565b610c68610c57610bcc565b610c5f610214565b91829182610c24565b0390f35b61021a565b60018060a01b031690565b610c8c906008610c91930261037c565b610c71565b90565b90610c9f9154610c7c565b90565b610cae60085f90610c94565b90565b9190610cc4905f602085019401906102f5565b565b34610cf657610cd63660046102cf565b610cf2610ce1610ca2565b610ce9610214565b91829182610cb1565b0390f35b61021a565b610d0760045f9061039b565b90565b34610d3a57610d1a3660046102cf565b610d36610d25610cfb565b610d2d610214565b918291826103b8565b0390f35b61021a565b90602082820312610d5857610d55915f016104e3565b90565b61021e565b34610d8b57610d75610d70366004610d3f565b611c50565b610d7d610214565b80610d87816105b2565b0390f35b61021a565b34610dc157610dbd610dac610da63660046106f4565b90611c92565b610db4610214565b91829182610285565b0390f35b61021a565b90565b5f1b90565b610de2610ddd610de792610dc6565b610dc9565b610431565b90565b610df35f610dce565b90565b610dfe610dea565b90565b34610e3157610e113660046102cf565b610e2d610e1c610df6565b610e24610214565b91829182610441565b0390f35b61021a565b34610e6457610e4e610e493660046109fe565b611d4a565b610e56610214565b80610e60816105b2565b0390f35b61021a565b610e7560025f90610c94565b90565b34610ea857610e883660046102cf565b610ea4610e93610e69565b610e9b610214565b91829182610cb1565b0390f35b61021a565b9091606082840312610ee257610edf610ec8845f85016104e3565b93610ed68160208601610506565b93604001610506565b90565b61021e565b34610f1657610f00610efa366004610ead565b91611dd4565b610f08610214565b80610f12816105b2565b0390f35b61021a565b34610f4a57610f34610f2e3660046106f4565b90611e0b565b610f3c610214565b80610f46816105b2565b0390f35b61021a565b60ff1690565b610f65906008610f6a930261037c565b610f4f565b90565b90610f789154610f55565b90565b610f886002601490610f6d565b90565b34610fbb57610f9b3660046102cf565b610fb7610fa6610f7b565b610fae610214565b91829182610285565b0390f35b61021a565b604090610fec610fe1610ff39597969460608401908482035f860152610bf3565b9660208301906102f5565b0190610278565b565b34611028576110053660046102cf565b611024611010611e28565b61101b939193610214565b93849384610fc0565b0390f35b61021a565b60409061105661105d949695939661104c60608401985f850190610305565b6020830190610305565b0190610305565b565b346110925761106f3660046102cf565b61108e61107a611e8d565b611085939193610214565b9384938461102d565b0390f35b61021a565b5f80fd5b5f90565b6110a761109b565b50806110c26110bc637965db0b60e01b610226565b91610226565b149081156110cf575b5090565b6110d99150611f1b565b5f6110cb565b5f90565b5f90565b5f1c90565b6110f86110fd916110e7565b610c71565b90565b61110a90546110ec565b90565b61111961111e916110e7565b610380565b90565b61112b905461110d565b90565b6111366110df565b5061113f6110e3565b506111486110e3565b506111536008611100565b61115d6009611121565b91611168600a611121565b91929190565b9061118293929161117d611f6d565b6111b3565b61118a611ff1565b565b60a01c90565b61119e6111a39161118c565b610f4f565b90565b6111b09054611192565b90565b9291906111c96111c360026111a6565b15610273565b6111d8576111d6936111f4565b565b5f633df5105960e11b8152806111f0600482016105b2565b0390fd5b92919061121261120c611205610755565b3390611c92565b15610273565b6112215761121f9361136a565b565b5f635c427cd960e01b815280611239600482016105b2565b0390fd5b90565b61125461124f61125992610dc6565b61123d565b6102de565b90565b61126590611240565b90565b61127c61127761128192610dc6565b61123d565b610302565b90565b634e487b7160e01b5f52601160045260245ffd5b6112a76112ad91939293610302565b92610302565b82018092116112b857565b611284565b6112d16112cc6112d6926102de565b61123d565b6102de565b90565b6112e2906112bd565b90565b6112ee906112d9565b90565b6112fa906112bd565b90565b611306906112f1565b90565b906113155f1991610dc9565b9181191691161790565b61133361132e61133892610302565b61123d565b610302565b90565b90565b9061135361134e61135a9261131f565b61133b565b8254611309565b9055565b611367906112f1565b90565b919290928261138961138361137e5f61125c565b6102e9565b916102e9565b146114f957836113a161139b5f611268565b91610302565b146114dd57836113c26113bc6113b76003611121565b610302565b91610302565b116114c1576113cf61205a565b6113e36113dc6005611121565b8590611298565b6113fe6113f86113f36004611121565b610302565b91610302565b116114a55761143091611425611413856112e5565b3361141d306112fd565b908892612166565b839185909192612407565b61144d611446836114416005611121565b611298565b600561133e565b6114576002611100565b906114a061148e6114887f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e89361135e565b9361135e565b93611497610214565b918291826103b8565b0390a3565b5f631c345a2f60e21b8152806114bd600482016105b2565b0390fd5b5f631c345a2f60e21b8152806114d9600482016105b2565b0390fd5b5f631f2a200560e01b8152806114f5600482016105b2565b0390fd5b5f63d92e233d60e01b815280611511600482016105b2565b0390fd5b9061152193929161116e565b565b9061153d91611538611533610402565b612625565b6117ec565b565b611548906112f1565b90565b60207f7300000000000000000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a207a65726f206164647265735f8201520152565b6115a56021604092610bdf565b6115ae8161154b565b0190565b6115c79060208101905f818303910152611598565b90565b156115d157565b6115d9610214565b62461bcd60e51b8152806115ef600482016115b2565b0390fd5b6115fc906112f1565b90565b60207f742062616c616e63650000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20696e73756666696369656e5f8201520152565b6116596029604092610bdf565b611662816115ff565b0190565b61167b9060208101905f81830391015261164c565b90565b1561168557565b61168d610214565b62461bcd60e51b8152806116a360048201611666565b0390fd5b905090565b6116b75f80926116a7565b0190565b6116c4906116ac565b90565b906116da6116d3610214565b9283610b69565b565b67ffffffffffffffff81116116fa576116f6602091610b4b565b0190565b610b55565b9061171161170c836116dc565b6116c7565b918252565b606090565b3d5f146117365761172b3d6116ff565b903d5f602084013e5b565b61173e611716565b90611734565b60207f72206661696c6564000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20455448207472616e7366655f8201520152565b61179e6028604092610bdf565b6117a781611744565b0190565b6117c09060208101905f818303910152611791565b90565b156117ca57565b6117d2610214565b62461bcd60e51b8152806117e8600482016117ab565b0390fd5b6118118161180a6118046117ff5f61125c565b6102e9565b9161153f565b14156115ca565b6118378261183061182a611824306115f3565b31610302565b91610302565b111561167e565b61186b5f806118458461153f565b8561184e610214565b9081611859816116bb565b03925af161186561171b565b506117c3565b6118aa6118987f8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b9261153f565b926118a1610214565b918291826103b8565b0390a2565b906118b991611523565b565b5f90565b6118c890610431565b90565b906118d5906118bf565b5f5260205260405f2090565b90565b6118f06118f5916110e7565b6118e1565b90565b61190290546118e4565b90565b600161191d611923926119166118bb565b505f6118cb565b016118f8565b90565b906119419161193c61193782611905565b612625565b611943565b565b9061194d9161266f565b50565b9061195a91611926565b565b908061197761197161196c61271a565b6102e9565b916102e9565b036119885761198591612727565b50565b5f63334bd91960e11b8152806119a0600482016105b2565b0390fd5b6119b36119b991939293610302565b92610302565b916119c5838202610302565b9281840414901517156119d457565b611284565b906119ec916119e66110e3565b506119a4565b90565b611a0890611a036119fe610402565b612625565b611a58565b565b60a01b90565b90611a1f60ff60a01b91611a0a565b9181191691161790565b611a3290610273565b90565b90565b90611a4d611a48611a5492611a29565b611a35565b8254611a10565b9055565b611a63816002611a38565b611a997fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d591611a90610214565b91829182610285565b0390a1565b611aa7906119ef565b565b90611ac49291611abf611aba610dea565b612625565b611ac6565b565b919081611ae3611add611ad85f61125c565b6102e9565b916102e9565b14611afe57611af4611afc936112e5565b9190916127eb565b565b5f63d92e233d60e01b815280611b16600482016105b2565b0390fd5b90611b259291611aa9565b565b611b4090611b3b611b36610402565b612625565b611b42565b565b611b4d90600361133e565b565b611b5890611b27565b565b611b7390611b6e611b69610402565b612625565b611bb3565b565b90611b8660018060a01b0391610dc9565b9181191691161790565b90565b90611ba8611ba3611baf9261135e565b611b90565b8254611b75565b9055565b80611bce611bc8611bc35f61125c565b6102e9565b916102e9565b14611c3457611bdd6002611100565b611be8826002611b93565b90611c1c611c167fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd1082980699361135e565b9161135e565b91611c25610214565b80611c2f816105b2565b0390a3565b5f63d92e233d60e01b815280611c4c600482016105b2565b0390fd5b611c5990611b5a565b565b90611c659061135e565b5f5260205260405f2090565b611c7d611c82916110e7565b610f4f565b90565b611c8f9054611c71565b90565b611cb8915f611cad611cb393611ca661109b565b50826118cb565b01611c5b565b611c85565b90565b611cd490611ccf611cca610402565b612625565b611cf9565b565b916020611cf7929493611cf060408201965f830190610305565b0190610305565b565b611d036004611121565b611d0e82600461133e565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf91611d45611d3c610214565b92839283611cd6565b0390a1565b611d5390611cbb565b565b90611d709291611d6b611d66610402565b612625565b611d72565b565b919091611d80816008611b93565b611d8b83600961133e565b611d9682600a61133e565b919091611dcf7fb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da320093611dc6610214565b93849384610312565b0390a1565b90611ddf9291611d55565b565b90611dfc91611df7611df282611905565b612625565b611dfe565b565b90611e0891612727565b50565b90611e1591611de1565b565b606090565b611e2590610b92565b90565b611e30611e17565b50611e396110df565b50611e4261109b565b506007611e4f6002611100565b91611e63611e5d60026111a6565b92611e1c565b929190565b611e77611e7d91939293610302565b92610302565b8203918211611e8857565b611284565b611e956110e3565b50611e9e6110e3565b50611ea76110e3565b50611eb26005611121565b611ebc6004611121565b91611ec76004611121565b611ee2611edc611ed76005611121565b610302565b91610302565b115f14611f0d57611f06611ef66004611121565b611f006005611121565b90611e68565b5b91929190565b611f165f611268565b611f07565b611f2361109b565b50611f3d611f376301ffc9a760e01b610226565b91610226565b1490565b90565b611f58611f53611f5d92611f41565b61123d565b610302565b90565b611f6a6002611f44565b90565b611f776001611121565b611f90611f8a611f85611f60565b610302565b91610302565b14611fa957611fa7611fa0611f60565b600161133e565b565b5f633ee5aeb560e01b815280611fc1600482016105b2565b0390fd5b90565b611fdc611fd7611fe192611fc5565b61123d565b610302565b90565b611fee6001611fc8565b90565b612003611ffc611fe4565b600161133e565b565b90565b61201c61201761202192612005565b61123d565b610302565b90565b634e487b7160e01b5f52601260045260245ffd5b61204461204a91610302565b91610302565b908115612055570490565b612024565b6120704261206a62015180612008565b90612038565b8061208c6120866120816006611121565b610302565b91610302565b11612095575b50565b806120f7916120a46005611121565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab916120da6120d1610214565b92839283611cd6565b0390a16120f06120e95f611268565b600561133e565b600661133e565b5f612092565b612106906112f1565b90565b63ffffffff1690565b60e01b90565b61212c61212761213192612109565b612112565b610226565b90565b60409061215d612164949695939661215360608401985f8501906102f5565b60208301906102f5565b0190610305565b565b6004926121a06121b495936121af93946121876323b872dd92949192612118565b93612190610214565b9788956020870190815201612134565b60208201810382520383610b69565b612839565b565b5090565b90916060828403126121ef576121ec6121d5845f850161060e565b936121e38160208601610506565b93604001610506565b90565b61021e565b61220c6122066122129295939561153f565b9461131f565b9261131f565b90565b90565b61222c61222761223192612215565b61123d565b610302565b90565b61223d906112bd565b90565b61224990612234565b90565b612255906112f1565b90565b90505190612265826104cf565b565b906020828203126122805761227d915f01612258565b90565b61021e565b61228d610214565b3d5f823e3d90fd5b6122a05f8092610bdf565b0190565b906122c7916122ba60408201925f830190610305565b6020818303910152612295565b90565b5f80fd5b909291926122e36122de826116dc565b6116c7565b938185526020850190828401116122ff576122fd92610be8565b565b6122ca565b9080601f830112156123225781602061231f935191016122ce565b90565b610515565b90602082820312612357575f82015167ffffffffffffffff81116123525761234f9201612304565b90565b610222565b61021e565b5190565b60209181520190565b6123886123916020936123969361237f8161235c565b93848093612360565b95869101610be8565b610b4b565b0190565b93946123e361240498966123d96123f7966123cf6123ed969b976123c560e08c019d5f8d01906102f5565b60208b01906102f5565b60408901906102f5565b6060870190610305565b6080850190610305565b60a0830190610305565b60c0818403910152612369565b90565b919290926124168183906121b6565b6124286124225f611268565b91610302565b115f146125f5576124446124dd939261244a92908101906121ba565b916121f4565b92919490945b94929161246366038d7ea4c68000612218565b926124796124728683906119a4565b8590611298565b93612497612486846112e5565b6124906002611100565b869161291d565b60206124b36124ae6124a96002611100565b612240565b61224c565b63bda009fe906124d286926124c6610214565b9b8c9485938493612112565b835260048301610cb1565b03915afa9384156125f05761252861253761258b93612514612580985f9c8d916125c2575b5061250c896112e5565b90869161291d565b61251c610214565b928391602083016122a4565b60208201810382520382610b69565b61255161254c6125476002611100565b612240565b61224c565b93634fb1a07b979497949598612566306115f3565b9b9390919293612574610214565b9c8d9b8c9a8b99612112565b89526004890161239a565b03925af180156125bd5761259d575b50565b6125b8903d805f833e6125b08183610b69565b810190612327565b61259a565b612285565b6125e3915060203d81116125e9575b6125db8183610b69565b810190612267565b5f612502565b503d6125d1565b612285565b5050906124dd906126066008611100565b926126116009611121565b9161261c600a611121565b94929492612450565b6126379061263161271a565b906129fc565b565b9061264560ff91610dc9565b9181191691161790565b9061266461265f61266b92611a29565b611a35565b8254612639565b9055565b61267761109b565b5061268c612686828490611c92565b15610273565b5f14612714576126b360016126ae5f6126a68186906118cb565b018590611c5b565b61264f565b906126bc61271a565b906126f96126f36126ed7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956118bf565b9261135e565b9261135e565b92612702610214565b8061270c816105b2565b0390a4600190565b50505f90565b6127226110df565b503390565b61272f61109b565b5061273b818390611c92565b5f146127c2576127615f61275c5f6127548186906118cb565b018590611c5b565b61264f565b9061276a61271a565b906127a76127a161279b7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956118bf565b9261135e565b9261135e565b926127b0610214565b806127ba816105b2565b0390a4600190565b50505f90565b9160206127e99294936127e260408201965f8301906102f5565b0190610305565b565b90612832612837936128236004949361280a63a9059cbb919391612118565b92612813610214565b96879460208601908152016127c8565b60208201810382520383610b69565b612839565b565b905f6020916128466110e3565b5061284f6110e3565b50828151910182855af1156128e2573d5f519061287461286e5f611268565b91610302565b145f146128c85750612885816120fd565b3b6128986128925f611268565b91610302565b145b6128a15750565b6128ad6128c4916120fd565b5f918291635274afe760e01b835260048301610cb1565b0390fd5b6128db6128d56001611fc8565b91610302565b141561289a565b6040513d5f823e3d90fd5b6128f690611268565b9052565b91602061291b92949361291460408201965f8301906102f5565b01906128ed565b565b909161296060049161295163095ea7b3612938879391612118565b92612941610214565b95869460208601908152016127c8565b60208201810382520382610b69565b9061297561296f828490612a37565b15610273565b61297f575b505050565b6129cc60046129d1946129c784916129b863095ea7b361299f5f91612118565b926129a8610214565b96879460208601908152016128fa565b60208201810382520383610b69565b612839565b612839565b5f808061297a565b9160206129fa9294936129f360408201965f8301906102f5565b0190610434565b565b90612a11612a0b838390611c92565b15610273565b612a19575050565b612a335f92839263e2517d3f60e01b8452600484016129d9565b0390fd5b905f602091612a4461109b565b50612a4d61109b565b50612a566110e3565b50612a5f6110e3565b50828151910182855af13d915f51919283612a7b575b50505090565b90919250612a91612a8b5f611268565b91610302565b145f14612abf57612aa291506120fd565b3b612ab5612aaf5f611268565b91610302565b115b5f8080612a75565b50612ad3612acd6001611fc8565b91610302565b14612ab756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x10\x97W\0[a\0\x1F_5a\x02\x0EV[\x80c\x01\xFF\xC9\xA7\x14a\x02\tW\x80c\x0E\x15\x08\xD9\x14a\x02\x04W\x80c\x103\xB4\xCC\x14a\x01\xFFW\x80c\x11\x8C8\xC7\x14a\x01\xFAW\x80c\x12Y\xA5\xC8\x14a\x01\xF5W\x80c\x18\xB6\x8B\x8C\x14a\x01\xF0W\x80c\x1B\x9A\x91\xA4\x14a\x01\xEBW\x80c$\x8A\x9C\xA3\x14a\x01\xE6W\x80c//\xF1]\x14a\x01\xE1W\x80c4b\xFA\xC3\x14a\x01\xDCW\x80c6V\x8A\xBE\x14a\x01\xD7W\x80c6\xB0\x89\xD8\x14a\x01\xD2W\x80cJe\x85Z\x14a\x01\xCDW\x80cP\x1D\x81\\\x14a\x01\xC8W\x80cZ\xB1\xD6\x1C\x14a\x01\xC3W\x80c]\x94*\xC1\x14a\x01\xBEW\x80ca\xB0\xA5n\x14a\x01\xB9W\x80cc\"\x14\x90\x14a\x01\xB4W\x80ce\xD7\xA3\xC9\x14a\x01\xAFW\x80cf\xD0\x03\xAC\x14a\x01\xAAW\x80cg\xEE\xBA\x0C\x14a\x01\xA5W\x80ck\xCC\x8C\x14\x14a\x01\xA0W\x80c\x91\xD1HT\x14a\x01\x9BW\x80c\xA2\x17\xFD\xDF\x14a\x01\x96W\x80c\xB2\r0\xA9\x14a\x01\x91W\x80c\xC9\xF5\xB6>\x14a\x01\x8CW\x80c\xCA\xED\\\x7F\x14a\x01\x87W\x80c\xD5Gt\x1F\x14a\x01\x82W\x80c\xEA\xD9<\x8F\x14a\x01}W\x80c\xED\xE7\xCE\xBD\x14a\x01xWc\xFB\x8CKQ\x03a\0\x0EWa\x10_V[a\x0F\xF5V[a\x0F\x8BV[a\x0F\x1BV[a\x0E\xE7V[a\x0ExV[a\x0E6V[a\x0E\x01V[a\r\x90V[a\r]V[a\r\nV[a\x0C\xC6V[a\x0C<V[a\n\x1CV[a\t\xCAV[a\t[V[a\t\x19V[a\x08\xA3V[a\x08^V[a\x07\xFCV[a\x07\xB9V[a\x07\x84V[a\x07!V[a\x06\xBFV[a\x06JV[a\x05\xB7V[a\x04\x9AV[a\x04VV[a\x03\xCDV[a\x03DV[a\x02\x9AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02;\x81a\x02&V[\x03a\x02BWV[_\x80\xFD[\x90P5\x90a\x02S\x82a\x022V[V[\x90` \x82\x82\x03\x12a\x02nWa\x02k\x91_\x01a\x02FV[\x90V[a\x02\x1EV[\x15\x15\x90V[a\x02\x81\x90a\x02sV[\x90RV[\x91\x90a\x02\x98\x90_` \x85\x01\x94\x01\x90a\x02xV[V[4a\x02\xCAWa\x02\xC6a\x02\xB5a\x02\xB06`\x04a\x02UV[a\x10\x9FV[a\x02\xBDa\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xF3[a\x02\x1AV[_\x91\x03\x12a\x02\xD9WV[a\x02\x1EV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xF2\x90a\x02\xDEV[\x90V[a\x02\xFE\x90a\x02\xE9V[\x90RV[\x90V[a\x03\x0E\x90a\x03\x02V[\x90RV[`@\x90a\x03;a\x03B\x94\x96\x95\x93\x96a\x031``\x84\x01\x98_\x85\x01\x90a\x02\xF5V[` \x83\x01\x90a\x03\x05V[\x01\x90a\x03\x05V[V[4a\x03wWa\x03T6`\x04a\x02\xCFV[a\x03sa\x03_a\x11.V[a\x03j\x93\x91\x93a\x02\x14V[\x93\x84\x93\x84a\x03\x12V[\x03\x90\xF3[a\x02\x1AV[\x1C\x90V[\x90V[a\x03\x93\x90`\x08a\x03\x98\x93\x02a\x03|V[a\x03\x80V[\x90V[\x90a\x03\xA6\x91Ta\x03\x83V[\x90V[a\x03\xB5`\x05_\x90a\x03\x9BV[\x90V[\x91\x90a\x03\xCB\x90_` \x85\x01\x94\x01\x90a\x03\x05V[V[4a\x03\xFDWa\x03\xDD6`\x04a\x02\xCFV[a\x03\xF9a\x03\xE8a\x03\xA9V[a\x03\xF0a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x04.a\x04\x02V[\x90V[\x90V[a\x04=\x90a\x041V[\x90RV[\x91\x90a\x04T\x90_` \x85\x01\x94\x01\x90a\x044V[V[4a\x04\x86Wa\x04f6`\x04a\x02\xCFV[a\x04\x82a\x04qa\x04&V[a\x04ya\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[a\x04\x97`\x06_\x90a\x03\x9BV[\x90V[4a\x04\xCAWa\x04\xAA6`\x04a\x02\xCFV[a\x04\xC6a\x04\xB5a\x04\x8BV[a\x04\xBDa\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[a\x04\xD8\x81a\x02\xE9V[\x03a\x04\xDFWV[_\x80\xFD[\x90P5\x90a\x04\xF0\x82a\x04\xCFV[V[a\x04\xFB\x81a\x03\x02V[\x03a\x05\x02WV[_\x80\xFD[\x90P5\x90a\x05\x13\x82a\x04\xF2V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05[W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05VW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05QWV[a\x05\x1DV[a\x05\x19V[a\x05\x15V[\x91``\x83\x83\x03\x12a\x05\xADWa\x05w\x82_\x85\x01a\x04\xE3V[\x92a\x05\x85\x83` \x83\x01a\x05\x06V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xA8Wa\x05\xA4\x92\x01a\x05!V[\x90\x91V[a\x02\"V[a\x02\x1EV[_\x01\x90V[4a\x05\xE9Wa\x05\xD3a\x05\xCA6`\x04a\x05`V[\x92\x91\x90\x91a\x15\x15V[a\x05\xDBa\x02\x14V[\x80a\x05\xE5\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x05\xF7\x90a\x02\xDEV[\x90V[a\x06\x03\x81a\x05\xEEV[\x03a\x06\nWV[_\x80\xFD[\x90P5\x90a\x06\x1B\x82a\x05\xFAV[V[\x91\x90`@\x83\x82\x03\x12a\x06EW\x80a\x069a\x06B\x92_\x86\x01a\x06\x0EV[\x93` \x01a\x05\x06V[\x90V[a\x02\x1EV[4a\x06yWa\x06ca\x06]6`\x04a\x06\x1DV[\x90a\x18\xAFV[a\x06ka\x02\x14V[\x80a\x06u\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x06\x87\x81a\x041V[\x03a\x06\x8EWV[_\x80\xFD[\x90P5\x90a\x06\x9F\x82a\x06~V[V[\x90` \x82\x82\x03\x12a\x06\xBAWa\x06\xB7\x91_\x01a\x06\x92V[\x90V[a\x02\x1EV[4a\x06\xEFWa\x06\xEBa\x06\xDAa\x06\xD56`\x04a\x06\xA1V[a\x19\x05V[a\x06\xE2a\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[\x91\x90`@\x83\x82\x03\x12a\x07\x1CW\x80a\x07\x10a\x07\x19\x92_\x86\x01a\x06\x92V[\x93` \x01a\x04\xE3V[\x90V[a\x02\x1EV[4a\x07PWa\x07:a\x0746`\x04a\x06\xF4V[\x90a\x19PV[a\x07Ba\x02\x14V[\x80a\x07L\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x07\x81a\x07UV[\x90V[4a\x07\xB4Wa\x07\x946`\x04a\x02\xCFV[a\x07\xB0a\x07\x9Fa\x07yV[a\x07\xA7a\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[4a\x07\xE8Wa\x07\xD2a\x07\xCC6`\x04a\x06\xF4V[\x90a\x19\\V[a\x07\xDAa\x02\x14V[\x80a\x07\xE4\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x07\xF9`\x03_\x90a\x03\x9BV[\x90V[4a\x08,Wa\x08\x0C6`\x04a\x02\xCFV[a\x08(a\x08\x17a\x07\xEDV[a\x08\x1Fa\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x91\x90`@\x83\x82\x03\x12a\x08YW\x80a\x08Ma\x08V\x92_\x86\x01a\x05\x06V[\x93` \x01a\x05\x06V[\x90V[a\x02\x1EV[4a\x08\x8FWa\x08\x8Ba\x08za\x08t6`\x04a\x081V[\x90a\x19\xD9V[a\x08\x82a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[a\x08\xA0`\t_\x90a\x03\x9BV[\x90V[4a\x08\xD3Wa\x08\xB36`\x04a\x02\xCFV[a\x08\xCFa\x08\xBEa\x08\x94V[a\x08\xC6a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[a\x08\xE1\x81a\x02sV[\x03a\x08\xE8WV[_\x80\xFD[\x90P5\x90a\x08\xF9\x82a\x08\xD8V[V[\x90` \x82\x82\x03\x12a\t\x14Wa\t\x11\x91_\x01a\x08\xECV[\x90V[a\x02\x1EV[4a\tGWa\t1a\t,6`\x04a\x08\xFBV[a\x1A\x9EV[a\t9a\x02\x14V[\x80a\tC\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\tX`\n_\x90a\x03\x9BV[\x90V[4a\t\x8BWa\tk6`\x04a\x02\xCFV[a\t\x87a\tva\tLV[a\t~a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x90\x91``\x82\x84\x03\x12a\t\xC5Wa\t\xC2a\t\xAB\x84_\x85\x01a\x04\xE3V[\x93a\t\xB9\x81` \x86\x01a\x05\x06V[\x93`@\x01a\x04\xE3V[\x90V[a\x02\x1EV[4a\t\xF9Wa\t\xE3a\t\xDD6`\x04a\t\x90V[\x91a\x1B\x1AV[a\t\xEBa\x02\x14V[\x80a\t\xF5\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[\x90` \x82\x82\x03\x12a\n\x17Wa\n\x14\x91_\x01a\x05\x06V[\x90V[a\x02\x1EV[4a\nJWa\n4a\n/6`\x04a\t\xFEV[a\x1BOV[a\n<a\x02\x14V[\x80a\nF\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\n\x96W[` \x83\x10\x14a\n\x91WV[a\nbV[\x91`\x7F\x16\x91a\n\x86V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\n\xCCa\n\xC5\x83a\nvV[\x80\x94a\n\xA0V[\x91`\x01\x81\x16\x90\x81_\x14a\x0B#WP`\x01\x14a\n\xE7W[PPPV[a\n\xF4\x91\x92\x93\x94Pa\n\xA9V[\x91_\x92[\x81\x84\x10a\x0B\x0BWPP\x01\x90_\x80\x80a\n\xE2V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\n\xF8V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\n\xE2V[\x90a\x0BH\x91a\n\xB2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0Bs\x90a\x0BKV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\x8DW`@RV[a\x0BUV[\x90a\x0B\xB2a\x0B\xAB\x92a\x0B\xA2a\x02\x14V[\x93\x84\x80\x92a\x0B>V[\x03\x83a\x0BiV[V[\x90_\x10a\x0B\xC7Wa\x0B\xC4\x90a\x0B\x92V[\x90V[a\nOV[a\x0B\xD8`\x07_\x90a\x0B\xB4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0C\x12a\x0C\x1B` \x93a\x0C \x93a\x0C\t\x81a\x0B\xDBV[\x93\x84\x80\x93a\x0B\xDFV[\x95\x86\x91\x01a\x0B\xE8V[a\x0BKV[\x01\x90V[a\x0C9\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0B\xF3V[\x90V[4a\x0ClWa\x0CL6`\x04a\x02\xCFV[a\x0Cha\x0CWa\x0B\xCCV[a\x0C_a\x02\x14V[\x91\x82\x91\x82a\x0C$V[\x03\x90\xF3[a\x02\x1AV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\x8C\x90`\x08a\x0C\x91\x93\x02a\x03|V[a\x0CqV[\x90V[\x90a\x0C\x9F\x91Ta\x0C|V[\x90V[a\x0C\xAE`\x08_\x90a\x0C\x94V[\x90V[\x91\x90a\x0C\xC4\x90_` \x85\x01\x94\x01\x90a\x02\xF5V[V[4a\x0C\xF6Wa\x0C\xD66`\x04a\x02\xCFV[a\x0C\xF2a\x0C\xE1a\x0C\xA2V[a\x0C\xE9a\x02\x14V[\x91\x82\x91\x82a\x0C\xB1V[\x03\x90\xF3[a\x02\x1AV[a\r\x07`\x04_\x90a\x03\x9BV[\x90V[4a\r:Wa\r\x1A6`\x04a\x02\xCFV[a\r6a\r%a\x0C\xFBV[a\r-a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x02\x1AV[\x90` \x82\x82\x03\x12a\rXWa\rU\x91_\x01a\x04\xE3V[\x90V[a\x02\x1EV[4a\r\x8BWa\rua\rp6`\x04a\r?V[a\x1CPV[a\r}a\x02\x14V[\x80a\r\x87\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[4a\r\xC1Wa\r\xBDa\r\xACa\r\xA66`\x04a\x06\xF4V[\x90a\x1C\x92V[a\r\xB4a\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xF3[a\x02\x1AV[\x90V[_\x1B\x90V[a\r\xE2a\r\xDDa\r\xE7\x92a\r\xC6V[a\r\xC9V[a\x041V[\x90V[a\r\xF3_a\r\xCEV[\x90V[a\r\xFEa\r\xEAV[\x90V[4a\x0E1Wa\x0E\x116`\x04a\x02\xCFV[a\x0E-a\x0E\x1Ca\r\xF6V[a\x0E$a\x02\x14V[\x91\x82\x91\x82a\x04AV[\x03\x90\xF3[a\x02\x1AV[4a\x0EdWa\x0ENa\x0EI6`\x04a\t\xFEV[a\x1DJV[a\x0EVa\x02\x14V[\x80a\x0E`\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[a\x0Eu`\x02_\x90a\x0C\x94V[\x90V[4a\x0E\xA8Wa\x0E\x886`\x04a\x02\xCFV[a\x0E\xA4a\x0E\x93a\x0EiV[a\x0E\x9Ba\x02\x14V[\x91\x82\x91\x82a\x0C\xB1V[\x03\x90\xF3[a\x02\x1AV[\x90\x91``\x82\x84\x03\x12a\x0E\xE2Wa\x0E\xDFa\x0E\xC8\x84_\x85\x01a\x04\xE3V[\x93a\x0E\xD6\x81` \x86\x01a\x05\x06V[\x93`@\x01a\x05\x06V[\x90V[a\x02\x1EV[4a\x0F\x16Wa\x0F\0a\x0E\xFA6`\x04a\x0E\xADV[\x91a\x1D\xD4V[a\x0F\x08a\x02\x14V[\x80a\x0F\x12\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[4a\x0FJWa\x0F4a\x0F.6`\x04a\x06\xF4V[\x90a\x1E\x0BV[a\x0F<a\x02\x14V[\x80a\x0FF\x81a\x05\xB2V[\x03\x90\xF3[a\x02\x1AV[`\xFF\x16\x90V[a\x0Fe\x90`\x08a\x0Fj\x93\x02a\x03|V[a\x0FOV[\x90V[\x90a\x0Fx\x91Ta\x0FUV[\x90V[a\x0F\x88`\x02`\x14\x90a\x0FmV[\x90V[4a\x0F\xBBWa\x0F\x9B6`\x04a\x02\xCFV[a\x0F\xB7a\x0F\xA6a\x0F{V[a\x0F\xAEa\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xF3[a\x02\x1AV[`@\x90a\x0F\xECa\x0F\xE1a\x0F\xF3\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0B\xF3V[\x96` \x83\x01\x90a\x02\xF5V[\x01\x90a\x02xV[V[4a\x10(Wa\x10\x056`\x04a\x02\xCFV[a\x10$a\x10\x10a\x1E(V[a\x10\x1B\x93\x91\x93a\x02\x14V[\x93\x84\x93\x84a\x0F\xC0V[\x03\x90\xF3[a\x02\x1AV[`@\x90a\x10Va\x10]\x94\x96\x95\x93\x96a\x10L``\x84\x01\x98_\x85\x01\x90a\x03\x05V[` \x83\x01\x90a\x03\x05V[\x01\x90a\x03\x05V[V[4a\x10\x92Wa\x10o6`\x04a\x02\xCFV[a\x10\x8Ea\x10za\x1E\x8DV[a\x10\x85\x93\x91\x93a\x02\x14V[\x93\x84\x93\x84a\x10-V[\x03\x90\xF3[a\x02\x1AV[_\x80\xFD[_\x90V[a\x10\xA7a\x10\x9BV[P\x80a\x10\xC2a\x10\xBCcye\xDB\x0B`\xE0\x1Ba\x02&V[\x91a\x02&V[\x14\x90\x81\x15a\x10\xCFW[P\x90V[a\x10\xD9\x91Pa\x1F\x1BV[_a\x10\xCBV[_\x90V[_\x90V[_\x1C\x90V[a\x10\xF8a\x10\xFD\x91a\x10\xE7V[a\x0CqV[\x90V[a\x11\n\x90Ta\x10\xECV[\x90V[a\x11\x19a\x11\x1E\x91a\x10\xE7V[a\x03\x80V[\x90V[a\x11+\x90Ta\x11\rV[\x90V[a\x116a\x10\xDFV[Pa\x11?a\x10\xE3V[Pa\x11Ha\x10\xE3V[Pa\x11S`\x08a\x11\0V[a\x11]`\ta\x11!V[\x91a\x11h`\na\x11!V[\x91\x92\x91\x90V[\x90a\x11\x82\x93\x92\x91a\x11}a\x1FmV[a\x11\xB3V[a\x11\x8Aa\x1F\xF1V[V[`\xA0\x1C\x90V[a\x11\x9Ea\x11\xA3\x91a\x11\x8CV[a\x0FOV[\x90V[a\x11\xB0\x90Ta\x11\x92V[\x90V[\x92\x91\x90a\x11\xC9a\x11\xC3`\x02a\x11\xA6V[\x15a\x02sV[a\x11\xD8Wa\x11\xD6\x93a\x11\xF4V[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x11\xF0`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x92\x91\x90a\x12\x12a\x12\x0Ca\x12\x05a\x07UV[3\x90a\x1C\x92V[\x15a\x02sV[a\x12!Wa\x12\x1F\x93a\x13jV[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x129`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90V[a\x12Ta\x12Oa\x12Y\x92a\r\xC6V[a\x12=V[a\x02\xDEV[\x90V[a\x12e\x90a\x12@V[\x90V[a\x12|a\x12wa\x12\x81\x92a\r\xC6V[a\x12=V[a\x03\x02V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12\xA7a\x12\xAD\x91\x93\x92\x93a\x03\x02V[\x92a\x03\x02V[\x82\x01\x80\x92\x11a\x12\xB8WV[a\x12\x84V[a\x12\xD1a\x12\xCCa\x12\xD6\x92a\x02\xDEV[a\x12=V[a\x02\xDEV[\x90V[a\x12\xE2\x90a\x12\xBDV[\x90V[a\x12\xEE\x90a\x12\xD9V[\x90V[a\x12\xFA\x90a\x12\xBDV[\x90V[a\x13\x06\x90a\x12\xF1V[\x90V[\x90a\x13\x15_\x19\x91a\r\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x133a\x13.a\x138\x92a\x03\x02V[a\x12=V[a\x03\x02V[\x90V[\x90V[\x90a\x13Sa\x13Na\x13Z\x92a\x13\x1FV[a\x13;V[\x82Ta\x13\tV[\x90UV[a\x13g\x90a\x12\xF1V[\x90V[\x91\x92\x90\x92\x82a\x13\x89a\x13\x83a\x13~_a\x12\\V[a\x02\xE9V[\x91a\x02\xE9V[\x14a\x14\xF9W\x83a\x13\xA1a\x13\x9B_a\x12hV[\x91a\x03\x02V[\x14a\x14\xDDW\x83a\x13\xC2a\x13\xBCa\x13\xB7`\x03a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11a\x14\xC1Wa\x13\xCFa ZV[a\x13\xE3a\x13\xDC`\x05a\x11!V[\x85\x90a\x12\x98V[a\x13\xFEa\x13\xF8a\x13\xF3`\x04a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11a\x14\xA5Wa\x140\x91a\x14%a\x14\x13\x85a\x12\xE5V[3a\x14\x1D0a\x12\xFDV[\x90\x88\x92a!fV[\x83\x91\x85\x90\x91\x92a$\x07V[a\x14Ma\x14F\x83a\x14A`\x05a\x11!V[a\x12\x98V[`\x05a\x13>V[a\x14W`\x02a\x11\0V[\x90a\x14\xA0a\x14\x8Ea\x14\x88\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x13^V[\x93a\x13^V[\x93a\x14\x97a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x14\xBD`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x14\xD9`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x14\xF5`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x15\x11`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90a\x15!\x93\x92\x91a\x11nV[V[\x90a\x15=\x91a\x158a\x153a\x04\x02V[a&%V[a\x17\xECV[V[a\x15H\x90a\x12\xF1V[\x90V[` \x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: zero addres_\x82\x01R\x01RV[a\x15\xA5`!`@\x92a\x0B\xDFV[a\x15\xAE\x81a\x15KV[\x01\x90V[a\x15\xC7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x98V[\x90V[\x15a\x15\xD1WV[a\x15\xD9a\x02\x14V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xEF`\x04\x82\x01a\x15\xB2V[\x03\x90\xFD[a\x15\xFC\x90a\x12\xF1V[\x90V[` \x7Ft balance\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: insufficien_\x82\x01R\x01RV[a\x16Y`)`@\x92a\x0B\xDFV[a\x16b\x81a\x15\xFFV[\x01\x90V[a\x16{\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16LV[\x90V[\x15a\x16\x85WV[a\x16\x8Da\x02\x14V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xA3`\x04\x82\x01a\x16fV[\x03\x90\xFD[\x90P\x90V[a\x16\xB7_\x80\x92a\x16\xA7V[\x01\x90V[a\x16\xC4\x90a\x16\xACV[\x90V[\x90a\x16\xDAa\x16\xD3a\x02\x14V[\x92\x83a\x0BiV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x16\xFAWa\x16\xF6` \x91a\x0BKV[\x01\x90V[a\x0BUV[\x90a\x17\x11a\x17\x0C\x83a\x16\xDCV[a\x16\xC7V[\x91\x82RV[``\x90V[=_\x14a\x176Wa\x17+=a\x16\xFFV[\x90=_` \x84\x01>[V[a\x17>a\x17\x16V[\x90a\x174V[` \x7Fr failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: ETH transfe_\x82\x01R\x01RV[a\x17\x9E`(`@\x92a\x0B\xDFV[a\x17\xA7\x81a\x17DV[\x01\x90V[a\x17\xC0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\x91V[\x90V[\x15a\x17\xCAWV[a\x17\xD2a\x02\x14V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xE8`\x04\x82\x01a\x17\xABV[\x03\x90\xFD[a\x18\x11\x81a\x18\na\x18\x04a\x17\xFF_a\x12\\V[a\x02\xE9V[\x91a\x15?V[\x14\x15a\x15\xCAV[a\x187\x82a\x180a\x18*a\x18$0a\x15\xF3V[1a\x03\x02V[\x91a\x03\x02V[\x11\x15a\x16~V[a\x18k_\x80a\x18E\x84a\x15?V[\x85a\x18Na\x02\x14V[\x90\x81a\x18Y\x81a\x16\xBBV[\x03\x92Z\xF1a\x18ea\x17\x1BV[Pa\x17\xC3V[a\x18\xAAa\x18\x98\x7F\x84U\xAEk\xE5\xD9/\x1D\xF1\xC3\xC1HC\x88\xE2G\xA3l~`\xD7 U\xAE!m\xBC%\x8F%}K\x92a\x15?V[\x92a\x18\xA1a\x02\x14V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA2V[\x90a\x18\xB9\x91a\x15#V[V[_\x90V[a\x18\xC8\x90a\x041V[\x90V[\x90a\x18\xD5\x90a\x18\xBFV[_R` R`@_ \x90V[\x90V[a\x18\xF0a\x18\xF5\x91a\x10\xE7V[a\x18\xE1V[\x90V[a\x19\x02\x90Ta\x18\xE4V[\x90V[`\x01a\x19\x1Da\x19#\x92a\x19\x16a\x18\xBBV[P_a\x18\xCBV[\x01a\x18\xF8V[\x90V[\x90a\x19A\x91a\x19<a\x197\x82a\x19\x05V[a&%V[a\x19CV[V[\x90a\x19M\x91a&oV[PV[\x90a\x19Z\x91a\x19&V[V[\x90\x80a\x19wa\x19qa\x19la'\x1AV[a\x02\xE9V[\x91a\x02\xE9V[\x03a\x19\x88Wa\x19\x85\x91a''V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x19\xA0`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[a\x19\xB3a\x19\xB9\x91\x93\x92\x93a\x03\x02V[\x92a\x03\x02V[\x91a\x19\xC5\x83\x82\x02a\x03\x02V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x19\xD4WV[a\x12\x84V[\x90a\x19\xEC\x91a\x19\xE6a\x10\xE3V[Pa\x19\xA4V[\x90V[a\x1A\x08\x90a\x1A\x03a\x19\xFEa\x04\x02V[a&%V[a\x1AXV[V[`\xA0\x1B\x90V[\x90a\x1A\x1F`\xFF`\xA0\x1B\x91a\x1A\nV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A2\x90a\x02sV[\x90V[\x90V[\x90a\x1AMa\x1AHa\x1AT\x92a\x1A)V[a\x1A5V[\x82Ta\x1A\x10V[\x90UV[a\x1Ac\x81`\x02a\x1A8V[a\x1A\x99\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x1A\x90a\x02\x14V[\x91\x82\x91\x82a\x02\x85V[\x03\x90\xA1V[a\x1A\xA7\x90a\x19\xEFV[V[\x90a\x1A\xC4\x92\x91a\x1A\xBFa\x1A\xBAa\r\xEAV[a&%V[a\x1A\xC6V[V[\x91\x90\x81a\x1A\xE3a\x1A\xDDa\x1A\xD8_a\x12\\V[a\x02\xE9V[\x91a\x02\xE9V[\x14a\x1A\xFEWa\x1A\xF4a\x1A\xFC\x93a\x12\xE5V[\x91\x90\x91a'\xEBV[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1B\x16`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90a\x1B%\x92\x91a\x1A\xA9V[V[a\x1B@\x90a\x1B;a\x1B6a\x04\x02V[a&%V[a\x1BBV[V[a\x1BM\x90`\x03a\x13>V[V[a\x1BX\x90a\x1B'V[V[a\x1Bs\x90a\x1Bna\x1Bia\x04\x02V[a&%V[a\x1B\xB3V[V[\x90a\x1B\x86`\x01\x80`\xA0\x1B\x03\x91a\r\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x1B\xA8a\x1B\xA3a\x1B\xAF\x92a\x13^V[a\x1B\x90V[\x82Ta\x1BuV[\x90UV[\x80a\x1B\xCEa\x1B\xC8a\x1B\xC3_a\x12\\V[a\x02\xE9V[\x91a\x02\xE9V[\x14a\x1C4Wa\x1B\xDD`\x02a\x11\0V[a\x1B\xE8\x82`\x02a\x1B\x93V[\x90a\x1C\x1Ca\x1C\x16\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x13^V[\x91a\x13^V[\x91a\x1C%a\x02\x14V[\x80a\x1C/\x81a\x05\xB2V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1CL`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[a\x1CY\x90a\x1BZV[V[\x90a\x1Ce\x90a\x13^V[_R` R`@_ \x90V[a\x1C}a\x1C\x82\x91a\x10\xE7V[a\x0FOV[\x90V[a\x1C\x8F\x90Ta\x1CqV[\x90V[a\x1C\xB8\x91_a\x1C\xADa\x1C\xB3\x93a\x1C\xA6a\x10\x9BV[P\x82a\x18\xCBV[\x01a\x1C[V[a\x1C\x85V[\x90V[a\x1C\xD4\x90a\x1C\xCFa\x1C\xCAa\x04\x02V[a&%V[a\x1C\xF9V[V[\x91` a\x1C\xF7\x92\x94\x93a\x1C\xF0`@\x82\x01\x96_\x83\x01\x90a\x03\x05V[\x01\x90a\x03\x05V[V[a\x1D\x03`\x04a\x11!V[a\x1D\x0E\x82`\x04a\x13>V[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x1DEa\x1D<a\x02\x14V[\x92\x83\x92\x83a\x1C\xD6V[\x03\x90\xA1V[a\x1DS\x90a\x1C\xBBV[V[\x90a\x1Dp\x92\x91a\x1Dka\x1Dfa\x04\x02V[a&%V[a\x1DrV[V[\x91\x90\x91a\x1D\x80\x81`\x08a\x1B\x93V[a\x1D\x8B\x83`\ta\x13>V[a\x1D\x96\x82`\na\x13>V[\x91\x90\x91a\x1D\xCF\x7F\xB1\xE1g\x7F \x9A\x97L\xED\xA2\xC2\xABh\x15A\xC5\xDB\x04-\xB4\xA9\xB3T\xDD\xACy7D`\xDA2\0\x93a\x1D\xC6a\x02\x14V[\x93\x84\x93\x84a\x03\x12V[\x03\x90\xA1V[\x90a\x1D\xDF\x92\x91a\x1DUV[V[\x90a\x1D\xFC\x91a\x1D\xF7a\x1D\xF2\x82a\x19\x05V[a&%V[a\x1D\xFEV[V[\x90a\x1E\x08\x91a''V[PV[\x90a\x1E\x15\x91a\x1D\xE1V[V[``\x90V[a\x1E%\x90a\x0B\x92V[\x90V[a\x1E0a\x1E\x17V[Pa\x1E9a\x10\xDFV[Pa\x1EBa\x10\x9BV[P`\x07a\x1EO`\x02a\x11\0V[\x91a\x1Eca\x1E]`\x02a\x11\xA6V[\x92a\x1E\x1CV[\x92\x91\x90V[a\x1Ewa\x1E}\x91\x93\x92\x93a\x03\x02V[\x92a\x03\x02V[\x82\x03\x91\x82\x11a\x1E\x88WV[a\x12\x84V[a\x1E\x95a\x10\xE3V[Pa\x1E\x9Ea\x10\xE3V[Pa\x1E\xA7a\x10\xE3V[Pa\x1E\xB2`\x05a\x11!V[a\x1E\xBC`\x04a\x11!V[\x91a\x1E\xC7`\x04a\x11!V[a\x1E\xE2a\x1E\xDCa\x1E\xD7`\x05a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11_\x14a\x1F\rWa\x1F\x06a\x1E\xF6`\x04a\x11!V[a\x1F\0`\x05a\x11!V[\x90a\x1EhV[[\x91\x92\x91\x90V[a\x1F\x16_a\x12hV[a\x1F\x07V[a\x1F#a\x10\x9BV[Pa\x1F=a\x1F7c\x01\xFF\xC9\xA7`\xE0\x1Ba\x02&V[\x91a\x02&V[\x14\x90V[\x90V[a\x1FXa\x1FSa\x1F]\x92a\x1FAV[a\x12=V[a\x03\x02V[\x90V[a\x1Fj`\x02a\x1FDV[\x90V[a\x1Fw`\x01a\x11!V[a\x1F\x90a\x1F\x8Aa\x1F\x85a\x1F`V[a\x03\x02V[\x91a\x03\x02V[\x14a\x1F\xA9Wa\x1F\xA7a\x1F\xA0a\x1F`V[`\x01a\x13>V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x1F\xC1`\x04\x82\x01a\x05\xB2V[\x03\x90\xFD[\x90V[a\x1F\xDCa\x1F\xD7a\x1F\xE1\x92a\x1F\xC5V[a\x12=V[a\x03\x02V[\x90V[a\x1F\xEE`\x01a\x1F\xC8V[\x90V[a \x03a\x1F\xFCa\x1F\xE4V[`\x01a\x13>V[V[\x90V[a \x1Ca \x17a !\x92a \x05V[a\x12=V[a\x03\x02V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a Da J\x91a\x03\x02V[\x91a\x03\x02V[\x90\x81\x15a UW\x04\x90V[a $V[a pBa jb\x01Q\x80a \x08V[\x90a 8V[\x80a \x8Ca \x86a \x81`\x06a\x11!V[a\x03\x02V[\x91a\x03\x02V[\x11a \x95W[PV[\x80a \xF7\x91a \xA4`\x05a\x11!V[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a \xDAa \xD1a\x02\x14V[\x92\x83\x92\x83a\x1C\xD6V[\x03\x90\xA1a \xF0a \xE9_a\x12hV[`\x05a\x13>V[`\x06a\x13>V[_a \x92V[a!\x06\x90a\x12\xF1V[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[`\xE0\x1B\x90V[a!,a!'a!1\x92a!\tV[a!\x12V[a\x02&V[\x90V[`@\x90a!]a!d\x94\x96\x95\x93\x96a!S``\x84\x01\x98_\x85\x01\x90a\x02\xF5V[` \x83\x01\x90a\x02\xF5V[\x01\x90a\x03\x05V[V[`\x04\x92a!\xA0a!\xB4\x95\x93a!\xAF\x93\x94a!\x87c#\xB8r\xDD\x92\x94\x91\x92a!\x18V[\x93a!\x90a\x02\x14V[\x97\x88\x95` \x87\x01\x90\x81R\x01a!4V[` \x82\x01\x81\x03\x82R\x03\x83a\x0BiV[a(9V[V[P\x90V[\x90\x91``\x82\x84\x03\x12a!\xEFWa!\xECa!\xD5\x84_\x85\x01a\x06\x0EV[\x93a!\xE3\x81` \x86\x01a\x05\x06V[\x93`@\x01a\x05\x06V[\x90V[a\x02\x1EV[a\"\x0Ca\"\x06a\"\x12\x92\x95\x93\x95a\x15?V[\x94a\x13\x1FV[\x92a\x13\x1FV[\x90V[\x90V[a\",a\"'a\"1\x92a\"\x15V[a\x12=V[a\x03\x02V[\x90V[a\"=\x90a\x12\xBDV[\x90V[a\"I\x90a\"4V[\x90V[a\"U\x90a\x12\xF1V[\x90V[\x90PQ\x90a\"e\x82a\x04\xCFV[V[\x90` \x82\x82\x03\x12a\"\x80Wa\"}\x91_\x01a\"XV[\x90V[a\x02\x1EV[a\"\x8Da\x02\x14V[=_\x82>=\x90\xFD[a\"\xA0_\x80\x92a\x0B\xDFV[\x01\x90V[\x90a\"\xC7\x91a\"\xBA`@\x82\x01\x92_\x83\x01\x90a\x03\x05V[` \x81\x83\x03\x91\x01Ra\"\x95V[\x90V[_\x80\xFD[\x90\x92\x91\x92a\"\xE3a\"\xDE\x82a\x16\xDCV[a\x16\xC7V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\"\xFFWa\"\xFD\x92a\x0B\xE8V[V[a\"\xCAV[\x90\x80`\x1F\x83\x01\x12\x15a#\"W\x81` a#\x1F\x93Q\x91\x01a\"\xCEV[\x90V[a\x05\x15V[\x90` \x82\x82\x03\x12a#WW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a#RWa#O\x92\x01a#\x04V[\x90V[a\x02\"V[a\x02\x1EV[Q\x90V[` \x91\x81R\x01\x90V[a#\x88a#\x91` \x93a#\x96\x93a#\x7F\x81a#\\V[\x93\x84\x80\x93a#`V[\x95\x86\x91\x01a\x0B\xE8V[a\x0BKV[\x01\x90V[\x93\x94a#\xE3a$\x04\x98\x96a#\xD9a#\xF7\x96a#\xCFa#\xED\x96\x9B\x97a#\xC5`\xE0\x8C\x01\x9D_\x8D\x01\x90a\x02\xF5V[` \x8B\x01\x90a\x02\xF5V[`@\x89\x01\x90a\x02\xF5V[``\x87\x01\x90a\x03\x05V[`\x80\x85\x01\x90a\x03\x05V[`\xA0\x83\x01\x90a\x03\x05V[`\xC0\x81\x84\x03\x91\x01Ra#iV[\x90V[\x91\x92\x90\x92a$\x16\x81\x83\x90a!\xB6V[a$(a$\"_a\x12hV[\x91a\x03\x02V[\x11_\x14a%\xF5Wa$Da$\xDD\x93\x92a$J\x92\x90\x81\x01\x90a!\xBAV[\x91a!\xF4V[\x92\x91\x94\x90\x94[\x94\x92\x91a$cf\x03\x8D~\xA4\xC6\x80\0a\"\x18V[\x92a$ya$r\x86\x83\x90a\x19\xA4V[\x85\x90a\x12\x98V[\x93a$\x97a$\x86\x84a\x12\xE5V[a$\x90`\x02a\x11\0V[\x86\x91a)\x1DV[` a$\xB3a$\xAEa$\xA9`\x02a\x11\0V[a\"@V[a\"LV[c\xBD\xA0\t\xFE\x90a$\xD2\x86\x92a$\xC6a\x02\x14V[\x9B\x8C\x94\x85\x93\x84\x93a!\x12V[\x83R`\x04\x83\x01a\x0C\xB1V[\x03\x91Z\xFA\x93\x84\x15a%\xF0Wa%(a%7a%\x8B\x93a%\x14a%\x80\x98_\x9C\x8D\x91a%\xC2W[Pa%\x0C\x89a\x12\xE5V[\x90\x86\x91a)\x1DV[a%\x1Ca\x02\x14V[\x92\x83\x91` \x83\x01a\"\xA4V[` \x82\x01\x81\x03\x82R\x03\x82a\x0BiV[a%Qa%La%G`\x02a\x11\0V[a\"@V[a\"LV[\x93cO\xB1\xA0{\x97\x94\x97\x94\x95\x98a%f0a\x15\xF3V[\x9B\x93\x90\x91\x92\x93a%ta\x02\x14V[\x9C\x8D\x9B\x8C\x9A\x8B\x99a!\x12V[\x89R`\x04\x89\x01a#\x9AV[\x03\x92Z\xF1\x80\x15a%\xBDWa%\x9DW[PV[a%\xB8\x90=\x80_\x83>a%\xB0\x81\x83a\x0BiV[\x81\x01\x90a#'V[a%\x9AV[a\"\x85V[a%\xE3\x91P` =\x81\x11a%\xE9W[a%\xDB\x81\x83a\x0BiV[\x81\x01\x90a\"gV[_a%\x02V[P=a%\xD1V[a\"\x85V[PP\x90a$\xDD\x90a&\x06`\x08a\x11\0V[\x92a&\x11`\ta\x11!V[\x91a&\x1C`\na\x11!V[\x94\x92\x94\x92a$PV[a&7\x90a&1a'\x1AV[\x90a)\xFCV[V[\x90a&E`\xFF\x91a\r\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a&da&_a&k\x92a\x1A)V[a\x1A5V[\x82Ta&9V[\x90UV[a&wa\x10\x9BV[Pa&\x8Ca&\x86\x82\x84\x90a\x1C\x92V[\x15a\x02sV[_\x14a'\x14Wa&\xB3`\x01a&\xAE_a&\xA6\x81\x86\x90a\x18\xCBV[\x01\x85\x90a\x1C[V[a&OV[\x90a&\xBCa'\x1AV[\x90a&\xF9a&\xF3a&\xED\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x18\xBFV[\x92a\x13^V[\x92a\x13^V[\x92a'\x02a\x02\x14V[\x80a'\x0C\x81a\x05\xB2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a'\"a\x10\xDFV[P3\x90V[a'/a\x10\x9BV[Pa';\x81\x83\x90a\x1C\x92V[_\x14a'\xC2Wa'a_a'\\_a'T\x81\x86\x90a\x18\xCBV[\x01\x85\x90a\x1C[V[a&OV[\x90a'ja'\x1AV[\x90a'\xA7a'\xA1a'\x9B\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x18\xBFV[\x92a\x13^V[\x92a\x13^V[\x92a'\xB0a\x02\x14V[\x80a'\xBA\x81a\x05\xB2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a'\xE9\x92\x94\x93a'\xE2`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a\x03\x05V[V[\x90a(2a(7\x93a(#`\x04\x94\x93a(\nc\xA9\x05\x9C\xBB\x91\x93\x91a!\x18V[\x92a(\x13a\x02\x14V[\x96\x87\x94` \x86\x01\x90\x81R\x01a'\xC8V[` \x82\x01\x81\x03\x82R\x03\x83a\x0BiV[a(9V[V[\x90_` \x91a(Fa\x10\xE3V[Pa(Oa\x10\xE3V[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a(\xE2W=_Q\x90a(ta(n_a\x12hV[\x91a\x03\x02V[\x14_\x14a(\xC8WPa(\x85\x81a \xFDV[;a(\x98a(\x92_a\x12hV[\x91a\x03\x02V[\x14[a(\xA1WPV[a(\xADa(\xC4\x91a \xFDV[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\x0C\xB1V[\x03\x90\xFD[a(\xDBa(\xD5`\x01a\x1F\xC8V[\x91a\x03\x02V[\x14\x15a(\x9AV[`@Q=_\x82>=\x90\xFD[a(\xF6\x90a\x12hV[\x90RV[\x91` a)\x1B\x92\x94\x93a)\x14`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a(\xEDV[V[\x90\x91a)``\x04\x91a)Qc\t^\xA7\xB3a)8\x87\x93\x91a!\x18V[\x92a)Aa\x02\x14V[\x95\x86\x94` \x86\x01\x90\x81R\x01a'\xC8V[` \x82\x01\x81\x03\x82R\x03\x82a\x0BiV[\x90a)ua)o\x82\x84\x90a*7V[\x15a\x02sV[a)\x7FW[PPPV[a)\xCC`\x04a)\xD1\x94a)\xC7\x84\x91a)\xB8c\t^\xA7\xB3a)\x9F_\x91a!\x18V[\x92a)\xA8a\x02\x14V[\x96\x87\x94` \x86\x01\x90\x81R\x01a(\xFAV[` \x82\x01\x81\x03\x82R\x03\x83a\x0BiV[a(9V[a(9V[_\x80\x80a)zV[\x91` a)\xFA\x92\x94\x93a)\xF3`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a\x044V[V[\x90a*\x11a*\x0B\x83\x83\x90a\x1C\x92V[\x15a\x02sV[a*\x19WPPV[a*3_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a)\xD9V[\x03\x90\xFD[\x90_` \x91a*Da\x10\x9BV[Pa*Ma\x10\x9BV[Pa*Va\x10\xE3V[Pa*_a\x10\xE3V[P\x82\x81Q\x91\x01\x82\x85Z\xF1=\x91_Q\x91\x92\x83a*{W[PPP\x90V[\x90\x91\x92Pa*\x91a*\x8B_a\x12hV[\x91a\x03\x02V[\x14_\x14a*\xBFWa*\xA2\x91Pa \xFDV[;a*\xB5a*\xAF_a\x12hV[\x91a\x03\x02V[\x11[_\x80\x80a*uV[Pa*\xD3a*\xCD`\x01a\x1F\xC8V[\x91a\x03\x02V[\x14a*\xB7V",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `BridgeCallFailed(string)` and selector `0xd245b2d3`.
```solidity
error BridgeCallFailed(string reason);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeCallFailed {
        #[allow(missing_docs)]
        pub reason: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeCallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeCallFailed) -> Self {
                (value.reason,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeCallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { reason: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeCallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeCallFailed(string)";
            const SELECTOR: [u8; 4] = [210u8, 69u8, 178u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.reason,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `BridgeNotActive()` and selector `0x7bea20b2`.
```solidity
error BridgeNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeNotActive()";
            const SELECTOR: [u8; 4] = [123u8, 234u8, 32u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExcessiveAmount()` and selector `0x70d168bc`.
```solidity
error ExcessiveAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExcessiveAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExcessiveAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ExcessiveAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExcessiveAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExcessiveAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExcessiveAmount()";
            const SELECTOR: [u8; 4] = [112u8, 209u8, 104u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`.
```solidity
error SafeERC20FailedOperation(address token);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeERC20FailedOperation {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeERC20FailedOperation>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeERC20FailedOperation) -> Self {
                (value.token,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeERC20FailedOperation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { token: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeERC20FailedOperation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeERC20FailedOperation(address)";
            const SELECTOR: [u8; 4] = [82u8, 116u8, 175u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UnauthorizedCaller()` and selector `0x5c427cd9`.
```solidity
error UnauthorizedCaller();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorizedCaller {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedCaller> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedCaller) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedCaller {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedCaller {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedCaller()";
            const SELECTOR: [u8; 4] = [92u8, 66u8, 124u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ArbitrumConfigUpdated(address,uint256,uint256)` and selector `0xb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da3200`.
```solidity
event ArbitrumConfigUpdated(address recipient, uint256 maxGas, uint256 gasPriceBid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ArbitrumConfigUpdated {
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ArbitrumConfigUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ArbitrumConfigUpdated(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                177u8,
                225u8,
                103u8,
                127u8,
                32u8,
                154u8,
                151u8,
                76u8,
                237u8,
                162u8,
                194u8,
                171u8,
                104u8,
                21u8,
                65u8,
                197u8,
                219u8,
                4u8,
                45u8,
                180u8,
                169u8,
                179u8,
                84u8,
                221u8,
                172u8,
                121u8,
                55u8,
                68u8,
                96u8,
                218u8,
                50u8,
                0u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    recipient: data.0,
                    maxGas: data.1,
                    gasPriceBid: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasPriceBid),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ArbitrumConfigUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ArbitrumConfigUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ArbitrumConfigUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeExecuted(address,uint256,address)` and selector `0x3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8`.
```solidity
event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeExecuted {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeExecuted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeExecuted(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: topics.1,
                    amount: data.0,
                    target: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token.clone(), self.target.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.target,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeStatusUpdated(bool)` and selector `0xb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d5`.
```solidity
event BridgeStatusUpdated(bool active);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeStatusUpdated {
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeStatusUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "BridgeStatusUpdated(bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { active: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeTargetUpdated(address,address)` and selector `0xb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069`.
```solidity
event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeTargetUpdated {
        #[allow(missing_docs)]
        pub oldTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newTarget: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeTargetUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeTargetUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldTarget: topics.1,
                    newTarget: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldTarget.clone(),
                    self.newTarget.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldTarget,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newTarget,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeTargetUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeTargetUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeTargetUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitReset(uint256,uint256)` and selector `0xda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab`.
```solidity
event DailyLimitReset(uint256 day, uint256 previousUsed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitReset {
        #[allow(missing_docs)]
        pub day: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousUsed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitReset {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitReset(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    day: data.0,
                    previousUsed: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.day),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousUsed),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitReset {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitReset> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitReset) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitUpdated(uint256,uint256)` and selector `0x207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf`.
```solidity
event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitUpdated {
        #[allow(missing_docs)]
        pub oldLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldLimit: data.0,
                    newLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `EthWithdrawn(address,uint256)` and selector `0x8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b`.
```solidity
event EthWithdrawn(address indexed to, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EthWithdrawn {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EthWithdrawn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "EthWithdrawn(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                132u8,
                85u8,
                174u8,
                107u8,
                229u8,
                217u8,
                47u8,
                29u8,
                241u8,
                195u8,
                193u8,
                72u8,
                67u8,
                136u8,
                226u8,
                71u8,
                163u8,
                108u8,
                126u8,
                96u8,
                215u8,
                32u8,
                85u8,
                174u8,
                33u8,
                109u8,
                188u8,
                37u8,
                143u8,
                37u8,
                125u8,
                75u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    to: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EthWithdrawn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EthWithdrawn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EthWithdrawn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _recipient, uint256 _maxGas, uint256 _gasPriceBid);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub caller: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _bridgeTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.admin,
                        value.caller,
                        value._bridgeTarget,
                        value._maxSingleTransfer,
                        value._dailyLimit,
                        value._recipient,
                        value._maxGas,
                        value._gasPriceBid,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        caller: tuple.1,
                        _bridgeTarget: tuple.2,
                        _maxSingleTransfer: tuple.3,
                        _dailyLimit: tuple.4,
                        _recipient: tuple.5,
                        _maxGas: tuple.6,
                        _gasPriceBid: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._bridgeTarget,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxSingleTransfer),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._dailyLimit),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
        }
    };
    /**Function with signature `BRIDGE_ADMIN_ROLE()` and selector `0x118c38c7`.
```solidity
function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_ADMIN_ROLE()`](BRIDGE_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 56u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `BRIDGE_CALLER_ROLE()` and selector `0x3462fac3`.
```solidity
function BRIDGE_CALLER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_CALLER_ROLE()`](BRIDGE_CALLER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_CALLER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_CALLER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_CALLER_ROLE()";
            const SELECTOR: [u8; 4] = [52u8, 98u8, 250u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeActive()` and selector `0xead93c8f`.
```solidity
function bridgeActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveCall {}
    ///Container type for the return parameters of the [`bridgeActive()`](bridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeActive()";
            const SELECTOR: [u8; 4] = [234u8, 217u8, 60u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeName()` and selector `0x65d7a3c9`.
```solidity
function bridgeName() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameCall {}
    ///Container type for the return parameters of the [`bridgeName()`](bridgeNameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeNameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeNameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeName()";
            const SELECTOR: [u8; 4] = [101u8, 215u8, 163u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeTarget()` and selector `0xc9f5b63e`.
```solidity
function bridgeTarget() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetCall {}
    ///Container type for the return parameters of the [`bridgeTarget()`](bridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeTargetCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeTargetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeTarget()";
            const SELECTOR: [u8; 4] = [201u8, 245u8, 182u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEthValue(uint256,uint256)` and selector `0x4a65855a`.
```solidity
function calculateEthValue(uint256 _maxGas, uint256 _gasPriceBid) external pure returns (uint256 ethValue);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEthValueCall {
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEthValue(uint256,uint256)`](calculateEthValueCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEthValueReturn {
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEthValueCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEthValueCall) -> Self {
                    (value._maxGas, value._gasPriceBid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEthValueCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _maxGas: tuple.0,
                        _gasPriceBid: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEthValueReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEthValueReturn) -> Self {
                    (value.ethValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEthValueReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { ethValue: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEthValueCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEthValueReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEthValue(uint256,uint256)";
            const SELECTOR: [u8; 4] = [74u8, 101u8, 133u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyLimit()` and selector `0x67eeba0c`.
```solidity
function dailyLimit() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitCall {}
    ///Container type for the return parameters of the [`dailyLimit()`](dailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyLimitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyLimit()";
            const SELECTOR: [u8; 4] = [103u8, 238u8, 186u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyUsed()` and selector `0x1033b4cc`.
```solidity
function dailyUsed() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedCall {}
    ///Container type for the return parameters of the [`dailyUsed()`](dailyUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyUsedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyUsedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyUsed()";
            const SELECTOR: [u8; 4] = [16u8, 51u8, 180u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBridge(address,uint256,bytes)` and selector `0x18b68b8c`.
```solidity
function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dynamicData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeBridge(address,uint256,bytes)`](executeBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeCall) -> Self {
                    (value.token, value.amount, value.dynamicData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        dynamicData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBridgeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBridge(address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [24u8, 182u8, 139u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.dynamicData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `gasPriceBid()` and selector `0x5d942ac1`.
```solidity
function gasPriceBid() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasPriceBidCall {}
    ///Container type for the return parameters of the [`gasPriceBid()`](gasPriceBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasPriceBidReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasPriceBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: gasPriceBidCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasPriceBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasPriceBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: gasPriceBidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasPriceBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for gasPriceBidCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = gasPriceBidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "gasPriceBid()";
            const SELECTOR: [u8; 4] = [93u8, 148u8, 42u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getArbitrumConfig()` and selector `0x0e1508d9`.
```solidity
function getArbitrumConfig() external view returns (address recipientAddr, uint256 maxGasLimit, uint256 gasPriceBidAmount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getArbitrumConfigCall {}
    ///Container type for the return parameters of the [`getArbitrumConfig()`](getArbitrumConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getArbitrumConfigReturn {
        #[allow(missing_docs)]
        pub recipientAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxGasLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBidAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getArbitrumConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getArbitrumConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getArbitrumConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getArbitrumConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getArbitrumConfigReturn) -> Self {
                    (value.recipientAddr, value.maxGasLimit, value.gasPriceBidAmount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getArbitrumConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipientAddr: tuple.0,
                        maxGasLimit: tuple.1,
                        gasPriceBidAmount: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getArbitrumConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getArbitrumConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getArbitrumConfig()";
            const SELECTOR: [u8; 4] = [14u8, 21u8, 8u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeInfo()` and selector `0xede7cebd`.
```solidity
function getBridgeInfo() external view returns (string memory name, address target, bool active);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoCall {}
    ///Container type for the return parameters of the [`getBridgeInfo()`](getBridgeInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoReturn {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoReturn) -> Self {
                    (value.name, value.target, value.active)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        target: tuple.1,
                        active: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeInfoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeInfoReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeInfo()";
            const SELECTOR: [u8; 4] = [237u8, 231u8, 206u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getDailyUsage()` and selector `0xfb8c4b51`.
```solidity
function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageCall {}
    ///Container type for the return parameters of the [`getDailyUsage()`](getDailyUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageReturn {
        #[allow(missing_docs)]
        pub used: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub remaining: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageCall> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageReturn) -> Self {
                    (value.used, value.limit, value.remaining)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        used: tuple.0,
                        limit: tuple.1,
                        remaining: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getDailyUsageCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getDailyUsageReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getDailyUsage()";
            const SELECTOR: [u8; 4] = [251u8, 140u8, 75u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `lastResetDay()` and selector `0x1259a5c8`.
```solidity
function lastResetDay() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayCall {}
    ///Container type for the return parameters of the [`lastResetDay()`](lastResetDayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayCall> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastResetDayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastResetDayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastResetDay()";
            const SELECTOR: [u8; 4] = [18u8, 89u8, 165u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxGas()` and selector `0x501d815c`.
```solidity
function maxGas() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxGasCall {}
    ///Container type for the return parameters of the [`maxGas()`](maxGasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxGasReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxGasCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxGasCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxGasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxGasReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxGasReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxGasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxGasCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxGasReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxGas()";
            const SELECTOR: [u8; 4] = [80u8, 29u8, 129u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxSingleTransfer()` and selector `0x36b089d8`.
```solidity
function maxSingleTransfer() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferCall {}
    ///Container type for the return parameters of the [`maxSingleTransfer()`](maxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxSingleTransferCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxSingleTransferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxSingleTransfer()";
            const SELECTOR: [u8; 4] = [54u8, 176u8, 137u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recipient()` and selector `0x66d003ac`.
```solidity
function recipient() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientCall {}
    ///Container type for the return parameters of the [`recipient()`](recipientCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientCall> for UnderlyingRustTuple<'_> {
                fn from(value: recipientCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recipientReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recipientCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recipientReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recipient()";
            const SELECTOR: [u8; 4] = [102u8, 208u8, 3u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recoverTokens(address,uint256,address)` and selector `0x61b0a56e`.
```solidity
function recoverTokens(address token, uint256 amount, address to) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`recoverTokens(address,uint256,address)`](recoverTokensCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensCall> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensCall) -> Self {
                    (value.token, value.amount, value.to)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        to: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recoverTokensCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recoverTokensReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recoverTokens(address,uint256,address)";
            const SELECTOR: [u8; 4] = [97u8, 176u8, 165u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setArbitrumConfig(address,uint256,uint256)` and selector `0xcaed5c7f`.
```solidity
function setArbitrumConfig(address _recipient, uint256 _maxGas, uint256 _gasPriceBid) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setArbitrumConfigCall {
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setArbitrumConfig(address,uint256,uint256)`](setArbitrumConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setArbitrumConfigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setArbitrumConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setArbitrumConfigCall) -> Self {
                    (value._recipient, value._maxGas, value._gasPriceBid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setArbitrumConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _recipient: tuple.0,
                        _maxGas: tuple.1,
                        _gasPriceBid: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setArbitrumConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setArbitrumConfigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setArbitrumConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setArbitrumConfigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setArbitrumConfigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setArbitrumConfig(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [202u8, 237u8, 92u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeActive(bool)` and selector `0x5ab1d61c`.
```solidity
function setBridgeActive(bool active) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveCall {
        #[allow(missing_docs)]
        pub active: bool,
    }
    ///Container type for the return parameters of the [`setBridgeActive(bool)`](setBridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveCall) -> Self {
                    (value.active,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { active: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeActive(bool)";
            const SELECTOR: [u8; 4] = [90u8, 177u8, 214u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeTarget(address)` and selector `0x6bcc8c14`.
```solidity
function setBridgeTarget(address target) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetCall {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBridgeTarget(address)`](setBridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetCall) -> Self {
                    (value.target,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { target: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeTargetCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeTargetReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeTarget(address)";
            const SELECTOR: [u8; 4] = [107u8, 204u8, 140u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDailyLimit(uint256)` and selector `0xb20d30a9`.
```solidity
function setDailyLimit(uint256 limit) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitCall {
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setDailyLimit(uint256)`](setDailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitCall) -> Self {
                    (value.limit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { limit: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDailyLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDailyLimitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDailyLimit(uint256)";
            const SELECTOR: [u8; 4] = [178u8, 13u8, 48u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxSingleTransfer(uint256)` and selector `0x63221490`.
```solidity
function setMaxSingleTransfer(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferCall {
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxSingleTransfer(uint256)`](setMaxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxSingleTransferCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxSingleTransferReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxSingleTransfer(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 34u8, 20u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdrawEth(address,uint256)` and selector `0x1b9a91a4`.
```solidity
function withdrawEth(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawEthCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`withdrawEth(address,uint256)`](withdrawEthCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawEthReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawEthCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawEthCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawEthCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawEthReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawEthReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawEthReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawEthCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawEthReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawEth(address,uint256)";
            const SELECTOR: [u8; 4] = [27u8, 154u8, 145u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbitrumBridgeProxy`](self) function calls.
    pub enum ArbitrumBridgeProxyCalls {
        #[allow(missing_docs)]
        BRIDGE_ADMIN_ROLE(BRIDGE_ADMIN_ROLECall),
        #[allow(missing_docs)]
        BRIDGE_CALLER_ROLE(BRIDGE_CALLER_ROLECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        bridgeActive(bridgeActiveCall),
        #[allow(missing_docs)]
        bridgeName(bridgeNameCall),
        #[allow(missing_docs)]
        bridgeTarget(bridgeTargetCall),
        #[allow(missing_docs)]
        calculateEthValue(calculateEthValueCall),
        #[allow(missing_docs)]
        dailyLimit(dailyLimitCall),
        #[allow(missing_docs)]
        dailyUsed(dailyUsedCall),
        #[allow(missing_docs)]
        executeBridge(executeBridgeCall),
        #[allow(missing_docs)]
        gasPriceBid(gasPriceBidCall),
        #[allow(missing_docs)]
        getArbitrumConfig(getArbitrumConfigCall),
        #[allow(missing_docs)]
        getBridgeInfo(getBridgeInfoCall),
        #[allow(missing_docs)]
        getDailyUsage(getDailyUsageCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        lastResetDay(lastResetDayCall),
        #[allow(missing_docs)]
        maxGas(maxGasCall),
        #[allow(missing_docs)]
        maxSingleTransfer(maxSingleTransferCall),
        #[allow(missing_docs)]
        recipient(recipientCall),
        #[allow(missing_docs)]
        recoverTokens(recoverTokensCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        setArbitrumConfig(setArbitrumConfigCall),
        #[allow(missing_docs)]
        setBridgeActive(setBridgeActiveCall),
        #[allow(missing_docs)]
        setBridgeTarget(setBridgeTargetCall),
        #[allow(missing_docs)]
        setDailyLimit(setDailyLimitCall),
        #[allow(missing_docs)]
        setMaxSingleTransfer(setMaxSingleTransferCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        withdrawEth(withdrawEthCall),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [14u8, 21u8, 8u8, 217u8],
            [16u8, 51u8, 180u8, 204u8],
            [17u8, 140u8, 56u8, 199u8],
            [18u8, 89u8, 165u8, 200u8],
            [24u8, 182u8, 139u8, 140u8],
            [27u8, 154u8, 145u8, 164u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [52u8, 98u8, 250u8, 195u8],
            [54u8, 86u8, 138u8, 190u8],
            [54u8, 176u8, 137u8, 216u8],
            [74u8, 101u8, 133u8, 90u8],
            [80u8, 29u8, 129u8, 92u8],
            [90u8, 177u8, 214u8, 28u8],
            [93u8, 148u8, 42u8, 193u8],
            [97u8, 176u8, 165u8, 110u8],
            [99u8, 34u8, 20u8, 144u8],
            [101u8, 215u8, 163u8, 201u8],
            [102u8, 208u8, 3u8, 172u8],
            [103u8, 238u8, 186u8, 12u8],
            [107u8, 204u8, 140u8, 20u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [178u8, 13u8, 48u8, 169u8],
            [201u8, 245u8, 182u8, 62u8],
            [202u8, 237u8, 92u8, 127u8],
            [213u8, 71u8, 116u8, 31u8],
            [234u8, 217u8, 60u8, 143u8],
            [237u8, 231u8, 206u8, 189u8],
            [251u8, 140u8, 75u8, 81u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbitrumBridgeProxyCalls {
        const NAME: &'static str = "ArbitrumBridgeProxyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 31usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BRIDGE_ADMIN_ROLE(_) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BRIDGE_CALLER_ROLE(_) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeActive(_) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeName(_) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeTarget(_) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEthValue(_) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyLimit(_) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyUsed(_) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeBridge(_) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::gasPriceBid(_) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getArbitrumConfig(_) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeInfo(_) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getDailyUsage(_) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::lastResetDay(_) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxGas(_) => <maxGasCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::maxSingleTransfer(_) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recipient(_) => {
                    <recipientCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recoverTokens(_) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setArbitrumConfig(_) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeActive(_) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeTarget(_) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDailyLimit(_) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxSingleTransfer(_) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdrawEth(_) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getArbitrumConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getArbitrumConfig)
                    }
                    getArbitrumConfig
                },
                {
                    fn dailyUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <dailyUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::dailyUsed)
                    }
                    dailyUsed
                },
                {
                    fn BRIDGE_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::BRIDGE_ADMIN_ROLE)
                    }
                    BRIDGE_ADMIN_ROLE
                },
                {
                    fn lastResetDay(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <lastResetDayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::lastResetDay)
                    }
                    lastResetDay
                },
                {
                    fn executeBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <executeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::executeBridge)
                    }
                    executeBridge
                },
                {
                    fn withdrawEth(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <withdrawEthCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::withdrawEth)
                    }
                    withdrawEth
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn BRIDGE_CALLER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::BRIDGE_CALLER_ROLE)
                    }
                    BRIDGE_CALLER_ROLE
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn maxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxSingleTransfer)
                    }
                    maxSingleTransfer
                },
                {
                    fn calculateEthValue(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <calculateEthValueCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::calculateEthValue)
                    }
                    calculateEthValue
                },
                {
                    fn maxGas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxGasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxGas)
                    }
                    maxGas
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn gasPriceBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <gasPriceBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::gasPriceBid)
                    }
                    gasPriceBid
                },
                {
                    fn recoverTokens(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <recoverTokensCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::recoverTokens)
                    }
                    recoverTokens
                },
                {
                    fn setMaxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setMaxSingleTransfer)
                    }
                    setMaxSingleTransfer
                },
                {
                    fn bridgeName(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeNameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeName)
                    }
                    bridgeName
                },
                {
                    fn recipient(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <recipientCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::recipient)
                    }
                    recipient
                },
                {
                    fn dailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <dailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::dailyLimit)
                    }
                    dailyLimit
                },
                {
                    fn setBridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setBridgeTarget)
                    }
                    setBridgeTarget
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn setDailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setDailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setDailyLimit)
                    }
                    setDailyLimit
                },
                {
                    fn bridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeTarget)
                    }
                    bridgeTarget
                },
                {
                    fn setArbitrumConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setArbitrumConfig)
                    }
                    setArbitrumConfig
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn bridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeActive)
                    }
                    bridgeActive
                },
                {
                    fn getBridgeInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getBridgeInfo)
                    }
                    getBridgeInfo
                },
                {
                    fn getDailyUsage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getDailyUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getDailyUsage)
                    }
                    getDailyUsage
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::calculateEthValue(inner) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::gasPriceBid(inner) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getArbitrumConfig(inner) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxGas(inner) => {
                    <maxGasCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setArbitrumConfig(inner) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdrawEth(inner) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEthValue(inner) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::gasPriceBid(inner) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getArbitrumConfig(inner) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxGas(inner) => {
                    <maxGasCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setArbitrumConfig(inner) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawEth(inner) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbitrumBridgeProxy`](self) custom errors.
    pub enum ArbitrumBridgeProxyErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        BridgeCallFailed(BridgeCallFailed),
        #[allow(missing_docs)]
        BridgeNotActive(BridgeNotActive),
        #[allow(missing_docs)]
        ExcessiveAmount(ExcessiveAmount),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
        #[allow(missing_docs)]
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        #[allow(missing_docs)]
        UnauthorizedCaller(UnauthorizedCaller),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [31u8, 42u8, 32u8, 5u8],
            [62u8, 229u8, 174u8, 181u8],
            [82u8, 116u8, 175u8, 231u8],
            [92u8, 66u8, 124u8, 217u8],
            [102u8, 151u8, 178u8, 50u8],
            [112u8, 209u8, 104u8, 188u8],
            [123u8, 234u8, 32u8, 178u8],
            [210u8, 69u8, 178u8, 211u8],
            [217u8, 46u8, 35u8, 61u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbitrumBridgeProxyErrors {
        const NAME: &'static str = "ArbitrumBridgeProxyErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeCallFailed(_) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeNotActive(_) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExcessiveAmount(_) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeERC20FailedOperation(_) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedCaller(_) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors>] = &[
                {
                    fn ZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn SafeERC20FailedOperation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::SafeERC20FailedOperation)
                    }
                    SafeERC20FailedOperation
                },
                {
                    fn UnauthorizedCaller(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <UnauthorizedCaller as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::UnauthorizedCaller)
                    }
                    UnauthorizedCaller
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExcessiveAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ExcessiveAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ExcessiveAmount)
                    }
                    ExcessiveAmount
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn BridgeCallFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <BridgeCallFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::BridgeCallFailed)
                    }
                    BridgeCallFailed
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                ArbitrumBridgeProxyErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`ArbitrumBridgeProxy`](self) events.
    pub enum ArbitrumBridgeProxyEvents {
        #[allow(missing_docs)]
        ArbitrumConfigUpdated(ArbitrumConfigUpdated),
        #[allow(missing_docs)]
        BridgeExecuted(BridgeExecuted),
        #[allow(missing_docs)]
        BridgeStatusUpdated(BridgeStatusUpdated),
        #[allow(missing_docs)]
        BridgeTargetUpdated(BridgeTargetUpdated),
        #[allow(missing_docs)]
        DailyLimitReset(DailyLimitReset),
        #[allow(missing_docs)]
        DailyLimitUpdated(DailyLimitUpdated),
        #[allow(missing_docs)]
        EthWithdrawn(EthWithdrawn),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ],
            [
                132u8,
                85u8,
                174u8,
                107u8,
                229u8,
                217u8,
                47u8,
                29u8,
                241u8,
                195u8,
                193u8,
                72u8,
                67u8,
                136u8,
                226u8,
                71u8,
                163u8,
                108u8,
                126u8,
                96u8,
                215u8,
                32u8,
                85u8,
                174u8,
                33u8,
                109u8,
                188u8,
                37u8,
                143u8,
                37u8,
                125u8,
                75u8,
            ],
            [
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ],
            [
                177u8,
                225u8,
                103u8,
                127u8,
                32u8,
                154u8,
                151u8,
                76u8,
                237u8,
                162u8,
                194u8,
                171u8,
                104u8,
                21u8,
                65u8,
                197u8,
                219u8,
                4u8,
                45u8,
                180u8,
                169u8,
                179u8,
                84u8,
                221u8,
                172u8,
                121u8,
                55u8,
                68u8,
                96u8,
                218u8,
                50u8,
                0u8,
            ],
            [
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbitrumBridgeProxyEvents {
        const NAME: &'static str = "ArbitrumBridgeProxyEvents";
        const COUNT: usize = 10usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ArbitrumConfigUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ArbitrumConfigUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ArbitrumConfigUpdated)
                }
                Some(<BridgeExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeExecuted)
                }
                Some(
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeStatusUpdated)
                }
                Some(
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeTargetUpdated)
                }
                Some(<DailyLimitReset as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DailyLimitReset as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitReset)
                }
                Some(
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitUpdated)
                }
                Some(<EthWithdrawn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <EthWithdrawn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::EthWithdrawn)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbitrumBridgeProxyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbitrumConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EthWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbitrumConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EthWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbitrumBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`ArbitrumBridgeProxyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbitrumBridgeProxyInstance<T, P, N> {
        ArbitrumBridgeProxyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _recipient: alloy::sol_types::private::Address,
        _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbitrumBridgeProxyInstance<T, P, N>>,
    > {
        ArbitrumBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _recipient,
            _maxGas,
            _gasPriceBid,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _recipient: alloy::sol_types::private::Address,
        _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbitrumBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _recipient,
            _maxGas,
            _gasPriceBid,
        )
    }
    /**A [`ArbitrumBridgeProxy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbitrumBridgeProxy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbitrumBridgeProxyInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbitrumBridgeProxyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbitrumBridgeProxyInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbitrumBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`ArbitrumBridgeProxyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<ArbitrumBridgeProxyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                caller,
                _bridgeTarget,
                _maxSingleTransfer,
                _dailyLimit,
                _recipient,
                _maxGas,
                _gasPriceBid,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            caller,
                            _bridgeTarget,
                            _maxSingleTransfer,
                            _dailyLimit,
                            _recipient,
                            _maxGas,
                            _gasPriceBid,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbitrumBridgeProxyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbitrumBridgeProxyInstance<T, P, N> {
            ArbitrumBridgeProxyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`BRIDGE_ADMIN_ROLE`] function.
        pub fn BRIDGE_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_ADMIN_ROLECall, N> {
            self.call_builder(&BRIDGE_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`BRIDGE_CALLER_ROLE`] function.
        pub fn BRIDGE_CALLER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_CALLER_ROLECall, N> {
            self.call_builder(&BRIDGE_CALLER_ROLECall {})
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`bridgeActive`] function.
        pub fn bridgeActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeActiveCall, N> {
            self.call_builder(&bridgeActiveCall {})
        }
        ///Creates a new call builder for the [`bridgeName`] function.
        pub fn bridgeName(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeNameCall, N> {
            self.call_builder(&bridgeNameCall {})
        }
        ///Creates a new call builder for the [`bridgeTarget`] function.
        pub fn bridgeTarget(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeTargetCall, N> {
            self.call_builder(&bridgeTargetCall {})
        }
        ///Creates a new call builder for the [`calculateEthValue`] function.
        pub fn calculateEthValue(
            &self,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEthValueCall, N> {
            self.call_builder(
                &calculateEthValueCall {
                    _maxGas,
                    _gasPriceBid,
                },
            )
        }
        ///Creates a new call builder for the [`dailyLimit`] function.
        pub fn dailyLimit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyLimitCall, N> {
            self.call_builder(&dailyLimitCall {})
        }
        ///Creates a new call builder for the [`dailyUsed`] function.
        pub fn dailyUsed(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyUsedCall, N> {
            self.call_builder(&dailyUsedCall {})
        }
        ///Creates a new call builder for the [`executeBridge`] function.
        pub fn executeBridge(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            dynamicData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBridgeCall, N> {
            self.call_builder(
                &executeBridgeCall {
                    token,
                    amount,
                    dynamicData,
                },
            )
        }
        ///Creates a new call builder for the [`gasPriceBid`] function.
        pub fn gasPriceBid(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, gasPriceBidCall, N> {
            self.call_builder(&gasPriceBidCall {})
        }
        ///Creates a new call builder for the [`getArbitrumConfig`] function.
        pub fn getArbitrumConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getArbitrumConfigCall, N> {
            self.call_builder(&getArbitrumConfigCall {})
        }
        ///Creates a new call builder for the [`getBridgeInfo`] function.
        pub fn getBridgeInfo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeInfoCall, N> {
            self.call_builder(&getBridgeInfoCall {})
        }
        ///Creates a new call builder for the [`getDailyUsage`] function.
        pub fn getDailyUsage(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getDailyUsageCall, N> {
            self.call_builder(&getDailyUsageCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`lastResetDay`] function.
        pub fn lastResetDay(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastResetDayCall, N> {
            self.call_builder(&lastResetDayCall {})
        }
        ///Creates a new call builder for the [`maxGas`] function.
        pub fn maxGas(&self) -> alloy_contract::SolCallBuilder<T, &P, maxGasCall, N> {
            self.call_builder(&maxGasCall {})
        }
        ///Creates a new call builder for the [`maxSingleTransfer`] function.
        pub fn maxSingleTransfer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxSingleTransferCall, N> {
            self.call_builder(&maxSingleTransferCall {})
        }
        ///Creates a new call builder for the [`recipient`] function.
        pub fn recipient(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, recipientCall, N> {
            self.call_builder(&recipientCall {})
        }
        ///Creates a new call builder for the [`recoverTokens`] function.
        pub fn recoverTokens(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            to: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, recoverTokensCall, N> {
            self.call_builder(
                &recoverTokensCall {
                    token,
                    amount,
                    to,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`setArbitrumConfig`] function.
        pub fn setArbitrumConfig(
            &self,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setArbitrumConfigCall, N> {
            self.call_builder(
                &setArbitrumConfigCall {
                    _recipient,
                    _maxGas,
                    _gasPriceBid,
                },
            )
        }
        ///Creates a new call builder for the [`setBridgeActive`] function.
        pub fn setBridgeActive(
            &self,
            active: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeActiveCall, N> {
            self.call_builder(&setBridgeActiveCall { active })
        }
        ///Creates a new call builder for the [`setBridgeTarget`] function.
        pub fn setBridgeTarget(
            &self,
            target: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeTargetCall, N> {
            self.call_builder(&setBridgeTargetCall { target })
        }
        ///Creates a new call builder for the [`setDailyLimit`] function.
        pub fn setDailyLimit(
            &self,
            limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDailyLimitCall, N> {
            self.call_builder(&setDailyLimitCall { limit })
        }
        ///Creates a new call builder for the [`setMaxSingleTransfer`] function.
        pub fn setMaxSingleTransfer(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxSingleTransferCall, N> {
            self.call_builder(&setMaxSingleTransferCall { amount })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`withdrawEth`] function.
        pub fn withdrawEth(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawEthCall, N> {
            self.call_builder(&withdrawEthCall { to, amount })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ArbitrumConfigUpdated`] event.
        pub fn ArbitrumConfigUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ArbitrumConfigUpdated, N> {
            self.event_filter::<ArbitrumConfigUpdated>()
        }
        ///Creates a new event filter for the [`BridgeExecuted`] event.
        pub fn BridgeExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeExecuted, N> {
            self.event_filter::<BridgeExecuted>()
        }
        ///Creates a new event filter for the [`BridgeStatusUpdated`] event.
        pub fn BridgeStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeStatusUpdated, N> {
            self.event_filter::<BridgeStatusUpdated>()
        }
        ///Creates a new event filter for the [`BridgeTargetUpdated`] event.
        pub fn BridgeTargetUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeTargetUpdated, N> {
            self.event_filter::<BridgeTargetUpdated>()
        }
        ///Creates a new event filter for the [`DailyLimitReset`] event.
        pub fn DailyLimitReset_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitReset, N> {
            self.event_filter::<DailyLimitReset>()
        }
        ///Creates a new event filter for the [`DailyLimitUpdated`] event.
        pub fn DailyLimitUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitUpdated, N> {
            self.event_filter::<DailyLimitUpdated>()
        }
        ///Creates a new event filter for the [`EthWithdrawn`] event.
        pub fn EthWithdrawn_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, EthWithdrawn, N> {
            self.event_filter::<EthWithdrawn>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
