/**

Generated by the following Solidity interface...
```solidity
interface ArbitrumBridgeProxy {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error BridgeCallFailed(string reason);
    error BridgeNotActive();
    error ExcessiveAmount();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    error UnauthorizedCaller();
    error ZeroAddress();
    error ZeroAmount();

    event ArbitrumConfigUpdated(address recipient, uint256 maxGas, uint256 gasPriceBid);
    event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
    event BridgeStatusUpdated(bool active);
    event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
    event DailyLimitReset(uint256 day, uint256 previousUsed);
    event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _recipient, uint256 _maxGas, uint256 _gasPriceBid);

    receive() external payable;

    function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
    function BRIDGE_CALLER_ROLE() external view returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function bridgeActive() external view returns (bool);
    function bridgeName() external view returns (string memory);
    function bridgeTarget() external view returns (address);
    function calculateEthValue(uint256 _maxGas, uint256 _gasPriceBid) external pure returns (uint256 ethValue);
    function dailyLimit() external view returns (uint256);
    function dailyUsed() external view returns (uint256);
    function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
    function gasPriceBid() external view returns (uint256);
    function getArbitrumConfig() external view returns (address recipientAddr, uint256 maxGasLimit, uint256 gasPriceBidAmount);
    function getBridgeInfo() external view returns (string memory name, address target, bool active);
    function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function lastResetDay() external view returns (uint256);
    function maxGas() external view returns (uint256);
    function maxSingleTransfer() external view returns (uint256);
    function recipient() external view returns (address);
    function recoverTokens(address token, uint256 amount, address to) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function setArbitrumConfig(address _recipient, uint256 _maxGas, uint256 _gasPriceBid) external;
    function setBridgeActive(bool active) external;
    function setBridgeTarget(address target) external;
    function setDailyLimit(uint256 limit) external;
    function setMaxSingleTransfer(uint256 amount) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_bridgeTarget",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxSingleTransfer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_dailyLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "BRIDGE_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BRIDGE_CALLER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeName",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeTarget",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEthValue",
    "inputs": [
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "ethValue",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "dailyLimit",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "dailyUsed",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "executeBridge",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dynamicData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "gasPriceBid",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getArbitrumConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "recipientAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "maxGasLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBidAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeInfo",
    "inputs": [],
    "outputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getDailyUsage",
    "inputs": [],
    "outputs": [
      {
        "name": "used",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "remaining",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastResetDay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxGas",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxSingleTransfer",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recipient",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recoverTokens",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setArbitrumConfig",
    "inputs": [
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeActive",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeTarget",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDailyLimit",
    "inputs": [
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxSingleTransfer",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ArbitrumConfigUpdated",
    "inputs": [
      {
        "name": "recipient",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "maxGas",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeExecuted",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeStatusUpdated",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeTargetUpdated",
    "inputs": [
      {
        "name": "oldTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitReset",
    "inputs": [
      {
        "name": "day",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "previousUsed",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitUpdated",
    "inputs": [
      {
        "name": "oldLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeCallFailed",
    "inputs": [
      {
        "name": "reason",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExcessiveAmount",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeERC20FailedOperation",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnauthorizedCaller",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbitrumBridgeProxy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461003957610023610014610187565b96959095949194939293610301565b61002b61003e565b61249761097f823961249790f35b610044565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007090610048565b810190811060018060401b0382111761008857604052565b610052565b906100a061009961003e565b9283610066565b565b5f80fd5b60018060a01b031690565b6100ba906100a6565b90565b6100c6816100b1565b036100cd57565b5f80fd5b905051906100de826100bd565b565b90565b6100ec816100e0565b036100f357565b5f80fd5b90505190610104826100e3565b565b9190610100838203126101825761011f815f85016100d1565b9261012d82602083016100d1565b9261013b83604084016100d1565b9261014981606085016100f7565b9261015782608083016100f7565b9261017f6101688460a085016100d1565b936101768160c086016100f7565b9360e0016100f7565b90565b6100a2565b6101a5612e168038038061019a8161008d565b928339810190610106565b9091929394959697565b60018060401b0381116101cb576101c7602091610048565b0190565b610052565b906101e26101dd836101af565b61008d565b918252565b5f7f417262697472756d204272696467650000000000000000000000000000000000910152565b610218600f6101d0565b90610225602083016101e7565b565b61022f61020e565b90565b5f1b90565b9061024860018060a01b0391610232565b9181191691161790565b90565b61026961026461026e926100a6565b610252565b6100a6565b90565b61027a90610255565b90565b61028690610271565b90565b90565b906102a161029c6102a89261027d565b610289565b8254610237565b9055565b906102b85f1991610232565b9181191691161790565b6102d66102d16102db926100e0565b610252565b6100e0565b90565b90565b906102f66102f16102fd926102c2565b6102de565b82546102ac565b9055565b9061033c97969461032e946103359794610327949361031e610227565b919293946106bb565b600861028c565b60096102e1565b600a6102e1565b565b90565b61035561035061035a9261033e565b610252565b6100a6565b90565b61036690610341565b90565b5f0190565b90565b61038561038061038a9261033e565b610232565b61036e565b90565b6103965f610371565b90565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b5190565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610419575b602083101461041457565b6103e5565b91607f1691610409565b5f5260205f2090565b601f602091010490565b1b90565b9190600861045591029161044f5f1984610436565b92610436565b9181191691161790565b919061047561047061047d936102c2565b6102de565b90835461043a565b9055565b5f90565b61049791610491610481565b9161045f565b565b5b8181106104a5575050565b806104b25f600193610485565b0161049a565b9190601f81116104c8575b505050565b6104d46104f993610423565b9060206104e08461042c565b83019310610501575b6104f29061042c565b0190610499565b5f80806104c3565b91506104f2819290506104e9565b1c90565b90610523905f199060080261050f565b191690565b8161053291610513565b906002021790565b90610544816103e1565b9060018060401b038211610602576105668261056085546103f9565b856104b8565b602090601f831160011461059a57918091610589935f9261058e575b5050610528565b90555b565b90915001515f80610582565b601f198316916105a985610423565b925f5b8181106105ea575091600293918560019694106105d0575b5050500201905561058c565b6105e0910151601f841690610513565b90555f80806105c4565b919360206001819287870151815501950192016105ac565b610052565b906106119161053a565b565b60a01b90565b9061062860ff60a01b91610613565b9181191691161790565b151590565b61064090610632565b90565b90565b9061065b61065661066292610637565b610643565b8254610619565b9055565b90565b61067d61067861068292610666565b610252565b6100e0565b90565b634e487b7160e01b5f52601260045260245ffd5b6106a56106ab916100e0565b916100e0565b9081156106b6570490565b610685565b90949391926106c86107e7565b816106e36106dd6106d85f61035d565b6100b1565b916100b1565b148015610799575b61077d5761073a6107489461073261074f986107246107419661071661070f61038d565b829061086d565b5061071f610399565b61086d565b5061072d6103bd565b61086d565b506007610607565b600261028c565b60036102e1565b60046102e1565b61075b60016002610646565b61077b6107744261076e62015180610669565b90610699565b60066102e1565b565b5f63d92e233d60e01b81528061079560048201610369565b0390fd5b50856107b56107af6107aa5f61035d565b6100b1565b916100b1565b146106eb565b90565b6107d26107cd6107d7926107bb565b610252565b6100e0565b90565b6107e460016107be565b90565b6107f96107f26107da565b60016102e1565b565b5f90565b6108089061036e565b90565b90610815906107ff565b5f5260205260405f2090565b9061082b9061027d565b5f5260205260405f2090565b9061084360ff91610232565b9181191691161790565b9061086261085d61086992610637565b610643565b8254610837565b9055565b6108756107fb565b5061088a610884828490610944565b15610632565b5f14610912576108b160016108ac5f6108a481869061080b565b018590610821565b61084d565b906108ba610971565b906108f76108f16108eb7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956107ff565b9261027d565b9261027d565b9261090061003e565b8061090a81610369565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61092f61093491610918565b61091d565b90565b6109419054610923565b90565b61096a915f61095f610965936109586107fb565b508261080b565b01610821565b610937565b90565b5f90565b61097961096d565b50339056fe60806040526004361015610015575b36610ff757005b61001f5f356101fe565b806301ffc9a7146101f95780630e1508d9146101f45780631033b4cc146101ef578063118c38c7146101ea5780631259a5c8146101e557806318b68b8c146101e0578063248a9ca3146101db5780632f2ff15d146101d65780633462fac3146101d157806336568abe146101cc57806336b089d8146101c75780634a65855a146101c2578063501d815c146101bd5780635ab1d61c146101b85780635d942ac1146101b357806361b0a56e146101ae57806363221490146101a957806365d7a3c9146101a457806366d003ac1461019f57806367eeba0c1461019a5780636bcc8c141461019557806391d1485414610190578063a217fddf1461018b578063b20d30a914610186578063c9f5b63e14610181578063caed5c7f1461017c578063d547741f14610177578063ead93c8f14610172578063ede7cebd1461016d5763fb8c4b510361000e57610fbf565b610f55565b610eeb565b610e7b565b610e47565b610dd8565b610d96565b610d61565b610cf0565b610cbd565b610c6a565b610c26565b610b9c565b61097c565b61092a565b6108bb565b610879565b610803565b6107be565b61075c565b610719565b6106e4565b610681565b61061f565b6105a7565b61048a565b610446565b6103bd565b610334565b61028a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61022b81610216565b0361023257565b5f80fd5b9050359061024382610222565b565b9060208282031261025e5761025b915f01610236565b90565b61020e565b151590565b61027190610263565b9052565b9190610288905f60208501940190610268565b565b346102ba576102b66102a56102a0366004610245565b610fff565b6102ad610204565b91829182610275565b0390f35b61020a565b5f9103126102c957565b61020e565b60018060a01b031690565b6102e2906102ce565b90565b6102ee906102d9565b9052565b90565b6102fe906102f2565b9052565b60409061032b610332949695939661032160608401985f8501906102e5565b60208301906102f5565b01906102f5565b565b34610367576103443660046102bf565b61036361034f61108e565b61035a939193610204565b93849384610302565b0390f35b61020a565b1c90565b90565b610383906008610388930261036c565b610370565b90565b906103969154610373565b90565b6103a560055f9061038b565b90565b91906103bb905f602085019401906102f5565b565b346103ed576103cd3660046102bf565b6103e96103d8610399565b6103e0610204565b918291826103a8565b0390f35b61020a565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61041e6103f2565b90565b90565b61042d90610421565b9052565b9190610444905f60208501940190610424565b565b34610476576104563660046102bf565b610472610461610416565b610469610204565b91829182610431565b0390f35b61020a565b61048760065f9061038b565b90565b346104ba5761049a3660046102bf565b6104b66104a561047b565b6104ad610204565b918291826103a8565b0390f35b61020a565b6104c8816102d9565b036104cf57565b5f80fd5b905035906104e0826104bf565b565b6104eb816102f2565b036104f257565b5f80fd5b90503590610503826104e2565b565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561054b5781359167ffffffffffffffff831161054657602001926001830284011161054157565b61050d565b610509565b610505565b9160608383031261059d57610567825f85016104d3565b9261057583602083016104f6565b92604082013567ffffffffffffffff8111610598576105949201610511565b9091565b610212565b61020e565b5f0190565b346105d9576105c36105ba366004610550565b92919091611475565b6105cb610204565b806105d5816105a2565b0390f35b61020a565b6105e781610421565b036105ee57565b5f80fd5b905035906105ff826105de565b565b9060208282031261061a57610617915f016105f2565b90565b61020e565b3461064f5761064b61063a610635366004610601565b6114cd565b610642610204565b91829182610431565b0390f35b61020a565b919060408382031261067c5780610670610679925f86016105f2565b936020016104d3565b90565b61020e565b346106b05761069a610694366004610654565b90611518565b6106a2610204565b806106ac816105a2565b0390f35b61020a565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b6106e16106b5565b90565b34610714576106f43660046102bf565b6107106106ff6106d9565b610707610204565b91829182610431565b0390f35b61020a565b346107485761073261072c366004610654565b90611524565b61073a610204565b80610744816105a2565b0390f35b61020a565b61075960035f9061038b565b90565b3461078c5761076c3660046102bf565b61078861077761074d565b61077f610204565b918291826103a8565b0390f35b61020a565b91906040838203126107b957806107ad6107b6925f86016104f6565b936020016104f6565b90565b61020e565b346107ef576107eb6107da6107d4366004610791565b906115a1565b6107e2610204565b918291826103a8565b0390f35b61020a565b61080060095f9061038b565b90565b34610833576108133660046102bf565b61082f61081e6107f4565b610826610204565b918291826103a8565b0390f35b61020a565b61084181610263565b0361084857565b5f80fd5b9050359061085982610838565b565b9060208282031261087457610871915f0161084c565b90565b61020e565b346108a75761089161088c36600461085b565b611666565b610899610204565b806108a3816105a2565b0390f35b61020a565b6108b8600a5f9061038b565b90565b346108eb576108cb3660046102bf565b6108e76108d66108ac565b6108de610204565b918291826103a8565b0390f35b61020a565b90916060828403126109255761092261090b845f85016104d3565b9361091981602086016104f6565b936040016104d3565b90565b61020e565b346109595761094361093d3660046108f0565b916116e2565b61094b610204565b80610955816105a2565b0390f35b61020a565b9060208282031261097757610974915f016104f6565b90565b61020e565b346109aa5761099461098f36600461095e565b611717565b61099c610204565b806109a6816105a2565b0390f35b61020a565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156109f6575b60208310146109f157565b6109c2565b91607f16916109e6565b60209181520190565b5f5260205f2090565b905f9291805490610a2c610a25836109d6565b8094610a00565b916001811690815f14610a835750600114610a47575b505050565b610a549192939450610a09565b915f925b818410610a6b57505001905f8080610a42565b60018160209295939554848601520191019290610a58565b92949550505060ff19168252151560200201905f8080610a42565b90610aa891610a12565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610ad390610aab565b810190811067ffffffffffffffff821117610aed57604052565b610ab5565b90610b12610b0b92610b02610204565b93848092610a9e565b0383610ac9565b565b905f10610b2757610b2490610af2565b90565b6109af565b610b3860075f90610b14565b90565b5190565b60209181520190565b90825f9392825e0152565b610b72610b7b602093610b8093610b6981610b3b565b93848093610b3f565b95869101610b48565b610aab565b0190565b610b999160208201915f818403910152610b53565b90565b34610bcc57610bac3660046102bf565b610bc8610bb7610b2c565b610bbf610204565b91829182610b84565b0390f35b61020a565b60018060a01b031690565b610bec906008610bf1930261036c565b610bd1565b90565b90610bff9154610bdc565b90565b610c0e60085f90610bf4565b90565b9190610c24905f602085019401906102e5565b565b34610c5657610c363660046102bf565b610c52610c41610c02565b610c49610204565b91829182610c11565b0390f35b61020a565b610c6760045f9061038b565b90565b34610c9a57610c7a3660046102bf565b610c96610c85610c5b565b610c8d610204565b918291826103a8565b0390f35b61020a565b90602082820312610cb857610cb5915f016104d3565b90565b61020e565b34610ceb57610cd5610cd0366004610c9f565b611818565b610cdd610204565b80610ce7816105a2565b0390f35b61020a565b34610d2157610d1d610d0c610d06366004610654565b9061185a565b610d14610204565b91829182610275565b0390f35b61020a565b90565b5f1b90565b610d42610d3d610d4792610d26565b610d29565b610421565b90565b610d535f610d2e565b90565b610d5e610d4a565b90565b34610d9157610d713660046102bf565b610d8d610d7c610d56565b610d84610204565b91829182610431565b0390f35b61020a565b34610dc457610dae610da936600461095e565b611912565b610db6610204565b80610dc0816105a2565b0390f35b61020a565b610dd560025f90610bf4565b90565b34610e0857610de83660046102bf565b610e04610df3610dc9565b610dfb610204565b91829182610c11565b0390f35b61020a565b9091606082840312610e4257610e3f610e28845f85016104d3565b93610e3681602086016104f6565b936040016104f6565b90565b61020e565b34610e7657610e60610e5a366004610e0d565b9161199c565b610e68610204565b80610e72816105a2565b0390f35b61020a565b34610eaa57610e94610e8e366004610654565b906119d3565b610e9c610204565b80610ea6816105a2565b0390f35b61020a565b60ff1690565b610ec5906008610eca930261036c565b610eaf565b90565b90610ed89154610eb5565b90565b610ee86002601490610ecd565b90565b34610f1b57610efb3660046102bf565b610f17610f06610edb565b610f0e610204565b91829182610275565b0390f35b61020a565b604090610f4c610f41610f539597969460608401908482035f860152610b53565b9660208301906102e5565b0190610268565b565b34610f8857610f653660046102bf565b610f84610f706119f0565b610f7b939193610204565b93849384610f20565b0390f35b61020a565b604090610fb6610fbd9496959396610fac60608401985f8501906102f5565b60208301906102f5565b01906102f5565b565b34610ff257610fcf3660046102bf565b610fee610fda611a55565b610fe5939193610204565b93849384610f8d565b0390f35b61020a565b5f80fd5b5f90565b611007610ffb565b508061102261101c637965db0b60e01b610216565b91610216565b1490811561102f575b5090565b6110399150611ae3565b5f61102b565b5f90565b5f90565b5f1c90565b61105861105d91611047565b610bd1565b90565b61106a905461104c565b90565b61107961107e91611047565b610370565b90565b61108b905461106d565b90565b61109661103f565b5061109f611043565b506110a8611043565b506110b36008611060565b6110bd6009611081565b916110c8600a611081565b91929190565b906110e29392916110dd611b35565b611113565b6110ea611bb9565b565b60a01c90565b6110fe611103916110ec565b610eaf565b90565b61111090546110f2565b90565b9291906111296111236002611106565b15610263565b6111385761113693611154565b565b5f633df5105960e11b815280611150600482016105a2565b0390fd5b92919061117261116c6111656106b5565b339061185a565b15610263565b6111815761117f936112ca565b565b5f635c427cd960e01b815280611199600482016105a2565b0390fd5b90565b6111b46111af6111b992610d26565b61119d565b6102ce565b90565b6111c5906111a0565b90565b6111dc6111d76111e192610d26565b61119d565b6102f2565b90565b634e487b7160e01b5f52601160045260245ffd5b61120761120d919392936102f2565b926102f2565b820180921161121857565b6111e4565b61123161122c611236926102ce565b61119d565b6102ce565b90565b6112429061121d565b90565b61124e90611239565b90565b61125a9061121d565b90565b61126690611251565b90565b906112755f1991610d29565b9181191691161790565b61129361128e611298926102f2565b61119d565b6102f2565b90565b90565b906112b36112ae6112ba9261127f565b61129b565b8254611269565b9055565b6112c790611251565b90565b91929092826112e96112e36112de5f6111bc565b6102d9565b916102d9565b1461145957836113016112fb5f6111c8565b916102f2565b1461143d578361132261131c6113176003611081565b6102f2565b916102f2565b116114215761132f611c22565b61134361133c6005611081565b85906111f8565b61135e6113586113536004611081565b6102f2565b916102f2565b11611405576113909161138561137385611245565b3361137d3061125d565b908892611d2e565b839185909192611ff6565b6113ad6113a6836113a16005611081565b6111f8565b600561129e565b6113b76002611060565b906114006113ee6113e87f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8936112be565b936112be565b936113f7610204565b918291826103a8565b0390a3565b5f631c345a2f60e21b81528061141d600482016105a2565b0390fd5b5f631c345a2f60e21b815280611439600482016105a2565b0390fd5b5f631f2a200560e01b815280611455600482016105a2565b0390fd5b5f63d92e233d60e01b815280611471600482016105a2565b0390fd5b906114819392916110ce565b565b5f90565b61149090610421565b90565b9061149d90611487565b5f5260205260405f2090565b90565b6114b86114bd91611047565b6114a9565b90565b6114ca90546114ac565b90565b60016114e56114eb926114de611483565b505f611493565b016114c0565b90565b90611509916115046114ff826114cd565b612194565b61150b565b565b90611515916121de565b50565b90611522916114ee565b565b908061153f611539611534612289565b6102d9565b916102d9565b036115505761154d91612296565b50565b5f63334bd91960e11b815280611568600482016105a2565b0390fd5b61157b611581919392936102f2565b926102f2565b9161158d8382026102f2565b92818404149015171561159c57565b6111e4565b906115b4916115ae611043565b5061156c565b90565b6115d0906115cb6115c66103f2565b612194565b611620565b565b60a01b90565b906115e760ff60a01b916115d2565b9181191691161790565b6115fa90610263565b90565b90565b9061161561161061161c926115f1565b6115fd565b82546115d8565b9055565b61162b816002611600565b6116617fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d591611658610204565b91829182610275565b0390a1565b61166f906115b7565b565b9061168c9291611687611682610d4a565b612194565b61168e565b565b9190816116ab6116a56116a05f6111bc565b6102d9565b916102d9565b146116c6576116bc6116c493611245565b919091612337565b565b5f63d92e233d60e01b8152806116de600482016105a2565b0390fd5b906116ed9291611671565b565b611708906117036116fe6103f2565b612194565b61170a565b565b61171590600361129e565b565b611720906116ef565b565b61173b906117366117316103f2565b612194565b61177b565b565b9061174e60018060a01b0391610d29565b9181191691161790565b90565b9061177061176b611777926112be565b611758565b825461173d565b9055565b8061179661179061178b5f6111bc565b6102d9565b916102d9565b146117fc576117a56002611060565b6117b082600261175b565b906117e46117de7fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069936112be565b916112be565b916117ed610204565b806117f7816105a2565b0390a3565b5f63d92e233d60e01b815280611814600482016105a2565b0390fd5b61182190611722565b565b9061182d906112be565b5f5260205260405f2090565b61184561184a91611047565b610eaf565b90565b6118579054611839565b90565b611880915f61187561187b9361186e610ffb565b5082611493565b01611823565b61184d565b90565b61189c906118976118926103f2565b612194565b6118c1565b565b9160206118bf9294936118b860408201965f8301906102f5565b01906102f5565b565b6118cb6004611081565b6118d682600461129e565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf9161190d611904610204565b9283928361189e565b0390a1565b61191b90611883565b565b90611938929161193361192e6103f2565b612194565b61193a565b565b91909161194881600861175b565b61195383600961129e565b61195e82600a61129e565b9190916119977fb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da32009361198e610204565b93849384610302565b0390a1565b906119a7929161191d565b565b906119c4916119bf6119ba826114cd565b612194565b6119c6565b565b906119d091612296565b50565b906119dd916119a9565b565b606090565b6119ed90610af2565b90565b6119f86119df565b50611a0161103f565b50611a0a610ffb565b506007611a176002611060565b91611a2b611a256002611106565b926119e4565b929190565b611a3f611a45919392936102f2565b926102f2565b8203918211611a5057565b6111e4565b611a5d611043565b50611a66611043565b50611a6f611043565b50611a7a6005611081565b611a846004611081565b91611a8f6004611081565b611aaa611aa4611a9f6005611081565b6102f2565b916102f2565b115f14611ad557611ace611abe6004611081565b611ac86005611081565b90611a30565b5b91929190565b611ade5f6111c8565b611acf565b611aeb610ffb565b50611b05611aff6301ffc9a760e01b610216565b91610216565b1490565b90565b611b20611b1b611b2592611b09565b61119d565b6102f2565b90565b611b326002611b0c565b90565b611b3f6001611081565b611b58611b52611b4d611b28565b6102f2565b916102f2565b14611b7157611b6f611b68611b28565b600161129e565b565b5f633ee5aeb560e01b815280611b89600482016105a2565b0390fd5b90565b611ba4611b9f611ba992611b8d565b61119d565b6102f2565b90565b611bb66001611b90565b90565b611bcb611bc4611bac565b600161129e565b565b90565b611be4611bdf611be992611bcd565b61119d565b6102f2565b90565b634e487b7160e01b5f52601260045260245ffd5b611c0c611c12916102f2565b916102f2565b908115611c1d570490565b611bec565b611c3842611c3262015180611bd0565b90611c00565b80611c54611c4e611c496006611081565b6102f2565b916102f2565b11611c5d575b50565b80611cbf91611c6c6005611081565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab91611ca2611c99610204565b9283928361189e565b0390a1611cb8611cb15f6111c8565b600561129e565b600661129e565b5f611c5a565b611cce90611251565b90565b63ffffffff1690565b60e01b90565b611cf4611cef611cf992611cd1565b611cda565b610216565b90565b604090611d25611d2c9496959396611d1b60608401985f8501906102e5565b60208301906102e5565b01906102f5565b565b600492611d68611d7c9593611d779394611d4f6323b872dd92949192611ce0565b93611d58610204565b9788956020870190815201611cfc565b60208201810382520383610ac9565b612385565b565b5090565b611d8b906102ce565b90565b611d9781611d82565b03611d9e57565b5f80fd5b90503590611daf82611d8e565b565b9091606082840312611de657611de3611dcc845f8501611da2565b93611dda81602086016104f6565b936040016104f6565b90565b61020e565b611df490611251565b90565b611e0f611e09611e1592959395611deb565b9461127f565b9261127f565b90565b90505190611e2582610838565b565b90602082820312611e4057611e3d915f01611e18565b90565b61020e565b916020611e66929493611e5f60408201965f8301906102e5565b01906102f5565b565b611e70610204565b3d5f823e3d90fd5b611e819061121d565b90565b611e8d90611e78565b90565b611e9990611251565b90565b611ea590611251565b90565b5f80fd5b90611ebf611eb8610204565b9283610ac9565b565b67ffffffffffffffff8111611edf57611edb602091610aab565b0190565b610ab5565b90929192611ef9611ef482611ec1565b611eac565b93818552602085019082840111611f1557611f1392610b48565b565b611ea8565b9080601f83011215611f3857816020611f3593519101611ee4565b90565b610505565b90602082820312611f6d575f82015167ffffffffffffffff8111611f6857611f659201611f1a565b90565b610212565b61020e565b60209181520190565b611f865f8092611f72565b0190565b9394611fd2611fdc9296611fc8611fe696611fbe611ff39b97611fb460e08c019c5f8d01906102e5565b60208b01906102e5565b60408901906102e5565b60608701906102f5565b60808501906102f5565b60a08301906102f5565b60c0818303910152611f7b565b90565b929091612004818390611d7e565b6120166120105f6111c8565b916102f2565b115f14612169576120349161202e9190810190611db1565b91611df7565b919390935b939161204683829061156c565b9161205861205382611245565b611cc5565b91602063095ea7b39361206b6002611060565b906120895f8a9761209461207d610204565b998a9687958694611cda565b845260048401611e45565b03925af18015612164575f966120f69461210192612138575b506120c86120c36120be6002611060565b611e84565b611e90565b92634fb1a07b9693969394976120dd30611e9c565b9a929091926120ea610204565b9b8c9a8b998a98611cda565b885260048801611f8a565b03925af1801561213357612113575b50565b61212e903d805f833e6121268183610ac9565b810190611f3d565b612110565b611e68565b6121589060203d811161215d575b6121508183610ac9565b810190611e27565b6120ad565b503d612146565b611e68565b50506121756008611060565b916121806009611081565b9061218b600a611081565b93919391612039565b6121a6906121a0612289565b9061245c565b565b906121b460ff91610d29565b9181191691161790565b906121d36121ce6121da926115f1565b6115fd565b82546121a8565b9055565b6121e6610ffb565b506121fb6121f582849061185a565b15610263565b5f1461228357612222600161221d5f612215818690611493565b018590611823565b6121be565b9061222b612289565b9061226861226261225c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611487565b926112be565b926112be565b92612271610204565b8061227b816105a2565b0390a4600190565b50505f90565b61229161103f565b503390565b61229e610ffb565b506122aa81839061185a565b5f14612331576122d05f6122cb5f6122c3818690611493565b018590611823565b6121be565b906122d9612289565b9061231661231061230a7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611487565b926112be565b926112be565b9261231f610204565b80612329816105a2565b0390a4600190565b50505f90565b9061237e6123839361236f6004949361235663a9059cbb919391611ce0565b9261235f610204565b9687946020860190815201611e45565b60208201810382520383610ac9565b612385565b565b905f602091612392611043565b5061239b611043565b50828151910182855af11561242e573d5f51906123c06123ba5f6111c8565b916102f2565b145f1461241457506123d181611cc5565b3b6123e46123de5f6111c8565b916102f2565b145b6123ed5750565b6123f961241091611cc5565b5f918291635274afe760e01b835260048301610c11565b0390fd5b6124276124216001611b90565b916102f2565b14156123e6565b6040513d5f823e3d90fd5b91602061245a92949361245360408201965f8301906102e5565b0190610424565b565b9061247161246b83839061185a565b15610263565b612479575050565b6124935f92839263e2517d3f60e01b845260048401612439565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\09Wa\0#a\0\x14a\x01\x87V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x03\x01V[a\0+a\0>V[a$\x97a\t\x7F\x829a$\x97\x90\xF3[a\0DV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0p\x90a\0HV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x88W`@RV[a\0RV[\x90a\0\xA0a\0\x99a\0>V[\x92\x83a\0fV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xBA\x90a\0\xA6V[\x90V[a\0\xC6\x81a\0\xB1V[\x03a\0\xCDWV[_\x80\xFD[\x90PQ\x90a\0\xDE\x82a\0\xBDV[V[\x90V[a\0\xEC\x81a\0\xE0V[\x03a\0\xF3WV[_\x80\xFD[\x90PQ\x90a\x01\x04\x82a\0\xE3V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x01\x82Wa\x01\x1F\x81_\x85\x01a\0\xD1V[\x92a\x01-\x82` \x83\x01a\0\xD1V[\x92a\x01;\x83`@\x84\x01a\0\xD1V[\x92a\x01I\x81``\x85\x01a\0\xF7V[\x92a\x01W\x82`\x80\x83\x01a\0\xF7V[\x92a\x01\x7Fa\x01h\x84`\xA0\x85\x01a\0\xD1V[\x93a\x01v\x81`\xC0\x86\x01a\0\xF7V[\x93`\xE0\x01a\0\xF7V[\x90V[a\0\xA2V[a\x01\xA5a.\x16\x808\x03\x80a\x01\x9A\x81a\0\x8DV[\x92\x839\x81\x01\x90a\x01\x06V[\x90\x91\x92\x93\x94\x95\x96\x97V[`\x01\x80`@\x1B\x03\x81\x11a\x01\xCBWa\x01\xC7` \x91a\0HV[\x01\x90V[a\0RV[\x90a\x01\xE2a\x01\xDD\x83a\x01\xAFV[a\0\x8DV[\x91\x82RV[_\x7FArbitrum Bridge\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\x18`\x0Fa\x01\xD0V[\x90a\x02%` \x83\x01a\x01\xE7V[V[a\x02/a\x02\x0EV[\x90V[_\x1B\x90V[\x90a\x02H`\x01\x80`\xA0\x1B\x03\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x02ia\x02da\x02n\x92a\0\xA6V[a\x02RV[a\0\xA6V[\x90V[a\x02z\x90a\x02UV[\x90V[a\x02\x86\x90a\x02qV[\x90V[\x90V[\x90a\x02\xA1a\x02\x9Ca\x02\xA8\x92a\x02}V[a\x02\x89V[\x82Ta\x027V[\x90UV[\x90a\x02\xB8_\x19\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xD6a\x02\xD1a\x02\xDB\x92a\0\xE0V[a\x02RV[a\0\xE0V[\x90V[\x90V[\x90a\x02\xF6a\x02\xF1a\x02\xFD\x92a\x02\xC2V[a\x02\xDEV[\x82Ta\x02\xACV[\x90UV[\x90a\x03<\x97\x96\x94a\x03.\x94a\x035\x97\x94a\x03'\x94\x93a\x03\x1Ea\x02'V[\x91\x92\x93\x94a\x06\xBBV[`\x08a\x02\x8CV[`\ta\x02\xE1V[`\na\x02\xE1V[V[\x90V[a\x03Ua\x03Pa\x03Z\x92a\x03>V[a\x02RV[a\0\xA6V[\x90V[a\x03f\x90a\x03AV[\x90V[_\x01\x90V[\x90V[a\x03\x85a\x03\x80a\x03\x8A\x92a\x03>V[a\x022V[a\x03nV[\x90V[a\x03\x96_a\x03qV[\x90V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04\x19W[` \x83\x10\x14a\x04\x14WV[a\x03\xE5V[\x91`\x7F\x16\x91a\x04\tV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x04U\x91\x02\x91a\x04O_\x19\x84a\x046V[\x92a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x04ua\x04pa\x04}\x93a\x02\xC2V[a\x02\xDEV[\x90\x83Ta\x04:V[\x90UV[_\x90V[a\x04\x97\x91a\x04\x91a\x04\x81V[\x91a\x04_V[V[[\x81\x81\x10a\x04\xA5WPPV[\x80a\x04\xB2_`\x01\x93a\x04\x85V[\x01a\x04\x9AV[\x91\x90`\x1F\x81\x11a\x04\xC8W[PPPV[a\x04\xD4a\x04\xF9\x93a\x04#V[\x90` a\x04\xE0\x84a\x04,V[\x83\x01\x93\x10a\x05\x01W[a\x04\xF2\x90a\x04,V[\x01\x90a\x04\x99V[_\x80\x80a\x04\xC3V[\x91Pa\x04\xF2\x81\x92\x90Pa\x04\xE9V[\x1C\x90V[\x90a\x05#\x90_\x19\x90`\x08\x02a\x05\x0FV[\x19\x16\x90V[\x81a\x052\x91a\x05\x13V[\x90`\x02\x02\x17\x90V[\x90a\x05D\x81a\x03\xE1V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x06\x02Wa\x05f\x82a\x05`\x85Ta\x03\xF9V[\x85a\x04\xB8V[` \x90`\x1F\x83\x11`\x01\x14a\x05\x9AW\x91\x80\x91a\x05\x89\x93_\x92a\x05\x8EW[PPa\x05(V[\x90U[V[\x90\x91P\x01Q_\x80a\x05\x82V[`\x1F\x19\x83\x16\x91a\x05\xA9\x85a\x04#V[\x92_[\x81\x81\x10a\x05\xEAWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x05\xD0W[PPP\x02\x01\x90Ua\x05\x8CV[a\x05\xE0\x91\x01Q`\x1F\x84\x16\x90a\x05\x13V[\x90U_\x80\x80a\x05\xC4V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x05\xACV[a\0RV[\x90a\x06\x11\x91a\x05:V[V[`\xA0\x1B\x90V[\x90a\x06(`\xFF`\xA0\x1B\x91a\x06\x13V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x06@\x90a\x062V[\x90V[\x90V[\x90a\x06[a\x06Va\x06b\x92a\x067V[a\x06CV[\x82Ta\x06\x19V[\x90UV[\x90V[a\x06}a\x06xa\x06\x82\x92a\x06fV[a\x02RV[a\0\xE0V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x06\xA5a\x06\xAB\x91a\0\xE0V[\x91a\0\xE0V[\x90\x81\x15a\x06\xB6W\x04\x90V[a\x06\x85V[\x90\x94\x93\x91\x92a\x06\xC8a\x07\xE7V[\x81a\x06\xE3a\x06\xDDa\x06\xD8_a\x03]V[a\0\xB1V[\x91a\0\xB1V[\x14\x80\x15a\x07\x99W[a\x07}Wa\x07:a\x07H\x94a\x072a\x07O\x98a\x07$a\x07A\x96a\x07\x16a\x07\x0Fa\x03\x8DV[\x82\x90a\x08mV[Pa\x07\x1Fa\x03\x99V[a\x08mV[Pa\x07-a\x03\xBDV[a\x08mV[P`\x07a\x06\x07V[`\x02a\x02\x8CV[`\x03a\x02\xE1V[`\x04a\x02\xE1V[a\x07[`\x01`\x02a\x06FV[a\x07{a\x07tBa\x07nb\x01Q\x80a\x06iV[\x90a\x06\x99V[`\x06a\x02\xE1V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x07\x95`\x04\x82\x01a\x03iV[\x03\x90\xFD[P\x85a\x07\xB5a\x07\xAFa\x07\xAA_a\x03]V[a\0\xB1V[\x91a\0\xB1V[\x14a\x06\xEBV[\x90V[a\x07\xD2a\x07\xCDa\x07\xD7\x92a\x07\xBBV[a\x02RV[a\0\xE0V[\x90V[a\x07\xE4`\x01a\x07\xBEV[\x90V[a\x07\xF9a\x07\xF2a\x07\xDAV[`\x01a\x02\xE1V[V[_\x90V[a\x08\x08\x90a\x03nV[\x90V[\x90a\x08\x15\x90a\x07\xFFV[_R` R`@_ \x90V[\x90a\x08+\x90a\x02}V[_R` R`@_ \x90V[\x90a\x08C`\xFF\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08ba\x08]a\x08i\x92a\x067V[a\x06CV[\x82Ta\x087V[\x90UV[a\x08ua\x07\xFBV[Pa\x08\x8Aa\x08\x84\x82\x84\x90a\tDV[\x15a\x062V[_\x14a\t\x12Wa\x08\xB1`\x01a\x08\xAC_a\x08\xA4\x81\x86\x90a\x08\x0BV[\x01\x85\x90a\x08!V[a\x08MV[\x90a\x08\xBAa\tqV[\x90a\x08\xF7a\x08\xF1a\x08\xEB\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x07\xFFV[\x92a\x02}V[\x92a\x02}V[\x92a\t\0a\0>V[\x80a\t\n\x81a\x03iV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\t/a\t4\x91a\t\x18V[a\t\x1DV[\x90V[a\tA\x90Ta\t#V[\x90V[a\tj\x91_a\t_a\te\x93a\tXa\x07\xFBV[P\x82a\x08\x0BV[\x01a\x08!V[a\t7V[\x90V[_\x90V[a\tya\tmV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x0F\xF7W\0[a\0\x1F_5a\x01\xFEV[\x80c\x01\xFF\xC9\xA7\x14a\x01\xF9W\x80c\x0E\x15\x08\xD9\x14a\x01\xF4W\x80c\x103\xB4\xCC\x14a\x01\xEFW\x80c\x11\x8C8\xC7\x14a\x01\xEAW\x80c\x12Y\xA5\xC8\x14a\x01\xE5W\x80c\x18\xB6\x8B\x8C\x14a\x01\xE0W\x80c$\x8A\x9C\xA3\x14a\x01\xDBW\x80c//\xF1]\x14a\x01\xD6W\x80c4b\xFA\xC3\x14a\x01\xD1W\x80c6V\x8A\xBE\x14a\x01\xCCW\x80c6\xB0\x89\xD8\x14a\x01\xC7W\x80cJe\x85Z\x14a\x01\xC2W\x80cP\x1D\x81\\\x14a\x01\xBDW\x80cZ\xB1\xD6\x1C\x14a\x01\xB8W\x80c]\x94*\xC1\x14a\x01\xB3W\x80ca\xB0\xA5n\x14a\x01\xAEW\x80cc\"\x14\x90\x14a\x01\xA9W\x80ce\xD7\xA3\xC9\x14a\x01\xA4W\x80cf\xD0\x03\xAC\x14a\x01\x9FW\x80cg\xEE\xBA\x0C\x14a\x01\x9AW\x80ck\xCC\x8C\x14\x14a\x01\x95W\x80c\x91\xD1HT\x14a\x01\x90W\x80c\xA2\x17\xFD\xDF\x14a\x01\x8BW\x80c\xB2\r0\xA9\x14a\x01\x86W\x80c\xC9\xF5\xB6>\x14a\x01\x81W\x80c\xCA\xED\\\x7F\x14a\x01|W\x80c\xD5Gt\x1F\x14a\x01wW\x80c\xEA\xD9<\x8F\x14a\x01rW\x80c\xED\xE7\xCE\xBD\x14a\x01mWc\xFB\x8CKQ\x03a\0\x0EWa\x0F\xBFV[a\x0FUV[a\x0E\xEBV[a\x0E{V[a\x0EGV[a\r\xD8V[a\r\x96V[a\raV[a\x0C\xF0V[a\x0C\xBDV[a\x0CjV[a\x0C&V[a\x0B\x9CV[a\t|V[a\t*V[a\x08\xBBV[a\x08yV[a\x08\x03V[a\x07\xBEV[a\x07\\V[a\x07\x19V[a\x06\xE4V[a\x06\x81V[a\x06\x1FV[a\x05\xA7V[a\x04\x8AV[a\x04FV[a\x03\xBDV[a\x034V[a\x02\x8AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02+\x81a\x02\x16V[\x03a\x022WV[_\x80\xFD[\x90P5\x90a\x02C\x82a\x02\"V[V[\x90` \x82\x82\x03\x12a\x02^Wa\x02[\x91_\x01a\x026V[\x90V[a\x02\x0EV[\x15\x15\x90V[a\x02q\x90a\x02cV[\x90RV[\x91\x90a\x02\x88\x90_` \x85\x01\x94\x01\x90a\x02hV[V[4a\x02\xBAWa\x02\xB6a\x02\xA5a\x02\xA06`\x04a\x02EV[a\x0F\xFFV[a\x02\xADa\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xF3[a\x02\nV[_\x91\x03\x12a\x02\xC9WV[a\x02\x0EV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xE2\x90a\x02\xCEV[\x90V[a\x02\xEE\x90a\x02\xD9V[\x90RV[\x90V[a\x02\xFE\x90a\x02\xF2V[\x90RV[`@\x90a\x03+a\x032\x94\x96\x95\x93\x96a\x03!``\x84\x01\x98_\x85\x01\x90a\x02\xE5V[` \x83\x01\x90a\x02\xF5V[\x01\x90a\x02\xF5V[V[4a\x03gWa\x03D6`\x04a\x02\xBFV[a\x03ca\x03Oa\x10\x8EV[a\x03Z\x93\x91\x93a\x02\x04V[\x93\x84\x93\x84a\x03\x02V[\x03\x90\xF3[a\x02\nV[\x1C\x90V[\x90V[a\x03\x83\x90`\x08a\x03\x88\x93\x02a\x03lV[a\x03pV[\x90V[\x90a\x03\x96\x91Ta\x03sV[\x90V[a\x03\xA5`\x05_\x90a\x03\x8BV[\x90V[\x91\x90a\x03\xBB\x90_` \x85\x01\x94\x01\x90a\x02\xF5V[V[4a\x03\xEDWa\x03\xCD6`\x04a\x02\xBFV[a\x03\xE9a\x03\xD8a\x03\x99V[a\x03\xE0a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x04\x1Ea\x03\xF2V[\x90V[\x90V[a\x04-\x90a\x04!V[\x90RV[\x91\x90a\x04D\x90_` \x85\x01\x94\x01\x90a\x04$V[V[4a\x04vWa\x04V6`\x04a\x02\xBFV[a\x04ra\x04aa\x04\x16V[a\x04ia\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[a\x04\x87`\x06_\x90a\x03\x8BV[\x90V[4a\x04\xBAWa\x04\x9A6`\x04a\x02\xBFV[a\x04\xB6a\x04\xA5a\x04{V[a\x04\xADa\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[a\x04\xC8\x81a\x02\xD9V[\x03a\x04\xCFWV[_\x80\xFD[\x90P5\x90a\x04\xE0\x82a\x04\xBFV[V[a\x04\xEB\x81a\x02\xF2V[\x03a\x04\xF2WV[_\x80\xFD[\x90P5\x90a\x05\x03\x82a\x04\xE2V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05KW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05FW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05AWV[a\x05\rV[a\x05\tV[a\x05\x05V[\x91``\x83\x83\x03\x12a\x05\x9DWa\x05g\x82_\x85\x01a\x04\xD3V[\x92a\x05u\x83` \x83\x01a\x04\xF6V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x98Wa\x05\x94\x92\x01a\x05\x11V[\x90\x91V[a\x02\x12V[a\x02\x0EV[_\x01\x90V[4a\x05\xD9Wa\x05\xC3a\x05\xBA6`\x04a\x05PV[\x92\x91\x90\x91a\x14uV[a\x05\xCBa\x02\x04V[\x80a\x05\xD5\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\x05\xE7\x81a\x04!V[\x03a\x05\xEEWV[_\x80\xFD[\x90P5\x90a\x05\xFF\x82a\x05\xDEV[V[\x90` \x82\x82\x03\x12a\x06\x1AWa\x06\x17\x91_\x01a\x05\xF2V[\x90V[a\x02\x0EV[4a\x06OWa\x06Ka\x06:a\x0656`\x04a\x06\x01V[a\x14\xCDV[a\x06Ba\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[\x91\x90`@\x83\x82\x03\x12a\x06|W\x80a\x06pa\x06y\x92_\x86\x01a\x05\xF2V[\x93` \x01a\x04\xD3V[\x90V[a\x02\x0EV[4a\x06\xB0Wa\x06\x9Aa\x06\x946`\x04a\x06TV[\x90a\x15\x18V[a\x06\xA2a\x02\x04V[\x80a\x06\xAC\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x06\xE1a\x06\xB5V[\x90V[4a\x07\x14Wa\x06\xF46`\x04a\x02\xBFV[a\x07\x10a\x06\xFFa\x06\xD9V[a\x07\x07a\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[4a\x07HWa\x072a\x07,6`\x04a\x06TV[\x90a\x15$V[a\x07:a\x02\x04V[\x80a\x07D\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\x07Y`\x03_\x90a\x03\x8BV[\x90V[4a\x07\x8CWa\x07l6`\x04a\x02\xBFV[a\x07\x88a\x07wa\x07MV[a\x07\x7Fa\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x91\x90`@\x83\x82\x03\x12a\x07\xB9W\x80a\x07\xADa\x07\xB6\x92_\x86\x01a\x04\xF6V[\x93` \x01a\x04\xF6V[\x90V[a\x02\x0EV[4a\x07\xEFWa\x07\xEBa\x07\xDAa\x07\xD46`\x04a\x07\x91V[\x90a\x15\xA1V[a\x07\xE2a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[a\x08\0`\t_\x90a\x03\x8BV[\x90V[4a\x083Wa\x08\x136`\x04a\x02\xBFV[a\x08/a\x08\x1Ea\x07\xF4V[a\x08&a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[a\x08A\x81a\x02cV[\x03a\x08HWV[_\x80\xFD[\x90P5\x90a\x08Y\x82a\x088V[V[\x90` \x82\x82\x03\x12a\x08tWa\x08q\x91_\x01a\x08LV[\x90V[a\x02\x0EV[4a\x08\xA7Wa\x08\x91a\x08\x8C6`\x04a\x08[V[a\x16fV[a\x08\x99a\x02\x04V[\x80a\x08\xA3\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\x08\xB8`\n_\x90a\x03\x8BV[\x90V[4a\x08\xEBWa\x08\xCB6`\x04a\x02\xBFV[a\x08\xE7a\x08\xD6a\x08\xACV[a\x08\xDEa\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x90\x91``\x82\x84\x03\x12a\t%Wa\t\"a\t\x0B\x84_\x85\x01a\x04\xD3V[\x93a\t\x19\x81` \x86\x01a\x04\xF6V[\x93`@\x01a\x04\xD3V[\x90V[a\x02\x0EV[4a\tYWa\tCa\t=6`\x04a\x08\xF0V[\x91a\x16\xE2V[a\tKa\x02\x04V[\x80a\tU\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[\x90` \x82\x82\x03\x12a\twWa\tt\x91_\x01a\x04\xF6V[\x90V[a\x02\x0EV[4a\t\xAAWa\t\x94a\t\x8F6`\x04a\t^V[a\x17\x17V[a\t\x9Ca\x02\x04V[\x80a\t\xA6\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\t\xF6W[` \x83\x10\x14a\t\xF1WV[a\t\xC2V[\x91`\x7F\x16\x91a\t\xE6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\n,a\n%\x83a\t\xD6V[\x80\x94a\n\0V[\x91`\x01\x81\x16\x90\x81_\x14a\n\x83WP`\x01\x14a\nGW[PPPV[a\nT\x91\x92\x93\x94Pa\n\tV[\x91_\x92[\x81\x84\x10a\nkWPP\x01\x90_\x80\x80a\nBV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\nXV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\nBV[\x90a\n\xA8\x91a\n\x12V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xD3\x90a\n\xABV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\xEDW`@RV[a\n\xB5V[\x90a\x0B\x12a\x0B\x0B\x92a\x0B\x02a\x02\x04V[\x93\x84\x80\x92a\n\x9EV[\x03\x83a\n\xC9V[V[\x90_\x10a\x0B'Wa\x0B$\x90a\n\xF2V[\x90V[a\t\xAFV[a\x0B8`\x07_\x90a\x0B\x14V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0Bra\x0B{` \x93a\x0B\x80\x93a\x0Bi\x81a\x0B;V[\x93\x84\x80\x93a\x0B?V[\x95\x86\x91\x01a\x0BHV[a\n\xABV[\x01\x90V[a\x0B\x99\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0BSV[\x90V[4a\x0B\xCCWa\x0B\xAC6`\x04a\x02\xBFV[a\x0B\xC8a\x0B\xB7a\x0B,V[a\x0B\xBFa\x02\x04V[\x91\x82\x91\x82a\x0B\x84V[\x03\x90\xF3[a\x02\nV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0B\xEC\x90`\x08a\x0B\xF1\x93\x02a\x03lV[a\x0B\xD1V[\x90V[\x90a\x0B\xFF\x91Ta\x0B\xDCV[\x90V[a\x0C\x0E`\x08_\x90a\x0B\xF4V[\x90V[\x91\x90a\x0C$\x90_` \x85\x01\x94\x01\x90a\x02\xE5V[V[4a\x0CVWa\x0C66`\x04a\x02\xBFV[a\x0CRa\x0CAa\x0C\x02V[a\x0CIa\x02\x04V[\x91\x82\x91\x82a\x0C\x11V[\x03\x90\xF3[a\x02\nV[a\x0Cg`\x04_\x90a\x03\x8BV[\x90V[4a\x0C\x9AWa\x0Cz6`\x04a\x02\xBFV[a\x0C\x96a\x0C\x85a\x0C[V[a\x0C\x8Da\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x90` \x82\x82\x03\x12a\x0C\xB8Wa\x0C\xB5\x91_\x01a\x04\xD3V[\x90V[a\x02\x0EV[4a\x0C\xEBWa\x0C\xD5a\x0C\xD06`\x04a\x0C\x9FV[a\x18\x18V[a\x0C\xDDa\x02\x04V[\x80a\x0C\xE7\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[4a\r!Wa\r\x1Da\r\x0Ca\r\x066`\x04a\x06TV[\x90a\x18ZV[a\r\x14a\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xF3[a\x02\nV[\x90V[_\x1B\x90V[a\rBa\r=a\rG\x92a\r&V[a\r)V[a\x04!V[\x90V[a\rS_a\r.V[\x90V[a\r^a\rJV[\x90V[4a\r\x91Wa\rq6`\x04a\x02\xBFV[a\r\x8Da\r|a\rVV[a\r\x84a\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[4a\r\xC4Wa\r\xAEa\r\xA96`\x04a\t^V[a\x19\x12V[a\r\xB6a\x02\x04V[\x80a\r\xC0\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\r\xD5`\x02_\x90a\x0B\xF4V[\x90V[4a\x0E\x08Wa\r\xE86`\x04a\x02\xBFV[a\x0E\x04a\r\xF3a\r\xC9V[a\r\xFBa\x02\x04V[\x91\x82\x91\x82a\x0C\x11V[\x03\x90\xF3[a\x02\nV[\x90\x91``\x82\x84\x03\x12a\x0EBWa\x0E?a\x0E(\x84_\x85\x01a\x04\xD3V[\x93a\x0E6\x81` \x86\x01a\x04\xF6V[\x93`@\x01a\x04\xF6V[\x90V[a\x02\x0EV[4a\x0EvWa\x0E`a\x0EZ6`\x04a\x0E\rV[\x91a\x19\x9CV[a\x0Eha\x02\x04V[\x80a\x0Er\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[4a\x0E\xAAWa\x0E\x94a\x0E\x8E6`\x04a\x06TV[\x90a\x19\xD3V[a\x0E\x9Ca\x02\x04V[\x80a\x0E\xA6\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[`\xFF\x16\x90V[a\x0E\xC5\x90`\x08a\x0E\xCA\x93\x02a\x03lV[a\x0E\xAFV[\x90V[\x90a\x0E\xD8\x91Ta\x0E\xB5V[\x90V[a\x0E\xE8`\x02`\x14\x90a\x0E\xCDV[\x90V[4a\x0F\x1BWa\x0E\xFB6`\x04a\x02\xBFV[a\x0F\x17a\x0F\x06a\x0E\xDBV[a\x0F\x0Ea\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xF3[a\x02\nV[`@\x90a\x0FLa\x0FAa\x0FS\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0BSV[\x96` \x83\x01\x90a\x02\xE5V[\x01\x90a\x02hV[V[4a\x0F\x88Wa\x0Fe6`\x04a\x02\xBFV[a\x0F\x84a\x0Fpa\x19\xF0V[a\x0F{\x93\x91\x93a\x02\x04V[\x93\x84\x93\x84a\x0F V[\x03\x90\xF3[a\x02\nV[`@\x90a\x0F\xB6a\x0F\xBD\x94\x96\x95\x93\x96a\x0F\xAC``\x84\x01\x98_\x85\x01\x90a\x02\xF5V[` \x83\x01\x90a\x02\xF5V[\x01\x90a\x02\xF5V[V[4a\x0F\xF2Wa\x0F\xCF6`\x04a\x02\xBFV[a\x0F\xEEa\x0F\xDAa\x1AUV[a\x0F\xE5\x93\x91\x93a\x02\x04V[\x93\x84\x93\x84a\x0F\x8DV[\x03\x90\xF3[a\x02\nV[_\x80\xFD[_\x90V[a\x10\x07a\x0F\xFBV[P\x80a\x10\"a\x10\x1Ccye\xDB\x0B`\xE0\x1Ba\x02\x16V[\x91a\x02\x16V[\x14\x90\x81\x15a\x10/W[P\x90V[a\x109\x91Pa\x1A\xE3V[_a\x10+V[_\x90V[_\x90V[_\x1C\x90V[a\x10Xa\x10]\x91a\x10GV[a\x0B\xD1V[\x90V[a\x10j\x90Ta\x10LV[\x90V[a\x10ya\x10~\x91a\x10GV[a\x03pV[\x90V[a\x10\x8B\x90Ta\x10mV[\x90V[a\x10\x96a\x10?V[Pa\x10\x9Fa\x10CV[Pa\x10\xA8a\x10CV[Pa\x10\xB3`\x08a\x10`V[a\x10\xBD`\ta\x10\x81V[\x91a\x10\xC8`\na\x10\x81V[\x91\x92\x91\x90V[\x90a\x10\xE2\x93\x92\x91a\x10\xDDa\x1B5V[a\x11\x13V[a\x10\xEAa\x1B\xB9V[V[`\xA0\x1C\x90V[a\x10\xFEa\x11\x03\x91a\x10\xECV[a\x0E\xAFV[\x90V[a\x11\x10\x90Ta\x10\xF2V[\x90V[\x92\x91\x90a\x11)a\x11#`\x02a\x11\x06V[\x15a\x02cV[a\x118Wa\x116\x93a\x11TV[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x11P`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x92\x91\x90a\x11ra\x11la\x11ea\x06\xB5V[3\x90a\x18ZV[\x15a\x02cV[a\x11\x81Wa\x11\x7F\x93a\x12\xCAV[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x11\x99`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90V[a\x11\xB4a\x11\xAFa\x11\xB9\x92a\r&V[a\x11\x9DV[a\x02\xCEV[\x90V[a\x11\xC5\x90a\x11\xA0V[\x90V[a\x11\xDCa\x11\xD7a\x11\xE1\x92a\r&V[a\x11\x9DV[a\x02\xF2V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12\x07a\x12\r\x91\x93\x92\x93a\x02\xF2V[\x92a\x02\xF2V[\x82\x01\x80\x92\x11a\x12\x18WV[a\x11\xE4V[a\x121a\x12,a\x126\x92a\x02\xCEV[a\x11\x9DV[a\x02\xCEV[\x90V[a\x12B\x90a\x12\x1DV[\x90V[a\x12N\x90a\x129V[\x90V[a\x12Z\x90a\x12\x1DV[\x90V[a\x12f\x90a\x12QV[\x90V[\x90a\x12u_\x19\x91a\r)V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x93a\x12\x8Ea\x12\x98\x92a\x02\xF2V[a\x11\x9DV[a\x02\xF2V[\x90V[\x90V[\x90a\x12\xB3a\x12\xAEa\x12\xBA\x92a\x12\x7FV[a\x12\x9BV[\x82Ta\x12iV[\x90UV[a\x12\xC7\x90a\x12QV[\x90V[\x91\x92\x90\x92\x82a\x12\xE9a\x12\xE3a\x12\xDE_a\x11\xBCV[a\x02\xD9V[\x91a\x02\xD9V[\x14a\x14YW\x83a\x13\x01a\x12\xFB_a\x11\xC8V[\x91a\x02\xF2V[\x14a\x14=W\x83a\x13\"a\x13\x1Ca\x13\x17`\x03a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11a\x14!Wa\x13/a\x1C\"V[a\x13Ca\x13<`\x05a\x10\x81V[\x85\x90a\x11\xF8V[a\x13^a\x13Xa\x13S`\x04a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11a\x14\x05Wa\x13\x90\x91a\x13\x85a\x13s\x85a\x12EV[3a\x13}0a\x12]V[\x90\x88\x92a\x1D.V[\x83\x91\x85\x90\x91\x92a\x1F\xF6V[a\x13\xADa\x13\xA6\x83a\x13\xA1`\x05a\x10\x81V[a\x11\xF8V[`\x05a\x12\x9EV[a\x13\xB7`\x02a\x10`V[\x90a\x14\0a\x13\xEEa\x13\xE8\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x12\xBEV[\x93a\x12\xBEV[\x93a\x13\xF7a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x14\x1D`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x149`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x14U`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x14q`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90a\x14\x81\x93\x92\x91a\x10\xCEV[V[_\x90V[a\x14\x90\x90a\x04!V[\x90V[\x90a\x14\x9D\x90a\x14\x87V[_R` R`@_ \x90V[\x90V[a\x14\xB8a\x14\xBD\x91a\x10GV[a\x14\xA9V[\x90V[a\x14\xCA\x90Ta\x14\xACV[\x90V[`\x01a\x14\xE5a\x14\xEB\x92a\x14\xDEa\x14\x83V[P_a\x14\x93V[\x01a\x14\xC0V[\x90V[\x90a\x15\t\x91a\x15\x04a\x14\xFF\x82a\x14\xCDV[a!\x94V[a\x15\x0BV[V[\x90a\x15\x15\x91a!\xDEV[PV[\x90a\x15\"\x91a\x14\xEEV[V[\x90\x80a\x15?a\x159a\x154a\"\x89V[a\x02\xD9V[\x91a\x02\xD9V[\x03a\x15PWa\x15M\x91a\"\x96V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x15h`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[a\x15{a\x15\x81\x91\x93\x92\x93a\x02\xF2V[\x92a\x02\xF2V[\x91a\x15\x8D\x83\x82\x02a\x02\xF2V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\x9CWV[a\x11\xE4V[\x90a\x15\xB4\x91a\x15\xAEa\x10CV[Pa\x15lV[\x90V[a\x15\xD0\x90a\x15\xCBa\x15\xC6a\x03\xF2V[a!\x94V[a\x16 V[V[`\xA0\x1B\x90V[\x90a\x15\xE7`\xFF`\xA0\x1B\x91a\x15\xD2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\xFA\x90a\x02cV[\x90V[\x90V[\x90a\x16\x15a\x16\x10a\x16\x1C\x92a\x15\xF1V[a\x15\xFDV[\x82Ta\x15\xD8V[\x90UV[a\x16+\x81`\x02a\x16\0V[a\x16a\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x16Xa\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xA1V[a\x16o\x90a\x15\xB7V[V[\x90a\x16\x8C\x92\x91a\x16\x87a\x16\x82a\rJV[a!\x94V[a\x16\x8EV[V[\x91\x90\x81a\x16\xABa\x16\xA5a\x16\xA0_a\x11\xBCV[a\x02\xD9V[\x91a\x02\xD9V[\x14a\x16\xC6Wa\x16\xBCa\x16\xC4\x93a\x12EV[\x91\x90\x91a#7V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x16\xDE`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90a\x16\xED\x92\x91a\x16qV[V[a\x17\x08\x90a\x17\x03a\x16\xFEa\x03\xF2V[a!\x94V[a\x17\nV[V[a\x17\x15\x90`\x03a\x12\x9EV[V[a\x17 \x90a\x16\xEFV[V[a\x17;\x90a\x176a\x171a\x03\xF2V[a!\x94V[a\x17{V[V[\x90a\x17N`\x01\x80`\xA0\x1B\x03\x91a\r)V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x17pa\x17ka\x17w\x92a\x12\xBEV[a\x17XV[\x82Ta\x17=V[\x90UV[\x80a\x17\x96a\x17\x90a\x17\x8B_a\x11\xBCV[a\x02\xD9V[\x91a\x02\xD9V[\x14a\x17\xFCWa\x17\xA5`\x02a\x10`V[a\x17\xB0\x82`\x02a\x17[V[\x90a\x17\xE4a\x17\xDE\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x12\xBEV[\x91a\x12\xBEV[\x91a\x17\xEDa\x02\x04V[\x80a\x17\xF7\x81a\x05\xA2V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x18\x14`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[a\x18!\x90a\x17\"V[V[\x90a\x18-\x90a\x12\xBEV[_R` R`@_ \x90V[a\x18Ea\x18J\x91a\x10GV[a\x0E\xAFV[\x90V[a\x18W\x90Ta\x189V[\x90V[a\x18\x80\x91_a\x18ua\x18{\x93a\x18na\x0F\xFBV[P\x82a\x14\x93V[\x01a\x18#V[a\x18MV[\x90V[a\x18\x9C\x90a\x18\x97a\x18\x92a\x03\xF2V[a!\x94V[a\x18\xC1V[V[\x91` a\x18\xBF\x92\x94\x93a\x18\xB8`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a\x02\xF5V[V[a\x18\xCB`\x04a\x10\x81V[a\x18\xD6\x82`\x04a\x12\x9EV[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x19\ra\x19\x04a\x02\x04V[\x92\x83\x92\x83a\x18\x9EV[\x03\x90\xA1V[a\x19\x1B\x90a\x18\x83V[V[\x90a\x198\x92\x91a\x193a\x19.a\x03\xF2V[a!\x94V[a\x19:V[V[\x91\x90\x91a\x19H\x81`\x08a\x17[V[a\x19S\x83`\ta\x12\x9EV[a\x19^\x82`\na\x12\x9EV[\x91\x90\x91a\x19\x97\x7F\xB1\xE1g\x7F \x9A\x97L\xED\xA2\xC2\xABh\x15A\xC5\xDB\x04-\xB4\xA9\xB3T\xDD\xACy7D`\xDA2\0\x93a\x19\x8Ea\x02\x04V[\x93\x84\x93\x84a\x03\x02V[\x03\x90\xA1V[\x90a\x19\xA7\x92\x91a\x19\x1DV[V[\x90a\x19\xC4\x91a\x19\xBFa\x19\xBA\x82a\x14\xCDV[a!\x94V[a\x19\xC6V[V[\x90a\x19\xD0\x91a\"\x96V[PV[\x90a\x19\xDD\x91a\x19\xA9V[V[``\x90V[a\x19\xED\x90a\n\xF2V[\x90V[a\x19\xF8a\x19\xDFV[Pa\x1A\x01a\x10?V[Pa\x1A\na\x0F\xFBV[P`\x07a\x1A\x17`\x02a\x10`V[\x91a\x1A+a\x1A%`\x02a\x11\x06V[\x92a\x19\xE4V[\x92\x91\x90V[a\x1A?a\x1AE\x91\x93\x92\x93a\x02\xF2V[\x92a\x02\xF2V[\x82\x03\x91\x82\x11a\x1APWV[a\x11\xE4V[a\x1A]a\x10CV[Pa\x1Afa\x10CV[Pa\x1Aoa\x10CV[Pa\x1Az`\x05a\x10\x81V[a\x1A\x84`\x04a\x10\x81V[\x91a\x1A\x8F`\x04a\x10\x81V[a\x1A\xAAa\x1A\xA4a\x1A\x9F`\x05a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11_\x14a\x1A\xD5Wa\x1A\xCEa\x1A\xBE`\x04a\x10\x81V[a\x1A\xC8`\x05a\x10\x81V[\x90a\x1A0V[[\x91\x92\x91\x90V[a\x1A\xDE_a\x11\xC8V[a\x1A\xCFV[a\x1A\xEBa\x0F\xFBV[Pa\x1B\x05a\x1A\xFFc\x01\xFF\xC9\xA7`\xE0\x1Ba\x02\x16V[\x91a\x02\x16V[\x14\x90V[\x90V[a\x1B a\x1B\x1Ba\x1B%\x92a\x1B\tV[a\x11\x9DV[a\x02\xF2V[\x90V[a\x1B2`\x02a\x1B\x0CV[\x90V[a\x1B?`\x01a\x10\x81V[a\x1BXa\x1BRa\x1BMa\x1B(V[a\x02\xF2V[\x91a\x02\xF2V[\x14a\x1BqWa\x1Boa\x1Bha\x1B(V[`\x01a\x12\x9EV[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x1B\x89`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90V[a\x1B\xA4a\x1B\x9Fa\x1B\xA9\x92a\x1B\x8DV[a\x11\x9DV[a\x02\xF2V[\x90V[a\x1B\xB6`\x01a\x1B\x90V[\x90V[a\x1B\xCBa\x1B\xC4a\x1B\xACV[`\x01a\x12\x9EV[V[\x90V[a\x1B\xE4a\x1B\xDFa\x1B\xE9\x92a\x1B\xCDV[a\x11\x9DV[a\x02\xF2V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1C\x0Ca\x1C\x12\x91a\x02\xF2V[\x91a\x02\xF2V[\x90\x81\x15a\x1C\x1DW\x04\x90V[a\x1B\xECV[a\x1C8Ba\x1C2b\x01Q\x80a\x1B\xD0V[\x90a\x1C\0V[\x80a\x1CTa\x1CNa\x1CI`\x06a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11a\x1C]W[PV[\x80a\x1C\xBF\x91a\x1Cl`\x05a\x10\x81V[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a\x1C\xA2a\x1C\x99a\x02\x04V[\x92\x83\x92\x83a\x18\x9EV[\x03\x90\xA1a\x1C\xB8a\x1C\xB1_a\x11\xC8V[`\x05a\x12\x9EV[`\x06a\x12\x9EV[_a\x1CZV[a\x1C\xCE\x90a\x12QV[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[`\xE0\x1B\x90V[a\x1C\xF4a\x1C\xEFa\x1C\xF9\x92a\x1C\xD1V[a\x1C\xDAV[a\x02\x16V[\x90V[`@\x90a\x1D%a\x1D,\x94\x96\x95\x93\x96a\x1D\x1B``\x84\x01\x98_\x85\x01\x90a\x02\xE5V[` \x83\x01\x90a\x02\xE5V[\x01\x90a\x02\xF5V[V[`\x04\x92a\x1Dha\x1D|\x95\x93a\x1Dw\x93\x94a\x1DOc#\xB8r\xDD\x92\x94\x91\x92a\x1C\xE0V[\x93a\x1DXa\x02\x04V[\x97\x88\x95` \x87\x01\x90\x81R\x01a\x1C\xFCV[` \x82\x01\x81\x03\x82R\x03\x83a\n\xC9V[a#\x85V[V[P\x90V[a\x1D\x8B\x90a\x02\xCEV[\x90V[a\x1D\x97\x81a\x1D\x82V[\x03a\x1D\x9EWV[_\x80\xFD[\x90P5\x90a\x1D\xAF\x82a\x1D\x8EV[V[\x90\x91``\x82\x84\x03\x12a\x1D\xE6Wa\x1D\xE3a\x1D\xCC\x84_\x85\x01a\x1D\xA2V[\x93a\x1D\xDA\x81` \x86\x01a\x04\xF6V[\x93`@\x01a\x04\xF6V[\x90V[a\x02\x0EV[a\x1D\xF4\x90a\x12QV[\x90V[a\x1E\x0Fa\x1E\ta\x1E\x15\x92\x95\x93\x95a\x1D\xEBV[\x94a\x12\x7FV[\x92a\x12\x7FV[\x90V[\x90PQ\x90a\x1E%\x82a\x088V[V[\x90` \x82\x82\x03\x12a\x1E@Wa\x1E=\x91_\x01a\x1E\x18V[\x90V[a\x02\x0EV[\x91` a\x1Ef\x92\x94\x93a\x1E_`@\x82\x01\x96_\x83\x01\x90a\x02\xE5V[\x01\x90a\x02\xF5V[V[a\x1Epa\x02\x04V[=_\x82>=\x90\xFD[a\x1E\x81\x90a\x12\x1DV[\x90V[a\x1E\x8D\x90a\x1ExV[\x90V[a\x1E\x99\x90a\x12QV[\x90V[a\x1E\xA5\x90a\x12QV[\x90V[_\x80\xFD[\x90a\x1E\xBFa\x1E\xB8a\x02\x04V[\x92\x83a\n\xC9V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1E\xDFWa\x1E\xDB` \x91a\n\xABV[\x01\x90V[a\n\xB5V[\x90\x92\x91\x92a\x1E\xF9a\x1E\xF4\x82a\x1E\xC1V[a\x1E\xACV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x1F\x15Wa\x1F\x13\x92a\x0BHV[V[a\x1E\xA8V[\x90\x80`\x1F\x83\x01\x12\x15a\x1F8W\x81` a\x1F5\x93Q\x91\x01a\x1E\xE4V[\x90V[a\x05\x05V[\x90` \x82\x82\x03\x12a\x1FmW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1FhWa\x1Fe\x92\x01a\x1F\x1AV[\x90V[a\x02\x12V[a\x02\x0EV[` \x91\x81R\x01\x90V[a\x1F\x86_\x80\x92a\x1FrV[\x01\x90V[\x93\x94a\x1F\xD2a\x1F\xDC\x92\x96a\x1F\xC8a\x1F\xE6\x96a\x1F\xBEa\x1F\xF3\x9B\x97a\x1F\xB4`\xE0\x8C\x01\x9C_\x8D\x01\x90a\x02\xE5V[` \x8B\x01\x90a\x02\xE5V[`@\x89\x01\x90a\x02\xE5V[``\x87\x01\x90a\x02\xF5V[`\x80\x85\x01\x90a\x02\xF5V[`\xA0\x83\x01\x90a\x02\xF5V[`\xC0\x81\x83\x03\x91\x01Ra\x1F{V[\x90V[\x92\x90\x91a \x04\x81\x83\x90a\x1D~V[a \x16a \x10_a\x11\xC8V[\x91a\x02\xF2V[\x11_\x14a!iWa 4\x91a .\x91\x90\x81\x01\x90a\x1D\xB1V[\x91a\x1D\xF7V[\x91\x93\x90\x93[\x93\x91a F\x83\x82\x90a\x15lV[\x91a Xa S\x82a\x12EV[a\x1C\xC5V[\x91` c\t^\xA7\xB3\x93a k`\x02a\x10`V[\x90a \x89_\x8A\x97a \x94a }a\x02\x04V[\x99\x8A\x96\x87\x95\x86\x94a\x1C\xDAV[\x84R`\x04\x84\x01a\x1EEV[\x03\x92Z\xF1\x80\x15a!dW_\x96a \xF6\x94a!\x01\x92a!8W[Pa \xC8a \xC3a \xBE`\x02a\x10`V[a\x1E\x84V[a\x1E\x90V[\x92cO\xB1\xA0{\x96\x93\x96\x93\x94\x97a \xDD0a\x1E\x9CV[\x9A\x92\x90\x91\x92a \xEAa\x02\x04V[\x9B\x8C\x9A\x8B\x99\x8A\x98a\x1C\xDAV[\x88R`\x04\x88\x01a\x1F\x8AV[\x03\x92Z\xF1\x80\x15a!3Wa!\x13W[PV[a!.\x90=\x80_\x83>a!&\x81\x83a\n\xC9V[\x81\x01\x90a\x1F=V[a!\x10V[a\x1EhV[a!X\x90` =\x81\x11a!]W[a!P\x81\x83a\n\xC9V[\x81\x01\x90a\x1E'V[a \xADV[P=a!FV[a\x1EhV[PPa!u`\x08a\x10`V[\x91a!\x80`\ta\x10\x81V[\x90a!\x8B`\na\x10\x81V[\x93\x91\x93\x91a 9V[a!\xA6\x90a!\xA0a\"\x89V[\x90a$\\V[V[\x90a!\xB4`\xFF\x91a\r)V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a!\xD3a!\xCEa!\xDA\x92a\x15\xF1V[a\x15\xFDV[\x82Ta!\xA8V[\x90UV[a!\xE6a\x0F\xFBV[Pa!\xFBa!\xF5\x82\x84\x90a\x18ZV[\x15a\x02cV[_\x14a\"\x83Wa\"\"`\x01a\"\x1D_a\"\x15\x81\x86\x90a\x14\x93V[\x01\x85\x90a\x18#V[a!\xBEV[\x90a\"+a\"\x89V[\x90a\"ha\"ba\"\\\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x14\x87V[\x92a\x12\xBEV[\x92a\x12\xBEV[\x92a\"qa\x02\x04V[\x80a\"{\x81a\x05\xA2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\"\x91a\x10?V[P3\x90V[a\"\x9Ea\x0F\xFBV[Pa\"\xAA\x81\x83\x90a\x18ZV[_\x14a#1Wa\"\xD0_a\"\xCB_a\"\xC3\x81\x86\x90a\x14\x93V[\x01\x85\x90a\x18#V[a!\xBEV[\x90a\"\xD9a\"\x89V[\x90a#\x16a#\x10a#\n\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x14\x87V[\x92a\x12\xBEV[\x92a\x12\xBEV[\x92a#\x1Fa\x02\x04V[\x80a#)\x81a\x05\xA2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x90a#~a#\x83\x93a#o`\x04\x94\x93a#Vc\xA9\x05\x9C\xBB\x91\x93\x91a\x1C\xE0V[\x92a#_a\x02\x04V[\x96\x87\x94` \x86\x01\x90\x81R\x01a\x1EEV[` \x82\x01\x81\x03\x82R\x03\x83a\n\xC9V[a#\x85V[V[\x90_` \x91a#\x92a\x10CV[Pa#\x9Ba\x10CV[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a$.W=_Q\x90a#\xC0a#\xBA_a\x11\xC8V[\x91a\x02\xF2V[\x14_\x14a$\x14WPa#\xD1\x81a\x1C\xC5V[;a#\xE4a#\xDE_a\x11\xC8V[\x91a\x02\xF2V[\x14[a#\xEDWPV[a#\xF9a$\x10\x91a\x1C\xC5V[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x11V[\x03\x90\xFD[a$'a$!`\x01a\x1B\x90V[\x91a\x02\xF2V[\x14\x15a#\xE6V[`@Q=_\x82>=\x90\xFD[\x91` a$Z\x92\x94\x93a$S`@\x82\x01\x96_\x83\x01\x90a\x02\xE5V[\x01\x90a\x04$V[V[\x90a$qa$k\x83\x83\x90a\x18ZV[\x15a\x02cV[a$yWPPV[a$\x93_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a$9V[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b36610ff757005b61001f5f356101fe565b806301ffc9a7146101f95780630e1508d9146101f45780631033b4cc146101ef578063118c38c7146101ea5780631259a5c8146101e557806318b68b8c146101e0578063248a9ca3146101db5780632f2ff15d146101d65780633462fac3146101d157806336568abe146101cc57806336b089d8146101c75780634a65855a146101c2578063501d815c146101bd5780635ab1d61c146101b85780635d942ac1146101b357806361b0a56e146101ae57806363221490146101a957806365d7a3c9146101a457806366d003ac1461019f57806367eeba0c1461019a5780636bcc8c141461019557806391d1485414610190578063a217fddf1461018b578063b20d30a914610186578063c9f5b63e14610181578063caed5c7f1461017c578063d547741f14610177578063ead93c8f14610172578063ede7cebd1461016d5763fb8c4b510361000e57610fbf565b610f55565b610eeb565b610e7b565b610e47565b610dd8565b610d96565b610d61565b610cf0565b610cbd565b610c6a565b610c26565b610b9c565b61097c565b61092a565b6108bb565b610879565b610803565b6107be565b61075c565b610719565b6106e4565b610681565b61061f565b6105a7565b61048a565b610446565b6103bd565b610334565b61028a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61022b81610216565b0361023257565b5f80fd5b9050359061024382610222565b565b9060208282031261025e5761025b915f01610236565b90565b61020e565b151590565b61027190610263565b9052565b9190610288905f60208501940190610268565b565b346102ba576102b66102a56102a0366004610245565b610fff565b6102ad610204565b91829182610275565b0390f35b61020a565b5f9103126102c957565b61020e565b60018060a01b031690565b6102e2906102ce565b90565b6102ee906102d9565b9052565b90565b6102fe906102f2565b9052565b60409061032b610332949695939661032160608401985f8501906102e5565b60208301906102f5565b01906102f5565b565b34610367576103443660046102bf565b61036361034f61108e565b61035a939193610204565b93849384610302565b0390f35b61020a565b1c90565b90565b610383906008610388930261036c565b610370565b90565b906103969154610373565b90565b6103a560055f9061038b565b90565b91906103bb905f602085019401906102f5565b565b346103ed576103cd3660046102bf565b6103e96103d8610399565b6103e0610204565b918291826103a8565b0390f35b61020a565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61041e6103f2565b90565b90565b61042d90610421565b9052565b9190610444905f60208501940190610424565b565b34610476576104563660046102bf565b610472610461610416565b610469610204565b91829182610431565b0390f35b61020a565b61048760065f9061038b565b90565b346104ba5761049a3660046102bf565b6104b66104a561047b565b6104ad610204565b918291826103a8565b0390f35b61020a565b6104c8816102d9565b036104cf57565b5f80fd5b905035906104e0826104bf565b565b6104eb816102f2565b036104f257565b5f80fd5b90503590610503826104e2565b565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561054b5781359167ffffffffffffffff831161054657602001926001830284011161054157565b61050d565b610509565b610505565b9160608383031261059d57610567825f85016104d3565b9261057583602083016104f6565b92604082013567ffffffffffffffff8111610598576105949201610511565b9091565b610212565b61020e565b5f0190565b346105d9576105c36105ba366004610550565b92919091611475565b6105cb610204565b806105d5816105a2565b0390f35b61020a565b6105e781610421565b036105ee57565b5f80fd5b905035906105ff826105de565b565b9060208282031261061a57610617915f016105f2565b90565b61020e565b3461064f5761064b61063a610635366004610601565b6114cd565b610642610204565b91829182610431565b0390f35b61020a565b919060408382031261067c5780610670610679925f86016105f2565b936020016104d3565b90565b61020e565b346106b05761069a610694366004610654565b90611518565b6106a2610204565b806106ac816105a2565b0390f35b61020a565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b6106e16106b5565b90565b34610714576106f43660046102bf565b6107106106ff6106d9565b610707610204565b91829182610431565b0390f35b61020a565b346107485761073261072c366004610654565b90611524565b61073a610204565b80610744816105a2565b0390f35b61020a565b61075960035f9061038b565b90565b3461078c5761076c3660046102bf565b61078861077761074d565b61077f610204565b918291826103a8565b0390f35b61020a565b91906040838203126107b957806107ad6107b6925f86016104f6565b936020016104f6565b90565b61020e565b346107ef576107eb6107da6107d4366004610791565b906115a1565b6107e2610204565b918291826103a8565b0390f35b61020a565b61080060095f9061038b565b90565b34610833576108133660046102bf565b61082f61081e6107f4565b610826610204565b918291826103a8565b0390f35b61020a565b61084181610263565b0361084857565b5f80fd5b9050359061085982610838565b565b9060208282031261087457610871915f0161084c565b90565b61020e565b346108a75761089161088c36600461085b565b611666565b610899610204565b806108a3816105a2565b0390f35b61020a565b6108b8600a5f9061038b565b90565b346108eb576108cb3660046102bf565b6108e76108d66108ac565b6108de610204565b918291826103a8565b0390f35b61020a565b90916060828403126109255761092261090b845f85016104d3565b9361091981602086016104f6565b936040016104d3565b90565b61020e565b346109595761094361093d3660046108f0565b916116e2565b61094b610204565b80610955816105a2565b0390f35b61020a565b9060208282031261097757610974915f016104f6565b90565b61020e565b346109aa5761099461098f36600461095e565b611717565b61099c610204565b806109a6816105a2565b0390f35b61020a565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156109f6575b60208310146109f157565b6109c2565b91607f16916109e6565b60209181520190565b5f5260205f2090565b905f9291805490610a2c610a25836109d6565b8094610a00565b916001811690815f14610a835750600114610a47575b505050565b610a549192939450610a09565b915f925b818410610a6b57505001905f8080610a42565b60018160209295939554848601520191019290610a58565b92949550505060ff19168252151560200201905f8080610a42565b90610aa891610a12565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610ad390610aab565b810190811067ffffffffffffffff821117610aed57604052565b610ab5565b90610b12610b0b92610b02610204565b93848092610a9e565b0383610ac9565b565b905f10610b2757610b2490610af2565b90565b6109af565b610b3860075f90610b14565b90565b5190565b60209181520190565b90825f9392825e0152565b610b72610b7b602093610b8093610b6981610b3b565b93848093610b3f565b95869101610b48565b610aab565b0190565b610b999160208201915f818403910152610b53565b90565b34610bcc57610bac3660046102bf565b610bc8610bb7610b2c565b610bbf610204565b91829182610b84565b0390f35b61020a565b60018060a01b031690565b610bec906008610bf1930261036c565b610bd1565b90565b90610bff9154610bdc565b90565b610c0e60085f90610bf4565b90565b9190610c24905f602085019401906102e5565b565b34610c5657610c363660046102bf565b610c52610c41610c02565b610c49610204565b91829182610c11565b0390f35b61020a565b610c6760045f9061038b565b90565b34610c9a57610c7a3660046102bf565b610c96610c85610c5b565b610c8d610204565b918291826103a8565b0390f35b61020a565b90602082820312610cb857610cb5915f016104d3565b90565b61020e565b34610ceb57610cd5610cd0366004610c9f565b611818565b610cdd610204565b80610ce7816105a2565b0390f35b61020a565b34610d2157610d1d610d0c610d06366004610654565b9061185a565b610d14610204565b91829182610275565b0390f35b61020a565b90565b5f1b90565b610d42610d3d610d4792610d26565b610d29565b610421565b90565b610d535f610d2e565b90565b610d5e610d4a565b90565b34610d9157610d713660046102bf565b610d8d610d7c610d56565b610d84610204565b91829182610431565b0390f35b61020a565b34610dc457610dae610da936600461095e565b611912565b610db6610204565b80610dc0816105a2565b0390f35b61020a565b610dd560025f90610bf4565b90565b34610e0857610de83660046102bf565b610e04610df3610dc9565b610dfb610204565b91829182610c11565b0390f35b61020a565b9091606082840312610e4257610e3f610e28845f85016104d3565b93610e3681602086016104f6565b936040016104f6565b90565b61020e565b34610e7657610e60610e5a366004610e0d565b9161199c565b610e68610204565b80610e72816105a2565b0390f35b61020a565b34610eaa57610e94610e8e366004610654565b906119d3565b610e9c610204565b80610ea6816105a2565b0390f35b61020a565b60ff1690565b610ec5906008610eca930261036c565b610eaf565b90565b90610ed89154610eb5565b90565b610ee86002601490610ecd565b90565b34610f1b57610efb3660046102bf565b610f17610f06610edb565b610f0e610204565b91829182610275565b0390f35b61020a565b604090610f4c610f41610f539597969460608401908482035f860152610b53565b9660208301906102e5565b0190610268565b565b34610f8857610f653660046102bf565b610f84610f706119f0565b610f7b939193610204565b93849384610f20565b0390f35b61020a565b604090610fb6610fbd9496959396610fac60608401985f8501906102f5565b60208301906102f5565b01906102f5565b565b34610ff257610fcf3660046102bf565b610fee610fda611a55565b610fe5939193610204565b93849384610f8d565b0390f35b61020a565b5f80fd5b5f90565b611007610ffb565b508061102261101c637965db0b60e01b610216565b91610216565b1490811561102f575b5090565b6110399150611ae3565b5f61102b565b5f90565b5f90565b5f1c90565b61105861105d91611047565b610bd1565b90565b61106a905461104c565b90565b61107961107e91611047565b610370565b90565b61108b905461106d565b90565b61109661103f565b5061109f611043565b506110a8611043565b506110b36008611060565b6110bd6009611081565b916110c8600a611081565b91929190565b906110e29392916110dd611b35565b611113565b6110ea611bb9565b565b60a01c90565b6110fe611103916110ec565b610eaf565b90565b61111090546110f2565b90565b9291906111296111236002611106565b15610263565b6111385761113693611154565b565b5f633df5105960e11b815280611150600482016105a2565b0390fd5b92919061117261116c6111656106b5565b339061185a565b15610263565b6111815761117f936112ca565b565b5f635c427cd960e01b815280611199600482016105a2565b0390fd5b90565b6111b46111af6111b992610d26565b61119d565b6102ce565b90565b6111c5906111a0565b90565b6111dc6111d76111e192610d26565b61119d565b6102f2565b90565b634e487b7160e01b5f52601160045260245ffd5b61120761120d919392936102f2565b926102f2565b820180921161121857565b6111e4565b61123161122c611236926102ce565b61119d565b6102ce565b90565b6112429061121d565b90565b61124e90611239565b90565b61125a9061121d565b90565b61126690611251565b90565b906112755f1991610d29565b9181191691161790565b61129361128e611298926102f2565b61119d565b6102f2565b90565b90565b906112b36112ae6112ba9261127f565b61129b565b8254611269565b9055565b6112c790611251565b90565b91929092826112e96112e36112de5f6111bc565b6102d9565b916102d9565b1461145957836113016112fb5f6111c8565b916102f2565b1461143d578361132261131c6113176003611081565b6102f2565b916102f2565b116114215761132f611c22565b61134361133c6005611081565b85906111f8565b61135e6113586113536004611081565b6102f2565b916102f2565b11611405576113909161138561137385611245565b3361137d3061125d565b908892611d2e565b839185909192611ff6565b6113ad6113a6836113a16005611081565b6111f8565b600561129e565b6113b76002611060565b906114006113ee6113e87f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8936112be565b936112be565b936113f7610204565b918291826103a8565b0390a3565b5f631c345a2f60e21b81528061141d600482016105a2565b0390fd5b5f631c345a2f60e21b815280611439600482016105a2565b0390fd5b5f631f2a200560e01b815280611455600482016105a2565b0390fd5b5f63d92e233d60e01b815280611471600482016105a2565b0390fd5b906114819392916110ce565b565b5f90565b61149090610421565b90565b9061149d90611487565b5f5260205260405f2090565b90565b6114b86114bd91611047565b6114a9565b90565b6114ca90546114ac565b90565b60016114e56114eb926114de611483565b505f611493565b016114c0565b90565b90611509916115046114ff826114cd565b612194565b61150b565b565b90611515916121de565b50565b90611522916114ee565b565b908061153f611539611534612289565b6102d9565b916102d9565b036115505761154d91612296565b50565b5f63334bd91960e11b815280611568600482016105a2565b0390fd5b61157b611581919392936102f2565b926102f2565b9161158d8382026102f2565b92818404149015171561159c57565b6111e4565b906115b4916115ae611043565b5061156c565b90565b6115d0906115cb6115c66103f2565b612194565b611620565b565b60a01b90565b906115e760ff60a01b916115d2565b9181191691161790565b6115fa90610263565b90565b90565b9061161561161061161c926115f1565b6115fd565b82546115d8565b9055565b61162b816002611600565b6116617fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d591611658610204565b91829182610275565b0390a1565b61166f906115b7565b565b9061168c9291611687611682610d4a565b612194565b61168e565b565b9190816116ab6116a56116a05f6111bc565b6102d9565b916102d9565b146116c6576116bc6116c493611245565b919091612337565b565b5f63d92e233d60e01b8152806116de600482016105a2565b0390fd5b906116ed9291611671565b565b611708906117036116fe6103f2565b612194565b61170a565b565b61171590600361129e565b565b611720906116ef565b565b61173b906117366117316103f2565b612194565b61177b565b565b9061174e60018060a01b0391610d29565b9181191691161790565b90565b9061177061176b611777926112be565b611758565b825461173d565b9055565b8061179661179061178b5f6111bc565b6102d9565b916102d9565b146117fc576117a56002611060565b6117b082600261175b565b906117e46117de7fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069936112be565b916112be565b916117ed610204565b806117f7816105a2565b0390a3565b5f63d92e233d60e01b815280611814600482016105a2565b0390fd5b61182190611722565b565b9061182d906112be565b5f5260205260405f2090565b61184561184a91611047565b610eaf565b90565b6118579054611839565b90565b611880915f61187561187b9361186e610ffb565b5082611493565b01611823565b61184d565b90565b61189c906118976118926103f2565b612194565b6118c1565b565b9160206118bf9294936118b860408201965f8301906102f5565b01906102f5565b565b6118cb6004611081565b6118d682600461129e565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf9161190d611904610204565b9283928361189e565b0390a1565b61191b90611883565b565b90611938929161193361192e6103f2565b612194565b61193a565b565b91909161194881600861175b565b61195383600961129e565b61195e82600a61129e565b9190916119977fb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da32009361198e610204565b93849384610302565b0390a1565b906119a7929161191d565b565b906119c4916119bf6119ba826114cd565b612194565b6119c6565b565b906119d091612296565b50565b906119dd916119a9565b565b606090565b6119ed90610af2565b90565b6119f86119df565b50611a0161103f565b50611a0a610ffb565b506007611a176002611060565b91611a2b611a256002611106565b926119e4565b929190565b611a3f611a45919392936102f2565b926102f2565b8203918211611a5057565b6111e4565b611a5d611043565b50611a66611043565b50611a6f611043565b50611a7a6005611081565b611a846004611081565b91611a8f6004611081565b611aaa611aa4611a9f6005611081565b6102f2565b916102f2565b115f14611ad557611ace611abe6004611081565b611ac86005611081565b90611a30565b5b91929190565b611ade5f6111c8565b611acf565b611aeb610ffb565b50611b05611aff6301ffc9a760e01b610216565b91610216565b1490565b90565b611b20611b1b611b2592611b09565b61119d565b6102f2565b90565b611b326002611b0c565b90565b611b3f6001611081565b611b58611b52611b4d611b28565b6102f2565b916102f2565b14611b7157611b6f611b68611b28565b600161129e565b565b5f633ee5aeb560e01b815280611b89600482016105a2565b0390fd5b90565b611ba4611b9f611ba992611b8d565b61119d565b6102f2565b90565b611bb66001611b90565b90565b611bcb611bc4611bac565b600161129e565b565b90565b611be4611bdf611be992611bcd565b61119d565b6102f2565b90565b634e487b7160e01b5f52601260045260245ffd5b611c0c611c12916102f2565b916102f2565b908115611c1d570490565b611bec565b611c3842611c3262015180611bd0565b90611c00565b80611c54611c4e611c496006611081565b6102f2565b916102f2565b11611c5d575b50565b80611cbf91611c6c6005611081565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab91611ca2611c99610204565b9283928361189e565b0390a1611cb8611cb15f6111c8565b600561129e565b600661129e565b5f611c5a565b611cce90611251565b90565b63ffffffff1690565b60e01b90565b611cf4611cef611cf992611cd1565b611cda565b610216565b90565b604090611d25611d2c9496959396611d1b60608401985f8501906102e5565b60208301906102e5565b01906102f5565b565b600492611d68611d7c9593611d779394611d4f6323b872dd92949192611ce0565b93611d58610204565b9788956020870190815201611cfc565b60208201810382520383610ac9565b612385565b565b5090565b611d8b906102ce565b90565b611d9781611d82565b03611d9e57565b5f80fd5b90503590611daf82611d8e565b565b9091606082840312611de657611de3611dcc845f8501611da2565b93611dda81602086016104f6565b936040016104f6565b90565b61020e565b611df490611251565b90565b611e0f611e09611e1592959395611deb565b9461127f565b9261127f565b90565b90505190611e2582610838565b565b90602082820312611e4057611e3d915f01611e18565b90565b61020e565b916020611e66929493611e5f60408201965f8301906102e5565b01906102f5565b565b611e70610204565b3d5f823e3d90fd5b611e819061121d565b90565b611e8d90611e78565b90565b611e9990611251565b90565b611ea590611251565b90565b5f80fd5b90611ebf611eb8610204565b9283610ac9565b565b67ffffffffffffffff8111611edf57611edb602091610aab565b0190565b610ab5565b90929192611ef9611ef482611ec1565b611eac565b93818552602085019082840111611f1557611f1392610b48565b565b611ea8565b9080601f83011215611f3857816020611f3593519101611ee4565b90565b610505565b90602082820312611f6d575f82015167ffffffffffffffff8111611f6857611f659201611f1a565b90565b610212565b61020e565b60209181520190565b611f865f8092611f72565b0190565b9394611fd2611fdc9296611fc8611fe696611fbe611ff39b97611fb460e08c019c5f8d01906102e5565b60208b01906102e5565b60408901906102e5565b60608701906102f5565b60808501906102f5565b60a08301906102f5565b60c0818303910152611f7b565b90565b929091612004818390611d7e565b6120166120105f6111c8565b916102f2565b115f14612169576120349161202e9190810190611db1565b91611df7565b919390935b939161204683829061156c565b9161205861205382611245565b611cc5565b91602063095ea7b39361206b6002611060565b906120895f8a9761209461207d610204565b998a9687958694611cda565b845260048401611e45565b03925af18015612164575f966120f69461210192612138575b506120c86120c36120be6002611060565b611e84565b611e90565b92634fb1a07b9693969394976120dd30611e9c565b9a929091926120ea610204565b9b8c9a8b998a98611cda565b885260048801611f8a565b03925af1801561213357612113575b50565b61212e903d805f833e6121268183610ac9565b810190611f3d565b612110565b611e68565b6121589060203d811161215d575b6121508183610ac9565b810190611e27565b6120ad565b503d612146565b611e68565b50506121756008611060565b916121806009611081565b9061218b600a611081565b93919391612039565b6121a6906121a0612289565b9061245c565b565b906121b460ff91610d29565b9181191691161790565b906121d36121ce6121da926115f1565b6115fd565b82546121a8565b9055565b6121e6610ffb565b506121fb6121f582849061185a565b15610263565b5f1461228357612222600161221d5f612215818690611493565b018590611823565b6121be565b9061222b612289565b9061226861226261225c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611487565b926112be565b926112be565b92612271610204565b8061227b816105a2565b0390a4600190565b50505f90565b61229161103f565b503390565b61229e610ffb565b506122aa81839061185a565b5f14612331576122d05f6122cb5f6122c3818690611493565b018590611823565b6121be565b906122d9612289565b9061231661231061230a7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611487565b926112be565b926112be565b9261231f610204565b80612329816105a2565b0390a4600190565b50505f90565b9061237e6123839361236f6004949361235663a9059cbb919391611ce0565b9261235f610204565b9687946020860190815201611e45565b60208201810382520383610ac9565b612385565b565b905f602091612392611043565b5061239b611043565b50828151910182855af11561242e573d5f51906123c06123ba5f6111c8565b916102f2565b145f1461241457506123d181611cc5565b3b6123e46123de5f6111c8565b916102f2565b145b6123ed5750565b6123f961241091611cc5565b5f918291635274afe760e01b835260048301610c11565b0390fd5b6124276124216001611b90565b916102f2565b14156123e6565b6040513d5f823e3d90fd5b91602061245a92949361245360408201965f8301906102e5565b0190610424565b565b9061247161246b83839061185a565b15610263565b612479575050565b6124935f92839263e2517d3f60e01b845260048401612439565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x0F\xF7W\0[a\0\x1F_5a\x01\xFEV[\x80c\x01\xFF\xC9\xA7\x14a\x01\xF9W\x80c\x0E\x15\x08\xD9\x14a\x01\xF4W\x80c\x103\xB4\xCC\x14a\x01\xEFW\x80c\x11\x8C8\xC7\x14a\x01\xEAW\x80c\x12Y\xA5\xC8\x14a\x01\xE5W\x80c\x18\xB6\x8B\x8C\x14a\x01\xE0W\x80c$\x8A\x9C\xA3\x14a\x01\xDBW\x80c//\xF1]\x14a\x01\xD6W\x80c4b\xFA\xC3\x14a\x01\xD1W\x80c6V\x8A\xBE\x14a\x01\xCCW\x80c6\xB0\x89\xD8\x14a\x01\xC7W\x80cJe\x85Z\x14a\x01\xC2W\x80cP\x1D\x81\\\x14a\x01\xBDW\x80cZ\xB1\xD6\x1C\x14a\x01\xB8W\x80c]\x94*\xC1\x14a\x01\xB3W\x80ca\xB0\xA5n\x14a\x01\xAEW\x80cc\"\x14\x90\x14a\x01\xA9W\x80ce\xD7\xA3\xC9\x14a\x01\xA4W\x80cf\xD0\x03\xAC\x14a\x01\x9FW\x80cg\xEE\xBA\x0C\x14a\x01\x9AW\x80ck\xCC\x8C\x14\x14a\x01\x95W\x80c\x91\xD1HT\x14a\x01\x90W\x80c\xA2\x17\xFD\xDF\x14a\x01\x8BW\x80c\xB2\r0\xA9\x14a\x01\x86W\x80c\xC9\xF5\xB6>\x14a\x01\x81W\x80c\xCA\xED\\\x7F\x14a\x01|W\x80c\xD5Gt\x1F\x14a\x01wW\x80c\xEA\xD9<\x8F\x14a\x01rW\x80c\xED\xE7\xCE\xBD\x14a\x01mWc\xFB\x8CKQ\x03a\0\x0EWa\x0F\xBFV[a\x0FUV[a\x0E\xEBV[a\x0E{V[a\x0EGV[a\r\xD8V[a\r\x96V[a\raV[a\x0C\xF0V[a\x0C\xBDV[a\x0CjV[a\x0C&V[a\x0B\x9CV[a\t|V[a\t*V[a\x08\xBBV[a\x08yV[a\x08\x03V[a\x07\xBEV[a\x07\\V[a\x07\x19V[a\x06\xE4V[a\x06\x81V[a\x06\x1FV[a\x05\xA7V[a\x04\x8AV[a\x04FV[a\x03\xBDV[a\x034V[a\x02\x8AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02+\x81a\x02\x16V[\x03a\x022WV[_\x80\xFD[\x90P5\x90a\x02C\x82a\x02\"V[V[\x90` \x82\x82\x03\x12a\x02^Wa\x02[\x91_\x01a\x026V[\x90V[a\x02\x0EV[\x15\x15\x90V[a\x02q\x90a\x02cV[\x90RV[\x91\x90a\x02\x88\x90_` \x85\x01\x94\x01\x90a\x02hV[V[4a\x02\xBAWa\x02\xB6a\x02\xA5a\x02\xA06`\x04a\x02EV[a\x0F\xFFV[a\x02\xADa\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xF3[a\x02\nV[_\x91\x03\x12a\x02\xC9WV[a\x02\x0EV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xE2\x90a\x02\xCEV[\x90V[a\x02\xEE\x90a\x02\xD9V[\x90RV[\x90V[a\x02\xFE\x90a\x02\xF2V[\x90RV[`@\x90a\x03+a\x032\x94\x96\x95\x93\x96a\x03!``\x84\x01\x98_\x85\x01\x90a\x02\xE5V[` \x83\x01\x90a\x02\xF5V[\x01\x90a\x02\xF5V[V[4a\x03gWa\x03D6`\x04a\x02\xBFV[a\x03ca\x03Oa\x10\x8EV[a\x03Z\x93\x91\x93a\x02\x04V[\x93\x84\x93\x84a\x03\x02V[\x03\x90\xF3[a\x02\nV[\x1C\x90V[\x90V[a\x03\x83\x90`\x08a\x03\x88\x93\x02a\x03lV[a\x03pV[\x90V[\x90a\x03\x96\x91Ta\x03sV[\x90V[a\x03\xA5`\x05_\x90a\x03\x8BV[\x90V[\x91\x90a\x03\xBB\x90_` \x85\x01\x94\x01\x90a\x02\xF5V[V[4a\x03\xEDWa\x03\xCD6`\x04a\x02\xBFV[a\x03\xE9a\x03\xD8a\x03\x99V[a\x03\xE0a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x04\x1Ea\x03\xF2V[\x90V[\x90V[a\x04-\x90a\x04!V[\x90RV[\x91\x90a\x04D\x90_` \x85\x01\x94\x01\x90a\x04$V[V[4a\x04vWa\x04V6`\x04a\x02\xBFV[a\x04ra\x04aa\x04\x16V[a\x04ia\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[a\x04\x87`\x06_\x90a\x03\x8BV[\x90V[4a\x04\xBAWa\x04\x9A6`\x04a\x02\xBFV[a\x04\xB6a\x04\xA5a\x04{V[a\x04\xADa\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[a\x04\xC8\x81a\x02\xD9V[\x03a\x04\xCFWV[_\x80\xFD[\x90P5\x90a\x04\xE0\x82a\x04\xBFV[V[a\x04\xEB\x81a\x02\xF2V[\x03a\x04\xF2WV[_\x80\xFD[\x90P5\x90a\x05\x03\x82a\x04\xE2V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05KW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05FW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05AWV[a\x05\rV[a\x05\tV[a\x05\x05V[\x91``\x83\x83\x03\x12a\x05\x9DWa\x05g\x82_\x85\x01a\x04\xD3V[\x92a\x05u\x83` \x83\x01a\x04\xF6V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x98Wa\x05\x94\x92\x01a\x05\x11V[\x90\x91V[a\x02\x12V[a\x02\x0EV[_\x01\x90V[4a\x05\xD9Wa\x05\xC3a\x05\xBA6`\x04a\x05PV[\x92\x91\x90\x91a\x14uV[a\x05\xCBa\x02\x04V[\x80a\x05\xD5\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\x05\xE7\x81a\x04!V[\x03a\x05\xEEWV[_\x80\xFD[\x90P5\x90a\x05\xFF\x82a\x05\xDEV[V[\x90` \x82\x82\x03\x12a\x06\x1AWa\x06\x17\x91_\x01a\x05\xF2V[\x90V[a\x02\x0EV[4a\x06OWa\x06Ka\x06:a\x0656`\x04a\x06\x01V[a\x14\xCDV[a\x06Ba\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[\x91\x90`@\x83\x82\x03\x12a\x06|W\x80a\x06pa\x06y\x92_\x86\x01a\x05\xF2V[\x93` \x01a\x04\xD3V[\x90V[a\x02\x0EV[4a\x06\xB0Wa\x06\x9Aa\x06\x946`\x04a\x06TV[\x90a\x15\x18V[a\x06\xA2a\x02\x04V[\x80a\x06\xAC\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x06\xE1a\x06\xB5V[\x90V[4a\x07\x14Wa\x06\xF46`\x04a\x02\xBFV[a\x07\x10a\x06\xFFa\x06\xD9V[a\x07\x07a\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[4a\x07HWa\x072a\x07,6`\x04a\x06TV[\x90a\x15$V[a\x07:a\x02\x04V[\x80a\x07D\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\x07Y`\x03_\x90a\x03\x8BV[\x90V[4a\x07\x8CWa\x07l6`\x04a\x02\xBFV[a\x07\x88a\x07wa\x07MV[a\x07\x7Fa\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x91\x90`@\x83\x82\x03\x12a\x07\xB9W\x80a\x07\xADa\x07\xB6\x92_\x86\x01a\x04\xF6V[\x93` \x01a\x04\xF6V[\x90V[a\x02\x0EV[4a\x07\xEFWa\x07\xEBa\x07\xDAa\x07\xD46`\x04a\x07\x91V[\x90a\x15\xA1V[a\x07\xE2a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[a\x08\0`\t_\x90a\x03\x8BV[\x90V[4a\x083Wa\x08\x136`\x04a\x02\xBFV[a\x08/a\x08\x1Ea\x07\xF4V[a\x08&a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[a\x08A\x81a\x02cV[\x03a\x08HWV[_\x80\xFD[\x90P5\x90a\x08Y\x82a\x088V[V[\x90` \x82\x82\x03\x12a\x08tWa\x08q\x91_\x01a\x08LV[\x90V[a\x02\x0EV[4a\x08\xA7Wa\x08\x91a\x08\x8C6`\x04a\x08[V[a\x16fV[a\x08\x99a\x02\x04V[\x80a\x08\xA3\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\x08\xB8`\n_\x90a\x03\x8BV[\x90V[4a\x08\xEBWa\x08\xCB6`\x04a\x02\xBFV[a\x08\xE7a\x08\xD6a\x08\xACV[a\x08\xDEa\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x90\x91``\x82\x84\x03\x12a\t%Wa\t\"a\t\x0B\x84_\x85\x01a\x04\xD3V[\x93a\t\x19\x81` \x86\x01a\x04\xF6V[\x93`@\x01a\x04\xD3V[\x90V[a\x02\x0EV[4a\tYWa\tCa\t=6`\x04a\x08\xF0V[\x91a\x16\xE2V[a\tKa\x02\x04V[\x80a\tU\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[\x90` \x82\x82\x03\x12a\twWa\tt\x91_\x01a\x04\xF6V[\x90V[a\x02\x0EV[4a\t\xAAWa\t\x94a\t\x8F6`\x04a\t^V[a\x17\x17V[a\t\x9Ca\x02\x04V[\x80a\t\xA6\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\t\xF6W[` \x83\x10\x14a\t\xF1WV[a\t\xC2V[\x91`\x7F\x16\x91a\t\xE6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\n,a\n%\x83a\t\xD6V[\x80\x94a\n\0V[\x91`\x01\x81\x16\x90\x81_\x14a\n\x83WP`\x01\x14a\nGW[PPPV[a\nT\x91\x92\x93\x94Pa\n\tV[\x91_\x92[\x81\x84\x10a\nkWPP\x01\x90_\x80\x80a\nBV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\nXV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\nBV[\x90a\n\xA8\x91a\n\x12V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xD3\x90a\n\xABV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\xEDW`@RV[a\n\xB5V[\x90a\x0B\x12a\x0B\x0B\x92a\x0B\x02a\x02\x04V[\x93\x84\x80\x92a\n\x9EV[\x03\x83a\n\xC9V[V[\x90_\x10a\x0B'Wa\x0B$\x90a\n\xF2V[\x90V[a\t\xAFV[a\x0B8`\x07_\x90a\x0B\x14V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0Bra\x0B{` \x93a\x0B\x80\x93a\x0Bi\x81a\x0B;V[\x93\x84\x80\x93a\x0B?V[\x95\x86\x91\x01a\x0BHV[a\n\xABV[\x01\x90V[a\x0B\x99\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0BSV[\x90V[4a\x0B\xCCWa\x0B\xAC6`\x04a\x02\xBFV[a\x0B\xC8a\x0B\xB7a\x0B,V[a\x0B\xBFa\x02\x04V[\x91\x82\x91\x82a\x0B\x84V[\x03\x90\xF3[a\x02\nV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0B\xEC\x90`\x08a\x0B\xF1\x93\x02a\x03lV[a\x0B\xD1V[\x90V[\x90a\x0B\xFF\x91Ta\x0B\xDCV[\x90V[a\x0C\x0E`\x08_\x90a\x0B\xF4V[\x90V[\x91\x90a\x0C$\x90_` \x85\x01\x94\x01\x90a\x02\xE5V[V[4a\x0CVWa\x0C66`\x04a\x02\xBFV[a\x0CRa\x0CAa\x0C\x02V[a\x0CIa\x02\x04V[\x91\x82\x91\x82a\x0C\x11V[\x03\x90\xF3[a\x02\nV[a\x0Cg`\x04_\x90a\x03\x8BV[\x90V[4a\x0C\x9AWa\x0Cz6`\x04a\x02\xBFV[a\x0C\x96a\x0C\x85a\x0C[V[a\x0C\x8Da\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xF3[a\x02\nV[\x90` \x82\x82\x03\x12a\x0C\xB8Wa\x0C\xB5\x91_\x01a\x04\xD3V[\x90V[a\x02\x0EV[4a\x0C\xEBWa\x0C\xD5a\x0C\xD06`\x04a\x0C\x9FV[a\x18\x18V[a\x0C\xDDa\x02\x04V[\x80a\x0C\xE7\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[4a\r!Wa\r\x1Da\r\x0Ca\r\x066`\x04a\x06TV[\x90a\x18ZV[a\r\x14a\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xF3[a\x02\nV[\x90V[_\x1B\x90V[a\rBa\r=a\rG\x92a\r&V[a\r)V[a\x04!V[\x90V[a\rS_a\r.V[\x90V[a\r^a\rJV[\x90V[4a\r\x91Wa\rq6`\x04a\x02\xBFV[a\r\x8Da\r|a\rVV[a\r\x84a\x02\x04V[\x91\x82\x91\x82a\x041V[\x03\x90\xF3[a\x02\nV[4a\r\xC4Wa\r\xAEa\r\xA96`\x04a\t^V[a\x19\x12V[a\r\xB6a\x02\x04V[\x80a\r\xC0\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[a\r\xD5`\x02_\x90a\x0B\xF4V[\x90V[4a\x0E\x08Wa\r\xE86`\x04a\x02\xBFV[a\x0E\x04a\r\xF3a\r\xC9V[a\r\xFBa\x02\x04V[\x91\x82\x91\x82a\x0C\x11V[\x03\x90\xF3[a\x02\nV[\x90\x91``\x82\x84\x03\x12a\x0EBWa\x0E?a\x0E(\x84_\x85\x01a\x04\xD3V[\x93a\x0E6\x81` \x86\x01a\x04\xF6V[\x93`@\x01a\x04\xF6V[\x90V[a\x02\x0EV[4a\x0EvWa\x0E`a\x0EZ6`\x04a\x0E\rV[\x91a\x19\x9CV[a\x0Eha\x02\x04V[\x80a\x0Er\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[4a\x0E\xAAWa\x0E\x94a\x0E\x8E6`\x04a\x06TV[\x90a\x19\xD3V[a\x0E\x9Ca\x02\x04V[\x80a\x0E\xA6\x81a\x05\xA2V[\x03\x90\xF3[a\x02\nV[`\xFF\x16\x90V[a\x0E\xC5\x90`\x08a\x0E\xCA\x93\x02a\x03lV[a\x0E\xAFV[\x90V[\x90a\x0E\xD8\x91Ta\x0E\xB5V[\x90V[a\x0E\xE8`\x02`\x14\x90a\x0E\xCDV[\x90V[4a\x0F\x1BWa\x0E\xFB6`\x04a\x02\xBFV[a\x0F\x17a\x0F\x06a\x0E\xDBV[a\x0F\x0Ea\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xF3[a\x02\nV[`@\x90a\x0FLa\x0FAa\x0FS\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0BSV[\x96` \x83\x01\x90a\x02\xE5V[\x01\x90a\x02hV[V[4a\x0F\x88Wa\x0Fe6`\x04a\x02\xBFV[a\x0F\x84a\x0Fpa\x19\xF0V[a\x0F{\x93\x91\x93a\x02\x04V[\x93\x84\x93\x84a\x0F V[\x03\x90\xF3[a\x02\nV[`@\x90a\x0F\xB6a\x0F\xBD\x94\x96\x95\x93\x96a\x0F\xAC``\x84\x01\x98_\x85\x01\x90a\x02\xF5V[` \x83\x01\x90a\x02\xF5V[\x01\x90a\x02\xF5V[V[4a\x0F\xF2Wa\x0F\xCF6`\x04a\x02\xBFV[a\x0F\xEEa\x0F\xDAa\x1AUV[a\x0F\xE5\x93\x91\x93a\x02\x04V[\x93\x84\x93\x84a\x0F\x8DV[\x03\x90\xF3[a\x02\nV[_\x80\xFD[_\x90V[a\x10\x07a\x0F\xFBV[P\x80a\x10\"a\x10\x1Ccye\xDB\x0B`\xE0\x1Ba\x02\x16V[\x91a\x02\x16V[\x14\x90\x81\x15a\x10/W[P\x90V[a\x109\x91Pa\x1A\xE3V[_a\x10+V[_\x90V[_\x90V[_\x1C\x90V[a\x10Xa\x10]\x91a\x10GV[a\x0B\xD1V[\x90V[a\x10j\x90Ta\x10LV[\x90V[a\x10ya\x10~\x91a\x10GV[a\x03pV[\x90V[a\x10\x8B\x90Ta\x10mV[\x90V[a\x10\x96a\x10?V[Pa\x10\x9Fa\x10CV[Pa\x10\xA8a\x10CV[Pa\x10\xB3`\x08a\x10`V[a\x10\xBD`\ta\x10\x81V[\x91a\x10\xC8`\na\x10\x81V[\x91\x92\x91\x90V[\x90a\x10\xE2\x93\x92\x91a\x10\xDDa\x1B5V[a\x11\x13V[a\x10\xEAa\x1B\xB9V[V[`\xA0\x1C\x90V[a\x10\xFEa\x11\x03\x91a\x10\xECV[a\x0E\xAFV[\x90V[a\x11\x10\x90Ta\x10\xF2V[\x90V[\x92\x91\x90a\x11)a\x11#`\x02a\x11\x06V[\x15a\x02cV[a\x118Wa\x116\x93a\x11TV[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x11P`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x92\x91\x90a\x11ra\x11la\x11ea\x06\xB5V[3\x90a\x18ZV[\x15a\x02cV[a\x11\x81Wa\x11\x7F\x93a\x12\xCAV[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x11\x99`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90V[a\x11\xB4a\x11\xAFa\x11\xB9\x92a\r&V[a\x11\x9DV[a\x02\xCEV[\x90V[a\x11\xC5\x90a\x11\xA0V[\x90V[a\x11\xDCa\x11\xD7a\x11\xE1\x92a\r&V[a\x11\x9DV[a\x02\xF2V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12\x07a\x12\r\x91\x93\x92\x93a\x02\xF2V[\x92a\x02\xF2V[\x82\x01\x80\x92\x11a\x12\x18WV[a\x11\xE4V[a\x121a\x12,a\x126\x92a\x02\xCEV[a\x11\x9DV[a\x02\xCEV[\x90V[a\x12B\x90a\x12\x1DV[\x90V[a\x12N\x90a\x129V[\x90V[a\x12Z\x90a\x12\x1DV[\x90V[a\x12f\x90a\x12QV[\x90V[\x90a\x12u_\x19\x91a\r)V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x93a\x12\x8Ea\x12\x98\x92a\x02\xF2V[a\x11\x9DV[a\x02\xF2V[\x90V[\x90V[\x90a\x12\xB3a\x12\xAEa\x12\xBA\x92a\x12\x7FV[a\x12\x9BV[\x82Ta\x12iV[\x90UV[a\x12\xC7\x90a\x12QV[\x90V[\x91\x92\x90\x92\x82a\x12\xE9a\x12\xE3a\x12\xDE_a\x11\xBCV[a\x02\xD9V[\x91a\x02\xD9V[\x14a\x14YW\x83a\x13\x01a\x12\xFB_a\x11\xC8V[\x91a\x02\xF2V[\x14a\x14=W\x83a\x13\"a\x13\x1Ca\x13\x17`\x03a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11a\x14!Wa\x13/a\x1C\"V[a\x13Ca\x13<`\x05a\x10\x81V[\x85\x90a\x11\xF8V[a\x13^a\x13Xa\x13S`\x04a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11a\x14\x05Wa\x13\x90\x91a\x13\x85a\x13s\x85a\x12EV[3a\x13}0a\x12]V[\x90\x88\x92a\x1D.V[\x83\x91\x85\x90\x91\x92a\x1F\xF6V[a\x13\xADa\x13\xA6\x83a\x13\xA1`\x05a\x10\x81V[a\x11\xF8V[`\x05a\x12\x9EV[a\x13\xB7`\x02a\x10`V[\x90a\x14\0a\x13\xEEa\x13\xE8\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x12\xBEV[\x93a\x12\xBEV[\x93a\x13\xF7a\x02\x04V[\x91\x82\x91\x82a\x03\xA8V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x14\x1D`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x149`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x14U`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x14q`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90a\x14\x81\x93\x92\x91a\x10\xCEV[V[_\x90V[a\x14\x90\x90a\x04!V[\x90V[\x90a\x14\x9D\x90a\x14\x87V[_R` R`@_ \x90V[\x90V[a\x14\xB8a\x14\xBD\x91a\x10GV[a\x14\xA9V[\x90V[a\x14\xCA\x90Ta\x14\xACV[\x90V[`\x01a\x14\xE5a\x14\xEB\x92a\x14\xDEa\x14\x83V[P_a\x14\x93V[\x01a\x14\xC0V[\x90V[\x90a\x15\t\x91a\x15\x04a\x14\xFF\x82a\x14\xCDV[a!\x94V[a\x15\x0BV[V[\x90a\x15\x15\x91a!\xDEV[PV[\x90a\x15\"\x91a\x14\xEEV[V[\x90\x80a\x15?a\x159a\x154a\"\x89V[a\x02\xD9V[\x91a\x02\xD9V[\x03a\x15PWa\x15M\x91a\"\x96V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x15h`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[a\x15{a\x15\x81\x91\x93\x92\x93a\x02\xF2V[\x92a\x02\xF2V[\x91a\x15\x8D\x83\x82\x02a\x02\xF2V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\x9CWV[a\x11\xE4V[\x90a\x15\xB4\x91a\x15\xAEa\x10CV[Pa\x15lV[\x90V[a\x15\xD0\x90a\x15\xCBa\x15\xC6a\x03\xF2V[a!\x94V[a\x16 V[V[`\xA0\x1B\x90V[\x90a\x15\xE7`\xFF`\xA0\x1B\x91a\x15\xD2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\xFA\x90a\x02cV[\x90V[\x90V[\x90a\x16\x15a\x16\x10a\x16\x1C\x92a\x15\xF1V[a\x15\xFDV[\x82Ta\x15\xD8V[\x90UV[a\x16+\x81`\x02a\x16\0V[a\x16a\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x16Xa\x02\x04V[\x91\x82\x91\x82a\x02uV[\x03\x90\xA1V[a\x16o\x90a\x15\xB7V[V[\x90a\x16\x8C\x92\x91a\x16\x87a\x16\x82a\rJV[a!\x94V[a\x16\x8EV[V[\x91\x90\x81a\x16\xABa\x16\xA5a\x16\xA0_a\x11\xBCV[a\x02\xD9V[\x91a\x02\xD9V[\x14a\x16\xC6Wa\x16\xBCa\x16\xC4\x93a\x12EV[\x91\x90\x91a#7V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x16\xDE`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90a\x16\xED\x92\x91a\x16qV[V[a\x17\x08\x90a\x17\x03a\x16\xFEa\x03\xF2V[a!\x94V[a\x17\nV[V[a\x17\x15\x90`\x03a\x12\x9EV[V[a\x17 \x90a\x16\xEFV[V[a\x17;\x90a\x176a\x171a\x03\xF2V[a!\x94V[a\x17{V[V[\x90a\x17N`\x01\x80`\xA0\x1B\x03\x91a\r)V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x17pa\x17ka\x17w\x92a\x12\xBEV[a\x17XV[\x82Ta\x17=V[\x90UV[\x80a\x17\x96a\x17\x90a\x17\x8B_a\x11\xBCV[a\x02\xD9V[\x91a\x02\xD9V[\x14a\x17\xFCWa\x17\xA5`\x02a\x10`V[a\x17\xB0\x82`\x02a\x17[V[\x90a\x17\xE4a\x17\xDE\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x12\xBEV[\x91a\x12\xBEV[\x91a\x17\xEDa\x02\x04V[\x80a\x17\xF7\x81a\x05\xA2V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x18\x14`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[a\x18!\x90a\x17\"V[V[\x90a\x18-\x90a\x12\xBEV[_R` R`@_ \x90V[a\x18Ea\x18J\x91a\x10GV[a\x0E\xAFV[\x90V[a\x18W\x90Ta\x189V[\x90V[a\x18\x80\x91_a\x18ua\x18{\x93a\x18na\x0F\xFBV[P\x82a\x14\x93V[\x01a\x18#V[a\x18MV[\x90V[a\x18\x9C\x90a\x18\x97a\x18\x92a\x03\xF2V[a!\x94V[a\x18\xC1V[V[\x91` a\x18\xBF\x92\x94\x93a\x18\xB8`@\x82\x01\x96_\x83\x01\x90a\x02\xF5V[\x01\x90a\x02\xF5V[V[a\x18\xCB`\x04a\x10\x81V[a\x18\xD6\x82`\x04a\x12\x9EV[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x19\ra\x19\x04a\x02\x04V[\x92\x83\x92\x83a\x18\x9EV[\x03\x90\xA1V[a\x19\x1B\x90a\x18\x83V[V[\x90a\x198\x92\x91a\x193a\x19.a\x03\xF2V[a!\x94V[a\x19:V[V[\x91\x90\x91a\x19H\x81`\x08a\x17[V[a\x19S\x83`\ta\x12\x9EV[a\x19^\x82`\na\x12\x9EV[\x91\x90\x91a\x19\x97\x7F\xB1\xE1g\x7F \x9A\x97L\xED\xA2\xC2\xABh\x15A\xC5\xDB\x04-\xB4\xA9\xB3T\xDD\xACy7D`\xDA2\0\x93a\x19\x8Ea\x02\x04V[\x93\x84\x93\x84a\x03\x02V[\x03\x90\xA1V[\x90a\x19\xA7\x92\x91a\x19\x1DV[V[\x90a\x19\xC4\x91a\x19\xBFa\x19\xBA\x82a\x14\xCDV[a!\x94V[a\x19\xC6V[V[\x90a\x19\xD0\x91a\"\x96V[PV[\x90a\x19\xDD\x91a\x19\xA9V[V[``\x90V[a\x19\xED\x90a\n\xF2V[\x90V[a\x19\xF8a\x19\xDFV[Pa\x1A\x01a\x10?V[Pa\x1A\na\x0F\xFBV[P`\x07a\x1A\x17`\x02a\x10`V[\x91a\x1A+a\x1A%`\x02a\x11\x06V[\x92a\x19\xE4V[\x92\x91\x90V[a\x1A?a\x1AE\x91\x93\x92\x93a\x02\xF2V[\x92a\x02\xF2V[\x82\x03\x91\x82\x11a\x1APWV[a\x11\xE4V[a\x1A]a\x10CV[Pa\x1Afa\x10CV[Pa\x1Aoa\x10CV[Pa\x1Az`\x05a\x10\x81V[a\x1A\x84`\x04a\x10\x81V[\x91a\x1A\x8F`\x04a\x10\x81V[a\x1A\xAAa\x1A\xA4a\x1A\x9F`\x05a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11_\x14a\x1A\xD5Wa\x1A\xCEa\x1A\xBE`\x04a\x10\x81V[a\x1A\xC8`\x05a\x10\x81V[\x90a\x1A0V[[\x91\x92\x91\x90V[a\x1A\xDE_a\x11\xC8V[a\x1A\xCFV[a\x1A\xEBa\x0F\xFBV[Pa\x1B\x05a\x1A\xFFc\x01\xFF\xC9\xA7`\xE0\x1Ba\x02\x16V[\x91a\x02\x16V[\x14\x90V[\x90V[a\x1B a\x1B\x1Ba\x1B%\x92a\x1B\tV[a\x11\x9DV[a\x02\xF2V[\x90V[a\x1B2`\x02a\x1B\x0CV[\x90V[a\x1B?`\x01a\x10\x81V[a\x1BXa\x1BRa\x1BMa\x1B(V[a\x02\xF2V[\x91a\x02\xF2V[\x14a\x1BqWa\x1Boa\x1Bha\x1B(V[`\x01a\x12\x9EV[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x1B\x89`\x04\x82\x01a\x05\xA2V[\x03\x90\xFD[\x90V[a\x1B\xA4a\x1B\x9Fa\x1B\xA9\x92a\x1B\x8DV[a\x11\x9DV[a\x02\xF2V[\x90V[a\x1B\xB6`\x01a\x1B\x90V[\x90V[a\x1B\xCBa\x1B\xC4a\x1B\xACV[`\x01a\x12\x9EV[V[\x90V[a\x1B\xE4a\x1B\xDFa\x1B\xE9\x92a\x1B\xCDV[a\x11\x9DV[a\x02\xF2V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1C\x0Ca\x1C\x12\x91a\x02\xF2V[\x91a\x02\xF2V[\x90\x81\x15a\x1C\x1DW\x04\x90V[a\x1B\xECV[a\x1C8Ba\x1C2b\x01Q\x80a\x1B\xD0V[\x90a\x1C\0V[\x80a\x1CTa\x1CNa\x1CI`\x06a\x10\x81V[a\x02\xF2V[\x91a\x02\xF2V[\x11a\x1C]W[PV[\x80a\x1C\xBF\x91a\x1Cl`\x05a\x10\x81V[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a\x1C\xA2a\x1C\x99a\x02\x04V[\x92\x83\x92\x83a\x18\x9EV[\x03\x90\xA1a\x1C\xB8a\x1C\xB1_a\x11\xC8V[`\x05a\x12\x9EV[`\x06a\x12\x9EV[_a\x1CZV[a\x1C\xCE\x90a\x12QV[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[`\xE0\x1B\x90V[a\x1C\xF4a\x1C\xEFa\x1C\xF9\x92a\x1C\xD1V[a\x1C\xDAV[a\x02\x16V[\x90V[`@\x90a\x1D%a\x1D,\x94\x96\x95\x93\x96a\x1D\x1B``\x84\x01\x98_\x85\x01\x90a\x02\xE5V[` \x83\x01\x90a\x02\xE5V[\x01\x90a\x02\xF5V[V[`\x04\x92a\x1Dha\x1D|\x95\x93a\x1Dw\x93\x94a\x1DOc#\xB8r\xDD\x92\x94\x91\x92a\x1C\xE0V[\x93a\x1DXa\x02\x04V[\x97\x88\x95` \x87\x01\x90\x81R\x01a\x1C\xFCV[` \x82\x01\x81\x03\x82R\x03\x83a\n\xC9V[a#\x85V[V[P\x90V[a\x1D\x8B\x90a\x02\xCEV[\x90V[a\x1D\x97\x81a\x1D\x82V[\x03a\x1D\x9EWV[_\x80\xFD[\x90P5\x90a\x1D\xAF\x82a\x1D\x8EV[V[\x90\x91``\x82\x84\x03\x12a\x1D\xE6Wa\x1D\xE3a\x1D\xCC\x84_\x85\x01a\x1D\xA2V[\x93a\x1D\xDA\x81` \x86\x01a\x04\xF6V[\x93`@\x01a\x04\xF6V[\x90V[a\x02\x0EV[a\x1D\xF4\x90a\x12QV[\x90V[a\x1E\x0Fa\x1E\ta\x1E\x15\x92\x95\x93\x95a\x1D\xEBV[\x94a\x12\x7FV[\x92a\x12\x7FV[\x90V[\x90PQ\x90a\x1E%\x82a\x088V[V[\x90` \x82\x82\x03\x12a\x1E@Wa\x1E=\x91_\x01a\x1E\x18V[\x90V[a\x02\x0EV[\x91` a\x1Ef\x92\x94\x93a\x1E_`@\x82\x01\x96_\x83\x01\x90a\x02\xE5V[\x01\x90a\x02\xF5V[V[a\x1Epa\x02\x04V[=_\x82>=\x90\xFD[a\x1E\x81\x90a\x12\x1DV[\x90V[a\x1E\x8D\x90a\x1ExV[\x90V[a\x1E\x99\x90a\x12QV[\x90V[a\x1E\xA5\x90a\x12QV[\x90V[_\x80\xFD[\x90a\x1E\xBFa\x1E\xB8a\x02\x04V[\x92\x83a\n\xC9V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1E\xDFWa\x1E\xDB` \x91a\n\xABV[\x01\x90V[a\n\xB5V[\x90\x92\x91\x92a\x1E\xF9a\x1E\xF4\x82a\x1E\xC1V[a\x1E\xACV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x1F\x15Wa\x1F\x13\x92a\x0BHV[V[a\x1E\xA8V[\x90\x80`\x1F\x83\x01\x12\x15a\x1F8W\x81` a\x1F5\x93Q\x91\x01a\x1E\xE4V[\x90V[a\x05\x05V[\x90` \x82\x82\x03\x12a\x1FmW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1FhWa\x1Fe\x92\x01a\x1F\x1AV[\x90V[a\x02\x12V[a\x02\x0EV[` \x91\x81R\x01\x90V[a\x1F\x86_\x80\x92a\x1FrV[\x01\x90V[\x93\x94a\x1F\xD2a\x1F\xDC\x92\x96a\x1F\xC8a\x1F\xE6\x96a\x1F\xBEa\x1F\xF3\x9B\x97a\x1F\xB4`\xE0\x8C\x01\x9C_\x8D\x01\x90a\x02\xE5V[` \x8B\x01\x90a\x02\xE5V[`@\x89\x01\x90a\x02\xE5V[``\x87\x01\x90a\x02\xF5V[`\x80\x85\x01\x90a\x02\xF5V[`\xA0\x83\x01\x90a\x02\xF5V[`\xC0\x81\x83\x03\x91\x01Ra\x1F{V[\x90V[\x92\x90\x91a \x04\x81\x83\x90a\x1D~V[a \x16a \x10_a\x11\xC8V[\x91a\x02\xF2V[\x11_\x14a!iWa 4\x91a .\x91\x90\x81\x01\x90a\x1D\xB1V[\x91a\x1D\xF7V[\x91\x93\x90\x93[\x93\x91a F\x83\x82\x90a\x15lV[\x91a Xa S\x82a\x12EV[a\x1C\xC5V[\x91` c\t^\xA7\xB3\x93a k`\x02a\x10`V[\x90a \x89_\x8A\x97a \x94a }a\x02\x04V[\x99\x8A\x96\x87\x95\x86\x94a\x1C\xDAV[\x84R`\x04\x84\x01a\x1EEV[\x03\x92Z\xF1\x80\x15a!dW_\x96a \xF6\x94a!\x01\x92a!8W[Pa \xC8a \xC3a \xBE`\x02a\x10`V[a\x1E\x84V[a\x1E\x90V[\x92cO\xB1\xA0{\x96\x93\x96\x93\x94\x97a \xDD0a\x1E\x9CV[\x9A\x92\x90\x91\x92a \xEAa\x02\x04V[\x9B\x8C\x9A\x8B\x99\x8A\x98a\x1C\xDAV[\x88R`\x04\x88\x01a\x1F\x8AV[\x03\x92Z\xF1\x80\x15a!3Wa!\x13W[PV[a!.\x90=\x80_\x83>a!&\x81\x83a\n\xC9V[\x81\x01\x90a\x1F=V[a!\x10V[a\x1EhV[a!X\x90` =\x81\x11a!]W[a!P\x81\x83a\n\xC9V[\x81\x01\x90a\x1E'V[a \xADV[P=a!FV[a\x1EhV[PPa!u`\x08a\x10`V[\x91a!\x80`\ta\x10\x81V[\x90a!\x8B`\na\x10\x81V[\x93\x91\x93\x91a 9V[a!\xA6\x90a!\xA0a\"\x89V[\x90a$\\V[V[\x90a!\xB4`\xFF\x91a\r)V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a!\xD3a!\xCEa!\xDA\x92a\x15\xF1V[a\x15\xFDV[\x82Ta!\xA8V[\x90UV[a!\xE6a\x0F\xFBV[Pa!\xFBa!\xF5\x82\x84\x90a\x18ZV[\x15a\x02cV[_\x14a\"\x83Wa\"\"`\x01a\"\x1D_a\"\x15\x81\x86\x90a\x14\x93V[\x01\x85\x90a\x18#V[a!\xBEV[\x90a\"+a\"\x89V[\x90a\"ha\"ba\"\\\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x14\x87V[\x92a\x12\xBEV[\x92a\x12\xBEV[\x92a\"qa\x02\x04V[\x80a\"{\x81a\x05\xA2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\"\x91a\x10?V[P3\x90V[a\"\x9Ea\x0F\xFBV[Pa\"\xAA\x81\x83\x90a\x18ZV[_\x14a#1Wa\"\xD0_a\"\xCB_a\"\xC3\x81\x86\x90a\x14\x93V[\x01\x85\x90a\x18#V[a!\xBEV[\x90a\"\xD9a\"\x89V[\x90a#\x16a#\x10a#\n\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x14\x87V[\x92a\x12\xBEV[\x92a\x12\xBEV[\x92a#\x1Fa\x02\x04V[\x80a#)\x81a\x05\xA2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x90a#~a#\x83\x93a#o`\x04\x94\x93a#Vc\xA9\x05\x9C\xBB\x91\x93\x91a\x1C\xE0V[\x92a#_a\x02\x04V[\x96\x87\x94` \x86\x01\x90\x81R\x01a\x1EEV[` \x82\x01\x81\x03\x82R\x03\x83a\n\xC9V[a#\x85V[V[\x90_` \x91a#\x92a\x10CV[Pa#\x9Ba\x10CV[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a$.W=_Q\x90a#\xC0a#\xBA_a\x11\xC8V[\x91a\x02\xF2V[\x14_\x14a$\x14WPa#\xD1\x81a\x1C\xC5V[;a#\xE4a#\xDE_a\x11\xC8V[\x91a\x02\xF2V[\x14[a#\xEDWPV[a#\xF9a$\x10\x91a\x1C\xC5V[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x11V[\x03\x90\xFD[a$'a$!`\x01a\x1B\x90V[\x91a\x02\xF2V[\x14\x15a#\xE6V[`@Q=_\x82>=\x90\xFD[\x91` a$Z\x92\x94\x93a$S`@\x82\x01\x96_\x83\x01\x90a\x02\xE5V[\x01\x90a\x04$V[V[\x90a$qa$k\x83\x83\x90a\x18ZV[\x15a\x02cV[a$yWPPV[a$\x93_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a$9V[\x03\x90\xFD",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `BridgeCallFailed(string)` and selector `0xd245b2d3`.
```solidity
error BridgeCallFailed(string reason);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeCallFailed {
        #[allow(missing_docs)]
        pub reason: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeCallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeCallFailed) -> Self {
                (value.reason,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeCallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { reason: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeCallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeCallFailed(string)";
            const SELECTOR: [u8; 4] = [210u8, 69u8, 178u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.reason,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `BridgeNotActive()` and selector `0x7bea20b2`.
```solidity
error BridgeNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeNotActive()";
            const SELECTOR: [u8; 4] = [123u8, 234u8, 32u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExcessiveAmount()` and selector `0x70d168bc`.
```solidity
error ExcessiveAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExcessiveAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExcessiveAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ExcessiveAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExcessiveAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExcessiveAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExcessiveAmount()";
            const SELECTOR: [u8; 4] = [112u8, 209u8, 104u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`.
```solidity
error SafeERC20FailedOperation(address token);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeERC20FailedOperation {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeERC20FailedOperation>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeERC20FailedOperation) -> Self {
                (value.token,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeERC20FailedOperation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { token: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeERC20FailedOperation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeERC20FailedOperation(address)";
            const SELECTOR: [u8; 4] = [82u8, 116u8, 175u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UnauthorizedCaller()` and selector `0x5c427cd9`.
```solidity
error UnauthorizedCaller();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorizedCaller {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedCaller> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedCaller) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedCaller {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedCaller {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedCaller()";
            const SELECTOR: [u8; 4] = [92u8, 66u8, 124u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ArbitrumConfigUpdated(address,uint256,uint256)` and selector `0xb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da3200`.
```solidity
event ArbitrumConfigUpdated(address recipient, uint256 maxGas, uint256 gasPriceBid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ArbitrumConfigUpdated {
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ArbitrumConfigUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ArbitrumConfigUpdated(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                177u8,
                225u8,
                103u8,
                127u8,
                32u8,
                154u8,
                151u8,
                76u8,
                237u8,
                162u8,
                194u8,
                171u8,
                104u8,
                21u8,
                65u8,
                197u8,
                219u8,
                4u8,
                45u8,
                180u8,
                169u8,
                179u8,
                84u8,
                221u8,
                172u8,
                121u8,
                55u8,
                68u8,
                96u8,
                218u8,
                50u8,
                0u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    recipient: data.0,
                    maxGas: data.1,
                    gasPriceBid: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasPriceBid),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ArbitrumConfigUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ArbitrumConfigUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ArbitrumConfigUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeExecuted(address,uint256,address)` and selector `0x3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8`.
```solidity
event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeExecuted {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeExecuted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeExecuted(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: topics.1,
                    amount: data.0,
                    target: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token.clone(), self.target.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.target,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeStatusUpdated(bool)` and selector `0xb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d5`.
```solidity
event BridgeStatusUpdated(bool active);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeStatusUpdated {
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeStatusUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "BridgeStatusUpdated(bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { active: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeTargetUpdated(address,address)` and selector `0xb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069`.
```solidity
event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeTargetUpdated {
        #[allow(missing_docs)]
        pub oldTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newTarget: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeTargetUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeTargetUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldTarget: topics.1,
                    newTarget: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldTarget.clone(),
                    self.newTarget.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldTarget,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newTarget,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeTargetUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeTargetUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeTargetUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitReset(uint256,uint256)` and selector `0xda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab`.
```solidity
event DailyLimitReset(uint256 day, uint256 previousUsed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitReset {
        #[allow(missing_docs)]
        pub day: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousUsed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitReset {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitReset(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    day: data.0,
                    previousUsed: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.day),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousUsed),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitReset {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitReset> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitReset) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitUpdated(uint256,uint256)` and selector `0x207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf`.
```solidity
event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitUpdated {
        #[allow(missing_docs)]
        pub oldLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldLimit: data.0,
                    newLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _recipient, uint256 _maxGas, uint256 _gasPriceBid);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub caller: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _bridgeTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.admin,
                        value.caller,
                        value._bridgeTarget,
                        value._maxSingleTransfer,
                        value._dailyLimit,
                        value._recipient,
                        value._maxGas,
                        value._gasPriceBid,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        caller: tuple.1,
                        _bridgeTarget: tuple.2,
                        _maxSingleTransfer: tuple.3,
                        _dailyLimit: tuple.4,
                        _recipient: tuple.5,
                        _maxGas: tuple.6,
                        _gasPriceBid: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._bridgeTarget,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxSingleTransfer),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._dailyLimit),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
        }
    };
    /**Function with signature `BRIDGE_ADMIN_ROLE()` and selector `0x118c38c7`.
```solidity
function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_ADMIN_ROLE()`](BRIDGE_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 56u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `BRIDGE_CALLER_ROLE()` and selector `0x3462fac3`.
```solidity
function BRIDGE_CALLER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_CALLER_ROLE()`](BRIDGE_CALLER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_CALLER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_CALLER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_CALLER_ROLE()";
            const SELECTOR: [u8; 4] = [52u8, 98u8, 250u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeActive()` and selector `0xead93c8f`.
```solidity
function bridgeActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveCall {}
    ///Container type for the return parameters of the [`bridgeActive()`](bridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeActive()";
            const SELECTOR: [u8; 4] = [234u8, 217u8, 60u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeName()` and selector `0x65d7a3c9`.
```solidity
function bridgeName() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameCall {}
    ///Container type for the return parameters of the [`bridgeName()`](bridgeNameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeNameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeNameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeName()";
            const SELECTOR: [u8; 4] = [101u8, 215u8, 163u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeTarget()` and selector `0xc9f5b63e`.
```solidity
function bridgeTarget() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetCall {}
    ///Container type for the return parameters of the [`bridgeTarget()`](bridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeTargetCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeTargetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeTarget()";
            const SELECTOR: [u8; 4] = [201u8, 245u8, 182u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEthValue(uint256,uint256)` and selector `0x4a65855a`.
```solidity
function calculateEthValue(uint256 _maxGas, uint256 _gasPriceBid) external pure returns (uint256 ethValue);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEthValueCall {
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEthValue(uint256,uint256)`](calculateEthValueCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEthValueReturn {
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEthValueCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEthValueCall) -> Self {
                    (value._maxGas, value._gasPriceBid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEthValueCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _maxGas: tuple.0,
                        _gasPriceBid: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEthValueReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEthValueReturn) -> Self {
                    (value.ethValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEthValueReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { ethValue: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEthValueCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEthValueReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEthValue(uint256,uint256)";
            const SELECTOR: [u8; 4] = [74u8, 101u8, 133u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyLimit()` and selector `0x67eeba0c`.
```solidity
function dailyLimit() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitCall {}
    ///Container type for the return parameters of the [`dailyLimit()`](dailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyLimitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyLimit()";
            const SELECTOR: [u8; 4] = [103u8, 238u8, 186u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyUsed()` and selector `0x1033b4cc`.
```solidity
function dailyUsed() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedCall {}
    ///Container type for the return parameters of the [`dailyUsed()`](dailyUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyUsedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyUsedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyUsed()";
            const SELECTOR: [u8; 4] = [16u8, 51u8, 180u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBridge(address,uint256,bytes)` and selector `0x18b68b8c`.
```solidity
function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dynamicData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeBridge(address,uint256,bytes)`](executeBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeCall) -> Self {
                    (value.token, value.amount, value.dynamicData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        dynamicData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBridgeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBridge(address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [24u8, 182u8, 139u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.dynamicData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `gasPriceBid()` and selector `0x5d942ac1`.
```solidity
function gasPriceBid() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasPriceBidCall {}
    ///Container type for the return parameters of the [`gasPriceBid()`](gasPriceBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasPriceBidReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasPriceBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: gasPriceBidCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasPriceBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasPriceBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: gasPriceBidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasPriceBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for gasPriceBidCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = gasPriceBidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "gasPriceBid()";
            const SELECTOR: [u8; 4] = [93u8, 148u8, 42u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getArbitrumConfig()` and selector `0x0e1508d9`.
```solidity
function getArbitrumConfig() external view returns (address recipientAddr, uint256 maxGasLimit, uint256 gasPriceBidAmount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getArbitrumConfigCall {}
    ///Container type for the return parameters of the [`getArbitrumConfig()`](getArbitrumConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getArbitrumConfigReturn {
        #[allow(missing_docs)]
        pub recipientAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxGasLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBidAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getArbitrumConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getArbitrumConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getArbitrumConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getArbitrumConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getArbitrumConfigReturn) -> Self {
                    (value.recipientAddr, value.maxGasLimit, value.gasPriceBidAmount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getArbitrumConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipientAddr: tuple.0,
                        maxGasLimit: tuple.1,
                        gasPriceBidAmount: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getArbitrumConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getArbitrumConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getArbitrumConfig()";
            const SELECTOR: [u8; 4] = [14u8, 21u8, 8u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeInfo()` and selector `0xede7cebd`.
```solidity
function getBridgeInfo() external view returns (string memory name, address target, bool active);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoCall {}
    ///Container type for the return parameters of the [`getBridgeInfo()`](getBridgeInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoReturn {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoReturn) -> Self {
                    (value.name, value.target, value.active)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        target: tuple.1,
                        active: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeInfoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeInfoReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeInfo()";
            const SELECTOR: [u8; 4] = [237u8, 231u8, 206u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getDailyUsage()` and selector `0xfb8c4b51`.
```solidity
function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageCall {}
    ///Container type for the return parameters of the [`getDailyUsage()`](getDailyUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageReturn {
        #[allow(missing_docs)]
        pub used: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub remaining: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageCall> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageReturn) -> Self {
                    (value.used, value.limit, value.remaining)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        used: tuple.0,
                        limit: tuple.1,
                        remaining: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getDailyUsageCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getDailyUsageReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getDailyUsage()";
            const SELECTOR: [u8; 4] = [251u8, 140u8, 75u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `lastResetDay()` and selector `0x1259a5c8`.
```solidity
function lastResetDay() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayCall {}
    ///Container type for the return parameters of the [`lastResetDay()`](lastResetDayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayCall> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastResetDayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastResetDayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastResetDay()";
            const SELECTOR: [u8; 4] = [18u8, 89u8, 165u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxGas()` and selector `0x501d815c`.
```solidity
function maxGas() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxGasCall {}
    ///Container type for the return parameters of the [`maxGas()`](maxGasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxGasReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxGasCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxGasCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxGasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxGasReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxGasReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxGasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxGasCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxGasReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxGas()";
            const SELECTOR: [u8; 4] = [80u8, 29u8, 129u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxSingleTransfer()` and selector `0x36b089d8`.
```solidity
function maxSingleTransfer() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferCall {}
    ///Container type for the return parameters of the [`maxSingleTransfer()`](maxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxSingleTransferCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxSingleTransferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxSingleTransfer()";
            const SELECTOR: [u8; 4] = [54u8, 176u8, 137u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recipient()` and selector `0x66d003ac`.
```solidity
function recipient() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientCall {}
    ///Container type for the return parameters of the [`recipient()`](recipientCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientCall> for UnderlyingRustTuple<'_> {
                fn from(value: recipientCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recipientReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recipientCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recipientReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recipient()";
            const SELECTOR: [u8; 4] = [102u8, 208u8, 3u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recoverTokens(address,uint256,address)` and selector `0x61b0a56e`.
```solidity
function recoverTokens(address token, uint256 amount, address to) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`recoverTokens(address,uint256,address)`](recoverTokensCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensCall> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensCall) -> Self {
                    (value.token, value.amount, value.to)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        to: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recoverTokensCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recoverTokensReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recoverTokens(address,uint256,address)";
            const SELECTOR: [u8; 4] = [97u8, 176u8, 165u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setArbitrumConfig(address,uint256,uint256)` and selector `0xcaed5c7f`.
```solidity
function setArbitrumConfig(address _recipient, uint256 _maxGas, uint256 _gasPriceBid) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setArbitrumConfigCall {
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setArbitrumConfig(address,uint256,uint256)`](setArbitrumConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setArbitrumConfigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setArbitrumConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setArbitrumConfigCall) -> Self {
                    (value._recipient, value._maxGas, value._gasPriceBid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setArbitrumConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _recipient: tuple.0,
                        _maxGas: tuple.1,
                        _gasPriceBid: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setArbitrumConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setArbitrumConfigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setArbitrumConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setArbitrumConfigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setArbitrumConfigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setArbitrumConfig(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [202u8, 237u8, 92u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeActive(bool)` and selector `0x5ab1d61c`.
```solidity
function setBridgeActive(bool active) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveCall {
        #[allow(missing_docs)]
        pub active: bool,
    }
    ///Container type for the return parameters of the [`setBridgeActive(bool)`](setBridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveCall) -> Self {
                    (value.active,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { active: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeActive(bool)";
            const SELECTOR: [u8; 4] = [90u8, 177u8, 214u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeTarget(address)` and selector `0x6bcc8c14`.
```solidity
function setBridgeTarget(address target) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetCall {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBridgeTarget(address)`](setBridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetCall) -> Self {
                    (value.target,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { target: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeTargetCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeTargetReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeTarget(address)";
            const SELECTOR: [u8; 4] = [107u8, 204u8, 140u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDailyLimit(uint256)` and selector `0xb20d30a9`.
```solidity
function setDailyLimit(uint256 limit) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitCall {
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setDailyLimit(uint256)`](setDailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitCall) -> Self {
                    (value.limit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { limit: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDailyLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDailyLimitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDailyLimit(uint256)";
            const SELECTOR: [u8; 4] = [178u8, 13u8, 48u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxSingleTransfer(uint256)` and selector `0x63221490`.
```solidity
function setMaxSingleTransfer(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferCall {
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxSingleTransfer(uint256)`](setMaxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxSingleTransferCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxSingleTransferReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxSingleTransfer(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 34u8, 20u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbitrumBridgeProxy`](self) function calls.
    pub enum ArbitrumBridgeProxyCalls {
        #[allow(missing_docs)]
        BRIDGE_ADMIN_ROLE(BRIDGE_ADMIN_ROLECall),
        #[allow(missing_docs)]
        BRIDGE_CALLER_ROLE(BRIDGE_CALLER_ROLECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        bridgeActive(bridgeActiveCall),
        #[allow(missing_docs)]
        bridgeName(bridgeNameCall),
        #[allow(missing_docs)]
        bridgeTarget(bridgeTargetCall),
        #[allow(missing_docs)]
        calculateEthValue(calculateEthValueCall),
        #[allow(missing_docs)]
        dailyLimit(dailyLimitCall),
        #[allow(missing_docs)]
        dailyUsed(dailyUsedCall),
        #[allow(missing_docs)]
        executeBridge(executeBridgeCall),
        #[allow(missing_docs)]
        gasPriceBid(gasPriceBidCall),
        #[allow(missing_docs)]
        getArbitrumConfig(getArbitrumConfigCall),
        #[allow(missing_docs)]
        getBridgeInfo(getBridgeInfoCall),
        #[allow(missing_docs)]
        getDailyUsage(getDailyUsageCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        lastResetDay(lastResetDayCall),
        #[allow(missing_docs)]
        maxGas(maxGasCall),
        #[allow(missing_docs)]
        maxSingleTransfer(maxSingleTransferCall),
        #[allow(missing_docs)]
        recipient(recipientCall),
        #[allow(missing_docs)]
        recoverTokens(recoverTokensCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        setArbitrumConfig(setArbitrumConfigCall),
        #[allow(missing_docs)]
        setBridgeActive(setBridgeActiveCall),
        #[allow(missing_docs)]
        setBridgeTarget(setBridgeTargetCall),
        #[allow(missing_docs)]
        setDailyLimit(setDailyLimitCall),
        #[allow(missing_docs)]
        setMaxSingleTransfer(setMaxSingleTransferCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [14u8, 21u8, 8u8, 217u8],
            [16u8, 51u8, 180u8, 204u8],
            [17u8, 140u8, 56u8, 199u8],
            [18u8, 89u8, 165u8, 200u8],
            [24u8, 182u8, 139u8, 140u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [52u8, 98u8, 250u8, 195u8],
            [54u8, 86u8, 138u8, 190u8],
            [54u8, 176u8, 137u8, 216u8],
            [74u8, 101u8, 133u8, 90u8],
            [80u8, 29u8, 129u8, 92u8],
            [90u8, 177u8, 214u8, 28u8],
            [93u8, 148u8, 42u8, 193u8],
            [97u8, 176u8, 165u8, 110u8],
            [99u8, 34u8, 20u8, 144u8],
            [101u8, 215u8, 163u8, 201u8],
            [102u8, 208u8, 3u8, 172u8],
            [103u8, 238u8, 186u8, 12u8],
            [107u8, 204u8, 140u8, 20u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [178u8, 13u8, 48u8, 169u8],
            [201u8, 245u8, 182u8, 62u8],
            [202u8, 237u8, 92u8, 127u8],
            [213u8, 71u8, 116u8, 31u8],
            [234u8, 217u8, 60u8, 143u8],
            [237u8, 231u8, 206u8, 189u8],
            [251u8, 140u8, 75u8, 81u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbitrumBridgeProxyCalls {
        const NAME: &'static str = "ArbitrumBridgeProxyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 30usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BRIDGE_ADMIN_ROLE(_) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BRIDGE_CALLER_ROLE(_) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeActive(_) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeName(_) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeTarget(_) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEthValue(_) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyLimit(_) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyUsed(_) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeBridge(_) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::gasPriceBid(_) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getArbitrumConfig(_) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeInfo(_) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getDailyUsage(_) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::lastResetDay(_) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxGas(_) => <maxGasCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::maxSingleTransfer(_) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recipient(_) => {
                    <recipientCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recoverTokens(_) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setArbitrumConfig(_) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeActive(_) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeTarget(_) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDailyLimit(_) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxSingleTransfer(_) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getArbitrumConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getArbitrumConfig)
                    }
                    getArbitrumConfig
                },
                {
                    fn dailyUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <dailyUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::dailyUsed)
                    }
                    dailyUsed
                },
                {
                    fn BRIDGE_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::BRIDGE_ADMIN_ROLE)
                    }
                    BRIDGE_ADMIN_ROLE
                },
                {
                    fn lastResetDay(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <lastResetDayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::lastResetDay)
                    }
                    lastResetDay
                },
                {
                    fn executeBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <executeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::executeBridge)
                    }
                    executeBridge
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn BRIDGE_CALLER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::BRIDGE_CALLER_ROLE)
                    }
                    BRIDGE_CALLER_ROLE
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn maxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxSingleTransfer)
                    }
                    maxSingleTransfer
                },
                {
                    fn calculateEthValue(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <calculateEthValueCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::calculateEthValue)
                    }
                    calculateEthValue
                },
                {
                    fn maxGas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxGasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxGas)
                    }
                    maxGas
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn gasPriceBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <gasPriceBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::gasPriceBid)
                    }
                    gasPriceBid
                },
                {
                    fn recoverTokens(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <recoverTokensCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::recoverTokens)
                    }
                    recoverTokens
                },
                {
                    fn setMaxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setMaxSingleTransfer)
                    }
                    setMaxSingleTransfer
                },
                {
                    fn bridgeName(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeNameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeName)
                    }
                    bridgeName
                },
                {
                    fn recipient(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <recipientCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::recipient)
                    }
                    recipient
                },
                {
                    fn dailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <dailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::dailyLimit)
                    }
                    dailyLimit
                },
                {
                    fn setBridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setBridgeTarget)
                    }
                    setBridgeTarget
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn setDailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setDailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setDailyLimit)
                    }
                    setDailyLimit
                },
                {
                    fn bridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeTarget)
                    }
                    bridgeTarget
                },
                {
                    fn setArbitrumConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setArbitrumConfig)
                    }
                    setArbitrumConfig
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn bridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeActive)
                    }
                    bridgeActive
                },
                {
                    fn getBridgeInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getBridgeInfo)
                    }
                    getBridgeInfo
                },
                {
                    fn getDailyUsage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getDailyUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getDailyUsage)
                    }
                    getDailyUsage
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::calculateEthValue(inner) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::gasPriceBid(inner) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getArbitrumConfig(inner) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxGas(inner) => {
                    <maxGasCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setArbitrumConfig(inner) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEthValue(inner) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::gasPriceBid(inner) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getArbitrumConfig(inner) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxGas(inner) => {
                    <maxGasCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setArbitrumConfig(inner) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbitrumBridgeProxy`](self) custom errors.
    pub enum ArbitrumBridgeProxyErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        BridgeCallFailed(BridgeCallFailed),
        #[allow(missing_docs)]
        BridgeNotActive(BridgeNotActive),
        #[allow(missing_docs)]
        ExcessiveAmount(ExcessiveAmount),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
        #[allow(missing_docs)]
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        #[allow(missing_docs)]
        UnauthorizedCaller(UnauthorizedCaller),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [31u8, 42u8, 32u8, 5u8],
            [62u8, 229u8, 174u8, 181u8],
            [82u8, 116u8, 175u8, 231u8],
            [92u8, 66u8, 124u8, 217u8],
            [102u8, 151u8, 178u8, 50u8],
            [112u8, 209u8, 104u8, 188u8],
            [123u8, 234u8, 32u8, 178u8],
            [210u8, 69u8, 178u8, 211u8],
            [217u8, 46u8, 35u8, 61u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbitrumBridgeProxyErrors {
        const NAME: &'static str = "ArbitrumBridgeProxyErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeCallFailed(_) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeNotActive(_) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExcessiveAmount(_) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeERC20FailedOperation(_) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedCaller(_) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors>] = &[
                {
                    fn ZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn SafeERC20FailedOperation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::SafeERC20FailedOperation)
                    }
                    SafeERC20FailedOperation
                },
                {
                    fn UnauthorizedCaller(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <UnauthorizedCaller as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::UnauthorizedCaller)
                    }
                    UnauthorizedCaller
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExcessiveAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ExcessiveAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ExcessiveAmount)
                    }
                    ExcessiveAmount
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn BridgeCallFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <BridgeCallFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::BridgeCallFailed)
                    }
                    BridgeCallFailed
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                ArbitrumBridgeProxyErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`ArbitrumBridgeProxy`](self) events.
    pub enum ArbitrumBridgeProxyEvents {
        #[allow(missing_docs)]
        ArbitrumConfigUpdated(ArbitrumConfigUpdated),
        #[allow(missing_docs)]
        BridgeExecuted(BridgeExecuted),
        #[allow(missing_docs)]
        BridgeStatusUpdated(BridgeStatusUpdated),
        #[allow(missing_docs)]
        BridgeTargetUpdated(BridgeTargetUpdated),
        #[allow(missing_docs)]
        DailyLimitReset(DailyLimitReset),
        #[allow(missing_docs)]
        DailyLimitUpdated(DailyLimitUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ],
            [
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ],
            [
                177u8,
                225u8,
                103u8,
                127u8,
                32u8,
                154u8,
                151u8,
                76u8,
                237u8,
                162u8,
                194u8,
                171u8,
                104u8,
                21u8,
                65u8,
                197u8,
                219u8,
                4u8,
                45u8,
                180u8,
                169u8,
                179u8,
                84u8,
                221u8,
                172u8,
                121u8,
                55u8,
                68u8,
                96u8,
                218u8,
                50u8,
                0u8,
            ],
            [
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbitrumBridgeProxyEvents {
        const NAME: &'static str = "ArbitrumBridgeProxyEvents";
        const COUNT: usize = 9usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ArbitrumConfigUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ArbitrumConfigUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ArbitrumConfigUpdated)
                }
                Some(<BridgeExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeExecuted)
                }
                Some(
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeStatusUpdated)
                }
                Some(
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeTargetUpdated)
                }
                Some(<DailyLimitReset as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DailyLimitReset as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitReset)
                }
                Some(
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbitrumBridgeProxyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbitrumConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbitrumConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbitrumBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`ArbitrumBridgeProxyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbitrumBridgeProxyInstance<T, P, N> {
        ArbitrumBridgeProxyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _recipient: alloy::sol_types::private::Address,
        _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbitrumBridgeProxyInstance<T, P, N>>,
    > {
        ArbitrumBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _recipient,
            _maxGas,
            _gasPriceBid,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _recipient: alloy::sol_types::private::Address,
        _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbitrumBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _recipient,
            _maxGas,
            _gasPriceBid,
        )
    }
    /**A [`ArbitrumBridgeProxy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbitrumBridgeProxy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbitrumBridgeProxyInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbitrumBridgeProxyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbitrumBridgeProxyInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbitrumBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`ArbitrumBridgeProxyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<ArbitrumBridgeProxyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                caller,
                _bridgeTarget,
                _maxSingleTransfer,
                _dailyLimit,
                _recipient,
                _maxGas,
                _gasPriceBid,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            caller,
                            _bridgeTarget,
                            _maxSingleTransfer,
                            _dailyLimit,
                            _recipient,
                            _maxGas,
                            _gasPriceBid,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbitrumBridgeProxyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbitrumBridgeProxyInstance<T, P, N> {
            ArbitrumBridgeProxyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`BRIDGE_ADMIN_ROLE`] function.
        pub fn BRIDGE_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_ADMIN_ROLECall, N> {
            self.call_builder(&BRIDGE_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`BRIDGE_CALLER_ROLE`] function.
        pub fn BRIDGE_CALLER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_CALLER_ROLECall, N> {
            self.call_builder(&BRIDGE_CALLER_ROLECall {})
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`bridgeActive`] function.
        pub fn bridgeActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeActiveCall, N> {
            self.call_builder(&bridgeActiveCall {})
        }
        ///Creates a new call builder for the [`bridgeName`] function.
        pub fn bridgeName(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeNameCall, N> {
            self.call_builder(&bridgeNameCall {})
        }
        ///Creates a new call builder for the [`bridgeTarget`] function.
        pub fn bridgeTarget(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeTargetCall, N> {
            self.call_builder(&bridgeTargetCall {})
        }
        ///Creates a new call builder for the [`calculateEthValue`] function.
        pub fn calculateEthValue(
            &self,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEthValueCall, N> {
            self.call_builder(
                &calculateEthValueCall {
                    _maxGas,
                    _gasPriceBid,
                },
            )
        }
        ///Creates a new call builder for the [`dailyLimit`] function.
        pub fn dailyLimit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyLimitCall, N> {
            self.call_builder(&dailyLimitCall {})
        }
        ///Creates a new call builder for the [`dailyUsed`] function.
        pub fn dailyUsed(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyUsedCall, N> {
            self.call_builder(&dailyUsedCall {})
        }
        ///Creates a new call builder for the [`executeBridge`] function.
        pub fn executeBridge(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            dynamicData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBridgeCall, N> {
            self.call_builder(
                &executeBridgeCall {
                    token,
                    amount,
                    dynamicData,
                },
            )
        }
        ///Creates a new call builder for the [`gasPriceBid`] function.
        pub fn gasPriceBid(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, gasPriceBidCall, N> {
            self.call_builder(&gasPriceBidCall {})
        }
        ///Creates a new call builder for the [`getArbitrumConfig`] function.
        pub fn getArbitrumConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getArbitrumConfigCall, N> {
            self.call_builder(&getArbitrumConfigCall {})
        }
        ///Creates a new call builder for the [`getBridgeInfo`] function.
        pub fn getBridgeInfo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeInfoCall, N> {
            self.call_builder(&getBridgeInfoCall {})
        }
        ///Creates a new call builder for the [`getDailyUsage`] function.
        pub fn getDailyUsage(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getDailyUsageCall, N> {
            self.call_builder(&getDailyUsageCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`lastResetDay`] function.
        pub fn lastResetDay(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastResetDayCall, N> {
            self.call_builder(&lastResetDayCall {})
        }
        ///Creates a new call builder for the [`maxGas`] function.
        pub fn maxGas(&self) -> alloy_contract::SolCallBuilder<T, &P, maxGasCall, N> {
            self.call_builder(&maxGasCall {})
        }
        ///Creates a new call builder for the [`maxSingleTransfer`] function.
        pub fn maxSingleTransfer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxSingleTransferCall, N> {
            self.call_builder(&maxSingleTransferCall {})
        }
        ///Creates a new call builder for the [`recipient`] function.
        pub fn recipient(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, recipientCall, N> {
            self.call_builder(&recipientCall {})
        }
        ///Creates a new call builder for the [`recoverTokens`] function.
        pub fn recoverTokens(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            to: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, recoverTokensCall, N> {
            self.call_builder(
                &recoverTokensCall {
                    token,
                    amount,
                    to,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`setArbitrumConfig`] function.
        pub fn setArbitrumConfig(
            &self,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setArbitrumConfigCall, N> {
            self.call_builder(
                &setArbitrumConfigCall {
                    _recipient,
                    _maxGas,
                    _gasPriceBid,
                },
            )
        }
        ///Creates a new call builder for the [`setBridgeActive`] function.
        pub fn setBridgeActive(
            &self,
            active: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeActiveCall, N> {
            self.call_builder(&setBridgeActiveCall { active })
        }
        ///Creates a new call builder for the [`setBridgeTarget`] function.
        pub fn setBridgeTarget(
            &self,
            target: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeTargetCall, N> {
            self.call_builder(&setBridgeTargetCall { target })
        }
        ///Creates a new call builder for the [`setDailyLimit`] function.
        pub fn setDailyLimit(
            &self,
            limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDailyLimitCall, N> {
            self.call_builder(&setDailyLimitCall { limit })
        }
        ///Creates a new call builder for the [`setMaxSingleTransfer`] function.
        pub fn setMaxSingleTransfer(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxSingleTransferCall, N> {
            self.call_builder(&setMaxSingleTransferCall { amount })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ArbitrumConfigUpdated`] event.
        pub fn ArbitrumConfigUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ArbitrumConfigUpdated, N> {
            self.event_filter::<ArbitrumConfigUpdated>()
        }
        ///Creates a new event filter for the [`BridgeExecuted`] event.
        pub fn BridgeExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeExecuted, N> {
            self.event_filter::<BridgeExecuted>()
        }
        ///Creates a new event filter for the [`BridgeStatusUpdated`] event.
        pub fn BridgeStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeStatusUpdated, N> {
            self.event_filter::<BridgeStatusUpdated>()
        }
        ///Creates a new event filter for the [`BridgeTargetUpdated`] event.
        pub fn BridgeTargetUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeTargetUpdated, N> {
            self.event_filter::<BridgeTargetUpdated>()
        }
        ///Creates a new event filter for the [`DailyLimitReset`] event.
        pub fn DailyLimitReset_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitReset, N> {
            self.event_filter::<DailyLimitReset>()
        }
        ///Creates a new event filter for the [`DailyLimitUpdated`] event.
        pub fn DailyLimitUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitUpdated, N> {
            self.event_filter::<DailyLimitUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
