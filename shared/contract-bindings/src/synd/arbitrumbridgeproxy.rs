/**

Generated by the following Solidity interface...
```solidity
interface ArbitrumBridgeProxy {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error BridgeCallFailed(string reason);
    error BridgeNotActive();
    error ExcessiveAmount();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    error UnauthorizedCaller();
    error ZeroAddress();
    error ZeroAmount();

    event ArbitrumConfigUpdated(address recipient, uint256 maxGas, uint256 gasPriceBid);
    event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
    event BridgeStatusUpdated(bool active);
    event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
    event DailyLimitReset(uint256 day, uint256 previousUsed);
    event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
    event EthWithdrawn(address indexed to, uint256 amount);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _recipient, uint256 _maxGas, uint256 _gasPriceBid);

    receive() external payable;

    function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
    function BRIDGE_CALLER_ROLE() external view returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function bridgeActive() external view returns (bool);
    function bridgeName() external view returns (string memory);
    function bridgeTarget() external view returns (address);
    function calculateEthValue(uint256 _maxGas, uint256 _gasPriceBid) external pure returns (uint256 ethValue);
    function dailyLimit() external view returns (uint256);
    function dailyUsed() external view returns (uint256);
    function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
    function gasPriceBid() external view returns (uint256);
    function getArbitrumConfig() external view returns (address recipientAddr, uint256 maxGasLimit, uint256 gasPriceBidAmount);
    function getBridgeInfo() external view returns (string memory name, address target, bool active);
    function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function lastResetDay() external view returns (uint256);
    function maxGas() external view returns (uint256);
    function maxSingleTransfer() external view returns (uint256);
    function maxSubmissionCost() external view returns (uint256);
    function recipient() external view returns (address);
    function recoverTokens(address token, uint256 amount, address to) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function setArbitrumConfig(address _recipient, uint256 _maxGas, uint256 _gasPriceBid) external;
    function setBridgeActive(bool active) external;
    function setBridgeTarget(address target) external;
    function setDailyLimit(uint256 limit) external;
    function setMaxSingleTransfer(uint256 amount) external;
    function setMaxSubmissionCost(uint256 _maxSubmissionCost) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function withdrawEth(address payable to, uint256 amount) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_bridgeTarget",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxSingleTransfer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_dailyLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "BRIDGE_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BRIDGE_CALLER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeName",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeTarget",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEthValue",
    "inputs": [
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "ethValue",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "dailyLimit",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "dailyUsed",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "executeBridge",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dynamicData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "gasPriceBid",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getArbitrumConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "recipientAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "maxGasLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBidAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeInfo",
    "inputs": [],
    "outputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getDailyUsage",
    "inputs": [],
    "outputs": [
      {
        "name": "used",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "remaining",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastResetDay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxGas",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxSingleTransfer",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxSubmissionCost",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recipient",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recoverTokens",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setArbitrumConfig",
    "inputs": [
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeActive",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeTarget",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDailyLimit",
    "inputs": [
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxSingleTransfer",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxSubmissionCost",
    "inputs": [
      {
        "name": "_maxSubmissionCost",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawEth",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address payable"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ArbitrumConfigUpdated",
    "inputs": [
      {
        "name": "recipient",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "maxGas",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeExecuted",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeStatusUpdated",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeTargetUpdated",
    "inputs": [
      {
        "name": "oldTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitReset",
    "inputs": [
      {
        "name": "day",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "previousUsed",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitUpdated",
    "inputs": [
      {
        "name": "oldLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EthWithdrawn",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeCallFailed",
    "inputs": [
      {
        "name": "reason",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExcessiveAmount",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeERC20FailedOperation",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnauthorizedCaller",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbitrumBridgeProxy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461003957610023610014610187565b96959095949194939293610320565b61002b61003e565b612b826109b88239612b8290f35b610044565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007090610048565b810190811060018060401b0382111761008857604052565b610052565b906100a061009961003e565b9283610066565b565b5f80fd5b60018060a01b031690565b6100ba906100a6565b90565b6100c6816100b1565b036100cd57565b5f80fd5b905051906100de826100bd565b565b90565b6100ec816100e0565b036100f357565b5f80fd5b90505190610104826100e3565b565b9190610100838203126101825761011f815f85016100d1565b9261012d82602083016100d1565b9261013b83604084016100d1565b9261014981606085016100f7565b9261015782608083016100f7565b9261017f6101688460a085016100d1565b936101768160c086016100f7565b9360e0016100f7565b90565b6100a2565b6101a561353a8038038061019a8161008d565b928339810190610106565b9091929394959697565b60018060401b0381116101cb576101c7602091610048565b0190565b610052565b906101e26101dd836101af565b61008d565b918252565b5f7f417262697472756d204272696467650000000000000000000000000000000000910152565b610218600f6101d0565b90610225602083016101e7565b565b61022f61020e565b90565b5f1b90565b9061024860018060a01b0391610232565b9181191691161790565b90565b61026961026461026e926100a6565b610252565b6100a6565b90565b61027a90610255565b90565b61028690610271565b90565b90565b906102a161029c6102a89261027d565b610289565b8254610237565b9055565b906102b85f1991610232565b9181191691161790565b6102d66102d16102db926100e0565b610252565b6100e0565b90565b90565b906102f66102f16102fd926102c2565b6102de565b82546102ac565b9055565b90565b61031861031361031d92610301565b610252565b6100e0565b90565b9061035b97969461034d946103549794610346949361033d610227565b919293946106f4565b600861028c565b60096102e1565b600a6102e1565b61037561036e66038d7ea4c68000610304565b600b6102e1565b565b90565b61038e61038961039392610377565b610252565b6100a6565b90565b61039f9061037a565b90565b5f0190565b90565b6103be6103b96103c392610377565b610232565b6103a7565b90565b6103cf5f6103aa565b90565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b5190565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610452575b602083101461044d57565b61041e565b91607f1691610442565b5f5260205f2090565b601f602091010490565b1b90565b9190600861048e9102916104885f198461046f565b9261046f565b9181191691161790565b91906104ae6104a96104b6936102c2565b6102de565b908354610473565b9055565b5f90565b6104d0916104ca6104ba565b91610498565b565b5b8181106104de575050565b806104eb5f6001936104be565b016104d3565b9190601f8111610501575b505050565b61050d6105329361045c565b90602061051984610465565b8301931061053a575b61052b90610465565b01906104d2565b5f80806104fc565b915061052b81929050610522565b1c90565b9061055c905f1990600802610548565b191690565b8161056b9161054c565b906002021790565b9061057d8161041a565b9060018060401b03821161063b5761059f826105998554610432565b856104f1565b602090601f83116001146105d3579180916105c2935f926105c7575b5050610561565b90555b565b90915001515f806105bb565b601f198316916105e28561045c565b925f5b81811061062357509160029391856001969410610609575b505050020190556105c5565b610619910151601f84169061054c565b90555f80806105fd565b919360206001819287870151815501950192016105e5565b610052565b9061064a91610573565b565b60a01b90565b9061066160ff60a01b9161064c565b9181191691161790565b151590565b6106799061066b565b90565b90565b9061069461068f61069b92610670565b61067c565b8254610652565b9055565b90565b6106b66106b16106bb9261069f565b610252565b6100e0565b90565b634e487b7160e01b5f52601260045260245ffd5b6106de6106e4916100e0565b916100e0565b9081156106ef570490565b6106be565b9094939192610701610820565b8161071c6107166107115f610396565b6100b1565b916100b1565b1480156107d2575b6107b6576107736107819461076b6107889861075d61077a9661074f6107486103c6565b82906108a6565b506107586103d2565b6108a6565b506107666103f6565b6108a6565b506007610640565b600261028c565b60036102e1565b60046102e1565b6107946001600261067f565b6107b46107ad426107a7620151806106a2565b906106d2565b60066102e1565b565b5f63d92e233d60e01b8152806107ce600482016103a2565b0390fd5b50856107ee6107e86107e35f610396565b6100b1565b916100b1565b14610724565b90565b61080b610806610810926107f4565b610252565b6100e0565b90565b61081d60016107f7565b90565b61083261082b610813565b60016102e1565b565b5f90565b610841906103a7565b90565b9061084e90610838565b5f5260205260405f2090565b906108649061027d565b5f5260205260405f2090565b9061087c60ff91610232565b9181191691161790565b9061089b6108966108a292610670565b61067c565b8254610870565b9055565b6108ae610834565b506108c36108bd82849061097d565b1561066b565b5f1461094b576108ea60016108e55f6108dd818690610844565b01859061085a565b610886565b906108f36109aa565b9061093061092a6109247f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610838565b9261027d565b9261027d565b9261093961003e565b80610943816103a2565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61096861096d91610951565b610956565b90565b61097a905461095c565b90565b6109a3915f61099861099e93610991610834565b5082610844565b0161085a565b610970565b90565b5f90565b6109b26109a6565b50339056fe60806040526004361015610015575b3661112e57005b61001f5f3561022e565b806301ffc9a7146102295780630e1508d9146102245780631033b4cc1461021f578063118c38c71461021a5780631259a5c81461021557806318b68b8c146102105780631b9a91a41461020b578063248a9ca3146102065780632f2ff15d146102015780633462fac3146101fc57806336568abe146101f757806336b089d8146101f25780634a65855a146101ed578063501d815c146101e85780635a042545146101e35780635ab1d61c146101de5780635d942ac1146101d957806361b0a56e146101d457806363221490146101cf57806365d7a3c9146101ca57806366d003ac146101c557806367eeba0c146101c05780636bcc8c14146101bb57806370123fee146101b657806391d14854146101b1578063a217fddf146101ac578063b20d30a9146101a7578063c9f5b63e146101a2578063caed5c7f1461019d578063d547741f14610198578063ead93c8f14610193578063ede7cebd1461018e5763fb8c4b510361000e576110f6565b61108c565b611022565b610fb2565b610f7e565b610f0f565b610ecd565b610e98565b610e27565b610df2565b610db0565b610d5d565b610d19565b610c8f565b610a6f565b610a3b565b6109cc565b61098a565b610916565b6108c3565b61087e565b61081c565b6107d9565b6107a4565b610741565b6106df565b61066a565b6105d7565b6104ba565b610476565b6103ed565b610364565b6102ba565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61025b81610246565b0361026257565b5f80fd5b9050359061027382610252565b565b9060208282031261028e5761028b915f01610266565b90565b61023e565b151590565b6102a190610293565b9052565b91906102b8905f60208501940190610298565b565b346102ea576102e66102d56102d0366004610275565b611136565b6102dd610234565b918291826102a5565b0390f35b61023a565b5f9103126102f957565b61023e565b60018060a01b031690565b610312906102fe565b90565b61031e90610309565b9052565b90565b61032e90610322565b9052565b60409061035b610362949695939661035160608401985f850190610315565b6020830190610325565b0190610325565b565b34610397576103743660046102ef565b61039361037f6111c5565b61038a939193610234565b93849384610332565b0390f35b61023a565b1c90565b90565b6103b39060086103b8930261039c565b6103a0565b90565b906103c691546103a3565b90565b6103d560055f906103bb565b90565b91906103eb905f60208501940190610325565b565b3461041d576103fd3660046102ef565b6104196104086103c9565b610410610234565b918291826103d8565b0390f35b61023a565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61044e610422565b90565b90565b61045d90610451565b9052565b9190610474905f60208501940190610454565b565b346104a6576104863660046102ef565b6104a2610491610446565b610499610234565b91829182610461565b0390f35b61023a565b6104b760065f906103bb565b90565b346104ea576104ca3660046102ef565b6104e66104d56104ab565b6104dd610234565b918291826103d8565b0390f35b61023a565b6104f881610309565b036104ff57565b5f80fd5b90503590610510826104ef565b565b61051b81610322565b0361052257565b5f80fd5b9050359061053382610512565b565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561057b5781359167ffffffffffffffff831161057657602001926001830284011161057157565b61053d565b610539565b610535565b916060838303126105cd57610597825f8501610503565b926105a58360208301610526565b92604082013567ffffffffffffffff81116105c8576105c49201610541565b9091565b610242565b61023e565b5f0190565b34610609576105f36105ea366004610580565b929190916115ac565b6105fb610234565b80610605816105d2565b0390f35b61023a565b610617906102fe565b90565b6106238161060e565b0361062a57565b5f80fd5b9050359061063b8261061a565b565b91906040838203126106655780610659610662925f860161062e565b93602001610526565b90565b61023e565b346106995761068361067d36600461063d565b90611946565b61068b610234565b80610695816105d2565b0390f35b61023a565b6106a781610451565b036106ae57565b5f80fd5b905035906106bf8261069e565b565b906020828203126106da576106d7915f016106b2565b90565b61023e565b3461070f5761070b6106fa6106f53660046106c1565b61199c565b610702610234565b91829182610461565b0390f35b61023a565b919060408382031261073c5780610730610739925f86016106b2565b93602001610503565b90565b61023e565b346107705761075a610754366004610714565b906119e7565b610762610234565b8061076c816105d2565b0390f35b61023a565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b6107a1610775565b90565b346107d4576107b43660046102ef565b6107d06107bf610799565b6107c7610234565b91829182610461565b0390f35b61023a565b34610808576107f26107ec366004610714565b906119f3565b6107fa610234565b80610804816105d2565b0390f35b61023a565b61081960035f906103bb565b90565b3461084c5761082c3660046102ef565b61084861083761080d565b61083f610234565b918291826103d8565b0390f35b61023a565b9190604083820312610879578061086d610876925f8601610526565b93602001610526565b90565b61023e565b346108af576108ab61089a610894366004610851565b90611a70565b6108a2610234565b918291826103d8565b0390f35b61023a565b6108c060095f906103bb565b90565b346108f3576108d33660046102ef565b6108ef6108de6108b4565b6108e6610234565b918291826103d8565b0390f35b61023a565b906020828203126109115761090e915f01610526565b90565b61023e565b346109445761092e6109293660046108f8565b611aae565b610936610234565b80610940816105d2565b0390f35b61023a565b61095281610293565b0361095957565b5f80fd5b9050359061096a82610949565b565b9060208282031261098557610982915f0161095d565b90565b61023e565b346109b8576109a261099d36600461096c565b611b68565b6109aa610234565b806109b4816105d2565b0390f35b61023a565b6109c9600a5f906103bb565b90565b346109fc576109dc3660046102ef565b6109f86109e76109bd565b6109ef610234565b918291826103d8565b0390f35b61023a565b9091606082840312610a3657610a33610a1c845f8501610503565b93610a2a8160208601610526565b93604001610503565b90565b61023e565b34610a6a57610a54610a4e366004610a01565b91611be4565b610a5c610234565b80610a66816105d2565b0390f35b61023a565b34610a9d57610a87610a823660046108f8565b611c19565b610a8f610234565b80610a99816105d2565b0390f35b61023a565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610ae9575b6020831014610ae457565b610ab5565b91607f1691610ad9565b60209181520190565b5f5260205f2090565b905f9291805490610b1f610b1883610ac9565b8094610af3565b916001811690815f14610b765750600114610b3a575b505050565b610b479192939450610afc565b915f925b818410610b5e57505001905f8080610b35565b60018160209295939554848601520191019290610b4b565b92949550505060ff19168252151560200201905f8080610b35565b90610b9b91610b05565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610bc690610b9e565b810190811067ffffffffffffffff821117610be057604052565b610ba8565b90610c05610bfe92610bf5610234565b93848092610b91565b0383610bbc565b565b905f10610c1a57610c1790610be5565b90565b610aa2565b610c2b60075f90610c07565b90565b5190565b60209181520190565b90825f9392825e0152565b610c65610c6e602093610c7393610c5c81610c2e565b93848093610c32565b95869101610c3b565b610b9e565b0190565b610c8c9160208201915f818403910152610c46565b90565b34610cbf57610c9f3660046102ef565b610cbb610caa610c1f565b610cb2610234565b91829182610c77565b0390f35b61023a565b60018060a01b031690565b610cdf906008610ce4930261039c565b610cc4565b90565b90610cf29154610ccf565b90565b610d0160085f90610ce7565b90565b9190610d17905f60208501940190610315565b565b34610d4957610d293660046102ef565b610d45610d34610cf5565b610d3c610234565b91829182610d04565b0390f35b61023a565b610d5a60045f906103bb565b90565b34610d8d57610d6d3660046102ef565b610d89610d78610d4e565b610d80610234565b918291826103d8565b0390f35b61023a565b90602082820312610dab57610da8915f01610503565b90565b61023e565b34610dde57610dc8610dc3366004610d92565b611d1a565b610dd0610234565b80610dda816105d2565b0390f35b61023a565b610def600b5f906103bb565b90565b34610e2257610e023660046102ef565b610e1e610e0d610de3565b610e15610234565b918291826103d8565b0390f35b61023a565b34610e5857610e54610e43610e3d366004610714565b90611d5c565b610e4b610234565b918291826102a5565b0390f35b61023a565b90565b5f1b90565b610e79610e74610e7e92610e5d565b610e60565b610451565b90565b610e8a5f610e65565b90565b610e95610e81565b90565b34610ec857610ea83660046102ef565b610ec4610eb3610e8d565b610ebb610234565b91829182610461565b0390f35b61023a565b34610efb57610ee5610ee03660046108f8565b611e14565b610eed610234565b80610ef7816105d2565b0390f35b61023a565b610f0c60025f90610ce7565b90565b34610f3f57610f1f3660046102ef565b610f3b610f2a610f00565b610f32610234565b91829182610d04565b0390f35b61023a565b9091606082840312610f7957610f76610f5f845f8501610503565b93610f6d8160208601610526565b93604001610526565b90565b61023e565b34610fad57610f97610f91366004610f44565b91611e9e565b610f9f610234565b80610fa9816105d2565b0390f35b61023a565b34610fe157610fcb610fc5366004610714565b90611ed5565b610fd3610234565b80610fdd816105d2565b0390f35b61023a565b60ff1690565b610ffc906008611001930261039c565b610fe6565b90565b9061100f9154610fec565b90565b61101f6002601490611004565b90565b34611052576110323660046102ef565b61104e61103d611012565b611045610234565b918291826102a5565b0390f35b61023a565b60409061108361107861108a9597969460608401908482035f860152610c46565b966020830190610315565b0190610298565b565b346110bf5761109c3660046102ef565b6110bb6110a7611ef2565b6110b2939193610234565b93849384611057565b0390f35b61023a565b6040906110ed6110f494969593966110e360608401985f850190610325565b6020830190610325565b0190610325565b565b34611129576111063660046102ef565b611125611111611f57565b61111c939193610234565b938493846110c4565b0390f35b61023a565b5f80fd5b5f90565b61113e611132565b5080611159611153637965db0b60e01b610246565b91610246565b14908115611166575b5090565b6111709150611fe5565b5f611162565b5f90565b5f90565b5f1c90565b61118f6111949161117e565b610cc4565b90565b6111a19054611183565b90565b6111b06111b59161117e565b6103a0565b90565b6111c290546111a4565b90565b6111cd611176565b506111d661117a565b506111df61117a565b506111ea6008611197565b6111f460096111b8565b916111ff600a6111b8565b91929190565b90611219939291611214612037565b61124a565b6112216120bb565b565b60a01c90565b61123561123a91611223565b610fe6565b90565b6112479054611229565b90565b92919061126061125a600261123d565b15610293565b61126f5761126d9361128b565b565b5f633df5105960e11b815280611287600482016105d2565b0390fd5b9291906112a96112a361129c610775565b3390611d5c565b15610293565b6112b8576112b693611401565b565b5f635c427cd960e01b8152806112d0600482016105d2565b0390fd5b90565b6112eb6112e66112f092610e5d565b6112d4565b6102fe565b90565b6112fc906112d7565b90565b61131361130e61131892610e5d565b6112d4565b610322565b90565b634e487b7160e01b5f52601160045260245ffd5b61133e61134491939293610322565b92610322565b820180921161134f57565b61131b565b61136861136361136d926102fe565b6112d4565b6102fe565b90565b61137990611354565b90565b61138590611370565b90565b61139190611354565b90565b61139d90611388565b90565b906113ac5f1991610e60565b9181191691161790565b6113ca6113c56113cf92610322565b6112d4565b610322565b90565b90565b906113ea6113e56113f1926113b6565b6113d2565b82546113a0565b9055565b6113fe90611388565b90565b919290928261142061141a6114155f6112f3565b610309565b91610309565b1461159057836114386114325f6112ff565b91610322565b14611574578361145961145361144e60036111b8565b610322565b91610322565b1161155857611466612124565b61147a61147360056111b8565b859061132f565b61149561148f61148a60046111b8565b610322565b91610322565b1161153c576114c7916114bc6114aa8561137c565b336114b430611394565b908892612230565b8391859091926124b2565b6114e46114dd836114d860056111b8565b61132f565b60056113d5565b6114ee6002611197565b9061153761152561151f7f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8936113f5565b936113f5565b9361152e610234565b918291826103d8565b0390a3565b5f631c345a2f60e21b815280611554600482016105d2565b0390fd5b5f631c345a2f60e21b815280611570600482016105d2565b0390fd5b5f631f2a200560e01b81528061158c600482016105d2565b0390fd5b5f63d92e233d60e01b8152806115a8600482016105d2565b0390fd5b906115b8939291611205565b565b906115d4916115cf6115ca610422565b6126ce565b611883565b565b6115df90611388565b90565b60207f7300000000000000000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a207a65726f206164647265735f8201520152565b61163c6021604092610c32565b611645816115e2565b0190565b61165e9060208101905f81830391015261162f565b90565b1561166857565b611670610234565b62461bcd60e51b81528061168660048201611649565b0390fd5b61169390611388565b90565b60207f742062616c616e63650000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20696e73756666696369656e5f8201520152565b6116f06029604092610c32565b6116f981611696565b0190565b6117129060208101905f8183039101526116e3565b90565b1561171c57565b611724610234565b62461bcd60e51b81528061173a600482016116fd565b0390fd5b905090565b61174e5f809261173e565b0190565b61175b90611743565b90565b9061177161176a610234565b9283610bbc565b565b67ffffffffffffffff81116117915761178d602091610b9e565b0190565b610ba8565b906117a86117a383611773565b61175e565b918252565b606090565b3d5f146117cd576117c23d611796565b903d5f602084013e5b565b6117d56117ad565b906117cb565b60207f72206661696c6564000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20455448207472616e7366655f8201520152565b6118356028604092610c32565b61183e816117db565b0190565b6118579060208101905f818303910152611828565b90565b1561186157565b611869610234565b62461bcd60e51b81528061187f60048201611842565b0390fd5b6118a8816118a161189b6118965f6112f3565b610309565b916115d6565b1415611661565b6118ce826118c76118c16118bb3061168a565b31610322565b91610322565b1115611715565b6119025f806118dc846115d6565b856118e5610234565b90816118f081611752565b03925af16118fc6117b2565b5061185a565b61194161192f7f8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b926115d6565b92611938610234565b918291826103d8565b0390a2565b90611950916115ba565b565b5f90565b61195f90610451565b90565b9061196c90611956565b5f5260205260405f2090565b90565b61198761198c9161117e565b611978565b90565b611999905461197b565b90565b60016119b46119ba926119ad611952565b505f611962565b0161198f565b90565b906119d8916119d36119ce8261199c565b6126ce565b6119da565b565b906119e491612718565b50565b906119f1916119bd565b565b9080611a0e611a08611a036127c3565b610309565b91610309565b03611a1f57611a1c916127d0565b50565b5f63334bd91960e11b815280611a37600482016105d2565b0390fd5b611a4a611a5091939293610322565b92610322565b91611a5c838202610322565b928184041490151715611a6b57565b61131b565b90611a8391611a7d61117a565b50611a3b565b90565b611a9f90611a9a611a95610422565b6126ce565b611aa1565b565b611aac90600b6113d5565b565b611ab790611a86565b565b611ad290611acd611ac8610422565b6126ce565b611b22565b565b60a01b90565b90611ae960ff60a01b91611ad4565b9181191691161790565b611afc90610293565b90565b90565b90611b17611b12611b1e92611af3565b611aff565b8254611ada565b9055565b611b2d816002611b02565b611b637fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d591611b5a610234565b918291826102a5565b0390a1565b611b7190611ab9565b565b90611b8e9291611b89611b84610e81565b6126ce565b611b90565b565b919081611bad611ba7611ba25f6112f3565b610309565b91610309565b14611bc857611bbe611bc69361137c565b919091612894565b565b5f63d92e233d60e01b815280611be0600482016105d2565b0390fd5b90611bef9291611b73565b565b611c0a90611c05611c00610422565b6126ce565b611c0c565b565b611c179060036113d5565b565b611c2290611bf1565b565b611c3d90611c38611c33610422565b6126ce565b611c7d565b565b90611c5060018060a01b0391610e60565b9181191691161790565b90565b90611c72611c6d611c79926113f5565b611c5a565b8254611c3f565b9055565b80611c98611c92611c8d5f6112f3565b610309565b91610309565b14611cfe57611ca76002611197565b611cb2826002611c5d565b90611ce6611ce07fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069936113f5565b916113f5565b91611cef610234565b80611cf9816105d2565b0390a3565b5f63d92e233d60e01b815280611d16600482016105d2565b0390fd5b611d2390611c24565b565b90611d2f906113f5565b5f5260205260405f2090565b611d47611d4c9161117e565b610fe6565b90565b611d599054611d3b565b90565b611d82915f611d77611d7d93611d70611132565b5082611962565b01611d25565b611d4f565b90565b611d9e90611d99611d94610422565b6126ce565b611dc3565b565b916020611dc1929493611dba60408201965f830190610325565b0190610325565b565b611dcd60046111b8565b611dd88260046113d5565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf91611e0f611e06610234565b92839283611da0565b0390a1565b611e1d90611d85565b565b90611e3a9291611e35611e30610422565b6126ce565b611e3c565b565b919091611e4a816008611c5d565b611e558360096113d5565b611e6082600a6113d5565b919091611e997fb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da320093611e90610234565b93849384610332565b0390a1565b90611ea99291611e1f565b565b90611ec691611ec1611ebc8261199c565b6126ce565b611ec8565b565b90611ed2916127d0565b50565b90611edf91611eab565b565b606090565b611eef90610be5565b90565b611efa611ee1565b50611f03611176565b50611f0c611132565b506007611f196002611197565b91611f2d611f27600261123d565b92611ee6565b929190565b611f41611f4791939293610322565b92610322565b8203918211611f5257565b61131b565b611f5f61117a565b50611f6861117a565b50611f7161117a565b50611f7c60056111b8565b611f8660046111b8565b91611f9160046111b8565b611fac611fa6611fa160056111b8565b610322565b91610322565b115f14611fd757611fd0611fc060046111b8565b611fca60056111b8565b90611f32565b5b91929190565b611fe05f6112ff565b611fd1565b611fed611132565b506120076120016301ffc9a760e01b610246565b91610246565b1490565b90565b61202261201d6120279261200b565b6112d4565b610322565b90565b612034600261200e565b90565b61204160016111b8565b61205a61205461204f61202a565b610322565b91610322565b146120735761207161206a61202a565b60016113d5565b565b5f633ee5aeb560e01b81528061208b600482016105d2565b0390fd5b90565b6120a66120a16120ab9261208f565b6112d4565b610322565b90565b6120b86001612092565b90565b6120cd6120c66120ae565b60016113d5565b565b90565b6120e66120e16120eb926120cf565b6112d4565b610322565b90565b634e487b7160e01b5f52601260045260245ffd5b61210e61211491610322565b91610322565b90811561211f570490565b6120ee565b61213a42612134620151806120d2565b90612102565b8061215661215061214b60066111b8565b610322565b91610322565b1161215f575b50565b806121c19161216e60056111b8565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab916121a461219b610234565b92839283611da0565b0390a16121ba6121b35f6112ff565b60056113d5565b60066113d5565b5f61215c565b6121d090611388565b90565b63ffffffff1690565b60e01b90565b6121f66121f16121fb926121d3565b6121dc565b610246565b90565b60409061222761222e949695939661221d60608401985f850190610315565b6020830190610315565b0190610325565b565b60049261226a61227e959361227993946122516323b872dd929491926121e2565b9361225a610234565b97889560208701908152016121fe565b60208201810382520383610bbc565b6128e2565b565b5090565b90916060828403126122b9576122b661229f845f850161062e565b936122ad8160208601610526565b93604001610526565b90565b61023e565b6122d66122d06122dc929593956115d6565b946113b6565b926113b6565b90565b6122e890611354565b90565b6122f4906122df565b90565b61230090611388565b90565b90505190612310826104ef565b565b9060208282031261232b57612328915f01612303565b90565b61023e565b612338610234565b3d5f823e3d90fd5b61234b5f8092610c32565b0190565b906123729161236560408201925f830190610325565b6020818303910152612340565b90565b5f80fd5b9092919261238e61238982611773565b61175e565b938185526020850190828401116123aa576123a892610c3b565b565b612375565b9080601f830112156123cd578160206123ca93519101612379565b90565b610535565b90602082820312612402575f82015167ffffffffffffffff81116123fd576123fa92016123af565b90565b610242565b61023e565b5190565b60209181520190565b61243361243c6020936124419361242a81612407565b9384809361240b565b95869101610c3b565b610b9e565b0190565b939461248e6124af98966124846124a29661247a612498969b9761247060e08c019d5f8d0190610315565b60208b0190610315565b6040890190610315565b6060870190610325565b6080850190610325565b60a0830190610325565b60c0818403910152612414565b90565b9290916124c0818390612280565b6124d26124cc5f6112ff565b91610322565b115f146126a0576124ee61257f94926124f49290810190612284565b916122be565b92919490945b94929161251b61250b858590611a3b565b612515600b6111b8565b9061132f565b926125396125288361137c565b6125326002611197565b88916129c6565b602061255561255061254b6002611197565b6122eb565b6122f7565b63bda009fe906125748592612568610234565b978894859384936121dc565b835260048301610d04565b03915afa801561269b575f966125af6126369261262b968a9161266d575b506125a78661137c565b9083916129c6565b6125d36125e26125bf600b6111b8565b6125c7610234565b9283916020830161234f565b60208201810382520382610bbc565b6125fc6125f76125f26002611197565b6122eb565b6122f7565b93634fb1a07b9794979495986126113061168a565b9b939091929361261f610234565b9c8d9b8c9a8b996121dc565b895260048901612445565b03925af1801561266857612648575b50565b612663903d805f833e61265b8183610bbc565b8101906123d2565b612645565b612330565b61268e915060203d8111612694575b6126868183610bbc565b810190612312565b5f61259d565b503d61267c565b612330565b50506126ac6008611197565b916126b760096111b8565b9061257f6126c5600a6111b8565b949294926124fa565b6126e0906126da6127c3565b90612aa5565b565b906126ee60ff91610e60565b9181191691161790565b9061270d61270861271492611af3565b611aff565b82546126e2565b9055565b612720611132565b5061273561272f828490611d5c565b15610293565b5f146127bd5761275c60016127575f61274f818690611962565b018590611d25565b6126f8565b906127656127c3565b906127a261279c6127967f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611956565b926113f5565b926113f5565b926127ab610234565b806127b5816105d2565b0390a4600190565b50505f90565b6127cb611176565b503390565b6127d8611132565b506127e4818390611d5c565b5f1461286b5761280a5f6128055f6127fd818690611962565b018590611d25565b6126f8565b906128136127c3565b9061285061284a6128447ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611956565b926113f5565b926113f5565b92612859610234565b80612863816105d2565b0390a4600190565b50505f90565b91602061289292949361288b60408201965f830190610315565b0190610325565b565b906128db6128e0936128cc600494936128b363a9059cbb9193916121e2565b926128bc610234565b9687946020860190815201612871565b60208201810382520383610bbc565b6128e2565b565b905f6020916128ef61117a565b506128f861117a565b50828151910182855af11561298b573d5f519061291d6129175f6112ff565b91610322565b145f14612971575061292e816121c7565b3b61294161293b5f6112ff565b91610322565b145b61294a5750565b61295661296d916121c7565b5f918291635274afe760e01b835260048301610d04565b0390fd5b61298461297e6001612092565b91610322565b1415612943565b6040513d5f823e3d90fd5b61299f906112ff565b9052565b9160206129c49294936129bd60408201965f830190610315565b0190612996565b565b9091612a096004916129fa63095ea7b36129e18793916121e2565b926129ea610234565b9586946020860190815201612871565b60208201810382520382610bbc565b90612a1e612a18828490612ae0565b15610293565b612a28575b505050565b612a756004612a7a94612a708491612a6163095ea7b3612a485f916121e2565b92612a51610234565b96879460208601908152016129a3565b60208201810382520383610bbc565b6128e2565b6128e2565b5f8080612a23565b916020612aa3929493612a9c60408201965f830190610315565b0190610454565b565b90612aba612ab4838390611d5c565b15610293565b612ac2575050565b612adc5f92839263e2517d3f60e01b845260048401612a82565b0390fd5b905f602091612aed611132565b50612af6611132565b50612aff61117a565b50612b0861117a565b50828151910182855af13d915f51919283612b24575b50505090565b90919250612b3a612b345f6112ff565b91610322565b145f14612b6857612b4b91506121c7565b3b612b5e612b585f6112ff565b91610322565b115b5f8080612b1e565b50612b7c612b766001612092565b91610322565b14612b6056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\09Wa\0#a\0\x14a\x01\x87V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x03 V[a\0+a\0>V[a+\x82a\t\xB8\x829a+\x82\x90\xF3[a\0DV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0p\x90a\0HV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x88W`@RV[a\0RV[\x90a\0\xA0a\0\x99a\0>V[\x92\x83a\0fV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xBA\x90a\0\xA6V[\x90V[a\0\xC6\x81a\0\xB1V[\x03a\0\xCDWV[_\x80\xFD[\x90PQ\x90a\0\xDE\x82a\0\xBDV[V[\x90V[a\0\xEC\x81a\0\xE0V[\x03a\0\xF3WV[_\x80\xFD[\x90PQ\x90a\x01\x04\x82a\0\xE3V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x01\x82Wa\x01\x1F\x81_\x85\x01a\0\xD1V[\x92a\x01-\x82` \x83\x01a\0\xD1V[\x92a\x01;\x83`@\x84\x01a\0\xD1V[\x92a\x01I\x81``\x85\x01a\0\xF7V[\x92a\x01W\x82`\x80\x83\x01a\0\xF7V[\x92a\x01\x7Fa\x01h\x84`\xA0\x85\x01a\0\xD1V[\x93a\x01v\x81`\xC0\x86\x01a\0\xF7V[\x93`\xE0\x01a\0\xF7V[\x90V[a\0\xA2V[a\x01\xA5a5:\x808\x03\x80a\x01\x9A\x81a\0\x8DV[\x92\x839\x81\x01\x90a\x01\x06V[\x90\x91\x92\x93\x94\x95\x96\x97V[`\x01\x80`@\x1B\x03\x81\x11a\x01\xCBWa\x01\xC7` \x91a\0HV[\x01\x90V[a\0RV[\x90a\x01\xE2a\x01\xDD\x83a\x01\xAFV[a\0\x8DV[\x91\x82RV[_\x7FArbitrum Bridge\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\x18`\x0Fa\x01\xD0V[\x90a\x02%` \x83\x01a\x01\xE7V[V[a\x02/a\x02\x0EV[\x90V[_\x1B\x90V[\x90a\x02H`\x01\x80`\xA0\x1B\x03\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x02ia\x02da\x02n\x92a\0\xA6V[a\x02RV[a\0\xA6V[\x90V[a\x02z\x90a\x02UV[\x90V[a\x02\x86\x90a\x02qV[\x90V[\x90V[\x90a\x02\xA1a\x02\x9Ca\x02\xA8\x92a\x02}V[a\x02\x89V[\x82Ta\x027V[\x90UV[\x90a\x02\xB8_\x19\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xD6a\x02\xD1a\x02\xDB\x92a\0\xE0V[a\x02RV[a\0\xE0V[\x90V[\x90V[\x90a\x02\xF6a\x02\xF1a\x02\xFD\x92a\x02\xC2V[a\x02\xDEV[\x82Ta\x02\xACV[\x90UV[\x90V[a\x03\x18a\x03\x13a\x03\x1D\x92a\x03\x01V[a\x02RV[a\0\xE0V[\x90V[\x90a\x03[\x97\x96\x94a\x03M\x94a\x03T\x97\x94a\x03F\x94\x93a\x03=a\x02'V[\x91\x92\x93\x94a\x06\xF4V[`\x08a\x02\x8CV[`\ta\x02\xE1V[`\na\x02\xE1V[a\x03ua\x03nf\x03\x8D~\xA4\xC6\x80\0a\x03\x04V[`\x0Ba\x02\xE1V[V[\x90V[a\x03\x8Ea\x03\x89a\x03\x93\x92a\x03wV[a\x02RV[a\0\xA6V[\x90V[a\x03\x9F\x90a\x03zV[\x90V[_\x01\x90V[\x90V[a\x03\xBEa\x03\xB9a\x03\xC3\x92a\x03wV[a\x022V[a\x03\xA7V[\x90V[a\x03\xCF_a\x03\xAAV[\x90V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04RW[` \x83\x10\x14a\x04MWV[a\x04\x1EV[\x91`\x7F\x16\x91a\x04BV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x04\x8E\x91\x02\x91a\x04\x88_\x19\x84a\x04oV[\x92a\x04oV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x04\xAEa\x04\xA9a\x04\xB6\x93a\x02\xC2V[a\x02\xDEV[\x90\x83Ta\x04sV[\x90UV[_\x90V[a\x04\xD0\x91a\x04\xCAa\x04\xBAV[\x91a\x04\x98V[V[[\x81\x81\x10a\x04\xDEWPPV[\x80a\x04\xEB_`\x01\x93a\x04\xBEV[\x01a\x04\xD3V[\x91\x90`\x1F\x81\x11a\x05\x01W[PPPV[a\x05\ra\x052\x93a\x04\\V[\x90` a\x05\x19\x84a\x04eV[\x83\x01\x93\x10a\x05:W[a\x05+\x90a\x04eV[\x01\x90a\x04\xD2V[_\x80\x80a\x04\xFCV[\x91Pa\x05+\x81\x92\x90Pa\x05\"V[\x1C\x90V[\x90a\x05\\\x90_\x19\x90`\x08\x02a\x05HV[\x19\x16\x90V[\x81a\x05k\x91a\x05LV[\x90`\x02\x02\x17\x90V[\x90a\x05}\x81a\x04\x1AV[\x90`\x01\x80`@\x1B\x03\x82\x11a\x06;Wa\x05\x9F\x82a\x05\x99\x85Ta\x042V[\x85a\x04\xF1V[` \x90`\x1F\x83\x11`\x01\x14a\x05\xD3W\x91\x80\x91a\x05\xC2\x93_\x92a\x05\xC7W[PPa\x05aV[\x90U[V[\x90\x91P\x01Q_\x80a\x05\xBBV[`\x1F\x19\x83\x16\x91a\x05\xE2\x85a\x04\\V[\x92_[\x81\x81\x10a\x06#WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x06\tW[PPP\x02\x01\x90Ua\x05\xC5V[a\x06\x19\x91\x01Q`\x1F\x84\x16\x90a\x05LV[\x90U_\x80\x80a\x05\xFDV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x05\xE5V[a\0RV[\x90a\x06J\x91a\x05sV[V[`\xA0\x1B\x90V[\x90a\x06a`\xFF`\xA0\x1B\x91a\x06LV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x06y\x90a\x06kV[\x90V[\x90V[\x90a\x06\x94a\x06\x8Fa\x06\x9B\x92a\x06pV[a\x06|V[\x82Ta\x06RV[\x90UV[\x90V[a\x06\xB6a\x06\xB1a\x06\xBB\x92a\x06\x9FV[a\x02RV[a\0\xE0V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x06\xDEa\x06\xE4\x91a\0\xE0V[\x91a\0\xE0V[\x90\x81\x15a\x06\xEFW\x04\x90V[a\x06\xBEV[\x90\x94\x93\x91\x92a\x07\x01a\x08 V[\x81a\x07\x1Ca\x07\x16a\x07\x11_a\x03\x96V[a\0\xB1V[\x91a\0\xB1V[\x14\x80\x15a\x07\xD2W[a\x07\xB6Wa\x07sa\x07\x81\x94a\x07ka\x07\x88\x98a\x07]a\x07z\x96a\x07Oa\x07Ha\x03\xC6V[\x82\x90a\x08\xA6V[Pa\x07Xa\x03\xD2V[a\x08\xA6V[Pa\x07fa\x03\xF6V[a\x08\xA6V[P`\x07a\x06@V[`\x02a\x02\x8CV[`\x03a\x02\xE1V[`\x04a\x02\xE1V[a\x07\x94`\x01`\x02a\x06\x7FV[a\x07\xB4a\x07\xADBa\x07\xA7b\x01Q\x80a\x06\xA2V[\x90a\x06\xD2V[`\x06a\x02\xE1V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x07\xCE`\x04\x82\x01a\x03\xA2V[\x03\x90\xFD[P\x85a\x07\xEEa\x07\xE8a\x07\xE3_a\x03\x96V[a\0\xB1V[\x91a\0\xB1V[\x14a\x07$V[\x90V[a\x08\x0Ba\x08\x06a\x08\x10\x92a\x07\xF4V[a\x02RV[a\0\xE0V[\x90V[a\x08\x1D`\x01a\x07\xF7V[\x90V[a\x082a\x08+a\x08\x13V[`\x01a\x02\xE1V[V[_\x90V[a\x08A\x90a\x03\xA7V[\x90V[\x90a\x08N\x90a\x088V[_R` R`@_ \x90V[\x90a\x08d\x90a\x02}V[_R` R`@_ \x90V[\x90a\x08|`\xFF\x91a\x022V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08\x9Ba\x08\x96a\x08\xA2\x92a\x06pV[a\x06|V[\x82Ta\x08pV[\x90UV[a\x08\xAEa\x084V[Pa\x08\xC3a\x08\xBD\x82\x84\x90a\t}V[\x15a\x06kV[_\x14a\tKWa\x08\xEA`\x01a\x08\xE5_a\x08\xDD\x81\x86\x90a\x08DV[\x01\x85\x90a\x08ZV[a\x08\x86V[\x90a\x08\xF3a\t\xAAV[\x90a\t0a\t*a\t$\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x088V[\x92a\x02}V[\x92a\x02}V[\x92a\t9a\0>V[\x80a\tC\x81a\x03\xA2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\tha\tm\x91a\tQV[a\tVV[\x90V[a\tz\x90Ta\t\\V[\x90V[a\t\xA3\x91_a\t\x98a\t\x9E\x93a\t\x91a\x084V[P\x82a\x08DV[\x01a\x08ZV[a\tpV[\x90V[_\x90V[a\t\xB2a\t\xA6V[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x11.W\0[a\0\x1F_5a\x02.V[\x80c\x01\xFF\xC9\xA7\x14a\x02)W\x80c\x0E\x15\x08\xD9\x14a\x02$W\x80c\x103\xB4\xCC\x14a\x02\x1FW\x80c\x11\x8C8\xC7\x14a\x02\x1AW\x80c\x12Y\xA5\xC8\x14a\x02\x15W\x80c\x18\xB6\x8B\x8C\x14a\x02\x10W\x80c\x1B\x9A\x91\xA4\x14a\x02\x0BW\x80c$\x8A\x9C\xA3\x14a\x02\x06W\x80c//\xF1]\x14a\x02\x01W\x80c4b\xFA\xC3\x14a\x01\xFCW\x80c6V\x8A\xBE\x14a\x01\xF7W\x80c6\xB0\x89\xD8\x14a\x01\xF2W\x80cJe\x85Z\x14a\x01\xEDW\x80cP\x1D\x81\\\x14a\x01\xE8W\x80cZ\x04%E\x14a\x01\xE3W\x80cZ\xB1\xD6\x1C\x14a\x01\xDEW\x80c]\x94*\xC1\x14a\x01\xD9W\x80ca\xB0\xA5n\x14a\x01\xD4W\x80cc\"\x14\x90\x14a\x01\xCFW\x80ce\xD7\xA3\xC9\x14a\x01\xCAW\x80cf\xD0\x03\xAC\x14a\x01\xC5W\x80cg\xEE\xBA\x0C\x14a\x01\xC0W\x80ck\xCC\x8C\x14\x14a\x01\xBBW\x80cp\x12?\xEE\x14a\x01\xB6W\x80c\x91\xD1HT\x14a\x01\xB1W\x80c\xA2\x17\xFD\xDF\x14a\x01\xACW\x80c\xB2\r0\xA9\x14a\x01\xA7W\x80c\xC9\xF5\xB6>\x14a\x01\xA2W\x80c\xCA\xED\\\x7F\x14a\x01\x9DW\x80c\xD5Gt\x1F\x14a\x01\x98W\x80c\xEA\xD9<\x8F\x14a\x01\x93W\x80c\xED\xE7\xCE\xBD\x14a\x01\x8EWc\xFB\x8CKQ\x03a\0\x0EWa\x10\xF6V[a\x10\x8CV[a\x10\"V[a\x0F\xB2V[a\x0F~V[a\x0F\x0FV[a\x0E\xCDV[a\x0E\x98V[a\x0E'V[a\r\xF2V[a\r\xB0V[a\r]V[a\r\x19V[a\x0C\x8FV[a\noV[a\n;V[a\t\xCCV[a\t\x8AV[a\t\x16V[a\x08\xC3V[a\x08~V[a\x08\x1CV[a\x07\xD9V[a\x07\xA4V[a\x07AV[a\x06\xDFV[a\x06jV[a\x05\xD7V[a\x04\xBAV[a\x04vV[a\x03\xEDV[a\x03dV[a\x02\xBAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02[\x81a\x02FV[\x03a\x02bWV[_\x80\xFD[\x90P5\x90a\x02s\x82a\x02RV[V[\x90` \x82\x82\x03\x12a\x02\x8EWa\x02\x8B\x91_\x01a\x02fV[\x90V[a\x02>V[\x15\x15\x90V[a\x02\xA1\x90a\x02\x93V[\x90RV[\x91\x90a\x02\xB8\x90_` \x85\x01\x94\x01\x90a\x02\x98V[V[4a\x02\xEAWa\x02\xE6a\x02\xD5a\x02\xD06`\x04a\x02uV[a\x116V[a\x02\xDDa\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xF3[a\x02:V[_\x91\x03\x12a\x02\xF9WV[a\x02>V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x12\x90a\x02\xFEV[\x90V[a\x03\x1E\x90a\x03\tV[\x90RV[\x90V[a\x03.\x90a\x03\"V[\x90RV[`@\x90a\x03[a\x03b\x94\x96\x95\x93\x96a\x03Q``\x84\x01\x98_\x85\x01\x90a\x03\x15V[` \x83\x01\x90a\x03%V[\x01\x90a\x03%V[V[4a\x03\x97Wa\x03t6`\x04a\x02\xEFV[a\x03\x93a\x03\x7Fa\x11\xC5V[a\x03\x8A\x93\x91\x93a\x024V[\x93\x84\x93\x84a\x032V[\x03\x90\xF3[a\x02:V[\x1C\x90V[\x90V[a\x03\xB3\x90`\x08a\x03\xB8\x93\x02a\x03\x9CV[a\x03\xA0V[\x90V[\x90a\x03\xC6\x91Ta\x03\xA3V[\x90V[a\x03\xD5`\x05_\x90a\x03\xBBV[\x90V[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03%V[V[4a\x04\x1DWa\x03\xFD6`\x04a\x02\xEFV[a\x04\x19a\x04\x08a\x03\xC9V[a\x04\x10a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x04Na\x04\"V[\x90V[\x90V[a\x04]\x90a\x04QV[\x90RV[\x91\x90a\x04t\x90_` \x85\x01\x94\x01\x90a\x04TV[V[4a\x04\xA6Wa\x04\x866`\x04a\x02\xEFV[a\x04\xA2a\x04\x91a\x04FV[a\x04\x99a\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[a\x04\xB7`\x06_\x90a\x03\xBBV[\x90V[4a\x04\xEAWa\x04\xCA6`\x04a\x02\xEFV[a\x04\xE6a\x04\xD5a\x04\xABV[a\x04\xDDa\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[a\x04\xF8\x81a\x03\tV[\x03a\x04\xFFWV[_\x80\xFD[\x90P5\x90a\x05\x10\x82a\x04\xEFV[V[a\x05\x1B\x81a\x03\"V[\x03a\x05\"WV[_\x80\xFD[\x90P5\x90a\x053\x82a\x05\x12V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05{W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05vW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05qWV[a\x05=V[a\x059V[a\x055V[\x91``\x83\x83\x03\x12a\x05\xCDWa\x05\x97\x82_\x85\x01a\x05\x03V[\x92a\x05\xA5\x83` \x83\x01a\x05&V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC8Wa\x05\xC4\x92\x01a\x05AV[\x90\x91V[a\x02BV[a\x02>V[_\x01\x90V[4a\x06\tWa\x05\xF3a\x05\xEA6`\x04a\x05\x80V[\x92\x91\x90\x91a\x15\xACV[a\x05\xFBa\x024V[\x80a\x06\x05\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x06\x17\x90a\x02\xFEV[\x90V[a\x06#\x81a\x06\x0EV[\x03a\x06*WV[_\x80\xFD[\x90P5\x90a\x06;\x82a\x06\x1AV[V[\x91\x90`@\x83\x82\x03\x12a\x06eW\x80a\x06Ya\x06b\x92_\x86\x01a\x06.V[\x93` \x01a\x05&V[\x90V[a\x02>V[4a\x06\x99Wa\x06\x83a\x06}6`\x04a\x06=V[\x90a\x19FV[a\x06\x8Ba\x024V[\x80a\x06\x95\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x06\xA7\x81a\x04QV[\x03a\x06\xAEWV[_\x80\xFD[\x90P5\x90a\x06\xBF\x82a\x06\x9EV[V[\x90` \x82\x82\x03\x12a\x06\xDAWa\x06\xD7\x91_\x01a\x06\xB2V[\x90V[a\x02>V[4a\x07\x0FWa\x07\x0Ba\x06\xFAa\x06\xF56`\x04a\x06\xC1V[a\x19\x9CV[a\x07\x02a\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[\x91\x90`@\x83\x82\x03\x12a\x07<W\x80a\x070a\x079\x92_\x86\x01a\x06\xB2V[\x93` \x01a\x05\x03V[\x90V[a\x02>V[4a\x07pWa\x07Za\x07T6`\x04a\x07\x14V[\x90a\x19\xE7V[a\x07ba\x024V[\x80a\x07l\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x07\xA1a\x07uV[\x90V[4a\x07\xD4Wa\x07\xB46`\x04a\x02\xEFV[a\x07\xD0a\x07\xBFa\x07\x99V[a\x07\xC7a\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[4a\x08\x08Wa\x07\xF2a\x07\xEC6`\x04a\x07\x14V[\x90a\x19\xF3V[a\x07\xFAa\x024V[\x80a\x08\x04\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x08\x19`\x03_\x90a\x03\xBBV[\x90V[4a\x08LWa\x08,6`\x04a\x02\xEFV[a\x08Ha\x087a\x08\rV[a\x08?a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x91\x90`@\x83\x82\x03\x12a\x08yW\x80a\x08ma\x08v\x92_\x86\x01a\x05&V[\x93` \x01a\x05&V[\x90V[a\x02>V[4a\x08\xAFWa\x08\xABa\x08\x9Aa\x08\x946`\x04a\x08QV[\x90a\x1ApV[a\x08\xA2a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[a\x08\xC0`\t_\x90a\x03\xBBV[\x90V[4a\x08\xF3Wa\x08\xD36`\x04a\x02\xEFV[a\x08\xEFa\x08\xDEa\x08\xB4V[a\x08\xE6a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x90` \x82\x82\x03\x12a\t\x11Wa\t\x0E\x91_\x01a\x05&V[\x90V[a\x02>V[4a\tDWa\t.a\t)6`\x04a\x08\xF8V[a\x1A\xAEV[a\t6a\x024V[\x80a\t@\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\tR\x81a\x02\x93V[\x03a\tYWV[_\x80\xFD[\x90P5\x90a\tj\x82a\tIV[V[\x90` \x82\x82\x03\x12a\t\x85Wa\t\x82\x91_\x01a\t]V[\x90V[a\x02>V[4a\t\xB8Wa\t\xA2a\t\x9D6`\x04a\tlV[a\x1BhV[a\t\xAAa\x024V[\x80a\t\xB4\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\t\xC9`\n_\x90a\x03\xBBV[\x90V[4a\t\xFCWa\t\xDC6`\x04a\x02\xEFV[a\t\xF8a\t\xE7a\t\xBDV[a\t\xEFa\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x90\x91``\x82\x84\x03\x12a\n6Wa\n3a\n\x1C\x84_\x85\x01a\x05\x03V[\x93a\n*\x81` \x86\x01a\x05&V[\x93`@\x01a\x05\x03V[\x90V[a\x02>V[4a\njWa\nTa\nN6`\x04a\n\x01V[\x91a\x1B\xE4V[a\n\\a\x024V[\x80a\nf\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[4a\n\x9DWa\n\x87a\n\x826`\x04a\x08\xF8V[a\x1C\x19V[a\n\x8Fa\x024V[\x80a\n\x99\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\n\xE9W[` \x83\x10\x14a\n\xE4WV[a\n\xB5V[\x91`\x7F\x16\x91a\n\xD9V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x0B\x1Fa\x0B\x18\x83a\n\xC9V[\x80\x94a\n\xF3V[\x91`\x01\x81\x16\x90\x81_\x14a\x0BvWP`\x01\x14a\x0B:W[PPPV[a\x0BG\x91\x92\x93\x94Pa\n\xFCV[\x91_\x92[\x81\x84\x10a\x0B^WPP\x01\x90_\x80\x80a\x0B5V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x0BKV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x0B5V[\x90a\x0B\x9B\x91a\x0B\x05V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0B\xC6\x90a\x0B\x9EV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\xE0W`@RV[a\x0B\xA8V[\x90a\x0C\x05a\x0B\xFE\x92a\x0B\xF5a\x024V[\x93\x84\x80\x92a\x0B\x91V[\x03\x83a\x0B\xBCV[V[\x90_\x10a\x0C\x1AWa\x0C\x17\x90a\x0B\xE5V[\x90V[a\n\xA2V[a\x0C+`\x07_\x90a\x0C\x07V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0Cea\x0Cn` \x93a\x0Cs\x93a\x0C\\\x81a\x0C.V[\x93\x84\x80\x93a\x0C2V[\x95\x86\x91\x01a\x0C;V[a\x0B\x9EV[\x01\x90V[a\x0C\x8C\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0CFV[\x90V[4a\x0C\xBFWa\x0C\x9F6`\x04a\x02\xEFV[a\x0C\xBBa\x0C\xAAa\x0C\x1FV[a\x0C\xB2a\x024V[\x91\x82\x91\x82a\x0CwV[\x03\x90\xF3[a\x02:V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\xDF\x90`\x08a\x0C\xE4\x93\x02a\x03\x9CV[a\x0C\xC4V[\x90V[\x90a\x0C\xF2\x91Ta\x0C\xCFV[\x90V[a\r\x01`\x08_\x90a\x0C\xE7V[\x90V[\x91\x90a\r\x17\x90_` \x85\x01\x94\x01\x90a\x03\x15V[V[4a\rIWa\r)6`\x04a\x02\xEFV[a\rEa\r4a\x0C\xF5V[a\r<a\x024V[\x91\x82\x91\x82a\r\x04V[\x03\x90\xF3[a\x02:V[a\rZ`\x04_\x90a\x03\xBBV[\x90V[4a\r\x8DWa\rm6`\x04a\x02\xEFV[a\r\x89a\rxa\rNV[a\r\x80a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x90` \x82\x82\x03\x12a\r\xABWa\r\xA8\x91_\x01a\x05\x03V[\x90V[a\x02>V[4a\r\xDEWa\r\xC8a\r\xC36`\x04a\r\x92V[a\x1D\x1AV[a\r\xD0a\x024V[\x80a\r\xDA\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\r\xEF`\x0B_\x90a\x03\xBBV[\x90V[4a\x0E\"Wa\x0E\x026`\x04a\x02\xEFV[a\x0E\x1Ea\x0E\ra\r\xE3V[a\x0E\x15a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[4a\x0EXWa\x0ETa\x0ECa\x0E=6`\x04a\x07\x14V[\x90a\x1D\\V[a\x0EKa\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xF3[a\x02:V[\x90V[_\x1B\x90V[a\x0Eya\x0Eta\x0E~\x92a\x0E]V[a\x0E`V[a\x04QV[\x90V[a\x0E\x8A_a\x0EeV[\x90V[a\x0E\x95a\x0E\x81V[\x90V[4a\x0E\xC8Wa\x0E\xA86`\x04a\x02\xEFV[a\x0E\xC4a\x0E\xB3a\x0E\x8DV[a\x0E\xBBa\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[4a\x0E\xFBWa\x0E\xE5a\x0E\xE06`\x04a\x08\xF8V[a\x1E\x14V[a\x0E\xEDa\x024V[\x80a\x0E\xF7\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x0F\x0C`\x02_\x90a\x0C\xE7V[\x90V[4a\x0F?Wa\x0F\x1F6`\x04a\x02\xEFV[a\x0F;a\x0F*a\x0F\0V[a\x0F2a\x024V[\x91\x82\x91\x82a\r\x04V[\x03\x90\xF3[a\x02:V[\x90\x91``\x82\x84\x03\x12a\x0FyWa\x0Fva\x0F_\x84_\x85\x01a\x05\x03V[\x93a\x0Fm\x81` \x86\x01a\x05&V[\x93`@\x01a\x05&V[\x90V[a\x02>V[4a\x0F\xADWa\x0F\x97a\x0F\x916`\x04a\x0FDV[\x91a\x1E\x9EV[a\x0F\x9Fa\x024V[\x80a\x0F\xA9\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[4a\x0F\xE1Wa\x0F\xCBa\x0F\xC56`\x04a\x07\x14V[\x90a\x1E\xD5V[a\x0F\xD3a\x024V[\x80a\x0F\xDD\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[`\xFF\x16\x90V[a\x0F\xFC\x90`\x08a\x10\x01\x93\x02a\x03\x9CV[a\x0F\xE6V[\x90V[\x90a\x10\x0F\x91Ta\x0F\xECV[\x90V[a\x10\x1F`\x02`\x14\x90a\x10\x04V[\x90V[4a\x10RWa\x1026`\x04a\x02\xEFV[a\x10Na\x10=a\x10\x12V[a\x10Ea\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xF3[a\x02:V[`@\x90a\x10\x83a\x10xa\x10\x8A\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0CFV[\x96` \x83\x01\x90a\x03\x15V[\x01\x90a\x02\x98V[V[4a\x10\xBFWa\x10\x9C6`\x04a\x02\xEFV[a\x10\xBBa\x10\xA7a\x1E\xF2V[a\x10\xB2\x93\x91\x93a\x024V[\x93\x84\x93\x84a\x10WV[\x03\x90\xF3[a\x02:V[`@\x90a\x10\xEDa\x10\xF4\x94\x96\x95\x93\x96a\x10\xE3``\x84\x01\x98_\x85\x01\x90a\x03%V[` \x83\x01\x90a\x03%V[\x01\x90a\x03%V[V[4a\x11)Wa\x11\x066`\x04a\x02\xEFV[a\x11%a\x11\x11a\x1FWV[a\x11\x1C\x93\x91\x93a\x024V[\x93\x84\x93\x84a\x10\xC4V[\x03\x90\xF3[a\x02:V[_\x80\xFD[_\x90V[a\x11>a\x112V[P\x80a\x11Ya\x11Scye\xDB\x0B`\xE0\x1Ba\x02FV[\x91a\x02FV[\x14\x90\x81\x15a\x11fW[P\x90V[a\x11p\x91Pa\x1F\xE5V[_a\x11bV[_\x90V[_\x90V[_\x1C\x90V[a\x11\x8Fa\x11\x94\x91a\x11~V[a\x0C\xC4V[\x90V[a\x11\xA1\x90Ta\x11\x83V[\x90V[a\x11\xB0a\x11\xB5\x91a\x11~V[a\x03\xA0V[\x90V[a\x11\xC2\x90Ta\x11\xA4V[\x90V[a\x11\xCDa\x11vV[Pa\x11\xD6a\x11zV[Pa\x11\xDFa\x11zV[Pa\x11\xEA`\x08a\x11\x97V[a\x11\xF4`\ta\x11\xB8V[\x91a\x11\xFF`\na\x11\xB8V[\x91\x92\x91\x90V[\x90a\x12\x19\x93\x92\x91a\x12\x14a 7V[a\x12JV[a\x12!a \xBBV[V[`\xA0\x1C\x90V[a\x125a\x12:\x91a\x12#V[a\x0F\xE6V[\x90V[a\x12G\x90Ta\x12)V[\x90V[\x92\x91\x90a\x12`a\x12Z`\x02a\x12=V[\x15a\x02\x93V[a\x12oWa\x12m\x93a\x12\x8BV[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x12\x87`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x92\x91\x90a\x12\xA9a\x12\xA3a\x12\x9Ca\x07uV[3\x90a\x1D\\V[\x15a\x02\x93V[a\x12\xB8Wa\x12\xB6\x93a\x14\x01V[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x12\xD0`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90V[a\x12\xEBa\x12\xE6a\x12\xF0\x92a\x0E]V[a\x12\xD4V[a\x02\xFEV[\x90V[a\x12\xFC\x90a\x12\xD7V[\x90V[a\x13\x13a\x13\x0Ea\x13\x18\x92a\x0E]V[a\x12\xD4V[a\x03\"V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13>a\x13D\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x82\x01\x80\x92\x11a\x13OWV[a\x13\x1BV[a\x13ha\x13ca\x13m\x92a\x02\xFEV[a\x12\xD4V[a\x02\xFEV[\x90V[a\x13y\x90a\x13TV[\x90V[a\x13\x85\x90a\x13pV[\x90V[a\x13\x91\x90a\x13TV[\x90V[a\x13\x9D\x90a\x13\x88V[\x90V[\x90a\x13\xAC_\x19\x91a\x0E`V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\xCAa\x13\xC5a\x13\xCF\x92a\x03\"V[a\x12\xD4V[a\x03\"V[\x90V[\x90V[\x90a\x13\xEAa\x13\xE5a\x13\xF1\x92a\x13\xB6V[a\x13\xD2V[\x82Ta\x13\xA0V[\x90UV[a\x13\xFE\x90a\x13\x88V[\x90V[\x91\x92\x90\x92\x82a\x14 a\x14\x1Aa\x14\x15_a\x12\xF3V[a\x03\tV[\x91a\x03\tV[\x14a\x15\x90W\x83a\x148a\x142_a\x12\xFFV[\x91a\x03\"V[\x14a\x15tW\x83a\x14Ya\x14Sa\x14N`\x03a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11a\x15XWa\x14fa!$V[a\x14za\x14s`\x05a\x11\xB8V[\x85\x90a\x13/V[a\x14\x95a\x14\x8Fa\x14\x8A`\x04a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11a\x15<Wa\x14\xC7\x91a\x14\xBCa\x14\xAA\x85a\x13|V[3a\x14\xB40a\x13\x94V[\x90\x88\x92a\"0V[\x83\x91\x85\x90\x91\x92a$\xB2V[a\x14\xE4a\x14\xDD\x83a\x14\xD8`\x05a\x11\xB8V[a\x13/V[`\x05a\x13\xD5V[a\x14\xEE`\x02a\x11\x97V[\x90a\x157a\x15%a\x15\x1F\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x13\xF5V[\x93a\x13\xF5V[\x93a\x15.a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x15T`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x15p`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x15\x8C`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x15\xA8`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90a\x15\xB8\x93\x92\x91a\x12\x05V[V[\x90a\x15\xD4\x91a\x15\xCFa\x15\xCAa\x04\"V[a&\xCEV[a\x18\x83V[V[a\x15\xDF\x90a\x13\x88V[\x90V[` \x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: zero addres_\x82\x01R\x01RV[a\x16<`!`@\x92a\x0C2V[a\x16E\x81a\x15\xE2V[\x01\x90V[a\x16^\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16/V[\x90V[\x15a\x16hWV[a\x16pa\x024V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x86`\x04\x82\x01a\x16IV[\x03\x90\xFD[a\x16\x93\x90a\x13\x88V[\x90V[` \x7Ft balance\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: insufficien_\x82\x01R\x01RV[a\x16\xF0`)`@\x92a\x0C2V[a\x16\xF9\x81a\x16\x96V[\x01\x90V[a\x17\x12\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xE3V[\x90V[\x15a\x17\x1CWV[a\x17$a\x024V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17:`\x04\x82\x01a\x16\xFDV[\x03\x90\xFD[\x90P\x90V[a\x17N_\x80\x92a\x17>V[\x01\x90V[a\x17[\x90a\x17CV[\x90V[\x90a\x17qa\x17ja\x024V[\x92\x83a\x0B\xBCV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x17\x91Wa\x17\x8D` \x91a\x0B\x9EV[\x01\x90V[a\x0B\xA8V[\x90a\x17\xA8a\x17\xA3\x83a\x17sV[a\x17^V[\x91\x82RV[``\x90V[=_\x14a\x17\xCDWa\x17\xC2=a\x17\x96V[\x90=_` \x84\x01>[V[a\x17\xD5a\x17\xADV[\x90a\x17\xCBV[` \x7Fr failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: ETH transfe_\x82\x01R\x01RV[a\x185`(`@\x92a\x0C2V[a\x18>\x81a\x17\xDBV[\x01\x90V[a\x18W\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18(V[\x90V[\x15a\x18aWV[a\x18ia\x024V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\x7F`\x04\x82\x01a\x18BV[\x03\x90\xFD[a\x18\xA8\x81a\x18\xA1a\x18\x9Ba\x18\x96_a\x12\xF3V[a\x03\tV[\x91a\x15\xD6V[\x14\x15a\x16aV[a\x18\xCE\x82a\x18\xC7a\x18\xC1a\x18\xBB0a\x16\x8AV[1a\x03\"V[\x91a\x03\"V[\x11\x15a\x17\x15V[a\x19\x02_\x80a\x18\xDC\x84a\x15\xD6V[\x85a\x18\xE5a\x024V[\x90\x81a\x18\xF0\x81a\x17RV[\x03\x92Z\xF1a\x18\xFCa\x17\xB2V[Pa\x18ZV[a\x19Aa\x19/\x7F\x84U\xAEk\xE5\xD9/\x1D\xF1\xC3\xC1HC\x88\xE2G\xA3l~`\xD7 U\xAE!m\xBC%\x8F%}K\x92a\x15\xD6V[\x92a\x198a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xA2V[\x90a\x19P\x91a\x15\xBAV[V[_\x90V[a\x19_\x90a\x04QV[\x90V[\x90a\x19l\x90a\x19VV[_R` R`@_ \x90V[\x90V[a\x19\x87a\x19\x8C\x91a\x11~V[a\x19xV[\x90V[a\x19\x99\x90Ta\x19{V[\x90V[`\x01a\x19\xB4a\x19\xBA\x92a\x19\xADa\x19RV[P_a\x19bV[\x01a\x19\x8FV[\x90V[\x90a\x19\xD8\x91a\x19\xD3a\x19\xCE\x82a\x19\x9CV[a&\xCEV[a\x19\xDAV[V[\x90a\x19\xE4\x91a'\x18V[PV[\x90a\x19\xF1\x91a\x19\xBDV[V[\x90\x80a\x1A\x0Ea\x1A\x08a\x1A\x03a'\xC3V[a\x03\tV[\x91a\x03\tV[\x03a\x1A\x1FWa\x1A\x1C\x91a'\xD0V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x1A7`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[a\x1AJa\x1AP\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x91a\x1A\\\x83\x82\x02a\x03\"V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1AkWV[a\x13\x1BV[\x90a\x1A\x83\x91a\x1A}a\x11zV[Pa\x1A;V[\x90V[a\x1A\x9F\x90a\x1A\x9Aa\x1A\x95a\x04\"V[a&\xCEV[a\x1A\xA1V[V[a\x1A\xAC\x90`\x0Ba\x13\xD5V[V[a\x1A\xB7\x90a\x1A\x86V[V[a\x1A\xD2\x90a\x1A\xCDa\x1A\xC8a\x04\"V[a&\xCEV[a\x1B\"V[V[`\xA0\x1B\x90V[\x90a\x1A\xE9`\xFF`\xA0\x1B\x91a\x1A\xD4V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\xFC\x90a\x02\x93V[\x90V[\x90V[\x90a\x1B\x17a\x1B\x12a\x1B\x1E\x92a\x1A\xF3V[a\x1A\xFFV[\x82Ta\x1A\xDAV[\x90UV[a\x1B-\x81`\x02a\x1B\x02V[a\x1Bc\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x1BZa\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xA1V[a\x1Bq\x90a\x1A\xB9V[V[\x90a\x1B\x8E\x92\x91a\x1B\x89a\x1B\x84a\x0E\x81V[a&\xCEV[a\x1B\x90V[V[\x91\x90\x81a\x1B\xADa\x1B\xA7a\x1B\xA2_a\x12\xF3V[a\x03\tV[\x91a\x03\tV[\x14a\x1B\xC8Wa\x1B\xBEa\x1B\xC6\x93a\x13|V[\x91\x90\x91a(\x94V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1B\xE0`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90a\x1B\xEF\x92\x91a\x1BsV[V[a\x1C\n\x90a\x1C\x05a\x1C\0a\x04\"V[a&\xCEV[a\x1C\x0CV[V[a\x1C\x17\x90`\x03a\x13\xD5V[V[a\x1C\"\x90a\x1B\xF1V[V[a\x1C=\x90a\x1C8a\x1C3a\x04\"V[a&\xCEV[a\x1C}V[V[\x90a\x1CP`\x01\x80`\xA0\x1B\x03\x91a\x0E`V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x1Cra\x1Cma\x1Cy\x92a\x13\xF5V[a\x1CZV[\x82Ta\x1C?V[\x90UV[\x80a\x1C\x98a\x1C\x92a\x1C\x8D_a\x12\xF3V[a\x03\tV[\x91a\x03\tV[\x14a\x1C\xFEWa\x1C\xA7`\x02a\x11\x97V[a\x1C\xB2\x82`\x02a\x1C]V[\x90a\x1C\xE6a\x1C\xE0\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x13\xF5V[\x91a\x13\xF5V[\x91a\x1C\xEFa\x024V[\x80a\x1C\xF9\x81a\x05\xD2V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1D\x16`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[a\x1D#\x90a\x1C$V[V[\x90a\x1D/\x90a\x13\xF5V[_R` R`@_ \x90V[a\x1DGa\x1DL\x91a\x11~V[a\x0F\xE6V[\x90V[a\x1DY\x90Ta\x1D;V[\x90V[a\x1D\x82\x91_a\x1Dwa\x1D}\x93a\x1Dpa\x112V[P\x82a\x19bV[\x01a\x1D%V[a\x1DOV[\x90V[a\x1D\x9E\x90a\x1D\x99a\x1D\x94a\x04\"V[a&\xCEV[a\x1D\xC3V[V[\x91` a\x1D\xC1\x92\x94\x93a\x1D\xBA`@\x82\x01\x96_\x83\x01\x90a\x03%V[\x01\x90a\x03%V[V[a\x1D\xCD`\x04a\x11\xB8V[a\x1D\xD8\x82`\x04a\x13\xD5V[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x1E\x0Fa\x1E\x06a\x024V[\x92\x83\x92\x83a\x1D\xA0V[\x03\x90\xA1V[a\x1E\x1D\x90a\x1D\x85V[V[\x90a\x1E:\x92\x91a\x1E5a\x1E0a\x04\"V[a&\xCEV[a\x1E<V[V[\x91\x90\x91a\x1EJ\x81`\x08a\x1C]V[a\x1EU\x83`\ta\x13\xD5V[a\x1E`\x82`\na\x13\xD5V[\x91\x90\x91a\x1E\x99\x7F\xB1\xE1g\x7F \x9A\x97L\xED\xA2\xC2\xABh\x15A\xC5\xDB\x04-\xB4\xA9\xB3T\xDD\xACy7D`\xDA2\0\x93a\x1E\x90a\x024V[\x93\x84\x93\x84a\x032V[\x03\x90\xA1V[\x90a\x1E\xA9\x92\x91a\x1E\x1FV[V[\x90a\x1E\xC6\x91a\x1E\xC1a\x1E\xBC\x82a\x19\x9CV[a&\xCEV[a\x1E\xC8V[V[\x90a\x1E\xD2\x91a'\xD0V[PV[\x90a\x1E\xDF\x91a\x1E\xABV[V[``\x90V[a\x1E\xEF\x90a\x0B\xE5V[\x90V[a\x1E\xFAa\x1E\xE1V[Pa\x1F\x03a\x11vV[Pa\x1F\x0Ca\x112V[P`\x07a\x1F\x19`\x02a\x11\x97V[\x91a\x1F-a\x1F'`\x02a\x12=V[\x92a\x1E\xE6V[\x92\x91\x90V[a\x1FAa\x1FG\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x82\x03\x91\x82\x11a\x1FRWV[a\x13\x1BV[a\x1F_a\x11zV[Pa\x1Fha\x11zV[Pa\x1Fqa\x11zV[Pa\x1F|`\x05a\x11\xB8V[a\x1F\x86`\x04a\x11\xB8V[\x91a\x1F\x91`\x04a\x11\xB8V[a\x1F\xACa\x1F\xA6a\x1F\xA1`\x05a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11_\x14a\x1F\xD7Wa\x1F\xD0a\x1F\xC0`\x04a\x11\xB8V[a\x1F\xCA`\x05a\x11\xB8V[\x90a\x1F2V[[\x91\x92\x91\x90V[a\x1F\xE0_a\x12\xFFV[a\x1F\xD1V[a\x1F\xEDa\x112V[Pa \x07a \x01c\x01\xFF\xC9\xA7`\xE0\x1Ba\x02FV[\x91a\x02FV[\x14\x90V[\x90V[a \"a \x1Da '\x92a \x0BV[a\x12\xD4V[a\x03\"V[\x90V[a 4`\x02a \x0EV[\x90V[a A`\x01a\x11\xB8V[a Za Ta Oa *V[a\x03\"V[\x91a\x03\"V[\x14a sWa qa ja *V[`\x01a\x13\xD5V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a \x8B`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90V[a \xA6a \xA1a \xAB\x92a \x8FV[a\x12\xD4V[a\x03\"V[\x90V[a \xB8`\x01a \x92V[\x90V[a \xCDa \xC6a \xAEV[`\x01a\x13\xD5V[V[\x90V[a \xE6a \xE1a \xEB\x92a \xCFV[a\x12\xD4V[a\x03\"V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a!\x0Ea!\x14\x91a\x03\"V[\x91a\x03\"V[\x90\x81\x15a!\x1FW\x04\x90V[a \xEEV[a!:Ba!4b\x01Q\x80a \xD2V[\x90a!\x02V[\x80a!Va!Pa!K`\x06a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11a!_W[PV[\x80a!\xC1\x91a!n`\x05a\x11\xB8V[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a!\xA4a!\x9Ba\x024V[\x92\x83\x92\x83a\x1D\xA0V[\x03\x90\xA1a!\xBAa!\xB3_a\x12\xFFV[`\x05a\x13\xD5V[`\x06a\x13\xD5V[_a!\\V[a!\xD0\x90a\x13\x88V[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[`\xE0\x1B\x90V[a!\xF6a!\xF1a!\xFB\x92a!\xD3V[a!\xDCV[a\x02FV[\x90V[`@\x90a\"'a\".\x94\x96\x95\x93\x96a\"\x1D``\x84\x01\x98_\x85\x01\x90a\x03\x15V[` \x83\x01\x90a\x03\x15V[\x01\x90a\x03%V[V[`\x04\x92a\"ja\"~\x95\x93a\"y\x93\x94a\"Qc#\xB8r\xDD\x92\x94\x91\x92a!\xE2V[\x93a\"Za\x024V[\x97\x88\x95` \x87\x01\x90\x81R\x01a!\xFEV[` \x82\x01\x81\x03\x82R\x03\x83a\x0B\xBCV[a(\xE2V[V[P\x90V[\x90\x91``\x82\x84\x03\x12a\"\xB9Wa\"\xB6a\"\x9F\x84_\x85\x01a\x06.V[\x93a\"\xAD\x81` \x86\x01a\x05&V[\x93`@\x01a\x05&V[\x90V[a\x02>V[a\"\xD6a\"\xD0a\"\xDC\x92\x95\x93\x95a\x15\xD6V[\x94a\x13\xB6V[\x92a\x13\xB6V[\x90V[a\"\xE8\x90a\x13TV[\x90V[a\"\xF4\x90a\"\xDFV[\x90V[a#\0\x90a\x13\x88V[\x90V[\x90PQ\x90a#\x10\x82a\x04\xEFV[V[\x90` \x82\x82\x03\x12a#+Wa#(\x91_\x01a#\x03V[\x90V[a\x02>V[a#8a\x024V[=_\x82>=\x90\xFD[a#K_\x80\x92a\x0C2V[\x01\x90V[\x90a#r\x91a#e`@\x82\x01\x92_\x83\x01\x90a\x03%V[` \x81\x83\x03\x91\x01Ra#@V[\x90V[_\x80\xFD[\x90\x92\x91\x92a#\x8Ea#\x89\x82a\x17sV[a\x17^V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a#\xAAWa#\xA8\x92a\x0C;V[V[a#uV[\x90\x80`\x1F\x83\x01\x12\x15a#\xCDW\x81` a#\xCA\x93Q\x91\x01a#yV[\x90V[a\x055V[\x90` \x82\x82\x03\x12a$\x02W_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a#\xFDWa#\xFA\x92\x01a#\xAFV[\x90V[a\x02BV[a\x02>V[Q\x90V[` \x91\x81R\x01\x90V[a$3a$<` \x93a$A\x93a$*\x81a$\x07V[\x93\x84\x80\x93a$\x0BV[\x95\x86\x91\x01a\x0C;V[a\x0B\x9EV[\x01\x90V[\x93\x94a$\x8Ea$\xAF\x98\x96a$\x84a$\xA2\x96a$za$\x98\x96\x9B\x97a$p`\xE0\x8C\x01\x9D_\x8D\x01\x90a\x03\x15V[` \x8B\x01\x90a\x03\x15V[`@\x89\x01\x90a\x03\x15V[``\x87\x01\x90a\x03%V[`\x80\x85\x01\x90a\x03%V[`\xA0\x83\x01\x90a\x03%V[`\xC0\x81\x84\x03\x91\x01Ra$\x14V[\x90V[\x92\x90\x91a$\xC0\x81\x83\x90a\"\x80V[a$\xD2a$\xCC_a\x12\xFFV[\x91a\x03\"V[\x11_\x14a&\xA0Wa$\xEEa%\x7F\x94\x92a$\xF4\x92\x90\x81\x01\x90a\"\x84V[\x91a\"\xBEV[\x92\x91\x94\x90\x94[\x94\x92\x91a%\x1Ba%\x0B\x85\x85\x90a\x1A;V[a%\x15`\x0Ba\x11\xB8V[\x90a\x13/V[\x92a%9a%(\x83a\x13|V[a%2`\x02a\x11\x97V[\x88\x91a)\xC6V[` a%Ua%Pa%K`\x02a\x11\x97V[a\"\xEBV[a\"\xF7V[c\xBD\xA0\t\xFE\x90a%t\x85\x92a%ha\x024V[\x97\x88\x94\x85\x93\x84\x93a!\xDCV[\x83R`\x04\x83\x01a\r\x04V[\x03\x91Z\xFA\x80\x15a&\x9BW_\x96a%\xAFa&6\x92a&+\x96\x8A\x91a&mW[Pa%\xA7\x86a\x13|V[\x90\x83\x91a)\xC6V[a%\xD3a%\xE2a%\xBF`\x0Ba\x11\xB8V[a%\xC7a\x024V[\x92\x83\x91` \x83\x01a#OV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\xBCV[a%\xFCa%\xF7a%\xF2`\x02a\x11\x97V[a\"\xEBV[a\"\xF7V[\x93cO\xB1\xA0{\x97\x94\x97\x94\x95\x98a&\x110a\x16\x8AV[\x9B\x93\x90\x91\x92\x93a&\x1Fa\x024V[\x9C\x8D\x9B\x8C\x9A\x8B\x99a!\xDCV[\x89R`\x04\x89\x01a$EV[\x03\x92Z\xF1\x80\x15a&hWa&HW[PV[a&c\x90=\x80_\x83>a&[\x81\x83a\x0B\xBCV[\x81\x01\x90a#\xD2V[a&EV[a#0V[a&\x8E\x91P` =\x81\x11a&\x94W[a&\x86\x81\x83a\x0B\xBCV[\x81\x01\x90a#\x12V[_a%\x9DV[P=a&|V[a#0V[PPa&\xAC`\x08a\x11\x97V[\x91a&\xB7`\ta\x11\xB8V[\x90a%\x7Fa&\xC5`\na\x11\xB8V[\x94\x92\x94\x92a$\xFAV[a&\xE0\x90a&\xDAa'\xC3V[\x90a*\xA5V[V[\x90a&\xEE`\xFF\x91a\x0E`V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a'\ra'\x08a'\x14\x92a\x1A\xF3V[a\x1A\xFFV[\x82Ta&\xE2V[\x90UV[a' a\x112V[Pa'5a'/\x82\x84\x90a\x1D\\V[\x15a\x02\x93V[_\x14a'\xBDWa'\\`\x01a'W_a'O\x81\x86\x90a\x19bV[\x01\x85\x90a\x1D%V[a&\xF8V[\x90a'ea'\xC3V[\x90a'\xA2a'\x9Ca'\x96\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x19VV[\x92a\x13\xF5V[\x92a\x13\xF5V[\x92a'\xABa\x024V[\x80a'\xB5\x81a\x05\xD2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a'\xCBa\x11vV[P3\x90V[a'\xD8a\x112V[Pa'\xE4\x81\x83\x90a\x1D\\V[_\x14a(kWa(\n_a(\x05_a'\xFD\x81\x86\x90a\x19bV[\x01\x85\x90a\x1D%V[a&\xF8V[\x90a(\x13a'\xC3V[\x90a(Pa(Ja(D\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x19VV[\x92a\x13\xF5V[\x92a\x13\xF5V[\x92a(Ya\x024V[\x80a(c\x81a\x05\xD2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a(\x92\x92\x94\x93a(\x8B`@\x82\x01\x96_\x83\x01\x90a\x03\x15V[\x01\x90a\x03%V[V[\x90a(\xDBa(\xE0\x93a(\xCC`\x04\x94\x93a(\xB3c\xA9\x05\x9C\xBB\x91\x93\x91a!\xE2V[\x92a(\xBCa\x024V[\x96\x87\x94` \x86\x01\x90\x81R\x01a(qV[` \x82\x01\x81\x03\x82R\x03\x83a\x0B\xBCV[a(\xE2V[V[\x90_` \x91a(\xEFa\x11zV[Pa(\xF8a\x11zV[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a)\x8BW=_Q\x90a)\x1Da)\x17_a\x12\xFFV[\x91a\x03\"V[\x14_\x14a)qWPa).\x81a!\xC7V[;a)Aa);_a\x12\xFFV[\x91a\x03\"V[\x14[a)JWPV[a)Va)m\x91a!\xC7V[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\r\x04V[\x03\x90\xFD[a)\x84a)~`\x01a \x92V[\x91a\x03\"V[\x14\x15a)CV[`@Q=_\x82>=\x90\xFD[a)\x9F\x90a\x12\xFFV[\x90RV[\x91` a)\xC4\x92\x94\x93a)\xBD`@\x82\x01\x96_\x83\x01\x90a\x03\x15V[\x01\x90a)\x96V[V[\x90\x91a*\t`\x04\x91a)\xFAc\t^\xA7\xB3a)\xE1\x87\x93\x91a!\xE2V[\x92a)\xEAa\x024V[\x95\x86\x94` \x86\x01\x90\x81R\x01a(qV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\xBCV[\x90a*\x1Ea*\x18\x82\x84\x90a*\xE0V[\x15a\x02\x93V[a*(W[PPPV[a*u`\x04a*z\x94a*p\x84\x91a*ac\t^\xA7\xB3a*H_\x91a!\xE2V[\x92a*Qa\x024V[\x96\x87\x94` \x86\x01\x90\x81R\x01a)\xA3V[` \x82\x01\x81\x03\x82R\x03\x83a\x0B\xBCV[a(\xE2V[a(\xE2V[_\x80\x80a*#V[\x91` a*\xA3\x92\x94\x93a*\x9C`@\x82\x01\x96_\x83\x01\x90a\x03\x15V[\x01\x90a\x04TV[V[\x90a*\xBAa*\xB4\x83\x83\x90a\x1D\\V[\x15a\x02\x93V[a*\xC2WPPV[a*\xDC_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a*\x82V[\x03\x90\xFD[\x90_` \x91a*\xEDa\x112V[Pa*\xF6a\x112V[Pa*\xFFa\x11zV[Pa+\x08a\x11zV[P\x82\x81Q\x91\x01\x82\x85Z\xF1=\x91_Q\x91\x92\x83a+$W[PPP\x90V[\x90\x91\x92Pa+:a+4_a\x12\xFFV[\x91a\x03\"V[\x14_\x14a+hWa+K\x91Pa!\xC7V[;a+^a+X_a\x12\xFFV[\x91a\x03\"V[\x11[_\x80\x80a+\x1EV[Pa+|a+v`\x01a \x92V[\x91a\x03\"V[\x14a+`V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b3661112e57005b61001f5f3561022e565b806301ffc9a7146102295780630e1508d9146102245780631033b4cc1461021f578063118c38c71461021a5780631259a5c81461021557806318b68b8c146102105780631b9a91a41461020b578063248a9ca3146102065780632f2ff15d146102015780633462fac3146101fc57806336568abe146101f757806336b089d8146101f25780634a65855a146101ed578063501d815c146101e85780635a042545146101e35780635ab1d61c146101de5780635d942ac1146101d957806361b0a56e146101d457806363221490146101cf57806365d7a3c9146101ca57806366d003ac146101c557806367eeba0c146101c05780636bcc8c14146101bb57806370123fee146101b657806391d14854146101b1578063a217fddf146101ac578063b20d30a9146101a7578063c9f5b63e146101a2578063caed5c7f1461019d578063d547741f14610198578063ead93c8f14610193578063ede7cebd1461018e5763fb8c4b510361000e576110f6565b61108c565b611022565b610fb2565b610f7e565b610f0f565b610ecd565b610e98565b610e27565b610df2565b610db0565b610d5d565b610d19565b610c8f565b610a6f565b610a3b565b6109cc565b61098a565b610916565b6108c3565b61087e565b61081c565b6107d9565b6107a4565b610741565b6106df565b61066a565b6105d7565b6104ba565b610476565b6103ed565b610364565b6102ba565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61025b81610246565b0361026257565b5f80fd5b9050359061027382610252565b565b9060208282031261028e5761028b915f01610266565b90565b61023e565b151590565b6102a190610293565b9052565b91906102b8905f60208501940190610298565b565b346102ea576102e66102d56102d0366004610275565b611136565b6102dd610234565b918291826102a5565b0390f35b61023a565b5f9103126102f957565b61023e565b60018060a01b031690565b610312906102fe565b90565b61031e90610309565b9052565b90565b61032e90610322565b9052565b60409061035b610362949695939661035160608401985f850190610315565b6020830190610325565b0190610325565b565b34610397576103743660046102ef565b61039361037f6111c5565b61038a939193610234565b93849384610332565b0390f35b61023a565b1c90565b90565b6103b39060086103b8930261039c565b6103a0565b90565b906103c691546103a3565b90565b6103d560055f906103bb565b90565b91906103eb905f60208501940190610325565b565b3461041d576103fd3660046102ef565b6104196104086103c9565b610410610234565b918291826103d8565b0390f35b61023a565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61044e610422565b90565b90565b61045d90610451565b9052565b9190610474905f60208501940190610454565b565b346104a6576104863660046102ef565b6104a2610491610446565b610499610234565b91829182610461565b0390f35b61023a565b6104b760065f906103bb565b90565b346104ea576104ca3660046102ef565b6104e66104d56104ab565b6104dd610234565b918291826103d8565b0390f35b61023a565b6104f881610309565b036104ff57565b5f80fd5b90503590610510826104ef565b565b61051b81610322565b0361052257565b5f80fd5b9050359061053382610512565b565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561057b5781359167ffffffffffffffff831161057657602001926001830284011161057157565b61053d565b610539565b610535565b916060838303126105cd57610597825f8501610503565b926105a58360208301610526565b92604082013567ffffffffffffffff81116105c8576105c49201610541565b9091565b610242565b61023e565b5f0190565b34610609576105f36105ea366004610580565b929190916115ac565b6105fb610234565b80610605816105d2565b0390f35b61023a565b610617906102fe565b90565b6106238161060e565b0361062a57565b5f80fd5b9050359061063b8261061a565b565b91906040838203126106655780610659610662925f860161062e565b93602001610526565b90565b61023e565b346106995761068361067d36600461063d565b90611946565b61068b610234565b80610695816105d2565b0390f35b61023a565b6106a781610451565b036106ae57565b5f80fd5b905035906106bf8261069e565b565b906020828203126106da576106d7915f016106b2565b90565b61023e565b3461070f5761070b6106fa6106f53660046106c1565b61199c565b610702610234565b91829182610461565b0390f35b61023a565b919060408382031261073c5780610730610739925f86016106b2565b93602001610503565b90565b61023e565b346107705761075a610754366004610714565b906119e7565b610762610234565b8061076c816105d2565b0390f35b61023a565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b6107a1610775565b90565b346107d4576107b43660046102ef565b6107d06107bf610799565b6107c7610234565b91829182610461565b0390f35b61023a565b34610808576107f26107ec366004610714565b906119f3565b6107fa610234565b80610804816105d2565b0390f35b61023a565b61081960035f906103bb565b90565b3461084c5761082c3660046102ef565b61084861083761080d565b61083f610234565b918291826103d8565b0390f35b61023a565b9190604083820312610879578061086d610876925f8601610526565b93602001610526565b90565b61023e565b346108af576108ab61089a610894366004610851565b90611a70565b6108a2610234565b918291826103d8565b0390f35b61023a565b6108c060095f906103bb565b90565b346108f3576108d33660046102ef565b6108ef6108de6108b4565b6108e6610234565b918291826103d8565b0390f35b61023a565b906020828203126109115761090e915f01610526565b90565b61023e565b346109445761092e6109293660046108f8565b611aae565b610936610234565b80610940816105d2565b0390f35b61023a565b61095281610293565b0361095957565b5f80fd5b9050359061096a82610949565b565b9060208282031261098557610982915f0161095d565b90565b61023e565b346109b8576109a261099d36600461096c565b611b68565b6109aa610234565b806109b4816105d2565b0390f35b61023a565b6109c9600a5f906103bb565b90565b346109fc576109dc3660046102ef565b6109f86109e76109bd565b6109ef610234565b918291826103d8565b0390f35b61023a565b9091606082840312610a3657610a33610a1c845f8501610503565b93610a2a8160208601610526565b93604001610503565b90565b61023e565b34610a6a57610a54610a4e366004610a01565b91611be4565b610a5c610234565b80610a66816105d2565b0390f35b61023a565b34610a9d57610a87610a823660046108f8565b611c19565b610a8f610234565b80610a99816105d2565b0390f35b61023a565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610ae9575b6020831014610ae457565b610ab5565b91607f1691610ad9565b60209181520190565b5f5260205f2090565b905f9291805490610b1f610b1883610ac9565b8094610af3565b916001811690815f14610b765750600114610b3a575b505050565b610b479192939450610afc565b915f925b818410610b5e57505001905f8080610b35565b60018160209295939554848601520191019290610b4b565b92949550505060ff19168252151560200201905f8080610b35565b90610b9b91610b05565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610bc690610b9e565b810190811067ffffffffffffffff821117610be057604052565b610ba8565b90610c05610bfe92610bf5610234565b93848092610b91565b0383610bbc565b565b905f10610c1a57610c1790610be5565b90565b610aa2565b610c2b60075f90610c07565b90565b5190565b60209181520190565b90825f9392825e0152565b610c65610c6e602093610c7393610c5c81610c2e565b93848093610c32565b95869101610c3b565b610b9e565b0190565b610c8c9160208201915f818403910152610c46565b90565b34610cbf57610c9f3660046102ef565b610cbb610caa610c1f565b610cb2610234565b91829182610c77565b0390f35b61023a565b60018060a01b031690565b610cdf906008610ce4930261039c565b610cc4565b90565b90610cf29154610ccf565b90565b610d0160085f90610ce7565b90565b9190610d17905f60208501940190610315565b565b34610d4957610d293660046102ef565b610d45610d34610cf5565b610d3c610234565b91829182610d04565b0390f35b61023a565b610d5a60045f906103bb565b90565b34610d8d57610d6d3660046102ef565b610d89610d78610d4e565b610d80610234565b918291826103d8565b0390f35b61023a565b90602082820312610dab57610da8915f01610503565b90565b61023e565b34610dde57610dc8610dc3366004610d92565b611d1a565b610dd0610234565b80610dda816105d2565b0390f35b61023a565b610def600b5f906103bb565b90565b34610e2257610e023660046102ef565b610e1e610e0d610de3565b610e15610234565b918291826103d8565b0390f35b61023a565b34610e5857610e54610e43610e3d366004610714565b90611d5c565b610e4b610234565b918291826102a5565b0390f35b61023a565b90565b5f1b90565b610e79610e74610e7e92610e5d565b610e60565b610451565b90565b610e8a5f610e65565b90565b610e95610e81565b90565b34610ec857610ea83660046102ef565b610ec4610eb3610e8d565b610ebb610234565b91829182610461565b0390f35b61023a565b34610efb57610ee5610ee03660046108f8565b611e14565b610eed610234565b80610ef7816105d2565b0390f35b61023a565b610f0c60025f90610ce7565b90565b34610f3f57610f1f3660046102ef565b610f3b610f2a610f00565b610f32610234565b91829182610d04565b0390f35b61023a565b9091606082840312610f7957610f76610f5f845f8501610503565b93610f6d8160208601610526565b93604001610526565b90565b61023e565b34610fad57610f97610f91366004610f44565b91611e9e565b610f9f610234565b80610fa9816105d2565b0390f35b61023a565b34610fe157610fcb610fc5366004610714565b90611ed5565b610fd3610234565b80610fdd816105d2565b0390f35b61023a565b60ff1690565b610ffc906008611001930261039c565b610fe6565b90565b9061100f9154610fec565b90565b61101f6002601490611004565b90565b34611052576110323660046102ef565b61104e61103d611012565b611045610234565b918291826102a5565b0390f35b61023a565b60409061108361107861108a9597969460608401908482035f860152610c46565b966020830190610315565b0190610298565b565b346110bf5761109c3660046102ef565b6110bb6110a7611ef2565b6110b2939193610234565b93849384611057565b0390f35b61023a565b6040906110ed6110f494969593966110e360608401985f850190610325565b6020830190610325565b0190610325565b565b34611129576111063660046102ef565b611125611111611f57565b61111c939193610234565b938493846110c4565b0390f35b61023a565b5f80fd5b5f90565b61113e611132565b5080611159611153637965db0b60e01b610246565b91610246565b14908115611166575b5090565b6111709150611fe5565b5f611162565b5f90565b5f90565b5f1c90565b61118f6111949161117e565b610cc4565b90565b6111a19054611183565b90565b6111b06111b59161117e565b6103a0565b90565b6111c290546111a4565b90565b6111cd611176565b506111d661117a565b506111df61117a565b506111ea6008611197565b6111f460096111b8565b916111ff600a6111b8565b91929190565b90611219939291611214612037565b61124a565b6112216120bb565b565b60a01c90565b61123561123a91611223565b610fe6565b90565b6112479054611229565b90565b92919061126061125a600261123d565b15610293565b61126f5761126d9361128b565b565b5f633df5105960e11b815280611287600482016105d2565b0390fd5b9291906112a96112a361129c610775565b3390611d5c565b15610293565b6112b8576112b693611401565b565b5f635c427cd960e01b8152806112d0600482016105d2565b0390fd5b90565b6112eb6112e66112f092610e5d565b6112d4565b6102fe565b90565b6112fc906112d7565b90565b61131361130e61131892610e5d565b6112d4565b610322565b90565b634e487b7160e01b5f52601160045260245ffd5b61133e61134491939293610322565b92610322565b820180921161134f57565b61131b565b61136861136361136d926102fe565b6112d4565b6102fe565b90565b61137990611354565b90565b61138590611370565b90565b61139190611354565b90565b61139d90611388565b90565b906113ac5f1991610e60565b9181191691161790565b6113ca6113c56113cf92610322565b6112d4565b610322565b90565b90565b906113ea6113e56113f1926113b6565b6113d2565b82546113a0565b9055565b6113fe90611388565b90565b919290928261142061141a6114155f6112f3565b610309565b91610309565b1461159057836114386114325f6112ff565b91610322565b14611574578361145961145361144e60036111b8565b610322565b91610322565b1161155857611466612124565b61147a61147360056111b8565b859061132f565b61149561148f61148a60046111b8565b610322565b91610322565b1161153c576114c7916114bc6114aa8561137c565b336114b430611394565b908892612230565b8391859091926124b2565b6114e46114dd836114d860056111b8565b61132f565b60056113d5565b6114ee6002611197565b9061153761152561151f7f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8936113f5565b936113f5565b9361152e610234565b918291826103d8565b0390a3565b5f631c345a2f60e21b815280611554600482016105d2565b0390fd5b5f631c345a2f60e21b815280611570600482016105d2565b0390fd5b5f631f2a200560e01b81528061158c600482016105d2565b0390fd5b5f63d92e233d60e01b8152806115a8600482016105d2565b0390fd5b906115b8939291611205565b565b906115d4916115cf6115ca610422565b6126ce565b611883565b565b6115df90611388565b90565b60207f7300000000000000000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a207a65726f206164647265735f8201520152565b61163c6021604092610c32565b611645816115e2565b0190565b61165e9060208101905f81830391015261162f565b90565b1561166857565b611670610234565b62461bcd60e51b81528061168660048201611649565b0390fd5b61169390611388565b90565b60207f742062616c616e63650000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20696e73756666696369656e5f8201520152565b6116f06029604092610c32565b6116f981611696565b0190565b6117129060208101905f8183039101526116e3565b90565b1561171c57565b611724610234565b62461bcd60e51b81528061173a600482016116fd565b0390fd5b905090565b61174e5f809261173e565b0190565b61175b90611743565b90565b9061177161176a610234565b9283610bbc565b565b67ffffffffffffffff81116117915761178d602091610b9e565b0190565b610ba8565b906117a86117a383611773565b61175e565b918252565b606090565b3d5f146117cd576117c23d611796565b903d5f602084013e5b565b6117d56117ad565b906117cb565b60207f72206661696c6564000000000000000000000000000000000000000000000000917f417262697472756d42726964676550726f78793a20455448207472616e7366655f8201520152565b6118356028604092610c32565b61183e816117db565b0190565b6118579060208101905f818303910152611828565b90565b1561186157565b611869610234565b62461bcd60e51b81528061187f60048201611842565b0390fd5b6118a8816118a161189b6118965f6112f3565b610309565b916115d6565b1415611661565b6118ce826118c76118c16118bb3061168a565b31610322565b91610322565b1115611715565b6119025f806118dc846115d6565b856118e5610234565b90816118f081611752565b03925af16118fc6117b2565b5061185a565b61194161192f7f8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b926115d6565b92611938610234565b918291826103d8565b0390a2565b90611950916115ba565b565b5f90565b61195f90610451565b90565b9061196c90611956565b5f5260205260405f2090565b90565b61198761198c9161117e565b611978565b90565b611999905461197b565b90565b60016119b46119ba926119ad611952565b505f611962565b0161198f565b90565b906119d8916119d36119ce8261199c565b6126ce565b6119da565b565b906119e491612718565b50565b906119f1916119bd565b565b9080611a0e611a08611a036127c3565b610309565b91610309565b03611a1f57611a1c916127d0565b50565b5f63334bd91960e11b815280611a37600482016105d2565b0390fd5b611a4a611a5091939293610322565b92610322565b91611a5c838202610322565b928184041490151715611a6b57565b61131b565b90611a8391611a7d61117a565b50611a3b565b90565b611a9f90611a9a611a95610422565b6126ce565b611aa1565b565b611aac90600b6113d5565b565b611ab790611a86565b565b611ad290611acd611ac8610422565b6126ce565b611b22565b565b60a01b90565b90611ae960ff60a01b91611ad4565b9181191691161790565b611afc90610293565b90565b90565b90611b17611b12611b1e92611af3565b611aff565b8254611ada565b9055565b611b2d816002611b02565b611b637fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d591611b5a610234565b918291826102a5565b0390a1565b611b7190611ab9565b565b90611b8e9291611b89611b84610e81565b6126ce565b611b90565b565b919081611bad611ba7611ba25f6112f3565b610309565b91610309565b14611bc857611bbe611bc69361137c565b919091612894565b565b5f63d92e233d60e01b815280611be0600482016105d2565b0390fd5b90611bef9291611b73565b565b611c0a90611c05611c00610422565b6126ce565b611c0c565b565b611c179060036113d5565b565b611c2290611bf1565b565b611c3d90611c38611c33610422565b6126ce565b611c7d565b565b90611c5060018060a01b0391610e60565b9181191691161790565b90565b90611c72611c6d611c79926113f5565b611c5a565b8254611c3f565b9055565b80611c98611c92611c8d5f6112f3565b610309565b91610309565b14611cfe57611ca76002611197565b611cb2826002611c5d565b90611ce6611ce07fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069936113f5565b916113f5565b91611cef610234565b80611cf9816105d2565b0390a3565b5f63d92e233d60e01b815280611d16600482016105d2565b0390fd5b611d2390611c24565b565b90611d2f906113f5565b5f5260205260405f2090565b611d47611d4c9161117e565b610fe6565b90565b611d599054611d3b565b90565b611d82915f611d77611d7d93611d70611132565b5082611962565b01611d25565b611d4f565b90565b611d9e90611d99611d94610422565b6126ce565b611dc3565b565b916020611dc1929493611dba60408201965f830190610325565b0190610325565b565b611dcd60046111b8565b611dd88260046113d5565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf91611e0f611e06610234565b92839283611da0565b0390a1565b611e1d90611d85565b565b90611e3a9291611e35611e30610422565b6126ce565b611e3c565b565b919091611e4a816008611c5d565b611e558360096113d5565b611e6082600a6113d5565b919091611e997fb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da320093611e90610234565b93849384610332565b0390a1565b90611ea99291611e1f565b565b90611ec691611ec1611ebc8261199c565b6126ce565b611ec8565b565b90611ed2916127d0565b50565b90611edf91611eab565b565b606090565b611eef90610be5565b90565b611efa611ee1565b50611f03611176565b50611f0c611132565b506007611f196002611197565b91611f2d611f27600261123d565b92611ee6565b929190565b611f41611f4791939293610322565b92610322565b8203918211611f5257565b61131b565b611f5f61117a565b50611f6861117a565b50611f7161117a565b50611f7c60056111b8565b611f8660046111b8565b91611f9160046111b8565b611fac611fa6611fa160056111b8565b610322565b91610322565b115f14611fd757611fd0611fc060046111b8565b611fca60056111b8565b90611f32565b5b91929190565b611fe05f6112ff565b611fd1565b611fed611132565b506120076120016301ffc9a760e01b610246565b91610246565b1490565b90565b61202261201d6120279261200b565b6112d4565b610322565b90565b612034600261200e565b90565b61204160016111b8565b61205a61205461204f61202a565b610322565b91610322565b146120735761207161206a61202a565b60016113d5565b565b5f633ee5aeb560e01b81528061208b600482016105d2565b0390fd5b90565b6120a66120a16120ab9261208f565b6112d4565b610322565b90565b6120b86001612092565b90565b6120cd6120c66120ae565b60016113d5565b565b90565b6120e66120e16120eb926120cf565b6112d4565b610322565b90565b634e487b7160e01b5f52601260045260245ffd5b61210e61211491610322565b91610322565b90811561211f570490565b6120ee565b61213a42612134620151806120d2565b90612102565b8061215661215061214b60066111b8565b610322565b91610322565b1161215f575b50565b806121c19161216e60056111b8565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab916121a461219b610234565b92839283611da0565b0390a16121ba6121b35f6112ff565b60056113d5565b60066113d5565b5f61215c565b6121d090611388565b90565b63ffffffff1690565b60e01b90565b6121f66121f16121fb926121d3565b6121dc565b610246565b90565b60409061222761222e949695939661221d60608401985f850190610315565b6020830190610315565b0190610325565b565b60049261226a61227e959361227993946122516323b872dd929491926121e2565b9361225a610234565b97889560208701908152016121fe565b60208201810382520383610bbc565b6128e2565b565b5090565b90916060828403126122b9576122b661229f845f850161062e565b936122ad8160208601610526565b93604001610526565b90565b61023e565b6122d66122d06122dc929593956115d6565b946113b6565b926113b6565b90565b6122e890611354565b90565b6122f4906122df565b90565b61230090611388565b90565b90505190612310826104ef565b565b9060208282031261232b57612328915f01612303565b90565b61023e565b612338610234565b3d5f823e3d90fd5b61234b5f8092610c32565b0190565b906123729161236560408201925f830190610325565b6020818303910152612340565b90565b5f80fd5b9092919261238e61238982611773565b61175e565b938185526020850190828401116123aa576123a892610c3b565b565b612375565b9080601f830112156123cd578160206123ca93519101612379565b90565b610535565b90602082820312612402575f82015167ffffffffffffffff81116123fd576123fa92016123af565b90565b610242565b61023e565b5190565b60209181520190565b61243361243c6020936124419361242a81612407565b9384809361240b565b95869101610c3b565b610b9e565b0190565b939461248e6124af98966124846124a29661247a612498969b9761247060e08c019d5f8d0190610315565b60208b0190610315565b6040890190610315565b6060870190610325565b6080850190610325565b60a0830190610325565b60c0818403910152612414565b90565b9290916124c0818390612280565b6124d26124cc5f6112ff565b91610322565b115f146126a0576124ee61257f94926124f49290810190612284565b916122be565b92919490945b94929161251b61250b858590611a3b565b612515600b6111b8565b9061132f565b926125396125288361137c565b6125326002611197565b88916129c6565b602061255561255061254b6002611197565b6122eb565b6122f7565b63bda009fe906125748592612568610234565b978894859384936121dc565b835260048301610d04565b03915afa801561269b575f966125af6126369261262b968a9161266d575b506125a78661137c565b9083916129c6565b6125d36125e26125bf600b6111b8565b6125c7610234565b9283916020830161234f565b60208201810382520382610bbc565b6125fc6125f76125f26002611197565b6122eb565b6122f7565b93634fb1a07b9794979495986126113061168a565b9b939091929361261f610234565b9c8d9b8c9a8b996121dc565b895260048901612445565b03925af1801561266857612648575b50565b612663903d805f833e61265b8183610bbc565b8101906123d2565b612645565b612330565b61268e915060203d8111612694575b6126868183610bbc565b810190612312565b5f61259d565b503d61267c565b612330565b50506126ac6008611197565b916126b760096111b8565b9061257f6126c5600a6111b8565b949294926124fa565b6126e0906126da6127c3565b90612aa5565b565b906126ee60ff91610e60565b9181191691161790565b9061270d61270861271492611af3565b611aff565b82546126e2565b9055565b612720611132565b5061273561272f828490611d5c565b15610293565b5f146127bd5761275c60016127575f61274f818690611962565b018590611d25565b6126f8565b906127656127c3565b906127a261279c6127967f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611956565b926113f5565b926113f5565b926127ab610234565b806127b5816105d2565b0390a4600190565b50505f90565b6127cb611176565b503390565b6127d8611132565b506127e4818390611d5c565b5f1461286b5761280a5f6128055f6127fd818690611962565b018590611d25565b6126f8565b906128136127c3565b9061285061284a6128447ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611956565b926113f5565b926113f5565b92612859610234565b80612863816105d2565b0390a4600190565b50505f90565b91602061289292949361288b60408201965f830190610315565b0190610325565b565b906128db6128e0936128cc600494936128b363a9059cbb9193916121e2565b926128bc610234565b9687946020860190815201612871565b60208201810382520383610bbc565b6128e2565b565b905f6020916128ef61117a565b506128f861117a565b50828151910182855af11561298b573d5f519061291d6129175f6112ff565b91610322565b145f14612971575061292e816121c7565b3b61294161293b5f6112ff565b91610322565b145b61294a5750565b61295661296d916121c7565b5f918291635274afe760e01b835260048301610d04565b0390fd5b61298461297e6001612092565b91610322565b1415612943565b6040513d5f823e3d90fd5b61299f906112ff565b9052565b9160206129c49294936129bd60408201965f830190610315565b0190612996565b565b9091612a096004916129fa63095ea7b36129e18793916121e2565b926129ea610234565b9586946020860190815201612871565b60208201810382520382610bbc565b90612a1e612a18828490612ae0565b15610293565b612a28575b505050565b612a756004612a7a94612a708491612a6163095ea7b3612a485f916121e2565b92612a51610234565b96879460208601908152016129a3565b60208201810382520383610bbc565b6128e2565b6128e2565b5f8080612a23565b916020612aa3929493612a9c60408201965f830190610315565b0190610454565b565b90612aba612ab4838390611d5c565b15610293565b612ac2575050565b612adc5f92839263e2517d3f60e01b845260048401612a82565b0390fd5b905f602091612aed611132565b50612af6611132565b50612aff61117a565b50612b0861117a565b50828151910182855af13d915f51919283612b24575b50505090565b90919250612b3a612b345f6112ff565b91610322565b145f14612b6857612b4b91506121c7565b3b612b5e612b585f6112ff565b91610322565b115b5f8080612b1e565b50612b7c612b766001612092565b91610322565b14612b6056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x11.W\0[a\0\x1F_5a\x02.V[\x80c\x01\xFF\xC9\xA7\x14a\x02)W\x80c\x0E\x15\x08\xD9\x14a\x02$W\x80c\x103\xB4\xCC\x14a\x02\x1FW\x80c\x11\x8C8\xC7\x14a\x02\x1AW\x80c\x12Y\xA5\xC8\x14a\x02\x15W\x80c\x18\xB6\x8B\x8C\x14a\x02\x10W\x80c\x1B\x9A\x91\xA4\x14a\x02\x0BW\x80c$\x8A\x9C\xA3\x14a\x02\x06W\x80c//\xF1]\x14a\x02\x01W\x80c4b\xFA\xC3\x14a\x01\xFCW\x80c6V\x8A\xBE\x14a\x01\xF7W\x80c6\xB0\x89\xD8\x14a\x01\xF2W\x80cJe\x85Z\x14a\x01\xEDW\x80cP\x1D\x81\\\x14a\x01\xE8W\x80cZ\x04%E\x14a\x01\xE3W\x80cZ\xB1\xD6\x1C\x14a\x01\xDEW\x80c]\x94*\xC1\x14a\x01\xD9W\x80ca\xB0\xA5n\x14a\x01\xD4W\x80cc\"\x14\x90\x14a\x01\xCFW\x80ce\xD7\xA3\xC9\x14a\x01\xCAW\x80cf\xD0\x03\xAC\x14a\x01\xC5W\x80cg\xEE\xBA\x0C\x14a\x01\xC0W\x80ck\xCC\x8C\x14\x14a\x01\xBBW\x80cp\x12?\xEE\x14a\x01\xB6W\x80c\x91\xD1HT\x14a\x01\xB1W\x80c\xA2\x17\xFD\xDF\x14a\x01\xACW\x80c\xB2\r0\xA9\x14a\x01\xA7W\x80c\xC9\xF5\xB6>\x14a\x01\xA2W\x80c\xCA\xED\\\x7F\x14a\x01\x9DW\x80c\xD5Gt\x1F\x14a\x01\x98W\x80c\xEA\xD9<\x8F\x14a\x01\x93W\x80c\xED\xE7\xCE\xBD\x14a\x01\x8EWc\xFB\x8CKQ\x03a\0\x0EWa\x10\xF6V[a\x10\x8CV[a\x10\"V[a\x0F\xB2V[a\x0F~V[a\x0F\x0FV[a\x0E\xCDV[a\x0E\x98V[a\x0E'V[a\r\xF2V[a\r\xB0V[a\r]V[a\r\x19V[a\x0C\x8FV[a\noV[a\n;V[a\t\xCCV[a\t\x8AV[a\t\x16V[a\x08\xC3V[a\x08~V[a\x08\x1CV[a\x07\xD9V[a\x07\xA4V[a\x07AV[a\x06\xDFV[a\x06jV[a\x05\xD7V[a\x04\xBAV[a\x04vV[a\x03\xEDV[a\x03dV[a\x02\xBAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02[\x81a\x02FV[\x03a\x02bWV[_\x80\xFD[\x90P5\x90a\x02s\x82a\x02RV[V[\x90` \x82\x82\x03\x12a\x02\x8EWa\x02\x8B\x91_\x01a\x02fV[\x90V[a\x02>V[\x15\x15\x90V[a\x02\xA1\x90a\x02\x93V[\x90RV[\x91\x90a\x02\xB8\x90_` \x85\x01\x94\x01\x90a\x02\x98V[V[4a\x02\xEAWa\x02\xE6a\x02\xD5a\x02\xD06`\x04a\x02uV[a\x116V[a\x02\xDDa\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xF3[a\x02:V[_\x91\x03\x12a\x02\xF9WV[a\x02>V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x12\x90a\x02\xFEV[\x90V[a\x03\x1E\x90a\x03\tV[\x90RV[\x90V[a\x03.\x90a\x03\"V[\x90RV[`@\x90a\x03[a\x03b\x94\x96\x95\x93\x96a\x03Q``\x84\x01\x98_\x85\x01\x90a\x03\x15V[` \x83\x01\x90a\x03%V[\x01\x90a\x03%V[V[4a\x03\x97Wa\x03t6`\x04a\x02\xEFV[a\x03\x93a\x03\x7Fa\x11\xC5V[a\x03\x8A\x93\x91\x93a\x024V[\x93\x84\x93\x84a\x032V[\x03\x90\xF3[a\x02:V[\x1C\x90V[\x90V[a\x03\xB3\x90`\x08a\x03\xB8\x93\x02a\x03\x9CV[a\x03\xA0V[\x90V[\x90a\x03\xC6\x91Ta\x03\xA3V[\x90V[a\x03\xD5`\x05_\x90a\x03\xBBV[\x90V[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03%V[V[4a\x04\x1DWa\x03\xFD6`\x04a\x02\xEFV[a\x04\x19a\x04\x08a\x03\xC9V[a\x04\x10a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x04Na\x04\"V[\x90V[\x90V[a\x04]\x90a\x04QV[\x90RV[\x91\x90a\x04t\x90_` \x85\x01\x94\x01\x90a\x04TV[V[4a\x04\xA6Wa\x04\x866`\x04a\x02\xEFV[a\x04\xA2a\x04\x91a\x04FV[a\x04\x99a\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[a\x04\xB7`\x06_\x90a\x03\xBBV[\x90V[4a\x04\xEAWa\x04\xCA6`\x04a\x02\xEFV[a\x04\xE6a\x04\xD5a\x04\xABV[a\x04\xDDa\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[a\x04\xF8\x81a\x03\tV[\x03a\x04\xFFWV[_\x80\xFD[\x90P5\x90a\x05\x10\x82a\x04\xEFV[V[a\x05\x1B\x81a\x03\"V[\x03a\x05\"WV[_\x80\xFD[\x90P5\x90a\x053\x82a\x05\x12V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05{W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05vW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05qWV[a\x05=V[a\x059V[a\x055V[\x91``\x83\x83\x03\x12a\x05\xCDWa\x05\x97\x82_\x85\x01a\x05\x03V[\x92a\x05\xA5\x83` \x83\x01a\x05&V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC8Wa\x05\xC4\x92\x01a\x05AV[\x90\x91V[a\x02BV[a\x02>V[_\x01\x90V[4a\x06\tWa\x05\xF3a\x05\xEA6`\x04a\x05\x80V[\x92\x91\x90\x91a\x15\xACV[a\x05\xFBa\x024V[\x80a\x06\x05\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x06\x17\x90a\x02\xFEV[\x90V[a\x06#\x81a\x06\x0EV[\x03a\x06*WV[_\x80\xFD[\x90P5\x90a\x06;\x82a\x06\x1AV[V[\x91\x90`@\x83\x82\x03\x12a\x06eW\x80a\x06Ya\x06b\x92_\x86\x01a\x06.V[\x93` \x01a\x05&V[\x90V[a\x02>V[4a\x06\x99Wa\x06\x83a\x06}6`\x04a\x06=V[\x90a\x19FV[a\x06\x8Ba\x024V[\x80a\x06\x95\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x06\xA7\x81a\x04QV[\x03a\x06\xAEWV[_\x80\xFD[\x90P5\x90a\x06\xBF\x82a\x06\x9EV[V[\x90` \x82\x82\x03\x12a\x06\xDAWa\x06\xD7\x91_\x01a\x06\xB2V[\x90V[a\x02>V[4a\x07\x0FWa\x07\x0Ba\x06\xFAa\x06\xF56`\x04a\x06\xC1V[a\x19\x9CV[a\x07\x02a\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[\x91\x90`@\x83\x82\x03\x12a\x07<W\x80a\x070a\x079\x92_\x86\x01a\x06\xB2V[\x93` \x01a\x05\x03V[\x90V[a\x02>V[4a\x07pWa\x07Za\x07T6`\x04a\x07\x14V[\x90a\x19\xE7V[a\x07ba\x024V[\x80a\x07l\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x07\xA1a\x07uV[\x90V[4a\x07\xD4Wa\x07\xB46`\x04a\x02\xEFV[a\x07\xD0a\x07\xBFa\x07\x99V[a\x07\xC7a\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[4a\x08\x08Wa\x07\xF2a\x07\xEC6`\x04a\x07\x14V[\x90a\x19\xF3V[a\x07\xFAa\x024V[\x80a\x08\x04\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x08\x19`\x03_\x90a\x03\xBBV[\x90V[4a\x08LWa\x08,6`\x04a\x02\xEFV[a\x08Ha\x087a\x08\rV[a\x08?a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x91\x90`@\x83\x82\x03\x12a\x08yW\x80a\x08ma\x08v\x92_\x86\x01a\x05&V[\x93` \x01a\x05&V[\x90V[a\x02>V[4a\x08\xAFWa\x08\xABa\x08\x9Aa\x08\x946`\x04a\x08QV[\x90a\x1ApV[a\x08\xA2a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[a\x08\xC0`\t_\x90a\x03\xBBV[\x90V[4a\x08\xF3Wa\x08\xD36`\x04a\x02\xEFV[a\x08\xEFa\x08\xDEa\x08\xB4V[a\x08\xE6a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x90` \x82\x82\x03\x12a\t\x11Wa\t\x0E\x91_\x01a\x05&V[\x90V[a\x02>V[4a\tDWa\t.a\t)6`\x04a\x08\xF8V[a\x1A\xAEV[a\t6a\x024V[\x80a\t@\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\tR\x81a\x02\x93V[\x03a\tYWV[_\x80\xFD[\x90P5\x90a\tj\x82a\tIV[V[\x90` \x82\x82\x03\x12a\t\x85Wa\t\x82\x91_\x01a\t]V[\x90V[a\x02>V[4a\t\xB8Wa\t\xA2a\t\x9D6`\x04a\tlV[a\x1BhV[a\t\xAAa\x024V[\x80a\t\xB4\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\t\xC9`\n_\x90a\x03\xBBV[\x90V[4a\t\xFCWa\t\xDC6`\x04a\x02\xEFV[a\t\xF8a\t\xE7a\t\xBDV[a\t\xEFa\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x90\x91``\x82\x84\x03\x12a\n6Wa\n3a\n\x1C\x84_\x85\x01a\x05\x03V[\x93a\n*\x81` \x86\x01a\x05&V[\x93`@\x01a\x05\x03V[\x90V[a\x02>V[4a\njWa\nTa\nN6`\x04a\n\x01V[\x91a\x1B\xE4V[a\n\\a\x024V[\x80a\nf\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[4a\n\x9DWa\n\x87a\n\x826`\x04a\x08\xF8V[a\x1C\x19V[a\n\x8Fa\x024V[\x80a\n\x99\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\n\xE9W[` \x83\x10\x14a\n\xE4WV[a\n\xB5V[\x91`\x7F\x16\x91a\n\xD9V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x0B\x1Fa\x0B\x18\x83a\n\xC9V[\x80\x94a\n\xF3V[\x91`\x01\x81\x16\x90\x81_\x14a\x0BvWP`\x01\x14a\x0B:W[PPPV[a\x0BG\x91\x92\x93\x94Pa\n\xFCV[\x91_\x92[\x81\x84\x10a\x0B^WPP\x01\x90_\x80\x80a\x0B5V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x0BKV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x0B5V[\x90a\x0B\x9B\x91a\x0B\x05V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0B\xC6\x90a\x0B\x9EV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\xE0W`@RV[a\x0B\xA8V[\x90a\x0C\x05a\x0B\xFE\x92a\x0B\xF5a\x024V[\x93\x84\x80\x92a\x0B\x91V[\x03\x83a\x0B\xBCV[V[\x90_\x10a\x0C\x1AWa\x0C\x17\x90a\x0B\xE5V[\x90V[a\n\xA2V[a\x0C+`\x07_\x90a\x0C\x07V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0Cea\x0Cn` \x93a\x0Cs\x93a\x0C\\\x81a\x0C.V[\x93\x84\x80\x93a\x0C2V[\x95\x86\x91\x01a\x0C;V[a\x0B\x9EV[\x01\x90V[a\x0C\x8C\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0CFV[\x90V[4a\x0C\xBFWa\x0C\x9F6`\x04a\x02\xEFV[a\x0C\xBBa\x0C\xAAa\x0C\x1FV[a\x0C\xB2a\x024V[\x91\x82\x91\x82a\x0CwV[\x03\x90\xF3[a\x02:V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\xDF\x90`\x08a\x0C\xE4\x93\x02a\x03\x9CV[a\x0C\xC4V[\x90V[\x90a\x0C\xF2\x91Ta\x0C\xCFV[\x90V[a\r\x01`\x08_\x90a\x0C\xE7V[\x90V[\x91\x90a\r\x17\x90_` \x85\x01\x94\x01\x90a\x03\x15V[V[4a\rIWa\r)6`\x04a\x02\xEFV[a\rEa\r4a\x0C\xF5V[a\r<a\x024V[\x91\x82\x91\x82a\r\x04V[\x03\x90\xF3[a\x02:V[a\rZ`\x04_\x90a\x03\xBBV[\x90V[4a\r\x8DWa\rm6`\x04a\x02\xEFV[a\r\x89a\rxa\rNV[a\r\x80a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[\x90` \x82\x82\x03\x12a\r\xABWa\r\xA8\x91_\x01a\x05\x03V[\x90V[a\x02>V[4a\r\xDEWa\r\xC8a\r\xC36`\x04a\r\x92V[a\x1D\x1AV[a\r\xD0a\x024V[\x80a\r\xDA\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\r\xEF`\x0B_\x90a\x03\xBBV[\x90V[4a\x0E\"Wa\x0E\x026`\x04a\x02\xEFV[a\x0E\x1Ea\x0E\ra\r\xE3V[a\x0E\x15a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\x02:V[4a\x0EXWa\x0ETa\x0ECa\x0E=6`\x04a\x07\x14V[\x90a\x1D\\V[a\x0EKa\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xF3[a\x02:V[\x90V[_\x1B\x90V[a\x0Eya\x0Eta\x0E~\x92a\x0E]V[a\x0E`V[a\x04QV[\x90V[a\x0E\x8A_a\x0EeV[\x90V[a\x0E\x95a\x0E\x81V[\x90V[4a\x0E\xC8Wa\x0E\xA86`\x04a\x02\xEFV[a\x0E\xC4a\x0E\xB3a\x0E\x8DV[a\x0E\xBBa\x024V[\x91\x82\x91\x82a\x04aV[\x03\x90\xF3[a\x02:V[4a\x0E\xFBWa\x0E\xE5a\x0E\xE06`\x04a\x08\xF8V[a\x1E\x14V[a\x0E\xEDa\x024V[\x80a\x0E\xF7\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[a\x0F\x0C`\x02_\x90a\x0C\xE7V[\x90V[4a\x0F?Wa\x0F\x1F6`\x04a\x02\xEFV[a\x0F;a\x0F*a\x0F\0V[a\x0F2a\x024V[\x91\x82\x91\x82a\r\x04V[\x03\x90\xF3[a\x02:V[\x90\x91``\x82\x84\x03\x12a\x0FyWa\x0Fva\x0F_\x84_\x85\x01a\x05\x03V[\x93a\x0Fm\x81` \x86\x01a\x05&V[\x93`@\x01a\x05&V[\x90V[a\x02>V[4a\x0F\xADWa\x0F\x97a\x0F\x916`\x04a\x0FDV[\x91a\x1E\x9EV[a\x0F\x9Fa\x024V[\x80a\x0F\xA9\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[4a\x0F\xE1Wa\x0F\xCBa\x0F\xC56`\x04a\x07\x14V[\x90a\x1E\xD5V[a\x0F\xD3a\x024V[\x80a\x0F\xDD\x81a\x05\xD2V[\x03\x90\xF3[a\x02:V[`\xFF\x16\x90V[a\x0F\xFC\x90`\x08a\x10\x01\x93\x02a\x03\x9CV[a\x0F\xE6V[\x90V[\x90a\x10\x0F\x91Ta\x0F\xECV[\x90V[a\x10\x1F`\x02`\x14\x90a\x10\x04V[\x90V[4a\x10RWa\x1026`\x04a\x02\xEFV[a\x10Na\x10=a\x10\x12V[a\x10Ea\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xF3[a\x02:V[`@\x90a\x10\x83a\x10xa\x10\x8A\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0CFV[\x96` \x83\x01\x90a\x03\x15V[\x01\x90a\x02\x98V[V[4a\x10\xBFWa\x10\x9C6`\x04a\x02\xEFV[a\x10\xBBa\x10\xA7a\x1E\xF2V[a\x10\xB2\x93\x91\x93a\x024V[\x93\x84\x93\x84a\x10WV[\x03\x90\xF3[a\x02:V[`@\x90a\x10\xEDa\x10\xF4\x94\x96\x95\x93\x96a\x10\xE3``\x84\x01\x98_\x85\x01\x90a\x03%V[` \x83\x01\x90a\x03%V[\x01\x90a\x03%V[V[4a\x11)Wa\x11\x066`\x04a\x02\xEFV[a\x11%a\x11\x11a\x1FWV[a\x11\x1C\x93\x91\x93a\x024V[\x93\x84\x93\x84a\x10\xC4V[\x03\x90\xF3[a\x02:V[_\x80\xFD[_\x90V[a\x11>a\x112V[P\x80a\x11Ya\x11Scye\xDB\x0B`\xE0\x1Ba\x02FV[\x91a\x02FV[\x14\x90\x81\x15a\x11fW[P\x90V[a\x11p\x91Pa\x1F\xE5V[_a\x11bV[_\x90V[_\x90V[_\x1C\x90V[a\x11\x8Fa\x11\x94\x91a\x11~V[a\x0C\xC4V[\x90V[a\x11\xA1\x90Ta\x11\x83V[\x90V[a\x11\xB0a\x11\xB5\x91a\x11~V[a\x03\xA0V[\x90V[a\x11\xC2\x90Ta\x11\xA4V[\x90V[a\x11\xCDa\x11vV[Pa\x11\xD6a\x11zV[Pa\x11\xDFa\x11zV[Pa\x11\xEA`\x08a\x11\x97V[a\x11\xF4`\ta\x11\xB8V[\x91a\x11\xFF`\na\x11\xB8V[\x91\x92\x91\x90V[\x90a\x12\x19\x93\x92\x91a\x12\x14a 7V[a\x12JV[a\x12!a \xBBV[V[`\xA0\x1C\x90V[a\x125a\x12:\x91a\x12#V[a\x0F\xE6V[\x90V[a\x12G\x90Ta\x12)V[\x90V[\x92\x91\x90a\x12`a\x12Z`\x02a\x12=V[\x15a\x02\x93V[a\x12oWa\x12m\x93a\x12\x8BV[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x12\x87`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x92\x91\x90a\x12\xA9a\x12\xA3a\x12\x9Ca\x07uV[3\x90a\x1D\\V[\x15a\x02\x93V[a\x12\xB8Wa\x12\xB6\x93a\x14\x01V[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x12\xD0`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90V[a\x12\xEBa\x12\xE6a\x12\xF0\x92a\x0E]V[a\x12\xD4V[a\x02\xFEV[\x90V[a\x12\xFC\x90a\x12\xD7V[\x90V[a\x13\x13a\x13\x0Ea\x13\x18\x92a\x0E]V[a\x12\xD4V[a\x03\"V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13>a\x13D\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x82\x01\x80\x92\x11a\x13OWV[a\x13\x1BV[a\x13ha\x13ca\x13m\x92a\x02\xFEV[a\x12\xD4V[a\x02\xFEV[\x90V[a\x13y\x90a\x13TV[\x90V[a\x13\x85\x90a\x13pV[\x90V[a\x13\x91\x90a\x13TV[\x90V[a\x13\x9D\x90a\x13\x88V[\x90V[\x90a\x13\xAC_\x19\x91a\x0E`V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\xCAa\x13\xC5a\x13\xCF\x92a\x03\"V[a\x12\xD4V[a\x03\"V[\x90V[\x90V[\x90a\x13\xEAa\x13\xE5a\x13\xF1\x92a\x13\xB6V[a\x13\xD2V[\x82Ta\x13\xA0V[\x90UV[a\x13\xFE\x90a\x13\x88V[\x90V[\x91\x92\x90\x92\x82a\x14 a\x14\x1Aa\x14\x15_a\x12\xF3V[a\x03\tV[\x91a\x03\tV[\x14a\x15\x90W\x83a\x148a\x142_a\x12\xFFV[\x91a\x03\"V[\x14a\x15tW\x83a\x14Ya\x14Sa\x14N`\x03a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11a\x15XWa\x14fa!$V[a\x14za\x14s`\x05a\x11\xB8V[\x85\x90a\x13/V[a\x14\x95a\x14\x8Fa\x14\x8A`\x04a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11a\x15<Wa\x14\xC7\x91a\x14\xBCa\x14\xAA\x85a\x13|V[3a\x14\xB40a\x13\x94V[\x90\x88\x92a\"0V[\x83\x91\x85\x90\x91\x92a$\xB2V[a\x14\xE4a\x14\xDD\x83a\x14\xD8`\x05a\x11\xB8V[a\x13/V[`\x05a\x13\xD5V[a\x14\xEE`\x02a\x11\x97V[\x90a\x157a\x15%a\x15\x1F\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x13\xF5V[\x93a\x13\xF5V[\x93a\x15.a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x15T`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x15p`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x15\x8C`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x15\xA8`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90a\x15\xB8\x93\x92\x91a\x12\x05V[V[\x90a\x15\xD4\x91a\x15\xCFa\x15\xCAa\x04\"V[a&\xCEV[a\x18\x83V[V[a\x15\xDF\x90a\x13\x88V[\x90V[` \x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: zero addres_\x82\x01R\x01RV[a\x16<`!`@\x92a\x0C2V[a\x16E\x81a\x15\xE2V[\x01\x90V[a\x16^\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16/V[\x90V[\x15a\x16hWV[a\x16pa\x024V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x86`\x04\x82\x01a\x16IV[\x03\x90\xFD[a\x16\x93\x90a\x13\x88V[\x90V[` \x7Ft balance\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: insufficien_\x82\x01R\x01RV[a\x16\xF0`)`@\x92a\x0C2V[a\x16\xF9\x81a\x16\x96V[\x01\x90V[a\x17\x12\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xE3V[\x90V[\x15a\x17\x1CWV[a\x17$a\x024V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17:`\x04\x82\x01a\x16\xFDV[\x03\x90\xFD[\x90P\x90V[a\x17N_\x80\x92a\x17>V[\x01\x90V[a\x17[\x90a\x17CV[\x90V[\x90a\x17qa\x17ja\x024V[\x92\x83a\x0B\xBCV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x17\x91Wa\x17\x8D` \x91a\x0B\x9EV[\x01\x90V[a\x0B\xA8V[\x90a\x17\xA8a\x17\xA3\x83a\x17sV[a\x17^V[\x91\x82RV[``\x90V[=_\x14a\x17\xCDWa\x17\xC2=a\x17\x96V[\x90=_` \x84\x01>[V[a\x17\xD5a\x17\xADV[\x90a\x17\xCBV[` \x7Fr failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrumBridgeProxy: ETH transfe_\x82\x01R\x01RV[a\x185`(`@\x92a\x0C2V[a\x18>\x81a\x17\xDBV[\x01\x90V[a\x18W\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18(V[\x90V[\x15a\x18aWV[a\x18ia\x024V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\x7F`\x04\x82\x01a\x18BV[\x03\x90\xFD[a\x18\xA8\x81a\x18\xA1a\x18\x9Ba\x18\x96_a\x12\xF3V[a\x03\tV[\x91a\x15\xD6V[\x14\x15a\x16aV[a\x18\xCE\x82a\x18\xC7a\x18\xC1a\x18\xBB0a\x16\x8AV[1a\x03\"V[\x91a\x03\"V[\x11\x15a\x17\x15V[a\x19\x02_\x80a\x18\xDC\x84a\x15\xD6V[\x85a\x18\xE5a\x024V[\x90\x81a\x18\xF0\x81a\x17RV[\x03\x92Z\xF1a\x18\xFCa\x17\xB2V[Pa\x18ZV[a\x19Aa\x19/\x7F\x84U\xAEk\xE5\xD9/\x1D\xF1\xC3\xC1HC\x88\xE2G\xA3l~`\xD7 U\xAE!m\xBC%\x8F%}K\x92a\x15\xD6V[\x92a\x198a\x024V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xA2V[\x90a\x19P\x91a\x15\xBAV[V[_\x90V[a\x19_\x90a\x04QV[\x90V[\x90a\x19l\x90a\x19VV[_R` R`@_ \x90V[\x90V[a\x19\x87a\x19\x8C\x91a\x11~V[a\x19xV[\x90V[a\x19\x99\x90Ta\x19{V[\x90V[`\x01a\x19\xB4a\x19\xBA\x92a\x19\xADa\x19RV[P_a\x19bV[\x01a\x19\x8FV[\x90V[\x90a\x19\xD8\x91a\x19\xD3a\x19\xCE\x82a\x19\x9CV[a&\xCEV[a\x19\xDAV[V[\x90a\x19\xE4\x91a'\x18V[PV[\x90a\x19\xF1\x91a\x19\xBDV[V[\x90\x80a\x1A\x0Ea\x1A\x08a\x1A\x03a'\xC3V[a\x03\tV[\x91a\x03\tV[\x03a\x1A\x1FWa\x1A\x1C\x91a'\xD0V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x1A7`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[a\x1AJa\x1AP\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x91a\x1A\\\x83\x82\x02a\x03\"V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1AkWV[a\x13\x1BV[\x90a\x1A\x83\x91a\x1A}a\x11zV[Pa\x1A;V[\x90V[a\x1A\x9F\x90a\x1A\x9Aa\x1A\x95a\x04\"V[a&\xCEV[a\x1A\xA1V[V[a\x1A\xAC\x90`\x0Ba\x13\xD5V[V[a\x1A\xB7\x90a\x1A\x86V[V[a\x1A\xD2\x90a\x1A\xCDa\x1A\xC8a\x04\"V[a&\xCEV[a\x1B\"V[V[`\xA0\x1B\x90V[\x90a\x1A\xE9`\xFF`\xA0\x1B\x91a\x1A\xD4V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\xFC\x90a\x02\x93V[\x90V[\x90V[\x90a\x1B\x17a\x1B\x12a\x1B\x1E\x92a\x1A\xF3V[a\x1A\xFFV[\x82Ta\x1A\xDAV[\x90UV[a\x1B-\x81`\x02a\x1B\x02V[a\x1Bc\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x1BZa\x024V[\x91\x82\x91\x82a\x02\xA5V[\x03\x90\xA1V[a\x1Bq\x90a\x1A\xB9V[V[\x90a\x1B\x8E\x92\x91a\x1B\x89a\x1B\x84a\x0E\x81V[a&\xCEV[a\x1B\x90V[V[\x91\x90\x81a\x1B\xADa\x1B\xA7a\x1B\xA2_a\x12\xF3V[a\x03\tV[\x91a\x03\tV[\x14a\x1B\xC8Wa\x1B\xBEa\x1B\xC6\x93a\x13|V[\x91\x90\x91a(\x94V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1B\xE0`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90a\x1B\xEF\x92\x91a\x1BsV[V[a\x1C\n\x90a\x1C\x05a\x1C\0a\x04\"V[a&\xCEV[a\x1C\x0CV[V[a\x1C\x17\x90`\x03a\x13\xD5V[V[a\x1C\"\x90a\x1B\xF1V[V[a\x1C=\x90a\x1C8a\x1C3a\x04\"V[a&\xCEV[a\x1C}V[V[\x90a\x1CP`\x01\x80`\xA0\x1B\x03\x91a\x0E`V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x1Cra\x1Cma\x1Cy\x92a\x13\xF5V[a\x1CZV[\x82Ta\x1C?V[\x90UV[\x80a\x1C\x98a\x1C\x92a\x1C\x8D_a\x12\xF3V[a\x03\tV[\x91a\x03\tV[\x14a\x1C\xFEWa\x1C\xA7`\x02a\x11\x97V[a\x1C\xB2\x82`\x02a\x1C]V[\x90a\x1C\xE6a\x1C\xE0\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x13\xF5V[\x91a\x13\xF5V[\x91a\x1C\xEFa\x024V[\x80a\x1C\xF9\x81a\x05\xD2V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x1D\x16`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[a\x1D#\x90a\x1C$V[V[\x90a\x1D/\x90a\x13\xF5V[_R` R`@_ \x90V[a\x1DGa\x1DL\x91a\x11~V[a\x0F\xE6V[\x90V[a\x1DY\x90Ta\x1D;V[\x90V[a\x1D\x82\x91_a\x1Dwa\x1D}\x93a\x1Dpa\x112V[P\x82a\x19bV[\x01a\x1D%V[a\x1DOV[\x90V[a\x1D\x9E\x90a\x1D\x99a\x1D\x94a\x04\"V[a&\xCEV[a\x1D\xC3V[V[\x91` a\x1D\xC1\x92\x94\x93a\x1D\xBA`@\x82\x01\x96_\x83\x01\x90a\x03%V[\x01\x90a\x03%V[V[a\x1D\xCD`\x04a\x11\xB8V[a\x1D\xD8\x82`\x04a\x13\xD5V[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x1E\x0Fa\x1E\x06a\x024V[\x92\x83\x92\x83a\x1D\xA0V[\x03\x90\xA1V[a\x1E\x1D\x90a\x1D\x85V[V[\x90a\x1E:\x92\x91a\x1E5a\x1E0a\x04\"V[a&\xCEV[a\x1E<V[V[\x91\x90\x91a\x1EJ\x81`\x08a\x1C]V[a\x1EU\x83`\ta\x13\xD5V[a\x1E`\x82`\na\x13\xD5V[\x91\x90\x91a\x1E\x99\x7F\xB1\xE1g\x7F \x9A\x97L\xED\xA2\xC2\xABh\x15A\xC5\xDB\x04-\xB4\xA9\xB3T\xDD\xACy7D`\xDA2\0\x93a\x1E\x90a\x024V[\x93\x84\x93\x84a\x032V[\x03\x90\xA1V[\x90a\x1E\xA9\x92\x91a\x1E\x1FV[V[\x90a\x1E\xC6\x91a\x1E\xC1a\x1E\xBC\x82a\x19\x9CV[a&\xCEV[a\x1E\xC8V[V[\x90a\x1E\xD2\x91a'\xD0V[PV[\x90a\x1E\xDF\x91a\x1E\xABV[V[``\x90V[a\x1E\xEF\x90a\x0B\xE5V[\x90V[a\x1E\xFAa\x1E\xE1V[Pa\x1F\x03a\x11vV[Pa\x1F\x0Ca\x112V[P`\x07a\x1F\x19`\x02a\x11\x97V[\x91a\x1F-a\x1F'`\x02a\x12=V[\x92a\x1E\xE6V[\x92\x91\x90V[a\x1FAa\x1FG\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x82\x03\x91\x82\x11a\x1FRWV[a\x13\x1BV[a\x1F_a\x11zV[Pa\x1Fha\x11zV[Pa\x1Fqa\x11zV[Pa\x1F|`\x05a\x11\xB8V[a\x1F\x86`\x04a\x11\xB8V[\x91a\x1F\x91`\x04a\x11\xB8V[a\x1F\xACa\x1F\xA6a\x1F\xA1`\x05a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11_\x14a\x1F\xD7Wa\x1F\xD0a\x1F\xC0`\x04a\x11\xB8V[a\x1F\xCA`\x05a\x11\xB8V[\x90a\x1F2V[[\x91\x92\x91\x90V[a\x1F\xE0_a\x12\xFFV[a\x1F\xD1V[a\x1F\xEDa\x112V[Pa \x07a \x01c\x01\xFF\xC9\xA7`\xE0\x1Ba\x02FV[\x91a\x02FV[\x14\x90V[\x90V[a \"a \x1Da '\x92a \x0BV[a\x12\xD4V[a\x03\"V[\x90V[a 4`\x02a \x0EV[\x90V[a A`\x01a\x11\xB8V[a Za Ta Oa *V[a\x03\"V[\x91a\x03\"V[\x14a sWa qa ja *V[`\x01a\x13\xD5V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a \x8B`\x04\x82\x01a\x05\xD2V[\x03\x90\xFD[\x90V[a \xA6a \xA1a \xAB\x92a \x8FV[a\x12\xD4V[a\x03\"V[\x90V[a \xB8`\x01a \x92V[\x90V[a \xCDa \xC6a \xAEV[`\x01a\x13\xD5V[V[\x90V[a \xE6a \xE1a \xEB\x92a \xCFV[a\x12\xD4V[a\x03\"V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a!\x0Ea!\x14\x91a\x03\"V[\x91a\x03\"V[\x90\x81\x15a!\x1FW\x04\x90V[a \xEEV[a!:Ba!4b\x01Q\x80a \xD2V[\x90a!\x02V[\x80a!Va!Pa!K`\x06a\x11\xB8V[a\x03\"V[\x91a\x03\"V[\x11a!_W[PV[\x80a!\xC1\x91a!n`\x05a\x11\xB8V[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a!\xA4a!\x9Ba\x024V[\x92\x83\x92\x83a\x1D\xA0V[\x03\x90\xA1a!\xBAa!\xB3_a\x12\xFFV[`\x05a\x13\xD5V[`\x06a\x13\xD5V[_a!\\V[a!\xD0\x90a\x13\x88V[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[`\xE0\x1B\x90V[a!\xF6a!\xF1a!\xFB\x92a!\xD3V[a!\xDCV[a\x02FV[\x90V[`@\x90a\"'a\".\x94\x96\x95\x93\x96a\"\x1D``\x84\x01\x98_\x85\x01\x90a\x03\x15V[` \x83\x01\x90a\x03\x15V[\x01\x90a\x03%V[V[`\x04\x92a\"ja\"~\x95\x93a\"y\x93\x94a\"Qc#\xB8r\xDD\x92\x94\x91\x92a!\xE2V[\x93a\"Za\x024V[\x97\x88\x95` \x87\x01\x90\x81R\x01a!\xFEV[` \x82\x01\x81\x03\x82R\x03\x83a\x0B\xBCV[a(\xE2V[V[P\x90V[\x90\x91``\x82\x84\x03\x12a\"\xB9Wa\"\xB6a\"\x9F\x84_\x85\x01a\x06.V[\x93a\"\xAD\x81` \x86\x01a\x05&V[\x93`@\x01a\x05&V[\x90V[a\x02>V[a\"\xD6a\"\xD0a\"\xDC\x92\x95\x93\x95a\x15\xD6V[\x94a\x13\xB6V[\x92a\x13\xB6V[\x90V[a\"\xE8\x90a\x13TV[\x90V[a\"\xF4\x90a\"\xDFV[\x90V[a#\0\x90a\x13\x88V[\x90V[\x90PQ\x90a#\x10\x82a\x04\xEFV[V[\x90` \x82\x82\x03\x12a#+Wa#(\x91_\x01a#\x03V[\x90V[a\x02>V[a#8a\x024V[=_\x82>=\x90\xFD[a#K_\x80\x92a\x0C2V[\x01\x90V[\x90a#r\x91a#e`@\x82\x01\x92_\x83\x01\x90a\x03%V[` \x81\x83\x03\x91\x01Ra#@V[\x90V[_\x80\xFD[\x90\x92\x91\x92a#\x8Ea#\x89\x82a\x17sV[a\x17^V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a#\xAAWa#\xA8\x92a\x0C;V[V[a#uV[\x90\x80`\x1F\x83\x01\x12\x15a#\xCDW\x81` a#\xCA\x93Q\x91\x01a#yV[\x90V[a\x055V[\x90` \x82\x82\x03\x12a$\x02W_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a#\xFDWa#\xFA\x92\x01a#\xAFV[\x90V[a\x02BV[a\x02>V[Q\x90V[` \x91\x81R\x01\x90V[a$3a$<` \x93a$A\x93a$*\x81a$\x07V[\x93\x84\x80\x93a$\x0BV[\x95\x86\x91\x01a\x0C;V[a\x0B\x9EV[\x01\x90V[\x93\x94a$\x8Ea$\xAF\x98\x96a$\x84a$\xA2\x96a$za$\x98\x96\x9B\x97a$p`\xE0\x8C\x01\x9D_\x8D\x01\x90a\x03\x15V[` \x8B\x01\x90a\x03\x15V[`@\x89\x01\x90a\x03\x15V[``\x87\x01\x90a\x03%V[`\x80\x85\x01\x90a\x03%V[`\xA0\x83\x01\x90a\x03%V[`\xC0\x81\x84\x03\x91\x01Ra$\x14V[\x90V[\x92\x90\x91a$\xC0\x81\x83\x90a\"\x80V[a$\xD2a$\xCC_a\x12\xFFV[\x91a\x03\"V[\x11_\x14a&\xA0Wa$\xEEa%\x7F\x94\x92a$\xF4\x92\x90\x81\x01\x90a\"\x84V[\x91a\"\xBEV[\x92\x91\x94\x90\x94[\x94\x92\x91a%\x1Ba%\x0B\x85\x85\x90a\x1A;V[a%\x15`\x0Ba\x11\xB8V[\x90a\x13/V[\x92a%9a%(\x83a\x13|V[a%2`\x02a\x11\x97V[\x88\x91a)\xC6V[` a%Ua%Pa%K`\x02a\x11\x97V[a\"\xEBV[a\"\xF7V[c\xBD\xA0\t\xFE\x90a%t\x85\x92a%ha\x024V[\x97\x88\x94\x85\x93\x84\x93a!\xDCV[\x83R`\x04\x83\x01a\r\x04V[\x03\x91Z\xFA\x80\x15a&\x9BW_\x96a%\xAFa&6\x92a&+\x96\x8A\x91a&mW[Pa%\xA7\x86a\x13|V[\x90\x83\x91a)\xC6V[a%\xD3a%\xE2a%\xBF`\x0Ba\x11\xB8V[a%\xC7a\x024V[\x92\x83\x91` \x83\x01a#OV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\xBCV[a%\xFCa%\xF7a%\xF2`\x02a\x11\x97V[a\"\xEBV[a\"\xF7V[\x93cO\xB1\xA0{\x97\x94\x97\x94\x95\x98a&\x110a\x16\x8AV[\x9B\x93\x90\x91\x92\x93a&\x1Fa\x024V[\x9C\x8D\x9B\x8C\x9A\x8B\x99a!\xDCV[\x89R`\x04\x89\x01a$EV[\x03\x92Z\xF1\x80\x15a&hWa&HW[PV[a&c\x90=\x80_\x83>a&[\x81\x83a\x0B\xBCV[\x81\x01\x90a#\xD2V[a&EV[a#0V[a&\x8E\x91P` =\x81\x11a&\x94W[a&\x86\x81\x83a\x0B\xBCV[\x81\x01\x90a#\x12V[_a%\x9DV[P=a&|V[a#0V[PPa&\xAC`\x08a\x11\x97V[\x91a&\xB7`\ta\x11\xB8V[\x90a%\x7Fa&\xC5`\na\x11\xB8V[\x94\x92\x94\x92a$\xFAV[a&\xE0\x90a&\xDAa'\xC3V[\x90a*\xA5V[V[\x90a&\xEE`\xFF\x91a\x0E`V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a'\ra'\x08a'\x14\x92a\x1A\xF3V[a\x1A\xFFV[\x82Ta&\xE2V[\x90UV[a' a\x112V[Pa'5a'/\x82\x84\x90a\x1D\\V[\x15a\x02\x93V[_\x14a'\xBDWa'\\`\x01a'W_a'O\x81\x86\x90a\x19bV[\x01\x85\x90a\x1D%V[a&\xF8V[\x90a'ea'\xC3V[\x90a'\xA2a'\x9Ca'\x96\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x19VV[\x92a\x13\xF5V[\x92a\x13\xF5V[\x92a'\xABa\x024V[\x80a'\xB5\x81a\x05\xD2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a'\xCBa\x11vV[P3\x90V[a'\xD8a\x112V[Pa'\xE4\x81\x83\x90a\x1D\\V[_\x14a(kWa(\n_a(\x05_a'\xFD\x81\x86\x90a\x19bV[\x01\x85\x90a\x1D%V[a&\xF8V[\x90a(\x13a'\xC3V[\x90a(Pa(Ja(D\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x19VV[\x92a\x13\xF5V[\x92a\x13\xF5V[\x92a(Ya\x024V[\x80a(c\x81a\x05\xD2V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a(\x92\x92\x94\x93a(\x8B`@\x82\x01\x96_\x83\x01\x90a\x03\x15V[\x01\x90a\x03%V[V[\x90a(\xDBa(\xE0\x93a(\xCC`\x04\x94\x93a(\xB3c\xA9\x05\x9C\xBB\x91\x93\x91a!\xE2V[\x92a(\xBCa\x024V[\x96\x87\x94` \x86\x01\x90\x81R\x01a(qV[` \x82\x01\x81\x03\x82R\x03\x83a\x0B\xBCV[a(\xE2V[V[\x90_` \x91a(\xEFa\x11zV[Pa(\xF8a\x11zV[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a)\x8BW=_Q\x90a)\x1Da)\x17_a\x12\xFFV[\x91a\x03\"V[\x14_\x14a)qWPa).\x81a!\xC7V[;a)Aa);_a\x12\xFFV[\x91a\x03\"V[\x14[a)JWPV[a)Va)m\x91a!\xC7V[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\r\x04V[\x03\x90\xFD[a)\x84a)~`\x01a \x92V[\x91a\x03\"V[\x14\x15a)CV[`@Q=_\x82>=\x90\xFD[a)\x9F\x90a\x12\xFFV[\x90RV[\x91` a)\xC4\x92\x94\x93a)\xBD`@\x82\x01\x96_\x83\x01\x90a\x03\x15V[\x01\x90a)\x96V[V[\x90\x91a*\t`\x04\x91a)\xFAc\t^\xA7\xB3a)\xE1\x87\x93\x91a!\xE2V[\x92a)\xEAa\x024V[\x95\x86\x94` \x86\x01\x90\x81R\x01a(qV[` \x82\x01\x81\x03\x82R\x03\x82a\x0B\xBCV[\x90a*\x1Ea*\x18\x82\x84\x90a*\xE0V[\x15a\x02\x93V[a*(W[PPPV[a*u`\x04a*z\x94a*p\x84\x91a*ac\t^\xA7\xB3a*H_\x91a!\xE2V[\x92a*Qa\x024V[\x96\x87\x94` \x86\x01\x90\x81R\x01a)\xA3V[` \x82\x01\x81\x03\x82R\x03\x83a\x0B\xBCV[a(\xE2V[a(\xE2V[_\x80\x80a*#V[\x91` a*\xA3\x92\x94\x93a*\x9C`@\x82\x01\x96_\x83\x01\x90a\x03\x15V[\x01\x90a\x04TV[V[\x90a*\xBAa*\xB4\x83\x83\x90a\x1D\\V[\x15a\x02\x93V[a*\xC2WPPV[a*\xDC_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a*\x82V[\x03\x90\xFD[\x90_` \x91a*\xEDa\x112V[Pa*\xF6a\x112V[Pa*\xFFa\x11zV[Pa+\x08a\x11zV[P\x82\x81Q\x91\x01\x82\x85Z\xF1=\x91_Q\x91\x92\x83a+$W[PPP\x90V[\x90\x91\x92Pa+:a+4_a\x12\xFFV[\x91a\x03\"V[\x14_\x14a+hWa+K\x91Pa!\xC7V[;a+^a+X_a\x12\xFFV[\x91a\x03\"V[\x11[_\x80\x80a+\x1EV[Pa+|a+v`\x01a \x92V[\x91a\x03\"V[\x14a+`V",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `BridgeCallFailed(string)` and selector `0xd245b2d3`.
```solidity
error BridgeCallFailed(string reason);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeCallFailed {
        #[allow(missing_docs)]
        pub reason: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeCallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeCallFailed) -> Self {
                (value.reason,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeCallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { reason: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeCallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeCallFailed(string)";
            const SELECTOR: [u8; 4] = [210u8, 69u8, 178u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.reason,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `BridgeNotActive()` and selector `0x7bea20b2`.
```solidity
error BridgeNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeNotActive()";
            const SELECTOR: [u8; 4] = [123u8, 234u8, 32u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExcessiveAmount()` and selector `0x70d168bc`.
```solidity
error ExcessiveAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExcessiveAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExcessiveAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ExcessiveAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExcessiveAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExcessiveAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExcessiveAmount()";
            const SELECTOR: [u8; 4] = [112u8, 209u8, 104u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`.
```solidity
error SafeERC20FailedOperation(address token);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeERC20FailedOperation {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeERC20FailedOperation>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeERC20FailedOperation) -> Self {
                (value.token,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeERC20FailedOperation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { token: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeERC20FailedOperation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeERC20FailedOperation(address)";
            const SELECTOR: [u8; 4] = [82u8, 116u8, 175u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UnauthorizedCaller()` and selector `0x5c427cd9`.
```solidity
error UnauthorizedCaller();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorizedCaller {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedCaller> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedCaller) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedCaller {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedCaller {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedCaller()";
            const SELECTOR: [u8; 4] = [92u8, 66u8, 124u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ArbitrumConfigUpdated(address,uint256,uint256)` and selector `0xb1e1677f209a974ceda2c2ab681541c5db042db4a9b354ddac79374460da3200`.
```solidity
event ArbitrumConfigUpdated(address recipient, uint256 maxGas, uint256 gasPriceBid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ArbitrumConfigUpdated {
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ArbitrumConfigUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ArbitrumConfigUpdated(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                177u8,
                225u8,
                103u8,
                127u8,
                32u8,
                154u8,
                151u8,
                76u8,
                237u8,
                162u8,
                194u8,
                171u8,
                104u8,
                21u8,
                65u8,
                197u8,
                219u8,
                4u8,
                45u8,
                180u8,
                169u8,
                179u8,
                84u8,
                221u8,
                172u8,
                121u8,
                55u8,
                68u8,
                96u8,
                218u8,
                50u8,
                0u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    recipient: data.0,
                    maxGas: data.1,
                    gasPriceBid: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasPriceBid),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ArbitrumConfigUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ArbitrumConfigUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ArbitrumConfigUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeExecuted(address,uint256,address)` and selector `0x3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8`.
```solidity
event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeExecuted {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeExecuted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeExecuted(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: topics.1,
                    amount: data.0,
                    target: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token.clone(), self.target.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.target,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeStatusUpdated(bool)` and selector `0xb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d5`.
```solidity
event BridgeStatusUpdated(bool active);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeStatusUpdated {
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeStatusUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "BridgeStatusUpdated(bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { active: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeTargetUpdated(address,address)` and selector `0xb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069`.
```solidity
event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeTargetUpdated {
        #[allow(missing_docs)]
        pub oldTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newTarget: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeTargetUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeTargetUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldTarget: topics.1,
                    newTarget: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldTarget.clone(),
                    self.newTarget.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldTarget,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newTarget,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeTargetUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeTargetUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeTargetUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitReset(uint256,uint256)` and selector `0xda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab`.
```solidity
event DailyLimitReset(uint256 day, uint256 previousUsed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitReset {
        #[allow(missing_docs)]
        pub day: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousUsed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitReset {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitReset(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    day: data.0,
                    previousUsed: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.day),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousUsed),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitReset {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitReset> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitReset) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitUpdated(uint256,uint256)` and selector `0x207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf`.
```solidity
event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitUpdated {
        #[allow(missing_docs)]
        pub oldLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldLimit: data.0,
                    newLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `EthWithdrawn(address,uint256)` and selector `0x8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b`.
```solidity
event EthWithdrawn(address indexed to, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EthWithdrawn {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EthWithdrawn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "EthWithdrawn(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                132u8,
                85u8,
                174u8,
                107u8,
                229u8,
                217u8,
                47u8,
                29u8,
                241u8,
                195u8,
                193u8,
                72u8,
                67u8,
                136u8,
                226u8,
                71u8,
                163u8,
                108u8,
                126u8,
                96u8,
                215u8,
                32u8,
                85u8,
                174u8,
                33u8,
                109u8,
                188u8,
                37u8,
                143u8,
                37u8,
                125u8,
                75u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    to: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EthWithdrawn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EthWithdrawn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EthWithdrawn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _recipient, uint256 _maxGas, uint256 _gasPriceBid);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub caller: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _bridgeTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.admin,
                        value.caller,
                        value._bridgeTarget,
                        value._maxSingleTransfer,
                        value._dailyLimit,
                        value._recipient,
                        value._maxGas,
                        value._gasPriceBid,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        caller: tuple.1,
                        _bridgeTarget: tuple.2,
                        _maxSingleTransfer: tuple.3,
                        _dailyLimit: tuple.4,
                        _recipient: tuple.5,
                        _maxGas: tuple.6,
                        _gasPriceBid: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._bridgeTarget,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxSingleTransfer),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._dailyLimit),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
        }
    };
    /**Function with signature `BRIDGE_ADMIN_ROLE()` and selector `0x118c38c7`.
```solidity
function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_ADMIN_ROLE()`](BRIDGE_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 56u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `BRIDGE_CALLER_ROLE()` and selector `0x3462fac3`.
```solidity
function BRIDGE_CALLER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_CALLER_ROLE()`](BRIDGE_CALLER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_CALLER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_CALLER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_CALLER_ROLE()";
            const SELECTOR: [u8; 4] = [52u8, 98u8, 250u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeActive()` and selector `0xead93c8f`.
```solidity
function bridgeActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveCall {}
    ///Container type for the return parameters of the [`bridgeActive()`](bridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeActive()";
            const SELECTOR: [u8; 4] = [234u8, 217u8, 60u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeName()` and selector `0x65d7a3c9`.
```solidity
function bridgeName() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameCall {}
    ///Container type for the return parameters of the [`bridgeName()`](bridgeNameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeNameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeNameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeName()";
            const SELECTOR: [u8; 4] = [101u8, 215u8, 163u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeTarget()` and selector `0xc9f5b63e`.
```solidity
function bridgeTarget() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetCall {}
    ///Container type for the return parameters of the [`bridgeTarget()`](bridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeTargetCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeTargetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeTarget()";
            const SELECTOR: [u8; 4] = [201u8, 245u8, 182u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEthValue(uint256,uint256)` and selector `0x4a65855a`.
```solidity
function calculateEthValue(uint256 _maxGas, uint256 _gasPriceBid) external pure returns (uint256 ethValue);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEthValueCall {
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEthValue(uint256,uint256)`](calculateEthValueCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEthValueReturn {
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEthValueCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEthValueCall) -> Self {
                    (value._maxGas, value._gasPriceBid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEthValueCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _maxGas: tuple.0,
                        _gasPriceBid: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEthValueReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEthValueReturn) -> Self {
                    (value.ethValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEthValueReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { ethValue: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEthValueCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEthValueReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEthValue(uint256,uint256)";
            const SELECTOR: [u8; 4] = [74u8, 101u8, 133u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyLimit()` and selector `0x67eeba0c`.
```solidity
function dailyLimit() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitCall {}
    ///Container type for the return parameters of the [`dailyLimit()`](dailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyLimitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyLimit()";
            const SELECTOR: [u8; 4] = [103u8, 238u8, 186u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyUsed()` and selector `0x1033b4cc`.
```solidity
function dailyUsed() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedCall {}
    ///Container type for the return parameters of the [`dailyUsed()`](dailyUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyUsedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyUsedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyUsed()";
            const SELECTOR: [u8; 4] = [16u8, 51u8, 180u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBridge(address,uint256,bytes)` and selector `0x18b68b8c`.
```solidity
function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dynamicData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeBridge(address,uint256,bytes)`](executeBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeCall) -> Self {
                    (value.token, value.amount, value.dynamicData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        dynamicData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBridgeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBridge(address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [24u8, 182u8, 139u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.dynamicData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `gasPriceBid()` and selector `0x5d942ac1`.
```solidity
function gasPriceBid() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasPriceBidCall {}
    ///Container type for the return parameters of the [`gasPriceBid()`](gasPriceBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasPriceBidReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasPriceBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: gasPriceBidCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasPriceBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasPriceBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: gasPriceBidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasPriceBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for gasPriceBidCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = gasPriceBidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "gasPriceBid()";
            const SELECTOR: [u8; 4] = [93u8, 148u8, 42u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getArbitrumConfig()` and selector `0x0e1508d9`.
```solidity
function getArbitrumConfig() external view returns (address recipientAddr, uint256 maxGasLimit, uint256 gasPriceBidAmount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getArbitrumConfigCall {}
    ///Container type for the return parameters of the [`getArbitrumConfig()`](getArbitrumConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getArbitrumConfigReturn {
        #[allow(missing_docs)]
        pub recipientAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxGasLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBidAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getArbitrumConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getArbitrumConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getArbitrumConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getArbitrumConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getArbitrumConfigReturn) -> Self {
                    (value.recipientAddr, value.maxGasLimit, value.gasPriceBidAmount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getArbitrumConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipientAddr: tuple.0,
                        maxGasLimit: tuple.1,
                        gasPriceBidAmount: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getArbitrumConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getArbitrumConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getArbitrumConfig()";
            const SELECTOR: [u8; 4] = [14u8, 21u8, 8u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeInfo()` and selector `0xede7cebd`.
```solidity
function getBridgeInfo() external view returns (string memory name, address target, bool active);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoCall {}
    ///Container type for the return parameters of the [`getBridgeInfo()`](getBridgeInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoReturn {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoReturn) -> Self {
                    (value.name, value.target, value.active)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        target: tuple.1,
                        active: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeInfoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeInfoReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeInfo()";
            const SELECTOR: [u8; 4] = [237u8, 231u8, 206u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getDailyUsage()` and selector `0xfb8c4b51`.
```solidity
function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageCall {}
    ///Container type for the return parameters of the [`getDailyUsage()`](getDailyUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageReturn {
        #[allow(missing_docs)]
        pub used: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub remaining: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageCall> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageReturn) -> Self {
                    (value.used, value.limit, value.remaining)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        used: tuple.0,
                        limit: tuple.1,
                        remaining: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getDailyUsageCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getDailyUsageReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getDailyUsage()";
            const SELECTOR: [u8; 4] = [251u8, 140u8, 75u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `lastResetDay()` and selector `0x1259a5c8`.
```solidity
function lastResetDay() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayCall {}
    ///Container type for the return parameters of the [`lastResetDay()`](lastResetDayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayCall> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastResetDayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastResetDayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastResetDay()";
            const SELECTOR: [u8; 4] = [18u8, 89u8, 165u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxGas()` and selector `0x501d815c`.
```solidity
function maxGas() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxGasCall {}
    ///Container type for the return parameters of the [`maxGas()`](maxGasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxGasReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxGasCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxGasCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxGasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxGasReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxGasReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxGasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxGasCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxGasReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxGas()";
            const SELECTOR: [u8; 4] = [80u8, 29u8, 129u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxSingleTransfer()` and selector `0x36b089d8`.
```solidity
function maxSingleTransfer() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferCall {}
    ///Container type for the return parameters of the [`maxSingleTransfer()`](maxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxSingleTransferCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxSingleTransferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxSingleTransfer()";
            const SELECTOR: [u8; 4] = [54u8, 176u8, 137u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxSubmissionCost()` and selector `0x70123fee`.
```solidity
function maxSubmissionCost() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSubmissionCostCall {}
    ///Container type for the return parameters of the [`maxSubmissionCost()`](maxSubmissionCostCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSubmissionCostReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSubmissionCostCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSubmissionCostCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSubmissionCostCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSubmissionCostReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSubmissionCostReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSubmissionCostReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxSubmissionCostCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxSubmissionCostReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxSubmissionCost()";
            const SELECTOR: [u8; 4] = [112u8, 18u8, 63u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recipient()` and selector `0x66d003ac`.
```solidity
function recipient() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientCall {}
    ///Container type for the return parameters of the [`recipient()`](recipientCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientCall> for UnderlyingRustTuple<'_> {
                fn from(value: recipientCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recipientReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recipientCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recipientReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recipient()";
            const SELECTOR: [u8; 4] = [102u8, 208u8, 3u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recoverTokens(address,uint256,address)` and selector `0x61b0a56e`.
```solidity
function recoverTokens(address token, uint256 amount, address to) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`recoverTokens(address,uint256,address)`](recoverTokensCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensCall> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensCall) -> Self {
                    (value.token, value.amount, value.to)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        to: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recoverTokensCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recoverTokensReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recoverTokens(address,uint256,address)";
            const SELECTOR: [u8; 4] = [97u8, 176u8, 165u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setArbitrumConfig(address,uint256,uint256)` and selector `0xcaed5c7f`.
```solidity
function setArbitrumConfig(address _recipient, uint256 _maxGas, uint256 _gasPriceBid) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setArbitrumConfigCall {
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setArbitrumConfig(address,uint256,uint256)`](setArbitrumConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setArbitrumConfigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setArbitrumConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setArbitrumConfigCall) -> Self {
                    (value._recipient, value._maxGas, value._gasPriceBid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setArbitrumConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _recipient: tuple.0,
                        _maxGas: tuple.1,
                        _gasPriceBid: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setArbitrumConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setArbitrumConfigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setArbitrumConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setArbitrumConfigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setArbitrumConfigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setArbitrumConfig(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [202u8, 237u8, 92u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeActive(bool)` and selector `0x5ab1d61c`.
```solidity
function setBridgeActive(bool active) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveCall {
        #[allow(missing_docs)]
        pub active: bool,
    }
    ///Container type for the return parameters of the [`setBridgeActive(bool)`](setBridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveCall) -> Self {
                    (value.active,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { active: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeActive(bool)";
            const SELECTOR: [u8; 4] = [90u8, 177u8, 214u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeTarget(address)` and selector `0x6bcc8c14`.
```solidity
function setBridgeTarget(address target) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetCall {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBridgeTarget(address)`](setBridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetCall) -> Self {
                    (value.target,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { target: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeTargetCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeTargetReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeTarget(address)";
            const SELECTOR: [u8; 4] = [107u8, 204u8, 140u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDailyLimit(uint256)` and selector `0xb20d30a9`.
```solidity
function setDailyLimit(uint256 limit) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitCall {
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setDailyLimit(uint256)`](setDailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitCall) -> Self {
                    (value.limit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { limit: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDailyLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDailyLimitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDailyLimit(uint256)";
            const SELECTOR: [u8; 4] = [178u8, 13u8, 48u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxSingleTransfer(uint256)` and selector `0x63221490`.
```solidity
function setMaxSingleTransfer(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferCall {
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxSingleTransfer(uint256)`](setMaxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxSingleTransferCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxSingleTransferReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxSingleTransfer(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 34u8, 20u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxSubmissionCost(uint256)` and selector `0x5a042545`.
```solidity
function setMaxSubmissionCost(uint256 _maxSubmissionCost) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSubmissionCostCall {
        #[allow(missing_docs)]
        pub _maxSubmissionCost: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxSubmissionCost(uint256)`](setMaxSubmissionCostCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSubmissionCostReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSubmissionCostCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSubmissionCostCall) -> Self {
                    (value._maxSubmissionCost,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSubmissionCostCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _maxSubmissionCost: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSubmissionCostReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSubmissionCostReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSubmissionCostReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxSubmissionCostCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxSubmissionCostReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxSubmissionCost(uint256)";
            const SELECTOR: [u8; 4] = [90u8, 4u8, 37u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxSubmissionCost),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdrawEth(address,uint256)` and selector `0x1b9a91a4`.
```solidity
function withdrawEth(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawEthCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`withdrawEth(address,uint256)`](withdrawEthCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawEthReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawEthCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawEthCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawEthCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawEthReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawEthReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawEthReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawEthCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawEthReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawEth(address,uint256)";
            const SELECTOR: [u8; 4] = [27u8, 154u8, 145u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbitrumBridgeProxy`](self) function calls.
    pub enum ArbitrumBridgeProxyCalls {
        #[allow(missing_docs)]
        BRIDGE_ADMIN_ROLE(BRIDGE_ADMIN_ROLECall),
        #[allow(missing_docs)]
        BRIDGE_CALLER_ROLE(BRIDGE_CALLER_ROLECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        bridgeActive(bridgeActiveCall),
        #[allow(missing_docs)]
        bridgeName(bridgeNameCall),
        #[allow(missing_docs)]
        bridgeTarget(bridgeTargetCall),
        #[allow(missing_docs)]
        calculateEthValue(calculateEthValueCall),
        #[allow(missing_docs)]
        dailyLimit(dailyLimitCall),
        #[allow(missing_docs)]
        dailyUsed(dailyUsedCall),
        #[allow(missing_docs)]
        executeBridge(executeBridgeCall),
        #[allow(missing_docs)]
        gasPriceBid(gasPriceBidCall),
        #[allow(missing_docs)]
        getArbitrumConfig(getArbitrumConfigCall),
        #[allow(missing_docs)]
        getBridgeInfo(getBridgeInfoCall),
        #[allow(missing_docs)]
        getDailyUsage(getDailyUsageCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        lastResetDay(lastResetDayCall),
        #[allow(missing_docs)]
        maxGas(maxGasCall),
        #[allow(missing_docs)]
        maxSingleTransfer(maxSingleTransferCall),
        #[allow(missing_docs)]
        maxSubmissionCost(maxSubmissionCostCall),
        #[allow(missing_docs)]
        recipient(recipientCall),
        #[allow(missing_docs)]
        recoverTokens(recoverTokensCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        setArbitrumConfig(setArbitrumConfigCall),
        #[allow(missing_docs)]
        setBridgeActive(setBridgeActiveCall),
        #[allow(missing_docs)]
        setBridgeTarget(setBridgeTargetCall),
        #[allow(missing_docs)]
        setDailyLimit(setDailyLimitCall),
        #[allow(missing_docs)]
        setMaxSingleTransfer(setMaxSingleTransferCall),
        #[allow(missing_docs)]
        setMaxSubmissionCost(setMaxSubmissionCostCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        withdrawEth(withdrawEthCall),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [14u8, 21u8, 8u8, 217u8],
            [16u8, 51u8, 180u8, 204u8],
            [17u8, 140u8, 56u8, 199u8],
            [18u8, 89u8, 165u8, 200u8],
            [24u8, 182u8, 139u8, 140u8],
            [27u8, 154u8, 145u8, 164u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [52u8, 98u8, 250u8, 195u8],
            [54u8, 86u8, 138u8, 190u8],
            [54u8, 176u8, 137u8, 216u8],
            [74u8, 101u8, 133u8, 90u8],
            [80u8, 29u8, 129u8, 92u8],
            [90u8, 4u8, 37u8, 69u8],
            [90u8, 177u8, 214u8, 28u8],
            [93u8, 148u8, 42u8, 193u8],
            [97u8, 176u8, 165u8, 110u8],
            [99u8, 34u8, 20u8, 144u8],
            [101u8, 215u8, 163u8, 201u8],
            [102u8, 208u8, 3u8, 172u8],
            [103u8, 238u8, 186u8, 12u8],
            [107u8, 204u8, 140u8, 20u8],
            [112u8, 18u8, 63u8, 238u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [178u8, 13u8, 48u8, 169u8],
            [201u8, 245u8, 182u8, 62u8],
            [202u8, 237u8, 92u8, 127u8],
            [213u8, 71u8, 116u8, 31u8],
            [234u8, 217u8, 60u8, 143u8],
            [237u8, 231u8, 206u8, 189u8],
            [251u8, 140u8, 75u8, 81u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbitrumBridgeProxyCalls {
        const NAME: &'static str = "ArbitrumBridgeProxyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 33usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BRIDGE_ADMIN_ROLE(_) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BRIDGE_CALLER_ROLE(_) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeActive(_) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeName(_) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeTarget(_) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEthValue(_) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyLimit(_) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyUsed(_) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeBridge(_) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::gasPriceBid(_) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getArbitrumConfig(_) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeInfo(_) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getDailyUsage(_) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::lastResetDay(_) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxGas(_) => <maxGasCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::maxSingleTransfer(_) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxSubmissionCost(_) => {
                    <maxSubmissionCostCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recipient(_) => {
                    <recipientCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recoverTokens(_) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setArbitrumConfig(_) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeActive(_) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeTarget(_) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDailyLimit(_) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxSingleTransfer(_) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxSubmissionCost(_) => {
                    <setMaxSubmissionCostCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdrawEth(_) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getArbitrumConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getArbitrumConfig)
                    }
                    getArbitrumConfig
                },
                {
                    fn dailyUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <dailyUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::dailyUsed)
                    }
                    dailyUsed
                },
                {
                    fn BRIDGE_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::BRIDGE_ADMIN_ROLE)
                    }
                    BRIDGE_ADMIN_ROLE
                },
                {
                    fn lastResetDay(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <lastResetDayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::lastResetDay)
                    }
                    lastResetDay
                },
                {
                    fn executeBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <executeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::executeBridge)
                    }
                    executeBridge
                },
                {
                    fn withdrawEth(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <withdrawEthCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::withdrawEth)
                    }
                    withdrawEth
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn BRIDGE_CALLER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::BRIDGE_CALLER_ROLE)
                    }
                    BRIDGE_CALLER_ROLE
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn maxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxSingleTransfer)
                    }
                    maxSingleTransfer
                },
                {
                    fn calculateEthValue(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <calculateEthValueCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::calculateEthValue)
                    }
                    calculateEthValue
                },
                {
                    fn maxGas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxGasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxGas)
                    }
                    maxGas
                },
                {
                    fn setMaxSubmissionCost(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setMaxSubmissionCostCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setMaxSubmissionCost)
                    }
                    setMaxSubmissionCost
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn gasPriceBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <gasPriceBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::gasPriceBid)
                    }
                    gasPriceBid
                },
                {
                    fn recoverTokens(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <recoverTokensCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::recoverTokens)
                    }
                    recoverTokens
                },
                {
                    fn setMaxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setMaxSingleTransfer)
                    }
                    setMaxSingleTransfer
                },
                {
                    fn bridgeName(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeNameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeName)
                    }
                    bridgeName
                },
                {
                    fn recipient(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <recipientCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::recipient)
                    }
                    recipient
                },
                {
                    fn dailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <dailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::dailyLimit)
                    }
                    dailyLimit
                },
                {
                    fn setBridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setBridgeTarget)
                    }
                    setBridgeTarget
                },
                {
                    fn maxSubmissionCost(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <maxSubmissionCostCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::maxSubmissionCost)
                    }
                    maxSubmissionCost
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn setDailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setDailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setDailyLimit)
                    }
                    setDailyLimit
                },
                {
                    fn bridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeTarget)
                    }
                    bridgeTarget
                },
                {
                    fn setArbitrumConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::setArbitrumConfig)
                    }
                    setArbitrumConfig
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn bridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <bridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::bridgeActive)
                    }
                    bridgeActive
                },
                {
                    fn getBridgeInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getBridgeInfo)
                    }
                    getBridgeInfo
                },
                {
                    fn getDailyUsage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyCalls> {
                        <getDailyUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyCalls::getDailyUsage)
                    }
                    getDailyUsage
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::calculateEthValue(inner) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::gasPriceBid(inner) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getArbitrumConfig(inner) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxGas(inner) => {
                    <maxGasCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxSubmissionCost(inner) => {
                    <maxSubmissionCostCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setArbitrumConfig(inner) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxSubmissionCost(inner) => {
                    <setMaxSubmissionCostCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdrawEth(inner) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEthValue(inner) => {
                    <calculateEthValueCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::gasPriceBid(inner) => {
                    <gasPriceBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getArbitrumConfig(inner) => {
                    <getArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxGas(inner) => {
                    <maxGasCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxSubmissionCost(inner) => {
                    <maxSubmissionCostCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setArbitrumConfig(inner) => {
                    <setArbitrumConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxSubmissionCost(inner) => {
                    <setMaxSubmissionCostCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawEth(inner) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbitrumBridgeProxy`](self) custom errors.
    pub enum ArbitrumBridgeProxyErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        BridgeCallFailed(BridgeCallFailed),
        #[allow(missing_docs)]
        BridgeNotActive(BridgeNotActive),
        #[allow(missing_docs)]
        ExcessiveAmount(ExcessiveAmount),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
        #[allow(missing_docs)]
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        #[allow(missing_docs)]
        UnauthorizedCaller(UnauthorizedCaller),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [31u8, 42u8, 32u8, 5u8],
            [62u8, 229u8, 174u8, 181u8],
            [82u8, 116u8, 175u8, 231u8],
            [92u8, 66u8, 124u8, 217u8],
            [102u8, 151u8, 178u8, 50u8],
            [112u8, 209u8, 104u8, 188u8],
            [123u8, 234u8, 32u8, 178u8],
            [210u8, 69u8, 178u8, 211u8],
            [217u8, 46u8, 35u8, 61u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbitrumBridgeProxyErrors {
        const NAME: &'static str = "ArbitrumBridgeProxyErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeCallFailed(_) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeNotActive(_) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExcessiveAmount(_) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeERC20FailedOperation(_) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedCaller(_) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors>] = &[
                {
                    fn ZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn SafeERC20FailedOperation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::SafeERC20FailedOperation)
                    }
                    SafeERC20FailedOperation
                },
                {
                    fn UnauthorizedCaller(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <UnauthorizedCaller as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::UnauthorizedCaller)
                    }
                    UnauthorizedCaller
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExcessiveAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ExcessiveAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ExcessiveAmount)
                    }
                    ExcessiveAmount
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn BridgeCallFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <BridgeCallFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::BridgeCallFailed)
                    }
                    BridgeCallFailed
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbitrumBridgeProxyErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbitrumBridgeProxyErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                ArbitrumBridgeProxyErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`ArbitrumBridgeProxy`](self) events.
    pub enum ArbitrumBridgeProxyEvents {
        #[allow(missing_docs)]
        ArbitrumConfigUpdated(ArbitrumConfigUpdated),
        #[allow(missing_docs)]
        BridgeExecuted(BridgeExecuted),
        #[allow(missing_docs)]
        BridgeStatusUpdated(BridgeStatusUpdated),
        #[allow(missing_docs)]
        BridgeTargetUpdated(BridgeTargetUpdated),
        #[allow(missing_docs)]
        DailyLimitReset(DailyLimitReset),
        #[allow(missing_docs)]
        DailyLimitUpdated(DailyLimitUpdated),
        #[allow(missing_docs)]
        EthWithdrawn(EthWithdrawn),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl ArbitrumBridgeProxyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ],
            [
                132u8,
                85u8,
                174u8,
                107u8,
                229u8,
                217u8,
                47u8,
                29u8,
                241u8,
                195u8,
                193u8,
                72u8,
                67u8,
                136u8,
                226u8,
                71u8,
                163u8,
                108u8,
                126u8,
                96u8,
                215u8,
                32u8,
                85u8,
                174u8,
                33u8,
                109u8,
                188u8,
                37u8,
                143u8,
                37u8,
                125u8,
                75u8,
            ],
            [
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ],
            [
                177u8,
                225u8,
                103u8,
                127u8,
                32u8,
                154u8,
                151u8,
                76u8,
                237u8,
                162u8,
                194u8,
                171u8,
                104u8,
                21u8,
                65u8,
                197u8,
                219u8,
                4u8,
                45u8,
                180u8,
                169u8,
                179u8,
                84u8,
                221u8,
                172u8,
                121u8,
                55u8,
                68u8,
                96u8,
                218u8,
                50u8,
                0u8,
            ],
            [
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbitrumBridgeProxyEvents {
        const NAME: &'static str = "ArbitrumBridgeProxyEvents";
        const COUNT: usize = 10usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ArbitrumConfigUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ArbitrumConfigUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ArbitrumConfigUpdated)
                }
                Some(<BridgeExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeExecuted)
                }
                Some(
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeStatusUpdated)
                }
                Some(
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeTargetUpdated)
                }
                Some(<DailyLimitReset as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DailyLimitReset as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitReset)
                }
                Some(
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitUpdated)
                }
                Some(<EthWithdrawn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <EthWithdrawn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::EthWithdrawn)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbitrumBridgeProxyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbitrumConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EthWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbitrumConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EthWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbitrumBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`ArbitrumBridgeProxyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbitrumBridgeProxyInstance<T, P, N> {
        ArbitrumBridgeProxyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _recipient: alloy::sol_types::private::Address,
        _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbitrumBridgeProxyInstance<T, P, N>>,
    > {
        ArbitrumBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _recipient,
            _maxGas,
            _gasPriceBid,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _recipient: alloy::sol_types::private::Address,
        _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbitrumBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _recipient,
            _maxGas,
            _gasPriceBid,
        )
    }
    /**A [`ArbitrumBridgeProxy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbitrumBridgeProxy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbitrumBridgeProxyInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbitrumBridgeProxyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbitrumBridgeProxyInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbitrumBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`ArbitrumBridgeProxyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<ArbitrumBridgeProxyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                caller,
                _bridgeTarget,
                _maxSingleTransfer,
                _dailyLimit,
                _recipient,
                _maxGas,
                _gasPriceBid,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            caller,
                            _bridgeTarget,
                            _maxSingleTransfer,
                            _dailyLimit,
                            _recipient,
                            _maxGas,
                            _gasPriceBid,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbitrumBridgeProxyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbitrumBridgeProxyInstance<T, P, N> {
            ArbitrumBridgeProxyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`BRIDGE_ADMIN_ROLE`] function.
        pub fn BRIDGE_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_ADMIN_ROLECall, N> {
            self.call_builder(&BRIDGE_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`BRIDGE_CALLER_ROLE`] function.
        pub fn BRIDGE_CALLER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_CALLER_ROLECall, N> {
            self.call_builder(&BRIDGE_CALLER_ROLECall {})
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`bridgeActive`] function.
        pub fn bridgeActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeActiveCall, N> {
            self.call_builder(&bridgeActiveCall {})
        }
        ///Creates a new call builder for the [`bridgeName`] function.
        pub fn bridgeName(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeNameCall, N> {
            self.call_builder(&bridgeNameCall {})
        }
        ///Creates a new call builder for the [`bridgeTarget`] function.
        pub fn bridgeTarget(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeTargetCall, N> {
            self.call_builder(&bridgeTargetCall {})
        }
        ///Creates a new call builder for the [`calculateEthValue`] function.
        pub fn calculateEthValue(
            &self,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEthValueCall, N> {
            self.call_builder(
                &calculateEthValueCall {
                    _maxGas,
                    _gasPriceBid,
                },
            )
        }
        ///Creates a new call builder for the [`dailyLimit`] function.
        pub fn dailyLimit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyLimitCall, N> {
            self.call_builder(&dailyLimitCall {})
        }
        ///Creates a new call builder for the [`dailyUsed`] function.
        pub fn dailyUsed(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyUsedCall, N> {
            self.call_builder(&dailyUsedCall {})
        }
        ///Creates a new call builder for the [`executeBridge`] function.
        pub fn executeBridge(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            dynamicData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBridgeCall, N> {
            self.call_builder(
                &executeBridgeCall {
                    token,
                    amount,
                    dynamicData,
                },
            )
        }
        ///Creates a new call builder for the [`gasPriceBid`] function.
        pub fn gasPriceBid(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, gasPriceBidCall, N> {
            self.call_builder(&gasPriceBidCall {})
        }
        ///Creates a new call builder for the [`getArbitrumConfig`] function.
        pub fn getArbitrumConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getArbitrumConfigCall, N> {
            self.call_builder(&getArbitrumConfigCall {})
        }
        ///Creates a new call builder for the [`getBridgeInfo`] function.
        pub fn getBridgeInfo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeInfoCall, N> {
            self.call_builder(&getBridgeInfoCall {})
        }
        ///Creates a new call builder for the [`getDailyUsage`] function.
        pub fn getDailyUsage(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getDailyUsageCall, N> {
            self.call_builder(&getDailyUsageCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`lastResetDay`] function.
        pub fn lastResetDay(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastResetDayCall, N> {
            self.call_builder(&lastResetDayCall {})
        }
        ///Creates a new call builder for the [`maxGas`] function.
        pub fn maxGas(&self) -> alloy_contract::SolCallBuilder<T, &P, maxGasCall, N> {
            self.call_builder(&maxGasCall {})
        }
        ///Creates a new call builder for the [`maxSingleTransfer`] function.
        pub fn maxSingleTransfer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxSingleTransferCall, N> {
            self.call_builder(&maxSingleTransferCall {})
        }
        ///Creates a new call builder for the [`maxSubmissionCost`] function.
        pub fn maxSubmissionCost(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxSubmissionCostCall, N> {
            self.call_builder(&maxSubmissionCostCall {})
        }
        ///Creates a new call builder for the [`recipient`] function.
        pub fn recipient(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, recipientCall, N> {
            self.call_builder(&recipientCall {})
        }
        ///Creates a new call builder for the [`recoverTokens`] function.
        pub fn recoverTokens(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            to: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, recoverTokensCall, N> {
            self.call_builder(
                &recoverTokensCall {
                    token,
                    amount,
                    to,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`setArbitrumConfig`] function.
        pub fn setArbitrumConfig(
            &self,
            _recipient: alloy::sol_types::private::Address,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setArbitrumConfigCall, N> {
            self.call_builder(
                &setArbitrumConfigCall {
                    _recipient,
                    _maxGas,
                    _gasPriceBid,
                },
            )
        }
        ///Creates a new call builder for the [`setBridgeActive`] function.
        pub fn setBridgeActive(
            &self,
            active: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeActiveCall, N> {
            self.call_builder(&setBridgeActiveCall { active })
        }
        ///Creates a new call builder for the [`setBridgeTarget`] function.
        pub fn setBridgeTarget(
            &self,
            target: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeTargetCall, N> {
            self.call_builder(&setBridgeTargetCall { target })
        }
        ///Creates a new call builder for the [`setDailyLimit`] function.
        pub fn setDailyLimit(
            &self,
            limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDailyLimitCall, N> {
            self.call_builder(&setDailyLimitCall { limit })
        }
        ///Creates a new call builder for the [`setMaxSingleTransfer`] function.
        pub fn setMaxSingleTransfer(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxSingleTransferCall, N> {
            self.call_builder(&setMaxSingleTransferCall { amount })
        }
        ///Creates a new call builder for the [`setMaxSubmissionCost`] function.
        pub fn setMaxSubmissionCost(
            &self,
            _maxSubmissionCost: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxSubmissionCostCall, N> {
            self.call_builder(
                &setMaxSubmissionCostCall {
                    _maxSubmissionCost,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`withdrawEth`] function.
        pub fn withdrawEth(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawEthCall, N> {
            self.call_builder(&withdrawEthCall { to, amount })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbitrumBridgeProxyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ArbitrumConfigUpdated`] event.
        pub fn ArbitrumConfigUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ArbitrumConfigUpdated, N> {
            self.event_filter::<ArbitrumConfigUpdated>()
        }
        ///Creates a new event filter for the [`BridgeExecuted`] event.
        pub fn BridgeExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeExecuted, N> {
            self.event_filter::<BridgeExecuted>()
        }
        ///Creates a new event filter for the [`BridgeStatusUpdated`] event.
        pub fn BridgeStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeStatusUpdated, N> {
            self.event_filter::<BridgeStatusUpdated>()
        }
        ///Creates a new event filter for the [`BridgeTargetUpdated`] event.
        pub fn BridgeTargetUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeTargetUpdated, N> {
            self.event_filter::<BridgeTargetUpdated>()
        }
        ///Creates a new event filter for the [`DailyLimitReset`] event.
        pub fn DailyLimitReset_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitReset, N> {
            self.event_filter::<DailyLimitReset>()
        }
        ///Creates a new event filter for the [`DailyLimitUpdated`] event.
        pub fn DailyLimitUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitUpdated, N> {
            self.event_filter::<DailyLimitUpdated>()
        }
        ///Creates a new event filter for the [`EthWithdrawn`] event.
        pub fn EthWithdrawn_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, EthWithdrawn, N> {
            self.event_filter::<EthWithdrawn>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
