/**

Generated by the following Solidity interface...
```solidity
interface UpdateAttestationDocVerifier {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod UpdateAttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55611749908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908163c04062261461007a575063f8ccbf4714610034575f80fd5b3461007757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007757602060ff600c5460101c166040519015158152f35b80fd5b905034610aee575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610aee57737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610aee577f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af18015610b9557610b82575b506040517f561fe54000000000000000000000000000000000000000000000000000000000815260406004820152602060448201527f4154544553544154494f4e5f444f435f56455249464945525f414444524553536064820152816024820152602081608481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b58578291610b63575b5073ffffffffffffffffffffffffffffffffffffffff811690811561042c57610222906040516101cd606082610ba0565b602d81527f4174746573746174696f6e20646f6320766572696669657220616c726561647960208201527f206465706c6f79656420746f3a000000000000000000000000000000000000006040820152610d0e565b6040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5445455f4b45595f4d414e414745525f414444524553530000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa80156104215773ffffffffffffffffffffffffffffffffffffffff9184916103f2575b5016826040926103018385516102d28782610ba0565b601981527f5465654b65794d616e6167657220696e20616464726573733a000000000000006020820152610d0e565b823b156103ee578173ffffffffffffffffffffffffffffffffffffffff60248293875194859384927faeddd0ba00000000000000000000000000000000000000000000000000000000845216978860048401525af180156103e4576103cb575b505081516103c8927f726966696572207570646174656420746f3a000000000000000000000000000090610396606084610ba0565b603283527f5465654b65794d616e61676572206174746573746174696f6e20646f632076656020840152820152610d0e565b80f35b816103d591610ba0565b6103e057825f610361565b8280fd5b84513d84823e3d90fd5b5080fd5b610414915060203d60201161041a575b61040c8183610ba0565b810190610c0e565b5f6102bc565b503d610402565b6040513d85823e3d90fd5b50505f806104d16104fd604051610444606082610ba0565b602581527f4465706c6f79696e67206174746573746174696f6e20646f632076657269666960208201527f65722e2e2e00000000000000000000000000000000000000000000000000000060408201526040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610ccb565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ba0565b6020815191016a636f6e736f6c652e6c6f675afa506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5350315f56455249464945525f414444524553530000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b58578291610b39575b50604051907f9794904200000000000000000000000000000000000000000000000000000000825260206004830152601e60248301527f4154544553544154494f4e5f444f435f56455249464945525f565f4b455900006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610421578392610b05575b506040517f9794904200000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524f4f545f434552545f484153480000000000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610afa578491610ac4575b506040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3000000000000000000000000000000000000000000000000000000060448201528481606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610ab9578591610a9f575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3100000000000000000000000000000000000000000000000000000060448201528581606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610a94578691610a7a575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3200000000000000000000000000000000000000000000000000000060448201528681606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610a6f578791610a4d575b506020815191012091604051937fc1978d1f00000000000000000000000000000000000000000000000000000000855260206004860152601460248601527f45585049524154494f4e5f544f4c4552414e43450000000000000000000000006044860152602085606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa948515610a42578895610a0a575b5060405196610993968789019789891067ffffffffffffffff8a11176109dd579267ffffffffffffffff959273ffffffffffffffffffffffffffffffffffffffff8b99969360e09b9996610db68c39168852602088015260408701526060860152608085015260a08401521660c082015203019082f080156109d0576109cb8173ffffffffffffffffffffffffffffffffffffffff60405191610974606084610ba0565b602583527f4174746573746174696f6e20646f63207665726966696572206465706c6f796560208401527f6420746f3a00000000000000000000000000000000000000000000000000000060408401521690610d0e565b610222565b50604051903d90823e3d90fd5b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b9094506020813d602011610a3a575b81610a2660209383610ba0565b81010312610a365751935f6108d0565b8780fd5b3d9150610a19565b6040513d8a823e3d90fd5b610a6991503d8089833e610a618183610ba0565b810190610c3a565b5f610841565b6040513d89823e3d90fd5b610a8e91503d8088833e610a618183610ba0565b5f6107b5565b6040513d88823e3d90fd5b610ab391503d8087833e610a618183610ba0565b5f610729565b6040513d87823e3d90fd5b90506020813d602011610af2575b81610adf60209383610ba0565b81010312610aee57515f6106a4565b5f80fd5b3d9150610ad2565b6040513d86823e3d90fd5b9091506020813d602011610b31575b81610b2160209383610ba0565b81010312610aee5751905f61061e565b3d9150610b14565b610b52915060203d60201161041a5761040c8183610ba0565b5f610597565b6040513d84823e3d90fd5b610b7c915060203d60201161041a5761040c8183610ba0565b5f61019c565b610b8e91505f90610ba0565b5f5f610110565b6040513d5f823e3d90fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610be157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90816020910312610aee575173ffffffffffffffffffffffffffffffffffffffff81168103610aee5790565b602081830312610aee5780519067ffffffffffffffff8211610aee570181601f82011215610aee5780519067ffffffffffffffff8211610be15760405192610caa601f84017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200185610ba0565b82845260208383010111610aee57815f9260208093018386015e8301015290565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b610d6b610d9e5f9392849373ffffffffffffffffffffffffffffffffffffffff6040519485937f319af333000000000000000000000000000000000000000000000000000000006020860152604060248601526064850190610ccb565b91166044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ba0565b6020815191016a636f6e736f6c652e6c6f675afa5056fe6101603461011a57601f61099338819003918201601f19168301916001600160401b0383118484101761011e5780849260e09460405283398101031261011a578051906001600160a01b038216820361011a576020810151604082015160608301519060808401519260c060a08601519501519560018060401b038716870361011a5760805260a05260c05260e052610100526101205261014052604051610860908161013382396080518181816103420152610783015260a051818181608d01526103a2015260c05181818161022a01526107bc015260e0518181816102b901526106fa01526101005181818161011001526102e0015261012051818181610307015261073401526101405181818160d401526102760152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f274146107a7575080632b7ac3f31461075757806338f3efd41461071d57806381a9d38a146106e3578063c22a969414610133578063cca3b4fe146100f8578063d46e5f01146100b35763e5951dd114610076575f80fd5b346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100b057806003193601126100b057602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e57604060031936011261047e5760043567ffffffffffffffff811161047e576101649036906004016107df565b60243567ffffffffffffffff811161047e576101849036906004016107df565b919060e084838101031261047e576040519360e0850185811067ffffffffffffffff8211176104465760405280358086526101c16020830161080d565b602087019081526101d46040840161080d565b6040880190815260608801906060850135825260808901926080860135845260a08a019460a0870135865260c08701359a73ffffffffffffffffffffffffffffffffffffffff8c168c0361047e5760c0019a8b527f000000000000000000000000000000000000000000000000000000000000000003610685575167ffffffffffffffff1642106106275767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105fa5767ffffffffffffffff16421161059c57517f00000000000000000000000000000000000000000000000000000000000000000361053e57517f0000000000000000000000000000000000000000000000000000000000000000036104e057517f0000000000000000000000000000000000000000000000000000000000000000036104825773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561047e575f936103e96103d794604051978896879586957f41493c600000000000000000000000000000000000000000000000000000000087527f00000000000000000000000000000000000000000000000000000000000000006004880152606060248801526064870191610822565b91600319858403016044860152610822565b03915afa80156104735761041a575b602073ffffffffffffffffffffffffffffffffffffffff835116604051908152f35b67ffffffffffffffff81116104465760405273ffffffffffffffffffffffffffffffffffffffff6103f8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461047e575f60031936011261047e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b9181601f8401121561047e5782359167ffffffffffffffff831161047e576020838186019501011161047e57565b359067ffffffffffffffff8216820361047e57565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x17I\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0zWPc\xF8\xCC\xBFG\x14a\x004W_\x80\xFD[4a\0wW\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0wW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[\x90P4a\n\xEEW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\n\xEEWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\n\xEEW\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x0B\x95Wa\x0B\x82W[P`@Q\x7FV\x1F\xE5@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`@`\x04\x82\x01R` `D\x82\x01R\x7FATTESTATION_DOC_VERIFIER_ADDRESS`d\x82\x01R\x81`$\x82\x01R` \x81`\x84\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0BXW\x82\x91a\x0BcW[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x90\x81\x15a\x04,Wa\x02\"\x90`@Qa\x01\xCD``\x82a\x0B\xA0V[`-\x81R\x7FAttestation doc verifier already` \x82\x01R\x7F deployed to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\r\x0EV[`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FTEE_KEY_MANAGER_ADDRESS\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x04!Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x84\x91a\x03\xF2W[P\x16\x82`@\x92a\x03\x01\x83\x85Qa\x02\xD2\x87\x82a\x0B\xA0V[`\x19\x81R\x7FTeeKeyManager in address:\0\0\0\0\0\0\0` \x82\x01Ra\r\x0EV[\x82;\x15a\x03\xEEW\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$\x82\x93\x87Q\x94\x85\x93\x84\x92\x7F\xAE\xDD\xD0\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R\x16\x97\x88`\x04\x84\x01RZ\xF1\x80\x15a\x03\xE4Wa\x03\xCBW[PP\x81Qa\x03\xC8\x92\x7Frifier updated to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x03\x96``\x84a\x0B\xA0V[`2\x83R\x7FTeeKeyManager attestation doc ve` \x84\x01R\x82\x01Ra\r\x0EV[\x80\xF3[\x81a\x03\xD5\x91a\x0B\xA0V[a\x03\xE0W\x82_a\x03aV[\x82\x80\xFD[\x84Q=\x84\x82>=\x90\xFD[P\x80\xFD[a\x04\x14\x91P` =` \x11a\x04\x1AW[a\x04\x0C\x81\x83a\x0B\xA0V[\x81\x01\x90a\x0C\x0EV[_a\x02\xBCV[P=a\x04\x02V[`@Q=\x85\x82>=\x90\xFD[PP_\x80a\x04\xD1a\x04\xFD`@Qa\x04D``\x82a\x0B\xA0V[`%\x81R\x7FDeploying attestation doc verifi` \x82\x01R\x7Fer...\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01R`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x0C\xCBV[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0B\xA0V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FSP1_VERIFIER_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0BXW\x82\x91a\x0B9W[P`@Q\x90\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x1E`$\x83\x01R\x7FATTESTATION_DOC_VERIFIER_V_KEY\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x04!W\x83\x92a\x0B\x05W[P`@Q\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FROOT_CERT_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\n\xFAW\x84\x91a\n\xC4W[P`@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x84\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\n\xB9W\x85\x91a\n\x9FW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x85\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\n\x94W\x86\x91a\nzW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x86\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\noW\x87\x91a\nMW[P` \x81Q\x91\x01 \x91`@Q\x93\x7F\xC1\x97\x8D\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R` `\x04\x86\x01R`\x14`$\x86\x01R\x7FEXPIRATION_TOLERANCE\0\0\0\0\0\0\0\0\0\0\0\0`D\x86\x01R` \x85`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x94\x85\x15a\nBW\x88\x95a\n\nW[P`@Q\x96a\t\x93\x96\x87\x89\x01\x97\x89\x89\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8A\x11\x17a\t\xDDW\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x99\x96\x93`\xE0\x9B\x99\x96a\r\xB6\x8C9\x16\x88R` \x88\x01R`@\x87\x01R``\x86\x01R`\x80\x85\x01R`\xA0\x84\x01R\x16`\xC0\x82\x01R\x03\x01\x90\x82\xF0\x80\x15a\t\xD0Wa\t\xCB\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\tt``\x84a\x0B\xA0V[`%\x83R\x7FAttestation doc verifier deploye` \x84\x01R\x7Fd to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x84\x01R\x16\x90a\r\x0EV[a\x02\"V[P`@Q\x90=\x90\x82>=\x90\xFD[`$\x8B\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x90\x94P` \x81=` \x11a\n:W[\x81a\n&` \x93\x83a\x0B\xA0V[\x81\x01\x03\x12a\n6WQ\x93_a\x08\xD0V[\x87\x80\xFD[=\x91Pa\n\x19V[`@Q=\x8A\x82>=\x90\xFD[a\ni\x91P=\x80\x89\x83>a\na\x81\x83a\x0B\xA0V[\x81\x01\x90a\x0C:V[_a\x08AV[`@Q=\x89\x82>=\x90\xFD[a\n\x8E\x91P=\x80\x88\x83>a\na\x81\x83a\x0B\xA0V[_a\x07\xB5V[`@Q=\x88\x82>=\x90\xFD[a\n\xB3\x91P=\x80\x87\x83>a\na\x81\x83a\x0B\xA0V[_a\x07)V[`@Q=\x87\x82>=\x90\xFD[\x90P` \x81=` \x11a\n\xF2W[\x81a\n\xDF` \x93\x83a\x0B\xA0V[\x81\x01\x03\x12a\n\xEEWQ_a\x06\xA4V[_\x80\xFD[=\x91Pa\n\xD2V[`@Q=\x86\x82>=\x90\xFD[\x90\x91P` \x81=` \x11a\x0B1W[\x81a\x0B!` \x93\x83a\x0B\xA0V[\x81\x01\x03\x12a\n\xEEWQ\x90_a\x06\x1EV[=\x91Pa\x0B\x14V[a\x0BR\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0B\xA0V[_a\x05\x97V[`@Q=\x84\x82>=\x90\xFD[a\x0B|\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0B\xA0V[_a\x01\x9CV[a\x0B\x8E\x91P_\x90a\x0B\xA0V[__a\x01\x10V[`@Q=_\x82>=\x90\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\xE1W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\n\xEEWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\n\xEEW\x90V[` \x81\x83\x03\x12a\n\xEEW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\xEEW\x01\x81`\x1F\x82\x01\x12\x15a\n\xEEW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\xE1W`@Q\x92a\x0C\xAA`\x1F\x84\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x85a\x0B\xA0V[\x82\x84R` \x83\x83\x01\x01\x11a\n\xEEW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[a\rka\r\x9E_\x93\x92\x84\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x94\x85\x93\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\x0C\xCBV[\x91\x16`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0B\xA0V[` \x81Q\x91\x01jconsole.logZ\xFAPV\xFEa\x01`4a\x01\x1AW`\x1Fa\t\x938\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\x01\x1EW\x80\x84\x92`\xE0\x94`@R\x839\x81\x01\x03\x12a\x01\x1AW\x80Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\x1AW` \x81\x01Q`@\x82\x01Q``\x83\x01Q\x90`\x80\x84\x01Q\x92`\xC0`\xA0\x86\x01Q\x95\x01Q\x95`\x01\x80`@\x1B\x03\x87\x16\x87\x03a\x01\x1AW`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@R`@Qa\x08`\x90\x81a\x013\x829`\x80Q\x81\x81\x81a\x03B\x01Ra\x07\x83\x01R`\xA0Q\x81\x81\x81`\x8D\x01Ra\x03\xA2\x01R`\xC0Q\x81\x81\x81a\x02*\x01Ra\x07\xBC\x01R`\xE0Q\x81\x81\x81a\x02\xB9\x01Ra\x06\xFA\x01Ra\x01\0Q\x81\x81\x81a\x01\x10\x01Ra\x02\xE0\x01Ra\x01 Q\x81\x81\x81a\x03\x07\x01Ra\x074\x01Ra\x01@Q\x81\x81\x81`\xD4\x01Ra\x02v\x01R\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\x07\xA7WP\x80c+z\xC3\xF3\x14a\x07WW\x80c8\xF3\xEF\xD4\x14a\x07\x1DW\x80c\x81\xA9\xD3\x8A\x14a\x06\xE3W\x80c\xC2*\x96\x94\x14a\x013W\x80c\xCC\xA3\xB4\xFE\x14a\0\xF8W\x80c\xD4n_\x01\x14a\0\xB3Wc\xE5\x95\x1D\xD1\x14a\0vW_\x80\xFD[4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W`@`\x03\x196\x01\x12a\x04~W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01d\x906\x90`\x04\x01a\x07\xDFV[`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01\x84\x906\x90`\x04\x01a\x07\xDFV[\x91\x90`\xE0\x84\x83\x81\x01\x03\x12a\x04~W`@Q\x93`\xE0\x85\x01\x85\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04FW`@R\x805\x80\x86Ra\x01\xC1` \x83\x01a\x08\rV[` \x87\x01\x90\x81Ra\x01\xD4`@\x84\x01a\x08\rV[`@\x88\x01\x90\x81R``\x88\x01\x90``\x85\x015\x82R`\x80\x89\x01\x92`\x80\x86\x015\x84R`\xA0\x8A\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x9As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16\x8C\x03a\x04~W`\xC0\x01\x9A\x8BR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06\x85WQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x06'Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xFAWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05\x9CWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05>WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xE0WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\x82Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04~W_\x93a\x03\xE9a\x03\xD7\x94`@Q\x97\x88\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\x08\"V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\x08\"V[\x03\x91Z\xFA\x80\x15a\x04sWa\x04\x1AW[` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x16`@Q\x90\x81R\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04FW`@Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03\xF8V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x91\x81`\x1F\x84\x01\x12\x15a\x04~W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04~W` \x83\x81\x86\x01\x95\x01\x01\x11a\x04~WV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04~WV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c908163c04062261461007a575063f8ccbf4714610034575f80fd5b3461007757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007757602060ff600c5460101c166040519015158152f35b80fd5b905034610aee575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610aee57737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610aee577f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af18015610b9557610b82575b506040517f561fe54000000000000000000000000000000000000000000000000000000000815260406004820152602060448201527f4154544553544154494f4e5f444f435f56455249464945525f414444524553536064820152816024820152602081608481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b58578291610b63575b5073ffffffffffffffffffffffffffffffffffffffff811690811561042c57610222906040516101cd606082610ba0565b602d81527f4174746573746174696f6e20646f6320766572696669657220616c726561647960208201527f206465706c6f79656420746f3a000000000000000000000000000000000000006040820152610d0e565b6040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5445455f4b45595f4d414e414745525f414444524553530000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa80156104215773ffffffffffffffffffffffffffffffffffffffff9184916103f2575b5016826040926103018385516102d28782610ba0565b601981527f5465654b65794d616e6167657220696e20616464726573733a000000000000006020820152610d0e565b823b156103ee578173ffffffffffffffffffffffffffffffffffffffff60248293875194859384927faeddd0ba00000000000000000000000000000000000000000000000000000000845216978860048401525af180156103e4576103cb575b505081516103c8927f726966696572207570646174656420746f3a000000000000000000000000000090610396606084610ba0565b603283527f5465654b65794d616e61676572206174746573746174696f6e20646f632076656020840152820152610d0e565b80f35b816103d591610ba0565b6103e057825f610361565b8280fd5b84513d84823e3d90fd5b5080fd5b610414915060203d60201161041a575b61040c8183610ba0565b810190610c0e565b5f6102bc565b503d610402565b6040513d85823e3d90fd5b50505f806104d16104fd604051610444606082610ba0565b602581527f4465706c6f79696e67206174746573746174696f6e20646f632076657269666960208201527f65722e2e2e00000000000000000000000000000000000000000000000000000060408201526040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610ccb565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ba0565b6020815191016a636f6e736f6c652e6c6f675afa506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5350315f56455249464945525f414444524553530000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b58578291610b39575b50604051907f9794904200000000000000000000000000000000000000000000000000000000825260206004830152601e60248301527f4154544553544154494f4e5f444f435f56455249464945525f565f4b455900006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610421578392610b05575b506040517f9794904200000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524f4f545f434552545f484153480000000000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610afa578491610ac4575b506040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3000000000000000000000000000000000000000000000000000000060448201528481606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610ab9578591610a9f575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3100000000000000000000000000000000000000000000000000000060448201528581606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610a94578691610a7a575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3200000000000000000000000000000000000000000000000000000060448201528681606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610a6f578791610a4d575b506020815191012091604051937fc1978d1f00000000000000000000000000000000000000000000000000000000855260206004860152601460248601527f45585049524154494f4e5f544f4c4552414e43450000000000000000000000006044860152602085606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa948515610a42578895610a0a575b5060405196610993968789019789891067ffffffffffffffff8a11176109dd579267ffffffffffffffff959273ffffffffffffffffffffffffffffffffffffffff8b99969360e09b9996610db68c39168852602088015260408701526060860152608085015260a08401521660c082015203019082f080156109d0576109cb8173ffffffffffffffffffffffffffffffffffffffff60405191610974606084610ba0565b602583527f4174746573746174696f6e20646f63207665726966696572206465706c6f796560208401527f6420746f3a00000000000000000000000000000000000000000000000000000060408401521690610d0e565b610222565b50604051903d90823e3d90fd5b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b9094506020813d602011610a3a575b81610a2660209383610ba0565b81010312610a365751935f6108d0565b8780fd5b3d9150610a19565b6040513d8a823e3d90fd5b610a6991503d8089833e610a618183610ba0565b810190610c3a565b5f610841565b6040513d89823e3d90fd5b610a8e91503d8088833e610a618183610ba0565b5f6107b5565b6040513d88823e3d90fd5b610ab391503d8087833e610a618183610ba0565b5f610729565b6040513d87823e3d90fd5b90506020813d602011610af2575b81610adf60209383610ba0565b81010312610aee57515f6106a4565b5f80fd5b3d9150610ad2565b6040513d86823e3d90fd5b9091506020813d602011610b31575b81610b2160209383610ba0565b81010312610aee5751905f61061e565b3d9150610b14565b610b52915060203d60201161041a5761040c8183610ba0565b5f610597565b6040513d84823e3d90fd5b610b7c915060203d60201161041a5761040c8183610ba0565b5f61019c565b610b8e91505f90610ba0565b5f5f610110565b6040513d5f823e3d90fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610be157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90816020910312610aee575173ffffffffffffffffffffffffffffffffffffffff81168103610aee5790565b602081830312610aee5780519067ffffffffffffffff8211610aee570181601f82011215610aee5780519067ffffffffffffffff8211610be15760405192610caa601f84017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200185610ba0565b82845260208383010111610aee57815f9260208093018386015e8301015290565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b610d6b610d9e5f9392849373ffffffffffffffffffffffffffffffffffffffff6040519485937f319af333000000000000000000000000000000000000000000000000000000006020860152604060248601526064850190610ccb565b91166044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ba0565b6020815191016a636f6e736f6c652e6c6f675afa5056fe6101603461011a57601f61099338819003918201601f19168301916001600160401b0383118484101761011e5780849260e09460405283398101031261011a578051906001600160a01b038216820361011a576020810151604082015160608301519060808401519260c060a08601519501519560018060401b038716870361011a5760805260a05260c05260e052610100526101205261014052604051610860908161013382396080518181816103420152610783015260a051818181608d01526103a2015260c05181818161022a01526107bc015260e0518181816102b901526106fa01526101005181818161011001526102e0015261012051818181610307015261073401526101405181818160d401526102760152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f274146107a7575080632b7ac3f31461075757806338f3efd41461071d57806381a9d38a146106e3578063c22a969414610133578063cca3b4fe146100f8578063d46e5f01146100b35763e5951dd114610076575f80fd5b346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100b057806003193601126100b057602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100b057806003193601126100b05760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e57604060031936011261047e5760043567ffffffffffffffff811161047e576101649036906004016107df565b60243567ffffffffffffffff811161047e576101849036906004016107df565b919060e084838101031261047e576040519360e0850185811067ffffffffffffffff8211176104465760405280358086526101c16020830161080d565b602087019081526101d46040840161080d565b6040880190815260608801906060850135825260808901926080860135845260a08a019460a0870135865260c08701359a73ffffffffffffffffffffffffffffffffffffffff8c168c0361047e5760c0019a8b527f000000000000000000000000000000000000000000000000000000000000000003610685575167ffffffffffffffff1642106106275767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105fa5767ffffffffffffffff16421161059c57517f00000000000000000000000000000000000000000000000000000000000000000361053e57517f0000000000000000000000000000000000000000000000000000000000000000036104e057517f0000000000000000000000000000000000000000000000000000000000000000036104825773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561047e575f936103e96103d794604051978896879586957f41493c600000000000000000000000000000000000000000000000000000000087527f00000000000000000000000000000000000000000000000000000000000000006004880152606060248801526064870191610822565b91600319858403016044860152610822565b03915afa80156104735761041a575b602073ffffffffffffffffffffffffffffffffffffffff835116604051908152f35b67ffffffffffffffff81116104465760405273ffffffffffffffffffffffffffffffffffffffff6103f8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461047e575f60031936011261047e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461047e575f60031936011261047e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b9181601f8401121561047e5782359167ffffffffffffffff831161047e576020838186019501011161047e57565b359067ffffffffffffffff8216820361047e57565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0zWPc\xF8\xCC\xBFG\x14a\x004W_\x80\xFD[4a\0wW\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0wW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[\x90P4a\n\xEEW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\n\xEEWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\n\xEEW\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x0B\x95Wa\x0B\x82W[P`@Q\x7FV\x1F\xE5@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`@`\x04\x82\x01R` `D\x82\x01R\x7FATTESTATION_DOC_VERIFIER_ADDRESS`d\x82\x01R\x81`$\x82\x01R` \x81`\x84\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0BXW\x82\x91a\x0BcW[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x90\x81\x15a\x04,Wa\x02\"\x90`@Qa\x01\xCD``\x82a\x0B\xA0V[`-\x81R\x7FAttestation doc verifier already` \x82\x01R\x7F deployed to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\r\x0EV[`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FTEE_KEY_MANAGER_ADDRESS\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x04!Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x84\x91a\x03\xF2W[P\x16\x82`@\x92a\x03\x01\x83\x85Qa\x02\xD2\x87\x82a\x0B\xA0V[`\x19\x81R\x7FTeeKeyManager in address:\0\0\0\0\0\0\0` \x82\x01Ra\r\x0EV[\x82;\x15a\x03\xEEW\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$\x82\x93\x87Q\x94\x85\x93\x84\x92\x7F\xAE\xDD\xD0\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R\x16\x97\x88`\x04\x84\x01RZ\xF1\x80\x15a\x03\xE4Wa\x03\xCBW[PP\x81Qa\x03\xC8\x92\x7Frifier updated to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x03\x96``\x84a\x0B\xA0V[`2\x83R\x7FTeeKeyManager attestation doc ve` \x84\x01R\x82\x01Ra\r\x0EV[\x80\xF3[\x81a\x03\xD5\x91a\x0B\xA0V[a\x03\xE0W\x82_a\x03aV[\x82\x80\xFD[\x84Q=\x84\x82>=\x90\xFD[P\x80\xFD[a\x04\x14\x91P` =` \x11a\x04\x1AW[a\x04\x0C\x81\x83a\x0B\xA0V[\x81\x01\x90a\x0C\x0EV[_a\x02\xBCV[P=a\x04\x02V[`@Q=\x85\x82>=\x90\xFD[PP_\x80a\x04\xD1a\x04\xFD`@Qa\x04D``\x82a\x0B\xA0V[`%\x81R\x7FDeploying attestation doc verifi` \x82\x01R\x7Fer...\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01R`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x0C\xCBV[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0B\xA0V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FSP1_VERIFIER_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0BXW\x82\x91a\x0B9W[P`@Q\x90\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x1E`$\x83\x01R\x7FATTESTATION_DOC_VERIFIER_V_KEY\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x04!W\x83\x92a\x0B\x05W[P`@Q\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FROOT_CERT_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\n\xFAW\x84\x91a\n\xC4W[P`@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x84\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\n\xB9W\x85\x91a\n\x9FW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x85\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\n\x94W\x86\x91a\nzW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x86\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\noW\x87\x91a\nMW[P` \x81Q\x91\x01 \x91`@Q\x93\x7F\xC1\x97\x8D\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R` `\x04\x86\x01R`\x14`$\x86\x01R\x7FEXPIRATION_TOLERANCE\0\0\0\0\0\0\0\0\0\0\0\0`D\x86\x01R` \x85`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x94\x85\x15a\nBW\x88\x95a\n\nW[P`@Q\x96a\t\x93\x96\x87\x89\x01\x97\x89\x89\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8A\x11\x17a\t\xDDW\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x99\x96\x93`\xE0\x9B\x99\x96a\r\xB6\x8C9\x16\x88R` \x88\x01R`@\x87\x01R``\x86\x01R`\x80\x85\x01R`\xA0\x84\x01R\x16`\xC0\x82\x01R\x03\x01\x90\x82\xF0\x80\x15a\t\xD0Wa\t\xCB\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\tt``\x84a\x0B\xA0V[`%\x83R\x7FAttestation doc verifier deploye` \x84\x01R\x7Fd to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x84\x01R\x16\x90a\r\x0EV[a\x02\"V[P`@Q\x90=\x90\x82>=\x90\xFD[`$\x8B\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x90\x94P` \x81=` \x11a\n:W[\x81a\n&` \x93\x83a\x0B\xA0V[\x81\x01\x03\x12a\n6WQ\x93_a\x08\xD0V[\x87\x80\xFD[=\x91Pa\n\x19V[`@Q=\x8A\x82>=\x90\xFD[a\ni\x91P=\x80\x89\x83>a\na\x81\x83a\x0B\xA0V[\x81\x01\x90a\x0C:V[_a\x08AV[`@Q=\x89\x82>=\x90\xFD[a\n\x8E\x91P=\x80\x88\x83>a\na\x81\x83a\x0B\xA0V[_a\x07\xB5V[`@Q=\x88\x82>=\x90\xFD[a\n\xB3\x91P=\x80\x87\x83>a\na\x81\x83a\x0B\xA0V[_a\x07)V[`@Q=\x87\x82>=\x90\xFD[\x90P` \x81=` \x11a\n\xF2W[\x81a\n\xDF` \x93\x83a\x0B\xA0V[\x81\x01\x03\x12a\n\xEEWQ_a\x06\xA4V[_\x80\xFD[=\x91Pa\n\xD2V[`@Q=\x86\x82>=\x90\xFD[\x90\x91P` \x81=` \x11a\x0B1W[\x81a\x0B!` \x93\x83a\x0B\xA0V[\x81\x01\x03\x12a\n\xEEWQ\x90_a\x06\x1EV[=\x91Pa\x0B\x14V[a\x0BR\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0B\xA0V[_a\x05\x97V[`@Q=\x84\x82>=\x90\xFD[a\x0B|\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0B\xA0V[_a\x01\x9CV[a\x0B\x8E\x91P_\x90a\x0B\xA0V[__a\x01\x10V[`@Q=_\x82>=\x90\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\xE1W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\n\xEEWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\n\xEEW\x90V[` \x81\x83\x03\x12a\n\xEEW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\xEEW\x01\x81`\x1F\x82\x01\x12\x15a\n\xEEW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\xE1W`@Q\x92a\x0C\xAA`\x1F\x84\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x85a\x0B\xA0V[\x82\x84R` \x83\x83\x01\x01\x11a\n\xEEW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[a\rka\r\x9E_\x93\x92\x84\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x94\x85\x93\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\x0C\xCBV[\x91\x16`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0B\xA0V[` \x81Q\x91\x01jconsole.logZ\xFAPV\xFEa\x01`4a\x01\x1AW`\x1Fa\t\x938\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\x01\x1EW\x80\x84\x92`\xE0\x94`@R\x839\x81\x01\x03\x12a\x01\x1AW\x80Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\x1AW` \x81\x01Q`@\x82\x01Q``\x83\x01Q\x90`\x80\x84\x01Q\x92`\xC0`\xA0\x86\x01Q\x95\x01Q\x95`\x01\x80`@\x1B\x03\x87\x16\x87\x03a\x01\x1AW`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@R`@Qa\x08`\x90\x81a\x013\x829`\x80Q\x81\x81\x81a\x03B\x01Ra\x07\x83\x01R`\xA0Q\x81\x81\x81`\x8D\x01Ra\x03\xA2\x01R`\xC0Q\x81\x81\x81a\x02*\x01Ra\x07\xBC\x01R`\xE0Q\x81\x81\x81a\x02\xB9\x01Ra\x06\xFA\x01Ra\x01\0Q\x81\x81\x81a\x01\x10\x01Ra\x02\xE0\x01Ra\x01 Q\x81\x81\x81a\x03\x07\x01Ra\x074\x01Ra\x01@Q\x81\x81\x81`\xD4\x01Ra\x02v\x01R\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\x07\xA7WP\x80c+z\xC3\xF3\x14a\x07WW\x80c8\xF3\xEF\xD4\x14a\x07\x1DW\x80c\x81\xA9\xD3\x8A\x14a\x06\xE3W\x80c\xC2*\x96\x94\x14a\x013W\x80c\xCC\xA3\xB4\xFE\x14a\0\xF8W\x80c\xD4n_\x01\x14a\0\xB3Wc\xE5\x95\x1D\xD1\x14a\0vW_\x80\xFD[4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xB0W\x80`\x03\x196\x01\x12a\0\xB0W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W`@`\x03\x196\x01\x12a\x04~W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01d\x906\x90`\x04\x01a\x07\xDFV[`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04~Wa\x01\x84\x906\x90`\x04\x01a\x07\xDFV[\x91\x90`\xE0\x84\x83\x81\x01\x03\x12a\x04~W`@Q\x93`\xE0\x85\x01\x85\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04FW`@R\x805\x80\x86Ra\x01\xC1` \x83\x01a\x08\rV[` \x87\x01\x90\x81Ra\x01\xD4`@\x84\x01a\x08\rV[`@\x88\x01\x90\x81R``\x88\x01\x90``\x85\x015\x82R`\x80\x89\x01\x92`\x80\x86\x015\x84R`\xA0\x8A\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x9As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16\x8C\x03a\x04~W`\xC0\x01\x9A\x8BR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06\x85WQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x06'Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xFAWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05\x9CWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05>WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xE0WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\x82Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04~W_\x93a\x03\xE9a\x03\xD7\x94`@Q\x97\x88\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\x08\"V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\x08\"V[\x03\x91Z\xFA\x80\x15a\x04sWa\x04\x1AW[` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x16`@Q\x90\x81R\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04FW`@Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03\xF8V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04~W_`\x03\x196\x01\x12a\x04~W` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x91\x81`\x1F\x84\x01\x12\x15a\x04~W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04~W` \x83\x81\x86\x01\x95\x01\x01\x11a\x04~WV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04~WV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`UpdateAttestationDocVerifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum UpdateAttestationDocVerifierCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl UpdateAttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for UpdateAttestationDocVerifierCalls {
        const NAME: &'static str = "UpdateAttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(UpdateAttestationDocVerifierCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(UpdateAttestationDocVerifierCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(UpdateAttestationDocVerifierCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(UpdateAttestationDocVerifierCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`UpdateAttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`UpdateAttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        __provider: P,
    ) -> UpdateAttestationDocVerifierInstance<P, N> {
        UpdateAttestationDocVerifierInstance::<P, N>::new(address, __provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<UpdateAttestationDocVerifierInstance<P, N>>,
    > {
        UpdateAttestationDocVerifierInstance::<P, N>::deploy(__provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        UpdateAttestationDocVerifierInstance::<P, N>::deploy_builder(__provider)
    }
    /**A [`UpdateAttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`UpdateAttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct UpdateAttestationDocVerifierInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for UpdateAttestationDocVerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("UpdateAttestationDocVerifierInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > UpdateAttestationDocVerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`UpdateAttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`UpdateAttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            __provider: P,
        ) -> Self {
            Self {
                address,
                provider: __provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            __provider: P,
        ) -> alloy_contract::Result<UpdateAttestationDocVerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(__provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                __provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> UpdateAttestationDocVerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> UpdateAttestationDocVerifierInstance<P, N> {
            UpdateAttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > UpdateAttestationDocVerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > UpdateAttestationDocVerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
