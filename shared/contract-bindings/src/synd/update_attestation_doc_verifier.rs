/**

Generated by the following Solidity interface...
```solidity
interface UpdateAttestationDocVerifier {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod UpdateAttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55611bb6908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908163c04062261461007a575063f8ccbf4714610034575f80fd5b3461007757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007757602060ff600c5460101c166040519015158152f35b80fd5b905034610bef575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bef57737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610bef577f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af18015610c9657610c83575b506040517f561fe54000000000000000000000000000000000000000000000000000000000815260406004820152602060448201527f4154544553544154494f4e5f444f435f56455249464945525f414444524553536064820152816024820152602081608481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610c59578291610c64575b5073ffffffffffffffffffffffffffffffffffffffff811690811561042c57610222906040516101cd606082610ca1565b602d81527f4174746573746174696f6e20646f6320766572696669657220616c726561647960208201527f206465706c6f79656420746f3a000000000000000000000000000000000000006040820152610e1c565b6040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5445455f4b45595f4d414e414745525f414444524553530000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa80156104215773ffffffffffffffffffffffffffffffffffffffff9184916103f2575b5016826040926103018385516102d28782610ca1565b601981527f5465654b65794d616e6167657220696e20616464726573733a000000000000006020820152610e1c565b823b156103ee578173ffffffffffffffffffffffffffffffffffffffff60248293875194859384927faeddd0ba00000000000000000000000000000000000000000000000000000000845216978860048401525af180156103e4576103cb575b505081516103c8927f726966696572207570646174656420746f3a000000000000000000000000000090610396606084610ca1565b603283527f5465654b65794d616e61676572206174746573746174696f6e20646f632076656020840152820152610e1c565b80f35b816103d591610ca1565b6103e057825f610361565b8280fd5b84513d84823e3d90fd5b5080fd5b610414915060203d60201161041a575b61040c8183610ca1565b810190610d0f565b5f6102bc565b503d610402565b6040513d85823e3d90fd5b50505f806104d16104fd604051610444606082610ca1565b602581527f4465706c6f79696e67206174746573746174696f6e20646f632076657269666960208201527f65722e2e2e00000000000000000000000000000000000000000000000000000060408201526040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610dd9565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ca1565b6020815191016a636f6e736f6c652e6c6f675afa506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5350315f56455249464945525f414444524553530000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610c59578291610c3a575b50604051907f9794904200000000000000000000000000000000000000000000000000000000825260206004830152601e60248301527f4154544553544154494f4e5f444f435f56455249464945525f565f4b455900006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610421578392610c06575b50604051907f9794904200000000000000000000000000000000000000000000000000000000825260206004830152600e60248301527f524f4f545f434552545f484153480000000000000000000000000000000000006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610bfb578492610bc3575b506040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3000000000000000000000000000000000000000000000000000000060448201528481606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610bb8578591610b9e575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3100000000000000000000000000000000000000000000000000000060448201528581606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b93578691610b79575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3200000000000000000000000000000000000000000000000000000060448201528681606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b6e578791610b4c575b506020815191012090604051927fc1978d1f00000000000000000000000000000000000000000000000000000000845260206004850152601460248501527f45585049524154494f4e5f544f4c4552414e43450000000000000000000000006044850152602084606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa938415610b41578894610b09575b50604051957ff877cb1900000000000000000000000000000000000000000000000000000000875260206004880152601060248801527f53594e445f434f4d4d49545f484153480000000000000000000000000000000060448801528887606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa968715610afe578997610aa3575b5060405197610cf296878a01978a891067ffffffffffffffff8a1117610a7657938a999793610100979373ffffffffffffffffffffffffffffffffffffffff6109db9b989467ffffffffffffffff988e610ec49039168852602088015260408701526060860152608085015260a08401521660c08201528160e08201520190610dd9565b039082f08015610a6957610a648173ffffffffffffffffffffffffffffffffffffffff60405191610a0d606084610ca1565b602583527f4174746573746174696f6e20646f63207665726966696572206465706c6f796560208401527f6420746f3a00000000000000000000000000000000000000000000000000000060408401521690610e1c565b610222565b50604051903d90823e3d90fd5b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b9096503d808a833e610ab58183610ca1565b810190602081830312610af65780519067ffffffffffffffff8211610afa57019080601f83011215610af6578151610aef92602001610d3b565b955f610957565b8980fd5b8a80fd5b6040513d8b823e3d90fd5b9093506020813d602011610b39575b81610b2560209383610ca1565b81010312610b355751925f6108d1565b8780fd5b3d9150610b18565b6040513d8a823e3d90fd5b610b6891503d8089833e610b608183610ca1565b810190610d9f565b5f610842565b6040513d89823e3d90fd5b610b8d91503d8088833e610b608183610ca1565b5f6107b6565b6040513d88823e3d90fd5b610bb291503d8087833e610b608183610ca1565b5f61072a565b6040513d87823e3d90fd5b9091506020813d602011610bf3575b81610bdf60209383610ca1565b81010312610bef5751905f6106a5565b5f80fd5b3d9150610bd2565b6040513d86823e3d90fd5b9091506020813d602011610c32575b81610c2260209383610ca1565b81010312610bef5751905f61061e565b3d9150610c15565b610c53915060203d60201161041a5761040c8183610ca1565b5f610597565b6040513d84823e3d90fd5b610c7d915060203d60201161041a5761040c8183610ca1565b5f61019c565b610c8f91505f90610ca1565b5f5f610110565b6040513d5f823e3d90fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610ce257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90816020910312610bef575173ffffffffffffffffffffffffffffffffffffffff81168103610bef5790565b92919267ffffffffffffffff8211610ce25760405191610d83601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610ca1565b829481845281830111610bef578281602093845f96015e010152565b602081830312610bef5780519067ffffffffffffffff8211610bef57019080601f83011215610bef578151610dd692602001610d3b565b90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b610e79610eac5f9392849373ffffffffffffffffffffffffffffffffffffffff6040519485937f319af333000000000000000000000000000000000000000000000000000000006020860152604060248601526064850190610dd9565b91166044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ca1565b6020815191016a636f6e736f6c652e6c6f675afa5056fe610160604052346102c557610cf28038038061001a816102c9565b928339810190610100818303126102c55780516001600160a01b03811681036102c5576020820151604083015160608401519060808501519260a08601519460c08701519660018060401b03881688036102c55760e0810151906001600160401b0382116102c5570188601f820112156102c5578051906001600160401b0382116102b1576100b2601f8301601f19166020016102c9565b99828b52602083830101116102c557815f926020809301838d015e8a01015260805260a05260c05260e05261010052610120526101405280516001600160401b0381116102b1575f54600181811c911680156102a7575b602082101461029357601f8111610231575b50602091601f82116001146101d3579181925f926101c8575b50508160011b915f199060031b1c1916175f555b604051610a0390816102ef823960805181818161034e01526108e5015260a051818181609801526103ae015260c051818181610236015261091e015260e0518181816102c501526106ed01526101005181818161011b01526102ec015261012051818181610313015261089601526101405181818160df01526102820152f35b015190505f80610134565b601f198216925f8052805f20915f5b85811061021957508360019510610201575b505050811b015f55610148565b01515f1960f88460031b161c191690555f80806101f4565b919260206001819286850151815501940192016101e2565b5f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f830160051c81019160208410610289575b601f0160051c01905b81811061027e575061011b565b5f8155600101610271565b9091508190610268565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610109565b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102b15760405256fe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f27414610909575080632b7ac3f3146108b957806338f3efd41461087f5780635a0780751461071057806381a9d38a146106d6578063c22a96941461013e578063cca3b4fe14610103578063d46e5f01146100be5763e5951dd114610081575f80fd5b346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100bb57806003193601126100bb57602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346104445760406003193601126104445760043567ffffffffffffffff81116104445761016f903690600401610982565b9060243567ffffffffffffffff811161044457610190903690600401610982565b929060e0838381010312610444576040519260e0840184811067ffffffffffffffff8211176106a95760405280358085526101cd602083016109b0565b602086019081526101e0604084016109b0565b6040870190815260608701906060850135825260808801926080860135845260a089019460a0870135865260c08701359973ffffffffffffffffffffffffffffffffffffffff8b168b036104445760c001998a527f00000000000000000000000000000000000000000000000000000000000000000361064b575167ffffffffffffffff1642106105ed5767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105c05767ffffffffffffffff16421161056257517f00000000000000000000000000000000000000000000000000000000000000000361050457517f0000000000000000000000000000000000000000000000000000000000000000036104a657517f0000000000000000000000000000000000000000000000000000000000000000036104485773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610444575f936103f56103e394604051988996879586957f41493c600000000000000000000000000000000000000000000000000000000087527f000000000000000000000000000000000000000000000000000000000000000060048801526060602488015260648701916109c5565b916003198584030160448601526109c5565b03915afa9081156104395760209273ffffffffffffffffffffffffffffffffffffffff92610429575b505116604051908152f35b5f61043391610941565b5f61041e565b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f600319360112610444576040515f905f54918260011c60018416938415610875575b60208210851461084857818452602084019490811561080f57506001146107b3575b509061076a816040930382610941565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8351948593602085525180918160208701528686015e5f85828601015201168101030190f35b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b8082106107f55750909150810160200161076a61075a565b9192600181602092548385880101520191019092916107dd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016855250151560051b8201602001905061076a61075a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f1690610738565b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f60031936011261044457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610444575f600319360112610444576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106a957604052565b9181601f840112156104445782359167ffffffffffffffff8311610444576020838186019501011161044457565b359067ffffffffffffffff8216820361044457565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x1B\xB6\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0zWPc\xF8\xCC\xBFG\x14a\x004W_\x80\xFD[4a\0wW\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0wW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[\x90P4a\x0B\xEFW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x0B\xEFWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x0B\xEFW\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x0C\x96Wa\x0C\x83W[P`@Q\x7FV\x1F\xE5@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`@`\x04\x82\x01R` `D\x82\x01R\x7FATTESTATION_DOC_VERIFIER_ADDRESS`d\x82\x01R\x81`$\x82\x01R` \x81`\x84\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0CYW\x82\x91a\x0CdW[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x90\x81\x15a\x04,Wa\x02\"\x90`@Qa\x01\xCD``\x82a\x0C\xA1V[`-\x81R\x7FAttestation doc verifier already` \x82\x01R\x7F deployed to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0E\x1CV[`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FTEE_KEY_MANAGER_ADDRESS\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x04!Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x84\x91a\x03\xF2W[P\x16\x82`@\x92a\x03\x01\x83\x85Qa\x02\xD2\x87\x82a\x0C\xA1V[`\x19\x81R\x7FTeeKeyManager in address:\0\0\0\0\0\0\0` \x82\x01Ra\x0E\x1CV[\x82;\x15a\x03\xEEW\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$\x82\x93\x87Q\x94\x85\x93\x84\x92\x7F\xAE\xDD\xD0\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R\x16\x97\x88`\x04\x84\x01RZ\xF1\x80\x15a\x03\xE4Wa\x03\xCBW[PP\x81Qa\x03\xC8\x92\x7Frifier updated to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x03\x96``\x84a\x0C\xA1V[`2\x83R\x7FTeeKeyManager attestation doc ve` \x84\x01R\x82\x01Ra\x0E\x1CV[\x80\xF3[\x81a\x03\xD5\x91a\x0C\xA1V[a\x03\xE0W\x82_a\x03aV[\x82\x80\xFD[\x84Q=\x84\x82>=\x90\xFD[P\x80\xFD[a\x04\x14\x91P` =` \x11a\x04\x1AW[a\x04\x0C\x81\x83a\x0C\xA1V[\x81\x01\x90a\r\x0FV[_a\x02\xBCV[P=a\x04\x02V[`@Q=\x85\x82>=\x90\xFD[PP_\x80a\x04\xD1a\x04\xFD`@Qa\x04D``\x82a\x0C\xA1V[`%\x81R\x7FDeploying attestation doc verifi` \x82\x01R\x7Fer...\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01R`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\r\xD9V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0C\xA1V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FSP1_VERIFIER_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0CYW\x82\x91a\x0C:W[P`@Q\x90\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x1E`$\x83\x01R\x7FATTESTATION_DOC_VERIFIER_V_KEY\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x04!W\x83\x92a\x0C\x06W[P`@Q\x90\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x0E`$\x83\x01R\x7FROOT_CERT_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x0B\xFBW\x84\x92a\x0B\xC3W[P`@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x84\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0B\xB8W\x85\x91a\x0B\x9EW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x85\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0B\x93W\x86\x91a\x0ByW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x86\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0BnW\x87\x91a\x0BLW[P` \x81Q\x91\x01 \x90`@Q\x92\x7F\xC1\x97\x8D\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R` `\x04\x85\x01R`\x14`$\x85\x01R\x7FEXPIRATION_TOLERANCE\0\0\0\0\0\0\0\0\0\0\0\0`D\x85\x01R` \x84`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x93\x84\x15a\x0BAW\x88\x94a\x0B\tW[P`@Q\x95\x7F\xF8w\xCB\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R` `\x04\x88\x01R`\x10`$\x88\x01R\x7FSYND_COMMIT_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x88\x01R\x88\x87`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x96\x87\x15a\n\xFEW\x89\x97a\n\xA3W[P`@Q\x97a\x0C\xF2\x96\x87\x8A\x01\x97\x8A\x89\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8A\x11\x17a\nvW\x93\x8A\x99\x97\x93a\x01\0\x97\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\xDB\x9B\x98\x94g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x98\x8Ea\x0E\xC4\x909\x16\x88R` \x88\x01R`@\x87\x01R``\x86\x01R`\x80\x85\x01R`\xA0\x84\x01R\x16`\xC0\x82\x01R\x81`\xE0\x82\x01R\x01\x90a\r\xD9V[\x03\x90\x82\xF0\x80\x15a\niWa\nd\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\n\r``\x84a\x0C\xA1V[`%\x83R\x7FAttestation doc verifier deploye` \x84\x01R\x7Fd to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x84\x01R\x16\x90a\x0E\x1CV[a\x02\"V[P`@Q\x90=\x90\x82>=\x90\xFD[`$\x8C\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x90\x96P=\x80\x8A\x83>a\n\xB5\x81\x83a\x0C\xA1V[\x81\x01\x90` \x81\x83\x03\x12a\n\xF6W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\xFAW\x01\x90\x80`\x1F\x83\x01\x12\x15a\n\xF6W\x81Qa\n\xEF\x92` \x01a\r;V[\x95_a\tWV[\x89\x80\xFD[\x8A\x80\xFD[`@Q=\x8B\x82>=\x90\xFD[\x90\x93P` \x81=` \x11a\x0B9W[\x81a\x0B%` \x93\x83a\x0C\xA1V[\x81\x01\x03\x12a\x0B5WQ\x92_a\x08\xD1V[\x87\x80\xFD[=\x91Pa\x0B\x18V[`@Q=\x8A\x82>=\x90\xFD[a\x0Bh\x91P=\x80\x89\x83>a\x0B`\x81\x83a\x0C\xA1V[\x81\x01\x90a\r\x9FV[_a\x08BV[`@Q=\x89\x82>=\x90\xFD[a\x0B\x8D\x91P=\x80\x88\x83>a\x0B`\x81\x83a\x0C\xA1V[_a\x07\xB6V[`@Q=\x88\x82>=\x90\xFD[a\x0B\xB2\x91P=\x80\x87\x83>a\x0B`\x81\x83a\x0C\xA1V[_a\x07*V[`@Q=\x87\x82>=\x90\xFD[\x90\x91P` \x81=` \x11a\x0B\xF3W[\x81a\x0B\xDF` \x93\x83a\x0C\xA1V[\x81\x01\x03\x12a\x0B\xEFWQ\x90_a\x06\xA5V[_\x80\xFD[=\x91Pa\x0B\xD2V[`@Q=\x86\x82>=\x90\xFD[\x90\x91P` \x81=` \x11a\x0C2W[\x81a\x0C\"` \x93\x83a\x0C\xA1V[\x81\x01\x03\x12a\x0B\xEFWQ\x90_a\x06\x1EV[=\x91Pa\x0C\x15V[a\x0CS\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0C\xA1V[_a\x05\x97V[`@Q=\x84\x82>=\x90\xFD[a\x0C}\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0C\xA1V[_a\x01\x9CV[a\x0C\x8F\x91P_\x90a\x0C\xA1V[__a\x01\x10V[`@Q=_\x82>=\x90\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\xE2W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x0B\xEFWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x0B\xEFW\x90V[\x92\x91\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0C\xE2W`@Q\x91a\r\x83`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x84a\x0C\xA1V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x0B\xEFW\x82\x81` \x93\x84_\x96\x01^\x01\x01RV[` \x81\x83\x03\x12a\x0B\xEFW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\xEFW\x01\x90\x80`\x1F\x83\x01\x12\x15a\x0B\xEFW\x81Qa\r\xD6\x92` \x01a\r;V[\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[a\x0Eya\x0E\xAC_\x93\x92\x84\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x94\x85\x93\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\r\xD9V[\x91\x16`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0C\xA1V[` \x81Q\x91\x01jconsole.logZ\xFAPV\xFEa\x01``@R4a\x02\xC5Wa\x0C\xF2\x808\x03\x80a\0\x1A\x81a\x02\xC9V[\x92\x839\x81\x01\x90a\x01\0\x81\x83\x03\x12a\x02\xC5W\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xC5W` \x82\x01Q`@\x83\x01Q``\x84\x01Q\x90`\x80\x85\x01Q\x92`\xA0\x86\x01Q\x94`\xC0\x87\x01Q\x96`\x01\x80`@\x1B\x03\x88\x16\x88\x03a\x02\xC5W`\xE0\x81\x01Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xC5W\x01\x88`\x1F\x82\x01\x12\x15a\x02\xC5W\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xB1Wa\0\xB2`\x1F\x83\x01`\x1F\x19\x16` \x01a\x02\xC9V[\x99\x82\x8BR` \x83\x83\x01\x01\x11a\x02\xC5W\x81_\x92` \x80\x93\x01\x83\x8D\x01^\x8A\x01\x01R`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@R\x80Q`\x01`\x01`@\x1B\x03\x81\x11a\x02\xB1W_T`\x01\x81\x81\x1C\x91\x16\x80\x15a\x02\xA7W[` \x82\x10\x14a\x02\x93W`\x1F\x81\x11a\x021W[P` \x91`\x1F\x82\x11`\x01\x14a\x01\xD3W\x91\x81\x92_\x92a\x01\xC8W[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17_U[`@Qa\n\x03\x90\x81a\x02\xEF\x829`\x80Q\x81\x81\x81a\x03N\x01Ra\x08\xE5\x01R`\xA0Q\x81\x81\x81`\x98\x01Ra\x03\xAE\x01R`\xC0Q\x81\x81\x81a\x026\x01Ra\t\x1E\x01R`\xE0Q\x81\x81\x81a\x02\xC5\x01Ra\x06\xED\x01Ra\x01\0Q\x81\x81\x81a\x01\x1B\x01Ra\x02\xEC\x01Ra\x01 Q\x81\x81\x81a\x03\x13\x01Ra\x08\x96\x01Ra\x01@Q\x81\x81\x81`\xDF\x01Ra\x02\x82\x01R\xF3[\x01Q\x90P_\x80a\x014V[`\x1F\x19\x82\x16\x92_\x80R\x80_ \x91_[\x85\x81\x10a\x02\x19WP\x83`\x01\x95\x10a\x02\x01W[PPP\x81\x1B\x01_Ua\x01HV[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U_\x80\x80a\x01\xF4V[\x91\x92` `\x01\x81\x92\x86\x85\x01Q\x81U\x01\x94\x01\x92\x01a\x01\xE2V[_\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c`\x1F\x83\x01`\x05\x1C\x81\x01\x91` \x84\x10a\x02\x89W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x02~WPa\x01\x1BV[_\x81U`\x01\x01a\x02qV[\x90\x91P\x81\x90a\x02hV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x01\tV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x80\xFD[`@Q\x91\x90`\x1F\x01`\x1F\x19\x16\x82\x01`\x01`\x01`@\x1B\x03\x81\x11\x83\x82\x10\x17a\x02\xB1W`@RV\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\t\tWP\x80c+z\xC3\xF3\x14a\x08\xB9W\x80c8\xF3\xEF\xD4\x14a\x08\x7FW\x80cZ\x07\x80u\x14a\x07\x10W\x80c\x81\xA9\xD3\x8A\x14a\x06\xD6W\x80c\xC2*\x96\x94\x14a\x01>W\x80c\xCC\xA3\xB4\xFE\x14a\x01\x03W\x80c\xD4n_\x01\x14a\0\xBEWc\xE5\x95\x1D\xD1\x14a\0\x81W_\x80\xFD[4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW`@`\x03\x196\x01\x12a\x04DW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01o\x906\x90`\x04\x01a\t\x82V[\x90`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01\x90\x906\x90`\x04\x01a\t\x82V[\x92\x90`\xE0\x83\x83\x81\x01\x03\x12a\x04DW`@Q\x92`\xE0\x84\x01\x84\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@R\x805\x80\x85Ra\x01\xCD` \x83\x01a\t\xB0V[` \x86\x01\x90\x81Ra\x01\xE0`@\x84\x01a\t\xB0V[`@\x87\x01\x90\x81R``\x87\x01\x90``\x85\x015\x82R`\x80\x88\x01\x92`\x80\x86\x015\x84R`\xA0\x89\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x99s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16\x8B\x03a\x04DW`\xC0\x01\x99\x8AR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06KWQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x05\xEDWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC0Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05bWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05\x04WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xA6WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04HWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04DW_\x93a\x03\xF5a\x03\xE3\x94`@Q\x98\x89\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\t\xC5V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\t\xC5V[\x03\x91Z\xFA\x90\x81\x15a\x049W` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\x04)W[PQ\x16`@Q\x90\x81R\xF3[_a\x043\x91a\tAV[_a\x04\x1EV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW`@Q_\x90_T\x91\x82`\x01\x1C`\x01\x84\x16\x93\x84\x15a\x08uW[` \x82\x10\x85\x14a\x08HW\x81\x84R` \x84\x01\x94\x90\x81\x15a\x08\x0FWP`\x01\x14a\x07\xB3W[P\x90a\x07j\x81`@\x93\x03\x82a\tAV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83Q\x94\x85\x93` \x85RQ\x80\x91\x81` \x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[_\x80\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x93\x92P\x90[\x80\x82\x10a\x07\xF5WP\x90\x91P\x81\x01` \x01a\x07ja\x07ZV[\x91\x92`\x01\x81` \x92T\x83\x85\x88\x01\x01R\x01\x91\x01\x90\x92\x91a\x07\xDDV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16\x85RP\x15\x15`\x05\x1B\x82\x01` \x01\x90Pa\x07ja\x07ZV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x078V[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@RV[\x91\x81`\x1F\x84\x01\x12\x15a\x04DW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04DW` \x83\x81\x86\x01\x95\x01\x01\x11a\x04DWV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04DWV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c908163c04062261461007a575063f8ccbf4714610034575f80fd5b3461007757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007757602060ff600c5460101c166040519015158152f35b80fd5b905034610bef575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bef57737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610bef577f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af18015610c9657610c83575b506040517f561fe54000000000000000000000000000000000000000000000000000000000815260406004820152602060448201527f4154544553544154494f4e5f444f435f56455249464945525f414444524553536064820152816024820152602081608481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610c59578291610c64575b5073ffffffffffffffffffffffffffffffffffffffff811690811561042c57610222906040516101cd606082610ca1565b602d81527f4174746573746174696f6e20646f6320766572696669657220616c726561647960208201527f206465706c6f79656420746f3a000000000000000000000000000000000000006040820152610e1c565b6040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5445455f4b45595f4d414e414745525f414444524553530000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa80156104215773ffffffffffffffffffffffffffffffffffffffff9184916103f2575b5016826040926103018385516102d28782610ca1565b601981527f5465654b65794d616e6167657220696e20616464726573733a000000000000006020820152610e1c565b823b156103ee578173ffffffffffffffffffffffffffffffffffffffff60248293875194859384927faeddd0ba00000000000000000000000000000000000000000000000000000000845216978860048401525af180156103e4576103cb575b505081516103c8927f726966696572207570646174656420746f3a000000000000000000000000000090610396606084610ca1565b603283527f5465654b65794d616e61676572206174746573746174696f6e20646f632076656020840152820152610e1c565b80f35b816103d591610ca1565b6103e057825f610361565b8280fd5b84513d84823e3d90fd5b5080fd5b610414915060203d60201161041a575b61040c8183610ca1565b810190610d0f565b5f6102bc565b503d610402565b6040513d85823e3d90fd5b50505f806104d16104fd604051610444606082610ca1565b602581527f4465706c6f79696e67206174746573746174696f6e20646f632076657269666960208201527f65722e2e2e00000000000000000000000000000000000000000000000000000060408201526040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610dd9565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ca1565b6020815191016a636f6e736f6c652e6c6f675afa506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5350315f56455249464945525f414444524553530000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610c59578291610c3a575b50604051907f9794904200000000000000000000000000000000000000000000000000000000825260206004830152601e60248301527f4154544553544154494f4e5f444f435f56455249464945525f565f4b455900006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610421578392610c06575b50604051907f9794904200000000000000000000000000000000000000000000000000000000825260206004830152600e60248301527f524f4f545f434552545f484153480000000000000000000000000000000000006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610bfb578492610bc3575b506040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3000000000000000000000000000000000000000000000000000000060448201528481606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610bb8578591610b9e575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3100000000000000000000000000000000000000000000000000000060448201528581606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b93578691610b79575b50602081519101206040517f4d7baf0600000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5043525f3200000000000000000000000000000000000000000000000000000060448201528681606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa908115610b6e578791610b4c575b506020815191012090604051927fc1978d1f00000000000000000000000000000000000000000000000000000000845260206004850152601460248501527f45585049524154494f4e5f544f4c4552414e43450000000000000000000000006044850152602084606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa938415610b41578894610b09575b50604051957ff877cb1900000000000000000000000000000000000000000000000000000000875260206004880152601060248801527f53594e445f434f4d4d49545f484153480000000000000000000000000000000060448801528887606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa968715610afe578997610aa3575b5060405197610cf296878a01978a891067ffffffffffffffff8a1117610a7657938a999793610100979373ffffffffffffffffffffffffffffffffffffffff6109db9b989467ffffffffffffffff988e610ec49039168852602088015260408701526060860152608085015260a08401521660c08201528160e08201520190610dd9565b039082f08015610a6957610a648173ffffffffffffffffffffffffffffffffffffffff60405191610a0d606084610ca1565b602583527f4174746573746174696f6e20646f63207665726966696572206465706c6f796560208401527f6420746f3a00000000000000000000000000000000000000000000000000000060408401521690610e1c565b610222565b50604051903d90823e3d90fd5b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b9096503d808a833e610ab58183610ca1565b810190602081830312610af65780519067ffffffffffffffff8211610afa57019080601f83011215610af6578151610aef92602001610d3b565b955f610957565b8980fd5b8a80fd5b6040513d8b823e3d90fd5b9093506020813d602011610b39575b81610b2560209383610ca1565b81010312610b355751925f6108d1565b8780fd5b3d9150610b18565b6040513d8a823e3d90fd5b610b6891503d8089833e610b608183610ca1565b810190610d9f565b5f610842565b6040513d89823e3d90fd5b610b8d91503d8088833e610b608183610ca1565b5f6107b6565b6040513d88823e3d90fd5b610bb291503d8087833e610b608183610ca1565b5f61072a565b6040513d87823e3d90fd5b9091506020813d602011610bf3575b81610bdf60209383610ca1565b81010312610bef5751905f6106a5565b5f80fd5b3d9150610bd2565b6040513d86823e3d90fd5b9091506020813d602011610c32575b81610c2260209383610ca1565b81010312610bef5751905f61061e565b3d9150610c15565b610c53915060203d60201161041a5761040c8183610ca1565b5f610597565b6040513d84823e3d90fd5b610c7d915060203d60201161041a5761040c8183610ca1565b5f61019c565b610c8f91505f90610ca1565b5f5f610110565b6040513d5f823e3d90fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610ce257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90816020910312610bef575173ffffffffffffffffffffffffffffffffffffffff81168103610bef5790565b92919267ffffffffffffffff8211610ce25760405191610d83601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610ca1565b829481845281830111610bef578281602093845f96015e010152565b602081830312610bef5780519067ffffffffffffffff8211610bef57019080601f83011215610bef578151610dd692602001610d3b565b90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b610e79610eac5f9392849373ffffffffffffffffffffffffffffffffffffffff6040519485937f319af333000000000000000000000000000000000000000000000000000000006020860152604060248601526064850190610dd9565b91166044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610ca1565b6020815191016a636f6e736f6c652e6c6f675afa5056fe610160604052346102c557610cf28038038061001a816102c9565b928339810190610100818303126102c55780516001600160a01b03811681036102c5576020820151604083015160608401519060808501519260a08601519460c08701519660018060401b03881688036102c55760e0810151906001600160401b0382116102c5570188601f820112156102c5578051906001600160401b0382116102b1576100b2601f8301601f19166020016102c9565b99828b52602083830101116102c557815f926020809301838d015e8a01015260805260a05260c05260e05261010052610120526101405280516001600160401b0381116102b1575f54600181811c911680156102a7575b602082101461029357601f8111610231575b50602091601f82116001146101d3579181925f926101c8575b50508160011b915f199060031b1c1916175f555b604051610a0390816102ef823960805181818161034e01526108e5015260a051818181609801526103ae015260c051818181610236015261091e015260e0518181816102c501526106ed01526101005181818161011b01526102ec015261012051818181610313015261089601526101405181818160df01526102820152f35b015190505f80610134565b601f198216925f8052805f20915f5b85811061021957508360019510610201575b505050811b015f55610148565b01515f1960f88460031b161c191690555f80806101f4565b919260206001819286850151815501940192016101e2565b5f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f830160051c81019160208410610289575b601f0160051c01905b81811061027e575061011b565b5f8155600101610271565b9091508190610268565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610109565b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102b15760405256fe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630553f27414610909575080632b7ac3f3146108b957806338f3efd41461087f5780635a0780751461071057806381a9d38a146106d6578063c22a96941461013e578063cca3b4fe14610103578063d46e5f01146100be5763e5951dd114610081575f80fd5b346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346100bb57806003193601126100bb57602060405167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100bb57806003193601126100bb5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346104445760406003193601126104445760043567ffffffffffffffff81116104445761016f903690600401610982565b9060243567ffffffffffffffff811161044457610190903690600401610982565b929060e0838381010312610444576040519260e0840184811067ffffffffffffffff8211176106a95760405280358085526101cd602083016109b0565b602086019081526101e0604084016109b0565b6040870190815260608701906060850135825260808801926080860135845260a089019460a0870135865260c08701359973ffffffffffffffffffffffffffffffffffffffff8b168b036104445760c001998a527f00000000000000000000000000000000000000000000000000000000000000000361064b575167ffffffffffffffff1642106105ed5767ffffffffffffffff90511667ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000160167ffffffffffffffff81116105c05767ffffffffffffffff16421161056257517f00000000000000000000000000000000000000000000000000000000000000000361050457517f0000000000000000000000000000000000000000000000000000000000000000036104a657517f0000000000000000000000000000000000000000000000000000000000000000036104485773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610444575f936103f56103e394604051988996879586957f41493c600000000000000000000000000000000000000000000000000000000087527f000000000000000000000000000000000000000000000000000000000000000060048801526060602488015260648701916109c5565b916003198584030160448601526109c5565b03915afa9081156104395760209273ffffffffffffffffffffffffffffffffffffffff92610429575b505116604051908152f35b5f61043391610941565b5f61041e565b6040513d5f823e3d90fd5b5f80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435232206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435231206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f50435230206d69736d61746368000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56616c69646974792077696e646f772068617320656e646564000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c69646974792077696e646f7720686173206e6f742073746172746564006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f526f6f7420636572742068617368206d69736d617463680000000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f600319360112610444576040515f905f54918260011c60018416938415610875575b60208210851461084857818452602084019490811561080f57506001146107b3575b509061076a816040930382610941565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8351948593602085525180918160208701528686015e5f85828601015201168101030190f35b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b8082106107f55750909150810160200161076a61075a565b9192600181602092548385880101520191019092916107dd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016855250151560051b8201602001905061076a61075a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f1690610738565b34610444575f6003193601126104445760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610444575f60031936011261044457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610444575f600319360112610444576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106a957604052565b9181601f840112156104445782359167ffffffffffffffff8311610444576020838186019501011161044457565b359067ffffffffffffffff8216820361044457565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0zWPc\xF8\xCC\xBFG\x14a\x004W_\x80\xFD[4a\0wW\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0wW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[\x90P4a\x0B\xEFW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x0B\xEFWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x0B\xEFW\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x0C\x96Wa\x0C\x83W[P`@Q\x7FV\x1F\xE5@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`@`\x04\x82\x01R` `D\x82\x01R\x7FATTESTATION_DOC_VERIFIER_ADDRESS`d\x82\x01R\x81`$\x82\x01R` \x81`\x84\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0CYW\x82\x91a\x0CdW[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x90\x81\x15a\x04,Wa\x02\"\x90`@Qa\x01\xCD``\x82a\x0C\xA1V[`-\x81R\x7FAttestation doc verifier already` \x82\x01R\x7F deployed to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0E\x1CV[`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FTEE_KEY_MANAGER_ADDRESS\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x04!Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x84\x91a\x03\xF2W[P\x16\x82`@\x92a\x03\x01\x83\x85Qa\x02\xD2\x87\x82a\x0C\xA1V[`\x19\x81R\x7FTeeKeyManager in address:\0\0\0\0\0\0\0` \x82\x01Ra\x0E\x1CV[\x82;\x15a\x03\xEEW\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`$\x82\x93\x87Q\x94\x85\x93\x84\x92\x7F\xAE\xDD\xD0\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R\x16\x97\x88`\x04\x84\x01RZ\xF1\x80\x15a\x03\xE4Wa\x03\xCBW[PP\x81Qa\x03\xC8\x92\x7Frifier updated to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x03\x96``\x84a\x0C\xA1V[`2\x83R\x7FTeeKeyManager attestation doc ve` \x84\x01R\x82\x01Ra\x0E\x1CV[\x80\xF3[\x81a\x03\xD5\x91a\x0C\xA1V[a\x03\xE0W\x82_a\x03aV[\x82\x80\xFD[\x84Q=\x84\x82>=\x90\xFD[P\x80\xFD[a\x04\x14\x91P` =` \x11a\x04\x1AW[a\x04\x0C\x81\x83a\x0C\xA1V[\x81\x01\x90a\r\x0FV[_a\x02\xBCV[P=a\x04\x02V[`@Q=\x85\x82>=\x90\xFD[PP_\x80a\x04\xD1a\x04\xFD`@Qa\x04D``\x82a\x0C\xA1V[`%\x81R\x7FDeploying attestation doc verifi` \x82\x01R\x7Fer...\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01R`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\r\xD9V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0C\xA1V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FSP1_VERIFIER_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0CYW\x82\x91a\x0C:W[P`@Q\x90\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x1E`$\x83\x01R\x7FATTESTATION_DOC_VERIFIER_V_KEY\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x04!W\x83\x92a\x0C\x06W[P`@Q\x90\x7F\x97\x94\x90B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x0E`$\x83\x01R\x7FROOT_CERT_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x0B\xFBW\x84\x92a\x0B\xC3W[P`@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x84\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0B\xB8W\x85\x91a\x0B\x9EW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x85\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0B\x93W\x86\x91a\x0ByW[P` \x81Q\x91\x01 `@Q\x7FM{\xAF\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x05`$\x82\x01R\x7FPCR_2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\x86\x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x0BnW\x87\x91a\x0BLW[P` \x81Q\x91\x01 \x90`@Q\x92\x7F\xC1\x97\x8D\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R` `\x04\x85\x01R`\x14`$\x85\x01R\x7FEXPIRATION_TOLERANCE\0\0\0\0\0\0\0\0\0\0\0\0`D\x85\x01R` \x84`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x93\x84\x15a\x0BAW\x88\x94a\x0B\tW[P`@Q\x95\x7F\xF8w\xCB\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R` `\x04\x88\x01R`\x10`$\x88\x01R\x7FSYND_COMMIT_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x88\x01R\x88\x87`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x96\x87\x15a\n\xFEW\x89\x97a\n\xA3W[P`@Q\x97a\x0C\xF2\x96\x87\x8A\x01\x97\x8A\x89\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8A\x11\x17a\nvW\x93\x8A\x99\x97\x93a\x01\0\x97\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\xDB\x9B\x98\x94g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x98\x8Ea\x0E\xC4\x909\x16\x88R` \x88\x01R`@\x87\x01R``\x86\x01R`\x80\x85\x01R`\xA0\x84\x01R\x16`\xC0\x82\x01R\x81`\xE0\x82\x01R\x01\x90a\r\xD9V[\x03\x90\x82\xF0\x80\x15a\niWa\nd\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\n\r``\x84a\x0C\xA1V[`%\x83R\x7FAttestation doc verifier deploye` \x84\x01R\x7Fd to:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x84\x01R\x16\x90a\x0E\x1CV[a\x02\"V[P`@Q\x90=\x90\x82>=\x90\xFD[`$\x8C\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x90\x96P=\x80\x8A\x83>a\n\xB5\x81\x83a\x0C\xA1V[\x81\x01\x90` \x81\x83\x03\x12a\n\xF6W\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\xFAW\x01\x90\x80`\x1F\x83\x01\x12\x15a\n\xF6W\x81Qa\n\xEF\x92` \x01a\r;V[\x95_a\tWV[\x89\x80\xFD[\x8A\x80\xFD[`@Q=\x8B\x82>=\x90\xFD[\x90\x93P` \x81=` \x11a\x0B9W[\x81a\x0B%` \x93\x83a\x0C\xA1V[\x81\x01\x03\x12a\x0B5WQ\x92_a\x08\xD1V[\x87\x80\xFD[=\x91Pa\x0B\x18V[`@Q=\x8A\x82>=\x90\xFD[a\x0Bh\x91P=\x80\x89\x83>a\x0B`\x81\x83a\x0C\xA1V[\x81\x01\x90a\r\x9FV[_a\x08BV[`@Q=\x89\x82>=\x90\xFD[a\x0B\x8D\x91P=\x80\x88\x83>a\x0B`\x81\x83a\x0C\xA1V[_a\x07\xB6V[`@Q=\x88\x82>=\x90\xFD[a\x0B\xB2\x91P=\x80\x87\x83>a\x0B`\x81\x83a\x0C\xA1V[_a\x07*V[`@Q=\x87\x82>=\x90\xFD[\x90\x91P` \x81=` \x11a\x0B\xF3W[\x81a\x0B\xDF` \x93\x83a\x0C\xA1V[\x81\x01\x03\x12a\x0B\xEFWQ\x90_a\x06\xA5V[_\x80\xFD[=\x91Pa\x0B\xD2V[`@Q=\x86\x82>=\x90\xFD[\x90\x91P` \x81=` \x11a\x0C2W[\x81a\x0C\"` \x93\x83a\x0C\xA1V[\x81\x01\x03\x12a\x0B\xEFWQ\x90_a\x06\x1EV[=\x91Pa\x0C\x15V[a\x0CS\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0C\xA1V[_a\x05\x97V[`@Q=\x84\x82>=\x90\xFD[a\x0C}\x91P` =` \x11a\x04\x1AWa\x04\x0C\x81\x83a\x0C\xA1V[_a\x01\x9CV[a\x0C\x8F\x91P_\x90a\x0C\xA1V[__a\x01\x10V[`@Q=_\x82>=\x90\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\xE2W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x0B\xEFWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x0B\xEFW\x90V[\x92\x91\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0C\xE2W`@Q\x91a\r\x83`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x84a\x0C\xA1V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x0B\xEFW\x82\x81` \x93\x84_\x96\x01^\x01\x01RV[` \x81\x83\x03\x12a\x0B\xEFW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\xEFW\x01\x90\x80`\x1F\x83\x01\x12\x15a\x0B\xEFW\x81Qa\r\xD6\x92` \x01a\r;V[\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[a\x0Eya\x0E\xAC_\x93\x92\x84\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x94\x85\x93\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\r\xD9V[\x91\x16`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x0C\xA1V[` \x81Q\x91\x01jconsole.logZ\xFAPV\xFEa\x01``@R4a\x02\xC5Wa\x0C\xF2\x808\x03\x80a\0\x1A\x81a\x02\xC9V[\x92\x839\x81\x01\x90a\x01\0\x81\x83\x03\x12a\x02\xC5W\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xC5W` \x82\x01Q`@\x83\x01Q``\x84\x01Q\x90`\x80\x85\x01Q\x92`\xA0\x86\x01Q\x94`\xC0\x87\x01Q\x96`\x01\x80`@\x1B\x03\x88\x16\x88\x03a\x02\xC5W`\xE0\x81\x01Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xC5W\x01\x88`\x1F\x82\x01\x12\x15a\x02\xC5W\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x02\xB1Wa\0\xB2`\x1F\x83\x01`\x1F\x19\x16` \x01a\x02\xC9V[\x99\x82\x8BR` \x83\x83\x01\x01\x11a\x02\xC5W\x81_\x92` \x80\x93\x01\x83\x8D\x01^\x8A\x01\x01R`\x80R`\xA0R`\xC0R`\xE0Ra\x01\0Ra\x01 Ra\x01@R\x80Q`\x01`\x01`@\x1B\x03\x81\x11a\x02\xB1W_T`\x01\x81\x81\x1C\x91\x16\x80\x15a\x02\xA7W[` \x82\x10\x14a\x02\x93W`\x1F\x81\x11a\x021W[P` \x91`\x1F\x82\x11`\x01\x14a\x01\xD3W\x91\x81\x92_\x92a\x01\xC8W[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17_U[`@Qa\n\x03\x90\x81a\x02\xEF\x829`\x80Q\x81\x81\x81a\x03N\x01Ra\x08\xE5\x01R`\xA0Q\x81\x81\x81`\x98\x01Ra\x03\xAE\x01R`\xC0Q\x81\x81\x81a\x026\x01Ra\t\x1E\x01R`\xE0Q\x81\x81\x81a\x02\xC5\x01Ra\x06\xED\x01Ra\x01\0Q\x81\x81\x81a\x01\x1B\x01Ra\x02\xEC\x01Ra\x01 Q\x81\x81\x81a\x03\x13\x01Ra\x08\x96\x01Ra\x01@Q\x81\x81\x81`\xDF\x01Ra\x02\x82\x01R\xF3[\x01Q\x90P_\x80a\x014V[`\x1F\x19\x82\x16\x92_\x80R\x80_ \x91_[\x85\x81\x10a\x02\x19WP\x83`\x01\x95\x10a\x02\x01W[PPP\x81\x1B\x01_Ua\x01HV[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U_\x80\x80a\x01\xF4V[\x91\x92` `\x01\x81\x92\x86\x85\x01Q\x81U\x01\x94\x01\x92\x01a\x01\xE2V[_\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c`\x1F\x83\x01`\x05\x1C\x81\x01\x91` \x84\x10a\x02\x89W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x02~WPa\x01\x1BV[_\x81U`\x01\x01a\x02qV[\x90\x91P\x81\x90a\x02hV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x01\tV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x80\xFD[`@Q\x91\x90`\x1F\x01`\x1F\x19\x16\x82\x01`\x01`\x01`@\x1B\x03\x81\x11\x83\x82\x10\x17a\x02\xB1W`@RV\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\x05S\xF2t\x14a\t\tWP\x80c+z\xC3\xF3\x14a\x08\xB9W\x80c8\xF3\xEF\xD4\x14a\x08\x7FW\x80cZ\x07\x80u\x14a\x07\x10W\x80c\x81\xA9\xD3\x8A\x14a\x06\xD6W\x80c\xC2*\x96\x94\x14a\x01>W\x80c\xCC\xA3\xB4\xFE\x14a\x01\x03W\x80c\xD4n_\x01\x14a\0\xBEWc\xE5\x95\x1D\xD1\x14a\0\x81W_\x80\xFD[4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x80\xFD[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[P4a\0\xBBW\x80`\x03\x196\x01\x12a\0\xBBW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW`@`\x03\x196\x01\x12a\x04DW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01o\x906\x90`\x04\x01a\t\x82V[\x90`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04DWa\x01\x90\x906\x90`\x04\x01a\t\x82V[\x92\x90`\xE0\x83\x83\x81\x01\x03\x12a\x04DW`@Q\x92`\xE0\x84\x01\x84\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@R\x805\x80\x85Ra\x01\xCD` \x83\x01a\t\xB0V[` \x86\x01\x90\x81Ra\x01\xE0`@\x84\x01a\t\xB0V[`@\x87\x01\x90\x81R``\x87\x01\x90``\x85\x015\x82R`\x80\x88\x01\x92`\x80\x86\x015\x84R`\xA0\x89\x01\x94`\xA0\x87\x015\x86R`\xC0\x87\x015\x99s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16\x8B\x03a\x04DW`\xC0\x01\x99\x8AR\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x06KWQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x10a\x05\xEDWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90Q\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC0Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16B\x11a\x05bWQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x05\x04WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04\xA6WQ\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03a\x04HWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04DW_\x93a\x03\xF5a\x03\xE3\x94`@Q\x98\x89\x96\x87\x95\x86\x95\x7FAI<`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x88\x01R```$\x88\x01R`d\x87\x01\x91a\t\xC5V[\x91`\x03\x19\x85\x84\x03\x01`D\x86\x01Ra\t\xC5V[\x03\x91Z\xFA\x90\x81\x15a\x049W` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\x04)W[PQ\x16`@Q\x90\x81R\xF3[_a\x043\x91a\tAV[_a\x04\x1EV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FValidity window has ended\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FValidity window has not started\0`D\x82\x01R\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW`@Q_\x90_T\x91\x82`\x01\x1C`\x01\x84\x16\x93\x84\x15a\x08uW[` \x82\x10\x85\x14a\x08HW\x81\x84R` \x84\x01\x94\x90\x81\x15a\x08\x0FWP`\x01\x14a\x07\xB3W[P\x90a\x07j\x81`@\x93\x03\x82a\tAV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83Q\x94\x85\x93` \x85RQ\x80\x91\x81` \x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[_\x80\x80R\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x93\x92P\x90[\x80\x82\x10a\x07\xF5WP\x90\x91P\x81\x01` \x01a\x07ja\x07ZV[\x91\x92`\x01\x81` \x92T\x83\x85\x88\x01\x01R\x01\x91\x01\x90\x92\x91a\x07\xDDV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16\x85RP\x15\x15`\x05\x1B\x82\x01` \x01\x90Pa\x07ja\x07ZV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x078V[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\x04DW_`\x03\x196\x01\x12a\x04DW` \x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xA9W`@RV[\x91\x81`\x1F\x84\x01\x12\x15a\x04DW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04DW` \x83\x81\x86\x01\x95\x01\x01\x11a\x04DWV[5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04DWV[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`UpdateAttestationDocVerifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum UpdateAttestationDocVerifierCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl UpdateAttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for UpdateAttestationDocVerifierCalls {
        const NAME: &'static str = "UpdateAttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(UpdateAttestationDocVerifierCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(UpdateAttestationDocVerifierCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(UpdateAttestationDocVerifierCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<UpdateAttestationDocVerifierCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(UpdateAttestationDocVerifierCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`UpdateAttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`UpdateAttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        __provider: P,
    ) -> UpdateAttestationDocVerifierInstance<P, N> {
        UpdateAttestationDocVerifierInstance::<P, N>::new(address, __provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<UpdateAttestationDocVerifierInstance<P, N>>,
    > {
        UpdateAttestationDocVerifierInstance::<P, N>::deploy(__provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        UpdateAttestationDocVerifierInstance::<P, N>::deploy_builder(__provider)
    }
    /**A [`UpdateAttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`UpdateAttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct UpdateAttestationDocVerifierInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for UpdateAttestationDocVerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("UpdateAttestationDocVerifierInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > UpdateAttestationDocVerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`UpdateAttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`UpdateAttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            __provider: P,
        ) -> Self {
            Self {
                address,
                provider: __provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            __provider: P,
        ) -> alloy_contract::Result<UpdateAttestationDocVerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(__provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                __provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> UpdateAttestationDocVerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> UpdateAttestationDocVerifierInstance<P, N> {
            UpdateAttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > UpdateAttestationDocVerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > UpdateAttestationDocVerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
