/**

Generated by the following Solidity interface...
```solidity
interface VerifyCrosschainAddressConsistency {
    function IS_SCRIPT() external view returns (bool);
    function run() external pure;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod VerifyCrosschainAddressConsistency {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c556106ca908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163c040622614610079575063f8ccbf4714610032575f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060ff600c5460101c166040519015158152f35b5f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100755760208101907f53594e445f43524f5353434841494e000000000000000000000000000000000082527f1111111111111111111111111111111111111111000000000000000000000000602f8201527f333333333333333333333333333333333333333300000000000000000000000060438201526001605782015260578152610131607782610484565b51902060405160208101907f544553544e45545f53594e445f43524f5353434841494e00000000000000000082527f111111111111111111111111111111111111111100000000000000000000000060378201527f5555555555555555555555555555555555555555000000000000000000000000604b82015262aa36a7605f820152605f81526101c3607f82610484565b519020604051917fb11a19e800000000000000000000000000000000000000000000000000000000835260048301525f82602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610479575f9261045d575b5061025e604092835161022f8582610484565b600d81527f4d61696e6e65742053616c743a0000000000000000000000000000000000000060208201526105c6565b8151907fb11a19e800000000000000000000000000000000000000000000000000000000825260048201525f81602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa9081156104535761042f92916102f8915f91610431575b5082516102c98482610484565b600d81527f546573746e65742053616c743a0000000000000000000000000000000000000060208201526105c6565b6103a8815161030860a082610484565b606781527f5573696e67204352454154453220776974682073616d652073616c742077696c60208201527f6c2070726f6475636520636f6e73697374656e74206164647265737365732077838201527f68656e206465706c6f7965642066726f6d2073616d65206465706c6f7965722060608201527f61646472657373000000000000000000000000000000000000000000000000006080820152610684565b7f6e7669726f6e6d656e74207661726961626c657320746f2067657420636f6e738151916103d7608084610484565b605083527f4465706c6f79206f6e206561636820636861696e20776974682073616d65206560208401528201527f697374656e7420616464726573736573000000000000000000000000000000006060820152610684565b005b61044d91503d805f833e6104458183610484565b8101906104f2565b846102bc565b82513d5f823e3d90fd5b6104729192503d805f833e6104458183610484565b908261021c565b6040513d5f823e3d90fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104c557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6020818303126100755780519067ffffffffffffffff8211610075570181601f820112156100755780519067ffffffffffffffff82116104c55760405192610562601f84017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200185610484565b8284526020838301011161007557815f9260208093018386015e8301015290565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b61061161066d5f939261064185946040519485937f4b5c4277000000000000000000000000000000000000000000000000000000006020860152604060248601526064850190610583565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016044850152610583565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610484565b6020815191016a636f6e736f6c652e6c6f675afa50565b5f61064161066d82936040519283917f41304fac00000000000000000000000000000000000000000000000000000000602084015260206024840152604483019061058356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x06\xCA\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0yWPc\xF8\xCC\xBFG\x14a\x002W_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW` \x81\x01\x90\x7FSYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R\x7F\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\0\0\0\0\0\0\0\0\0\0\0\0`/\x82\x01R\x7F33333333333333333333\0\0\0\0\0\0\0\0\0\0\0\0`C\x82\x01R`\x01`W\x82\x01R`W\x81Ra\x011`w\x82a\x04\x84V[Q\x90 `@Q` \x81\x01\x90\x7FTESTNET_SYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\x82R\x7F\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\0\0\0\0\0\0\0\0\0\0\0\0`7\x82\x01R\x7FUUUUUUUUUUUUUUUUUUUU\0\0\0\0\0\0\0\0\0\0\0\0`K\x82\x01Rb\xAA6\xA7`_\x82\x01R`_\x81Ra\x01\xC3`\x7F\x82a\x04\x84V[Q\x90 `@Q\x91\x7F\xB1\x1A\x19\xE8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01R_\x82`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x04yW_\x92a\x04]W[Pa\x02^`@\x92\x83Qa\x02/\x85\x82a\x04\x84V[`\r\x81R\x7FMainnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x05\xC6V[\x81Q\x90\x7F\xB1\x1A\x19\xE8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`\x04\x82\x01R_\x81`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x04SWa\x04/\x92\x91a\x02\xF8\x91_\x91a\x041W[P\x82Qa\x02\xC9\x84\x82a\x04\x84V[`\r\x81R\x7FTestnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x05\xC6V[a\x03\xA8\x81Qa\x03\x08`\xA0\x82a\x04\x84V[`g\x81R\x7FUsing CREATE2 with same salt wil` \x82\x01R\x7Fl produce consistent addresses w\x83\x82\x01R\x7Fhen deployed from same deployer ``\x82\x01R\x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x80\x82\x01Ra\x06\x84V[\x7Fnvironment variables to get cons\x81Q\x91a\x03\xD7`\x80\x84a\x04\x84V[`P\x83R\x7FDeploy on each chain with same e` \x84\x01R\x82\x01R\x7Fistent addresses\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x82\x01Ra\x06\x84V[\0[a\x04M\x91P=\x80_\x83>a\x04E\x81\x83a\x04\x84V[\x81\x01\x90a\x04\xF2V[\x84a\x02\xBCV[\x82Q=_\x82>=\x90\xFD[a\x04r\x91\x92P=\x80_\x83>a\x04E\x81\x83a\x04\x84V[\x90\x82a\x02\x1CV[`@Q=_\x82>=\x90\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xC5W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[` \x81\x83\x03\x12a\0uW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\0uW\x01\x81`\x1F\x82\x01\x12\x15a\0uW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\xC5W`@Q\x92a\x05b`\x1F\x84\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x85a\x04\x84V[\x82\x84R` \x83\x83\x01\x01\x11a\0uW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[a\x06\x11a\x06m_\x93\x92a\x06A\x85\x94`@Q\x94\x85\x93\x7FK\\Bw\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\x05\x83V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`D\x85\x01Ra\x05\x83V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x04\x84V[` \x81Q\x91\x01jconsole.logZ\xFAPV[_a\x06Aa\x06m\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x05\x83V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c908163c040622614610079575063f8ccbf4714610032575f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060ff600c5460101c166040519015158152f35b5f80fd5b34610075575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100755760208101907f53594e445f43524f5353434841494e000000000000000000000000000000000082527f1111111111111111111111111111111111111111000000000000000000000000602f8201527f333333333333333333333333333333333333333300000000000000000000000060438201526001605782015260578152610131607782610484565b51902060405160208101907f544553544e45545f53594e445f43524f5353434841494e00000000000000000082527f111111111111111111111111111111111111111100000000000000000000000060378201527f5555555555555555555555555555555555555555000000000000000000000000604b82015262aa36a7605f820152605f81526101c3607f82610484565b519020604051917fb11a19e800000000000000000000000000000000000000000000000000000000835260048301525f82602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa918215610479575f9261045d575b5061025e604092835161022f8582610484565b600d81527f4d61696e6e65742053616c743a0000000000000000000000000000000000000060208201526105c6565b8151907fb11a19e800000000000000000000000000000000000000000000000000000000825260048201525f81602481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa9081156104535761042f92916102f8915f91610431575b5082516102c98482610484565b600d81527f546573746e65742053616c743a0000000000000000000000000000000000000060208201526105c6565b6103a8815161030860a082610484565b606781527f5573696e67204352454154453220776974682073616d652073616c742077696c60208201527f6c2070726f6475636520636f6e73697374656e74206164647265737365732077838201527f68656e206465706c6f7965642066726f6d2073616d65206465706c6f7965722060608201527f61646472657373000000000000000000000000000000000000000000000000006080820152610684565b7f6e7669726f6e6d656e74207661726961626c657320746f2067657420636f6e738151916103d7608084610484565b605083527f4465706c6f79206f6e206561636820636861696e20776974682073616d65206560208401528201527f697374656e7420616464726573736573000000000000000000000000000000006060820152610684565b005b61044d91503d805f833e6104458183610484565b8101906104f2565b846102bc565b82513d5f823e3d90fd5b6104729192503d805f833e6104458183610484565b908261021c565b6040513d5f823e3d90fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104c557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6020818303126100755780519067ffffffffffffffff8211610075570181601f820112156100755780519067ffffffffffffffff82116104c55760405192610562601f84017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200185610484565b8284526020838301011161007557815f9260208093018386015e8301015290565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b61061161066d5f939261064185946040519485937f4b5c4277000000000000000000000000000000000000000000000000000000006020860152604060248601526064850190610583565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016044850152610583565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610484565b6020815191016a636f6e736f6c652e6c6f675afa50565b5f61064161066d82936040519283917f41304fac00000000000000000000000000000000000000000000000000000000602084015260206024840152604483019061058356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0yWPc\xF8\xCC\xBFG\x14a\x002W_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0uW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0uW` \x81\x01\x90\x7FSYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R\x7F\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\0\0\0\0\0\0\0\0\0\0\0\0`/\x82\x01R\x7F33333333333333333333\0\0\0\0\0\0\0\0\0\0\0\0`C\x82\x01R`\x01`W\x82\x01R`W\x81Ra\x011`w\x82a\x04\x84V[Q\x90 `@Q` \x81\x01\x90\x7FTESTNET_SYND_CROSSCHAIN\0\0\0\0\0\0\0\0\0\x82R\x7F\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\0\0\0\0\0\0\0\0\0\0\0\0`7\x82\x01R\x7FUUUUUUUUUUUUUUUUUUUU\0\0\0\0\0\0\0\0\0\0\0\0`K\x82\x01Rb\xAA6\xA7`_\x82\x01R`_\x81Ra\x01\xC3`\x7F\x82a\x04\x84V[Q\x90 `@Q\x91\x7F\xB1\x1A\x19\xE8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01R_\x82`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x04yW_\x92a\x04]W[Pa\x02^`@\x92\x83Qa\x02/\x85\x82a\x04\x84V[`\r\x81R\x7FMainnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x05\xC6V[\x81Q\x90\x7F\xB1\x1A\x19\xE8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`\x04\x82\x01R_\x81`$\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x04SWa\x04/\x92\x91a\x02\xF8\x91_\x91a\x041W[P\x82Qa\x02\xC9\x84\x82a\x04\x84V[`\r\x81R\x7FTestnet Salt:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x05\xC6V[a\x03\xA8\x81Qa\x03\x08`\xA0\x82a\x04\x84V[`g\x81R\x7FUsing CREATE2 with same salt wil` \x82\x01R\x7Fl produce consistent addresses w\x83\x82\x01R\x7Fhen deployed from same deployer ``\x82\x01R\x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x80\x82\x01Ra\x06\x84V[\x7Fnvironment variables to get cons\x81Q\x91a\x03\xD7`\x80\x84a\x04\x84V[`P\x83R\x7FDeploy on each chain with same e` \x84\x01R\x82\x01R\x7Fistent addresses\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x82\x01Ra\x06\x84V[\0[a\x04M\x91P=\x80_\x83>a\x04E\x81\x83a\x04\x84V[\x81\x01\x90a\x04\xF2V[\x84a\x02\xBCV[\x82Q=_\x82>=\x90\xFD[a\x04r\x91\x92P=\x80_\x83>a\x04E\x81\x83a\x04\x84V[\x90\x82a\x02\x1CV[`@Q=_\x82>=\x90\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xC5W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[` \x81\x83\x03\x12a\0uW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\0uW\x01\x81`\x1F\x82\x01\x12\x15a\0uW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\xC5W`@Q\x92a\x05b`\x1F\x84\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x85a\x04\x84V[\x82\x84R` \x83\x83\x01\x01\x11a\0uW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[a\x06\x11a\x06m_\x93\x92a\x06A\x85\x94`@Q\x94\x85\x93\x7FK\\Bw\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\x05\x83V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`D\x85\x01Ra\x05\x83V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x04\x84V[` \x81Q\x91\x01jconsole.logZ\xFAPV[_a\x06Aa\x06m\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x05\x83V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external pure;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`VerifyCrosschainAddressConsistency`](self) function calls.
    pub enum VerifyCrosschainAddressConsistencyCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl VerifyCrosschainAddressConsistencyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VerifyCrosschainAddressConsistencyCalls {
        const NAME: &'static str = "VerifyCrosschainAddressConsistencyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<VerifyCrosschainAddressConsistencyCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        VerifyCrosschainAddressConsistencyCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VerifyCrosschainAddressConsistencyCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        VerifyCrosschainAddressConsistencyCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VerifyCrosschainAddressConsistencyCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`VerifyCrosschainAddressConsistency`](self) contract instance.

See the [wrapper's documentation](`VerifyCrosschainAddressConsistencyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VerifyCrosschainAddressConsistencyInstance<T, P, N> {
        VerifyCrosschainAddressConsistencyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            VerifyCrosschainAddressConsistencyInstance<T, P, N>,
        >,
    > {
        VerifyCrosschainAddressConsistencyInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        VerifyCrosschainAddressConsistencyInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`VerifyCrosschainAddressConsistency`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`VerifyCrosschainAddressConsistency`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VerifyCrosschainAddressConsistencyInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for VerifyCrosschainAddressConsistencyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VerifyCrosschainAddressConsistencyInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VerifyCrosschainAddressConsistencyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`VerifyCrosschainAddressConsistency`](self) contract instance.

See the [wrapper's documentation](`VerifyCrosschainAddressConsistencyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            VerifyCrosschainAddressConsistencyInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > VerifyCrosschainAddressConsistencyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> VerifyCrosschainAddressConsistencyInstance<T, P, N> {
            VerifyCrosschainAddressConsistencyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VerifyCrosschainAddressConsistencyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VerifyCrosschainAddressConsistencyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
