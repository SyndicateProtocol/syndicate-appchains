/**

Generated by the following Solidity interface...
```solidity
interface SealedBidAuctionSequencingModule {
    error AddressNotAllowed();
    error AuctionNotActive();
    error AuctionNotEnded();
    error BidExceedsDeposit();
    error InvalidBidDeposit();
    error InvalidBidReveal();
    error InvalidDuration();
    error NoBidFound();
    error NoFundsToWithdraw();
    error TransactionFailed();

    event BidRevealed(address indexed bidder, uint256 bid, bool isHighestBid);

    constructor(uint256 _duration, address _treasury);

    function auctionActive() external view returns (bool);
    function auctionType() external view returns (string memory);
    function bid(bytes32 _sealedBid) external payable;
    function bids(address) external view returns (bytes32 sealedBid, uint256 deposit);
    function endTime() external view returns (uint256);
    function finalizeAuction() external;
    function getAuctionEndTime() external view returns (uint256);
    function getAuctionType() external view returns (string memory);
    function getAuctionWinner() external view returns (address);
    function getCurrentPrice() external view returns (uint256);
    function highestBid() external view returns (uint256);
    function highestBidder() external view returns (address);
    function isAllowed(address proposer, address, bytes memory) external view returns (bool);
    function isAuctionActive() external view returns (bool);
    function refunds(address) external view returns (uint256);
    function revealBid(uint256 _bid, string memory _salt) external;
    function treasury() external view returns (address);
    function withdrawFunds() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_duration",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_treasury",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "auctionActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "auctionType",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bid",
    "inputs": [
      {
        "name": "_sealedBid",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "bids",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "sealedBid",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "deposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "endTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "finalizeAuction",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAuctionEndTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAuctionType",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAuctionWinner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentPrice",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "highestBid",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "highestBidder",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAuctionActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refunds",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revealBid",
    "inputs": [
      {
        "name": "_bid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_salt",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "treasury",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawFunds",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BidRevealed",
    "inputs": [
      {
        "name": "bidder",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "bid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "isHighestBid",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AuctionNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AuctionNotEnded",
    "inputs": []
  },
  {
    "type": "error",
    "name": "BidExceedsDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidBidDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidBidReveal",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidDuration",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoBidFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoFundsToWithdraw",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TransactionFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SealedBidAuctionSequencingModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052346100305761001a61001461012a565b9061045c565b610022610035565b611527610512823961152790f35b61003b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100679061003f565b810190811060018060401b0382111761007f57604052565b610049565b90610097610090610035565b928361005d565b565b5f80fd5b90565b6100a98161009d565b036100b057565b5f80fd5b905051906100c1826100a0565b565b60018060a01b031690565b6100d7906100c3565b90565b6100e3816100ce565b036100ea57565b5f80fd5b905051906100fb826100da565b565b91906040838203126101255780610119610122925f86016100b4565b936020016100ee565b90565b610099565b610148611a398038038061013d81610084565b9283398101906100fd565b9091565b90565b90565b61016661016161016b9261014c565b61014f565b6100c3565b90565b61017790610152565b90565b5f0190565b61019361018e6101989261014c565b61014f565b61009d565b90565b5f1b90565b906101b160018060a01b039161019b565b9181191691161790565b6101cf6101ca6101d4926100c3565b61014f565b6100c3565b90565b6101e0906101bb565b90565b6101ec906101d7565b90565b90565b9061020761020261020e926101e3565b6101ef565b82546101a0565b9055565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610246575b602083101461024157565b610212565b91607f1691610236565b5f5260205f2090565b601f602091010490565b1b90565b9190600861028291029161027c5f1984610263565b92610263565b9181191691161790565b6102a061029b6102a59261009d565b61014f565b61009d565b90565b90565b91906102c16102bc6102c99361028c565b6102a8565b908354610267565b9055565b5f90565b6102e3916102dd6102cd565b916102ab565b565b5b8181106102f1575050565b806102fe5f6001936102d1565b016102e6565b9190601f8111610314575b505050565b61032061034593610250565b90602061032c84610259565b8301931061034d575b61033e90610259565b01906102e5565b5f808061030f565b915061033e81929050610335565b610370600961036a8354610226565b83610304565b60127f5365616c65644269640000000000000000000000000000000000000000000000019055565b6103a19061035b565b565b906103af60ff9161019b565b9181191691161790565b151590565b6103c7906103b9565b90565b90565b906103e26103dd6103e9926103be565b6103ca565b82546103a3565b9055565b634e487b7160e01b5f52601160045260245ffd5b6104106104169193929361009d565b9261009d565b820180921161042157565b6103ed565b906104325f199161019b565b9181191691161790565b9061045161044c6104589261028c565b6102a8565b8254610426565b9055565b908061047861047261046d5f61016e565b6100ce565b916100ce565b146104ee578161049061048a5f61017f565b9161009d565b146104cb576104c9916104a66104c2925f6101f2565b6104b06001610398565b6104bc600160026103cd565b42610401565b600361043c565b565b6104d3610035565b637616640160e01b8152806104ea6004820161017a565b0390fd5b6104f6610035565b6315a9bc2760e11b81528061050d6004820161017a565b0390fdfe60806040526004361015610013575b610ba1565b61001d5f3561013c565b806311163b2c146101375780632163b8c51461013257806324600fc31461012d5780633197cbb6146101285780634c583d8a1461012357806361d027b31461011e57806362ea82db14610119578063787c0a6c146101145780637a3979dc1461010f57806391f901571461010a5780639222800614610105578063957bb1e014610100578063994595e1146100fb578063bc3da535146100f6578063d1b4b9a3146100f1578063d57bde79146100ec578063eb91d37e146100e75763f77282ab0361000e57610b6e565b610b39565b610b04565b610ac0565b610a8b565b610a27565b6108b9565b610843565b6107d3565b61078b565b610696565b610660565b6104fa565b610487565b610419565b610388565b610354565b6101ca565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015a57565b61014c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6101a06101a96020936101ae936101978161015f565b93848093610163565b9586910161016c565b610177565b0190565b6101c79160208201915f818403910152610181565b90565b346101fa576101da366004610150565b6101f66101e5610bb6565b6101ed610142565b918291826101b2565b0390f35b610148565b5f80fd5b90565b61020f81610203565b0361021657565b5f80fd5b9050359061022782610206565b565b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b9061024f90610177565b810190811067ffffffffffffffff82111761026957604052565b610231565b9061028161027a610142565b9283610245565b565b67ffffffffffffffff81116102a15761029d602091610177565b0190565b610231565b90825f939282370152565b909291926102c66102c182610283565b61026e565b938185526020850190828401116102e2576102e0926102a6565b565b61022d565b9080601f8301121561030557816020610302933591016102b1565b90565b610229565b91909160408184031261034a57610323835f830161021a565b92602082013567ffffffffffffffff81116103455761034292016102e7565b90565b6101ff565b61014c565b5f0190565b346103835761036d61036736600461030a565b9061108f565b610375610142565b8061037f8161034f565b0390f35b610148565b346103b657610398366004610150565b6103a0611147565b6103a8610142565b806103b28161034f565b0390f35b610148565b1c90565b90565b6103d29060086103d793026103bb565b6103bf565b90565b906103e591546103c2565b90565b6103f460035f906103da565b90565b61040090610203565b9052565b9190610417905f602085019401906103f7565b565b3461044957610429366004610150565b6104456104346103e8565b61043c610142565b91829182610404565b0390f35b610148565b60018060a01b031690565b6104629061044e565b90565b61046e90610459565b9052565b9190610485905f60208501940190610465565b565b346104b757610497366004610150565b6104b36104a261121e565b6104aa610142565b91829182610472565b0390f35b610148565b60018060a01b031690565b6104d79060086104dc93026103bb565b6104bc565b90565b906104ea91546104c7565b90565b6104f75f806104df565b90565b3461052a5761050a366004610150565b6105266105156104ed565b61051d610142565b91829182610472565b0390f35b610148565b61053881610459565b0361053f57565b5f80fd5b905035906105508261052f565b565b9060208282031261056b57610568915f01610543565b90565b61014c565b90565b61058761058261058c9261044e565b610570565b61044e565b90565b61059890610573565b90565b6105a49061058f565b90565b906105b19061059b565b5f5260205260405f2090565b5f1c90565b90565b6105d16105d6916105bd565b6105c2565b90565b6105e390546105c5565b90565b6105f26105f7916105bd565b6103bf565b90565b61060490546105e6565b90565b6106129060066105a7565b9061062a60016106235f85016105d9565b93016105fa565b90565b90565b6106399061062d565b9052565b91602061065e92949361065760408201965f830190610630565b01906103f7565b565b3461069157610678610673366004610552565b610607565b9061068d610684610142565b9283928361063d565b0390f35b610148565b346106c6576106a6366004610150565b6106c26106b1611238565b6106b9610142565b91829182610404565b0390f35b610148565b5f80fd5b5f80fd5b909182601f8301121561070d5781359167ffffffffffffffff831161070857602001926001830284011161070357565b6106cf565b6106cb565b610229565b9160608383031261075f57610729825f8501610543565b926107378360208301610543565b92604082013567ffffffffffffffff811161075a5761075692016106d3565b9091565b6101ff565b61014c565b151590565b61077290610764565b9052565b9190610789905f60208501940190610769565b565b346107bf576107bb6107aa6107a1366004610712565b92919091611252565b6107b2610142565b91829182610776565b0390f35b610148565b6107d060045f906104df565b90565b34610803576107e3366004610150565b6107ff6107ee6107c4565b6107f6610142565b91829182610472565b0390f35b610148565b60ff1690565b61081e90600861082393026103bb565b610808565b90565b90610831915461080e565b90565b61084060025f90610826565b90565b3461087357610853366004610150565b61086f61085e610834565b610866610142565b91829182610776565b0390f35b610148565b6108818161062d565b0361088857565b5f80fd5b9050359061089982610878565b565b906020828203126108b4576108b1915f0161088c565b90565b61014c565b6108cc6108c736600461089b565b6113ba565b6108d4610142565b806108de8161034f565b0390f35b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610929575b602083101461092457565b6108f5565b91607f1691610919565b60209181520190565b5f5260205f2090565b905f929180549061095f61095883610909565b8094610933565b916001811690815f146109b6575060011461097a575b505050565b610987919293945061093c565b915f925b81841061099e57505001905f8080610975565b6001816020929593955484860152019101929061098b565b92949550505060ff19168252151560200201905f8080610975565b906109db91610945565b90565b906109fe6109f7926109ee610142565b938480926109d1565b0383610245565b565b905f10610a1357610a10906109de565b90565b6108e2565b610a2460015f90610a00565b90565b34610a5757610a37366004610150565b610a53610a42610a18565b610a4a610142565b918291826101b2565b0390f35b610148565b90610a669061059b565b5f5260205260405f2090565b610a8890610a836007915f92610a5c565b6103da565b90565b34610abb57610ab7610aa6610aa1366004610552565b610a72565b610aae610142565b91829182610404565b0390f35b610148565b34610af057610ad0366004610150565b610aec610adb6113c5565b610ae3610142565b91829182610776565b0390f35b610148565b610b0160055f906103da565b90565b34610b3457610b14366004610150565b610b30610b1f610af5565b610b27610142565b91829182610404565b0390f35b610148565b34610b6957610b49366004610150565b610b65610b546113db565b610b5c610142565b91829182610404565b0390f35b610148565b34610b9c57610b7e366004610150565b610b86611436565b610b8e610142565b80610b988161034f565b0390f35b610148565b5f80fd5b606090565b610bb3906109de565b90565b610bbe610ba5565b50610bc96001610baa565b90565b610bd8610bdd916105bd565b610808565b90565b610bea9054610bcc565b90565b90610c01610bfb6002610be0565b15610764565b610c1057610c0e91610e49565b565b610c18610142565b6334dc687f60e11b815280610c2f6004820161034f565b0390fd5b90610c3d9061062d565b9052565b90610c4b90610203565b9052565b610c59604061026e565b90565b90610c93610c8a6001610c6d610c4f565b94610c84610c7c5f83016105d9565b5f8801610c33565b016105fa565b60208401610c41565b565b610c9e90610c5c565b90565b610cab9051610203565b90565b90565b610cc5610cc0610cca92610cae565b610570565b610203565b90565b90565b610cdc610ce191610203565b610ccd565b9052565b905090565b610d0f610d0692602092610cfd8161015f565b94858093610ce5565b9384910161016c565b0190565b80610d24602092610d2b9594610cd0565b0190610cea565b90565b60200190565b5190565b610d42905161062d565b90565b5f1b90565b90610d565f1991610d45565b9181191691161790565b610d74610d6f610d7992610203565b610570565b610203565b90565b90565b90610d94610d8f610d9b92610d60565b610d7c565b8254610d4a565b9055565b610dab610db0916105bd565b6104bc565b90565b610dbd9054610d9f565b90565b610dd4610dcf610dd992610cae565b610570565b61044e565b90565b610de590610dc0565b90565b90610df960018060a01b0391610d45565b9181191691161790565b90565b90610e1b610e16610e229261059b565b610e03565b8254610de8565b9055565b916020610e47929493610e4060408201965f8301906103f7565b0190610769565b565b610e5d610e58600633906105a7565b610c95565b91610e6a60208401610ca1565b610e7c610e765f610cb1565b91610203565b1461106c5781610e9f610e99610e9460208701610ca1565b610203565b91610203565b1161104957610ece82610ebf610eb3610142565b93849260208401610d13565b60208201810382520382610245565b610ee0610eda82610d34565b91610d2e565b20610efd610ef7610ef25f8601610d38565b61062d565b9161062d565b03611026575f9181610f20610f1a610f1560056105fa565b610203565b91610203565b115f1461100157509050610f346004610db3565b610f4e610f48610f435f610ddc565b610459565b91610459565b03610fd5575b610f5f816005610d7f565b610f6a336004610e06565b6001905b339091610f9b7f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe595329261059b565b92610fb0610fa7610142565b92839283610e26565b0390a2610fd3610fbf5f610cb1565b6001610fcd600633906105a7565b01610d7f565b565b610ffc610fe260056105fa565b610ff76007610ff16004610db3565b90610a5c565b610d7f565b610f54565b61101060206110219201610ca1565b61101c60073390610a5c565b610d7f565b610f6e565b61102e610142565b6329264d6b60e21b8152806110456004820161034f565b0390fd5b611051610142565b6379dd5d2b60e11b8152806110686004820161034f565b0390fd5b611074610142565b63b82eb6b760e01b81528061108b6004820161034f565b0390fd5b9061109991610bed565b565b6110a490610573565b90565b6110b09061109b565b90565b6110bc9061058f565b90565b905090565b6110cf5f80926110bf565b0190565b6110dc906110c4565b90565b67ffffffffffffffff81116110fd576110f9602091610177565b0190565b610231565b9061111461110f836110df565b61026e565b918252565b606090565b3d5f146111395761112e3d611102565b903d5f602084013e5b565b611141611119565b90611137565b61115b61115660073390610a5c565b6105fa565b8061116e6111685f610cb1565b91610203565b146111f7575f806111ce9261119661118583610cb1565b61119160073390610a5c565b610d7f565b6111a76111a2336110a7565b6110b3565b906111b0610142565b90816111bb816110d3565b03925af16111c761111e565b5015610764565b6111d457565b6111dc610142565b6317f2c34560e31b8152806111f36004820161034f565b0390fd5b6111ff610142565b6367e3990d60e01b8152806112166004820161034f565b0390fd5b5f90565b61122661121a565b506112316004610db3565b90565b5f90565b611240611234565b5061124b60036105fa565b90565b5f90565b9250505061125e61124e565b5061127a61127461126f6004610db3565b610459565b91610459565b1490565b61129161128b6002610be0565b15610764565b6112a05761129e90611347565b565b6112a8610142565b6334dc687f60e11b8152806112bf6004820161034f565b0390fd5b6112cd604061026e565b90565b6112d99061062d565b90565b6112e5906105bd565b90565b906112fd6112f8611304926112d0565b6112dc565b8254610d4a565b9055565b90611333602060016113399461132b5f82016113255f8801610d38565b906112e8565b019201610ca1565b90610d7f565b565b9061134591611308565b565b3461135a6113545f610cb1565b91610203565b1461139757611395906113843461137b6113726112c3565b935f8501610c33565b60208301610c41565b611390600633906105a7565b61133b565b565b61139f610142565b6361700f9160e01b8152806113b66004820161034f565b0390fd5b6113c39061127e565b565b6113cd61124e565b506113d86002610be0565b90565b6113e3611234565b506113ee60056105fa565b90565b906113fd60ff91610d45565b9181191691161790565b61141090610764565b90565b90565b9061142b61142661143292611407565b611413565b82546113f1565b9055565b4261145261144c61144760036105fa565b610203565b91610203565b10611504576114625f6002611416565b61146c6004610db3565b61148661148061147b5f610ddc565b610459565b91610459565b0361148e575b565b6114dc5f806114ac6114a76114a283610db3565b6110a7565b6110b3565b6114b660056105fa565b6114be610142565b90816114c9816110d3565b03925af16114d561111e565b5015610764565b1561148c576114e9610142565b6317f2c34560e31b8152806115006004820161034f565b0390fd5b61150c610142565b636463738960e01b8152806115236004820161034f565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\x000Wa\0\x1Aa\0\x14a\x01*V[\x90a\x04\\V[a\0\"a\x005V[a\x15'a\x05\x12\x829a\x15'\x90\xF3[a\0;V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0g\x90a\0?V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x7FW`@RV[a\0IV[\x90a\0\x97a\0\x90a\x005V[\x92\x83a\0]V[V[_\x80\xFD[\x90V[a\0\xA9\x81a\0\x9DV[\x03a\0\xB0WV[_\x80\xFD[\x90PQ\x90a\0\xC1\x82a\0\xA0V[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD7\x90a\0\xC3V[\x90V[a\0\xE3\x81a\0\xCEV[\x03a\0\xEAWV[_\x80\xFD[\x90PQ\x90a\0\xFB\x82a\0\xDAV[V[\x91\x90`@\x83\x82\x03\x12a\x01%W\x80a\x01\x19a\x01\"\x92_\x86\x01a\0\xB4V[\x93` \x01a\0\xEEV[\x90V[a\0\x99V[a\x01Ha\x1A9\x808\x03\x80a\x01=\x81a\0\x84V[\x92\x839\x81\x01\x90a\0\xFDV[\x90\x91V[\x90V[\x90V[a\x01fa\x01aa\x01k\x92a\x01LV[a\x01OV[a\0\xC3V[\x90V[a\x01w\x90a\x01RV[\x90V[_\x01\x90V[a\x01\x93a\x01\x8Ea\x01\x98\x92a\x01LV[a\x01OV[a\0\x9DV[\x90V[_\x1B\x90V[\x90a\x01\xB1`\x01\x80`\xA0\x1B\x03\x91a\x01\x9BV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xCFa\x01\xCAa\x01\xD4\x92a\0\xC3V[a\x01OV[a\0\xC3V[\x90V[a\x01\xE0\x90a\x01\xBBV[\x90V[a\x01\xEC\x90a\x01\xD7V[\x90V[\x90V[\x90a\x02\x07a\x02\x02a\x02\x0E\x92a\x01\xE3V[a\x01\xEFV[\x82Ta\x01\xA0V[\x90UV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x02FW[` \x83\x10\x14a\x02AWV[a\x02\x12V[\x91`\x7F\x16\x91a\x026V[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x02\x82\x91\x02\x91a\x02|_\x19\x84a\x02cV[\x92a\x02cV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xA0a\x02\x9Ba\x02\xA5\x92a\0\x9DV[a\x01OV[a\0\x9DV[\x90V[\x90V[\x91\x90a\x02\xC1a\x02\xBCa\x02\xC9\x93a\x02\x8CV[a\x02\xA8V[\x90\x83Ta\x02gV[\x90UV[_\x90V[a\x02\xE3\x91a\x02\xDDa\x02\xCDV[\x91a\x02\xABV[V[[\x81\x81\x10a\x02\xF1WPPV[\x80a\x02\xFE_`\x01\x93a\x02\xD1V[\x01a\x02\xE6V[\x91\x90`\x1F\x81\x11a\x03\x14W[PPPV[a\x03 a\x03E\x93a\x02PV[\x90` a\x03,\x84a\x02YV[\x83\x01\x93\x10a\x03MW[a\x03>\x90a\x02YV[\x01\x90a\x02\xE5V[_\x80\x80a\x03\x0FV[\x91Pa\x03>\x81\x92\x90Pa\x035V[a\x03p`\ta\x03j\x83Ta\x02&V[\x83a\x03\x04V[`\x12\x7FSealedBid\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x90UV[a\x03\xA1\x90a\x03[V[V[\x90a\x03\xAF`\xFF\x91a\x01\x9BV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x03\xC7\x90a\x03\xB9V[\x90V[\x90V[\x90a\x03\xE2a\x03\xDDa\x03\xE9\x92a\x03\xBEV[a\x03\xCAV[\x82Ta\x03\xA3V[\x90UV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x04\x10a\x04\x16\x91\x93\x92\x93a\0\x9DV[\x92a\0\x9DV[\x82\x01\x80\x92\x11a\x04!WV[a\x03\xEDV[\x90a\x042_\x19\x91a\x01\x9BV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x04Qa\x04La\x04X\x92a\x02\x8CV[a\x02\xA8V[\x82Ta\x04&V[\x90UV[\x90\x80a\x04xa\x04ra\x04m_a\x01nV[a\0\xCEV[\x91a\0\xCEV[\x14a\x04\xEEW\x81a\x04\x90a\x04\x8A_a\x01\x7FV[\x91a\0\x9DV[\x14a\x04\xCBWa\x04\xC9\x91a\x04\xA6a\x04\xC2\x92_a\x01\xF2V[a\x04\xB0`\x01a\x03\x98V[a\x04\xBC`\x01`\x02a\x03\xCDV[Ba\x04\x01V[`\x03a\x04<V[V[a\x04\xD3a\x005V[cv\x16d\x01`\xE0\x1B\x81R\x80a\x04\xEA`\x04\x82\x01a\x01zV[\x03\x90\xFD[a\x04\xF6a\x005V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x05\r`\x04\x82\x01a\x01zV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B\xA1V[a\0\x1D_5a\x01<V[\x80c\x11\x16;,\x14a\x017W\x80c!c\xB8\xC5\x14a\x012W\x80c$`\x0F\xC3\x14a\x01-W\x80c1\x97\xCB\xB6\x14a\x01(W\x80cLX=\x8A\x14a\x01#W\x80ca\xD0'\xB3\x14a\x01\x1EW\x80cb\xEA\x82\xDB\x14a\x01\x19W\x80cx|\nl\x14a\x01\x14W\x80cz9y\xDC\x14a\x01\x0FW\x80c\x91\xF9\x01W\x14a\x01\nW\x80c\x92\"\x80\x06\x14a\x01\x05W\x80c\x95{\xB1\xE0\x14a\x01\0W\x80c\x99E\x95\xE1\x14a\0\xFBW\x80c\xBC=\xA55\x14a\0\xF6W\x80c\xD1\xB4\xB9\xA3\x14a\0\xF1W\x80c\xD5{\xDEy\x14a\0\xECW\x80c\xEB\x91\xD3~\x14a\0\xE7Wc\xF7r\x82\xAB\x03a\0\x0EWa\x0BnV[a\x0B9V[a\x0B\x04V[a\n\xC0V[a\n\x8BV[a\n'V[a\x08\xB9V[a\x08CV[a\x07\xD3V[a\x07\x8BV[a\x06\x96V[a\x06`V[a\x04\xFAV[a\x04\x87V[a\x04\x19V[a\x03\x88V[a\x03TV[a\x01\xCAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01ZWV[a\x01LV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01\xA0a\x01\xA9` \x93a\x01\xAE\x93a\x01\x97\x81a\x01_V[\x93\x84\x80\x93a\x01cV[\x95\x86\x91\x01a\x01lV[a\x01wV[\x01\x90V[a\x01\xC7\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\x81V[\x90V[4a\x01\xFAWa\x01\xDA6`\x04a\x01PV[a\x01\xF6a\x01\xE5a\x0B\xB6V[a\x01\xEDa\x01BV[\x91\x82\x91\x82a\x01\xB2V[\x03\x90\xF3[a\x01HV[_\x80\xFD[\x90V[a\x02\x0F\x81a\x02\x03V[\x03a\x02\x16WV[_\x80\xFD[\x90P5\x90a\x02'\x82a\x02\x06V[V[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02O\x90a\x01wV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02iW`@RV[a\x021V[\x90a\x02\x81a\x02za\x01BV[\x92\x83a\x02EV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xA1Wa\x02\x9D` \x91a\x01wV[\x01\x90V[a\x021V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x02\xC6a\x02\xC1\x82a\x02\x83V[a\x02nV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x02\xE2Wa\x02\xE0\x92a\x02\xA6V[V[a\x02-V[\x90\x80`\x1F\x83\x01\x12\x15a\x03\x05W\x81` a\x03\x02\x935\x91\x01a\x02\xB1V[\x90V[a\x02)V[\x91\x90\x91`@\x81\x84\x03\x12a\x03JWa\x03#\x83_\x83\x01a\x02\x1AV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03EWa\x03B\x92\x01a\x02\xE7V[\x90V[a\x01\xFFV[a\x01LV[_\x01\x90V[4a\x03\x83Wa\x03ma\x03g6`\x04a\x03\nV[\x90a\x10\x8FV[a\x03ua\x01BV[\x80a\x03\x7F\x81a\x03OV[\x03\x90\xF3[a\x01HV[4a\x03\xB6Wa\x03\x986`\x04a\x01PV[a\x03\xA0a\x11GV[a\x03\xA8a\x01BV[\x80a\x03\xB2\x81a\x03OV[\x03\x90\xF3[a\x01HV[\x1C\x90V[\x90V[a\x03\xD2\x90`\x08a\x03\xD7\x93\x02a\x03\xBBV[a\x03\xBFV[\x90V[\x90a\x03\xE5\x91Ta\x03\xC2V[\x90V[a\x03\xF4`\x03_\x90a\x03\xDAV[\x90V[a\x04\0\x90a\x02\x03V[\x90RV[\x91\x90a\x04\x17\x90_` \x85\x01\x94\x01\x90a\x03\xF7V[V[4a\x04IWa\x04)6`\x04a\x01PV[a\x04Ea\x044a\x03\xE8V[a\x04<a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04b\x90a\x04NV[\x90V[a\x04n\x90a\x04YV[\x90RV[\x91\x90a\x04\x85\x90_` \x85\x01\x94\x01\x90a\x04eV[V[4a\x04\xB7Wa\x04\x976`\x04a\x01PV[a\x04\xB3a\x04\xA2a\x12\x1EV[a\x04\xAAa\x01BV[\x91\x82\x91\x82a\x04rV[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xD7\x90`\x08a\x04\xDC\x93\x02a\x03\xBBV[a\x04\xBCV[\x90V[\x90a\x04\xEA\x91Ta\x04\xC7V[\x90V[a\x04\xF7_\x80a\x04\xDFV[\x90V[4a\x05*Wa\x05\n6`\x04a\x01PV[a\x05&a\x05\x15a\x04\xEDV[a\x05\x1Da\x01BV[\x91\x82\x91\x82a\x04rV[\x03\x90\xF3[a\x01HV[a\x058\x81a\x04YV[\x03a\x05?WV[_\x80\xFD[\x90P5\x90a\x05P\x82a\x05/V[V[\x90` \x82\x82\x03\x12a\x05kWa\x05h\x91_\x01a\x05CV[\x90V[a\x01LV[\x90V[a\x05\x87a\x05\x82a\x05\x8C\x92a\x04NV[a\x05pV[a\x04NV[\x90V[a\x05\x98\x90a\x05sV[\x90V[a\x05\xA4\x90a\x05\x8FV[\x90V[\x90a\x05\xB1\x90a\x05\x9BV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x05\xD1a\x05\xD6\x91a\x05\xBDV[a\x05\xC2V[\x90V[a\x05\xE3\x90Ta\x05\xC5V[\x90V[a\x05\xF2a\x05\xF7\x91a\x05\xBDV[a\x03\xBFV[\x90V[a\x06\x04\x90Ta\x05\xE6V[\x90V[a\x06\x12\x90`\x06a\x05\xA7V[\x90a\x06*`\x01a\x06#_\x85\x01a\x05\xD9V[\x93\x01a\x05\xFAV[\x90V[\x90V[a\x069\x90a\x06-V[\x90RV[\x91` a\x06^\x92\x94\x93a\x06W`@\x82\x01\x96_\x83\x01\x90a\x060V[\x01\x90a\x03\xF7V[V[4a\x06\x91Wa\x06xa\x06s6`\x04a\x05RV[a\x06\x07V[\x90a\x06\x8Da\x06\x84a\x01BV[\x92\x83\x92\x83a\x06=V[\x03\x90\xF3[a\x01HV[4a\x06\xC6Wa\x06\xA66`\x04a\x01PV[a\x06\xC2a\x06\xB1a\x128V[a\x06\xB9a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x07\rW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x07\x08W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x07\x03WV[a\x06\xCFV[a\x06\xCBV[a\x02)V[\x91``\x83\x83\x03\x12a\x07_Wa\x07)\x82_\x85\x01a\x05CV[\x92a\x077\x83` \x83\x01a\x05CV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07ZWa\x07V\x92\x01a\x06\xD3V[\x90\x91V[a\x01\xFFV[a\x01LV[\x15\x15\x90V[a\x07r\x90a\x07dV[\x90RV[\x91\x90a\x07\x89\x90_` \x85\x01\x94\x01\x90a\x07iV[V[4a\x07\xBFWa\x07\xBBa\x07\xAAa\x07\xA16`\x04a\x07\x12V[\x92\x91\x90\x91a\x12RV[a\x07\xB2a\x01BV[\x91\x82\x91\x82a\x07vV[\x03\x90\xF3[a\x01HV[a\x07\xD0`\x04_\x90a\x04\xDFV[\x90V[4a\x08\x03Wa\x07\xE36`\x04a\x01PV[a\x07\xFFa\x07\xEEa\x07\xC4V[a\x07\xF6a\x01BV[\x91\x82\x91\x82a\x04rV[\x03\x90\xF3[a\x01HV[`\xFF\x16\x90V[a\x08\x1E\x90`\x08a\x08#\x93\x02a\x03\xBBV[a\x08\x08V[\x90V[\x90a\x081\x91Ta\x08\x0EV[\x90V[a\x08@`\x02_\x90a\x08&V[\x90V[4a\x08sWa\x08S6`\x04a\x01PV[a\x08oa\x08^a\x084V[a\x08fa\x01BV[\x91\x82\x91\x82a\x07vV[\x03\x90\xF3[a\x01HV[a\x08\x81\x81a\x06-V[\x03a\x08\x88WV[_\x80\xFD[\x90P5\x90a\x08\x99\x82a\x08xV[V[\x90` \x82\x82\x03\x12a\x08\xB4Wa\x08\xB1\x91_\x01a\x08\x8CV[\x90V[a\x01LV[a\x08\xCCa\x08\xC76`\x04a\x08\x9BV[a\x13\xBAV[a\x08\xD4a\x01BV[\x80a\x08\xDE\x81a\x03OV[\x03\x90\xF3[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\t)W[` \x83\x10\x14a\t$WV[a\x08\xF5V[\x91`\x7F\x16\x91a\t\x19V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\t_a\tX\x83a\t\tV[\x80\x94a\t3V[\x91`\x01\x81\x16\x90\x81_\x14a\t\xB6WP`\x01\x14a\tzW[PPPV[a\t\x87\x91\x92\x93\x94Pa\t<V[\x91_\x92[\x81\x84\x10a\t\x9EWPP\x01\x90_\x80\x80a\tuV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\t\x8BV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\tuV[\x90a\t\xDB\x91a\tEV[\x90V[\x90a\t\xFEa\t\xF7\x92a\t\xEEa\x01BV[\x93\x84\x80\x92a\t\xD1V[\x03\x83a\x02EV[V[\x90_\x10a\n\x13Wa\n\x10\x90a\t\xDEV[\x90V[a\x08\xE2V[a\n$`\x01_\x90a\n\0V[\x90V[4a\nWWa\n76`\x04a\x01PV[a\nSa\nBa\n\x18V[a\nJa\x01BV[\x91\x82\x91\x82a\x01\xB2V[\x03\x90\xF3[a\x01HV[\x90a\nf\x90a\x05\x9BV[_R` R`@_ \x90V[a\n\x88\x90a\n\x83`\x07\x91_\x92a\n\\V[a\x03\xDAV[\x90V[4a\n\xBBWa\n\xB7a\n\xA6a\n\xA16`\x04a\x05RV[a\nrV[a\n\xAEa\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[4a\n\xF0Wa\n\xD06`\x04a\x01PV[a\n\xECa\n\xDBa\x13\xC5V[a\n\xE3a\x01BV[\x91\x82\x91\x82a\x07vV[\x03\x90\xF3[a\x01HV[a\x0B\x01`\x05_\x90a\x03\xDAV[\x90V[4a\x0B4Wa\x0B\x146`\x04a\x01PV[a\x0B0a\x0B\x1Fa\n\xF5V[a\x0B'a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[4a\x0BiWa\x0BI6`\x04a\x01PV[a\x0Bea\x0BTa\x13\xDBV[a\x0B\\a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[4a\x0B\x9CWa\x0B~6`\x04a\x01PV[a\x0B\x86a\x146V[a\x0B\x8Ea\x01BV[\x80a\x0B\x98\x81a\x03OV[\x03\x90\xF3[a\x01HV[_\x80\xFD[``\x90V[a\x0B\xB3\x90a\t\xDEV[\x90V[a\x0B\xBEa\x0B\xA5V[Pa\x0B\xC9`\x01a\x0B\xAAV[\x90V[a\x0B\xD8a\x0B\xDD\x91a\x05\xBDV[a\x08\x08V[\x90V[a\x0B\xEA\x90Ta\x0B\xCCV[\x90V[\x90a\x0C\x01a\x0B\xFB`\x02a\x0B\xE0V[\x15a\x07dV[a\x0C\x10Wa\x0C\x0E\x91a\x0EIV[V[a\x0C\x18a\x01BV[c4\xDCh\x7F`\xE1\x1B\x81R\x80a\x0C/`\x04\x82\x01a\x03OV[\x03\x90\xFD[\x90a\x0C=\x90a\x06-V[\x90RV[\x90a\x0CK\x90a\x02\x03V[\x90RV[a\x0CY`@a\x02nV[\x90V[\x90a\x0C\x93a\x0C\x8A`\x01a\x0Cma\x0COV[\x94a\x0C\x84a\x0C|_\x83\x01a\x05\xD9V[_\x88\x01a\x0C3V[\x01a\x05\xFAV[` \x84\x01a\x0CAV[V[a\x0C\x9E\x90a\x0C\\V[\x90V[a\x0C\xAB\x90Qa\x02\x03V[\x90V[\x90V[a\x0C\xC5a\x0C\xC0a\x0C\xCA\x92a\x0C\xAEV[a\x05pV[a\x02\x03V[\x90V[\x90V[a\x0C\xDCa\x0C\xE1\x91a\x02\x03V[a\x0C\xCDV[\x90RV[\x90P\x90V[a\r\x0Fa\r\x06\x92` \x92a\x0C\xFD\x81a\x01_V[\x94\x85\x80\x93a\x0C\xE5V[\x93\x84\x91\x01a\x01lV[\x01\x90V[\x80a\r$` \x92a\r+\x95\x94a\x0C\xD0V[\x01\x90a\x0C\xEAV[\x90V[` \x01\x90V[Q\x90V[a\rB\x90Qa\x06-V[\x90V[_\x1B\x90V[\x90a\rV_\x19\x91a\rEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\rta\roa\ry\x92a\x02\x03V[a\x05pV[a\x02\x03V[\x90V[\x90V[\x90a\r\x94a\r\x8Fa\r\x9B\x92a\r`V[a\r|V[\x82Ta\rJV[\x90UV[a\r\xABa\r\xB0\x91a\x05\xBDV[a\x04\xBCV[\x90V[a\r\xBD\x90Ta\r\x9FV[\x90V[a\r\xD4a\r\xCFa\r\xD9\x92a\x0C\xAEV[a\x05pV[a\x04NV[\x90V[a\r\xE5\x90a\r\xC0V[\x90V[\x90a\r\xF9`\x01\x80`\xA0\x1B\x03\x91a\rEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0E\x1Ba\x0E\x16a\x0E\"\x92a\x05\x9BV[a\x0E\x03V[\x82Ta\r\xE8V[\x90UV[\x91` a\x0EG\x92\x94\x93a\x0E@`@\x82\x01\x96_\x83\x01\x90a\x03\xF7V[\x01\x90a\x07iV[V[a\x0E]a\x0EX`\x063\x90a\x05\xA7V[a\x0C\x95V[\x91a\x0Ej` \x84\x01a\x0C\xA1V[a\x0E|a\x0Ev_a\x0C\xB1V[\x91a\x02\x03V[\x14a\x10lW\x81a\x0E\x9Fa\x0E\x99a\x0E\x94` \x87\x01a\x0C\xA1V[a\x02\x03V[\x91a\x02\x03V[\x11a\x10IWa\x0E\xCE\x82a\x0E\xBFa\x0E\xB3a\x01BV[\x93\x84\x92` \x84\x01a\r\x13V[` \x82\x01\x81\x03\x82R\x03\x82a\x02EV[a\x0E\xE0a\x0E\xDA\x82a\r4V[\x91a\r.V[ a\x0E\xFDa\x0E\xF7a\x0E\xF2_\x86\x01a\r8V[a\x06-V[\x91a\x06-V[\x03a\x10&W_\x91\x81a\x0F a\x0F\x1Aa\x0F\x15`\x05a\x05\xFAV[a\x02\x03V[\x91a\x02\x03V[\x11_\x14a\x10\x01WP\x90Pa\x0F4`\x04a\r\xB3V[a\x0FNa\x0FHa\x0FC_a\r\xDCV[a\x04YV[\x91a\x04YV[\x03a\x0F\xD5W[a\x0F_\x81`\x05a\r\x7FV[a\x0Fj3`\x04a\x0E\x06V[`\x01\x90[3\x90\x91a\x0F\x9B\x7F\x9C-\x1D\xFF\x1E$AI\xEE\xF8\xB4\x92UgM@u*\xCD\x82[#\xD4\xAD08\x07\xF9\x8F\xE5\x952\x92a\x05\x9BV[\x92a\x0F\xB0a\x0F\xA7a\x01BV[\x92\x83\x92\x83a\x0E&V[\x03\x90\xA2a\x0F\xD3a\x0F\xBF_a\x0C\xB1V[`\x01a\x0F\xCD`\x063\x90a\x05\xA7V[\x01a\r\x7FV[V[a\x0F\xFCa\x0F\xE2`\x05a\x05\xFAV[a\x0F\xF7`\x07a\x0F\xF1`\x04a\r\xB3V[\x90a\n\\V[a\r\x7FV[a\x0FTV[a\x10\x10` a\x10!\x92\x01a\x0C\xA1V[a\x10\x1C`\x073\x90a\n\\V[a\r\x7FV[a\x0FnV[a\x10.a\x01BV[c)&Mk`\xE2\x1B\x81R\x80a\x10E`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x10Qa\x01BV[cy\xDD]+`\xE1\x1B\x81R\x80a\x10h`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x10ta\x01BV[c\xB8.\xB6\xB7`\xE0\x1B\x81R\x80a\x10\x8B`\x04\x82\x01a\x03OV[\x03\x90\xFD[\x90a\x10\x99\x91a\x0B\xEDV[V[a\x10\xA4\x90a\x05sV[\x90V[a\x10\xB0\x90a\x10\x9BV[\x90V[a\x10\xBC\x90a\x05\x8FV[\x90V[\x90P\x90V[a\x10\xCF_\x80\x92a\x10\xBFV[\x01\x90V[a\x10\xDC\x90a\x10\xC4V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xFDWa\x10\xF9` \x91a\x01wV[\x01\x90V[a\x021V[\x90a\x11\x14a\x11\x0F\x83a\x10\xDFV[a\x02nV[\x91\x82RV[``\x90V[=_\x14a\x119Wa\x11.=a\x11\x02V[\x90=_` \x84\x01>[V[a\x11Aa\x11\x19V[\x90a\x117V[a\x11[a\x11V`\x073\x90a\n\\V[a\x05\xFAV[\x80a\x11na\x11h_a\x0C\xB1V[\x91a\x02\x03V[\x14a\x11\xF7W_\x80a\x11\xCE\x92a\x11\x96a\x11\x85\x83a\x0C\xB1V[a\x11\x91`\x073\x90a\n\\V[a\r\x7FV[a\x11\xA7a\x11\xA23a\x10\xA7V[a\x10\xB3V[\x90a\x11\xB0a\x01BV[\x90\x81a\x11\xBB\x81a\x10\xD3V[\x03\x92Z\xF1a\x11\xC7a\x11\x1EV[P\x15a\x07dV[a\x11\xD4WV[a\x11\xDCa\x01BV[c\x17\xF2\xC3E`\xE3\x1B\x81R\x80a\x11\xF3`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x11\xFFa\x01BV[cg\xE3\x99\r`\xE0\x1B\x81R\x80a\x12\x16`\x04\x82\x01a\x03OV[\x03\x90\xFD[_\x90V[a\x12&a\x12\x1AV[Pa\x121`\x04a\r\xB3V[\x90V[_\x90V[a\x12@a\x124V[Pa\x12K`\x03a\x05\xFAV[\x90V[_\x90V[\x92PPPa\x12^a\x12NV[Pa\x12za\x12ta\x12o`\x04a\r\xB3V[a\x04YV[\x91a\x04YV[\x14\x90V[a\x12\x91a\x12\x8B`\x02a\x0B\xE0V[\x15a\x07dV[a\x12\xA0Wa\x12\x9E\x90a\x13GV[V[a\x12\xA8a\x01BV[c4\xDCh\x7F`\xE1\x1B\x81R\x80a\x12\xBF`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x12\xCD`@a\x02nV[\x90V[a\x12\xD9\x90a\x06-V[\x90V[a\x12\xE5\x90a\x05\xBDV[\x90V[\x90a\x12\xFDa\x12\xF8a\x13\x04\x92a\x12\xD0V[a\x12\xDCV[\x82Ta\rJV[\x90UV[\x90a\x133` `\x01a\x139\x94a\x13+_\x82\x01a\x13%_\x88\x01a\r8V[\x90a\x12\xE8V[\x01\x92\x01a\x0C\xA1V[\x90a\r\x7FV[V[\x90a\x13E\x91a\x13\x08V[V[4a\x13Za\x13T_a\x0C\xB1V[\x91a\x02\x03V[\x14a\x13\x97Wa\x13\x95\x90a\x13\x844a\x13{a\x13ra\x12\xC3V[\x93_\x85\x01a\x0C3V[` \x83\x01a\x0CAV[a\x13\x90`\x063\x90a\x05\xA7V[a\x13;V[V[a\x13\x9Fa\x01BV[cap\x0F\x91`\xE0\x1B\x81R\x80a\x13\xB6`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x13\xC3\x90a\x12~V[V[a\x13\xCDa\x12NV[Pa\x13\xD8`\x02a\x0B\xE0V[\x90V[a\x13\xE3a\x124V[Pa\x13\xEE`\x05a\x05\xFAV[\x90V[\x90a\x13\xFD`\xFF\x91a\rEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x14\x10\x90a\x07dV[\x90V[\x90V[\x90a\x14+a\x14&a\x142\x92a\x14\x07V[a\x14\x13V[\x82Ta\x13\xF1V[\x90UV[Ba\x14Ra\x14La\x14G`\x03a\x05\xFAV[a\x02\x03V[\x91a\x02\x03V[\x10a\x15\x04Wa\x14b_`\x02a\x14\x16V[a\x14l`\x04a\r\xB3V[a\x14\x86a\x14\x80a\x14{_a\r\xDCV[a\x04YV[\x91a\x04YV[\x03a\x14\x8EW[V[a\x14\xDC_\x80a\x14\xACa\x14\xA7a\x14\xA2\x83a\r\xB3V[a\x10\xA7V[a\x10\xB3V[a\x14\xB6`\x05a\x05\xFAV[a\x14\xBEa\x01BV[\x90\x81a\x14\xC9\x81a\x10\xD3V[\x03\x92Z\xF1a\x14\xD5a\x11\x1EV[P\x15a\x07dV[\x15a\x14\x8CWa\x14\xE9a\x01BV[c\x17\xF2\xC3E`\xE3\x1B\x81R\x80a\x15\0`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x15\x0Ca\x01BV[cdcs\x89`\xE0\x1B\x81R\x80a\x15#`\x04\x82\x01a\x03OV[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610ba1565b61001d5f3561013c565b806311163b2c146101375780632163b8c51461013257806324600fc31461012d5780633197cbb6146101285780634c583d8a1461012357806361d027b31461011e57806362ea82db14610119578063787c0a6c146101145780637a3979dc1461010f57806391f901571461010a5780639222800614610105578063957bb1e014610100578063994595e1146100fb578063bc3da535146100f6578063d1b4b9a3146100f1578063d57bde79146100ec578063eb91d37e146100e75763f77282ab0361000e57610b6e565b610b39565b610b04565b610ac0565b610a8b565b610a27565b6108b9565b610843565b6107d3565b61078b565b610696565b610660565b6104fa565b610487565b610419565b610388565b610354565b6101ca565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015a57565b61014c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6101a06101a96020936101ae936101978161015f565b93848093610163565b9586910161016c565b610177565b0190565b6101c79160208201915f818403910152610181565b90565b346101fa576101da366004610150565b6101f66101e5610bb6565b6101ed610142565b918291826101b2565b0390f35b610148565b5f80fd5b90565b61020f81610203565b0361021657565b5f80fd5b9050359061022782610206565b565b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b9061024f90610177565b810190811067ffffffffffffffff82111761026957604052565b610231565b9061028161027a610142565b9283610245565b565b67ffffffffffffffff81116102a15761029d602091610177565b0190565b610231565b90825f939282370152565b909291926102c66102c182610283565b61026e565b938185526020850190828401116102e2576102e0926102a6565b565b61022d565b9080601f8301121561030557816020610302933591016102b1565b90565b610229565b91909160408184031261034a57610323835f830161021a565b92602082013567ffffffffffffffff81116103455761034292016102e7565b90565b6101ff565b61014c565b5f0190565b346103835761036d61036736600461030a565b9061108f565b610375610142565b8061037f8161034f565b0390f35b610148565b346103b657610398366004610150565b6103a0611147565b6103a8610142565b806103b28161034f565b0390f35b610148565b1c90565b90565b6103d29060086103d793026103bb565b6103bf565b90565b906103e591546103c2565b90565b6103f460035f906103da565b90565b61040090610203565b9052565b9190610417905f602085019401906103f7565b565b3461044957610429366004610150565b6104456104346103e8565b61043c610142565b91829182610404565b0390f35b610148565b60018060a01b031690565b6104629061044e565b90565b61046e90610459565b9052565b9190610485905f60208501940190610465565b565b346104b757610497366004610150565b6104b36104a261121e565b6104aa610142565b91829182610472565b0390f35b610148565b60018060a01b031690565b6104d79060086104dc93026103bb565b6104bc565b90565b906104ea91546104c7565b90565b6104f75f806104df565b90565b3461052a5761050a366004610150565b6105266105156104ed565b61051d610142565b91829182610472565b0390f35b610148565b61053881610459565b0361053f57565b5f80fd5b905035906105508261052f565b565b9060208282031261056b57610568915f01610543565b90565b61014c565b90565b61058761058261058c9261044e565b610570565b61044e565b90565b61059890610573565b90565b6105a49061058f565b90565b906105b19061059b565b5f5260205260405f2090565b5f1c90565b90565b6105d16105d6916105bd565b6105c2565b90565b6105e390546105c5565b90565b6105f26105f7916105bd565b6103bf565b90565b61060490546105e6565b90565b6106129060066105a7565b9061062a60016106235f85016105d9565b93016105fa565b90565b90565b6106399061062d565b9052565b91602061065e92949361065760408201965f830190610630565b01906103f7565b565b3461069157610678610673366004610552565b610607565b9061068d610684610142565b9283928361063d565b0390f35b610148565b346106c6576106a6366004610150565b6106c26106b1611238565b6106b9610142565b91829182610404565b0390f35b610148565b5f80fd5b5f80fd5b909182601f8301121561070d5781359167ffffffffffffffff831161070857602001926001830284011161070357565b6106cf565b6106cb565b610229565b9160608383031261075f57610729825f8501610543565b926107378360208301610543565b92604082013567ffffffffffffffff811161075a5761075692016106d3565b9091565b6101ff565b61014c565b151590565b61077290610764565b9052565b9190610789905f60208501940190610769565b565b346107bf576107bb6107aa6107a1366004610712565b92919091611252565b6107b2610142565b91829182610776565b0390f35b610148565b6107d060045f906104df565b90565b34610803576107e3366004610150565b6107ff6107ee6107c4565b6107f6610142565b91829182610472565b0390f35b610148565b60ff1690565b61081e90600861082393026103bb565b610808565b90565b90610831915461080e565b90565b61084060025f90610826565b90565b3461087357610853366004610150565b61086f61085e610834565b610866610142565b91829182610776565b0390f35b610148565b6108818161062d565b0361088857565b5f80fd5b9050359061089982610878565b565b906020828203126108b4576108b1915f0161088c565b90565b61014c565b6108cc6108c736600461089b565b6113ba565b6108d4610142565b806108de8161034f565b0390f35b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610929575b602083101461092457565b6108f5565b91607f1691610919565b60209181520190565b5f5260205f2090565b905f929180549061095f61095883610909565b8094610933565b916001811690815f146109b6575060011461097a575b505050565b610987919293945061093c565b915f925b81841061099e57505001905f8080610975565b6001816020929593955484860152019101929061098b565b92949550505060ff19168252151560200201905f8080610975565b906109db91610945565b90565b906109fe6109f7926109ee610142565b938480926109d1565b0383610245565b565b905f10610a1357610a10906109de565b90565b6108e2565b610a2460015f90610a00565b90565b34610a5757610a37366004610150565b610a53610a42610a18565b610a4a610142565b918291826101b2565b0390f35b610148565b90610a669061059b565b5f5260205260405f2090565b610a8890610a836007915f92610a5c565b6103da565b90565b34610abb57610ab7610aa6610aa1366004610552565b610a72565b610aae610142565b91829182610404565b0390f35b610148565b34610af057610ad0366004610150565b610aec610adb6113c5565b610ae3610142565b91829182610776565b0390f35b610148565b610b0160055f906103da565b90565b34610b3457610b14366004610150565b610b30610b1f610af5565b610b27610142565b91829182610404565b0390f35b610148565b34610b6957610b49366004610150565b610b65610b546113db565b610b5c610142565b91829182610404565b0390f35b610148565b34610b9c57610b7e366004610150565b610b86611436565b610b8e610142565b80610b988161034f565b0390f35b610148565b5f80fd5b606090565b610bb3906109de565b90565b610bbe610ba5565b50610bc96001610baa565b90565b610bd8610bdd916105bd565b610808565b90565b610bea9054610bcc565b90565b90610c01610bfb6002610be0565b15610764565b610c1057610c0e91610e49565b565b610c18610142565b6334dc687f60e11b815280610c2f6004820161034f565b0390fd5b90610c3d9061062d565b9052565b90610c4b90610203565b9052565b610c59604061026e565b90565b90610c93610c8a6001610c6d610c4f565b94610c84610c7c5f83016105d9565b5f8801610c33565b016105fa565b60208401610c41565b565b610c9e90610c5c565b90565b610cab9051610203565b90565b90565b610cc5610cc0610cca92610cae565b610570565b610203565b90565b90565b610cdc610ce191610203565b610ccd565b9052565b905090565b610d0f610d0692602092610cfd8161015f565b94858093610ce5565b9384910161016c565b0190565b80610d24602092610d2b9594610cd0565b0190610cea565b90565b60200190565b5190565b610d42905161062d565b90565b5f1b90565b90610d565f1991610d45565b9181191691161790565b610d74610d6f610d7992610203565b610570565b610203565b90565b90565b90610d94610d8f610d9b92610d60565b610d7c565b8254610d4a565b9055565b610dab610db0916105bd565b6104bc565b90565b610dbd9054610d9f565b90565b610dd4610dcf610dd992610cae565b610570565b61044e565b90565b610de590610dc0565b90565b90610df960018060a01b0391610d45565b9181191691161790565b90565b90610e1b610e16610e229261059b565b610e03565b8254610de8565b9055565b916020610e47929493610e4060408201965f8301906103f7565b0190610769565b565b610e5d610e58600633906105a7565b610c95565b91610e6a60208401610ca1565b610e7c610e765f610cb1565b91610203565b1461106c5781610e9f610e99610e9460208701610ca1565b610203565b91610203565b1161104957610ece82610ebf610eb3610142565b93849260208401610d13565b60208201810382520382610245565b610ee0610eda82610d34565b91610d2e565b20610efd610ef7610ef25f8601610d38565b61062d565b9161062d565b03611026575f9181610f20610f1a610f1560056105fa565b610203565b91610203565b115f1461100157509050610f346004610db3565b610f4e610f48610f435f610ddc565b610459565b91610459565b03610fd5575b610f5f816005610d7f565b610f6a336004610e06565b6001905b339091610f9b7f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe595329261059b565b92610fb0610fa7610142565b92839283610e26565b0390a2610fd3610fbf5f610cb1565b6001610fcd600633906105a7565b01610d7f565b565b610ffc610fe260056105fa565b610ff76007610ff16004610db3565b90610a5c565b610d7f565b610f54565b61101060206110219201610ca1565b61101c60073390610a5c565b610d7f565b610f6e565b61102e610142565b6329264d6b60e21b8152806110456004820161034f565b0390fd5b611051610142565b6379dd5d2b60e11b8152806110686004820161034f565b0390fd5b611074610142565b63b82eb6b760e01b81528061108b6004820161034f565b0390fd5b9061109991610bed565b565b6110a490610573565b90565b6110b09061109b565b90565b6110bc9061058f565b90565b905090565b6110cf5f80926110bf565b0190565b6110dc906110c4565b90565b67ffffffffffffffff81116110fd576110f9602091610177565b0190565b610231565b9061111461110f836110df565b61026e565b918252565b606090565b3d5f146111395761112e3d611102565b903d5f602084013e5b565b611141611119565b90611137565b61115b61115660073390610a5c565b6105fa565b8061116e6111685f610cb1565b91610203565b146111f7575f806111ce9261119661118583610cb1565b61119160073390610a5c565b610d7f565b6111a76111a2336110a7565b6110b3565b906111b0610142565b90816111bb816110d3565b03925af16111c761111e565b5015610764565b6111d457565b6111dc610142565b6317f2c34560e31b8152806111f36004820161034f565b0390fd5b6111ff610142565b6367e3990d60e01b8152806112166004820161034f565b0390fd5b5f90565b61122661121a565b506112316004610db3565b90565b5f90565b611240611234565b5061124b60036105fa565b90565b5f90565b9250505061125e61124e565b5061127a61127461126f6004610db3565b610459565b91610459565b1490565b61129161128b6002610be0565b15610764565b6112a05761129e90611347565b565b6112a8610142565b6334dc687f60e11b8152806112bf6004820161034f565b0390fd5b6112cd604061026e565b90565b6112d99061062d565b90565b6112e5906105bd565b90565b906112fd6112f8611304926112d0565b6112dc565b8254610d4a565b9055565b90611333602060016113399461132b5f82016113255f8801610d38565b906112e8565b019201610ca1565b90610d7f565b565b9061134591611308565b565b3461135a6113545f610cb1565b91610203565b1461139757611395906113843461137b6113726112c3565b935f8501610c33565b60208301610c41565b611390600633906105a7565b61133b565b565b61139f610142565b6361700f9160e01b8152806113b66004820161034f565b0390fd5b6113c39061127e565b565b6113cd61124e565b506113d86002610be0565b90565b6113e3611234565b506113ee60056105fa565b90565b906113fd60ff91610d45565b9181191691161790565b61141090610764565b90565b90565b9061142b61142661143292611407565b611413565b82546113f1565b9055565b4261145261144c61144760036105fa565b610203565b91610203565b10611504576114625f6002611416565b61146c6004610db3565b61148661148061147b5f610ddc565b610459565b91610459565b0361148e575b565b6114dc5f806114ac6114a76114a283610db3565b6110a7565b6110b3565b6114b660056105fa565b6114be610142565b90816114c9816110d3565b03925af16114d561111e565b5015610764565b1561148c576114e9610142565b6317f2c34560e31b8152806115006004820161034f565b0390fd5b61150c610142565b636463738960e01b8152806115236004820161034f565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B\xA1V[a\0\x1D_5a\x01<V[\x80c\x11\x16;,\x14a\x017W\x80c!c\xB8\xC5\x14a\x012W\x80c$`\x0F\xC3\x14a\x01-W\x80c1\x97\xCB\xB6\x14a\x01(W\x80cLX=\x8A\x14a\x01#W\x80ca\xD0'\xB3\x14a\x01\x1EW\x80cb\xEA\x82\xDB\x14a\x01\x19W\x80cx|\nl\x14a\x01\x14W\x80cz9y\xDC\x14a\x01\x0FW\x80c\x91\xF9\x01W\x14a\x01\nW\x80c\x92\"\x80\x06\x14a\x01\x05W\x80c\x95{\xB1\xE0\x14a\x01\0W\x80c\x99E\x95\xE1\x14a\0\xFBW\x80c\xBC=\xA55\x14a\0\xF6W\x80c\xD1\xB4\xB9\xA3\x14a\0\xF1W\x80c\xD5{\xDEy\x14a\0\xECW\x80c\xEB\x91\xD3~\x14a\0\xE7Wc\xF7r\x82\xAB\x03a\0\x0EWa\x0BnV[a\x0B9V[a\x0B\x04V[a\n\xC0V[a\n\x8BV[a\n'V[a\x08\xB9V[a\x08CV[a\x07\xD3V[a\x07\x8BV[a\x06\x96V[a\x06`V[a\x04\xFAV[a\x04\x87V[a\x04\x19V[a\x03\x88V[a\x03TV[a\x01\xCAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01ZWV[a\x01LV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01\xA0a\x01\xA9` \x93a\x01\xAE\x93a\x01\x97\x81a\x01_V[\x93\x84\x80\x93a\x01cV[\x95\x86\x91\x01a\x01lV[a\x01wV[\x01\x90V[a\x01\xC7\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\x81V[\x90V[4a\x01\xFAWa\x01\xDA6`\x04a\x01PV[a\x01\xF6a\x01\xE5a\x0B\xB6V[a\x01\xEDa\x01BV[\x91\x82\x91\x82a\x01\xB2V[\x03\x90\xF3[a\x01HV[_\x80\xFD[\x90V[a\x02\x0F\x81a\x02\x03V[\x03a\x02\x16WV[_\x80\xFD[\x90P5\x90a\x02'\x82a\x02\x06V[V[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02O\x90a\x01wV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02iW`@RV[a\x021V[\x90a\x02\x81a\x02za\x01BV[\x92\x83a\x02EV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xA1Wa\x02\x9D` \x91a\x01wV[\x01\x90V[a\x021V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x02\xC6a\x02\xC1\x82a\x02\x83V[a\x02nV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x02\xE2Wa\x02\xE0\x92a\x02\xA6V[V[a\x02-V[\x90\x80`\x1F\x83\x01\x12\x15a\x03\x05W\x81` a\x03\x02\x935\x91\x01a\x02\xB1V[\x90V[a\x02)V[\x91\x90\x91`@\x81\x84\x03\x12a\x03JWa\x03#\x83_\x83\x01a\x02\x1AV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03EWa\x03B\x92\x01a\x02\xE7V[\x90V[a\x01\xFFV[a\x01LV[_\x01\x90V[4a\x03\x83Wa\x03ma\x03g6`\x04a\x03\nV[\x90a\x10\x8FV[a\x03ua\x01BV[\x80a\x03\x7F\x81a\x03OV[\x03\x90\xF3[a\x01HV[4a\x03\xB6Wa\x03\x986`\x04a\x01PV[a\x03\xA0a\x11GV[a\x03\xA8a\x01BV[\x80a\x03\xB2\x81a\x03OV[\x03\x90\xF3[a\x01HV[\x1C\x90V[\x90V[a\x03\xD2\x90`\x08a\x03\xD7\x93\x02a\x03\xBBV[a\x03\xBFV[\x90V[\x90a\x03\xE5\x91Ta\x03\xC2V[\x90V[a\x03\xF4`\x03_\x90a\x03\xDAV[\x90V[a\x04\0\x90a\x02\x03V[\x90RV[\x91\x90a\x04\x17\x90_` \x85\x01\x94\x01\x90a\x03\xF7V[V[4a\x04IWa\x04)6`\x04a\x01PV[a\x04Ea\x044a\x03\xE8V[a\x04<a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04b\x90a\x04NV[\x90V[a\x04n\x90a\x04YV[\x90RV[\x91\x90a\x04\x85\x90_` \x85\x01\x94\x01\x90a\x04eV[V[4a\x04\xB7Wa\x04\x976`\x04a\x01PV[a\x04\xB3a\x04\xA2a\x12\x1EV[a\x04\xAAa\x01BV[\x91\x82\x91\x82a\x04rV[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xD7\x90`\x08a\x04\xDC\x93\x02a\x03\xBBV[a\x04\xBCV[\x90V[\x90a\x04\xEA\x91Ta\x04\xC7V[\x90V[a\x04\xF7_\x80a\x04\xDFV[\x90V[4a\x05*Wa\x05\n6`\x04a\x01PV[a\x05&a\x05\x15a\x04\xEDV[a\x05\x1Da\x01BV[\x91\x82\x91\x82a\x04rV[\x03\x90\xF3[a\x01HV[a\x058\x81a\x04YV[\x03a\x05?WV[_\x80\xFD[\x90P5\x90a\x05P\x82a\x05/V[V[\x90` \x82\x82\x03\x12a\x05kWa\x05h\x91_\x01a\x05CV[\x90V[a\x01LV[\x90V[a\x05\x87a\x05\x82a\x05\x8C\x92a\x04NV[a\x05pV[a\x04NV[\x90V[a\x05\x98\x90a\x05sV[\x90V[a\x05\xA4\x90a\x05\x8FV[\x90V[\x90a\x05\xB1\x90a\x05\x9BV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x05\xD1a\x05\xD6\x91a\x05\xBDV[a\x05\xC2V[\x90V[a\x05\xE3\x90Ta\x05\xC5V[\x90V[a\x05\xF2a\x05\xF7\x91a\x05\xBDV[a\x03\xBFV[\x90V[a\x06\x04\x90Ta\x05\xE6V[\x90V[a\x06\x12\x90`\x06a\x05\xA7V[\x90a\x06*`\x01a\x06#_\x85\x01a\x05\xD9V[\x93\x01a\x05\xFAV[\x90V[\x90V[a\x069\x90a\x06-V[\x90RV[\x91` a\x06^\x92\x94\x93a\x06W`@\x82\x01\x96_\x83\x01\x90a\x060V[\x01\x90a\x03\xF7V[V[4a\x06\x91Wa\x06xa\x06s6`\x04a\x05RV[a\x06\x07V[\x90a\x06\x8Da\x06\x84a\x01BV[\x92\x83\x92\x83a\x06=V[\x03\x90\xF3[a\x01HV[4a\x06\xC6Wa\x06\xA66`\x04a\x01PV[a\x06\xC2a\x06\xB1a\x128V[a\x06\xB9a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x07\rW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x07\x08W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x07\x03WV[a\x06\xCFV[a\x06\xCBV[a\x02)V[\x91``\x83\x83\x03\x12a\x07_Wa\x07)\x82_\x85\x01a\x05CV[\x92a\x077\x83` \x83\x01a\x05CV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07ZWa\x07V\x92\x01a\x06\xD3V[\x90\x91V[a\x01\xFFV[a\x01LV[\x15\x15\x90V[a\x07r\x90a\x07dV[\x90RV[\x91\x90a\x07\x89\x90_` \x85\x01\x94\x01\x90a\x07iV[V[4a\x07\xBFWa\x07\xBBa\x07\xAAa\x07\xA16`\x04a\x07\x12V[\x92\x91\x90\x91a\x12RV[a\x07\xB2a\x01BV[\x91\x82\x91\x82a\x07vV[\x03\x90\xF3[a\x01HV[a\x07\xD0`\x04_\x90a\x04\xDFV[\x90V[4a\x08\x03Wa\x07\xE36`\x04a\x01PV[a\x07\xFFa\x07\xEEa\x07\xC4V[a\x07\xF6a\x01BV[\x91\x82\x91\x82a\x04rV[\x03\x90\xF3[a\x01HV[`\xFF\x16\x90V[a\x08\x1E\x90`\x08a\x08#\x93\x02a\x03\xBBV[a\x08\x08V[\x90V[\x90a\x081\x91Ta\x08\x0EV[\x90V[a\x08@`\x02_\x90a\x08&V[\x90V[4a\x08sWa\x08S6`\x04a\x01PV[a\x08oa\x08^a\x084V[a\x08fa\x01BV[\x91\x82\x91\x82a\x07vV[\x03\x90\xF3[a\x01HV[a\x08\x81\x81a\x06-V[\x03a\x08\x88WV[_\x80\xFD[\x90P5\x90a\x08\x99\x82a\x08xV[V[\x90` \x82\x82\x03\x12a\x08\xB4Wa\x08\xB1\x91_\x01a\x08\x8CV[\x90V[a\x01LV[a\x08\xCCa\x08\xC76`\x04a\x08\x9BV[a\x13\xBAV[a\x08\xD4a\x01BV[\x80a\x08\xDE\x81a\x03OV[\x03\x90\xF3[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\t)W[` \x83\x10\x14a\t$WV[a\x08\xF5V[\x91`\x7F\x16\x91a\t\x19V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\t_a\tX\x83a\t\tV[\x80\x94a\t3V[\x91`\x01\x81\x16\x90\x81_\x14a\t\xB6WP`\x01\x14a\tzW[PPPV[a\t\x87\x91\x92\x93\x94Pa\t<V[\x91_\x92[\x81\x84\x10a\t\x9EWPP\x01\x90_\x80\x80a\tuV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\t\x8BV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\tuV[\x90a\t\xDB\x91a\tEV[\x90V[\x90a\t\xFEa\t\xF7\x92a\t\xEEa\x01BV[\x93\x84\x80\x92a\t\xD1V[\x03\x83a\x02EV[V[\x90_\x10a\n\x13Wa\n\x10\x90a\t\xDEV[\x90V[a\x08\xE2V[a\n$`\x01_\x90a\n\0V[\x90V[4a\nWWa\n76`\x04a\x01PV[a\nSa\nBa\n\x18V[a\nJa\x01BV[\x91\x82\x91\x82a\x01\xB2V[\x03\x90\xF3[a\x01HV[\x90a\nf\x90a\x05\x9BV[_R` R`@_ \x90V[a\n\x88\x90a\n\x83`\x07\x91_\x92a\n\\V[a\x03\xDAV[\x90V[4a\n\xBBWa\n\xB7a\n\xA6a\n\xA16`\x04a\x05RV[a\nrV[a\n\xAEa\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[4a\n\xF0Wa\n\xD06`\x04a\x01PV[a\n\xECa\n\xDBa\x13\xC5V[a\n\xE3a\x01BV[\x91\x82\x91\x82a\x07vV[\x03\x90\xF3[a\x01HV[a\x0B\x01`\x05_\x90a\x03\xDAV[\x90V[4a\x0B4Wa\x0B\x146`\x04a\x01PV[a\x0B0a\x0B\x1Fa\n\xF5V[a\x0B'a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[4a\x0BiWa\x0BI6`\x04a\x01PV[a\x0Bea\x0BTa\x13\xDBV[a\x0B\\a\x01BV[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x01HV[4a\x0B\x9CWa\x0B~6`\x04a\x01PV[a\x0B\x86a\x146V[a\x0B\x8Ea\x01BV[\x80a\x0B\x98\x81a\x03OV[\x03\x90\xF3[a\x01HV[_\x80\xFD[``\x90V[a\x0B\xB3\x90a\t\xDEV[\x90V[a\x0B\xBEa\x0B\xA5V[Pa\x0B\xC9`\x01a\x0B\xAAV[\x90V[a\x0B\xD8a\x0B\xDD\x91a\x05\xBDV[a\x08\x08V[\x90V[a\x0B\xEA\x90Ta\x0B\xCCV[\x90V[\x90a\x0C\x01a\x0B\xFB`\x02a\x0B\xE0V[\x15a\x07dV[a\x0C\x10Wa\x0C\x0E\x91a\x0EIV[V[a\x0C\x18a\x01BV[c4\xDCh\x7F`\xE1\x1B\x81R\x80a\x0C/`\x04\x82\x01a\x03OV[\x03\x90\xFD[\x90a\x0C=\x90a\x06-V[\x90RV[\x90a\x0CK\x90a\x02\x03V[\x90RV[a\x0CY`@a\x02nV[\x90V[\x90a\x0C\x93a\x0C\x8A`\x01a\x0Cma\x0COV[\x94a\x0C\x84a\x0C|_\x83\x01a\x05\xD9V[_\x88\x01a\x0C3V[\x01a\x05\xFAV[` \x84\x01a\x0CAV[V[a\x0C\x9E\x90a\x0C\\V[\x90V[a\x0C\xAB\x90Qa\x02\x03V[\x90V[\x90V[a\x0C\xC5a\x0C\xC0a\x0C\xCA\x92a\x0C\xAEV[a\x05pV[a\x02\x03V[\x90V[\x90V[a\x0C\xDCa\x0C\xE1\x91a\x02\x03V[a\x0C\xCDV[\x90RV[\x90P\x90V[a\r\x0Fa\r\x06\x92` \x92a\x0C\xFD\x81a\x01_V[\x94\x85\x80\x93a\x0C\xE5V[\x93\x84\x91\x01a\x01lV[\x01\x90V[\x80a\r$` \x92a\r+\x95\x94a\x0C\xD0V[\x01\x90a\x0C\xEAV[\x90V[` \x01\x90V[Q\x90V[a\rB\x90Qa\x06-V[\x90V[_\x1B\x90V[\x90a\rV_\x19\x91a\rEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\rta\roa\ry\x92a\x02\x03V[a\x05pV[a\x02\x03V[\x90V[\x90V[\x90a\r\x94a\r\x8Fa\r\x9B\x92a\r`V[a\r|V[\x82Ta\rJV[\x90UV[a\r\xABa\r\xB0\x91a\x05\xBDV[a\x04\xBCV[\x90V[a\r\xBD\x90Ta\r\x9FV[\x90V[a\r\xD4a\r\xCFa\r\xD9\x92a\x0C\xAEV[a\x05pV[a\x04NV[\x90V[a\r\xE5\x90a\r\xC0V[\x90V[\x90a\r\xF9`\x01\x80`\xA0\x1B\x03\x91a\rEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0E\x1Ba\x0E\x16a\x0E\"\x92a\x05\x9BV[a\x0E\x03V[\x82Ta\r\xE8V[\x90UV[\x91` a\x0EG\x92\x94\x93a\x0E@`@\x82\x01\x96_\x83\x01\x90a\x03\xF7V[\x01\x90a\x07iV[V[a\x0E]a\x0EX`\x063\x90a\x05\xA7V[a\x0C\x95V[\x91a\x0Ej` \x84\x01a\x0C\xA1V[a\x0E|a\x0Ev_a\x0C\xB1V[\x91a\x02\x03V[\x14a\x10lW\x81a\x0E\x9Fa\x0E\x99a\x0E\x94` \x87\x01a\x0C\xA1V[a\x02\x03V[\x91a\x02\x03V[\x11a\x10IWa\x0E\xCE\x82a\x0E\xBFa\x0E\xB3a\x01BV[\x93\x84\x92` \x84\x01a\r\x13V[` \x82\x01\x81\x03\x82R\x03\x82a\x02EV[a\x0E\xE0a\x0E\xDA\x82a\r4V[\x91a\r.V[ a\x0E\xFDa\x0E\xF7a\x0E\xF2_\x86\x01a\r8V[a\x06-V[\x91a\x06-V[\x03a\x10&W_\x91\x81a\x0F a\x0F\x1Aa\x0F\x15`\x05a\x05\xFAV[a\x02\x03V[\x91a\x02\x03V[\x11_\x14a\x10\x01WP\x90Pa\x0F4`\x04a\r\xB3V[a\x0FNa\x0FHa\x0FC_a\r\xDCV[a\x04YV[\x91a\x04YV[\x03a\x0F\xD5W[a\x0F_\x81`\x05a\r\x7FV[a\x0Fj3`\x04a\x0E\x06V[`\x01\x90[3\x90\x91a\x0F\x9B\x7F\x9C-\x1D\xFF\x1E$AI\xEE\xF8\xB4\x92UgM@u*\xCD\x82[#\xD4\xAD08\x07\xF9\x8F\xE5\x952\x92a\x05\x9BV[\x92a\x0F\xB0a\x0F\xA7a\x01BV[\x92\x83\x92\x83a\x0E&V[\x03\x90\xA2a\x0F\xD3a\x0F\xBF_a\x0C\xB1V[`\x01a\x0F\xCD`\x063\x90a\x05\xA7V[\x01a\r\x7FV[V[a\x0F\xFCa\x0F\xE2`\x05a\x05\xFAV[a\x0F\xF7`\x07a\x0F\xF1`\x04a\r\xB3V[\x90a\n\\V[a\r\x7FV[a\x0FTV[a\x10\x10` a\x10!\x92\x01a\x0C\xA1V[a\x10\x1C`\x073\x90a\n\\V[a\r\x7FV[a\x0FnV[a\x10.a\x01BV[c)&Mk`\xE2\x1B\x81R\x80a\x10E`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x10Qa\x01BV[cy\xDD]+`\xE1\x1B\x81R\x80a\x10h`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x10ta\x01BV[c\xB8.\xB6\xB7`\xE0\x1B\x81R\x80a\x10\x8B`\x04\x82\x01a\x03OV[\x03\x90\xFD[\x90a\x10\x99\x91a\x0B\xEDV[V[a\x10\xA4\x90a\x05sV[\x90V[a\x10\xB0\x90a\x10\x9BV[\x90V[a\x10\xBC\x90a\x05\x8FV[\x90V[\x90P\x90V[a\x10\xCF_\x80\x92a\x10\xBFV[\x01\x90V[a\x10\xDC\x90a\x10\xC4V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xFDWa\x10\xF9` \x91a\x01wV[\x01\x90V[a\x021V[\x90a\x11\x14a\x11\x0F\x83a\x10\xDFV[a\x02nV[\x91\x82RV[``\x90V[=_\x14a\x119Wa\x11.=a\x11\x02V[\x90=_` \x84\x01>[V[a\x11Aa\x11\x19V[\x90a\x117V[a\x11[a\x11V`\x073\x90a\n\\V[a\x05\xFAV[\x80a\x11na\x11h_a\x0C\xB1V[\x91a\x02\x03V[\x14a\x11\xF7W_\x80a\x11\xCE\x92a\x11\x96a\x11\x85\x83a\x0C\xB1V[a\x11\x91`\x073\x90a\n\\V[a\r\x7FV[a\x11\xA7a\x11\xA23a\x10\xA7V[a\x10\xB3V[\x90a\x11\xB0a\x01BV[\x90\x81a\x11\xBB\x81a\x10\xD3V[\x03\x92Z\xF1a\x11\xC7a\x11\x1EV[P\x15a\x07dV[a\x11\xD4WV[a\x11\xDCa\x01BV[c\x17\xF2\xC3E`\xE3\x1B\x81R\x80a\x11\xF3`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x11\xFFa\x01BV[cg\xE3\x99\r`\xE0\x1B\x81R\x80a\x12\x16`\x04\x82\x01a\x03OV[\x03\x90\xFD[_\x90V[a\x12&a\x12\x1AV[Pa\x121`\x04a\r\xB3V[\x90V[_\x90V[a\x12@a\x124V[Pa\x12K`\x03a\x05\xFAV[\x90V[_\x90V[\x92PPPa\x12^a\x12NV[Pa\x12za\x12ta\x12o`\x04a\r\xB3V[a\x04YV[\x91a\x04YV[\x14\x90V[a\x12\x91a\x12\x8B`\x02a\x0B\xE0V[\x15a\x07dV[a\x12\xA0Wa\x12\x9E\x90a\x13GV[V[a\x12\xA8a\x01BV[c4\xDCh\x7F`\xE1\x1B\x81R\x80a\x12\xBF`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x12\xCD`@a\x02nV[\x90V[a\x12\xD9\x90a\x06-V[\x90V[a\x12\xE5\x90a\x05\xBDV[\x90V[\x90a\x12\xFDa\x12\xF8a\x13\x04\x92a\x12\xD0V[a\x12\xDCV[\x82Ta\rJV[\x90UV[\x90a\x133` `\x01a\x139\x94a\x13+_\x82\x01a\x13%_\x88\x01a\r8V[\x90a\x12\xE8V[\x01\x92\x01a\x0C\xA1V[\x90a\r\x7FV[V[\x90a\x13E\x91a\x13\x08V[V[4a\x13Za\x13T_a\x0C\xB1V[\x91a\x02\x03V[\x14a\x13\x97Wa\x13\x95\x90a\x13\x844a\x13{a\x13ra\x12\xC3V[\x93_\x85\x01a\x0C3V[` \x83\x01a\x0CAV[a\x13\x90`\x063\x90a\x05\xA7V[a\x13;V[V[a\x13\x9Fa\x01BV[cap\x0F\x91`\xE0\x1B\x81R\x80a\x13\xB6`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x13\xC3\x90a\x12~V[V[a\x13\xCDa\x12NV[Pa\x13\xD8`\x02a\x0B\xE0V[\x90V[a\x13\xE3a\x124V[Pa\x13\xEE`\x05a\x05\xFAV[\x90V[\x90a\x13\xFD`\xFF\x91a\rEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x14\x10\x90a\x07dV[\x90V[\x90V[\x90a\x14+a\x14&a\x142\x92a\x14\x07V[a\x14\x13V[\x82Ta\x13\xF1V[\x90UV[Ba\x14Ra\x14La\x14G`\x03a\x05\xFAV[a\x02\x03V[\x91a\x02\x03V[\x10a\x15\x04Wa\x14b_`\x02a\x14\x16V[a\x14l`\x04a\r\xB3V[a\x14\x86a\x14\x80a\x14{_a\r\xDCV[a\x04YV[\x91a\x04YV[\x03a\x14\x8EW[V[a\x14\xDC_\x80a\x14\xACa\x14\xA7a\x14\xA2\x83a\r\xB3V[a\x10\xA7V[a\x10\xB3V[a\x14\xB6`\x05a\x05\xFAV[a\x14\xBEa\x01BV[\x90\x81a\x14\xC9\x81a\x10\xD3V[\x03\x92Z\xF1a\x14\xD5a\x11\x1EV[P\x15a\x07dV[\x15a\x14\x8CWa\x14\xE9a\x01BV[c\x17\xF2\xC3E`\xE3\x1B\x81R\x80a\x15\0`\x04\x82\x01a\x03OV[\x03\x90\xFD[a\x15\x0Ca\x01BV[cdcs\x89`\xE0\x1B\x81R\x80a\x15#`\x04\x82\x01a\x03OV[\x03\x90\xFD",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AuctionNotActive()` and selector `0x69b8d0fe`.
```solidity
error AuctionNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AuctionNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AuctionNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: AuctionNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AuctionNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AuctionNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AuctionNotActive()";
            const SELECTOR: [u8; 4] = [105u8, 184u8, 208u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AuctionNotEnded()` and selector `0x64637389`.
```solidity
error AuctionNotEnded();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AuctionNotEnded {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AuctionNotEnded> for UnderlyingRustTuple<'_> {
            fn from(value: AuctionNotEnded) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AuctionNotEnded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AuctionNotEnded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AuctionNotEnded()";
            const SELECTOR: [u8; 4] = [100u8, 99u8, 115u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `BidExceedsDeposit()` and selector `0xf3baba56`.
```solidity
error BidExceedsDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BidExceedsDeposit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BidExceedsDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: BidExceedsDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BidExceedsDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BidExceedsDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BidExceedsDeposit()";
            const SELECTOR: [u8; 4] = [243u8, 186u8, 186u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidBidDeposit()` and selector `0x61700f91`.
```solidity
error InvalidBidDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidBidDeposit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidBidDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidBidDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidBidDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidBidDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidBidDeposit()";
            const SELECTOR: [u8; 4] = [97u8, 112u8, 15u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidBidReveal()` and selector `0xa49935ac`.
```solidity
error InvalidBidReveal();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidBidReveal {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidBidReveal> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidBidReveal) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidBidReveal {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidBidReveal {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidBidReveal()";
            const SELECTOR: [u8; 4] = [164u8, 153u8, 53u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidDuration()` and selector `0x76166401`.
```solidity
error InvalidDuration();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidDuration {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidDuration> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidDuration) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidDuration {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidDuration {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidDuration()";
            const SELECTOR: [u8; 4] = [118u8, 22u8, 100u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoBidFound()` and selector `0xb82eb6b7`.
```solidity
error NoBidFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoBidFound {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoBidFound> for UnderlyingRustTuple<'_> {
            fn from(value: NoBidFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoBidFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoBidFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoBidFound()";
            const SELECTOR: [u8; 4] = [184u8, 46u8, 182u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoFundsToWithdraw()` and selector `0x67e3990d`.
```solidity
error NoFundsToWithdraw();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoFundsToWithdraw {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoFundsToWithdraw> for UnderlyingRustTuple<'_> {
            fn from(value: NoFundsToWithdraw) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoFundsToWithdraw {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoFundsToWithdraw {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoFundsToWithdraw()";
            const SELECTOR: [u8; 4] = [103u8, 227u8, 153u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TransactionFailed()` and selector `0xbf961a28`.
```solidity
error TransactionFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionFailed> for UnderlyingRustTuple<'_> {
            fn from(value: TransactionFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransactionFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionFailed()";
            const SELECTOR: [u8; 4] = [191u8, 150u8, 26u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `BidRevealed(address,uint256,bool)` and selector `0x9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532`.
```solidity
event BidRevealed(address indexed bidder, uint256 bid, bool isHighestBid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BidRevealed {
        #[allow(missing_docs)]
        pub bidder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isHighestBid: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BidRevealed {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BidRevealed(address,uint256,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                156u8,
                45u8,
                29u8,
                255u8,
                30u8,
                36u8,
                65u8,
                73u8,
                238u8,
                248u8,
                180u8,
                146u8,
                85u8,
                103u8,
                77u8,
                64u8,
                117u8,
                42u8,
                205u8,
                130u8,
                91u8,
                35u8,
                212u8,
                173u8,
                48u8,
                56u8,
                7u8,
                249u8,
                143u8,
                229u8,
                149u8,
                50u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bidder: topics.1,
                    bid: data.0,
                    isHighestBid: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isHighestBid,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bidder.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bidder,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BidRevealed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BidRevealed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BidRevealed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _duration, address _treasury);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _duration: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _treasury: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._duration, value._treasury)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _duration: tuple.0,
                        _treasury: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._duration),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._treasury,
                    ),
                )
            }
        }
    };
    /**Function with signature `auctionActive()` and selector `0x92228006`.
```solidity
function auctionActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionActiveCall {}
    ///Container type for the return parameters of the [`auctionActive()`](auctionActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: auctionActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: auctionActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for auctionActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = auctionActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "auctionActive()";
            const SELECTOR: [u8; 4] = [146u8, 34u8, 128u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `auctionType()` and selector `0x994595e1`.
```solidity
function auctionType() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionTypeCall {}
    ///Container type for the return parameters of the [`auctionType()`](auctionTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionTypeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: auctionTypeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionTypeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: auctionTypeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for auctionTypeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = auctionTypeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "auctionType()";
            const SELECTOR: [u8; 4] = [153u8, 69u8, 149u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bid(bytes32)` and selector `0x957bb1e0`.
```solidity
function bid(bytes32 _sealedBid) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidCall {
        #[allow(missing_docs)]
        pub _sealedBid: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`bid(bytes32)`](bidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidCall) -> Self {
                    (value._sealedBid,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _sealedBid: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bid(bytes32)";
            const SELECTOR: [u8; 4] = [149u8, 123u8, 177u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._sealedBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bids(address)` and selector `0x62ea82db`.
```solidity
function bids(address) external view returns (bytes32 sealedBid, uint256 deposit);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`bids(address)`](bidsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidsReturn {
        #[allow(missing_docs)]
        pub sealedBid: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidsCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidsReturn) -> Self {
                    (value.sealedBid, value.deposit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sealedBid: tuple.0,
                        deposit: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bids(address)";
            const SELECTOR: [u8; 4] = [98u8, 234u8, 130u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `endTime()` and selector `0x3197cbb6`.
```solidity
function endTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct endTimeCall {}
    ///Container type for the return parameters of the [`endTime()`](endTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct endTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<endTimeCall> for UnderlyingRustTuple<'_> {
                fn from(value: endTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for endTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<endTimeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: endTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for endTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for endTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = endTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "endTime()";
            const SELECTOR: [u8; 4] = [49u8, 151u8, 203u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `finalizeAuction()` and selector `0xf77282ab`.
```solidity
function finalizeAuction() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct finalizeAuctionCall {}
    ///Container type for the return parameters of the [`finalizeAuction()`](finalizeAuctionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct finalizeAuctionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<finalizeAuctionCall> for UnderlyingRustTuple<'_> {
                fn from(value: finalizeAuctionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for finalizeAuctionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<finalizeAuctionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: finalizeAuctionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for finalizeAuctionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for finalizeAuctionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = finalizeAuctionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "finalizeAuction()";
            const SELECTOR: [u8; 4] = [247u8, 114u8, 130u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionEndTime()` and selector `0x787c0a6c`.
```solidity
function getAuctionEndTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionEndTimeCall {}
    ///Container type for the return parameters of the [`getAuctionEndTime()`](getAuctionEndTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionEndTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionEndTimeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionEndTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionEndTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionEndTimeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionEndTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionEndTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionEndTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionEndTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionEndTime()";
            const SELECTOR: [u8; 4] = [120u8, 124u8, 10u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionType()` and selector `0x11163b2c`.
```solidity
function getAuctionType() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionTypeCall {}
    ///Container type for the return parameters of the [`getAuctionType()`](getAuctionTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionTypeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionTypeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAuctionTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionTypeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionTypeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionTypeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionTypeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionType()";
            const SELECTOR: [u8; 4] = [17u8, 22u8, 59u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionWinner()` and selector `0x4c583d8a`.
```solidity
function getAuctionWinner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionWinnerCall {}
    ///Container type for the return parameters of the [`getAuctionWinner()`](getAuctionWinnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionWinnerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionWinnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionWinnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionWinnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionWinnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionWinnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionWinnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionWinnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionWinnerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionWinner()";
            const SELECTOR: [u8; 4] = [76u8, 88u8, 61u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentPrice()` and selector `0xeb91d37e`.
```solidity
function getCurrentPrice() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentPriceCall {}
    ///Container type for the return parameters of the [`getCurrentPrice()`](getCurrentPriceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentPriceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentPriceCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentPriceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCurrentPriceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentPriceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentPriceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentPriceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentPriceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentPriceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentPrice()";
            const SELECTOR: [u8; 4] = [235u8, 145u8, 211u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `highestBid()` and selector `0xd57bde79`.
```solidity
function highestBid() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidCall {}
    ///Container type for the return parameters of the [`highestBid()`](highestBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for highestBidCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = highestBidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "highestBid()";
            const SELECTOR: [u8; 4] = [213u8, 123u8, 222u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `highestBidder()` and selector `0x91f90157`.
```solidity
function highestBidder() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidderCall {}
    ///Container type for the return parameters of the [`highestBidder()`](highestBidderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidderCall> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidderReturn> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for highestBidderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = highestBidderReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "highestBidder()";
            const SELECTOR: [u8; 4] = [145u8, 249u8, 1u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address, bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAuctionActive()` and selector `0xd1b4b9a3`.
```solidity
function isAuctionActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionActiveCall {}
    ///Container type for the return parameters of the [`isAuctionActive()`](isAuctionActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAuctionActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAuctionActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAuctionActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAuctionActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAuctionActive()";
            const SELECTOR: [u8; 4] = [209u8, 180u8, 185u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `refunds(address)` and selector `0xbc3da535`.
```solidity
function refunds(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refundsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`refunds(address)`](refundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refundsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: refundsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for refundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: refundsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for refundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refundsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refundsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refunds(address)";
            const SELECTOR: [u8; 4] = [188u8, 61u8, 165u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revealBid(uint256,string)` and selector `0x2163b8c5`.
```solidity
function revealBid(uint256 _bid, string memory _salt) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revealBidCall {
        #[allow(missing_docs)]
        pub _bid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _salt: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`revealBid(uint256,string)`](revealBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revealBidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revealBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: revealBidCall) -> Self {
                    (value._bid, value._salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revealBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _bid: tuple.0,
                        _salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revealBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revealBidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revealBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revealBidCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revealBidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revealBid(uint256,string)";
            const SELECTOR: [u8; 4] = [33u8, 99u8, 184u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._bid),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._salt,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `treasury()` and selector `0x61d027b3`.
```solidity
function treasury() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct treasuryCall {}
    ///Container type for the return parameters of the [`treasury()`](treasuryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct treasuryReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<treasuryCall> for UnderlyingRustTuple<'_> {
                fn from(value: treasuryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for treasuryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<treasuryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: treasuryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for treasuryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for treasuryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = treasuryReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "treasury()";
            const SELECTOR: [u8; 4] = [97u8, 208u8, 39u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdrawFunds()` and selector `0x24600fc3`.
```solidity
function withdrawFunds() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawFundsCall {}
    ///Container type for the return parameters of the [`withdrawFunds()`](withdrawFundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawFundsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawFundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawFundsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawFundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawFundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawFundsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawFundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawFundsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawFundsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawFunds()";
            const SELECTOR: [u8; 4] = [36u8, 96u8, 15u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) function calls.
    pub enum SealedBidAuctionSequencingModuleCalls {
        #[allow(missing_docs)]
        auctionActive(auctionActiveCall),
        #[allow(missing_docs)]
        auctionType(auctionTypeCall),
        #[allow(missing_docs)]
        bid(bidCall),
        #[allow(missing_docs)]
        bids(bidsCall),
        #[allow(missing_docs)]
        endTime(endTimeCall),
        #[allow(missing_docs)]
        finalizeAuction(finalizeAuctionCall),
        #[allow(missing_docs)]
        getAuctionEndTime(getAuctionEndTimeCall),
        #[allow(missing_docs)]
        getAuctionType(getAuctionTypeCall),
        #[allow(missing_docs)]
        getAuctionWinner(getAuctionWinnerCall),
        #[allow(missing_docs)]
        getCurrentPrice(getCurrentPriceCall),
        #[allow(missing_docs)]
        highestBid(highestBidCall),
        #[allow(missing_docs)]
        highestBidder(highestBidderCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isAuctionActive(isAuctionActiveCall),
        #[allow(missing_docs)]
        refunds(refundsCall),
        #[allow(missing_docs)]
        revealBid(revealBidCall),
        #[allow(missing_docs)]
        treasury(treasuryCall),
        #[allow(missing_docs)]
        withdrawFunds(withdrawFundsCall),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 22u8, 59u8, 44u8],
            [33u8, 99u8, 184u8, 197u8],
            [36u8, 96u8, 15u8, 195u8],
            [49u8, 151u8, 203u8, 182u8],
            [76u8, 88u8, 61u8, 138u8],
            [97u8, 208u8, 39u8, 179u8],
            [98u8, 234u8, 130u8, 219u8],
            [120u8, 124u8, 10u8, 108u8],
            [122u8, 57u8, 121u8, 220u8],
            [145u8, 249u8, 1u8, 87u8],
            [146u8, 34u8, 128u8, 6u8],
            [149u8, 123u8, 177u8, 224u8],
            [153u8, 69u8, 149u8, 225u8],
            [188u8, 61u8, 165u8, 53u8],
            [209u8, 180u8, 185u8, 163u8],
            [213u8, 123u8, 222u8, 121u8],
            [235u8, 145u8, 211u8, 126u8],
            [247u8, 114u8, 130u8, 171u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SealedBidAuctionSequencingModuleCalls {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::auctionActive(_) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::auctionType(_) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bid(_) => <bidCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::bids(_) => <bidsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::endTime(_) => <endTimeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::finalizeAuction(_) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionEndTime(_) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionType(_) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionWinner(_) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentPrice(_) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::highestBid(_) => {
                    <highestBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::highestBidder(_) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAuctionActive(_) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refunds(_) => <refundsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::revealBid(_) => {
                    <revealBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::treasury(_) => <treasuryCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::withdrawFunds(_) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls>] = &[
                {
                    fn getAuctionType(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getAuctionType)
                    }
                    getAuctionType
                },
                {
                    fn revealBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <revealBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::revealBid)
                    }
                    revealBid
                },
                {
                    fn withdrawFunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <withdrawFundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::withdrawFunds)
                    }
                    withdrawFunds
                },
                {
                    fn endTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <endTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::endTime)
                    }
                    endTime
                },
                {
                    fn getAuctionWinner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getAuctionWinner)
                    }
                    getAuctionWinner
                },
                {
                    fn treasury(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <treasuryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::treasury)
                    }
                    treasury
                },
                {
                    fn bids(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <bidsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::bids)
                    }
                    bids
                },
                {
                    fn getAuctionEndTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleCalls::getAuctionEndTime,
                            )
                    }
                    getAuctionEndTime
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn highestBidder(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <highestBidderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::highestBidder)
                    }
                    highestBidder
                },
                {
                    fn auctionActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <auctionActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::auctionActive)
                    }
                    auctionActive
                },
                {
                    fn bid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <bidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::bid)
                    }
                    bid
                },
                {
                    fn auctionType(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <auctionTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::auctionType)
                    }
                    auctionType
                },
                {
                    fn refunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <refundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::refunds)
                    }
                    refunds
                },
                {
                    fn isAuctionActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::isAuctionActive)
                    }
                    isAuctionActive
                },
                {
                    fn highestBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <highestBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::highestBid)
                    }
                    highestBid
                },
                {
                    fn getCurrentPrice(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getCurrentPrice)
                    }
                    getCurrentPrice
                },
                {
                    fn finalizeAuction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::finalizeAuction)
                    }
                    finalizeAuction
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::auctionActive(inner) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::auctionType(inner) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bids(inner) => {
                    <bidsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::endTime(inner) => {
                    <endTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::finalizeAuction(inner) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionEndTime(inner) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionType(inner) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionWinner(inner) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentPrice(inner) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::highestBid(inner) => {
                    <highestBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::highestBidder(inner) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAuctionActive(inner) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refunds(inner) => {
                    <refundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::revealBid(inner) => {
                    <revealBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::treasury(inner) => {
                    <treasuryCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::withdrawFunds(inner) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::auctionActive(inner) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::auctionType(inner) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::bids(inner) => {
                    <bidsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::endTime(inner) => {
                    <endTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::finalizeAuction(inner) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionEndTime(inner) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionType(inner) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionWinner(inner) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentPrice(inner) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::highestBid(inner) => {
                    <highestBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::highestBidder(inner) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAuctionActive(inner) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refunds(inner) => {
                    <refundsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::revealBid(inner) => {
                    <revealBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::treasury(inner) => {
                    <treasuryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawFunds(inner) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) custom errors.
    pub enum SealedBidAuctionSequencingModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        AuctionNotActive(AuctionNotActive),
        #[allow(missing_docs)]
        AuctionNotEnded(AuctionNotEnded),
        #[allow(missing_docs)]
        BidExceedsDeposit(BidExceedsDeposit),
        #[allow(missing_docs)]
        InvalidBidDeposit(InvalidBidDeposit),
        #[allow(missing_docs)]
        InvalidBidReveal(InvalidBidReveal),
        #[allow(missing_docs)]
        InvalidDuration(InvalidDuration),
        #[allow(missing_docs)]
        NoBidFound(NoBidFound),
        #[allow(missing_docs)]
        NoFundsToWithdraw(NoFundsToWithdraw),
        #[allow(missing_docs)]
        TransactionFailed(TransactionFailed),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [97u8, 112u8, 15u8, 145u8],
            [100u8, 99u8, 115u8, 137u8],
            [103u8, 227u8, 153u8, 13u8],
            [105u8, 184u8, 208u8, 254u8],
            [118u8, 22u8, 100u8, 1u8],
            [164u8, 153u8, 53u8, 172u8],
            [184u8, 46u8, 182u8, 183u8],
            [191u8, 150u8, 26u8, 40u8],
            [243u8, 186u8, 186u8, 86u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SealedBidAuctionSequencingModuleErrors {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AuctionNotActive(_) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AuctionNotEnded(_) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BidExceedsDeposit(_) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidBidDeposit(_) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidBidReveal(_) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidDuration(_) => {
                    <InvalidDuration as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoBidFound(_) => {
                    <NoBidFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoFundsToWithdraw(_) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionFailed(_) => {
                    <TransactionFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::AddressNotAllowed,
                            )
                    }
                    AddressNotAllowed
                },
                {
                    fn InvalidBidDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidBidDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::InvalidBidDeposit,
                            )
                    }
                    InvalidBidDeposit
                },
                {
                    fn AuctionNotEnded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AuctionNotEnded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::AuctionNotEnded)
                    }
                    AuctionNotEnded
                },
                {
                    fn NoFundsToWithdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::NoFundsToWithdraw,
                            )
                    }
                    NoFundsToWithdraw
                },
                {
                    fn AuctionNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AuctionNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::AuctionNotActive,
                            )
                    }
                    AuctionNotActive
                },
                {
                    fn InvalidDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidDuration as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::InvalidDuration)
                    }
                    InvalidDuration
                },
                {
                    fn InvalidBidReveal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidBidReveal as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::InvalidBidReveal,
                            )
                    }
                    InvalidBidReveal
                },
                {
                    fn NoBidFound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <NoBidFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::NoBidFound)
                    }
                    NoBidFound
                },
                {
                    fn TransactionFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <TransactionFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::TransactionFailed,
                            )
                    }
                    TransactionFailed
                },
                {
                    fn BidExceedsDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <BidExceedsDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::BidExceedsDeposit,
                            )
                    }
                    BidExceedsDeposit
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AuctionNotActive(inner) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AuctionNotEnded(inner) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BidExceedsDeposit(inner) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidBidDeposit(inner) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidBidReveal(inner) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidDuration(inner) => {
                    <InvalidDuration as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoBidFound(inner) => {
                    <NoBidFound as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NoFundsToWithdraw(inner) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionFailed(inner) => {
                    <TransactionFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AuctionNotActive(inner) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AuctionNotEnded(inner) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BidExceedsDeposit(inner) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidBidDeposit(inner) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidBidReveal(inner) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidDuration(inner) => {
                    <InvalidDuration as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoBidFound(inner) => {
                    <NoBidFound as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NoFundsToWithdraw(inner) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionFailed(inner) => {
                    <TransactionFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) events.
    pub enum SealedBidAuctionSequencingModuleEvents {
        #[allow(missing_docs)]
        BidRevealed(BidRevealed),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                156u8,
                45u8,
                29u8,
                255u8,
                30u8,
                36u8,
                65u8,
                73u8,
                238u8,
                248u8,
                180u8,
                146u8,
                85u8,
                103u8,
                77u8,
                64u8,
                117u8,
                42u8,
                205u8,
                130u8,
                91u8,
                35u8,
                212u8,
                173u8,
                48u8,
                56u8,
                7u8,
                249u8,
                143u8,
                229u8,
                149u8,
                50u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SealedBidAuctionSequencingModuleEvents {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BidRevealed as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BidRevealed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BidRevealed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SealedBidAuctionSequencingModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidRevealed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidRevealed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SealedBidAuctionSequencingModule`](self) contract instance.

See the [wrapper's documentation](`SealedBidAuctionSequencingModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SealedBidAuctionSequencingModuleInstance<T, P, N> {
        SealedBidAuctionSequencingModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _duration: alloy::sol_types::private::primitives::aliases::U256,
        _treasury: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SealedBidAuctionSequencingModuleInstance<T, P, N>,
        >,
    > {
        SealedBidAuctionSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _duration, _treasury)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _duration: alloy::sol_types::private::primitives::aliases::U256,
        _treasury: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SealedBidAuctionSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _duration, _treasury)
    }
    /**A [`SealedBidAuctionSequencingModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SealedBidAuctionSequencingModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SealedBidAuctionSequencingModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SealedBidAuctionSequencingModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SealedBidAuctionSequencingModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SealedBidAuctionSequencingModule`](self) contract instance.

See the [wrapper's documentation](`SealedBidAuctionSequencingModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _duration: alloy::sol_types::private::primitives::aliases::U256,
            _treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SealedBidAuctionSequencingModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _duration, _treasury);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _duration: alloy::sol_types::private::primitives::aliases::U256,
            _treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _duration,
                            _treasury,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SealedBidAuctionSequencingModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SealedBidAuctionSequencingModuleInstance<T, P, N> {
            SealedBidAuctionSequencingModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`auctionActive`] function.
        pub fn auctionActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, auctionActiveCall, N> {
            self.call_builder(&auctionActiveCall {})
        }
        ///Creates a new call builder for the [`auctionType`] function.
        pub fn auctionType(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, auctionTypeCall, N> {
            self.call_builder(&auctionTypeCall {})
        }
        ///Creates a new call builder for the [`bid`] function.
        pub fn bid(
            &self,
            _sealedBid: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, bidCall, N> {
            self.call_builder(&bidCall { _sealedBid })
        }
        ///Creates a new call builder for the [`bids`] function.
        pub fn bids(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, bidsCall, N> {
            self.call_builder(&bidsCall { _0 })
        }
        ///Creates a new call builder for the [`endTime`] function.
        pub fn endTime(&self) -> alloy_contract::SolCallBuilder<T, &P, endTimeCall, N> {
            self.call_builder(&endTimeCall {})
        }
        ///Creates a new call builder for the [`finalizeAuction`] function.
        pub fn finalizeAuction(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, finalizeAuctionCall, N> {
            self.call_builder(&finalizeAuctionCall {})
        }
        ///Creates a new call builder for the [`getAuctionEndTime`] function.
        pub fn getAuctionEndTime(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionEndTimeCall, N> {
            self.call_builder(&getAuctionEndTimeCall {})
        }
        ///Creates a new call builder for the [`getAuctionType`] function.
        pub fn getAuctionType(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionTypeCall, N> {
            self.call_builder(&getAuctionTypeCall {})
        }
        ///Creates a new call builder for the [`getAuctionWinner`] function.
        pub fn getAuctionWinner(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionWinnerCall, N> {
            self.call_builder(&getAuctionWinnerCall {})
        }
        ///Creates a new call builder for the [`getCurrentPrice`] function.
        pub fn getCurrentPrice(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentPriceCall, N> {
            self.call_builder(&getCurrentPriceCall {})
        }
        ///Creates a new call builder for the [`highestBid`] function.
        pub fn highestBid(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, highestBidCall, N> {
            self.call_builder(&highestBidCall {})
        }
        ///Creates a new call builder for the [`highestBidder`] function.
        pub fn highestBidder(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, highestBidderCall, N> {
            self.call_builder(&highestBidderCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer, _1, _2 })
        }
        ///Creates a new call builder for the [`isAuctionActive`] function.
        pub fn isAuctionActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAuctionActiveCall, N> {
            self.call_builder(&isAuctionActiveCall {})
        }
        ///Creates a new call builder for the [`refunds`] function.
        pub fn refunds(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, refundsCall, N> {
            self.call_builder(&refundsCall { _0 })
        }
        ///Creates a new call builder for the [`revealBid`] function.
        pub fn revealBid(
            &self,
            _bid: alloy::sol_types::private::primitives::aliases::U256,
            _salt: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, revealBidCall, N> {
            self.call_builder(&revealBidCall { _bid, _salt })
        }
        ///Creates a new call builder for the [`treasury`] function.
        pub fn treasury(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, treasuryCall, N> {
            self.call_builder(&treasuryCall {})
        }
        ///Creates a new call builder for the [`withdrawFunds`] function.
        pub fn withdrawFunds(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawFundsCall, N> {
            self.call_builder(&withdrawFundsCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BidRevealed`] event.
        pub fn BidRevealed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BidRevealed, N> {
            self.event_filter::<BidRevealed>()
        }
    }
}
