/**

Generated by the following Solidity interface...
```solidity
interface RequireAndModule {
    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error AndPermissionCheckFailed(address requireAddress, address msgSender, bytes data);
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event PermissionCheckAdded(address indexed check);
    event PermissionCheckRemoved(address indexed check);

    constructor(address admin);

    function addPermissionCheck(address _address, bool addToHead) external;
    function getAllPermissionChecks() external view returns (address[] memory);
    function isAllowed(address msgSender, address txOrigin, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function removePermissionCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addPermissionCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllPermissionChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "txOrigin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removePermissionCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AndPermissionCheckFailed",
    "inputs": [
      {
        "name": "requireAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireAndModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b6114316102da823961143190f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261170b8038038061010781610083565b9283398101906100d6565b90565b61011e90610120565b565b6101299061017b565b565b90565b90565b61014561014061014a9261012b565b61012e565b61009c565b90565b61015690610131565b90565b610162906100a7565b9052565b9190610179905f60208501940190610159565b565b8061019661019061018b5f61014d565b6100a7565b916100a7565b146101a6576101a49061027a565b565b6101c96101b25f61014d565b5f918291631e4fbdf760e01b835260048301610166565b0390fd5b5f1c90565b60018060a01b031690565b6101e96101ee916101cd565b6101d2565b90565b6101fb90546101dd565b90565b5f1b90565b9061021460018060a01b03916101fe565b9181191691161790565b61023261022d6102379261009c565b61012e565b61009c565b90565b6102439061021e565b90565b61024f9061023a565b90565b90565b9061026a61026561027192610246565b610252565b8254610203565b9055565b5f0190565b6102835f6101f1565b61028d825f610255565b906102c16102bb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610246565b91610246565b916102ca610034565b806102d481610275565b0390a356fe60806040526004361015610013575b610455565b61001d5f3561008c565b806304f386f414610087578063052eefd1146100825780631b42c7111461007d578063715018a6146100785780637a3979dc146100735780638da5cb5b1461006e5763f2fde38b0361000e57610422565b6103ed565b610392565b6102a0565b61026b565b610189565b610101565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100b8906100a4565b90565b6100c4816100af565b036100cb57565b5f80fd5b905035906100dc826100bb565b565b906020828203126100f7576100f4915f016100cf565b90565b61009c565b5f0190565b3461012f576101196101143660046100de565b610646565b610121610092565b8061012b816100fc565b0390f35b610098565b151590565b61014281610134565b0361014957565b5f80fd5b9050359061015a82610139565b565b91906040838203126101845780610178610181925f86016100cf565b9360200161014d565b90565b61009c565b346101b8576101a261019c36600461015c565b906107e6565b6101aa610092565b806101b4816100fc565b0390f35b610098565b5f9103126101c757565b61009c565b5190565b60209181520190565b60200190565b6101e8906100af565b9052565b906101f9816020936101df565b0190565b60200190565b9061022061021a610213846101cc565b80936101d0565b926101d9565b905f5b8181106102305750505090565b90919261024961024360019286516101ec565b946101fd565b9101919091610223565b6102689160208201915f818403910152610203565b90565b3461029b5761027b3660046101bd565b610297610286610944565b61028e610092565b91829182610253565b0390f35b610098565b346102ce576102b03660046101bd565b6102b8610a45565b6102c0610092565b806102ca816100fc565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103195781359167ffffffffffffffff831161031457602001926001830284011161030f57565b6102db565b6102d7565b6102d3565b9160608383031261036b57610335825f85016100cf565b9261034383602083016100cf565b92604082013567ffffffffffffffff81116103665761036292016102df565b9091565b6100a0565b61009c565b61037990610134565b9052565b9190610390905f60208501940190610370565b565b346103c6576103c26103b16103a836600461031e565b92919091610b23565b6103b9610092565b9182918261037d565b0390f35b610098565b6103d4906100af565b9052565b91906103eb905f602085019401906103cb565b565b3461041d576103fd3660046101bd565b610419610408610c92565b610410610092565b918291826103d8565b0390f35b610098565b346104505761043a6104353660046100de565b610d0c565b610442610092565b8061044c816100fc565b0390f35b610098565b5f80fd5b61046a90610465610d17565b61055c565b565b90565b90565b61048661048161048b9261046c565b61046f565b6100a4565b90565b61049790610472565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6104da601360209261049d565b6104e3816104a6565b0190565b6104fc9060208101905f8183039101526104cd565b90565b1561050657565b61050e610092565b62461bcd60e51b815280610524600482016104e7565b0390fd5b61053c610537610541926100a4565b61046f565b6100a4565b90565b61054d90610528565b90565b61055990610544565b90565b8061057761057161056c5f61048e565b6100af565b916100af565b1461062a57610599610593600161058e849161049a565b610db2565b15610134565b61060e576105cc6105b460016105af849161049a565b610fdb565b6105c66105c0846100af565b916100af565b146104ff565b6105f67fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610550565b906105ff610092565b80610609816100fc565b0390a2565b5f633d0f293d60e01b815280610626600482016100fc565b0390fd5b5f63e6c4247b60e01b815280610642600482016100fc565b0390fd5b61064f90610459565b565b906106639161065e610d17565b6106eb565b565b5f90565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61069d601160209261049d565b6106a681610669565b0190565b6106bf9060208101905f818303910152610690565b90565b156106c957565b6106d1610092565b62461bcd60e51b8152806106e7600482016106aa565b0390fd5b90816107076107016106fc5f61048e565b6100af565b916100af565b146107ca57610720600161071b849161049a565b610db2565b6107ae5761072c610665565b505f146107925761075061074a6001610745849161049a565b61112f565b5b6106c2565b61077a7f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610550565b90610783610092565b8061078d816100fc565b0390a2565b6107506107a960016107a4849161049a565b61110f565b61074b565b5f63516c350f60e11b8152806107c6600482016100fc565b0390fd5b5f63e6c4247b60e01b8152806107e2600482016100fc565b0390fd5b906107f091610651565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061081f906107f7565b810190811067ffffffffffffffff82111761083957604052565b610801565b9061085161084a610092565b9283610815565b565b67ffffffffffffffff811161086b5760208091020190565b610801565b9061088261087d83610853565b61083e565b918252565b369037565b906108b161089983610870565b926020806108a78693610853565b9201910390610887565b565b90565b6108ca6108c56108cf9261046c565b61046f565b6108b3565b90565b634e487b7160e01b5f52601160045260245ffd5b6108ef906108b3565b5f1981146108fd5760010190565b6108d2565b634e487b7160e01b5f52603260045260245ffd5b90610920826101cc565b811015610931576020809102010190565b610902565b90610940906100af565b9052565b61094c6107f2565b5061095f61095a600161049a565b611153565b6109688161088c565b61097a610975600161049a565b61116a565b6109835f6108b6565b905b81610998610992866108b3565b916108b3565b10806109fd575b156109f4576109d0816109c16109d8936109bc8791879092610916565b610936565b6109cb600161049a565b6111a4565b919015610134565b6109ec576109e690916108e6565b90610985565b505090505b90565b505090506109f1565b5080610a19610a13610a0e5f61048e565b6100af565b916100af565b141561099f565b610a28610d17565b610a30610a32565b565b610a43610a3e5f61048e565b61120b565b565b610a4d610a20565b565b610a5890610528565b90565b610a6490610a4f565b90565b610a7090610544565b90565b60e01b90565b90505190610a8682610139565b565b90602082820312610aa157610a9e915f01610a79565b90565b61009c565b60209181520190565b90825f939282370152565b9190610ad481610acd81610ad995610aa6565b8095610aaf565b6107f7565b0190565b610b03610b109593949294610af960608401965f8501906103cb565b60208301906103cb565b6040818503910152610aba565b90565b610b1b610092565b3d5f823e3d90fd5b909392610b2e610665565b50610b41610b3c600161049a565b61116a565b5b80610b5d610b57610b525f61048e565b6100af565b916100af565b14610c5257610b73610b6e82610a5b565b610a67565b6020637a3979dc918590610b9c8a94610ba78a8990610b90610092565b98899788968796610a73565b865260048601610add565b03915afa8015610c4d57610bc3915f91610c1f575b5015610134565b610bf657610bdd610be591610bd8600161049a565b6111a4565b919015610134565b15610b42575050505090505b600190565b90610c1b919293610c05610092565b94859463079a132560e41b865260048601610add565b0390fd5b610c40915060203d8111610c46575b610c388183610815565b810190610a88565b5f610bbc565b503d610c2e565b610b13565b505050509050610bf1565b5f90565b5f1c90565b60018060a01b031690565b610c7d610c8291610c61565b610c66565b90565b610c8f9054610c71565b90565b610c9a610c5d565b50610ca45f610c85565b90565b610cb890610cb3610d17565b610cba565b565b80610cd5610ccf610cca5f61048e565b6100af565b916100af565b14610ce557610ce39061120b565b565b610d08610cf15f61048e565b5f918291631e4fbdf760e01b8352600483016103d8565b0390fd5b610d1590610ca7565b565b610d1f610c92565b610d38610d32610d2d61126a565b6100af565b916100af565b03610d3f57565b610d61610d4a61126a565b5f91829163118cdaa760e01b8352600483016103d8565b0390fd5b90610d6f90610550565b5f5260205260405f2090565b5f90565b610d8890610134565b90565b90610d9590610d7f565b5f5260205260405f2090565b610daa5f61048e565b90565b600190565b610dba610665565b50610de2610ddd610dcf600184018590610d65565b610dd7610d7b565b90610d8b565b610c85565b610dfb610df5610df0610da1565b6100af565b916100af565b1480610e5f575b5f14610e5857610e42610e3c610e37610e296001610e489501610e23610da1565b90610d65565b610e31610dad565b90610d8b565b610c85565b926100af565b916100af565b145f14610e5457600190565b5f90565b5050600190565b50610e87610e82610e74600184018590610d65565b610e7c610dad565b90610d8b565b610c85565b610ea0610e9a610e95610da1565b6100af565b916100af565b14610e02565b610eaf5f61048e565b90565b1b90565b91906008610ed6910291610ed060018060a01b0384610eb2565b92610eb2565b9181191691161790565b90565b9190610ef9610ef4610f0193610550565b610ee0565b908354610eb6565b9055565b610f1791610f11610c5d565b91610ee3565b565b90565b610f30610f2b610f3592610f19565b61046f565b6108b3565b90565b90565b610f47610f4c91610c61565b610f38565b90565b610f599054610f3b565b90565b610f6b610f71919392936108b3565b926108b3565b8203918211610f7c57565b6108d2565b5f1b90565b90610f925f1991610f81565b9181191691161790565b610fb0610fab610fb5926108b3565b61046f565b6108b3565b90565b90565b90610fd0610fcb610fd792610f9c565b610fb8565b8254610f86565b9055565b610fe3610c5d565b5081610ffe610ff8610ff3610ea6565b6100af565b916100af565b1480156110f5575b6110e7578061106f6110e492611039611034611026600186018890610d65565b61102e610d7b565b90610d8b565b610c85565b61106061105b61104d600187018990610d65565b611055610dad565b90610d8b565b610c85565b90611069610dad565b92611277565b6110975f611092611084600185018790610d65565b61108c610d7b565b90610d8b565b610f05565b6110bf5f6110ba6110ac600185018790610d65565b6110b4610dad565b90610d8b565b610f05565b6110de5f6110cd6001610f1c565b9201916110d983610f4f565b610f5c565b90610fbb565b90565b50506110f25f61048e565b90565b5061110a611104828490610db2565b15610134565b611006565b9061112c9161111c610665565b5090611126610d7b565b916112c2565b90565b9061114c9161113c610665565b5090611146610dad565b916112c2565b90565b5f90565b5f6111679161116061114f565b5001610f4f565b90565b61119c61118e60016111a19361117e610c5d565b5001611188610da1565b90610d65565b611196610dad565b90610d8b565b610c85565b90565b906111ca916111b1610665565b506111ba610c5d565b50906111c4610dad565b916112e4565b91909190565b906111e160018060a01b0391610f81565b9181191691161790565b906112006111fb61120792610550565b610ee0565b82546111d0565b9055565b6112145f610c85565b61121e825f6111eb565b9061125261124c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610550565b91610550565b9161125b610092565b80611265816100fc565b0390a3565b611272610c5d565b503390565b91926112b66112bb9260016112c0966112af836112aa61129a858b018590610d65565b6112a48915610134565b90610d8b565b6111eb565b9501610d65565b610d8b565b6111eb565b565b916112e1926112cf610665565b50916112d9610da1565b909192611385565b90565b916112ed610665565b506112f6610c5d565b5061130b611305848490610db2565b15610134565b5f14611322575050505f9061131f5f61048e565b90565b61133561133a92600161133f9501610d65565b610d8b565b610c85565b908161135a61135461134f610da1565b6100af565b916100af565b14159190565b61136f611375919392936108b3565b926108b3565b820180921161138057565b6108d2565b9161138e610665565b506113a361139d848390610db2565b15610134565b80611420575b6113b557505050505f90565b61141b936113f6926113ec6113e06113db6113d4600189018590610d65565b8590610d8b565b610c85565b91869085908592611277565b8492909192611277565b6114155f6114046001610f1c565b92019161141083610f4f565b611360565b90610fbb565b600190565b5061142c838390610db2565b6113a956
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x141a\x02\xDA\x829a\x141\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x17\x0B\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01 V[V[a\x01)\x90a\x01{V[V[\x90V[\x90V[a\x01Ea\x01@a\x01J\x92a\x01+V[a\x01.V[a\0\x9CV[\x90V[a\x01V\x90a\x011V[\x90V[a\x01b\x90a\0\xA7V[\x90RV[\x91\x90a\x01y\x90_` \x85\x01\x94\x01\x90a\x01YV[V[\x80a\x01\x96a\x01\x90a\x01\x8B_a\x01MV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xA6Wa\x01\xA4\x90a\x02zV[V[a\x01\xC9a\x01\xB2_a\x01MV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01fV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE9a\x01\xEE\x91a\x01\xCDV[a\x01\xD2V[\x90V[a\x01\xFB\x90Ta\x01\xDDV[\x90V[_\x1B\x90V[\x90a\x02\x14`\x01\x80`\xA0\x1B\x03\x91a\x01\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x022a\x02-a\x027\x92a\0\x9CV[a\x01.V[a\0\x9CV[\x90V[a\x02C\x90a\x02\x1EV[\x90V[a\x02O\x90a\x02:V[\x90V[\x90V[\x90a\x02ja\x02ea\x02q\x92a\x02FV[a\x02RV[\x82Ta\x02\x03V[\x90UV[_\x01\x90V[a\x02\x83_a\x01\xF1V[a\x02\x8D\x82_a\x02UV[\x90a\x02\xC1a\x02\xBB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02FV[\x91a\x02FV[\x91a\x02\xCAa\x004V[\x80a\x02\xD4\x81a\x02uV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04UV[a\0\x1D_5a\0\x8CV[\x80c\x04\xF3\x86\xF4\x14a\0\x87W\x80c\x05.\xEF\xD1\x14a\0\x82W\x80c\x1BB\xC7\x11\x14a\0}W\x80cqP\x18\xA6\x14a\0xW\x80cz9y\xDC\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\"V[a\x03\xEDV[a\x03\x92V[a\x02\xA0V[a\x02kV[a\x01\x89V[a\x01\x01V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB8\x90a\0\xA4V[\x90V[a\0\xC4\x81a\0\xAFV[\x03a\0\xCBWV[_\x80\xFD[\x90P5\x90a\0\xDC\x82a\0\xBBV[V[\x90` \x82\x82\x03\x12a\0\xF7Wa\0\xF4\x91_\x01a\0\xCFV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01/Wa\x01\x19a\x01\x146`\x04a\0\xDEV[a\x06FV[a\x01!a\0\x92V[\x80a\x01+\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01B\x81a\x014V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x84W\x80a\x01xa\x01\x81\x92_\x86\x01a\0\xCFV[\x93` \x01a\x01MV[\x90V[a\0\x9CV[4a\x01\xB8Wa\x01\xA2a\x01\x9C6`\x04a\x01\\V[\x90a\x07\xE6V[a\x01\xAAa\0\x92V[\x80a\x01\xB4\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01\xC7WV[a\0\x9CV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\xE8\x90a\0\xAFV[\x90RV[\x90a\x01\xF9\x81` \x93a\x01\xDFV[\x01\x90V[` \x01\x90V[\x90a\x02 a\x02\x1Aa\x02\x13\x84a\x01\xCCV[\x80\x93a\x01\xD0V[\x92a\x01\xD9V[\x90_[\x81\x81\x10a\x020WPPP\x90V[\x90\x91\x92a\x02Ia\x02C`\x01\x92\x86Qa\x01\xECV[\x94a\x01\xFDV[\x91\x01\x91\x90\x91a\x02#V[a\x02h\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\x03V[\x90V[4a\x02\x9BWa\x02{6`\x04a\x01\xBDV[a\x02\x97a\x02\x86a\tDV[a\x02\x8Ea\0\x92V[\x91\x82\x91\x82a\x02SV[\x03\x90\xF3[a\0\x98V[4a\x02\xCEWa\x02\xB06`\x04a\x01\xBDV[a\x02\xB8a\nEV[a\x02\xC0a\0\x92V[\x80a\x02\xCA\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x19W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x14W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0FWV[a\x02\xDBV[a\x02\xD7V[a\x02\xD3V[\x91``\x83\x83\x03\x12a\x03kWa\x035\x82_\x85\x01a\0\xCFV[\x92a\x03C\x83` \x83\x01a\0\xCFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03fWa\x03b\x92\x01a\x02\xDFV[\x90\x91V[a\0\xA0V[a\0\x9CV[a\x03y\x90a\x014V[\x90RV[\x91\x90a\x03\x90\x90_` \x85\x01\x94\x01\x90a\x03pV[V[4a\x03\xC6Wa\x03\xC2a\x03\xB1a\x03\xA86`\x04a\x03\x1EV[\x92\x91\x90\x91a\x0B#V[a\x03\xB9a\0\x92V[\x91\x82\x91\x82a\x03}V[\x03\x90\xF3[a\0\x98V[a\x03\xD4\x90a\0\xAFV[\x90RV[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03\xCBV[V[4a\x04\x1DWa\x03\xFD6`\x04a\x01\xBDV[a\x04\x19a\x04\x08a\x0C\x92V[a\x04\x10a\0\x92V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\0\x98V[4a\x04PWa\x04:a\x0456`\x04a\0\xDEV[a\r\x0CV[a\x04Ba\0\x92V[\x80a\x04L\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x04j\x90a\x04ea\r\x17V[a\x05\\V[V[\x90V[\x90V[a\x04\x86a\x04\x81a\x04\x8B\x92a\x04lV[a\x04oV[a\0\xA4V[\x90V[a\x04\x97\x90a\x04rV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDA`\x13` \x92a\x04\x9DV[a\x04\xE3\x81a\x04\xA6V[\x01\x90V[a\x04\xFC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xCDV[\x90V[\x15a\x05\x06WV[a\x05\x0Ea\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05$`\x04\x82\x01a\x04\xE7V[\x03\x90\xFD[a\x05<a\x057a\x05A\x92a\0\xA4V[a\x04oV[a\0\xA4V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x05DV[\x90V[\x80a\x05wa\x05qa\x05l_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x06*Wa\x05\x99a\x05\x93`\x01a\x05\x8E\x84\x91a\x04\x9AV[a\r\xB2V[\x15a\x014V[a\x06\x0EWa\x05\xCCa\x05\xB4`\x01a\x05\xAF\x84\x91a\x04\x9AV[a\x0F\xDBV[a\x05\xC6a\x05\xC0\x84a\0\xAFV[\x91a\0\xAFV[\x14a\x04\xFFV[a\x05\xF6\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x05PV[\x90a\x05\xFFa\0\x92V[\x80a\x06\t\x81a\0\xFCV[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x06&`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x06B`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x06O\x90a\x04YV[V[\x90a\x06c\x91a\x06^a\r\x17V[a\x06\xEBV[V[_\x90V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x9D`\x11` \x92a\x04\x9DV[a\x06\xA6\x81a\x06iV[\x01\x90V[a\x06\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x90V[\x90V[\x15a\x06\xC9WV[a\x06\xD1a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xE7`\x04\x82\x01a\x06\xAAV[\x03\x90\xFD[\x90\x81a\x07\x07a\x07\x01a\x06\xFC_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x07\xCAWa\x07 `\x01a\x07\x1B\x84\x91a\x04\x9AV[a\r\xB2V[a\x07\xAEWa\x07,a\x06eV[P_\x14a\x07\x92Wa\x07Pa\x07J`\x01a\x07E\x84\x91a\x04\x9AV[a\x11/V[[a\x06\xC2V[a\x07z\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x05PV[\x90a\x07\x83a\0\x92V[\x80a\x07\x8D\x81a\0\xFCV[\x03\x90\xA2V[a\x07Pa\x07\xA9`\x01a\x07\xA4\x84\x91a\x04\x9AV[a\x11\x0FV[a\x07KV[_cQl5\x0F`\xE1\x1B\x81R\x80a\x07\xC6`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07\xE2`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[\x90a\x07\xF0\x91a\x06QV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\x1F\x90a\x07\xF7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x089W`@RV[a\x08\x01V[\x90a\x08Qa\x08Ja\0\x92V[\x92\x83a\x08\x15V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08kW` \x80\x91\x02\x01\x90V[a\x08\x01V[\x90a\x08\x82a\x08}\x83a\x08SV[a\x08>V[\x91\x82RV[6\x907V[\x90a\x08\xB1a\x08\x99\x83a\x08pV[\x92` \x80a\x08\xA7\x86\x93a\x08SV[\x92\x01\x91\x03\x90a\x08\x87V[V[\x90V[a\x08\xCAa\x08\xC5a\x08\xCF\x92a\x04lV[a\x04oV[a\x08\xB3V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08\xEF\x90a\x08\xB3V[_\x19\x81\x14a\x08\xFDW`\x01\x01\x90V[a\x08\xD2V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t \x82a\x01\xCCV[\x81\x10\x15a\t1W` \x80\x91\x02\x01\x01\x90V[a\t\x02V[\x90a\t@\x90a\0\xAFV[\x90RV[a\tLa\x07\xF2V[Pa\t_a\tZ`\x01a\x04\x9AV[a\x11SV[a\th\x81a\x08\x8CV[a\tza\tu`\x01a\x04\x9AV[a\x11jV[a\t\x83_a\x08\xB6V[\x90[\x81a\t\x98a\t\x92\x86a\x08\xB3V[\x91a\x08\xB3V[\x10\x80a\t\xFDW[\x15a\t\xF4Wa\t\xD0\x81a\t\xC1a\t\xD8\x93a\t\xBC\x87\x91\x87\x90\x92a\t\x16V[a\t6V[a\t\xCB`\x01a\x04\x9AV[a\x11\xA4V[\x91\x90\x15a\x014V[a\t\xECWa\t\xE6\x90\x91a\x08\xE6V[\x90a\t\x85V[PP\x90P[\x90V[PP\x90Pa\t\xF1V[P\x80a\n\x19a\n\x13a\n\x0E_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14\x15a\t\x9FV[a\n(a\r\x17V[a\n0a\n2V[V[a\nCa\n>_a\x04\x8EV[a\x12\x0BV[V[a\nMa\n V[V[a\nX\x90a\x05(V[\x90V[a\nd\x90a\nOV[\x90V[a\np\x90a\x05DV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\n\x86\x82a\x019V[V[\x90` \x82\x82\x03\x12a\n\xA1Wa\n\x9E\x91_\x01a\nyV[\x90V[a\0\x9CV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\xD4\x81a\n\xCD\x81a\n\xD9\x95a\n\xA6V[\x80\x95a\n\xAFV[a\x07\xF7V[\x01\x90V[a\x0B\x03a\x0B\x10\x95\x93\x94\x92\x94a\n\xF9``\x84\x01\x96_\x85\x01\x90a\x03\xCBV[` \x83\x01\x90a\x03\xCBV[`@\x81\x85\x03\x91\x01Ra\n\xBAV[\x90V[a\x0B\x1Ba\0\x92V[=_\x82>=\x90\xFD[\x90\x93\x92a\x0B.a\x06eV[Pa\x0BAa\x0B<`\x01a\x04\x9AV[a\x11jV[[\x80a\x0B]a\x0BWa\x0BR_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0CRWa\x0Bsa\x0Bn\x82a\n[V[a\ngV[` cz9y\xDC\x91\x85\x90a\x0B\x9C\x8A\x94a\x0B\xA7\x8A\x89\x90a\x0B\x90a\0\x92V[\x98\x89\x97\x88\x96\x87\x96a\nsV[\x86R`\x04\x86\x01a\n\xDDV[\x03\x91Z\xFA\x80\x15a\x0CMWa\x0B\xC3\x91_\x91a\x0C\x1FW[P\x15a\x014V[a\x0B\xF6Wa\x0B\xDDa\x0B\xE5\x91a\x0B\xD8`\x01a\x04\x9AV[a\x11\xA4V[\x91\x90\x15a\x014V[\x15a\x0BBWPPPP\x90P[`\x01\x90V[\x90a\x0C\x1B\x91\x92\x93a\x0C\x05a\0\x92V[\x94\x85\x94c\x07\x9A\x13%`\xE4\x1B\x86R`\x04\x86\x01a\n\xDDV[\x03\x90\xFD[a\x0C@\x91P` =\x81\x11a\x0CFW[a\x0C8\x81\x83a\x08\x15V[\x81\x01\x90a\n\x88V[_a\x0B\xBCV[P=a\x0C.V[a\x0B\x13V[PPPP\x90Pa\x0B\xF1V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C}a\x0C\x82\x91a\x0CaV[a\x0CfV[\x90V[a\x0C\x8F\x90Ta\x0CqV[\x90V[a\x0C\x9Aa\x0C]V[Pa\x0C\xA4_a\x0C\x85V[\x90V[a\x0C\xB8\x90a\x0C\xB3a\r\x17V[a\x0C\xBAV[V[\x80a\x0C\xD5a\x0C\xCFa\x0C\xCA_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0C\xE5Wa\x0C\xE3\x90a\x12\x0BV[V[a\r\x08a\x0C\xF1_a\x04\x8EV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[a\r\x15\x90a\x0C\xA7V[V[a\r\x1Fa\x0C\x92V[a\r8a\r2a\r-a\x12jV[a\0\xAFV[\x91a\0\xAFV[\x03a\r?WV[a\raa\rJa\x12jV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[\x90a\ro\x90a\x05PV[_R` R`@_ \x90V[_\x90V[a\r\x88\x90a\x014V[\x90V[\x90a\r\x95\x90a\r\x7FV[_R` R`@_ \x90V[a\r\xAA_a\x04\x8EV[\x90V[`\x01\x90V[a\r\xBAa\x06eV[Pa\r\xE2a\r\xDDa\r\xCF`\x01\x84\x01\x85\x90a\reV[a\r\xD7a\r{V[\x90a\r\x8BV[a\x0C\x85V[a\r\xFBa\r\xF5a\r\xF0a\r\xA1V[a\0\xAFV[\x91a\0\xAFV[\x14\x80a\x0E_W[_\x14a\x0EXWa\x0EBa\x0E<a\x0E7a\x0E)`\x01a\x0EH\x95\x01a\x0E#a\r\xA1V[\x90a\reV[a\x0E1a\r\xADV[\x90a\r\x8BV[a\x0C\x85V[\x92a\0\xAFV[\x91a\0\xAFV[\x14_\x14a\x0ETW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x0E\x87a\x0E\x82a\x0Et`\x01\x84\x01\x85\x90a\reV[a\x0E|a\r\xADV[\x90a\r\x8BV[a\x0C\x85V[a\x0E\xA0a\x0E\x9Aa\x0E\x95a\r\xA1V[a\0\xAFV[\x91a\0\xAFV[\x14a\x0E\x02V[a\x0E\xAF_a\x04\x8EV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xD6\x91\x02\x91a\x0E\xD0`\x01\x80`\xA0\x1B\x03\x84a\x0E\xB2V[\x92a\x0E\xB2V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0E\xF9a\x0E\xF4a\x0F\x01\x93a\x05PV[a\x0E\xE0V[\x90\x83Ta\x0E\xB6V[\x90UV[a\x0F\x17\x91a\x0F\x11a\x0C]V[\x91a\x0E\xE3V[V[\x90V[a\x0F0a\x0F+a\x0F5\x92a\x0F\x19V[a\x04oV[a\x08\xB3V[\x90V[\x90V[a\x0FGa\x0FL\x91a\x0CaV[a\x0F8V[\x90V[a\x0FY\x90Ta\x0F;V[\x90V[a\x0Fka\x0Fq\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x03\x91\x82\x11a\x0F|WV[a\x08\xD2V[_\x1B\x90V[\x90a\x0F\x92_\x19\x91a\x0F\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xB0a\x0F\xABa\x0F\xB5\x92a\x08\xB3V[a\x04oV[a\x08\xB3V[\x90V[\x90V[\x90a\x0F\xD0a\x0F\xCBa\x0F\xD7\x92a\x0F\x9CV[a\x0F\xB8V[\x82Ta\x0F\x86V[\x90UV[a\x0F\xE3a\x0C]V[P\x81a\x0F\xFEa\x0F\xF8a\x0F\xF3a\x0E\xA6V[a\0\xAFV[\x91a\0\xAFV[\x14\x80\x15a\x10\xF5W[a\x10\xE7W\x80a\x10oa\x10\xE4\x92a\x109a\x104a\x10&`\x01\x86\x01\x88\x90a\reV[a\x10.a\r{V[\x90a\r\x8BV[a\x0C\x85V[a\x10`a\x10[a\x10M`\x01\x87\x01\x89\x90a\reV[a\x10Ua\r\xADV[\x90a\r\x8BV[a\x0C\x85V[\x90a\x10ia\r\xADV[\x92a\x12wV[a\x10\x97_a\x10\x92a\x10\x84`\x01\x85\x01\x87\x90a\reV[a\x10\x8Ca\r{V[\x90a\r\x8BV[a\x0F\x05V[a\x10\xBF_a\x10\xBAa\x10\xAC`\x01\x85\x01\x87\x90a\reV[a\x10\xB4a\r\xADV[\x90a\r\x8BV[a\x0F\x05V[a\x10\xDE_a\x10\xCD`\x01a\x0F\x1CV[\x92\x01\x91a\x10\xD9\x83a\x0FOV[a\x0F\\V[\x90a\x0F\xBBV[\x90V[PPa\x10\xF2_a\x04\x8EV[\x90V[Pa\x11\na\x11\x04\x82\x84\x90a\r\xB2V[\x15a\x014V[a\x10\x06V[\x90a\x11,\x91a\x11\x1Ca\x06eV[P\x90a\x11&a\r{V[\x91a\x12\xC2V[\x90V[\x90a\x11L\x91a\x11<a\x06eV[P\x90a\x11Fa\r\xADV[\x91a\x12\xC2V[\x90V[_\x90V[_a\x11g\x91a\x11`a\x11OV[P\x01a\x0FOV[\x90V[a\x11\x9Ca\x11\x8E`\x01a\x11\xA1\x93a\x11~a\x0C]V[P\x01a\x11\x88a\r\xA1V[\x90a\reV[a\x11\x96a\r\xADV[\x90a\r\x8BV[a\x0C\x85V[\x90V[\x90a\x11\xCA\x91a\x11\xB1a\x06eV[Pa\x11\xBAa\x0C]V[P\x90a\x11\xC4a\r\xADV[\x91a\x12\xE4V[\x91\x90\x91\x90V[\x90a\x11\xE1`\x01\x80`\xA0\x1B\x03\x91a\x0F\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12\0a\x11\xFBa\x12\x07\x92a\x05PV[a\x0E\xE0V[\x82Ta\x11\xD0V[\x90UV[a\x12\x14_a\x0C\x85V[a\x12\x1E\x82_a\x11\xEBV[\x90a\x12Ra\x12L\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05PV[\x91a\x05PV[\x91a\x12[a\0\x92V[\x80a\x12e\x81a\0\xFCV[\x03\x90\xA3V[a\x12ra\x0C]V[P3\x90V[\x91\x92a\x12\xB6a\x12\xBB\x92`\x01a\x12\xC0\x96a\x12\xAF\x83a\x12\xAAa\x12\x9A\x85\x8B\x01\x85\x90a\reV[a\x12\xA4\x89\x15a\x014V[\x90a\r\x8BV[a\x11\xEBV[\x95\x01a\reV[a\r\x8BV[a\x11\xEBV[V[\x91a\x12\xE1\x92a\x12\xCFa\x06eV[P\x91a\x12\xD9a\r\xA1V[\x90\x91\x92a\x13\x85V[\x90V[\x91a\x12\xEDa\x06eV[Pa\x12\xF6a\x0C]V[Pa\x13\x0Ba\x13\x05\x84\x84\x90a\r\xB2V[\x15a\x014V[_\x14a\x13\"WPPP_\x90a\x13\x1F_a\x04\x8EV[\x90V[a\x135a\x13:\x92`\x01a\x13?\x95\x01a\reV[a\r\x8BV[a\x0C\x85V[\x90\x81a\x13Za\x13Ta\x13Oa\r\xA1V[a\0\xAFV[\x91a\0\xAFV[\x14\x15\x91\x90V[a\x13oa\x13u\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x01\x80\x92\x11a\x13\x80WV[a\x08\xD2V[\x91a\x13\x8Ea\x06eV[Pa\x13\xA3a\x13\x9D\x84\x83\x90a\r\xB2V[\x15a\x014V[\x80a\x14 W[a\x13\xB5WPPPP_\x90V[a\x14\x1B\x93a\x13\xF6\x92a\x13\xECa\x13\xE0a\x13\xDBa\x13\xD4`\x01\x89\x01\x85\x90a\reV[\x85\x90a\r\x8BV[a\x0C\x85V[\x91\x86\x90\x85\x90\x85\x92a\x12wV[\x84\x92\x90\x91\x92a\x12wV[a\x14\x15_a\x14\x04`\x01a\x0F\x1CV[\x92\x01\x91a\x14\x10\x83a\x0FOV[a\x13`V[\x90a\x0F\xBBV[`\x01\x90V[Pa\x14,\x83\x83\x90a\r\xB2V[a\x13\xA9V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610455565b61001d5f3561008c565b806304f386f414610087578063052eefd1146100825780631b42c7111461007d578063715018a6146100785780637a3979dc146100735780638da5cb5b1461006e5763f2fde38b0361000e57610422565b6103ed565b610392565b6102a0565b61026b565b610189565b610101565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100b8906100a4565b90565b6100c4816100af565b036100cb57565b5f80fd5b905035906100dc826100bb565b565b906020828203126100f7576100f4915f016100cf565b90565b61009c565b5f0190565b3461012f576101196101143660046100de565b610646565b610121610092565b8061012b816100fc565b0390f35b610098565b151590565b61014281610134565b0361014957565b5f80fd5b9050359061015a82610139565b565b91906040838203126101845780610178610181925f86016100cf565b9360200161014d565b90565b61009c565b346101b8576101a261019c36600461015c565b906107e6565b6101aa610092565b806101b4816100fc565b0390f35b610098565b5f9103126101c757565b61009c565b5190565b60209181520190565b60200190565b6101e8906100af565b9052565b906101f9816020936101df565b0190565b60200190565b9061022061021a610213846101cc565b80936101d0565b926101d9565b905f5b8181106102305750505090565b90919261024961024360019286516101ec565b946101fd565b9101919091610223565b6102689160208201915f818403910152610203565b90565b3461029b5761027b3660046101bd565b610297610286610944565b61028e610092565b91829182610253565b0390f35b610098565b346102ce576102b03660046101bd565b6102b8610a45565b6102c0610092565b806102ca816100fc565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103195781359167ffffffffffffffff831161031457602001926001830284011161030f57565b6102db565b6102d7565b6102d3565b9160608383031261036b57610335825f85016100cf565b9261034383602083016100cf565b92604082013567ffffffffffffffff81116103665761036292016102df565b9091565b6100a0565b61009c565b61037990610134565b9052565b9190610390905f60208501940190610370565b565b346103c6576103c26103b16103a836600461031e565b92919091610b23565b6103b9610092565b9182918261037d565b0390f35b610098565b6103d4906100af565b9052565b91906103eb905f602085019401906103cb565b565b3461041d576103fd3660046101bd565b610419610408610c92565b610410610092565b918291826103d8565b0390f35b610098565b346104505761043a6104353660046100de565b610d0c565b610442610092565b8061044c816100fc565b0390f35b610098565b5f80fd5b61046a90610465610d17565b61055c565b565b90565b90565b61048661048161048b9261046c565b61046f565b6100a4565b90565b61049790610472565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6104da601360209261049d565b6104e3816104a6565b0190565b6104fc9060208101905f8183039101526104cd565b90565b1561050657565b61050e610092565b62461bcd60e51b815280610524600482016104e7565b0390fd5b61053c610537610541926100a4565b61046f565b6100a4565b90565b61054d90610528565b90565b61055990610544565b90565b8061057761057161056c5f61048e565b6100af565b916100af565b1461062a57610599610593600161058e849161049a565b610db2565b15610134565b61060e576105cc6105b460016105af849161049a565b610fdb565b6105c66105c0846100af565b916100af565b146104ff565b6105f67fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610550565b906105ff610092565b80610609816100fc565b0390a2565b5f633d0f293d60e01b815280610626600482016100fc565b0390fd5b5f63e6c4247b60e01b815280610642600482016100fc565b0390fd5b61064f90610459565b565b906106639161065e610d17565b6106eb565b565b5f90565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61069d601160209261049d565b6106a681610669565b0190565b6106bf9060208101905f818303910152610690565b90565b156106c957565b6106d1610092565b62461bcd60e51b8152806106e7600482016106aa565b0390fd5b90816107076107016106fc5f61048e565b6100af565b916100af565b146107ca57610720600161071b849161049a565b610db2565b6107ae5761072c610665565b505f146107925761075061074a6001610745849161049a565b61112f565b5b6106c2565b61077a7f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610550565b90610783610092565b8061078d816100fc565b0390a2565b6107506107a960016107a4849161049a565b61110f565b61074b565b5f63516c350f60e11b8152806107c6600482016100fc565b0390fd5b5f63e6c4247b60e01b8152806107e2600482016100fc565b0390fd5b906107f091610651565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061081f906107f7565b810190811067ffffffffffffffff82111761083957604052565b610801565b9061085161084a610092565b9283610815565b565b67ffffffffffffffff811161086b5760208091020190565b610801565b9061088261087d83610853565b61083e565b918252565b369037565b906108b161089983610870565b926020806108a78693610853565b9201910390610887565b565b90565b6108ca6108c56108cf9261046c565b61046f565b6108b3565b90565b634e487b7160e01b5f52601160045260245ffd5b6108ef906108b3565b5f1981146108fd5760010190565b6108d2565b634e487b7160e01b5f52603260045260245ffd5b90610920826101cc565b811015610931576020809102010190565b610902565b90610940906100af565b9052565b61094c6107f2565b5061095f61095a600161049a565b611153565b6109688161088c565b61097a610975600161049a565b61116a565b6109835f6108b6565b905b81610998610992866108b3565b916108b3565b10806109fd575b156109f4576109d0816109c16109d8936109bc8791879092610916565b610936565b6109cb600161049a565b6111a4565b919015610134565b6109ec576109e690916108e6565b90610985565b505090505b90565b505090506109f1565b5080610a19610a13610a0e5f61048e565b6100af565b916100af565b141561099f565b610a28610d17565b610a30610a32565b565b610a43610a3e5f61048e565b61120b565b565b610a4d610a20565b565b610a5890610528565b90565b610a6490610a4f565b90565b610a7090610544565b90565b60e01b90565b90505190610a8682610139565b565b90602082820312610aa157610a9e915f01610a79565b90565b61009c565b60209181520190565b90825f939282370152565b9190610ad481610acd81610ad995610aa6565b8095610aaf565b6107f7565b0190565b610b03610b109593949294610af960608401965f8501906103cb565b60208301906103cb565b6040818503910152610aba565b90565b610b1b610092565b3d5f823e3d90fd5b909392610b2e610665565b50610b41610b3c600161049a565b61116a565b5b80610b5d610b57610b525f61048e565b6100af565b916100af565b14610c5257610b73610b6e82610a5b565b610a67565b6020637a3979dc918590610b9c8a94610ba78a8990610b90610092565b98899788968796610a73565b865260048601610add565b03915afa8015610c4d57610bc3915f91610c1f575b5015610134565b610bf657610bdd610be591610bd8600161049a565b6111a4565b919015610134565b15610b42575050505090505b600190565b90610c1b919293610c05610092565b94859463079a132560e41b865260048601610add565b0390fd5b610c40915060203d8111610c46575b610c388183610815565b810190610a88565b5f610bbc565b503d610c2e565b610b13565b505050509050610bf1565b5f90565b5f1c90565b60018060a01b031690565b610c7d610c8291610c61565b610c66565b90565b610c8f9054610c71565b90565b610c9a610c5d565b50610ca45f610c85565b90565b610cb890610cb3610d17565b610cba565b565b80610cd5610ccf610cca5f61048e565b6100af565b916100af565b14610ce557610ce39061120b565b565b610d08610cf15f61048e565b5f918291631e4fbdf760e01b8352600483016103d8565b0390fd5b610d1590610ca7565b565b610d1f610c92565b610d38610d32610d2d61126a565b6100af565b916100af565b03610d3f57565b610d61610d4a61126a565b5f91829163118cdaa760e01b8352600483016103d8565b0390fd5b90610d6f90610550565b5f5260205260405f2090565b5f90565b610d8890610134565b90565b90610d9590610d7f565b5f5260205260405f2090565b610daa5f61048e565b90565b600190565b610dba610665565b50610de2610ddd610dcf600184018590610d65565b610dd7610d7b565b90610d8b565b610c85565b610dfb610df5610df0610da1565b6100af565b916100af565b1480610e5f575b5f14610e5857610e42610e3c610e37610e296001610e489501610e23610da1565b90610d65565b610e31610dad565b90610d8b565b610c85565b926100af565b916100af565b145f14610e5457600190565b5f90565b5050600190565b50610e87610e82610e74600184018590610d65565b610e7c610dad565b90610d8b565b610c85565b610ea0610e9a610e95610da1565b6100af565b916100af565b14610e02565b610eaf5f61048e565b90565b1b90565b91906008610ed6910291610ed060018060a01b0384610eb2565b92610eb2565b9181191691161790565b90565b9190610ef9610ef4610f0193610550565b610ee0565b908354610eb6565b9055565b610f1791610f11610c5d565b91610ee3565b565b90565b610f30610f2b610f3592610f19565b61046f565b6108b3565b90565b90565b610f47610f4c91610c61565b610f38565b90565b610f599054610f3b565b90565b610f6b610f71919392936108b3565b926108b3565b8203918211610f7c57565b6108d2565b5f1b90565b90610f925f1991610f81565b9181191691161790565b610fb0610fab610fb5926108b3565b61046f565b6108b3565b90565b90565b90610fd0610fcb610fd792610f9c565b610fb8565b8254610f86565b9055565b610fe3610c5d565b5081610ffe610ff8610ff3610ea6565b6100af565b916100af565b1480156110f5575b6110e7578061106f6110e492611039611034611026600186018890610d65565b61102e610d7b565b90610d8b565b610c85565b61106061105b61104d600187018990610d65565b611055610dad565b90610d8b565b610c85565b90611069610dad565b92611277565b6110975f611092611084600185018790610d65565b61108c610d7b565b90610d8b565b610f05565b6110bf5f6110ba6110ac600185018790610d65565b6110b4610dad565b90610d8b565b610f05565b6110de5f6110cd6001610f1c565b9201916110d983610f4f565b610f5c565b90610fbb565b90565b50506110f25f61048e565b90565b5061110a611104828490610db2565b15610134565b611006565b9061112c9161111c610665565b5090611126610d7b565b916112c2565b90565b9061114c9161113c610665565b5090611146610dad565b916112c2565b90565b5f90565b5f6111679161116061114f565b5001610f4f565b90565b61119c61118e60016111a19361117e610c5d565b5001611188610da1565b90610d65565b611196610dad565b90610d8b565b610c85565b90565b906111ca916111b1610665565b506111ba610c5d565b50906111c4610dad565b916112e4565b91909190565b906111e160018060a01b0391610f81565b9181191691161790565b906112006111fb61120792610550565b610ee0565b82546111d0565b9055565b6112145f610c85565b61121e825f6111eb565b9061125261124c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610550565b91610550565b9161125b610092565b80611265816100fc565b0390a3565b611272610c5d565b503390565b91926112b66112bb9260016112c0966112af836112aa61129a858b018590610d65565b6112a48915610134565b90610d8b565b6111eb565b9501610d65565b610d8b565b6111eb565b565b916112e1926112cf610665565b50916112d9610da1565b909192611385565b90565b916112ed610665565b506112f6610c5d565b5061130b611305848490610db2565b15610134565b5f14611322575050505f9061131f5f61048e565b90565b61133561133a92600161133f9501610d65565b610d8b565b610c85565b908161135a61135461134f610da1565b6100af565b916100af565b14159190565b61136f611375919392936108b3565b926108b3565b820180921161138057565b6108d2565b9161138e610665565b506113a361139d848390610db2565b15610134565b80611420575b6113b557505050505f90565b61141b936113f6926113ec6113e06113db6113d4600189018590610d65565b8590610d8b565b610c85565b91869085908592611277565b8492909192611277565b6114155f6114046001610f1c565b92019161141083610f4f565b611360565b90610fbb565b600190565b5061142c838390610db2565b6113a956
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04UV[a\0\x1D_5a\0\x8CV[\x80c\x04\xF3\x86\xF4\x14a\0\x87W\x80c\x05.\xEF\xD1\x14a\0\x82W\x80c\x1BB\xC7\x11\x14a\0}W\x80cqP\x18\xA6\x14a\0xW\x80cz9y\xDC\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\"V[a\x03\xEDV[a\x03\x92V[a\x02\xA0V[a\x02kV[a\x01\x89V[a\x01\x01V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB8\x90a\0\xA4V[\x90V[a\0\xC4\x81a\0\xAFV[\x03a\0\xCBWV[_\x80\xFD[\x90P5\x90a\0\xDC\x82a\0\xBBV[V[\x90` \x82\x82\x03\x12a\0\xF7Wa\0\xF4\x91_\x01a\0\xCFV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01/Wa\x01\x19a\x01\x146`\x04a\0\xDEV[a\x06FV[a\x01!a\0\x92V[\x80a\x01+\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01B\x81a\x014V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x84W\x80a\x01xa\x01\x81\x92_\x86\x01a\0\xCFV[\x93` \x01a\x01MV[\x90V[a\0\x9CV[4a\x01\xB8Wa\x01\xA2a\x01\x9C6`\x04a\x01\\V[\x90a\x07\xE6V[a\x01\xAAa\0\x92V[\x80a\x01\xB4\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01\xC7WV[a\0\x9CV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\xE8\x90a\0\xAFV[\x90RV[\x90a\x01\xF9\x81` \x93a\x01\xDFV[\x01\x90V[` \x01\x90V[\x90a\x02 a\x02\x1Aa\x02\x13\x84a\x01\xCCV[\x80\x93a\x01\xD0V[\x92a\x01\xD9V[\x90_[\x81\x81\x10a\x020WPPP\x90V[\x90\x91\x92a\x02Ia\x02C`\x01\x92\x86Qa\x01\xECV[\x94a\x01\xFDV[\x91\x01\x91\x90\x91a\x02#V[a\x02h\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\x03V[\x90V[4a\x02\x9BWa\x02{6`\x04a\x01\xBDV[a\x02\x97a\x02\x86a\tDV[a\x02\x8Ea\0\x92V[\x91\x82\x91\x82a\x02SV[\x03\x90\xF3[a\0\x98V[4a\x02\xCEWa\x02\xB06`\x04a\x01\xBDV[a\x02\xB8a\nEV[a\x02\xC0a\0\x92V[\x80a\x02\xCA\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x19W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x14W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0FWV[a\x02\xDBV[a\x02\xD7V[a\x02\xD3V[\x91``\x83\x83\x03\x12a\x03kWa\x035\x82_\x85\x01a\0\xCFV[\x92a\x03C\x83` \x83\x01a\0\xCFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03fWa\x03b\x92\x01a\x02\xDFV[\x90\x91V[a\0\xA0V[a\0\x9CV[a\x03y\x90a\x014V[\x90RV[\x91\x90a\x03\x90\x90_` \x85\x01\x94\x01\x90a\x03pV[V[4a\x03\xC6Wa\x03\xC2a\x03\xB1a\x03\xA86`\x04a\x03\x1EV[\x92\x91\x90\x91a\x0B#V[a\x03\xB9a\0\x92V[\x91\x82\x91\x82a\x03}V[\x03\x90\xF3[a\0\x98V[a\x03\xD4\x90a\0\xAFV[\x90RV[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03\xCBV[V[4a\x04\x1DWa\x03\xFD6`\x04a\x01\xBDV[a\x04\x19a\x04\x08a\x0C\x92V[a\x04\x10a\0\x92V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\0\x98V[4a\x04PWa\x04:a\x0456`\x04a\0\xDEV[a\r\x0CV[a\x04Ba\0\x92V[\x80a\x04L\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x04j\x90a\x04ea\r\x17V[a\x05\\V[V[\x90V[\x90V[a\x04\x86a\x04\x81a\x04\x8B\x92a\x04lV[a\x04oV[a\0\xA4V[\x90V[a\x04\x97\x90a\x04rV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDA`\x13` \x92a\x04\x9DV[a\x04\xE3\x81a\x04\xA6V[\x01\x90V[a\x04\xFC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xCDV[\x90V[\x15a\x05\x06WV[a\x05\x0Ea\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05$`\x04\x82\x01a\x04\xE7V[\x03\x90\xFD[a\x05<a\x057a\x05A\x92a\0\xA4V[a\x04oV[a\0\xA4V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x05DV[\x90V[\x80a\x05wa\x05qa\x05l_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x06*Wa\x05\x99a\x05\x93`\x01a\x05\x8E\x84\x91a\x04\x9AV[a\r\xB2V[\x15a\x014V[a\x06\x0EWa\x05\xCCa\x05\xB4`\x01a\x05\xAF\x84\x91a\x04\x9AV[a\x0F\xDBV[a\x05\xC6a\x05\xC0\x84a\0\xAFV[\x91a\0\xAFV[\x14a\x04\xFFV[a\x05\xF6\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x05PV[\x90a\x05\xFFa\0\x92V[\x80a\x06\t\x81a\0\xFCV[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x06&`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x06B`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x06O\x90a\x04YV[V[\x90a\x06c\x91a\x06^a\r\x17V[a\x06\xEBV[V[_\x90V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x9D`\x11` \x92a\x04\x9DV[a\x06\xA6\x81a\x06iV[\x01\x90V[a\x06\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x90V[\x90V[\x15a\x06\xC9WV[a\x06\xD1a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xE7`\x04\x82\x01a\x06\xAAV[\x03\x90\xFD[\x90\x81a\x07\x07a\x07\x01a\x06\xFC_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x07\xCAWa\x07 `\x01a\x07\x1B\x84\x91a\x04\x9AV[a\r\xB2V[a\x07\xAEWa\x07,a\x06eV[P_\x14a\x07\x92Wa\x07Pa\x07J`\x01a\x07E\x84\x91a\x04\x9AV[a\x11/V[[a\x06\xC2V[a\x07z\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x05PV[\x90a\x07\x83a\0\x92V[\x80a\x07\x8D\x81a\0\xFCV[\x03\x90\xA2V[a\x07Pa\x07\xA9`\x01a\x07\xA4\x84\x91a\x04\x9AV[a\x11\x0FV[a\x07KV[_cQl5\x0F`\xE1\x1B\x81R\x80a\x07\xC6`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07\xE2`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[\x90a\x07\xF0\x91a\x06QV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\x1F\x90a\x07\xF7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x089W`@RV[a\x08\x01V[\x90a\x08Qa\x08Ja\0\x92V[\x92\x83a\x08\x15V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08kW` \x80\x91\x02\x01\x90V[a\x08\x01V[\x90a\x08\x82a\x08}\x83a\x08SV[a\x08>V[\x91\x82RV[6\x907V[\x90a\x08\xB1a\x08\x99\x83a\x08pV[\x92` \x80a\x08\xA7\x86\x93a\x08SV[\x92\x01\x91\x03\x90a\x08\x87V[V[\x90V[a\x08\xCAa\x08\xC5a\x08\xCF\x92a\x04lV[a\x04oV[a\x08\xB3V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08\xEF\x90a\x08\xB3V[_\x19\x81\x14a\x08\xFDW`\x01\x01\x90V[a\x08\xD2V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t \x82a\x01\xCCV[\x81\x10\x15a\t1W` \x80\x91\x02\x01\x01\x90V[a\t\x02V[\x90a\t@\x90a\0\xAFV[\x90RV[a\tLa\x07\xF2V[Pa\t_a\tZ`\x01a\x04\x9AV[a\x11SV[a\th\x81a\x08\x8CV[a\tza\tu`\x01a\x04\x9AV[a\x11jV[a\t\x83_a\x08\xB6V[\x90[\x81a\t\x98a\t\x92\x86a\x08\xB3V[\x91a\x08\xB3V[\x10\x80a\t\xFDW[\x15a\t\xF4Wa\t\xD0\x81a\t\xC1a\t\xD8\x93a\t\xBC\x87\x91\x87\x90\x92a\t\x16V[a\t6V[a\t\xCB`\x01a\x04\x9AV[a\x11\xA4V[\x91\x90\x15a\x014V[a\t\xECWa\t\xE6\x90\x91a\x08\xE6V[\x90a\t\x85V[PP\x90P[\x90V[PP\x90Pa\t\xF1V[P\x80a\n\x19a\n\x13a\n\x0E_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14\x15a\t\x9FV[a\n(a\r\x17V[a\n0a\n2V[V[a\nCa\n>_a\x04\x8EV[a\x12\x0BV[V[a\nMa\n V[V[a\nX\x90a\x05(V[\x90V[a\nd\x90a\nOV[\x90V[a\np\x90a\x05DV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\n\x86\x82a\x019V[V[\x90` \x82\x82\x03\x12a\n\xA1Wa\n\x9E\x91_\x01a\nyV[\x90V[a\0\x9CV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\xD4\x81a\n\xCD\x81a\n\xD9\x95a\n\xA6V[\x80\x95a\n\xAFV[a\x07\xF7V[\x01\x90V[a\x0B\x03a\x0B\x10\x95\x93\x94\x92\x94a\n\xF9``\x84\x01\x96_\x85\x01\x90a\x03\xCBV[` \x83\x01\x90a\x03\xCBV[`@\x81\x85\x03\x91\x01Ra\n\xBAV[\x90V[a\x0B\x1Ba\0\x92V[=_\x82>=\x90\xFD[\x90\x93\x92a\x0B.a\x06eV[Pa\x0BAa\x0B<`\x01a\x04\x9AV[a\x11jV[[\x80a\x0B]a\x0BWa\x0BR_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0CRWa\x0Bsa\x0Bn\x82a\n[V[a\ngV[` cz9y\xDC\x91\x85\x90a\x0B\x9C\x8A\x94a\x0B\xA7\x8A\x89\x90a\x0B\x90a\0\x92V[\x98\x89\x97\x88\x96\x87\x96a\nsV[\x86R`\x04\x86\x01a\n\xDDV[\x03\x91Z\xFA\x80\x15a\x0CMWa\x0B\xC3\x91_\x91a\x0C\x1FW[P\x15a\x014V[a\x0B\xF6Wa\x0B\xDDa\x0B\xE5\x91a\x0B\xD8`\x01a\x04\x9AV[a\x11\xA4V[\x91\x90\x15a\x014V[\x15a\x0BBWPPPP\x90P[`\x01\x90V[\x90a\x0C\x1B\x91\x92\x93a\x0C\x05a\0\x92V[\x94\x85\x94c\x07\x9A\x13%`\xE4\x1B\x86R`\x04\x86\x01a\n\xDDV[\x03\x90\xFD[a\x0C@\x91P` =\x81\x11a\x0CFW[a\x0C8\x81\x83a\x08\x15V[\x81\x01\x90a\n\x88V[_a\x0B\xBCV[P=a\x0C.V[a\x0B\x13V[PPPP\x90Pa\x0B\xF1V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C}a\x0C\x82\x91a\x0CaV[a\x0CfV[\x90V[a\x0C\x8F\x90Ta\x0CqV[\x90V[a\x0C\x9Aa\x0C]V[Pa\x0C\xA4_a\x0C\x85V[\x90V[a\x0C\xB8\x90a\x0C\xB3a\r\x17V[a\x0C\xBAV[V[\x80a\x0C\xD5a\x0C\xCFa\x0C\xCA_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0C\xE5Wa\x0C\xE3\x90a\x12\x0BV[V[a\r\x08a\x0C\xF1_a\x04\x8EV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[a\r\x15\x90a\x0C\xA7V[V[a\r\x1Fa\x0C\x92V[a\r8a\r2a\r-a\x12jV[a\0\xAFV[\x91a\0\xAFV[\x03a\r?WV[a\raa\rJa\x12jV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[\x90a\ro\x90a\x05PV[_R` R`@_ \x90V[_\x90V[a\r\x88\x90a\x014V[\x90V[\x90a\r\x95\x90a\r\x7FV[_R` R`@_ \x90V[a\r\xAA_a\x04\x8EV[\x90V[`\x01\x90V[a\r\xBAa\x06eV[Pa\r\xE2a\r\xDDa\r\xCF`\x01\x84\x01\x85\x90a\reV[a\r\xD7a\r{V[\x90a\r\x8BV[a\x0C\x85V[a\r\xFBa\r\xF5a\r\xF0a\r\xA1V[a\0\xAFV[\x91a\0\xAFV[\x14\x80a\x0E_W[_\x14a\x0EXWa\x0EBa\x0E<a\x0E7a\x0E)`\x01a\x0EH\x95\x01a\x0E#a\r\xA1V[\x90a\reV[a\x0E1a\r\xADV[\x90a\r\x8BV[a\x0C\x85V[\x92a\0\xAFV[\x91a\0\xAFV[\x14_\x14a\x0ETW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x0E\x87a\x0E\x82a\x0Et`\x01\x84\x01\x85\x90a\reV[a\x0E|a\r\xADV[\x90a\r\x8BV[a\x0C\x85V[a\x0E\xA0a\x0E\x9Aa\x0E\x95a\r\xA1V[a\0\xAFV[\x91a\0\xAFV[\x14a\x0E\x02V[a\x0E\xAF_a\x04\x8EV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xD6\x91\x02\x91a\x0E\xD0`\x01\x80`\xA0\x1B\x03\x84a\x0E\xB2V[\x92a\x0E\xB2V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0E\xF9a\x0E\xF4a\x0F\x01\x93a\x05PV[a\x0E\xE0V[\x90\x83Ta\x0E\xB6V[\x90UV[a\x0F\x17\x91a\x0F\x11a\x0C]V[\x91a\x0E\xE3V[V[\x90V[a\x0F0a\x0F+a\x0F5\x92a\x0F\x19V[a\x04oV[a\x08\xB3V[\x90V[\x90V[a\x0FGa\x0FL\x91a\x0CaV[a\x0F8V[\x90V[a\x0FY\x90Ta\x0F;V[\x90V[a\x0Fka\x0Fq\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x03\x91\x82\x11a\x0F|WV[a\x08\xD2V[_\x1B\x90V[\x90a\x0F\x92_\x19\x91a\x0F\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xB0a\x0F\xABa\x0F\xB5\x92a\x08\xB3V[a\x04oV[a\x08\xB3V[\x90V[\x90V[\x90a\x0F\xD0a\x0F\xCBa\x0F\xD7\x92a\x0F\x9CV[a\x0F\xB8V[\x82Ta\x0F\x86V[\x90UV[a\x0F\xE3a\x0C]V[P\x81a\x0F\xFEa\x0F\xF8a\x0F\xF3a\x0E\xA6V[a\0\xAFV[\x91a\0\xAFV[\x14\x80\x15a\x10\xF5W[a\x10\xE7W\x80a\x10oa\x10\xE4\x92a\x109a\x104a\x10&`\x01\x86\x01\x88\x90a\reV[a\x10.a\r{V[\x90a\r\x8BV[a\x0C\x85V[a\x10`a\x10[a\x10M`\x01\x87\x01\x89\x90a\reV[a\x10Ua\r\xADV[\x90a\r\x8BV[a\x0C\x85V[\x90a\x10ia\r\xADV[\x92a\x12wV[a\x10\x97_a\x10\x92a\x10\x84`\x01\x85\x01\x87\x90a\reV[a\x10\x8Ca\r{V[\x90a\r\x8BV[a\x0F\x05V[a\x10\xBF_a\x10\xBAa\x10\xAC`\x01\x85\x01\x87\x90a\reV[a\x10\xB4a\r\xADV[\x90a\r\x8BV[a\x0F\x05V[a\x10\xDE_a\x10\xCD`\x01a\x0F\x1CV[\x92\x01\x91a\x10\xD9\x83a\x0FOV[a\x0F\\V[\x90a\x0F\xBBV[\x90V[PPa\x10\xF2_a\x04\x8EV[\x90V[Pa\x11\na\x11\x04\x82\x84\x90a\r\xB2V[\x15a\x014V[a\x10\x06V[\x90a\x11,\x91a\x11\x1Ca\x06eV[P\x90a\x11&a\r{V[\x91a\x12\xC2V[\x90V[\x90a\x11L\x91a\x11<a\x06eV[P\x90a\x11Fa\r\xADV[\x91a\x12\xC2V[\x90V[_\x90V[_a\x11g\x91a\x11`a\x11OV[P\x01a\x0FOV[\x90V[a\x11\x9Ca\x11\x8E`\x01a\x11\xA1\x93a\x11~a\x0C]V[P\x01a\x11\x88a\r\xA1V[\x90a\reV[a\x11\x96a\r\xADV[\x90a\r\x8BV[a\x0C\x85V[\x90V[\x90a\x11\xCA\x91a\x11\xB1a\x06eV[Pa\x11\xBAa\x0C]V[P\x90a\x11\xC4a\r\xADV[\x91a\x12\xE4V[\x91\x90\x91\x90V[\x90a\x11\xE1`\x01\x80`\xA0\x1B\x03\x91a\x0F\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12\0a\x11\xFBa\x12\x07\x92a\x05PV[a\x0E\xE0V[\x82Ta\x11\xD0V[\x90UV[a\x12\x14_a\x0C\x85V[a\x12\x1E\x82_a\x11\xEBV[\x90a\x12Ra\x12L\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05PV[\x91a\x05PV[\x91a\x12[a\0\x92V[\x80a\x12e\x81a\0\xFCV[\x03\x90\xA3V[a\x12ra\x0C]V[P3\x90V[\x91\x92a\x12\xB6a\x12\xBB\x92`\x01a\x12\xC0\x96a\x12\xAF\x83a\x12\xAAa\x12\x9A\x85\x8B\x01\x85\x90a\reV[a\x12\xA4\x89\x15a\x014V[\x90a\r\x8BV[a\x11\xEBV[\x95\x01a\reV[a\r\x8BV[a\x11\xEBV[V[\x91a\x12\xE1\x92a\x12\xCFa\x06eV[P\x91a\x12\xD9a\r\xA1V[\x90\x91\x92a\x13\x85V[\x90V[\x91a\x12\xEDa\x06eV[Pa\x12\xF6a\x0C]V[Pa\x13\x0Ba\x13\x05\x84\x84\x90a\r\xB2V[\x15a\x014V[_\x14a\x13\"WPPP_\x90a\x13\x1F_a\x04\x8EV[\x90V[a\x135a\x13:\x92`\x01a\x13?\x95\x01a\reV[a\r\x8BV[a\x0C\x85V[\x90\x81a\x13Za\x13Ta\x13Oa\r\xA1V[a\0\xAFV[\x91a\0\xAFV[\x14\x15\x91\x90V[a\x13oa\x13u\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x01\x80\x92\x11a\x13\x80WV[a\x08\xD2V[\x91a\x13\x8Ea\x06eV[Pa\x13\xA3a\x13\x9D\x84\x83\x90a\r\xB2V[\x15a\x014V[\x80a\x14 W[a\x13\xB5WPPPP_\x90V[a\x14\x1B\x93a\x13\xF6\x92a\x13\xECa\x13\xE0a\x13\xDBa\x13\xD4`\x01\x89\x01\x85\x90a\reV[\x85\x90a\r\x8BV[a\x0C\x85V[\x91\x86\x90\x85\x90\x85\x92a\x12wV[\x84\x92\x90\x91\x92a\x12wV[a\x14\x15_a\x14\x04`\x01a\x0F\x1CV[\x92\x01\x91a\x14\x10\x83a\x0FOV[a\x13`V[\x90a\x0F\xBBV[`\x01\x90V[Pa\x14,\x83\x83\x90a\r\xB2V[a\x13\xA9V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AndPermissionCheckFailed(address,address,bytes)` and selector `0x79a13250`.
```solidity
error AndPermissionCheckFailed(address requireAddress, address msgSender, bytes data);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AndPermissionCheckFailed {
        #[allow(missing_docs)]
        pub requireAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub msgSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AndPermissionCheckFailed>
        for UnderlyingRustTuple<'_> {
            fn from(value: AndPermissionCheckFailed) -> Self {
                (value.requireAddress, value.msgSender, value.data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AndPermissionCheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    requireAddress: tuple.0,
                    msgSender: tuple.1,
                    data: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AndPermissionCheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AndPermissionCheckFailed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [121u8, 161u8, 50u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.requireAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PermissionCheckAdded(address)` and selector `0x62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e7`.
```solidity
event PermissionCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PermissionCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8, 16u8, 28u8, 204u8, 193u8, 134u8, 77u8, 52u8, 146u8, 41u8, 0u8,
                112u8, 244u8, 219u8, 241u8, 104u8, 121u8, 222u8, 120u8, 97u8, 172u8,
                181u8, 220u8, 184u8, 24u8, 11u8, 85u8, 210u8, 237u8, 124u8, 215u8, 231u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PermissionCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PermissionCheckRemoved(address)` and selector `0xb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be`.
```solidity
event PermissionCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PermissionCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                181u8, 214u8, 140u8, 164u8, 99u8, 114u8, 187u8, 230u8, 236u8, 19u8,
                141u8, 61u8, 4u8, 35u8, 96u8, 130u8, 105u8, 179u8, 17u8, 116u8, 150u8,
                164u8, 98u8, 104u8, 248u8, 96u8, 128u8, 205u8, 188u8, 190u8, 169u8, 190u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PermissionCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addPermissionCheck(address,bool)` and selector `0x052eefd1`.
```solidity
function addPermissionCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addPermissionCheck(address,bool)`](addPermissionCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addPermissionCheckReturn {
            fn _tokenize(
                &self,
            ) -> <addPermissionCheckCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addPermissionCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addPermissionCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addPermissionCheck(address,bool)";
            const SELECTOR: [u8; 4] = [5u8, 46u8, 239u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addPermissionCheckReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAllPermissionChecks()` and selector `0x1b42c711`.
```solidity
function getAllPermissionChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAllPermissionChecks()`](getAllPermissionChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllPermissionChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllPermissionChecks()";
            const SELECTOR: [u8; 4] = [27u8, 66u8, 199u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAllPermissionChecksReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAllPermissionChecksReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address msgSender, address txOrigin, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub msgSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub txOrigin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.msgSender, value.txOrigin, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        msgSender: tuple.0,
                        txOrigin: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txOrigin,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isAllowedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isAllowedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removePermissionCheck(address)` and selector `0x04f386f4`.
```solidity
function removePermissionCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePermissionCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removePermissionCheck(address)`](removePermissionCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePermissionCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePermissionCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removePermissionCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removePermissionCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePermissionCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removePermissionCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removePermissionCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removePermissionCheckReturn {
            fn _tokenize(
                &self,
            ) -> <removePermissionCheckCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removePermissionCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removePermissionCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removePermissionCheck(address)";
            const SELECTOR: [u8; 4] = [4u8, 243u8, 134u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removePermissionCheckReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireAndModule`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum RequireAndModuleCalls {
        #[allow(missing_docs)]
        addPermissionCheck(addPermissionCheckCall),
        #[allow(missing_docs)]
        getAllPermissionChecks(getAllPermissionChecksCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        removePermissionCheck(removePermissionCheckCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl RequireAndModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 243u8, 134u8, 244u8],
            [5u8, 46u8, 239u8, 209u8],
            [27u8, 66u8, 199u8, 17u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [141u8, 165u8, 203u8, 91u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAndModuleCalls {
        const NAME: &'static str = "RequireAndModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addPermissionCheck(_) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllPermissionChecks(_) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removePermissionCheck(_) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireAndModuleCalls>] = &[
                {
                    fn removePermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleCalls::removePermissionCheck)
                    }
                    removePermissionCheck
                },
                {
                    fn addPermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleCalls::addPermissionCheck)
                    }
                    addPermissionCheck
                },
                {
                    fn getAllPermissionChecks(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleCalls::getAllPermissionChecks)
                    }
                    getAllPermissionChecks
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireAndModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireAndModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireAndModuleCalls>] = &[
                {
                    fn removePermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::removePermissionCheck)
                    }
                    removePermissionCheck
                },
                {
                    fn addPermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::addPermissionCheck)
                    }
                    addPermissionCheck
                },
                {
                    fn getAllPermissionChecks(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::getAllPermissionChecks)
                    }
                    getAllPermissionChecks
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addPermissionCheck(inner) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllPermissionChecks(inner) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removePermissionCheck(inner) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addPermissionCheck(inner) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllPermissionChecks(inner) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removePermissionCheck(inner) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAndModule`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RequireAndModuleErrors {
        #[allow(missing_docs)]
        AddressAlreadyExists(AddressAlreadyExists),
        #[allow(missing_docs)]
        AddressDoesNotExist(AddressDoesNotExist),
        #[allow(missing_docs)]
        AndPermissionCheckFailed(AndPermissionCheckFailed),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl RequireAndModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [121u8, 161u8, 50u8, 80u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAndModuleErrors {
        const NAME: &'static str = "RequireAndModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AndPermissionCheckFailed(_) => {
                    <AndPermissionCheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireAndModuleErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn AndPermissionCheckFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <AndPermissionCheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleErrors::AndPermissionCheckFailed)
                    }
                    AndPermissionCheckFailed
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireAndModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireAndModuleErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn AndPermissionCheckFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <AndPermissionCheckFailed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleErrors::AndPermissionCheckFailed)
                    }
                    AndPermissionCheckFailed
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireAndModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireAndModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AndPermissionCheckFailed(inner) => {
                    <AndPermissionCheckFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AndPermissionCheckFailed(inner) => {
                    <AndPermissionCheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAndModule`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RequireAndModuleEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        PermissionCheckAdded(PermissionCheckAdded),
        #[allow(missing_docs)]
        PermissionCheckRemoved(PermissionCheckRemoved),
    }
    #[automatically_derived]
    impl RequireAndModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                98u8, 16u8, 28u8, 204u8, 193u8, 134u8, 77u8, 52u8, 146u8, 41u8, 0u8,
                112u8, 244u8, 219u8, 241u8, 104u8, 121u8, 222u8, 120u8, 97u8, 172u8,
                181u8, 220u8, 184u8, 24u8, 11u8, 85u8, 210u8, 237u8, 124u8, 215u8, 231u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                181u8, 214u8, 140u8, 164u8, 99u8, 114u8, 187u8, 230u8, 236u8, 19u8,
                141u8, 61u8, 4u8, 35u8, 96u8, 130u8, 105u8, 179u8, 17u8, 116u8, 150u8,
                164u8, 98u8, 104u8, 248u8, 96u8, 128u8, 205u8, 188u8, 190u8, 169u8, 190u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireAndModuleEvents {
        const NAME: &'static str = "RequireAndModuleEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <PermissionCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PermissionCheckAdded)
                }
                Some(
                    <PermissionCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PermissionCheckRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireAndModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireAndModule`](self) contract instance.

See the [wrapper's documentation](`RequireAndModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireAndModuleInstance<P, N> {
        RequireAndModuleInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireAndModuleInstance<P, N>>,
    > {
        RequireAndModuleInstance::<P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        RequireAndModuleInstance::<P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireAndModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireAndModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireAndModuleInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for RequireAndModuleInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireAndModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireAndModuleInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`RequireAndModule`](self) contract instance.

See the [wrapper's documentation](`RequireAndModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireAndModuleInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> RequireAndModuleInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireAndModuleInstance<P, N> {
            RequireAndModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireAndModuleInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addPermissionCheck`] function.
        pub fn addPermissionCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<&P, addPermissionCheckCall, N> {
            self.call_builder(
                &addPermissionCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`getAllPermissionChecks`] function.
        pub fn getAllPermissionChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getAllPermissionChecksCall, N> {
            self.call_builder(&getAllPermissionChecksCall)
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            msgSender: alloy::sol_types::private::Address,
            txOrigin: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    msgSender,
                    txOrigin,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`removePermissionCheck`] function.
        pub fn removePermissionCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, removePermissionCheckCall, N> {
            self.call_builder(
                &removePermissionCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireAndModuleInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`PermissionCheckAdded`] event.
        pub fn PermissionCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<&P, PermissionCheckAdded, N> {
            self.event_filter::<PermissionCheckAdded>()
        }
        ///Creates a new event filter for the [`PermissionCheckRemoved`] event.
        pub fn PermissionCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<&P, PermissionCheckRemoved, N> {
            self.event_filter::<PermissionCheckRemoved>()
        }
    }
}
