/**

Generated by the following Solidity interface...
```solidity
interface RequireCompositeModuleFactory {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error Create2EmptyBytecode();
    error EnforcedPause();
    error ExpectedPause();
    error FailedDeployment();
    error InsufficientBalance(uint256 balance, uint256 needed);
    error ZeroAddress();

    event Paused(address account);
    event RequireCompositeModuleCreated(address indexed module, address indexed admin);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event Unpaused(address account);

    constructor(address admin);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function computeModuleAddress(address admin, bytes32 salt) external view returns (address);
    function createRequireCompositeModule(address admin, bytes32 salt) external returns (address module);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function pause() external;
    function paused() external view returns (bool);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function unpause() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "computeModuleAddress",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createRequireCompositeModule",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "module",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Paused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequireCompositeModuleCreated",
    "inputs": [
      {
        "name": "module",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpaused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "Create2EmptyBytecode",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EnforcedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExpectedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedDeployment",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientBalance",
    "inputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireCompositeModuleFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b61019c565b610021610034565b6130716103e0823961307190f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126134518038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b90565b5f1b90565b61016461015f61016992610115565b61014b565b610148565b90565b6101755f610150565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6101a4610251565b806101bf6101b96101b45f610137565b6100a7565b916100a7565b146101eb576101e8906101da6101d361016c565b82906102ce565b506101e3610178565b6102ce565b50565b5f63d92e233d60e01b81528061020360048201610143565b0390fd5b9061021360ff9161014b565b9181191691161790565b151590565b61022b9061021d565b90565b90565b9061024661024161024d92610222565b61022e565b8254610207565b9055565b61025c5f6001610231565b565b5f90565b61026b90610148565b90565b9061027890610262565b5f5260205260405f2090565b61029861029361029d9261009c565b610118565b61009c565b90565b6102a990610284565b90565b6102b5906102a0565b90565b906102c2906102ac565b5f5260205260405f2090565b6102d661025e565b506102eb6102e58284906103a5565b1561021d565b5f1461037357610312600161030d5f61030581869061026e565b0185906102b8565b610231565b9061031b6103d2565b9061035861035261034c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610262565b926102ac565b926102ac565b92610361610034565b8061036b81610143565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61039061039591610379565b61037e565b90565b6103a29054610384565b90565b6103cb915f6103c06103c6936103b961025e565b508261026e565b016102b8565b610398565b90565b5f90565b6103da6103ce565b50339056fe60806040526004361015610013575b6105bb565b61001d5f356100ec565b806301ffc9a7146100e7578063248a9ca3146100e25780632f2ff15d146100dd57806336568abe146100d85780633f4ba83a146100d35780635681706b146100ce5780635c975abb146100c957806376a6840b146100c45780638456cb59146100bf57806391d14854146100ba578063a217fddf146100b5578063d547741f146100b05763ec87621c0361000e57610586565b610523565b6104ee565b61047d565b61044a565b610414565b6103df565b6103a9565b610327565b6102e4565b6102b0565b61020f565b610174565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61011581610100565b0361011c57565b5f80fd5b9050359061012d8261010c565b565b9060208282031261014857610145915f01610120565b90565b6100fc565b151590565b61015b9061014d565b9052565b9190610172905f60208501940190610152565b565b346101a4576101a061018f61018a36600461012f565b6105c3565b6101976100f2565b9182918261015f565b0390f35b6100f8565b90565b6101b5816101a9565b036101bc57565b5f80fd5b905035906101cd826101ac565b565b906020828203126101e8576101e5915f016101c0565b90565b6100fc565b6101f6906101a9565b9052565b919061020d905f602085019401906101ed565b565b3461023f5761023b61022a6102253660046101cf565b610652565b6102326100f2565b918291826101fa565b0390f35b6100f8565b60018060a01b031690565b61025890610244565b90565b6102648161024f565b0361026b57565b5f80fd5b9050359061027c8261025b565b565b91906040838203126102a6578061029a6102a3925f86016101c0565b9360200161026f565b90565b6100fc565b5f0190565b346102df576102c96102c336600461027e565b9061069d565b6102d16100f2565b806102db816102ab565b0390f35b6100f8565b34610313576102fd6102f736600461027e565b906106a9565b6103056100f2565b8061030f816102ab565b0390f35b6100f8565b5f91031261032257565b6100fc565b3461035557610337366004610318565b61033f610715565b6103476100f2565b80610351816102ab565b0390f35b6100f8565b9190604083820312610382578061037661037f925f860161026f565b936020016101c0565b90565b6100fc565b6103909061024f565b9052565b91906103a7905f60208501940190610387565b565b346103da576103d66103c56103bf36600461035a565b906107d9565b6103cd6100f2565b91829182610394565b0390f35b6100f8565b3461040f576103ef366004610318565b61040b6103fa610898565b6104026100f2565b9182918261015f565b0390f35b6100f8565b346104455761044161043061042a36600461035a565b90610a54565b6104386100f2565b91829182610394565b0390f35b6100f8565b346104785761045a366004610318565b610462610a8d565b61046a6100f2565b80610474816102ab565b0390f35b6100f8565b346104ae576104aa61049961049336600461027e565b90610aad565b6104a16100f2565b9182918261015f565b0390f35b6100f8565b90565b5f1b90565b6104cf6104ca6104d4926104b3565b6104b6565b6101a9565b90565b6104e05f6104bb565b90565b6104eb6104d7565b90565b3461051e576104fe366004610318565b61051a6105096104e3565b6105116100f2565b918291826101fa565b0390f35b6100f8565b346105525761053c61053636600461027e565b90610b00565b6105446100f2565b8061054e816102ab565b0390f35b6100f8565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610583610557565b90565b346105b657610596366004610318565b6105b26105a161057b565b6105a96100f2565b918291826101fa565b0390f35b6100f8565b5f80fd5b5f90565b6105cb6105bf565b50806105e66105e0637965db0b60e01b610100565b91610100565b149081156105f3575b5090565b6105fd9150610b0c565b5f6105ef565b5f90565b610610906101a9565b90565b9061061d90610607565b5f5260205260405f2090565b5f1c90565b90565b61063d61064291610629565b61062e565b90565b61064f9054610631565b90565b600161066a61067092610663610603565b505f610613565b01610645565b90565b9061068e9161068961068482610652565b610b32565b610690565b565b9061069a91610b8b565b50565b906106a791610673565b565b90806106c46106be6106b9610c36565b61024f565b9161024f565b036106d5576106d291610c43565b50565b5f63334bd91960e11b8152806106ed600482016102ab565b0390fd5b6107016106fc6104d7565b610b32565b61070961070b565b565b610713610d44565b565b61071d6106f1565b565b5f90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061074b90610723565b810190811067ffffffffffffffff82111761076557604052565b61072d565b9061077d6107766100f2565b9283610741565b565b5190565b905090565b90825f9392825e0152565b6107b86107af926020926107a68161077f565b94858093610783565b93849101610788565b0190565b6107ca906107d09392610793565b90610793565b90565b60200190565b9061082061085561086e936107ec61071f565b5061082f612082916108006020840161076a565b92808452610fef60208501396108146100f2565b94859160208301610394565b60208201810382520384610741565b61084661083a6100f2565b938492602084016107bc565b60208201810382520382610741565b6108676108618261077f565b916107d3565b2090610d5a565b90565b60ff1690565b61088361088891610629565b610871565b90565b6108959054610877565b90565b6108a06105bf565b506108ab600161088b565b90565b906108c192916108bc610d7b565b610942565b90565b90565b6108db6108d66108e0926104b3565b6108c4565b610244565b90565b6108ec906108c7565b90565b90565b61090661090161090b926104b3565b6108c4565b6108ef565b90565b61092261091d61092792610244565b6108c4565b610244565b90565b6109339061090e565b90565b61093f9061092a565b90565b919091508161096161095b6109565f6108e3565b61024f565b9161024f565b14610a38576109e9906109a36109d861208261097f6020820161076a565b90808252610fef60208301396109b2866109976100f2565b94859160208301610394565b60208201810382520384610741565b6109c96109bd6100f2565b938492602084016107bc565b60208201810382520382610741565b6109e45f9291926108f2565b610dd5565b908190610a1f610a197f1da049b3a4edbc0803adcb4308ec858bb7fbd79e62a31c7153a1a11273ed57e593610936565b91610936565b91610a286100f2565b80610a32816102ab565b0390a390565b5f63d92e233d60e01b815280610a50600482016102ab565b0390fd5b90610a6691610a6161071f565b6108ae565b90565b610a79610a746104d7565b610b32565b610a81610a83565b565b610a8b610f22565b565b610a95610a69565b565b90610aa190610936565b5f5260205260405f2090565b610ad3915f610ac8610ace93610ac16105bf565b5082610613565b01610a97565b61088b565b90565b90610af191610aec610ae782610652565b610b32565b610af3565b565b90610afd91610c43565b50565b90610b0a91610ad6565b565b610b146105bf565b50610b2e610b286301ffc9a760e01b610100565b91610100565b1490565b610b4490610b3e610c36565b90610f4f565b565b90610b5260ff916104b6565b9181191691161790565b610b659061014d565b90565b90565b90610b80610b7b610b8792610b5c565b610b68565b8254610b46565b9055565b610b936105bf565b50610ba8610ba2828490610aad565b1561014d565b5f14610c3057610bcf6001610bca5f610bc2818690610613565b018590610a97565b610b6b565b90610bd8610c36565b90610c15610c0f610c097f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610607565b92610936565b92610936565b92610c1e6100f2565b80610c28816102ab565b0390a4600190565b50505f90565b610c3e61071f565b503390565b610c4b6105bf565b50610c57818390610aad565b5f14610cde57610c7d5f610c785f610c70818690610613565b018590610a97565b610b6b565b90610c86610c36565b90610cc3610cbd610cb77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610607565b92610936565b92610936565b92610ccc6100f2565b80610cd6816102ab565b0390a4600190565b50505f90565b610cec610f8a565b610cf4610cf6565b565b610d015f6001610b6b565b610d09610c36565b610d3f7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa91610d366100f2565b91829182610394565b0390a1565b610d4c610ce4565b565b610d579061092a565b90565b90610d7891610d6761071f565b5090610d7230610d4e565b91610fbd565b90565b610d83610898565b610d8957565b5f63d93c066560e01b815280610da1600482016102ab565b0390fd5b610dae906108ef565b9052565b916020610dd3929493610dcc60408201965f830190610da5565b0190610da5565b565b919091610de061071f565b50610dea30610d4e565b31610dfd610df7836108ef565b916108ef565b10610e9a57610e0b8261077f565b610e1d610e175f6108f2565b916108ef565b14610e7e5760208251920190f5903d1519821516610e735781610e50610e4a610e455f6108e3565b61024f565b9161024f565b14610e5757565b5f63b06ebf3d60e01b815280610e6f600482016102ab565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b815280610e96600482016102ab565b0390fd5b610ea330610d4e565b31610ebe5f92839263cf47918160e01b845260048401610db2565b0390fd5b610eca610d7b565b610ed2610ed4565b565b610edf600180610b6b565b610ee7610c36565b610f1d7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610f146100f2565b91829182610394565b0390a1565b610f2a610ec2565b565b916020610f4d929493610f4660408201965f830190610387565b01906101ed565b565b90610f64610f5e838390610aad565b1561014d565b610f6c575050565b610f865f92839263e2517d3f60e01b845260048401610f2c565b0390fd5b610f9b610f95610898565b1561014d565b610fa157565b5f638dfc202b60e01b815280610fb9600482016102ab565b0390fd5b91600b92610fc961071f565b50604051926040840152602083015281520160ff8153605560018060a01b039120169056fe60806040523461002f576100196100146100f4565b610115565b610021610034565b611da86102da8239611da890f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126120828038038061010781610083565b9283398101906100d6565b90565b61011e90610120565b565b6101299061017b565b565b90565b90565b61014561014061014a9261012b565b61012e565b61009c565b90565b61015690610131565b90565b610162906100a7565b9052565b9190610179905f60208501940190610159565b565b8061019661019061018b5f61014d565b6100a7565b916100a7565b146101a6576101a49061027a565b565b6101c96101b25f61014d565b5f918291631e4fbdf760e01b835260048301610166565b0390fd5b5f1c90565b60018060a01b031690565b6101e96101ee916101cd565b6101d2565b90565b6101fb90546101dd565b90565b5f1b90565b9061021460018060a01b03916101fe565b9181191691161790565b61023261022d6102379261009c565b61012e565b61009c565b90565b6102439061021e565b90565b61024f9061023a565b90565b90565b9061026a61026561027192610246565b610252565b8254610203565b9055565b5f0190565b6102835f6101f1565b61028d825f610255565b906102c16102bb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610246565b91610246565b916102ca610034565b806102d481610275565b0390a356fe60806040526004361015610013575b610791565b61001d5f356100cc565b806304f386f4146100c7578063052eefd1146100c25780630838bbd4146100bd5780631b42c711146100b857806321284f7e146100b3578063715018a6146100ae5780637a3979dc146100a95780638da5cb5b146100a4578063a213fd221461009f578063b1c61e001461009a5763f2fde38b0361000e5761075e565b61072a565b6106ba565b6105d3565b610578565b610486565b610451565b610329565b610247565b6101c9565b610141565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100f8906100e4565b90565b610104816100ef565b0361010b57565b5f80fd5b9050359061011c826100fb565b565b9060208282031261013757610134915f0161010f565b90565b6100dc565b5f0190565b3461016f5761015961015436600461011e565b610839565b6101616100d2565b8061016b8161013c565b0390f35b6100d8565b151590565b61018281610174565b0361018957565b5f80fd5b9050359061019a82610179565b565b91906040838203126101c457806101b86101c1925f860161010f565b9360200161018d565b90565b6100dc565b346101f8576101e26101dc36600461019c565b906108ff565b6101ea6100d2565b806101f48161013c565b0390f35b6100d8565b6002111561020757565b5f80fd5b90503590610218826101fd565b565b9190604083820312610242578061023661023f925f860161010f565b9360200161020b565b90565b6100dc565b346102765761026061025a36600461021a565b90610a89565b6102686100d2565b806102728161013c565b0390f35b6100d8565b5f91031261028557565b6100dc565b5190565b60209181520190565b60200190565b6102a6906100ef565b9052565b906102b78160209361029d565b0190565b60200190565b906102de6102d86102d18461028a565b809361028e565b92610297565b905f5b8181106102ee5750505090565b90919261030761030160019286516102aa565b946102bb565b91019190916102e1565b6103269160208201915f8184039101526102c1565b90565b346103595761033936600461027b565b610355610344610be7565b61034c6100d2565b91829182610311565b0390f35b6100d8565b90565b61037561037061037a926100e4565b61035e565b6100e4565b90565b61038690610361565b90565b6103929061037d565b90565b9061039f90610389565b5f5260205260405f2090565b1c90565b60ff1690565b6103c59060086103ca93026103ab565b6103af565b90565b906103d891546103b5565b90565b6103f1906103ec6003915f92610395565b6103cd565b90565b634e487b7160e01b5f52602160045260245ffd5b6002111561041257565b6103f4565b9061042182610408565b565b61042c90610417565b90565b61043890610423565b9052565b919061044f905f6020850194019061042f565b565b346104815761047d61046c61046736600461011e565b6103db565b6104746100d2565b9182918261043c565b0390f35b6100d8565b346104b45761049636600461027b565b61049e610ce8565b6104a66100d2565b806104b08161013c565b0390f35b6100d8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104ff5781359167ffffffffffffffff83116104fa5760200192600183028401116104f557565b6104c1565b6104bd565b6104b9565b916060838303126105515761051b825f850161010f565b92610529836020830161010f565b92604082013567ffffffffffffffff811161054c5761054892016104c5565b9091565b6100e0565b6100dc565b61055f90610174565b9052565b9190610576905f60208501940190610556565b565b346105ac576105a861059761058e366004610504565b92919091610ded565b61059f6100d2565b91829182610563565b0390f35b6100d8565b6105ba906100ef565b9052565b91906105d1905f602085019401906105b1565b565b34610603576105e336600461027b565b6105ff6105ee6110a3565b6105f66100d2565b918291826105be565b0390f35b6100d8565b5190565b60209181520190565b60200190565b61062490610423565b9052565b906106358160209361061b565b0190565b60200190565b9061065c61065661064f84610608565b809361060c565b92610615565b905f5b81811061066c5750505090565b90919261068561067f6001928651610628565b94610639565b910191909161065f565b90916106a96106b79360408401908482035f8601526102c1565b91602081840391015261063f565b90565b346106eb576106ca36600461027b565b6106d261114b565b906106e76106de6100d2565b9283928361068f565b0390f35b6100d8565b90916060828403126107255761072261070b845f850161010f565b93610719816020860161020b565b9360400161018d565b90565b6100dc565b346107595761074361073d3660046106f0565b916112ea565b61074b6100d2565b806107558161013c565b0390f35b6100d8565b3461078c5761077661077136600461011e565b61135c565b61077e6100d2565b806107888161013c565b0390f35b6100d8565b5f80fd5b6107a6906107a1611367565b61081a565b565b1b90565b919060086107c79102916107c160ff846107a8565b926107a8565b9181191691161790565b6107da90610417565b90565b90565b91906107f66107f16107fe936107d1565b6107dd565b9083546107ac565b9055565b5f90565b61081891610812610802565b916107e0565b565b5f6108326108379261082b8161153d565b6003610395565b610806565b565b61084290610795565b565b9061085691610851611367565b610893565b565b5f1b90565b9061086960ff91610858565b9181191691161790565b9061088861088361088f926107d1565b6107dd565b825461085d565b9055565b9061089e90826116d9565b6108b35f6108ae60038490610395565b610873565b5f6108e76108e17fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916108f06100d2565b806108fa8161013c565b0390a3565b9061090991610844565b565b9061091d91610918611367565b610973565b565b90565b61093661093161093b9261091f565b61035e565b6100e4565b90565b61094790610922565b90565b90565b5f1c90565b61095e6109639161094d565b6103af565b90565b6109709054610952565b90565b908161098f6109896109845f61093e565b6100ef565b916100ef565b14610a6d576109b16109ab60016109a6859161094a565b611732565b15610174565b610a51576109c96109c460038490610395565b610966565b91826109dd6109d784610417565b91610417565b14610a4c576109f7826109f260038490610395565b610873565b91610a34610a2e610a287fa09388b78c1a36296c3bc4cc7a25b5768b1d9e0e628ed553e26c26aaedf9462295610389565b926107d1565b926107d1565b92610a3d6100d2565b80610a478161013c565b0390a4565b505050565b5f633d0f293d60e01b815280610a696004820161013c565b0390fd5b5f63e6c4247b60e01b815280610a856004820161013c565b0390fd5b90610a939161090b565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610ac290610a9a565b810190811067ffffffffffffffff821117610adc57604052565b610aa4565b90610af4610aed6100d2565b9283610ab8565b565b67ffffffffffffffff8111610b0e5760208091020190565b610aa4565b90610b25610b2083610af6565b610ae1565b918252565b369037565b90610b54610b3c83610b13565b92602080610b4a8693610af6565b9201910390610b2a565b565b90565b610b6d610b68610b729261091f565b61035e565b610b56565b90565b634e487b7160e01b5f52601160045260245ffd5b610b9290610b56565b5f198114610ba05760010190565b610b75565b634e487b7160e01b5f52603260045260245ffd5b90610bc38261028a565b811015610bd4576020809102010190565b610ba5565b90610be3906100ef565b9052565b610bef610a95565b50610c02610bfd600161094a565b61184e565b610c0b81610b2f565b610c1d610c18600161094a565b611865565b610c265f610b59565b905b81610c3b610c3586610b56565b91610b56565b1080610ca0575b15610c9757610c7381610c64610c7b93610c5f8791879092610bb9565b610bd9565b610c6e600161094a565b61189f565b919015610174565b610c8f57610c899091610b89565b90610c28565b505090505b90565b50509050610c94565b5080610cbc610cb6610cb15f61093e565b6100ef565b916100ef565b1415610c42565b610ccb611367565b610cd3610cd5565b565b610ce6610ce15f61093e565b611909565b565b610cf0610cc3565b565b5f90565b610cff90610361565b90565b610d0b90610cf6565b90565b610d179061037d565b90565b60e01b90565b90505190610d2d82610179565b565b90602082820312610d4857610d45915f01610d20565b90565b6100dc565b60209181520190565b90825f939282370152565b9190610d7b81610d7481610d8095610d4d565b8095610d56565b610a9a565b0190565b610daa610db79593949294610da060608401965f8501906105b1565b60208301906105b1565b6040818503910152610d61565b90565b610dc26100d2565b3d5f823e3d90fd5b916020610deb929493610de460408201965f8301906105b1565b01906105b1565b565b91939290610df9610cf2565b50610e0c610e07600161094a565b611865565b9485610e28610e22610e1d5f61093e565b6100ef565b916100ef565b14611068575f959295915f935b80610e50610e4a610e455f61093e565b6100ef565b916100ef565b1461105b57610e69610e6460038390610395565b610966565b610e7b610e755f610417565b91610417565b145f14610fa857876020610e96610e9184610d02565b610d0e565b637a3979dc90610ebb8a92610ec688968a610eaf6100d2565b98899788968796610d1a565b865260048601610d84565b03915afa8015610fa357610ee2915f91610f75575b5015610174565b610f5557610efd610f05915b610ef8600161094a565b61189f565b919015610174565b15610e355750505090919293505b9081610f44575b50610f255750600190565b610f40905f91829163a86c8c0b60e01b8352600483016105be565b0390fd5b610f4f915015610174565b5f610f1a565b8590610f715f92839263539b48a560e11b845260048401610dca565b0390fd5b610f96915060203d8111610f9c575b610f8e8183610ab8565b810190610d2f565b5f610edb565b503d610f84565b610dba565b9250600192876020610fc1610fbc84610d02565b610d0e565b637a3979dc90610fe68a92610ff188968a610fda6100d2565b98899788968796610d1a565b865260048601610d84565b03915afa908115611056575f91611028575b50611015575b610efd610f0591610eee565b9350610f05610efd600195915050611009565b611049915060203d811161104f575b6110418183610ab8565b810190610d2f565b5f611003565b503d611037565b610dba565b5050509091929350610f13565b505050509050600190565b5f90565b60018060a01b031690565b61108e6110939161094d565b611077565b90565b6110a09054611082565b90565b6110ab611073565b506110b55f611096565b90565b606090565b67ffffffffffffffff81116110d55760208091020190565b610aa4565b906110ec6110e7836110bd565b610ae1565b918252565b369037565b9061111b611103836110da565b9260208061111186936110bd565b92019103906110f1565b565b9061112782610608565b811015611138576020809102010190565b610ba5565b9061114790610417565b9052565b611153610a95565b5061115c6110b8565b5061116f61116a600161094a565b61184e565b61117881610b2f565b90611182816110f6565b92611195611190600161094a565b611865565b9261119f5f610b59565b935b846111b46111ae86610b56565b91610b56565b1080611245575b1561123b57611215816111dd61121d936111d886918a9092610bb9565b610bd9565b6112066111f46111ef60038490610395565b610966565b6112018a918a909261111d565b61113d565b611210600161094a565b61189f565b919015610174565b6112315761122b9094610b89565b936111a1565b50915091505b9190565b5091509150611237565b508061126161125b6112565f61093e565b6100ef565b916100ef565b14156111bb565b9061127b9291611276611367565b61127d565b565b909161128990826116d9565b61129e8261129960038490610395565b610873565b906112d26112cc7fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916112db6100d2565b806112e58161013c565b0390a3565b906112f59291611268565b565b61130890611303611367565b61130a565b565b8061132561131f61131a5f61093e565b6100ef565b916100ef565b146113355761133390611909565b565b6113586113415f61093e565b5f918291631e4fbdf760e01b8352600483016105be565b0390fd5b611365906112f7565b565b61136f6110a3565b61138861138261137d611968565b6100ef565b916100ef565b0361138f57565b6113b161139a611968565b5f91829163118cdaa760e01b8352600483016105be565b0390fd5b6113c6906113c1611367565b611453565b565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61140560136020926113c8565b61140e816113d1565b0190565b6114279060208101905f8183039101526113f8565b90565b1561143157565b6114396100d2565b62461bcd60e51b81528061144f60048201611412565b0390fd5b8061146e6114686114635f61093e565b6100ef565b916100ef565b146115215761149061148a6001611485849161094a565b611732565b15610174565b611505576114c36114ab60016114a6849161094a565b611a7a565b6114bd6114b7846100ef565b916100ef565b1461142a565b6114ed7fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610389565b906114f66100d2565b806115008161013c565b0390a2565b5f633d0f293d60e01b81528061151d6004820161013c565b0390fd5b5f63e6c4247b60e01b8152806115396004820161013c565b0390fd5b611546906113b5565b565b9061155a91611555611367565b6115de565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61159060116020926113c8565b6115998161155c565b0190565b6115b29060208101905f818303910152611583565b90565b156115bc57565b6115c46100d2565b62461bcd60e51b8152806115da6004820161159d565b0390fd5b90816115fa6115f46115ef5f61093e565b6100ef565b916100ef565b146116bd57611613600161160e849161094a565b611732565b6116a15761161f610cf2565b505f146116855761164361163d6001611638849161094a565b611bce565b5b6115b5565b61166d7f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610389565b906116766100d2565b806116808161013c565b0390a2565b61164361169c6001611697849161094a565b611bae565b61163e565b5f63516c350f60e11b8152806116b96004820161013c565b0390fd5b5f63e6c4247b60e01b8152806116d56004820161013c565b0390fd5b906116e391611548565b565b906116ef90610389565b5f5260205260405f2090565b5f90565b61170890610174565b90565b90611715906116ff565b5f5260205260405f2090565b61172a5f61093e565b90565b600190565b61173a610cf2565b5061176261175d61174f6001840185906116e5565b6117576116fb565b9061170b565b611096565b61177b611775611770611721565b6100ef565b916100ef565b14806117df575b5f146117d8576117c26117bc6117b76117a960016117c895016117a3611721565b906116e5565b6117b161172d565b9061170b565b611096565b926100ef565b916100ef565b145f146117d457600190565b5f90565b5050600190565b506118076118026117f46001840185906116e5565b6117fc61172d565b9061170b565b611096565b61182061181a611815611721565b6100ef565b916100ef565b14611782565b5f90565b90565b61183961183e9161094d565b61182a565b90565b61184b905461182d565b90565b5f6118629161185b611826565b5001611841565b90565b611897611889600161189c93611879611073565b5001611883611721565b906116e5565b61189161172d565b9061170b565b611096565b90565b906118c5916118ac610cf2565b506118b5611073565b50906118bf61172d565b91611bee565b91909190565b906118dc60018060a01b0391610858565b9181191691161790565b90565b906118fe6118f961190592610389565b6118e6565b82546118cb565b9055565b6119125f611096565b61191c825f6118e9565b9061195061194a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610389565b91610389565b916119596100d2565b806119638161013c565b0390a3565b611970611073565b503390565b61197e5f61093e565b90565b919060086119a191029161199b60018060a01b03846107a8565b926107a8565b9181191691161790565b91906119c16119bc6119c993610389565b6118e6565b908354611981565b9055565b6119df916119d9611073565b916119ab565b565b90565b6119f86119f36119fd926119e1565b61035e565b610b56565b90565b611a0f611a1591939293610b56565b92610b56565b8203918211611a2057565b610b75565b90611a315f1991610858565b9181191691161790565b611a4f611a4a611a5492610b56565b61035e565b610b56565b90565b90565b90611a6f611a6a611a7692611a3b565b611a57565b8254611a25565b9055565b611a82611073565b5081611a9d611a97611a92611975565b6100ef565b916100ef565b148015611b94575b611b865780611b0e611b8392611ad8611ad3611ac56001860188906116e5565b611acd6116fb565b9061170b565b611096565b611aff611afa611aec6001870189906116e5565b611af461172d565b9061170b565b611096565b90611b0861172d565b92611c6a565b611b365f611b31611b236001850187906116e5565b611b2b6116fb565b9061170b565b6119cd565b611b5e5f611b59611b4b6001850187906116e5565b611b5361172d565b9061170b565b6119cd565b611b7d5f611b6c60016119e4565b920191611b7883611841565b611a00565b90611a5a565b90565b5050611b915f61093e565b90565b50611ba9611ba3828490611732565b15610174565b611aa5565b90611bcb91611bbb610cf2565b5090611bc56116fb565b91611cb5565b90565b90611beb91611bdb610cf2565b5090611be561172d565b91611cb5565b90565b91611bf7610cf2565b50611c00611073565b50611c15611c0f848490611732565b15610174565b5f14611c2c575050505f90611c295f61093e565b90565b611c3f611c44926001611c4995016116e5565b61170b565b611096565b9081611c64611c5e611c59611721565b6100ef565b916100ef565b14159190565b9192611ca9611cae926001611cb396611ca283611c9d611c8d858b0185906116e5565b611c978915610174565b9061170b565b6118e9565b95016116e5565b61170b565b6118e9565b565b91611cd492611cc2610cf2565b5091611ccc611721565b909192611cfc565b90565b611ce6611cec91939293610b56565b92610b56565b8201809211611cf757565b610b75565b91611d05610cf2565b50611d1a611d14848390611732565b15610174565b80611d97575b611d2c57505050505f90565b611d9293611d6d92611d63611d57611d52611d4b6001890185906116e5565b859061170b565b611096565b91869085908592611c6a565b8492909192611c6a565b611d8c5f611d7b60016119e4565b920191611d8783611841565b611cd7565b90611a5a565b600190565b50611da3838390611732565b611d2056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x9CV[a\0!a\x004V[a0qa\x03\xE0\x829a0q\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a4Q\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01da\x01_a\x01i\x92a\x01\x15V[a\x01KV[a\x01HV[\x90V[a\x01u_a\x01PV[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x01\xA4a\x02QV[\x80a\x01\xBFa\x01\xB9a\x01\xB4_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xEBWa\x01\xE8\x90a\x01\xDAa\x01\xD3a\x01lV[\x82\x90a\x02\xCEV[Pa\x01\xE3a\x01xV[a\x02\xCEV[PV[_c\xD9.#=`\xE0\x1B\x81R\x80a\x02\x03`\x04\x82\x01a\x01CV[\x03\x90\xFD[\x90a\x02\x13`\xFF\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02+\x90a\x02\x1DV[\x90V[\x90V[\x90a\x02Fa\x02Aa\x02M\x92a\x02\"V[a\x02.V[\x82Ta\x02\x07V[\x90UV[a\x02\\_`\x01a\x021V[V[_\x90V[a\x02k\x90a\x01HV[\x90V[\x90a\x02x\x90a\x02bV[_R` R`@_ \x90V[a\x02\x98a\x02\x93a\x02\x9D\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x02\xA9\x90a\x02\x84V[\x90V[a\x02\xB5\x90a\x02\xA0V[\x90V[\x90a\x02\xC2\x90a\x02\xACV[_R` R`@_ \x90V[a\x02\xD6a\x02^V[Pa\x02\xEBa\x02\xE5\x82\x84\x90a\x03\xA5V[\x15a\x02\x1DV[_\x14a\x03sWa\x03\x12`\x01a\x03\r_a\x03\x05\x81\x86\x90a\x02nV[\x01\x85\x90a\x02\xB8V[a\x021V[\x90a\x03\x1Ba\x03\xD2V[\x90a\x03Xa\x03Ra\x03L\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x02bV[\x92a\x02\xACV[\x92a\x02\xACV[\x92a\x03aa\x004V[\x80a\x03k\x81a\x01CV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x03\x90a\x03\x95\x91a\x03yV[a\x03~V[\x90V[a\x03\xA2\x90Ta\x03\x84V[\x90V[a\x03\xCB\x91_a\x03\xC0a\x03\xC6\x93a\x03\xB9a\x02^V[P\x82a\x02nV[\x01a\x02\xB8V[a\x03\x98V[\x90V[_\x90V[a\x03\xDAa\x03\xCEV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\xBBV[a\0\x1D_5a\0\xECV[\x80c\x01\xFF\xC9\xA7\x14a\0\xE7W\x80c$\x8A\x9C\xA3\x14a\0\xE2W\x80c//\xF1]\x14a\0\xDDW\x80c6V\x8A\xBE\x14a\0\xD8W\x80c?K\xA8:\x14a\0\xD3W\x80cV\x81pk\x14a\0\xCEW\x80c\\\x97Z\xBB\x14a\0\xC9W\x80cv\xA6\x84\x0B\x14a\0\xC4W\x80c\x84V\xCBY\x14a\0\xBFW\x80c\x91\xD1HT\x14a\0\xBAW\x80c\xA2\x17\xFD\xDF\x14a\0\xB5W\x80c\xD5Gt\x1F\x14a\0\xB0Wc\xEC\x87b\x1C\x03a\0\x0EWa\x05\x86V[a\x05#V[a\x04\xEEV[a\x04}V[a\x04JV[a\x04\x14V[a\x03\xDFV[a\x03\xA9V[a\x03'V[a\x02\xE4V[a\x02\xB0V[a\x02\x0FV[a\x01tV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x15\x81a\x01\0V[\x03a\x01\x1CWV[_\x80\xFD[\x90P5\x90a\x01-\x82a\x01\x0CV[V[\x90` \x82\x82\x03\x12a\x01HWa\x01E\x91_\x01a\x01 V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x01[\x90a\x01MV[\x90RV[\x91\x90a\x01r\x90_` \x85\x01\x94\x01\x90a\x01RV[V[4a\x01\xA4Wa\x01\xA0a\x01\x8Fa\x01\x8A6`\x04a\x01/V[a\x05\xC3V[a\x01\x97a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[a\x01\xB5\x81a\x01\xA9V[\x03a\x01\xBCWV[_\x80\xFD[\x90P5\x90a\x01\xCD\x82a\x01\xACV[V[\x90` \x82\x82\x03\x12a\x01\xE8Wa\x01\xE5\x91_\x01a\x01\xC0V[\x90V[a\0\xFCV[a\x01\xF6\x90a\x01\xA9V[\x90RV[\x91\x90a\x02\r\x90_` \x85\x01\x94\x01\x90a\x01\xEDV[V[4a\x02?Wa\x02;a\x02*a\x02%6`\x04a\x01\xCFV[a\x06RV[a\x022a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02X\x90a\x02DV[\x90V[a\x02d\x81a\x02OV[\x03a\x02kWV[_\x80\xFD[\x90P5\x90a\x02|\x82a\x02[V[V[\x91\x90`@\x83\x82\x03\x12a\x02\xA6W\x80a\x02\x9Aa\x02\xA3\x92_\x86\x01a\x01\xC0V[\x93` \x01a\x02oV[\x90V[a\0\xFCV[_\x01\x90V[4a\x02\xDFWa\x02\xC9a\x02\xC36`\x04a\x02~V[\x90a\x06\x9DV[a\x02\xD1a\0\xF2V[\x80a\x02\xDB\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x03\x13Wa\x02\xFDa\x02\xF76`\x04a\x02~V[\x90a\x06\xA9V[a\x03\x05a\0\xF2V[\x80a\x03\x0F\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x03\"WV[a\0\xFCV[4a\x03UWa\x0376`\x04a\x03\x18V[a\x03?a\x07\x15V[a\x03Ga\0\xF2V[\x80a\x03Q\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x91\x90`@\x83\x82\x03\x12a\x03\x82W\x80a\x03va\x03\x7F\x92_\x86\x01a\x02oV[\x93` \x01a\x01\xC0V[\x90V[a\0\xFCV[a\x03\x90\x90a\x02OV[\x90RV[\x91\x90a\x03\xA7\x90_` \x85\x01\x94\x01\x90a\x03\x87V[V[4a\x03\xDAWa\x03\xD6a\x03\xC5a\x03\xBF6`\x04a\x03ZV[\x90a\x07\xD9V[a\x03\xCDa\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x04\x0FWa\x03\xEF6`\x04a\x03\x18V[a\x04\x0Ba\x03\xFAa\x08\x98V[a\x04\x02a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[4a\x04EWa\x04Aa\x040a\x04*6`\x04a\x03ZV[\x90a\nTV[a\x048a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x04xWa\x04Z6`\x04a\x03\x18V[a\x04ba\n\x8DV[a\x04ja\0\xF2V[\x80a\x04t\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x04\xAEWa\x04\xAAa\x04\x99a\x04\x936`\x04a\x02~V[\x90a\n\xADV[a\x04\xA1a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[_\x1B\x90V[a\x04\xCFa\x04\xCAa\x04\xD4\x92a\x04\xB3V[a\x04\xB6V[a\x01\xA9V[\x90V[a\x04\xE0_a\x04\xBBV[\x90V[a\x04\xEBa\x04\xD7V[\x90V[4a\x05\x1EWa\x04\xFE6`\x04a\x03\x18V[a\x05\x1Aa\x05\ta\x04\xE3V[a\x05\x11a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[4a\x05RWa\x05<a\x0566`\x04a\x02~V[\x90a\x0B\0V[a\x05Da\0\xF2V[\x80a\x05N\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x05\x83a\x05WV[\x90V[4a\x05\xB6Wa\x05\x966`\x04a\x03\x18V[a\x05\xB2a\x05\xA1a\x05{V[a\x05\xA9a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x90V[a\x05\xCBa\x05\xBFV[P\x80a\x05\xE6a\x05\xE0cye\xDB\x0B`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90\x81\x15a\x05\xF3W[P\x90V[a\x05\xFD\x91Pa\x0B\x0CV[_a\x05\xEFV[_\x90V[a\x06\x10\x90a\x01\xA9V[\x90V[\x90a\x06\x1D\x90a\x06\x07V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x06=a\x06B\x91a\x06)V[a\x06.V[\x90V[a\x06O\x90Ta\x061V[\x90V[`\x01a\x06ja\x06p\x92a\x06ca\x06\x03V[P_a\x06\x13V[\x01a\x06EV[\x90V[\x90a\x06\x8E\x91a\x06\x89a\x06\x84\x82a\x06RV[a\x0B2V[a\x06\x90V[V[\x90a\x06\x9A\x91a\x0B\x8BV[PV[\x90a\x06\xA7\x91a\x06sV[V[\x90\x80a\x06\xC4a\x06\xBEa\x06\xB9a\x0C6V[a\x02OV[\x91a\x02OV[\x03a\x06\xD5Wa\x06\xD2\x91a\x0CCV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x06\xED`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x07\x01a\x06\xFCa\x04\xD7V[a\x0B2V[a\x07\ta\x07\x0BV[V[a\x07\x13a\rDV[V[a\x07\x1Da\x06\xF1V[V[_\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07K\x90a\x07#V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07eW`@RV[a\x07-V[\x90a\x07}a\x07va\0\xF2V[\x92\x83a\x07AV[V[Q\x90V[\x90P\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x07\xB8a\x07\xAF\x92` \x92a\x07\xA6\x81a\x07\x7FV[\x94\x85\x80\x93a\x07\x83V[\x93\x84\x91\x01a\x07\x88V[\x01\x90V[a\x07\xCA\x90a\x07\xD0\x93\x92a\x07\x93V[\x90a\x07\x93V[\x90V[` \x01\x90V[\x90a\x08 a\x08Ua\x08n\x93a\x07\xECa\x07\x1FV[Pa\x08/a \x82\x91a\x08\0` \x84\x01a\x07jV[\x92\x80\x84Ra\x0F\xEF` \x85\x019a\x08\x14a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\x08Fa\x08:a\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\x08ga\x08a\x82a\x07\x7FV[\x91a\x07\xD3V[ \x90a\rZV[\x90V[`\xFF\x16\x90V[a\x08\x83a\x08\x88\x91a\x06)V[a\x08qV[\x90V[a\x08\x95\x90Ta\x08wV[\x90V[a\x08\xA0a\x05\xBFV[Pa\x08\xAB`\x01a\x08\x8BV[\x90V[\x90a\x08\xC1\x92\x91a\x08\xBCa\r{V[a\tBV[\x90V[\x90V[a\x08\xDBa\x08\xD6a\x08\xE0\x92a\x04\xB3V[a\x08\xC4V[a\x02DV[\x90V[a\x08\xEC\x90a\x08\xC7V[\x90V[\x90V[a\t\x06a\t\x01a\t\x0B\x92a\x04\xB3V[a\x08\xC4V[a\x08\xEFV[\x90V[a\t\"a\t\x1Da\t'\x92a\x02DV[a\x08\xC4V[a\x02DV[\x90V[a\t3\x90a\t\x0EV[\x90V[a\t?\x90a\t*V[\x90V[\x91\x90\x91P\x81a\taa\t[a\tV_a\x08\xE3V[a\x02OV[\x91a\x02OV[\x14a\n8Wa\t\xE9\x90a\t\xA3a\t\xD8a \x82a\t\x7F` \x82\x01a\x07jV[\x90\x80\x82Ra\x0F\xEF` \x83\x019a\t\xB2\x86a\t\x97a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\t\xC9a\t\xBDa\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\t\xE4_\x92\x91\x92a\x08\xF2V[a\r\xD5V[\x90\x81\x90a\n\x1Fa\n\x19\x7F\x1D\xA0I\xB3\xA4\xED\xBC\x08\x03\xAD\xCBC\x08\xEC\x85\x8B\xB7\xFB\xD7\x9Eb\xA3\x1CqS\xA1\xA1\x12s\xEDW\xE5\x93a\t6V[\x91a\t6V[\x91a\n(a\0\xF2V[\x80a\n2\x81a\x02\xABV[\x03\x90\xA3\x90V[_c\xD9.#=`\xE0\x1B\x81R\x80a\nP`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x90a\nf\x91a\naa\x07\x1FV[a\x08\xAEV[\x90V[a\nya\nta\x04\xD7V[a\x0B2V[a\n\x81a\n\x83V[V[a\n\x8Ba\x0F\"V[V[a\n\x95a\niV[V[\x90a\n\xA1\x90a\t6V[_R` R`@_ \x90V[a\n\xD3\x91_a\n\xC8a\n\xCE\x93a\n\xC1a\x05\xBFV[P\x82a\x06\x13V[\x01a\n\x97V[a\x08\x8BV[\x90V[\x90a\n\xF1\x91a\n\xECa\n\xE7\x82a\x06RV[a\x0B2V[a\n\xF3V[V[\x90a\n\xFD\x91a\x0CCV[PV[\x90a\x0B\n\x91a\n\xD6V[V[a\x0B\x14a\x05\xBFV[Pa\x0B.a\x0B(c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90V[a\x0BD\x90a\x0B>a\x0C6V[\x90a\x0FOV[V[\x90a\x0BR`\xFF\x91a\x04\xB6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Be\x90a\x01MV[\x90V[\x90V[\x90a\x0B\x80a\x0B{a\x0B\x87\x92a\x0B\\V[a\x0BhV[\x82Ta\x0BFV[\x90UV[a\x0B\x93a\x05\xBFV[Pa\x0B\xA8a\x0B\xA2\x82\x84\x90a\n\xADV[\x15a\x01MV[_\x14a\x0C0Wa\x0B\xCF`\x01a\x0B\xCA_a\x0B\xC2\x81\x86\x90a\x06\x13V[\x01\x85\x90a\n\x97V[a\x0BkV[\x90a\x0B\xD8a\x0C6V[\x90a\x0C\x15a\x0C\x0Fa\x0C\t\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x06\x07V[\x92a\t6V[\x92a\t6V[\x92a\x0C\x1Ea\0\xF2V[\x80a\x0C(\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C>a\x07\x1FV[P3\x90V[a\x0CKa\x05\xBFV[Pa\x0CW\x81\x83\x90a\n\xADV[_\x14a\x0C\xDEWa\x0C}_a\x0Cx_a\x0Cp\x81\x86\x90a\x06\x13V[\x01\x85\x90a\n\x97V[a\x0BkV[\x90a\x0C\x86a\x0C6V[\x90a\x0C\xC3a\x0C\xBDa\x0C\xB7\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x06\x07V[\x92a\t6V[\x92a\t6V[\x92a\x0C\xCCa\0\xF2V[\x80a\x0C\xD6\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C\xECa\x0F\x8AV[a\x0C\xF4a\x0C\xF6V[V[a\r\x01_`\x01a\x0BkV[a\r\ta\x0C6V[a\r?\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\r6a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\rLa\x0C\xE4V[V[a\rW\x90a\t*V[\x90V[\x90a\rx\x91a\rga\x07\x1FV[P\x90a\rr0a\rNV[\x91a\x0F\xBDV[\x90V[a\r\x83a\x08\x98V[a\r\x89WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\r\xA1`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\r\xAE\x90a\x08\xEFV[\x90RV[\x91` a\r\xD3\x92\x94\x93a\r\xCC`@\x82\x01\x96_\x83\x01\x90a\r\xA5V[\x01\x90a\r\xA5V[V[\x91\x90\x91a\r\xE0a\x07\x1FV[Pa\r\xEA0a\rNV[1a\r\xFDa\r\xF7\x83a\x08\xEFV[\x91a\x08\xEFV[\x10a\x0E\x9AWa\x0E\x0B\x82a\x07\x7FV[a\x0E\x1Da\x0E\x17_a\x08\xF2V[\x91a\x08\xEFV[\x14a\x0E~W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x0EsW\x81a\x0EPa\x0EJa\x0EE_a\x08\xE3V[a\x02OV[\x91a\x02OV[\x14a\x0EWWV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x0Eo`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x0E\x96`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x0E\xA30a\rNV[1a\x0E\xBE_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\r\xB2V[\x03\x90\xFD[a\x0E\xCAa\r{V[a\x0E\xD2a\x0E\xD4V[V[a\x0E\xDF`\x01\x80a\x0BkV[a\x0E\xE7a\x0C6V[a\x0F\x1D\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\x0F\x14a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\x0F*a\x0E\xC2V[V[\x91` a\x0FM\x92\x94\x93a\x0FF`@\x82\x01\x96_\x83\x01\x90a\x03\x87V[\x01\x90a\x01\xEDV[V[\x90a\x0Fda\x0F^\x83\x83\x90a\n\xADV[\x15a\x01MV[a\x0FlWPPV[a\x0F\x86_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0F,V[\x03\x90\xFD[a\x0F\x9Ba\x0F\x95a\x08\x98V[\x15a\x01MV[a\x0F\xA1WV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x0F\xB9`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x91`\x0B\x92a\x0F\xC9a\x07\x1FV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V\xFE`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x1D\xA8a\x02\xDA\x829a\x1D\xA8\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a \x82\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01 V[V[a\x01)\x90a\x01{V[V[\x90V[\x90V[a\x01Ea\x01@a\x01J\x92a\x01+V[a\x01.V[a\0\x9CV[\x90V[a\x01V\x90a\x011V[\x90V[a\x01b\x90a\0\xA7V[\x90RV[\x91\x90a\x01y\x90_` \x85\x01\x94\x01\x90a\x01YV[V[\x80a\x01\x96a\x01\x90a\x01\x8B_a\x01MV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xA6Wa\x01\xA4\x90a\x02zV[V[a\x01\xC9a\x01\xB2_a\x01MV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01fV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE9a\x01\xEE\x91a\x01\xCDV[a\x01\xD2V[\x90V[a\x01\xFB\x90Ta\x01\xDDV[\x90V[_\x1B\x90V[\x90a\x02\x14`\x01\x80`\xA0\x1B\x03\x91a\x01\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x022a\x02-a\x027\x92a\0\x9CV[a\x01.V[a\0\x9CV[\x90V[a\x02C\x90a\x02\x1EV[\x90V[a\x02O\x90a\x02:V[\x90V[\x90V[\x90a\x02ja\x02ea\x02q\x92a\x02FV[a\x02RV[\x82Ta\x02\x03V[\x90UV[_\x01\x90V[a\x02\x83_a\x01\xF1V[a\x02\x8D\x82_a\x02UV[\x90a\x02\xC1a\x02\xBB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02FV[\x91a\x02FV[\x91a\x02\xCAa\x004V[\x80a\x02\xD4\x81a\x02uV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\x91V[a\0\x1D_5a\0\xCCV[\x80c\x04\xF3\x86\xF4\x14a\0\xC7W\x80c\x05.\xEF\xD1\x14a\0\xC2W\x80c\x088\xBB\xD4\x14a\0\xBDW\x80c\x1BB\xC7\x11\x14a\0\xB8W\x80c!(O~\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cz9y\xDC\x14a\0\xA9W\x80c\x8D\xA5\xCB[\x14a\0\xA4W\x80c\xA2\x13\xFD\"\x14a\0\x9FW\x80c\xB1\xC6\x1E\0\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07^V[a\x07*V[a\x06\xBAV[a\x05\xD3V[a\x05xV[a\x04\x86V[a\x04QV[a\x03)V[a\x02GV[a\x01\xC9V[a\x01AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF8\x90a\0\xE4V[\x90V[a\x01\x04\x81a\0\xEFV[\x03a\x01\x0BWV[_\x80\xFD[\x90P5\x90a\x01\x1C\x82a\0\xFBV[V[\x90` \x82\x82\x03\x12a\x017Wa\x014\x91_\x01a\x01\x0FV[\x90V[a\0\xDCV[_\x01\x90V[4a\x01oWa\x01Ya\x01T6`\x04a\x01\x1EV[a\x089V[a\x01aa\0\xD2V[\x80a\x01k\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[\x15\x15\x90V[a\x01\x82\x81a\x01tV[\x03a\x01\x89WV[_\x80\xFD[\x90P5\x90a\x01\x9A\x82a\x01yV[V[\x91\x90`@\x83\x82\x03\x12a\x01\xC4W\x80a\x01\xB8a\x01\xC1\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x01\xF8Wa\x01\xE2a\x01\xDC6`\x04a\x01\x9CV[\x90a\x08\xFFV[a\x01\xEAa\0\xD2V[\x80a\x01\xF4\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[`\x02\x11\x15a\x02\x07WV[_\x80\xFD[\x90P5\x90a\x02\x18\x82a\x01\xFDV[V[\x91\x90`@\x83\x82\x03\x12a\x02BW\x80a\x026a\x02?\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x02\x0BV[\x90V[a\0\xDCV[4a\x02vWa\x02`a\x02Z6`\x04a\x02\x1AV[\x90a\n\x89V[a\x02ha\0\xD2V[\x80a\x02r\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x02\x85WV[a\0\xDCV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xA6\x90a\0\xEFV[\x90RV[\x90a\x02\xB7\x81` \x93a\x02\x9DV[\x01\x90V[` \x01\x90V[\x90a\x02\xDEa\x02\xD8a\x02\xD1\x84a\x02\x8AV[\x80\x93a\x02\x8EV[\x92a\x02\x97V[\x90_[\x81\x81\x10a\x02\xEEWPPP\x90V[\x90\x91\x92a\x03\x07a\x03\x01`\x01\x92\x86Qa\x02\xAAV[\x94a\x02\xBBV[\x91\x01\x91\x90\x91a\x02\xE1V[a\x03&\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xC1V[\x90V[4a\x03YWa\x0396`\x04a\x02{V[a\x03Ua\x03Da\x0B\xE7V[a\x03La\0\xD2V[\x91\x82\x91\x82a\x03\x11V[\x03\x90\xF3[a\0\xD8V[\x90V[a\x03ua\x03pa\x03z\x92a\0\xE4V[a\x03^V[a\0\xE4V[\x90V[a\x03\x86\x90a\x03aV[\x90V[a\x03\x92\x90a\x03}V[\x90V[\x90a\x03\x9F\x90a\x03\x89V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\xC5\x90`\x08a\x03\xCA\x93\x02a\x03\xABV[a\x03\xAFV[\x90V[\x90a\x03\xD8\x91Ta\x03\xB5V[\x90V[a\x03\xF1\x90a\x03\xEC`\x03\x91_\x92a\x03\x95V[a\x03\xCDV[\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x11\x15a\x04\x12WV[a\x03\xF4V[\x90a\x04!\x82a\x04\x08V[V[a\x04,\x90a\x04\x17V[\x90V[a\x048\x90a\x04#V[\x90RV[\x91\x90a\x04O\x90_` \x85\x01\x94\x01\x90a\x04/V[V[4a\x04\x81Wa\x04}a\x04la\x04g6`\x04a\x01\x1EV[a\x03\xDBV[a\x04ta\0\xD2V[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\0\xD8V[4a\x04\xB4Wa\x04\x966`\x04a\x02{V[a\x04\x9Ea\x0C\xE8V[a\x04\xA6a\0\xD2V[\x80a\x04\xB0\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04\xFFW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xFAW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xF5WV[a\x04\xC1V[a\x04\xBDV[a\x04\xB9V[\x91``\x83\x83\x03\x12a\x05QWa\x05\x1B\x82_\x85\x01a\x01\x0FV[\x92a\x05)\x83` \x83\x01a\x01\x0FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05LWa\x05H\x92\x01a\x04\xC5V[\x90\x91V[a\0\xE0V[a\0\xDCV[a\x05_\x90a\x01tV[\x90RV[\x91\x90a\x05v\x90_` \x85\x01\x94\x01\x90a\x05VV[V[4a\x05\xACWa\x05\xA8a\x05\x97a\x05\x8E6`\x04a\x05\x04V[\x92\x91\x90\x91a\r\xEDV[a\x05\x9Fa\0\xD2V[\x91\x82\x91\x82a\x05cV[\x03\x90\xF3[a\0\xD8V[a\x05\xBA\x90a\0\xEFV[\x90RV[\x91\x90a\x05\xD1\x90_` \x85\x01\x94\x01\x90a\x05\xB1V[V[4a\x06\x03Wa\x05\xE36`\x04a\x02{V[a\x05\xFFa\x05\xEEa\x10\xA3V[a\x05\xF6a\0\xD2V[\x91\x82\x91\x82a\x05\xBEV[\x03\x90\xF3[a\0\xD8V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x06$\x90a\x04#V[\x90RV[\x90a\x065\x81` \x93a\x06\x1BV[\x01\x90V[` \x01\x90V[\x90a\x06\\a\x06Va\x06O\x84a\x06\x08V[\x80\x93a\x06\x0CV[\x92a\x06\x15V[\x90_[\x81\x81\x10a\x06lWPPP\x90V[\x90\x91\x92a\x06\x85a\x06\x7F`\x01\x92\x86Qa\x06(V[\x94a\x069V[\x91\x01\x91\x90\x91a\x06_V[\x90\x91a\x06\xA9a\x06\xB7\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x02\xC1V[\x91` \x81\x84\x03\x91\x01Ra\x06?V[\x90V[4a\x06\xEBWa\x06\xCA6`\x04a\x02{V[a\x06\xD2a\x11KV[\x90a\x06\xE7a\x06\xDEa\0\xD2V[\x92\x83\x92\x83a\x06\x8FV[\x03\x90\xF3[a\0\xD8V[\x90\x91``\x82\x84\x03\x12a\x07%Wa\x07\"a\x07\x0B\x84_\x85\x01a\x01\x0FV[\x93a\x07\x19\x81` \x86\x01a\x02\x0BV[\x93`@\x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x07YWa\x07Ca\x07=6`\x04a\x06\xF0V[\x91a\x12\xEAV[a\x07Ka\0\xD2V[\x80a\x07U\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x07\x8CWa\x07va\x07q6`\x04a\x01\x1EV[a\x13\\V[a\x07~a\0\xD2V[\x80a\x07\x88\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[a\x07\xA6\x90a\x07\xA1a\x13gV[a\x08\x1AV[V[\x1B\x90V[\x91\x90`\x08a\x07\xC7\x91\x02\x91a\x07\xC1`\xFF\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07\xDA\x90a\x04\x17V[\x90V[\x90V[\x91\x90a\x07\xF6a\x07\xF1a\x07\xFE\x93a\x07\xD1V[a\x07\xDDV[\x90\x83Ta\x07\xACV[\x90UV[_\x90V[a\x08\x18\x91a\x08\x12a\x08\x02V[\x91a\x07\xE0V[V[_a\x082a\x087\x92a\x08+\x81a\x15=V[`\x03a\x03\x95V[a\x08\x06V[V[a\x08B\x90a\x07\x95V[V[\x90a\x08V\x91a\x08Qa\x13gV[a\x08\x93V[V[_\x1B\x90V[\x90a\x08i`\xFF\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08\x88a\x08\x83a\x08\x8F\x92a\x07\xD1V[a\x07\xDDV[\x82Ta\x08]V[\x90UV[\x90a\x08\x9E\x90\x82a\x16\xD9V[a\x08\xB3_a\x08\xAE`\x03\x84\x90a\x03\x95V[a\x08sV[_a\x08\xE7a\x08\xE1\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x08\xF0a\0\xD2V[\x80a\x08\xFA\x81a\x01<V[\x03\x90\xA3V[\x90a\t\t\x91a\x08DV[V[\x90a\t\x1D\x91a\t\x18a\x13gV[a\tsV[V[\x90V[a\t6a\t1a\t;\x92a\t\x1FV[a\x03^V[a\0\xE4V[\x90V[a\tG\x90a\t\"V[\x90V[\x90V[_\x1C\x90V[a\t^a\tc\x91a\tMV[a\x03\xAFV[\x90V[a\tp\x90Ta\tRV[\x90V[\x90\x81a\t\x8Fa\t\x89a\t\x84_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\nmWa\t\xB1a\t\xAB`\x01a\t\xA6\x85\x91a\tJV[a\x172V[\x15a\x01tV[a\nQWa\t\xC9a\t\xC4`\x03\x84\x90a\x03\x95V[a\tfV[\x91\x82a\t\xDDa\t\xD7\x84a\x04\x17V[\x91a\x04\x17V[\x14a\nLWa\t\xF7\x82a\t\xF2`\x03\x84\x90a\x03\x95V[a\x08sV[\x91a\n4a\n.a\n(\x7F\xA0\x93\x88\xB7\x8C\x1A6)l;\xC4\xCCz%\xB5v\x8B\x1D\x9E\x0Eb\x8E\xD5S\xE2l&\xAA\xED\xF9F\"\x95a\x03\x89V[\x92a\x07\xD1V[\x92a\x07\xD1V[\x92a\n=a\0\xD2V[\x80a\nG\x81a\x01<V[\x03\x90\xA4V[PPPV[_c=\x0F)=`\xE0\x1B\x81R\x80a\ni`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\n\x85`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\n\x93\x91a\t\x0BV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xC2\x90a\n\x9AV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\xDCW`@RV[a\n\xA4V[\x90a\n\xF4a\n\xEDa\0\xD2V[\x92\x83a\n\xB8V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x0EW` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x0B%a\x0B \x83a\n\xF6V[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x0BTa\x0B<\x83a\x0B\x13V[\x92` \x80a\x0BJ\x86\x93a\n\xF6V[\x92\x01\x91\x03\x90a\x0B*V[V[\x90V[a\x0Bma\x0Bha\x0Br\x92a\t\x1FV[a\x03^V[a\x0BVV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0B\x92\x90a\x0BVV[_\x19\x81\x14a\x0B\xA0W`\x01\x01\x90V[a\x0BuV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x0B\xC3\x82a\x02\x8AV[\x81\x10\x15a\x0B\xD4W` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x0B\xE3\x90a\0\xEFV[\x90RV[a\x0B\xEFa\n\x95V[Pa\x0C\x02a\x0B\xFD`\x01a\tJV[a\x18NV[a\x0C\x0B\x81a\x0B/V[a\x0C\x1Da\x0C\x18`\x01a\tJV[a\x18eV[a\x0C&_a\x0BYV[\x90[\x81a\x0C;a\x0C5\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x0C\xA0W[\x15a\x0C\x97Wa\x0Cs\x81a\x0Cda\x0C{\x93a\x0C_\x87\x91\x87\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x0Cn`\x01a\tJV[a\x18\x9FV[\x91\x90\x15a\x01tV[a\x0C\x8FWa\x0C\x89\x90\x91a\x0B\x89V[\x90a\x0C(V[PP\x90P[\x90V[PP\x90Pa\x0C\x94V[P\x80a\x0C\xBCa\x0C\xB6a\x0C\xB1_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x0CBV[a\x0C\xCBa\x13gV[a\x0C\xD3a\x0C\xD5V[V[a\x0C\xE6a\x0C\xE1_a\t>V[a\x19\tV[V[a\x0C\xF0a\x0C\xC3V[V[_\x90V[a\x0C\xFF\x90a\x03aV[\x90V[a\r\x0B\x90a\x0C\xF6V[\x90V[a\r\x17\x90a\x03}V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\r-\x82a\x01yV[V[\x90` \x82\x82\x03\x12a\rHWa\rE\x91_\x01a\r V[\x90V[a\0\xDCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r{\x81a\rt\x81a\r\x80\x95a\rMV[\x80\x95a\rVV[a\n\x9AV[\x01\x90V[a\r\xAAa\r\xB7\x95\x93\x94\x92\x94a\r\xA0``\x84\x01\x96_\x85\x01\x90a\x05\xB1V[` \x83\x01\x90a\x05\xB1V[`@\x81\x85\x03\x91\x01Ra\raV[\x90V[a\r\xC2a\0\xD2V[=_\x82>=\x90\xFD[\x91` a\r\xEB\x92\x94\x93a\r\xE4`@\x82\x01\x96_\x83\x01\x90a\x05\xB1V[\x01\x90a\x05\xB1V[V[\x91\x93\x92\x90a\r\xF9a\x0C\xF2V[Pa\x0E\x0Ca\x0E\x07`\x01a\tJV[a\x18eV[\x94\x85a\x0E(a\x0E\"a\x0E\x1D_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10hW_\x95\x92\x95\x91_\x93[\x80a\x0EPa\x0EJa\x0EE_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10[Wa\x0Eia\x0Ed`\x03\x83\x90a\x03\x95V[a\tfV[a\x0E{a\x0Eu_a\x04\x17V[\x91a\x04\x17V[\x14_\x14a\x0F\xA8W\x87` a\x0E\x96a\x0E\x91\x84a\r\x02V[a\r\x0EV[cz9y\xDC\x90a\x0E\xBB\x8A\x92a\x0E\xC6\x88\x96\x8Aa\x0E\xAFa\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x80\x15a\x0F\xA3Wa\x0E\xE2\x91_\x91a\x0FuW[P\x15a\x01tV[a\x0FUWa\x0E\xFDa\x0F\x05\x91[a\x0E\xF8`\x01a\tJV[a\x18\x9FV[\x91\x90\x15a\x01tV[\x15a\x0E5WPPP\x90\x91\x92\x93P[\x90\x81a\x0FDW[Pa\x0F%WP`\x01\x90V[a\x0F@\x90_\x91\x82\x91c\xA8l\x8C\x0B`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x0FO\x91P\x15a\x01tV[_a\x0F\x1AV[\x85\x90a\x0Fq_\x92\x83\x92cS\x9BH\xA5`\xE1\x1B\x84R`\x04\x84\x01a\r\xCAV[\x03\x90\xFD[a\x0F\x96\x91P` =\x81\x11a\x0F\x9CW[a\x0F\x8E\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x0E\xDBV[P=a\x0F\x84V[a\r\xBAV[\x92P`\x01\x92\x87` a\x0F\xC1a\x0F\xBC\x84a\r\x02V[a\r\x0EV[cz9y\xDC\x90a\x0F\xE6\x8A\x92a\x0F\xF1\x88\x96\x8Aa\x0F\xDAa\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x90\x81\x15a\x10VW_\x91a\x10(W[Pa\x10\x15W[a\x0E\xFDa\x0F\x05\x91a\x0E\xEEV[\x93Pa\x0F\x05a\x0E\xFD`\x01\x95\x91PPa\x10\tV[a\x10I\x91P` =\x81\x11a\x10OW[a\x10A\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x10\x03V[P=a\x107V[a\r\xBAV[PPP\x90\x91\x92\x93Pa\x0F\x13V[PPPP\x90P`\x01\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x10\x8Ea\x10\x93\x91a\tMV[a\x10wV[\x90V[a\x10\xA0\x90Ta\x10\x82V[\x90V[a\x10\xABa\x10sV[Pa\x10\xB5_a\x10\x96V[\x90V[``\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xD5W` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x10\xECa\x10\xE7\x83a\x10\xBDV[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x11\x1Ba\x11\x03\x83a\x10\xDAV[\x92` \x80a\x11\x11\x86\x93a\x10\xBDV[\x92\x01\x91\x03\x90a\x10\xF1V[V[\x90a\x11'\x82a\x06\x08V[\x81\x10\x15a\x118W` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x11G\x90a\x04\x17V[\x90RV[a\x11Sa\n\x95V[Pa\x11\\a\x10\xB8V[Pa\x11oa\x11j`\x01a\tJV[a\x18NV[a\x11x\x81a\x0B/V[\x90a\x11\x82\x81a\x10\xF6V[\x92a\x11\x95a\x11\x90`\x01a\tJV[a\x18eV[\x92a\x11\x9F_a\x0BYV[\x93[\x84a\x11\xB4a\x11\xAE\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x12EW[\x15a\x12;Wa\x12\x15\x81a\x11\xDDa\x12\x1D\x93a\x11\xD8\x86\x91\x8A\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x12\x06a\x11\xF4a\x11\xEF`\x03\x84\x90a\x03\x95V[a\tfV[a\x12\x01\x8A\x91\x8A\x90\x92a\x11\x1DV[a\x11=V[a\x12\x10`\x01a\tJV[a\x18\x9FV[\x91\x90\x15a\x01tV[a\x121Wa\x12+\x90\x94a\x0B\x89V[\x93a\x11\xA1V[P\x91P\x91P[\x91\x90V[P\x91P\x91Pa\x127V[P\x80a\x12aa\x12[a\x12V_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x11\xBBV[\x90a\x12{\x92\x91a\x12va\x13gV[a\x12}V[V[\x90\x91a\x12\x89\x90\x82a\x16\xD9V[a\x12\x9E\x82a\x12\x99`\x03\x84\x90a\x03\x95V[a\x08sV[\x90a\x12\xD2a\x12\xCC\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x12\xDBa\0\xD2V[\x80a\x12\xE5\x81a\x01<V[\x03\x90\xA3V[\x90a\x12\xF5\x92\x91a\x12hV[V[a\x13\x08\x90a\x13\x03a\x13gV[a\x13\nV[V[\x80a\x13%a\x13\x1Fa\x13\x1A_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x135Wa\x133\x90a\x19\tV[V[a\x13Xa\x13A_a\t>V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13e\x90a\x12\xF7V[V[a\x13oa\x10\xA3V[a\x13\x88a\x13\x82a\x13}a\x19hV[a\0\xEFV[\x91a\0\xEFV[\x03a\x13\x8FWV[a\x13\xB1a\x13\x9Aa\x19hV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13\xC6\x90a\x13\xC1a\x13gV[a\x14SV[V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x14\x05`\x13` \x92a\x13\xC8V[a\x14\x0E\x81a\x13\xD1V[\x01\x90V[a\x14'\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xF8V[\x90V[\x15a\x141WV[a\x149a\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14O`\x04\x82\x01a\x14\x12V[\x03\x90\xFD[\x80a\x14na\x14ha\x14c_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x15!Wa\x14\x90a\x14\x8A`\x01a\x14\x85\x84\x91a\tJV[a\x172V[\x15a\x01tV[a\x15\x05Wa\x14\xC3a\x14\xAB`\x01a\x14\xA6\x84\x91a\tJV[a\x1AzV[a\x14\xBDa\x14\xB7\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x14*V[a\x14\xED\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x03\x89V[\x90a\x14\xF6a\0\xD2V[\x80a\x15\0\x81a\x01<V[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x15\x1D`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x159`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x15F\x90a\x13\xB5V[V[\x90a\x15Z\x91a\x15Ua\x13gV[a\x15\xDEV[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x15\x90`\x11` \x92a\x13\xC8V[a\x15\x99\x81a\x15\\V[\x01\x90V[a\x15\xB2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x83V[\x90V[\x15a\x15\xBCWV[a\x15\xC4a\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xDA`\x04\x82\x01a\x15\x9DV[\x03\x90\xFD[\x90\x81a\x15\xFAa\x15\xF4a\x15\xEF_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x16\xBDWa\x16\x13`\x01a\x16\x0E\x84\x91a\tJV[a\x172V[a\x16\xA1Wa\x16\x1Fa\x0C\xF2V[P_\x14a\x16\x85Wa\x16Ca\x16=`\x01a\x168\x84\x91a\tJV[a\x1B\xCEV[[a\x15\xB5V[a\x16m\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x03\x89V[\x90a\x16va\0\xD2V[\x80a\x16\x80\x81a\x01<V[\x03\x90\xA2V[a\x16Ca\x16\x9C`\x01a\x16\x97\x84\x91a\tJV[a\x1B\xAEV[a\x16>V[_cQl5\x0F`\xE1\x1B\x81R\x80a\x16\xB9`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x16\xD5`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x16\xE3\x91a\x15HV[V[\x90a\x16\xEF\x90a\x03\x89V[_R` R`@_ \x90V[_\x90V[a\x17\x08\x90a\x01tV[\x90V[\x90a\x17\x15\x90a\x16\xFFV[_R` R`@_ \x90V[a\x17*_a\t>V[\x90V[`\x01\x90V[a\x17:a\x0C\xF2V[Pa\x17ba\x17]a\x17O`\x01\x84\x01\x85\x90a\x16\xE5V[a\x17Wa\x16\xFBV[\x90a\x17\x0BV[a\x10\x96V[a\x17{a\x17ua\x17pa\x17!V[a\0\xEFV[\x91a\0\xEFV[\x14\x80a\x17\xDFW[_\x14a\x17\xD8Wa\x17\xC2a\x17\xBCa\x17\xB7a\x17\xA9`\x01a\x17\xC8\x95\x01a\x17\xA3a\x17!V[\x90a\x16\xE5V[a\x17\xB1a\x17-V[\x90a\x17\x0BV[a\x10\x96V[\x92a\0\xEFV[\x91a\0\xEFV[\x14_\x14a\x17\xD4W`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x18\x07a\x18\x02a\x17\xF4`\x01\x84\x01\x85\x90a\x16\xE5V[a\x17\xFCa\x17-V[\x90a\x17\x0BV[a\x10\x96V[a\x18 a\x18\x1Aa\x18\x15a\x17!V[a\0\xEFV[\x91a\0\xEFV[\x14a\x17\x82V[_\x90V[\x90V[a\x189a\x18>\x91a\tMV[a\x18*V[\x90V[a\x18K\x90Ta\x18-V[\x90V[_a\x18b\x91a\x18[a\x18&V[P\x01a\x18AV[\x90V[a\x18\x97a\x18\x89`\x01a\x18\x9C\x93a\x18ya\x10sV[P\x01a\x18\x83a\x17!V[\x90a\x16\xE5V[a\x18\x91a\x17-V[\x90a\x17\x0BV[a\x10\x96V[\x90V[\x90a\x18\xC5\x91a\x18\xACa\x0C\xF2V[Pa\x18\xB5a\x10sV[P\x90a\x18\xBFa\x17-V[\x91a\x1B\xEEV[\x91\x90\x91\x90V[\x90a\x18\xDC`\x01\x80`\xA0\x1B\x03\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x18\xFEa\x18\xF9a\x19\x05\x92a\x03\x89V[a\x18\xE6V[\x82Ta\x18\xCBV[\x90UV[a\x19\x12_a\x10\x96V[a\x19\x1C\x82_a\x18\xE9V[\x90a\x19Pa\x19J\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x03\x89V[\x91a\x03\x89V[\x91a\x19Ya\0\xD2V[\x80a\x19c\x81a\x01<V[\x03\x90\xA3V[a\x19pa\x10sV[P3\x90V[a\x19~_a\t>V[\x90V[\x91\x90`\x08a\x19\xA1\x91\x02\x91a\x19\x9B`\x01\x80`\xA0\x1B\x03\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x19\xC1a\x19\xBCa\x19\xC9\x93a\x03\x89V[a\x18\xE6V[\x90\x83Ta\x19\x81V[\x90UV[a\x19\xDF\x91a\x19\xD9a\x10sV[\x91a\x19\xABV[V[\x90V[a\x19\xF8a\x19\xF3a\x19\xFD\x92a\x19\xE1V[a\x03^V[a\x0BVV[\x90V[a\x1A\x0Fa\x1A\x15\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x03\x91\x82\x11a\x1A WV[a\x0BuV[\x90a\x1A1_\x19\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1AOa\x1AJa\x1AT\x92a\x0BVV[a\x03^V[a\x0BVV[\x90V[\x90V[\x90a\x1Aoa\x1Aja\x1Av\x92a\x1A;V[a\x1AWV[\x82Ta\x1A%V[\x90UV[a\x1A\x82a\x10sV[P\x81a\x1A\x9Da\x1A\x97a\x1A\x92a\x19uV[a\0\xEFV[\x91a\0\xEFV[\x14\x80\x15a\x1B\x94W[a\x1B\x86W\x80a\x1B\x0Ea\x1B\x83\x92a\x1A\xD8a\x1A\xD3a\x1A\xC5`\x01\x86\x01\x88\x90a\x16\xE5V[a\x1A\xCDa\x16\xFBV[\x90a\x17\x0BV[a\x10\x96V[a\x1A\xFFa\x1A\xFAa\x1A\xEC`\x01\x87\x01\x89\x90a\x16\xE5V[a\x1A\xF4a\x17-V[\x90a\x17\x0BV[a\x10\x96V[\x90a\x1B\x08a\x17-V[\x92a\x1CjV[a\x1B6_a\x1B1a\x1B#`\x01\x85\x01\x87\x90a\x16\xE5V[a\x1B+a\x16\xFBV[\x90a\x17\x0BV[a\x19\xCDV[a\x1B^_a\x1BYa\x1BK`\x01\x85\x01\x87\x90a\x16\xE5V[a\x1BSa\x17-V[\x90a\x17\x0BV[a\x19\xCDV[a\x1B}_a\x1Bl`\x01a\x19\xE4V[\x92\x01\x91a\x1Bx\x83a\x18AV[a\x1A\0V[\x90a\x1AZV[\x90V[PPa\x1B\x91_a\t>V[\x90V[Pa\x1B\xA9a\x1B\xA3\x82\x84\x90a\x172V[\x15a\x01tV[a\x1A\xA5V[\x90a\x1B\xCB\x91a\x1B\xBBa\x0C\xF2V[P\x90a\x1B\xC5a\x16\xFBV[\x91a\x1C\xB5V[\x90V[\x90a\x1B\xEB\x91a\x1B\xDBa\x0C\xF2V[P\x90a\x1B\xE5a\x17-V[\x91a\x1C\xB5V[\x90V[\x91a\x1B\xF7a\x0C\xF2V[Pa\x1C\0a\x10sV[Pa\x1C\x15a\x1C\x0F\x84\x84\x90a\x172V[\x15a\x01tV[_\x14a\x1C,WPPP_\x90a\x1C)_a\t>V[\x90V[a\x1C?a\x1CD\x92`\x01a\x1CI\x95\x01a\x16\xE5V[a\x17\x0BV[a\x10\x96V[\x90\x81a\x1Cda\x1C^a\x1CYa\x17!V[a\0\xEFV[\x91a\0\xEFV[\x14\x15\x91\x90V[\x91\x92a\x1C\xA9a\x1C\xAE\x92`\x01a\x1C\xB3\x96a\x1C\xA2\x83a\x1C\x9Da\x1C\x8D\x85\x8B\x01\x85\x90a\x16\xE5V[a\x1C\x97\x89\x15a\x01tV[\x90a\x17\x0BV[a\x18\xE9V[\x95\x01a\x16\xE5V[a\x17\x0BV[a\x18\xE9V[V[\x91a\x1C\xD4\x92a\x1C\xC2a\x0C\xF2V[P\x91a\x1C\xCCa\x17!V[\x90\x91\x92a\x1C\xFCV[\x90V[a\x1C\xE6a\x1C\xEC\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x01\x80\x92\x11a\x1C\xF7WV[a\x0BuV[\x91a\x1D\x05a\x0C\xF2V[Pa\x1D\x1Aa\x1D\x14\x84\x83\x90a\x172V[\x15a\x01tV[\x80a\x1D\x97W[a\x1D,WPPPP_\x90V[a\x1D\x92\x93a\x1Dm\x92a\x1Dca\x1DWa\x1DRa\x1DK`\x01\x89\x01\x85\x90a\x16\xE5V[\x85\x90a\x17\x0BV[a\x10\x96V[\x91\x86\x90\x85\x90\x85\x92a\x1CjV[\x84\x92\x90\x91\x92a\x1CjV[a\x1D\x8C_a\x1D{`\x01a\x19\xE4V[\x92\x01\x91a\x1D\x87\x83a\x18AV[a\x1C\xD7V[\x90a\x1AZV[`\x01\x90V[Pa\x1D\xA3\x83\x83\x90a\x172V[a\x1D V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6105bb565b61001d5f356100ec565b806301ffc9a7146100e7578063248a9ca3146100e25780632f2ff15d146100dd57806336568abe146100d85780633f4ba83a146100d35780635681706b146100ce5780635c975abb146100c957806376a6840b146100c45780638456cb59146100bf57806391d14854146100ba578063a217fddf146100b5578063d547741f146100b05763ec87621c0361000e57610586565b610523565b6104ee565b61047d565b61044a565b610414565b6103df565b6103a9565b610327565b6102e4565b6102b0565b61020f565b610174565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61011581610100565b0361011c57565b5f80fd5b9050359061012d8261010c565b565b9060208282031261014857610145915f01610120565b90565b6100fc565b151590565b61015b9061014d565b9052565b9190610172905f60208501940190610152565b565b346101a4576101a061018f61018a36600461012f565b6105c3565b6101976100f2565b9182918261015f565b0390f35b6100f8565b90565b6101b5816101a9565b036101bc57565b5f80fd5b905035906101cd826101ac565b565b906020828203126101e8576101e5915f016101c0565b90565b6100fc565b6101f6906101a9565b9052565b919061020d905f602085019401906101ed565b565b3461023f5761023b61022a6102253660046101cf565b610652565b6102326100f2565b918291826101fa565b0390f35b6100f8565b60018060a01b031690565b61025890610244565b90565b6102648161024f565b0361026b57565b5f80fd5b9050359061027c8261025b565b565b91906040838203126102a6578061029a6102a3925f86016101c0565b9360200161026f565b90565b6100fc565b5f0190565b346102df576102c96102c336600461027e565b9061069d565b6102d16100f2565b806102db816102ab565b0390f35b6100f8565b34610313576102fd6102f736600461027e565b906106a9565b6103056100f2565b8061030f816102ab565b0390f35b6100f8565b5f91031261032257565b6100fc565b3461035557610337366004610318565b61033f610715565b6103476100f2565b80610351816102ab565b0390f35b6100f8565b9190604083820312610382578061037661037f925f860161026f565b936020016101c0565b90565b6100fc565b6103909061024f565b9052565b91906103a7905f60208501940190610387565b565b346103da576103d66103c56103bf36600461035a565b906107d9565b6103cd6100f2565b91829182610394565b0390f35b6100f8565b3461040f576103ef366004610318565b61040b6103fa610898565b6104026100f2565b9182918261015f565b0390f35b6100f8565b346104455761044161043061042a36600461035a565b90610a54565b6104386100f2565b91829182610394565b0390f35b6100f8565b346104785761045a366004610318565b610462610a8d565b61046a6100f2565b80610474816102ab565b0390f35b6100f8565b346104ae576104aa61049961049336600461027e565b90610aad565b6104a16100f2565b9182918261015f565b0390f35b6100f8565b90565b5f1b90565b6104cf6104ca6104d4926104b3565b6104b6565b6101a9565b90565b6104e05f6104bb565b90565b6104eb6104d7565b90565b3461051e576104fe366004610318565b61051a6105096104e3565b6105116100f2565b918291826101fa565b0390f35b6100f8565b346105525761053c61053636600461027e565b90610b00565b6105446100f2565b8061054e816102ab565b0390f35b6100f8565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610583610557565b90565b346105b657610596366004610318565b6105b26105a161057b565b6105a96100f2565b918291826101fa565b0390f35b6100f8565b5f80fd5b5f90565b6105cb6105bf565b50806105e66105e0637965db0b60e01b610100565b91610100565b149081156105f3575b5090565b6105fd9150610b0c565b5f6105ef565b5f90565b610610906101a9565b90565b9061061d90610607565b5f5260205260405f2090565b5f1c90565b90565b61063d61064291610629565b61062e565b90565b61064f9054610631565b90565b600161066a61067092610663610603565b505f610613565b01610645565b90565b9061068e9161068961068482610652565b610b32565b610690565b565b9061069a91610b8b565b50565b906106a791610673565b565b90806106c46106be6106b9610c36565b61024f565b9161024f565b036106d5576106d291610c43565b50565b5f63334bd91960e11b8152806106ed600482016102ab565b0390fd5b6107016106fc6104d7565b610b32565b61070961070b565b565b610713610d44565b565b61071d6106f1565b565b5f90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061074b90610723565b810190811067ffffffffffffffff82111761076557604052565b61072d565b9061077d6107766100f2565b9283610741565b565b5190565b905090565b90825f9392825e0152565b6107b86107af926020926107a68161077f565b94858093610783565b93849101610788565b0190565b6107ca906107d09392610793565b90610793565b90565b60200190565b9061082061085561086e936107ec61071f565b5061082f612082916108006020840161076a565b92808452610fef60208501396108146100f2565b94859160208301610394565b60208201810382520384610741565b61084661083a6100f2565b938492602084016107bc565b60208201810382520382610741565b6108676108618261077f565b916107d3565b2090610d5a565b90565b60ff1690565b61088361088891610629565b610871565b90565b6108959054610877565b90565b6108a06105bf565b506108ab600161088b565b90565b906108c192916108bc610d7b565b610942565b90565b90565b6108db6108d66108e0926104b3565b6108c4565b610244565b90565b6108ec906108c7565b90565b90565b61090661090161090b926104b3565b6108c4565b6108ef565b90565b61092261091d61092792610244565b6108c4565b610244565b90565b6109339061090e565b90565b61093f9061092a565b90565b919091508161096161095b6109565f6108e3565b61024f565b9161024f565b14610a38576109e9906109a36109d861208261097f6020820161076a565b90808252610fef60208301396109b2866109976100f2565b94859160208301610394565b60208201810382520384610741565b6109c96109bd6100f2565b938492602084016107bc565b60208201810382520382610741565b6109e45f9291926108f2565b610dd5565b908190610a1f610a197f1da049b3a4edbc0803adcb4308ec858bb7fbd79e62a31c7153a1a11273ed57e593610936565b91610936565b91610a286100f2565b80610a32816102ab565b0390a390565b5f63d92e233d60e01b815280610a50600482016102ab565b0390fd5b90610a6691610a6161071f565b6108ae565b90565b610a79610a746104d7565b610b32565b610a81610a83565b565b610a8b610f22565b565b610a95610a69565b565b90610aa190610936565b5f5260205260405f2090565b610ad3915f610ac8610ace93610ac16105bf565b5082610613565b01610a97565b61088b565b90565b90610af191610aec610ae782610652565b610b32565b610af3565b565b90610afd91610c43565b50565b90610b0a91610ad6565b565b610b146105bf565b50610b2e610b286301ffc9a760e01b610100565b91610100565b1490565b610b4490610b3e610c36565b90610f4f565b565b90610b5260ff916104b6565b9181191691161790565b610b659061014d565b90565b90565b90610b80610b7b610b8792610b5c565b610b68565b8254610b46565b9055565b610b936105bf565b50610ba8610ba2828490610aad565b1561014d565b5f14610c3057610bcf6001610bca5f610bc2818690610613565b018590610a97565b610b6b565b90610bd8610c36565b90610c15610c0f610c097f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610607565b92610936565b92610936565b92610c1e6100f2565b80610c28816102ab565b0390a4600190565b50505f90565b610c3e61071f565b503390565b610c4b6105bf565b50610c57818390610aad565b5f14610cde57610c7d5f610c785f610c70818690610613565b018590610a97565b610b6b565b90610c86610c36565b90610cc3610cbd610cb77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610607565b92610936565b92610936565b92610ccc6100f2565b80610cd6816102ab565b0390a4600190565b50505f90565b610cec610f8a565b610cf4610cf6565b565b610d015f6001610b6b565b610d09610c36565b610d3f7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa91610d366100f2565b91829182610394565b0390a1565b610d4c610ce4565b565b610d579061092a565b90565b90610d7891610d6761071f565b5090610d7230610d4e565b91610fbd565b90565b610d83610898565b610d8957565b5f63d93c066560e01b815280610da1600482016102ab565b0390fd5b610dae906108ef565b9052565b916020610dd3929493610dcc60408201965f830190610da5565b0190610da5565b565b919091610de061071f565b50610dea30610d4e565b31610dfd610df7836108ef565b916108ef565b10610e9a57610e0b8261077f565b610e1d610e175f6108f2565b916108ef565b14610e7e5760208251920190f5903d1519821516610e735781610e50610e4a610e455f6108e3565b61024f565b9161024f565b14610e5757565b5f63b06ebf3d60e01b815280610e6f600482016102ab565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b815280610e96600482016102ab565b0390fd5b610ea330610d4e565b31610ebe5f92839263cf47918160e01b845260048401610db2565b0390fd5b610eca610d7b565b610ed2610ed4565b565b610edf600180610b6b565b610ee7610c36565b610f1d7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610f146100f2565b91829182610394565b0390a1565b610f2a610ec2565b565b916020610f4d929493610f4660408201965f830190610387565b01906101ed565b565b90610f64610f5e838390610aad565b1561014d565b610f6c575050565b610f865f92839263e2517d3f60e01b845260048401610f2c565b0390fd5b610f9b610f95610898565b1561014d565b610fa157565b5f638dfc202b60e01b815280610fb9600482016102ab565b0390fd5b91600b92610fc961071f565b50604051926040840152602083015281520160ff8153605560018060a01b039120169056fe60806040523461002f576100196100146100f4565b610115565b610021610034565b611da86102da8239611da890f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126120828038038061010781610083565b9283398101906100d6565b90565b61011e90610120565b565b6101299061017b565b565b90565b90565b61014561014061014a9261012b565b61012e565b61009c565b90565b61015690610131565b90565b610162906100a7565b9052565b9190610179905f60208501940190610159565b565b8061019661019061018b5f61014d565b6100a7565b916100a7565b146101a6576101a49061027a565b565b6101c96101b25f61014d565b5f918291631e4fbdf760e01b835260048301610166565b0390fd5b5f1c90565b60018060a01b031690565b6101e96101ee916101cd565b6101d2565b90565b6101fb90546101dd565b90565b5f1b90565b9061021460018060a01b03916101fe565b9181191691161790565b61023261022d6102379261009c565b61012e565b61009c565b90565b6102439061021e565b90565b61024f9061023a565b90565b90565b9061026a61026561027192610246565b610252565b8254610203565b9055565b5f0190565b6102835f6101f1565b61028d825f610255565b906102c16102bb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610246565b91610246565b916102ca610034565b806102d481610275565b0390a356fe60806040526004361015610013575b610791565b61001d5f356100cc565b806304f386f4146100c7578063052eefd1146100c25780630838bbd4146100bd5780631b42c711146100b857806321284f7e146100b3578063715018a6146100ae5780637a3979dc146100a95780638da5cb5b146100a4578063a213fd221461009f578063b1c61e001461009a5763f2fde38b0361000e5761075e565b61072a565b6106ba565b6105d3565b610578565b610486565b610451565b610329565b610247565b6101c9565b610141565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100f8906100e4565b90565b610104816100ef565b0361010b57565b5f80fd5b9050359061011c826100fb565b565b9060208282031261013757610134915f0161010f565b90565b6100dc565b5f0190565b3461016f5761015961015436600461011e565b610839565b6101616100d2565b8061016b8161013c565b0390f35b6100d8565b151590565b61018281610174565b0361018957565b5f80fd5b9050359061019a82610179565b565b91906040838203126101c457806101b86101c1925f860161010f565b9360200161018d565b90565b6100dc565b346101f8576101e26101dc36600461019c565b906108ff565b6101ea6100d2565b806101f48161013c565b0390f35b6100d8565b6002111561020757565b5f80fd5b90503590610218826101fd565b565b9190604083820312610242578061023661023f925f860161010f565b9360200161020b565b90565b6100dc565b346102765761026061025a36600461021a565b90610a89565b6102686100d2565b806102728161013c565b0390f35b6100d8565b5f91031261028557565b6100dc565b5190565b60209181520190565b60200190565b6102a6906100ef565b9052565b906102b78160209361029d565b0190565b60200190565b906102de6102d86102d18461028a565b809361028e565b92610297565b905f5b8181106102ee5750505090565b90919261030761030160019286516102aa565b946102bb565b91019190916102e1565b6103269160208201915f8184039101526102c1565b90565b346103595761033936600461027b565b610355610344610be7565b61034c6100d2565b91829182610311565b0390f35b6100d8565b90565b61037561037061037a926100e4565b61035e565b6100e4565b90565b61038690610361565b90565b6103929061037d565b90565b9061039f90610389565b5f5260205260405f2090565b1c90565b60ff1690565b6103c59060086103ca93026103ab565b6103af565b90565b906103d891546103b5565b90565b6103f1906103ec6003915f92610395565b6103cd565b90565b634e487b7160e01b5f52602160045260245ffd5b6002111561041257565b6103f4565b9061042182610408565b565b61042c90610417565b90565b61043890610423565b9052565b919061044f905f6020850194019061042f565b565b346104815761047d61046c61046736600461011e565b6103db565b6104746100d2565b9182918261043c565b0390f35b6100d8565b346104b45761049636600461027b565b61049e610ce8565b6104a66100d2565b806104b08161013c565b0390f35b6100d8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104ff5781359167ffffffffffffffff83116104fa5760200192600183028401116104f557565b6104c1565b6104bd565b6104b9565b916060838303126105515761051b825f850161010f565b92610529836020830161010f565b92604082013567ffffffffffffffff811161054c5761054892016104c5565b9091565b6100e0565b6100dc565b61055f90610174565b9052565b9190610576905f60208501940190610556565b565b346105ac576105a861059761058e366004610504565b92919091610ded565b61059f6100d2565b91829182610563565b0390f35b6100d8565b6105ba906100ef565b9052565b91906105d1905f602085019401906105b1565b565b34610603576105e336600461027b565b6105ff6105ee6110a3565b6105f66100d2565b918291826105be565b0390f35b6100d8565b5190565b60209181520190565b60200190565b61062490610423565b9052565b906106358160209361061b565b0190565b60200190565b9061065c61065661064f84610608565b809361060c565b92610615565b905f5b81811061066c5750505090565b90919261068561067f6001928651610628565b94610639565b910191909161065f565b90916106a96106b79360408401908482035f8601526102c1565b91602081840391015261063f565b90565b346106eb576106ca36600461027b565b6106d261114b565b906106e76106de6100d2565b9283928361068f565b0390f35b6100d8565b90916060828403126107255761072261070b845f850161010f565b93610719816020860161020b565b9360400161018d565b90565b6100dc565b346107595761074361073d3660046106f0565b916112ea565b61074b6100d2565b806107558161013c565b0390f35b6100d8565b3461078c5761077661077136600461011e565b61135c565b61077e6100d2565b806107888161013c565b0390f35b6100d8565b5f80fd5b6107a6906107a1611367565b61081a565b565b1b90565b919060086107c79102916107c160ff846107a8565b926107a8565b9181191691161790565b6107da90610417565b90565b90565b91906107f66107f16107fe936107d1565b6107dd565b9083546107ac565b9055565b5f90565b61081891610812610802565b916107e0565b565b5f6108326108379261082b8161153d565b6003610395565b610806565b565b61084290610795565b565b9061085691610851611367565b610893565b565b5f1b90565b9061086960ff91610858565b9181191691161790565b9061088861088361088f926107d1565b6107dd565b825461085d565b9055565b9061089e90826116d9565b6108b35f6108ae60038490610395565b610873565b5f6108e76108e17fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916108f06100d2565b806108fa8161013c565b0390a3565b9061090991610844565b565b9061091d91610918611367565b610973565b565b90565b61093661093161093b9261091f565b61035e565b6100e4565b90565b61094790610922565b90565b90565b5f1c90565b61095e6109639161094d565b6103af565b90565b6109709054610952565b90565b908161098f6109896109845f61093e565b6100ef565b916100ef565b14610a6d576109b16109ab60016109a6859161094a565b611732565b15610174565b610a51576109c96109c460038490610395565b610966565b91826109dd6109d784610417565b91610417565b14610a4c576109f7826109f260038490610395565b610873565b91610a34610a2e610a287fa09388b78c1a36296c3bc4cc7a25b5768b1d9e0e628ed553e26c26aaedf9462295610389565b926107d1565b926107d1565b92610a3d6100d2565b80610a478161013c565b0390a4565b505050565b5f633d0f293d60e01b815280610a696004820161013c565b0390fd5b5f63e6c4247b60e01b815280610a856004820161013c565b0390fd5b90610a939161090b565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610ac290610a9a565b810190811067ffffffffffffffff821117610adc57604052565b610aa4565b90610af4610aed6100d2565b9283610ab8565b565b67ffffffffffffffff8111610b0e5760208091020190565b610aa4565b90610b25610b2083610af6565b610ae1565b918252565b369037565b90610b54610b3c83610b13565b92602080610b4a8693610af6565b9201910390610b2a565b565b90565b610b6d610b68610b729261091f565b61035e565b610b56565b90565b634e487b7160e01b5f52601160045260245ffd5b610b9290610b56565b5f198114610ba05760010190565b610b75565b634e487b7160e01b5f52603260045260245ffd5b90610bc38261028a565b811015610bd4576020809102010190565b610ba5565b90610be3906100ef565b9052565b610bef610a95565b50610c02610bfd600161094a565b61184e565b610c0b81610b2f565b610c1d610c18600161094a565b611865565b610c265f610b59565b905b81610c3b610c3586610b56565b91610b56565b1080610ca0575b15610c9757610c7381610c64610c7b93610c5f8791879092610bb9565b610bd9565b610c6e600161094a565b61189f565b919015610174565b610c8f57610c899091610b89565b90610c28565b505090505b90565b50509050610c94565b5080610cbc610cb6610cb15f61093e565b6100ef565b916100ef565b1415610c42565b610ccb611367565b610cd3610cd5565b565b610ce6610ce15f61093e565b611909565b565b610cf0610cc3565b565b5f90565b610cff90610361565b90565b610d0b90610cf6565b90565b610d179061037d565b90565b60e01b90565b90505190610d2d82610179565b565b90602082820312610d4857610d45915f01610d20565b90565b6100dc565b60209181520190565b90825f939282370152565b9190610d7b81610d7481610d8095610d4d565b8095610d56565b610a9a565b0190565b610daa610db79593949294610da060608401965f8501906105b1565b60208301906105b1565b6040818503910152610d61565b90565b610dc26100d2565b3d5f823e3d90fd5b916020610deb929493610de460408201965f8301906105b1565b01906105b1565b565b91939290610df9610cf2565b50610e0c610e07600161094a565b611865565b9485610e28610e22610e1d5f61093e565b6100ef565b916100ef565b14611068575f959295915f935b80610e50610e4a610e455f61093e565b6100ef565b916100ef565b1461105b57610e69610e6460038390610395565b610966565b610e7b610e755f610417565b91610417565b145f14610fa857876020610e96610e9184610d02565b610d0e565b637a3979dc90610ebb8a92610ec688968a610eaf6100d2565b98899788968796610d1a565b865260048601610d84565b03915afa8015610fa357610ee2915f91610f75575b5015610174565b610f5557610efd610f05915b610ef8600161094a565b61189f565b919015610174565b15610e355750505090919293505b9081610f44575b50610f255750600190565b610f40905f91829163a86c8c0b60e01b8352600483016105be565b0390fd5b610f4f915015610174565b5f610f1a565b8590610f715f92839263539b48a560e11b845260048401610dca565b0390fd5b610f96915060203d8111610f9c575b610f8e8183610ab8565b810190610d2f565b5f610edb565b503d610f84565b610dba565b9250600192876020610fc1610fbc84610d02565b610d0e565b637a3979dc90610fe68a92610ff188968a610fda6100d2565b98899788968796610d1a565b865260048601610d84565b03915afa908115611056575f91611028575b50611015575b610efd610f0591610eee565b9350610f05610efd600195915050611009565b611049915060203d811161104f575b6110418183610ab8565b810190610d2f565b5f611003565b503d611037565b610dba565b5050509091929350610f13565b505050509050600190565b5f90565b60018060a01b031690565b61108e6110939161094d565b611077565b90565b6110a09054611082565b90565b6110ab611073565b506110b55f611096565b90565b606090565b67ffffffffffffffff81116110d55760208091020190565b610aa4565b906110ec6110e7836110bd565b610ae1565b918252565b369037565b9061111b611103836110da565b9260208061111186936110bd565b92019103906110f1565b565b9061112782610608565b811015611138576020809102010190565b610ba5565b9061114790610417565b9052565b611153610a95565b5061115c6110b8565b5061116f61116a600161094a565b61184e565b61117881610b2f565b90611182816110f6565b92611195611190600161094a565b611865565b9261119f5f610b59565b935b846111b46111ae86610b56565b91610b56565b1080611245575b1561123b57611215816111dd61121d936111d886918a9092610bb9565b610bd9565b6112066111f46111ef60038490610395565b610966565b6112018a918a909261111d565b61113d565b611210600161094a565b61189f565b919015610174565b6112315761122b9094610b89565b936111a1565b50915091505b9190565b5091509150611237565b508061126161125b6112565f61093e565b6100ef565b916100ef565b14156111bb565b9061127b9291611276611367565b61127d565b565b909161128990826116d9565b61129e8261129960038490610395565b610873565b906112d26112cc7fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916112db6100d2565b806112e58161013c565b0390a3565b906112f59291611268565b565b61130890611303611367565b61130a565b565b8061132561131f61131a5f61093e565b6100ef565b916100ef565b146113355761133390611909565b565b6113586113415f61093e565b5f918291631e4fbdf760e01b8352600483016105be565b0390fd5b611365906112f7565b565b61136f6110a3565b61138861138261137d611968565b6100ef565b916100ef565b0361138f57565b6113b161139a611968565b5f91829163118cdaa760e01b8352600483016105be565b0390fd5b6113c6906113c1611367565b611453565b565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61140560136020926113c8565b61140e816113d1565b0190565b6114279060208101905f8183039101526113f8565b90565b1561143157565b6114396100d2565b62461bcd60e51b81528061144f60048201611412565b0390fd5b8061146e6114686114635f61093e565b6100ef565b916100ef565b146115215761149061148a6001611485849161094a565b611732565b15610174565b611505576114c36114ab60016114a6849161094a565b611a7a565b6114bd6114b7846100ef565b916100ef565b1461142a565b6114ed7fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610389565b906114f66100d2565b806115008161013c565b0390a2565b5f633d0f293d60e01b81528061151d6004820161013c565b0390fd5b5f63e6c4247b60e01b8152806115396004820161013c565b0390fd5b611546906113b5565b565b9061155a91611555611367565b6115de565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61159060116020926113c8565b6115998161155c565b0190565b6115b29060208101905f818303910152611583565b90565b156115bc57565b6115c46100d2565b62461bcd60e51b8152806115da6004820161159d565b0390fd5b90816115fa6115f46115ef5f61093e565b6100ef565b916100ef565b146116bd57611613600161160e849161094a565b611732565b6116a15761161f610cf2565b505f146116855761164361163d6001611638849161094a565b611bce565b5b6115b5565b61166d7f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610389565b906116766100d2565b806116808161013c565b0390a2565b61164361169c6001611697849161094a565b611bae565b61163e565b5f63516c350f60e11b8152806116b96004820161013c565b0390fd5b5f63e6c4247b60e01b8152806116d56004820161013c565b0390fd5b906116e391611548565b565b906116ef90610389565b5f5260205260405f2090565b5f90565b61170890610174565b90565b90611715906116ff565b5f5260205260405f2090565b61172a5f61093e565b90565b600190565b61173a610cf2565b5061176261175d61174f6001840185906116e5565b6117576116fb565b9061170b565b611096565b61177b611775611770611721565b6100ef565b916100ef565b14806117df575b5f146117d8576117c26117bc6117b76117a960016117c895016117a3611721565b906116e5565b6117b161172d565b9061170b565b611096565b926100ef565b916100ef565b145f146117d457600190565b5f90565b5050600190565b506118076118026117f46001840185906116e5565b6117fc61172d565b9061170b565b611096565b61182061181a611815611721565b6100ef565b916100ef565b14611782565b5f90565b90565b61183961183e9161094d565b61182a565b90565b61184b905461182d565b90565b5f6118629161185b611826565b5001611841565b90565b611897611889600161189c93611879611073565b5001611883611721565b906116e5565b61189161172d565b9061170b565b611096565b90565b906118c5916118ac610cf2565b506118b5611073565b50906118bf61172d565b91611bee565b91909190565b906118dc60018060a01b0391610858565b9181191691161790565b90565b906118fe6118f961190592610389565b6118e6565b82546118cb565b9055565b6119125f611096565b61191c825f6118e9565b9061195061194a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610389565b91610389565b916119596100d2565b806119638161013c565b0390a3565b611970611073565b503390565b61197e5f61093e565b90565b919060086119a191029161199b60018060a01b03846107a8565b926107a8565b9181191691161790565b91906119c16119bc6119c993610389565b6118e6565b908354611981565b9055565b6119df916119d9611073565b916119ab565b565b90565b6119f86119f36119fd926119e1565b61035e565b610b56565b90565b611a0f611a1591939293610b56565b92610b56565b8203918211611a2057565b610b75565b90611a315f1991610858565b9181191691161790565b611a4f611a4a611a5492610b56565b61035e565b610b56565b90565b90565b90611a6f611a6a611a7692611a3b565b611a57565b8254611a25565b9055565b611a82611073565b5081611a9d611a97611a92611975565b6100ef565b916100ef565b148015611b94575b611b865780611b0e611b8392611ad8611ad3611ac56001860188906116e5565b611acd6116fb565b9061170b565b611096565b611aff611afa611aec6001870189906116e5565b611af461172d565b9061170b565b611096565b90611b0861172d565b92611c6a565b611b365f611b31611b236001850187906116e5565b611b2b6116fb565b9061170b565b6119cd565b611b5e5f611b59611b4b6001850187906116e5565b611b5361172d565b9061170b565b6119cd565b611b7d5f611b6c60016119e4565b920191611b7883611841565b611a00565b90611a5a565b90565b5050611b915f61093e565b90565b50611ba9611ba3828490611732565b15610174565b611aa5565b90611bcb91611bbb610cf2565b5090611bc56116fb565b91611cb5565b90565b90611beb91611bdb610cf2565b5090611be561172d565b91611cb5565b90565b91611bf7610cf2565b50611c00611073565b50611c15611c0f848490611732565b15610174565b5f14611c2c575050505f90611c295f61093e565b90565b611c3f611c44926001611c4995016116e5565b61170b565b611096565b9081611c64611c5e611c59611721565b6100ef565b916100ef565b14159190565b9192611ca9611cae926001611cb396611ca283611c9d611c8d858b0185906116e5565b611c978915610174565b9061170b565b6118e9565b95016116e5565b61170b565b6118e9565b565b91611cd492611cc2610cf2565b5091611ccc611721565b909192611cfc565b90565b611ce6611cec91939293610b56565b92610b56565b8201809211611cf757565b610b75565b91611d05610cf2565b50611d1a611d14848390611732565b15610174565b80611d97575b611d2c57505050505f90565b611d9293611d6d92611d63611d57611d52611d4b6001890185906116e5565b859061170b565b611096565b91869085908592611c6a565b8492909192611c6a565b611d8c5f611d7b60016119e4565b920191611d8783611841565b611cd7565b90611a5a565b600190565b50611da3838390611732565b611d2056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\xBBV[a\0\x1D_5a\0\xECV[\x80c\x01\xFF\xC9\xA7\x14a\0\xE7W\x80c$\x8A\x9C\xA3\x14a\0\xE2W\x80c//\xF1]\x14a\0\xDDW\x80c6V\x8A\xBE\x14a\0\xD8W\x80c?K\xA8:\x14a\0\xD3W\x80cV\x81pk\x14a\0\xCEW\x80c\\\x97Z\xBB\x14a\0\xC9W\x80cv\xA6\x84\x0B\x14a\0\xC4W\x80c\x84V\xCBY\x14a\0\xBFW\x80c\x91\xD1HT\x14a\0\xBAW\x80c\xA2\x17\xFD\xDF\x14a\0\xB5W\x80c\xD5Gt\x1F\x14a\0\xB0Wc\xEC\x87b\x1C\x03a\0\x0EWa\x05\x86V[a\x05#V[a\x04\xEEV[a\x04}V[a\x04JV[a\x04\x14V[a\x03\xDFV[a\x03\xA9V[a\x03'V[a\x02\xE4V[a\x02\xB0V[a\x02\x0FV[a\x01tV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x15\x81a\x01\0V[\x03a\x01\x1CWV[_\x80\xFD[\x90P5\x90a\x01-\x82a\x01\x0CV[V[\x90` \x82\x82\x03\x12a\x01HWa\x01E\x91_\x01a\x01 V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x01[\x90a\x01MV[\x90RV[\x91\x90a\x01r\x90_` \x85\x01\x94\x01\x90a\x01RV[V[4a\x01\xA4Wa\x01\xA0a\x01\x8Fa\x01\x8A6`\x04a\x01/V[a\x05\xC3V[a\x01\x97a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[a\x01\xB5\x81a\x01\xA9V[\x03a\x01\xBCWV[_\x80\xFD[\x90P5\x90a\x01\xCD\x82a\x01\xACV[V[\x90` \x82\x82\x03\x12a\x01\xE8Wa\x01\xE5\x91_\x01a\x01\xC0V[\x90V[a\0\xFCV[a\x01\xF6\x90a\x01\xA9V[\x90RV[\x91\x90a\x02\r\x90_` \x85\x01\x94\x01\x90a\x01\xEDV[V[4a\x02?Wa\x02;a\x02*a\x02%6`\x04a\x01\xCFV[a\x06RV[a\x022a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02X\x90a\x02DV[\x90V[a\x02d\x81a\x02OV[\x03a\x02kWV[_\x80\xFD[\x90P5\x90a\x02|\x82a\x02[V[V[\x91\x90`@\x83\x82\x03\x12a\x02\xA6W\x80a\x02\x9Aa\x02\xA3\x92_\x86\x01a\x01\xC0V[\x93` \x01a\x02oV[\x90V[a\0\xFCV[_\x01\x90V[4a\x02\xDFWa\x02\xC9a\x02\xC36`\x04a\x02~V[\x90a\x06\x9DV[a\x02\xD1a\0\xF2V[\x80a\x02\xDB\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x03\x13Wa\x02\xFDa\x02\xF76`\x04a\x02~V[\x90a\x06\xA9V[a\x03\x05a\0\xF2V[\x80a\x03\x0F\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x03\"WV[a\0\xFCV[4a\x03UWa\x0376`\x04a\x03\x18V[a\x03?a\x07\x15V[a\x03Ga\0\xF2V[\x80a\x03Q\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x91\x90`@\x83\x82\x03\x12a\x03\x82W\x80a\x03va\x03\x7F\x92_\x86\x01a\x02oV[\x93` \x01a\x01\xC0V[\x90V[a\0\xFCV[a\x03\x90\x90a\x02OV[\x90RV[\x91\x90a\x03\xA7\x90_` \x85\x01\x94\x01\x90a\x03\x87V[V[4a\x03\xDAWa\x03\xD6a\x03\xC5a\x03\xBF6`\x04a\x03ZV[\x90a\x07\xD9V[a\x03\xCDa\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x04\x0FWa\x03\xEF6`\x04a\x03\x18V[a\x04\x0Ba\x03\xFAa\x08\x98V[a\x04\x02a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[4a\x04EWa\x04Aa\x040a\x04*6`\x04a\x03ZV[\x90a\nTV[a\x048a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x04xWa\x04Z6`\x04a\x03\x18V[a\x04ba\n\x8DV[a\x04ja\0\xF2V[\x80a\x04t\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x04\xAEWa\x04\xAAa\x04\x99a\x04\x936`\x04a\x02~V[\x90a\n\xADV[a\x04\xA1a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[_\x1B\x90V[a\x04\xCFa\x04\xCAa\x04\xD4\x92a\x04\xB3V[a\x04\xB6V[a\x01\xA9V[\x90V[a\x04\xE0_a\x04\xBBV[\x90V[a\x04\xEBa\x04\xD7V[\x90V[4a\x05\x1EWa\x04\xFE6`\x04a\x03\x18V[a\x05\x1Aa\x05\ta\x04\xE3V[a\x05\x11a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[4a\x05RWa\x05<a\x0566`\x04a\x02~V[\x90a\x0B\0V[a\x05Da\0\xF2V[\x80a\x05N\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x05\x83a\x05WV[\x90V[4a\x05\xB6Wa\x05\x966`\x04a\x03\x18V[a\x05\xB2a\x05\xA1a\x05{V[a\x05\xA9a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x90V[a\x05\xCBa\x05\xBFV[P\x80a\x05\xE6a\x05\xE0cye\xDB\x0B`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90\x81\x15a\x05\xF3W[P\x90V[a\x05\xFD\x91Pa\x0B\x0CV[_a\x05\xEFV[_\x90V[a\x06\x10\x90a\x01\xA9V[\x90V[\x90a\x06\x1D\x90a\x06\x07V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x06=a\x06B\x91a\x06)V[a\x06.V[\x90V[a\x06O\x90Ta\x061V[\x90V[`\x01a\x06ja\x06p\x92a\x06ca\x06\x03V[P_a\x06\x13V[\x01a\x06EV[\x90V[\x90a\x06\x8E\x91a\x06\x89a\x06\x84\x82a\x06RV[a\x0B2V[a\x06\x90V[V[\x90a\x06\x9A\x91a\x0B\x8BV[PV[\x90a\x06\xA7\x91a\x06sV[V[\x90\x80a\x06\xC4a\x06\xBEa\x06\xB9a\x0C6V[a\x02OV[\x91a\x02OV[\x03a\x06\xD5Wa\x06\xD2\x91a\x0CCV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x06\xED`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x07\x01a\x06\xFCa\x04\xD7V[a\x0B2V[a\x07\ta\x07\x0BV[V[a\x07\x13a\rDV[V[a\x07\x1Da\x06\xF1V[V[_\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07K\x90a\x07#V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07eW`@RV[a\x07-V[\x90a\x07}a\x07va\0\xF2V[\x92\x83a\x07AV[V[Q\x90V[\x90P\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x07\xB8a\x07\xAF\x92` \x92a\x07\xA6\x81a\x07\x7FV[\x94\x85\x80\x93a\x07\x83V[\x93\x84\x91\x01a\x07\x88V[\x01\x90V[a\x07\xCA\x90a\x07\xD0\x93\x92a\x07\x93V[\x90a\x07\x93V[\x90V[` \x01\x90V[\x90a\x08 a\x08Ua\x08n\x93a\x07\xECa\x07\x1FV[Pa\x08/a \x82\x91a\x08\0` \x84\x01a\x07jV[\x92\x80\x84Ra\x0F\xEF` \x85\x019a\x08\x14a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\x08Fa\x08:a\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\x08ga\x08a\x82a\x07\x7FV[\x91a\x07\xD3V[ \x90a\rZV[\x90V[`\xFF\x16\x90V[a\x08\x83a\x08\x88\x91a\x06)V[a\x08qV[\x90V[a\x08\x95\x90Ta\x08wV[\x90V[a\x08\xA0a\x05\xBFV[Pa\x08\xAB`\x01a\x08\x8BV[\x90V[\x90a\x08\xC1\x92\x91a\x08\xBCa\r{V[a\tBV[\x90V[\x90V[a\x08\xDBa\x08\xD6a\x08\xE0\x92a\x04\xB3V[a\x08\xC4V[a\x02DV[\x90V[a\x08\xEC\x90a\x08\xC7V[\x90V[\x90V[a\t\x06a\t\x01a\t\x0B\x92a\x04\xB3V[a\x08\xC4V[a\x08\xEFV[\x90V[a\t\"a\t\x1Da\t'\x92a\x02DV[a\x08\xC4V[a\x02DV[\x90V[a\t3\x90a\t\x0EV[\x90V[a\t?\x90a\t*V[\x90V[\x91\x90\x91P\x81a\taa\t[a\tV_a\x08\xE3V[a\x02OV[\x91a\x02OV[\x14a\n8Wa\t\xE9\x90a\t\xA3a\t\xD8a \x82a\t\x7F` \x82\x01a\x07jV[\x90\x80\x82Ra\x0F\xEF` \x83\x019a\t\xB2\x86a\t\x97a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\t\xC9a\t\xBDa\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\t\xE4_\x92\x91\x92a\x08\xF2V[a\r\xD5V[\x90\x81\x90a\n\x1Fa\n\x19\x7F\x1D\xA0I\xB3\xA4\xED\xBC\x08\x03\xAD\xCBC\x08\xEC\x85\x8B\xB7\xFB\xD7\x9Eb\xA3\x1CqS\xA1\xA1\x12s\xEDW\xE5\x93a\t6V[\x91a\t6V[\x91a\n(a\0\xF2V[\x80a\n2\x81a\x02\xABV[\x03\x90\xA3\x90V[_c\xD9.#=`\xE0\x1B\x81R\x80a\nP`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x90a\nf\x91a\naa\x07\x1FV[a\x08\xAEV[\x90V[a\nya\nta\x04\xD7V[a\x0B2V[a\n\x81a\n\x83V[V[a\n\x8Ba\x0F\"V[V[a\n\x95a\niV[V[\x90a\n\xA1\x90a\t6V[_R` R`@_ \x90V[a\n\xD3\x91_a\n\xC8a\n\xCE\x93a\n\xC1a\x05\xBFV[P\x82a\x06\x13V[\x01a\n\x97V[a\x08\x8BV[\x90V[\x90a\n\xF1\x91a\n\xECa\n\xE7\x82a\x06RV[a\x0B2V[a\n\xF3V[V[\x90a\n\xFD\x91a\x0CCV[PV[\x90a\x0B\n\x91a\n\xD6V[V[a\x0B\x14a\x05\xBFV[Pa\x0B.a\x0B(c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90V[a\x0BD\x90a\x0B>a\x0C6V[\x90a\x0FOV[V[\x90a\x0BR`\xFF\x91a\x04\xB6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Be\x90a\x01MV[\x90V[\x90V[\x90a\x0B\x80a\x0B{a\x0B\x87\x92a\x0B\\V[a\x0BhV[\x82Ta\x0BFV[\x90UV[a\x0B\x93a\x05\xBFV[Pa\x0B\xA8a\x0B\xA2\x82\x84\x90a\n\xADV[\x15a\x01MV[_\x14a\x0C0Wa\x0B\xCF`\x01a\x0B\xCA_a\x0B\xC2\x81\x86\x90a\x06\x13V[\x01\x85\x90a\n\x97V[a\x0BkV[\x90a\x0B\xD8a\x0C6V[\x90a\x0C\x15a\x0C\x0Fa\x0C\t\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x06\x07V[\x92a\t6V[\x92a\t6V[\x92a\x0C\x1Ea\0\xF2V[\x80a\x0C(\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C>a\x07\x1FV[P3\x90V[a\x0CKa\x05\xBFV[Pa\x0CW\x81\x83\x90a\n\xADV[_\x14a\x0C\xDEWa\x0C}_a\x0Cx_a\x0Cp\x81\x86\x90a\x06\x13V[\x01\x85\x90a\n\x97V[a\x0BkV[\x90a\x0C\x86a\x0C6V[\x90a\x0C\xC3a\x0C\xBDa\x0C\xB7\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x06\x07V[\x92a\t6V[\x92a\t6V[\x92a\x0C\xCCa\0\xF2V[\x80a\x0C\xD6\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C\xECa\x0F\x8AV[a\x0C\xF4a\x0C\xF6V[V[a\r\x01_`\x01a\x0BkV[a\r\ta\x0C6V[a\r?\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\r6a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\rLa\x0C\xE4V[V[a\rW\x90a\t*V[\x90V[\x90a\rx\x91a\rga\x07\x1FV[P\x90a\rr0a\rNV[\x91a\x0F\xBDV[\x90V[a\r\x83a\x08\x98V[a\r\x89WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\r\xA1`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\r\xAE\x90a\x08\xEFV[\x90RV[\x91` a\r\xD3\x92\x94\x93a\r\xCC`@\x82\x01\x96_\x83\x01\x90a\r\xA5V[\x01\x90a\r\xA5V[V[\x91\x90\x91a\r\xE0a\x07\x1FV[Pa\r\xEA0a\rNV[1a\r\xFDa\r\xF7\x83a\x08\xEFV[\x91a\x08\xEFV[\x10a\x0E\x9AWa\x0E\x0B\x82a\x07\x7FV[a\x0E\x1Da\x0E\x17_a\x08\xF2V[\x91a\x08\xEFV[\x14a\x0E~W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x0EsW\x81a\x0EPa\x0EJa\x0EE_a\x08\xE3V[a\x02OV[\x91a\x02OV[\x14a\x0EWWV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x0Eo`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x0E\x96`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x0E\xA30a\rNV[1a\x0E\xBE_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\r\xB2V[\x03\x90\xFD[a\x0E\xCAa\r{V[a\x0E\xD2a\x0E\xD4V[V[a\x0E\xDF`\x01\x80a\x0BkV[a\x0E\xE7a\x0C6V[a\x0F\x1D\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\x0F\x14a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\x0F*a\x0E\xC2V[V[\x91` a\x0FM\x92\x94\x93a\x0FF`@\x82\x01\x96_\x83\x01\x90a\x03\x87V[\x01\x90a\x01\xEDV[V[\x90a\x0Fda\x0F^\x83\x83\x90a\n\xADV[\x15a\x01MV[a\x0FlWPPV[a\x0F\x86_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0F,V[\x03\x90\xFD[a\x0F\x9Ba\x0F\x95a\x08\x98V[\x15a\x01MV[a\x0F\xA1WV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x0F\xB9`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x91`\x0B\x92a\x0F\xC9a\x07\x1FV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V\xFE`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x1D\xA8a\x02\xDA\x829a\x1D\xA8\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a \x82\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01 V[V[a\x01)\x90a\x01{V[V[\x90V[\x90V[a\x01Ea\x01@a\x01J\x92a\x01+V[a\x01.V[a\0\x9CV[\x90V[a\x01V\x90a\x011V[\x90V[a\x01b\x90a\0\xA7V[\x90RV[\x91\x90a\x01y\x90_` \x85\x01\x94\x01\x90a\x01YV[V[\x80a\x01\x96a\x01\x90a\x01\x8B_a\x01MV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xA6Wa\x01\xA4\x90a\x02zV[V[a\x01\xC9a\x01\xB2_a\x01MV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01fV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE9a\x01\xEE\x91a\x01\xCDV[a\x01\xD2V[\x90V[a\x01\xFB\x90Ta\x01\xDDV[\x90V[_\x1B\x90V[\x90a\x02\x14`\x01\x80`\xA0\x1B\x03\x91a\x01\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x022a\x02-a\x027\x92a\0\x9CV[a\x01.V[a\0\x9CV[\x90V[a\x02C\x90a\x02\x1EV[\x90V[a\x02O\x90a\x02:V[\x90V[\x90V[\x90a\x02ja\x02ea\x02q\x92a\x02FV[a\x02RV[\x82Ta\x02\x03V[\x90UV[_\x01\x90V[a\x02\x83_a\x01\xF1V[a\x02\x8D\x82_a\x02UV[\x90a\x02\xC1a\x02\xBB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02FV[\x91a\x02FV[\x91a\x02\xCAa\x004V[\x80a\x02\xD4\x81a\x02uV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\x91V[a\0\x1D_5a\0\xCCV[\x80c\x04\xF3\x86\xF4\x14a\0\xC7W\x80c\x05.\xEF\xD1\x14a\0\xC2W\x80c\x088\xBB\xD4\x14a\0\xBDW\x80c\x1BB\xC7\x11\x14a\0\xB8W\x80c!(O~\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cz9y\xDC\x14a\0\xA9W\x80c\x8D\xA5\xCB[\x14a\0\xA4W\x80c\xA2\x13\xFD\"\x14a\0\x9FW\x80c\xB1\xC6\x1E\0\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07^V[a\x07*V[a\x06\xBAV[a\x05\xD3V[a\x05xV[a\x04\x86V[a\x04QV[a\x03)V[a\x02GV[a\x01\xC9V[a\x01AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF8\x90a\0\xE4V[\x90V[a\x01\x04\x81a\0\xEFV[\x03a\x01\x0BWV[_\x80\xFD[\x90P5\x90a\x01\x1C\x82a\0\xFBV[V[\x90` \x82\x82\x03\x12a\x017Wa\x014\x91_\x01a\x01\x0FV[\x90V[a\0\xDCV[_\x01\x90V[4a\x01oWa\x01Ya\x01T6`\x04a\x01\x1EV[a\x089V[a\x01aa\0\xD2V[\x80a\x01k\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[\x15\x15\x90V[a\x01\x82\x81a\x01tV[\x03a\x01\x89WV[_\x80\xFD[\x90P5\x90a\x01\x9A\x82a\x01yV[V[\x91\x90`@\x83\x82\x03\x12a\x01\xC4W\x80a\x01\xB8a\x01\xC1\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x01\xF8Wa\x01\xE2a\x01\xDC6`\x04a\x01\x9CV[\x90a\x08\xFFV[a\x01\xEAa\0\xD2V[\x80a\x01\xF4\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[`\x02\x11\x15a\x02\x07WV[_\x80\xFD[\x90P5\x90a\x02\x18\x82a\x01\xFDV[V[\x91\x90`@\x83\x82\x03\x12a\x02BW\x80a\x026a\x02?\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x02\x0BV[\x90V[a\0\xDCV[4a\x02vWa\x02`a\x02Z6`\x04a\x02\x1AV[\x90a\n\x89V[a\x02ha\0\xD2V[\x80a\x02r\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x02\x85WV[a\0\xDCV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xA6\x90a\0\xEFV[\x90RV[\x90a\x02\xB7\x81` \x93a\x02\x9DV[\x01\x90V[` \x01\x90V[\x90a\x02\xDEa\x02\xD8a\x02\xD1\x84a\x02\x8AV[\x80\x93a\x02\x8EV[\x92a\x02\x97V[\x90_[\x81\x81\x10a\x02\xEEWPPP\x90V[\x90\x91\x92a\x03\x07a\x03\x01`\x01\x92\x86Qa\x02\xAAV[\x94a\x02\xBBV[\x91\x01\x91\x90\x91a\x02\xE1V[a\x03&\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xC1V[\x90V[4a\x03YWa\x0396`\x04a\x02{V[a\x03Ua\x03Da\x0B\xE7V[a\x03La\0\xD2V[\x91\x82\x91\x82a\x03\x11V[\x03\x90\xF3[a\0\xD8V[\x90V[a\x03ua\x03pa\x03z\x92a\0\xE4V[a\x03^V[a\0\xE4V[\x90V[a\x03\x86\x90a\x03aV[\x90V[a\x03\x92\x90a\x03}V[\x90V[\x90a\x03\x9F\x90a\x03\x89V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\xC5\x90`\x08a\x03\xCA\x93\x02a\x03\xABV[a\x03\xAFV[\x90V[\x90a\x03\xD8\x91Ta\x03\xB5V[\x90V[a\x03\xF1\x90a\x03\xEC`\x03\x91_\x92a\x03\x95V[a\x03\xCDV[\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x11\x15a\x04\x12WV[a\x03\xF4V[\x90a\x04!\x82a\x04\x08V[V[a\x04,\x90a\x04\x17V[\x90V[a\x048\x90a\x04#V[\x90RV[\x91\x90a\x04O\x90_` \x85\x01\x94\x01\x90a\x04/V[V[4a\x04\x81Wa\x04}a\x04la\x04g6`\x04a\x01\x1EV[a\x03\xDBV[a\x04ta\0\xD2V[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\0\xD8V[4a\x04\xB4Wa\x04\x966`\x04a\x02{V[a\x04\x9Ea\x0C\xE8V[a\x04\xA6a\0\xD2V[\x80a\x04\xB0\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04\xFFW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xFAW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xF5WV[a\x04\xC1V[a\x04\xBDV[a\x04\xB9V[\x91``\x83\x83\x03\x12a\x05QWa\x05\x1B\x82_\x85\x01a\x01\x0FV[\x92a\x05)\x83` \x83\x01a\x01\x0FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05LWa\x05H\x92\x01a\x04\xC5V[\x90\x91V[a\0\xE0V[a\0\xDCV[a\x05_\x90a\x01tV[\x90RV[\x91\x90a\x05v\x90_` \x85\x01\x94\x01\x90a\x05VV[V[4a\x05\xACWa\x05\xA8a\x05\x97a\x05\x8E6`\x04a\x05\x04V[\x92\x91\x90\x91a\r\xEDV[a\x05\x9Fa\0\xD2V[\x91\x82\x91\x82a\x05cV[\x03\x90\xF3[a\0\xD8V[a\x05\xBA\x90a\0\xEFV[\x90RV[\x91\x90a\x05\xD1\x90_` \x85\x01\x94\x01\x90a\x05\xB1V[V[4a\x06\x03Wa\x05\xE36`\x04a\x02{V[a\x05\xFFa\x05\xEEa\x10\xA3V[a\x05\xF6a\0\xD2V[\x91\x82\x91\x82a\x05\xBEV[\x03\x90\xF3[a\0\xD8V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x06$\x90a\x04#V[\x90RV[\x90a\x065\x81` \x93a\x06\x1BV[\x01\x90V[` \x01\x90V[\x90a\x06\\a\x06Va\x06O\x84a\x06\x08V[\x80\x93a\x06\x0CV[\x92a\x06\x15V[\x90_[\x81\x81\x10a\x06lWPPP\x90V[\x90\x91\x92a\x06\x85a\x06\x7F`\x01\x92\x86Qa\x06(V[\x94a\x069V[\x91\x01\x91\x90\x91a\x06_V[\x90\x91a\x06\xA9a\x06\xB7\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x02\xC1V[\x91` \x81\x84\x03\x91\x01Ra\x06?V[\x90V[4a\x06\xEBWa\x06\xCA6`\x04a\x02{V[a\x06\xD2a\x11KV[\x90a\x06\xE7a\x06\xDEa\0\xD2V[\x92\x83\x92\x83a\x06\x8FV[\x03\x90\xF3[a\0\xD8V[\x90\x91``\x82\x84\x03\x12a\x07%Wa\x07\"a\x07\x0B\x84_\x85\x01a\x01\x0FV[\x93a\x07\x19\x81` \x86\x01a\x02\x0BV[\x93`@\x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x07YWa\x07Ca\x07=6`\x04a\x06\xF0V[\x91a\x12\xEAV[a\x07Ka\0\xD2V[\x80a\x07U\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x07\x8CWa\x07va\x07q6`\x04a\x01\x1EV[a\x13\\V[a\x07~a\0\xD2V[\x80a\x07\x88\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[a\x07\xA6\x90a\x07\xA1a\x13gV[a\x08\x1AV[V[\x1B\x90V[\x91\x90`\x08a\x07\xC7\x91\x02\x91a\x07\xC1`\xFF\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07\xDA\x90a\x04\x17V[\x90V[\x90V[\x91\x90a\x07\xF6a\x07\xF1a\x07\xFE\x93a\x07\xD1V[a\x07\xDDV[\x90\x83Ta\x07\xACV[\x90UV[_\x90V[a\x08\x18\x91a\x08\x12a\x08\x02V[\x91a\x07\xE0V[V[_a\x082a\x087\x92a\x08+\x81a\x15=V[`\x03a\x03\x95V[a\x08\x06V[V[a\x08B\x90a\x07\x95V[V[\x90a\x08V\x91a\x08Qa\x13gV[a\x08\x93V[V[_\x1B\x90V[\x90a\x08i`\xFF\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08\x88a\x08\x83a\x08\x8F\x92a\x07\xD1V[a\x07\xDDV[\x82Ta\x08]V[\x90UV[\x90a\x08\x9E\x90\x82a\x16\xD9V[a\x08\xB3_a\x08\xAE`\x03\x84\x90a\x03\x95V[a\x08sV[_a\x08\xE7a\x08\xE1\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x08\xF0a\0\xD2V[\x80a\x08\xFA\x81a\x01<V[\x03\x90\xA3V[\x90a\t\t\x91a\x08DV[V[\x90a\t\x1D\x91a\t\x18a\x13gV[a\tsV[V[\x90V[a\t6a\t1a\t;\x92a\t\x1FV[a\x03^V[a\0\xE4V[\x90V[a\tG\x90a\t\"V[\x90V[\x90V[_\x1C\x90V[a\t^a\tc\x91a\tMV[a\x03\xAFV[\x90V[a\tp\x90Ta\tRV[\x90V[\x90\x81a\t\x8Fa\t\x89a\t\x84_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\nmWa\t\xB1a\t\xAB`\x01a\t\xA6\x85\x91a\tJV[a\x172V[\x15a\x01tV[a\nQWa\t\xC9a\t\xC4`\x03\x84\x90a\x03\x95V[a\tfV[\x91\x82a\t\xDDa\t\xD7\x84a\x04\x17V[\x91a\x04\x17V[\x14a\nLWa\t\xF7\x82a\t\xF2`\x03\x84\x90a\x03\x95V[a\x08sV[\x91a\n4a\n.a\n(\x7F\xA0\x93\x88\xB7\x8C\x1A6)l;\xC4\xCCz%\xB5v\x8B\x1D\x9E\x0Eb\x8E\xD5S\xE2l&\xAA\xED\xF9F\"\x95a\x03\x89V[\x92a\x07\xD1V[\x92a\x07\xD1V[\x92a\n=a\0\xD2V[\x80a\nG\x81a\x01<V[\x03\x90\xA4V[PPPV[_c=\x0F)=`\xE0\x1B\x81R\x80a\ni`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\n\x85`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\n\x93\x91a\t\x0BV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xC2\x90a\n\x9AV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\xDCW`@RV[a\n\xA4V[\x90a\n\xF4a\n\xEDa\0\xD2V[\x92\x83a\n\xB8V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x0EW` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x0B%a\x0B \x83a\n\xF6V[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x0BTa\x0B<\x83a\x0B\x13V[\x92` \x80a\x0BJ\x86\x93a\n\xF6V[\x92\x01\x91\x03\x90a\x0B*V[V[\x90V[a\x0Bma\x0Bha\x0Br\x92a\t\x1FV[a\x03^V[a\x0BVV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0B\x92\x90a\x0BVV[_\x19\x81\x14a\x0B\xA0W`\x01\x01\x90V[a\x0BuV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x0B\xC3\x82a\x02\x8AV[\x81\x10\x15a\x0B\xD4W` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x0B\xE3\x90a\0\xEFV[\x90RV[a\x0B\xEFa\n\x95V[Pa\x0C\x02a\x0B\xFD`\x01a\tJV[a\x18NV[a\x0C\x0B\x81a\x0B/V[a\x0C\x1Da\x0C\x18`\x01a\tJV[a\x18eV[a\x0C&_a\x0BYV[\x90[\x81a\x0C;a\x0C5\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x0C\xA0W[\x15a\x0C\x97Wa\x0Cs\x81a\x0Cda\x0C{\x93a\x0C_\x87\x91\x87\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x0Cn`\x01a\tJV[a\x18\x9FV[\x91\x90\x15a\x01tV[a\x0C\x8FWa\x0C\x89\x90\x91a\x0B\x89V[\x90a\x0C(V[PP\x90P[\x90V[PP\x90Pa\x0C\x94V[P\x80a\x0C\xBCa\x0C\xB6a\x0C\xB1_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x0CBV[a\x0C\xCBa\x13gV[a\x0C\xD3a\x0C\xD5V[V[a\x0C\xE6a\x0C\xE1_a\t>V[a\x19\tV[V[a\x0C\xF0a\x0C\xC3V[V[_\x90V[a\x0C\xFF\x90a\x03aV[\x90V[a\r\x0B\x90a\x0C\xF6V[\x90V[a\r\x17\x90a\x03}V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\r-\x82a\x01yV[V[\x90` \x82\x82\x03\x12a\rHWa\rE\x91_\x01a\r V[\x90V[a\0\xDCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r{\x81a\rt\x81a\r\x80\x95a\rMV[\x80\x95a\rVV[a\n\x9AV[\x01\x90V[a\r\xAAa\r\xB7\x95\x93\x94\x92\x94a\r\xA0``\x84\x01\x96_\x85\x01\x90a\x05\xB1V[` \x83\x01\x90a\x05\xB1V[`@\x81\x85\x03\x91\x01Ra\raV[\x90V[a\r\xC2a\0\xD2V[=_\x82>=\x90\xFD[\x91` a\r\xEB\x92\x94\x93a\r\xE4`@\x82\x01\x96_\x83\x01\x90a\x05\xB1V[\x01\x90a\x05\xB1V[V[\x91\x93\x92\x90a\r\xF9a\x0C\xF2V[Pa\x0E\x0Ca\x0E\x07`\x01a\tJV[a\x18eV[\x94\x85a\x0E(a\x0E\"a\x0E\x1D_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10hW_\x95\x92\x95\x91_\x93[\x80a\x0EPa\x0EJa\x0EE_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10[Wa\x0Eia\x0Ed`\x03\x83\x90a\x03\x95V[a\tfV[a\x0E{a\x0Eu_a\x04\x17V[\x91a\x04\x17V[\x14_\x14a\x0F\xA8W\x87` a\x0E\x96a\x0E\x91\x84a\r\x02V[a\r\x0EV[cz9y\xDC\x90a\x0E\xBB\x8A\x92a\x0E\xC6\x88\x96\x8Aa\x0E\xAFa\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x80\x15a\x0F\xA3Wa\x0E\xE2\x91_\x91a\x0FuW[P\x15a\x01tV[a\x0FUWa\x0E\xFDa\x0F\x05\x91[a\x0E\xF8`\x01a\tJV[a\x18\x9FV[\x91\x90\x15a\x01tV[\x15a\x0E5WPPP\x90\x91\x92\x93P[\x90\x81a\x0FDW[Pa\x0F%WP`\x01\x90V[a\x0F@\x90_\x91\x82\x91c\xA8l\x8C\x0B`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x0FO\x91P\x15a\x01tV[_a\x0F\x1AV[\x85\x90a\x0Fq_\x92\x83\x92cS\x9BH\xA5`\xE1\x1B\x84R`\x04\x84\x01a\r\xCAV[\x03\x90\xFD[a\x0F\x96\x91P` =\x81\x11a\x0F\x9CW[a\x0F\x8E\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x0E\xDBV[P=a\x0F\x84V[a\r\xBAV[\x92P`\x01\x92\x87` a\x0F\xC1a\x0F\xBC\x84a\r\x02V[a\r\x0EV[cz9y\xDC\x90a\x0F\xE6\x8A\x92a\x0F\xF1\x88\x96\x8Aa\x0F\xDAa\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x90\x81\x15a\x10VW_\x91a\x10(W[Pa\x10\x15W[a\x0E\xFDa\x0F\x05\x91a\x0E\xEEV[\x93Pa\x0F\x05a\x0E\xFD`\x01\x95\x91PPa\x10\tV[a\x10I\x91P` =\x81\x11a\x10OW[a\x10A\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x10\x03V[P=a\x107V[a\r\xBAV[PPP\x90\x91\x92\x93Pa\x0F\x13V[PPPP\x90P`\x01\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x10\x8Ea\x10\x93\x91a\tMV[a\x10wV[\x90V[a\x10\xA0\x90Ta\x10\x82V[\x90V[a\x10\xABa\x10sV[Pa\x10\xB5_a\x10\x96V[\x90V[``\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xD5W` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x10\xECa\x10\xE7\x83a\x10\xBDV[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x11\x1Ba\x11\x03\x83a\x10\xDAV[\x92` \x80a\x11\x11\x86\x93a\x10\xBDV[\x92\x01\x91\x03\x90a\x10\xF1V[V[\x90a\x11'\x82a\x06\x08V[\x81\x10\x15a\x118W` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x11G\x90a\x04\x17V[\x90RV[a\x11Sa\n\x95V[Pa\x11\\a\x10\xB8V[Pa\x11oa\x11j`\x01a\tJV[a\x18NV[a\x11x\x81a\x0B/V[\x90a\x11\x82\x81a\x10\xF6V[\x92a\x11\x95a\x11\x90`\x01a\tJV[a\x18eV[\x92a\x11\x9F_a\x0BYV[\x93[\x84a\x11\xB4a\x11\xAE\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x12EW[\x15a\x12;Wa\x12\x15\x81a\x11\xDDa\x12\x1D\x93a\x11\xD8\x86\x91\x8A\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x12\x06a\x11\xF4a\x11\xEF`\x03\x84\x90a\x03\x95V[a\tfV[a\x12\x01\x8A\x91\x8A\x90\x92a\x11\x1DV[a\x11=V[a\x12\x10`\x01a\tJV[a\x18\x9FV[\x91\x90\x15a\x01tV[a\x121Wa\x12+\x90\x94a\x0B\x89V[\x93a\x11\xA1V[P\x91P\x91P[\x91\x90V[P\x91P\x91Pa\x127V[P\x80a\x12aa\x12[a\x12V_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x11\xBBV[\x90a\x12{\x92\x91a\x12va\x13gV[a\x12}V[V[\x90\x91a\x12\x89\x90\x82a\x16\xD9V[a\x12\x9E\x82a\x12\x99`\x03\x84\x90a\x03\x95V[a\x08sV[\x90a\x12\xD2a\x12\xCC\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x12\xDBa\0\xD2V[\x80a\x12\xE5\x81a\x01<V[\x03\x90\xA3V[\x90a\x12\xF5\x92\x91a\x12hV[V[a\x13\x08\x90a\x13\x03a\x13gV[a\x13\nV[V[\x80a\x13%a\x13\x1Fa\x13\x1A_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x135Wa\x133\x90a\x19\tV[V[a\x13Xa\x13A_a\t>V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13e\x90a\x12\xF7V[V[a\x13oa\x10\xA3V[a\x13\x88a\x13\x82a\x13}a\x19hV[a\0\xEFV[\x91a\0\xEFV[\x03a\x13\x8FWV[a\x13\xB1a\x13\x9Aa\x19hV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13\xC6\x90a\x13\xC1a\x13gV[a\x14SV[V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x14\x05`\x13` \x92a\x13\xC8V[a\x14\x0E\x81a\x13\xD1V[\x01\x90V[a\x14'\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xF8V[\x90V[\x15a\x141WV[a\x149a\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14O`\x04\x82\x01a\x14\x12V[\x03\x90\xFD[\x80a\x14na\x14ha\x14c_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x15!Wa\x14\x90a\x14\x8A`\x01a\x14\x85\x84\x91a\tJV[a\x172V[\x15a\x01tV[a\x15\x05Wa\x14\xC3a\x14\xAB`\x01a\x14\xA6\x84\x91a\tJV[a\x1AzV[a\x14\xBDa\x14\xB7\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x14*V[a\x14\xED\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x03\x89V[\x90a\x14\xF6a\0\xD2V[\x80a\x15\0\x81a\x01<V[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x15\x1D`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x159`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x15F\x90a\x13\xB5V[V[\x90a\x15Z\x91a\x15Ua\x13gV[a\x15\xDEV[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x15\x90`\x11` \x92a\x13\xC8V[a\x15\x99\x81a\x15\\V[\x01\x90V[a\x15\xB2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x83V[\x90V[\x15a\x15\xBCWV[a\x15\xC4a\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xDA`\x04\x82\x01a\x15\x9DV[\x03\x90\xFD[\x90\x81a\x15\xFAa\x15\xF4a\x15\xEF_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x16\xBDWa\x16\x13`\x01a\x16\x0E\x84\x91a\tJV[a\x172V[a\x16\xA1Wa\x16\x1Fa\x0C\xF2V[P_\x14a\x16\x85Wa\x16Ca\x16=`\x01a\x168\x84\x91a\tJV[a\x1B\xCEV[[a\x15\xB5V[a\x16m\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x03\x89V[\x90a\x16va\0\xD2V[\x80a\x16\x80\x81a\x01<V[\x03\x90\xA2V[a\x16Ca\x16\x9C`\x01a\x16\x97\x84\x91a\tJV[a\x1B\xAEV[a\x16>V[_cQl5\x0F`\xE1\x1B\x81R\x80a\x16\xB9`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x16\xD5`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x16\xE3\x91a\x15HV[V[\x90a\x16\xEF\x90a\x03\x89V[_R` R`@_ \x90V[_\x90V[a\x17\x08\x90a\x01tV[\x90V[\x90a\x17\x15\x90a\x16\xFFV[_R` R`@_ \x90V[a\x17*_a\t>V[\x90V[`\x01\x90V[a\x17:a\x0C\xF2V[Pa\x17ba\x17]a\x17O`\x01\x84\x01\x85\x90a\x16\xE5V[a\x17Wa\x16\xFBV[\x90a\x17\x0BV[a\x10\x96V[a\x17{a\x17ua\x17pa\x17!V[a\0\xEFV[\x91a\0\xEFV[\x14\x80a\x17\xDFW[_\x14a\x17\xD8Wa\x17\xC2a\x17\xBCa\x17\xB7a\x17\xA9`\x01a\x17\xC8\x95\x01a\x17\xA3a\x17!V[\x90a\x16\xE5V[a\x17\xB1a\x17-V[\x90a\x17\x0BV[a\x10\x96V[\x92a\0\xEFV[\x91a\0\xEFV[\x14_\x14a\x17\xD4W`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x18\x07a\x18\x02a\x17\xF4`\x01\x84\x01\x85\x90a\x16\xE5V[a\x17\xFCa\x17-V[\x90a\x17\x0BV[a\x10\x96V[a\x18 a\x18\x1Aa\x18\x15a\x17!V[a\0\xEFV[\x91a\0\xEFV[\x14a\x17\x82V[_\x90V[\x90V[a\x189a\x18>\x91a\tMV[a\x18*V[\x90V[a\x18K\x90Ta\x18-V[\x90V[_a\x18b\x91a\x18[a\x18&V[P\x01a\x18AV[\x90V[a\x18\x97a\x18\x89`\x01a\x18\x9C\x93a\x18ya\x10sV[P\x01a\x18\x83a\x17!V[\x90a\x16\xE5V[a\x18\x91a\x17-V[\x90a\x17\x0BV[a\x10\x96V[\x90V[\x90a\x18\xC5\x91a\x18\xACa\x0C\xF2V[Pa\x18\xB5a\x10sV[P\x90a\x18\xBFa\x17-V[\x91a\x1B\xEEV[\x91\x90\x91\x90V[\x90a\x18\xDC`\x01\x80`\xA0\x1B\x03\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x18\xFEa\x18\xF9a\x19\x05\x92a\x03\x89V[a\x18\xE6V[\x82Ta\x18\xCBV[\x90UV[a\x19\x12_a\x10\x96V[a\x19\x1C\x82_a\x18\xE9V[\x90a\x19Pa\x19J\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x03\x89V[\x91a\x03\x89V[\x91a\x19Ya\0\xD2V[\x80a\x19c\x81a\x01<V[\x03\x90\xA3V[a\x19pa\x10sV[P3\x90V[a\x19~_a\t>V[\x90V[\x91\x90`\x08a\x19\xA1\x91\x02\x91a\x19\x9B`\x01\x80`\xA0\x1B\x03\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x19\xC1a\x19\xBCa\x19\xC9\x93a\x03\x89V[a\x18\xE6V[\x90\x83Ta\x19\x81V[\x90UV[a\x19\xDF\x91a\x19\xD9a\x10sV[\x91a\x19\xABV[V[\x90V[a\x19\xF8a\x19\xF3a\x19\xFD\x92a\x19\xE1V[a\x03^V[a\x0BVV[\x90V[a\x1A\x0Fa\x1A\x15\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x03\x91\x82\x11a\x1A WV[a\x0BuV[\x90a\x1A1_\x19\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1AOa\x1AJa\x1AT\x92a\x0BVV[a\x03^V[a\x0BVV[\x90V[\x90V[\x90a\x1Aoa\x1Aja\x1Av\x92a\x1A;V[a\x1AWV[\x82Ta\x1A%V[\x90UV[a\x1A\x82a\x10sV[P\x81a\x1A\x9Da\x1A\x97a\x1A\x92a\x19uV[a\0\xEFV[\x91a\0\xEFV[\x14\x80\x15a\x1B\x94W[a\x1B\x86W\x80a\x1B\x0Ea\x1B\x83\x92a\x1A\xD8a\x1A\xD3a\x1A\xC5`\x01\x86\x01\x88\x90a\x16\xE5V[a\x1A\xCDa\x16\xFBV[\x90a\x17\x0BV[a\x10\x96V[a\x1A\xFFa\x1A\xFAa\x1A\xEC`\x01\x87\x01\x89\x90a\x16\xE5V[a\x1A\xF4a\x17-V[\x90a\x17\x0BV[a\x10\x96V[\x90a\x1B\x08a\x17-V[\x92a\x1CjV[a\x1B6_a\x1B1a\x1B#`\x01\x85\x01\x87\x90a\x16\xE5V[a\x1B+a\x16\xFBV[\x90a\x17\x0BV[a\x19\xCDV[a\x1B^_a\x1BYa\x1BK`\x01\x85\x01\x87\x90a\x16\xE5V[a\x1BSa\x17-V[\x90a\x17\x0BV[a\x19\xCDV[a\x1B}_a\x1Bl`\x01a\x19\xE4V[\x92\x01\x91a\x1Bx\x83a\x18AV[a\x1A\0V[\x90a\x1AZV[\x90V[PPa\x1B\x91_a\t>V[\x90V[Pa\x1B\xA9a\x1B\xA3\x82\x84\x90a\x172V[\x15a\x01tV[a\x1A\xA5V[\x90a\x1B\xCB\x91a\x1B\xBBa\x0C\xF2V[P\x90a\x1B\xC5a\x16\xFBV[\x91a\x1C\xB5V[\x90V[\x90a\x1B\xEB\x91a\x1B\xDBa\x0C\xF2V[P\x90a\x1B\xE5a\x17-V[\x91a\x1C\xB5V[\x90V[\x91a\x1B\xF7a\x0C\xF2V[Pa\x1C\0a\x10sV[Pa\x1C\x15a\x1C\x0F\x84\x84\x90a\x172V[\x15a\x01tV[_\x14a\x1C,WPPP_\x90a\x1C)_a\t>V[\x90V[a\x1C?a\x1CD\x92`\x01a\x1CI\x95\x01a\x16\xE5V[a\x17\x0BV[a\x10\x96V[\x90\x81a\x1Cda\x1C^a\x1CYa\x17!V[a\0\xEFV[\x91a\0\xEFV[\x14\x15\x91\x90V[\x91\x92a\x1C\xA9a\x1C\xAE\x92`\x01a\x1C\xB3\x96a\x1C\xA2\x83a\x1C\x9Da\x1C\x8D\x85\x8B\x01\x85\x90a\x16\xE5V[a\x1C\x97\x89\x15a\x01tV[\x90a\x17\x0BV[a\x18\xE9V[\x95\x01a\x16\xE5V[a\x17\x0BV[a\x18\xE9V[V[\x91a\x1C\xD4\x92a\x1C\xC2a\x0C\xF2V[P\x91a\x1C\xCCa\x17!V[\x90\x91\x92a\x1C\xFCV[\x90V[a\x1C\xE6a\x1C\xEC\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x01\x80\x92\x11a\x1C\xF7WV[a\x0BuV[\x91a\x1D\x05a\x0C\xF2V[Pa\x1D\x1Aa\x1D\x14\x84\x83\x90a\x172V[\x15a\x01tV[\x80a\x1D\x97W[a\x1D,WPPPP_\x90V[a\x1D\x92\x93a\x1Dm\x92a\x1Dca\x1DWa\x1DRa\x1DK`\x01\x89\x01\x85\x90a\x16\xE5V[\x85\x90a\x17\x0BV[a\x10\x96V[\x91\x86\x90\x85\x90\x85\x92a\x1CjV[\x84\x92\x90\x91\x92a\x1CjV[a\x1D\x8C_a\x1D{`\x01a\x19\xE4V[\x92\x01\x91a\x1D\x87\x83a\x18AV[a\x1C\xD7V[\x90a\x1AZV[`\x01\x90V[Pa\x1D\xA3\x83\x83\x90a\x172V[a\x1D V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `Create2EmptyBytecode()` and selector `0x4ca249dc`.
```solidity
error Create2EmptyBytecode();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Create2EmptyBytecode;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Create2EmptyBytecode> for UnderlyingRustTuple<'_> {
            fn from(value: Create2EmptyBytecode) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Create2EmptyBytecode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Create2EmptyBytecode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Create2EmptyBytecode()";
            const SELECTOR: [u8; 4] = [76u8, 162u8, 73u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EnforcedPause()` and selector `0xd93c0665`.
```solidity
error EnforcedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EnforcedPause;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EnforcedPause> for UnderlyingRustTuple<'_> {
            fn from(value: EnforcedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EnforcedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EnforcedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EnforcedPause()";
            const SELECTOR: [u8; 4] = [217u8, 60u8, 6u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ExpectedPause()` and selector `0x8dfc202b`.
```solidity
error ExpectedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExpectedPause;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExpectedPause> for UnderlyingRustTuple<'_> {
            fn from(value: ExpectedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExpectedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExpectedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExpectedPause()";
            const SELECTOR: [u8; 4] = [141u8, 252u8, 32u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FailedDeployment()` and selector `0xb06ebf3d`.
```solidity
error FailedDeployment();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedDeployment;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedDeployment> for UnderlyingRustTuple<'_> {
            fn from(value: FailedDeployment) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedDeployment {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedDeployment {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedDeployment()";
            const SELECTOR: [u8; 4] = [176u8, 110u8, 191u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientBalance(uint256,uint256)` and selector `0xcf479181`.
```solidity
error InsufficientBalance(uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBalance {
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBalance> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBalance) -> Self {
                (value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    balance: tuple.0,
                    needed: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBalance(uint256,uint256)";
            const SELECTOR: [u8; 4] = [207u8, 71u8, 145u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Paused(address)` and selector `0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258`.
```solidity
event Paused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Paused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Paused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Paused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8, 231u8, 140u8, 234u8, 1u8, 190u8, 227u8, 32u8, 205u8, 78u8, 66u8,
                2u8, 112u8, 181u8, 234u8, 116u8, 0u8, 13u8, 17u8, 176u8, 201u8, 247u8,
                71u8, 84u8, 235u8, 219u8, 252u8, 84u8, 75u8, 5u8, 162u8, 88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Paused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Paused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Paused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RequireCompositeModuleCreated(address,address)` and selector `0x1da049b3a4edbc0803adcb4308ec858bb7fbd79e62a31c7153a1a11273ed57e5`.
```solidity
event RequireCompositeModuleCreated(address indexed module, address indexed admin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequireCompositeModuleCreated {
        #[allow(missing_docs)]
        pub module: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequireCompositeModuleCreated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequireCompositeModuleCreated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                29u8, 160u8, 73u8, 179u8, 164u8, 237u8, 188u8, 8u8, 3u8, 173u8, 203u8,
                67u8, 8u8, 236u8, 133u8, 139u8, 183u8, 251u8, 215u8, 158u8, 98u8, 163u8,
                28u8, 113u8, 83u8, 161u8, 161u8, 18u8, 115u8, 237u8, 87u8, 229u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    module: topics.1,
                    admin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.module.clone(), self.admin.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.module,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.admin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequireCompositeModuleCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequireCompositeModuleCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequireCompositeModuleCreated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Unpaused(address)` and selector `0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa`.
```solidity
event Unpaused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpaused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpaused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Unpaused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8, 185u8, 238u8, 10u8, 73u8, 91u8, 242u8, 230u8, 255u8, 156u8, 145u8,
                167u8, 131u8, 76u8, 27u8, 164u8, 253u8, 210u8, 68u8, 165u8, 232u8, 170u8,
                78u8, 83u8, 123u8, 211u8, 138u8, 234u8, 228u8, 176u8, 115u8, 170u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpaused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpaused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpaused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `computeModuleAddress(address,bytes32)` and selector `0x5681706b`.
```solidity
function computeModuleAddress(address admin, bytes32 salt) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeModuleAddressCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`computeModuleAddress(address,bytes32)`](computeModuleAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeModuleAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeModuleAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeModuleAddressCall) -> Self {
                    (value.admin, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeModuleAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeModuleAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeModuleAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeModuleAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeModuleAddressCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeModuleAddress(address,bytes32)";
            const SELECTOR: [u8; 4] = [86u8, 129u8, 112u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: computeModuleAddressReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: computeModuleAddressReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `createRequireCompositeModule(address,bytes32)` and selector `0x76a6840b`.
```solidity
function createRequireCompositeModule(address admin, bytes32 salt) external returns (address module);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createRequireCompositeModuleCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`createRequireCompositeModule(address,bytes32)`](createRequireCompositeModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createRequireCompositeModuleReturn {
        #[allow(missing_docs)]
        pub module: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createRequireCompositeModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createRequireCompositeModuleCall) -> Self {
                    (value.admin, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createRequireCompositeModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createRequireCompositeModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createRequireCompositeModuleReturn) -> Self {
                    (value.module,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createRequireCompositeModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { module: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createRequireCompositeModuleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createRequireCompositeModule(address,bytes32)";
            const SELECTOR: [u8; 4] = [118u8, 166u8, 132u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: createRequireCompositeModuleReturn = r.into();
                        r.module
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: createRequireCompositeModuleReturn = r.into();
                        r.module
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pause()` and selector `0x8456cb59`.
```solidity
function pause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseCall;
    ///Container type for the return parameters of the [`pause()`](pauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl pauseReturn {
            fn _tokenize(
                &self,
            ) -> <pauseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pause()";
            const SELECTOR: [u8; 4] = [132u8, 86u8, 203u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                pauseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `paused()` and selector `0x5c975abb`.
```solidity
function paused() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`paused()`](pausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: pausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pausedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pausedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pausedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `unpause()` and selector `0x3f4ba83a`.
```solidity
function unpause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall;
    ///Container type for the return parameters of the [`unpause()`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl unpauseReturn {
            fn _tokenize(
                &self,
            ) -> <unpauseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause()";
            const SELECTOR: [u8; 4] = [63u8, 75u8, 168u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                unpauseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireCompositeModuleFactory`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum RequireCompositeModuleFactoryCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        computeModuleAddress(computeModuleAddressCall),
        #[allow(missing_docs)]
        createRequireCompositeModule(createRequireCompositeModuleCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        pause(pauseCall),
        #[allow(missing_docs)]
        paused(pausedCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        unpause(unpauseCall),
    }
    #[automatically_derived]
    impl RequireCompositeModuleFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [63u8, 75u8, 168u8, 58u8],
            [86u8, 129u8, 112u8, 107u8],
            [92u8, 151u8, 90u8, 187u8],
            [118u8, 166u8, 132u8, 11u8],
            [132u8, 86u8, 203u8, 89u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [213u8, 71u8, 116u8, 31u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireCompositeModuleFactoryCalls {
        const NAME: &'static str = "RequireCompositeModuleFactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::computeModuleAddress(_) => {
                    <computeModuleAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createRequireCompositeModule(_) => {
                    <createRequireCompositeModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pause(_) => <pauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused(_) => <pausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleFactoryCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn unpause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleFactoryCalls::unpause)
                    }
                    unpause
                },
                {
                    fn computeModuleAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryCalls::computeModuleAddress,
                            )
                    }
                    computeModuleAddress
                },
                {
                    fn paused(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleFactoryCalls::paused)
                    }
                    paused
                },
                {
                    fn createRequireCompositeModule(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <createRequireCompositeModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryCalls::createRequireCompositeModule,
                            )
                    }
                    createRequireCompositeModule
                },
                {
                    fn pause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleFactoryCalls::pause)
                    }
                    pause
                },
                {
                    fn hasRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleFactoryCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn unpause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::unpause)
                    }
                    unpause
                },
                {
                    fn computeModuleAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryCalls::computeModuleAddress,
                            )
                    }
                    computeModuleAddress
                },
                {
                    fn paused(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::paused)
                    }
                    paused
                },
                {
                    fn createRequireCompositeModule(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <createRequireCompositeModuleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryCalls::createRequireCompositeModule,
                            )
                    }
                    createRequireCompositeModule
                },
                {
                    fn pause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::pause)
                    }
                    pause
                },
                {
                    fn hasRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::computeModuleAddress(inner) => {
                    <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createRequireCompositeModule(inner) => {
                    <createRequireCompositeModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::computeModuleAddress(inner) => {
                    <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createRequireCompositeModule(inner) => {
                    <createRequireCompositeModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`RequireCompositeModuleFactory`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RequireCompositeModuleFactoryErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        Create2EmptyBytecode(Create2EmptyBytecode),
        #[allow(missing_docs)]
        EnforcedPause(EnforcedPause),
        #[allow(missing_docs)]
        ExpectedPause(ExpectedPause),
        #[allow(missing_docs)]
        FailedDeployment(FailedDeployment),
        #[allow(missing_docs)]
        InsufficientBalance(InsufficientBalance),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
    }
    #[automatically_derived]
    impl RequireCompositeModuleFactoryErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [76u8, 162u8, 73u8, 220u8],
            [102u8, 151u8, 178u8, 50u8],
            [141u8, 252u8, 32u8, 43u8],
            [176u8, 110u8, 191u8, 61u8],
            [207u8, 71u8, 145u8, 129u8],
            [217u8, 46u8, 35u8, 61u8],
            [217u8, 60u8, 6u8, 101u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireCompositeModuleFactoryErrors {
        const NAME: &'static str = "RequireCompositeModuleFactoryErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Create2EmptyBytecode(_) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EnforcedPause(_) => {
                    <EnforcedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExpectedPause(_) => {
                    <ExpectedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedDeployment(_) => {
                    <FailedDeployment as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientBalance(_) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors>] = &[
                {
                    fn Create2EmptyBytecode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::Create2EmptyBytecode,
                            )
                    }
                    Create2EmptyBytecode
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn FailedDeployment(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <FailedDeployment as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::FailedDeployment)
                    }
                    FailedDeployment
                },
                {
                    fn InsufficientBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::InsufficientBalance,
                            )
                    }
                    InsufficientBalance
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(RequireCompositeModuleFactoryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors>] = &[
                {
                    fn Create2EmptyBytecode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::Create2EmptyBytecode,
                            )
                    }
                    Create2EmptyBytecode
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn FailedDeployment(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <FailedDeployment as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::FailedDeployment)
                    }
                    FailedDeployment
                },
                {
                    fn InsufficientBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::InsufficientBalance,
                            )
                    }
                    InsufficientBalance
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleFactoryErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleFactoryErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleFactoryErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireCompositeModuleFactory`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RequireCompositeModuleFactoryEvents {
        #[allow(missing_docs)]
        Paused(Paused),
        #[allow(missing_docs)]
        RequireCompositeModuleCreated(RequireCompositeModuleCreated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        Unpaused(Unpaused),
    }
    #[automatically_derived]
    impl RequireCompositeModuleFactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                29u8, 160u8, 73u8, 179u8, 164u8, 237u8, 188u8, 8u8, 3u8, 173u8, 203u8,
                67u8, 8u8, 236u8, 133u8, 139u8, 183u8, 251u8, 215u8, 158u8, 98u8, 163u8,
                28u8, 113u8, 83u8, 161u8, 161u8, 18u8, 115u8, 237u8, 87u8, 229u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                93u8, 185u8, 238u8, 10u8, 73u8, 91u8, 242u8, 230u8, 255u8, 156u8, 145u8,
                167u8, 131u8, 76u8, 27u8, 164u8, 253u8, 210u8, 68u8, 165u8, 232u8, 170u8,
                78u8, 83u8, 123u8, 211u8, 138u8, 234u8, 228u8, 176u8, 115u8, 170u8,
            ],
            [
                98u8, 231u8, 140u8, 234u8, 1u8, 190u8, 227u8, 32u8, 205u8, 78u8, 66u8,
                2u8, 112u8, 181u8, 234u8, 116u8, 0u8, 13u8, 17u8, 176u8, 201u8, 247u8,
                71u8, 84u8, 235u8, 219u8, 252u8, 84u8, 75u8, 5u8, 162u8, 88u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireCompositeModuleFactoryEvents {
        const NAME: &'static str = "RequireCompositeModuleFactoryEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Paused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Paused as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Paused)
                }
                Some(
                    <RequireCompositeModuleCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequireCompositeModuleCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RequireCompositeModuleCreated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(<Unpaused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpaused as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Unpaused)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireCompositeModuleFactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequireCompositeModuleCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequireCompositeModuleCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireCompositeModuleFactory`](self) contract instance.

See the [wrapper's documentation](`RequireCompositeModuleFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireCompositeModuleFactoryInstance<P, N> {
        RequireCompositeModuleFactoryInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireCompositeModuleFactoryInstance<P, N>>,
    > {
        RequireCompositeModuleFactoryInstance::<P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        RequireCompositeModuleFactoryInstance::<P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireCompositeModuleFactory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireCompositeModuleFactory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireCompositeModuleFactoryInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for RequireCompositeModuleFactoryInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireCompositeModuleFactoryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireCompositeModuleFactoryInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`RequireCompositeModuleFactory`](self) contract instance.

See the [wrapper's documentation](`RequireCompositeModuleFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireCompositeModuleFactoryInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> RequireCompositeModuleFactoryInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> RequireCompositeModuleFactoryInstance<P, N> {
            RequireCompositeModuleFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireCompositeModuleFactoryInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall)
        }
        ///Creates a new call builder for the [`computeModuleAddress`] function.
        pub fn computeModuleAddress(
            &self,
            admin: alloy::sol_types::private::Address,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, computeModuleAddressCall, N> {
            self.call_builder(
                &computeModuleAddressCall {
                    admin,
                    salt,
                },
            )
        }
        ///Creates a new call builder for the [`createRequireCompositeModule`] function.
        pub fn createRequireCompositeModule(
            &self,
            admin: alloy::sol_types::private::Address,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, createRequireCompositeModuleCall, N> {
            self.call_builder(
                &createRequireCompositeModuleCall {
                    admin,
                    salt,
                },
            )
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`pause`] function.
        pub fn pause(&self) -> alloy_contract::SolCallBuilder<&P, pauseCall, N> {
            self.call_builder(&pauseCall)
        }
        ///Creates a new call builder for the [`paused`] function.
        pub fn paused(&self) -> alloy_contract::SolCallBuilder<&P, pausedCall, N> {
            self.call_builder(&pausedCall)
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(&self) -> alloy_contract::SolCallBuilder<&P, unpauseCall, N> {
            self.call_builder(&unpauseCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireCompositeModuleFactoryInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Paused`] event.
        pub fn Paused_filter(&self) -> alloy_contract::Event<&P, Paused, N> {
            self.event_filter::<Paused>()
        }
        ///Creates a new event filter for the [`RequireCompositeModuleCreated`] event.
        pub fn RequireCompositeModuleCreated_filter(
            &self,
        ) -> alloy_contract::Event<&P, RequireCompositeModuleCreated, N> {
            self.event_filter::<RequireCompositeModuleCreated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`Unpaused`] event.
        pub fn Unpaused_filter(&self) -> alloy_contract::Event<&P, Unpaused, N> {
            self.event_filter::<Unpaused>()
        }
    }
}
