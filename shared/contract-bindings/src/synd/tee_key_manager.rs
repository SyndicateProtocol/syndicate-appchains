/**

Generated by the following Solidity interface...
```solidity
interface TeeKeyManager {
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event KeyAdded(address indexed key);
    event KeysRevoked();
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address _attestationDocVerifier);

    function addKey(bytes memory _publicValues, bytes memory _proofBytes) external;
    function attestationDocVerifier() external view returns (address);
    function isKeyValid(address publicKey) external view returns (bool);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function revokeAllKeys() external;
    function transferOwnership(address newOwner) external;
    function updateAttestationDocVerifier(address _attestationDocVerifier) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_attestationDocVerifier",
        "type": "address",
        "internalType": "contract IAttestationDocVerifier"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addKey",
    "inputs": [
      {
        "name": "_publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "attestationDocVerifier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAttestationDocVerifier"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isKeyValid",
    "inputs": [
      {
        "name": "publicKey",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeAllKeys",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAttestationDocVerifier",
    "inputs": [
      {
        "name": "_attestationDocVerifier",
        "type": "address",
        "internalType": "contract IAttestationDocVerifier"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "KeyAdded",
    "inputs": [
      {
        "name": "key",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeysRevoked",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TeeKeyManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f57610019610014610100565b61019b565b610021610034565b611252610321823961125290f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc906100a7565b90565b6100c8816100b3565b036100cf57565b5f80fd5b905051906100e0826100bf565b565b906020828203126100fb576100f8915f016100d3565b90565b610098565b61011e6115738038038061011381610083565b9283398101906100e2565b90565b5f1b90565b9061013760018060a01b0391610121565b9181191691161790565b90565b61015861015361015d9261009c565b610141565b61009c565b90565b61016990610144565b90565b61017590610160565b90565b90565b9061019061018b6101979261016c565b610178565b8254610126565b9055565b6101af906101a8336101fe565b600161017b565b565b90565b6101c86101c36101cd926101b1565b610141565b61009c565b90565b6101d9906101b4565b90565b6101e5906100a7565b9052565b91906101fc905f602085019401906101dc565b565b8061021961021361020e5f6101d0565b6100a7565b916100a7565b1461022957610227906102c1565b565b61024c6102355f6101d0565b5f918291631e4fbdf760e01b8352600483016101e9565b0390fd5b5f1c90565b60018060a01b031690565b61026c61027191610250565b610255565b90565b61027e9054610260565b90565b61028a90610144565b90565b61029690610281565b90565b90565b906102b16102ac6102b89261028d565b610299565b8254610126565b9055565b5f0190565b6102ca5f610274565b6102d4825f61029c565b906103086103027f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361028d565b9161028d565b91610311610034565b8061031b816102bc565b0390a356fe60806040526004361015610013575b61049f565b61001d5f3561009c565b80630c6fe1aa146100975780634b9f8cd414610092578063715018a61461008d5780637217efcd146100885780638da5cb5b14610083578063aeddd0ba1461007e578063c172ac10146100795763f2fde38b0361000e5761046c565b610439565b610406565b610384565b61032d565b610286565b610251565b610163565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100fa5781359167ffffffffffffffff83116100f55760200192600183028401116100f057565b6100bc565b6100b8565b6100b4565b9091604082840312610159575f82013567ffffffffffffffff8111610154578361012a9184016100c0565b929093602082013567ffffffffffffffff811161014f5761014b92016100c0565b9091565b6100b0565b6100b0565b6100ac565b5f0190565b346101955761017f6101763660046100ff565b92919091610677565b6101876100a2565b806101918161015e565b0390f35b6100a8565b5f9103126101a457565b6100ac565b1c90565b60018060a01b031690565b6101c89060086101cd93026101a9565b6101ad565b90565b906101db91546101b8565b90565b6101ea60015f906101d0565b90565b60018060a01b031690565b90565b61020f61020a610214926101ed565b6101f8565b6101ed565b90565b610220906101fb565b90565b61022c90610217565b90565b61023890610223565b9052565b919061024f905f6020850194019061022f565b565b346102815761026136600461019a565b61027d61026c6101de565b6102746100a2565b9182918261023c565b0390f35b6100a8565b346102b45761029636600461019a565b61029e6107b0565b6102a66100a2565b806102b08161015e565b0390f35b6100a8565b6102c2906101ed565b90565b6102ce816102b9565b036102d557565b5f80fd5b905035906102e6826102c5565b565b90602082820312610301576102fe915f016102d9565b90565b6100ac565b151590565b61031490610306565b9052565b919061032b905f6020850194019061030b565b565b3461035d576103596103486103433660046102e8565b6107be565b6103506100a2565b91829182610318565b0390f35b6100a8565b61036b906102b9565b9052565b9190610382905f60208501940190610362565b565b346103b45761039436600461019a565b6103b061039f61080d565b6103a76100a2565b9182918261036f565b0390f35b6100a8565b6103c2906102b9565b90565b6103ce816103b9565b036103d557565b5f80fd5b905035906103e6826103c5565b565b90602082820312610401576103fe915f016103d9565b90565b6100ac565b346104345761041e6104193660046103e8565b6108a5565b6104266100a2565b806104308161015e565b0390f35b6100a8565b346104675761044936600461019a565b610451610a92565b6104596100a2565b806104638161015e565b0390f35b6100a8565b3461049a5761048461047f3660046102e8565b610b01565b61048c6100a2565b806104968161015e565b0390f35b6100a8565b5f80fd5b5f1c90565b6104b46104b9916104a3565b6101ad565b90565b6104c690546104a8565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104f1906104c9565b810190811067ffffffffffffffff82111761050b57604052565b6104d3565b60e01b90565b90505190610523826102c5565b565b9060208282031261053e5761053b915f01610516565b90565b6100ac565b60209181520190565b90825f939282370152565b91906105718161056a8161057695610543565b809561054c565b6104c9565b0190565b9290610596906105a4959360408601918683035f880152610557565b926020818503910152610557565b90565b6105af6100a2565b3d5f823e3d90fd5b90565b60209181520190565b60207f73206f72206661696c656420746f206164640000000000000000000000000000917f5465654b65794d616e616765723a204b657920616c72656164792065786973745f8201520152565b61061d60326040926105ba565b610626816105c3565b0190565b61063f9060208101905f818303910152610610565b90565b1561064957565b6106516100a2565b62461bcd60e51b8152806106676004820161062a565b0390fd5b61067490610217565b90565b926106b1602093946106bc61069461068f60016104bc565b610223565b9363c22a96949295976106a56100a2565b98899788968796610510565b86526004860161057a565b03915afa90811561075b575f9161072d575b506106eb6106e66106df60026105b7565b8390610b56565b610642565b6107157f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e9161066b565b9061071e6100a2565b806107288161015e565b0390a2565b61074e915060203d8111610754575b61074681836104e7565b810190610525565b5f6106ce565b503d61073c565b6105a7565b610768610b90565b61077061079d565b565b90565b61078961078461078e92610772565b6101f8565b6101ed565b90565b61079a90610775565b90565b6107ae6107a95f610791565b610c01565b565b6107b8610760565b565b5f90565b6107da906107ca6107ba565b506107d560026105b7565b610c60565b90565b5f90565b60018060a01b031690565b6107f86107fd916104a3565b6107e1565b90565b61080a90546107ec565b90565b6108156107dd565b5061081f5f610800565b90565b6108339061082e610b90565b610890565b565b5f1b90565b9061084b60018060a01b0391610835565b9181191691161790565b61085e906101fb565b90565b61086a90610855565b90565b90565b9061088561088061088c92610861565b61086d565b825461083a565b9055565b6108a39061089c610a92565b6001610870565b565b6108ae90610822565b565b6108b8610b90565b6108c06109dd565b565b90565b6108d96108d46108de92610772565b6101f8565b6108c2565b90565b60016108ed91016108c2565b90565b5190565b634e487b7160e01b5f52603260045260245ffd5b90610912826108f0565b811015610923576020809102010190565b6108f4565b61093290516102b9565b90565b60207f6b65790000000000000000000000000000000000000000000000000000000000917f5465654b65794d616e616765723a204661696c656420746f2072656d6f7665205f8201520152565b61098f60236040926105ba565b61099881610935565b0190565b6109b19060208101905f818303910152610982565b90565b156109bb57565b6109c36100a2565b62461bcd60e51b8152806109d96004820161099c565b0390fd5b6109ef6109ea60026105b7565b610c9f565b906109f95f6108c5565b5b80610a15610a0f610a0a866108f0565b6108c2565b916108c2565b1015610a5757610a5290610a4d610a48610a2f60026105b7565b610a42610a3d888690610908565b610928565b90610cc7565b6109b4565b6108e1565b6109fa565b5090507f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac610a836100a2565b80610a8d8161015e565b0390a1565b610a9a6108b0565b565b610aad90610aa8610b90565b610aaf565b565b80610aca610ac4610abf5f610791565b6102b9565b916102b9565b14610ada57610ad890610c01565b565b610afd610ae65f610791565b5f918291631e4fbdf760e01b83526004830161036f565b0390fd5b610b0a90610a9c565b565b610b15906101fb565b90565b610b2c610b27610b31926101ed565b6101f8565b6108c2565b90565b90565b610b4b610b46610b50926108c2565b610835565b610b34565b90565b90565b90610b88610b82610b7d610b785f610b8d96610b706107ba565b500194610b0c565b610b18565b610b37565b91610b53565b610e40565b90565b610b9861080d565b610bb1610bab610ba6610ea3565b6102b9565b916102b9565b03610bb857565b610bda610bc3610ea3565b5f91829163118cdaa760e01b83526004830161036f565b0390fd5b90565b90610bf6610bf1610bfd9261066b565b610bde565b825461083a565b9055565b610c0a5f610800565b610c14825f610be1565b90610c48610c427f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361066b565b9161066b565b91610c516100a2565b80610c5b8161015e565b0390a3565b90610c92610c8c610c87610c825f610c9796610c7a6107ba565b500194610b0c565b610b18565b610b37565b91610b53565b610ed4565b90565b606090565b610cb65f610cbb92610caf610c9a565b5001610b53565b610ffa565b610cc3610c9a565b5090565b90610cf9610cf3610cee610ce95f610cfe96610ce16107ba565b500194610b0c565b610b18565b610b37565b91610b53565b61114c565b90565b90565b5f5260205f2090565b5490565b610d1a81610d0d565b821015610d3457610d2c600191610d04565b910201905f90565b6108f4565b1b90565b91906008610d58910291610d525f1984610d39565b92610d39565b9181191691161790565b610d6b90610b34565b90565b610d77906104a3565b90565b9190610d90610d8b610d9893610d62565b610d6e565b908354610d3d565b9055565b9081549168010000000000000000831015610dcc5782610dc4916001610dca95018155610d11565b90610d7a565b565b6104d3565b5490565b90610ddf90610d62565b5f5260205260405f2090565b90610df75f1991610835565b9181191691161790565b610e15610e10610e1a926108c2565b6101f8565b6108c2565b90565b90565b90610e35610e30610e3c92610e01565b610e1d565b8254610deb565b9055565b610e486107ba565b50610e5d610e57828490610ed4565b15610306565b5f14610e9d57610e93610e9892610e7f610e785f8501610d01565b8290610d9c565b6001610e8c5f8501610dd1565b9301610dd5565b610e20565b600190565b50505f90565b610eab6107dd565b503390565b90565b610ebf610ec4916104a3565b610eb0565b90565b610ed19054610eb3565b90565b610ef2916001610eed92610ee66107ba565b5001610dd5565b610ec7565b610f04610efe5f6108c5565b916108c2565b141590565b606090565b60209181520190565b5f5260205f2090565b610f2990610b34565b9052565b90610f3a81602093610f20565b0190565b90565b610f4d610f52916104a3565b610f3e565b90565b610f5f9054610f41565b90565b60010190565b90610f85610f7f610f7884610dd1565b8093610f0e565b92610f17565b905f5b818110610f955750505090565b909192610fb5610faf600192610faa87610f55565b610f2d565b94610f62565b9101919091610f88565b90610fc991610f68565b90565b90610fec610fe592610fdc6100a2565b93848092610fbf565b03836104e7565b565b610ff790610fcc565b90565b5f61100e91611007610f09565b5001610fee565b90565b90565b61102861102361102d92611011565b6101f8565b6108c2565b90565b634e487b7160e01b5f52601160045260245ffd5b611053611059919392936108c2565b926108c2565b820391821161106457565b611030565b61107281610dd1565b82101561108c57611084600191610f17565b910201905f90565b6108f4565b6110a19060086110a693026101a9565b610f3e565b90565b906110b49154611091565b90565b634e487b7160e01b5f52603160045260245ffd5b5f90565b6110e1916110db6110cb565b91610d7a565b565b6110ec81610d0d565b801561110d57600190039061110a6111048383610d11565b906110cf565b55565b6110b7565b919061112861112361113093610e01565b610e1d565b908354610d3d565b9055565b5f90565b61114a91611144611134565b91611112565b565b6111546107ba565b5061116b611166600183018490610dd5565b610ec7565b908161117f6111795f6108c5565b916108c2565b14155f1461124b576111fd9260016111f892846111a65f966111a085611014565b90611044565b6111c36111b4888501610dd1565b6111bd86611014565b90611044565b816111d66111d0836108c2565b916108c2565b03611202575b5050506111f26111ed868301610d01565b6110e3565b01610dd5565b611138565b600190565b6112439261123561122161121b61123e948c8901611069565b906110a9565b9361122f85918c8901611069565b90610d7a565b91858501610dd5565b610e20565b5f80806111dc565b5050505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\x01\0V[a\x01\x9BV[a\0!a\x004V[a\x12Ra\x03!\x829a\x12R\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x90a\0\xA7V[\x90V[a\0\xC8\x81a\0\xB3V[\x03a\0\xCFWV[_\x80\xFD[\x90PQ\x90a\0\xE0\x82a\0\xBFV[V[\x90` \x82\x82\x03\x12a\0\xFBWa\0\xF8\x91_\x01a\0\xD3V[\x90V[a\0\x98V[a\x01\x1Ea\x15s\x808\x03\x80a\x01\x13\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xE2V[\x90V[_\x1B\x90V[\x90a\x017`\x01\x80`\xA0\x1B\x03\x91a\x01!V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x01Xa\x01Sa\x01]\x92a\0\x9CV[a\x01AV[a\0\x9CV[\x90V[a\x01i\x90a\x01DV[\x90V[a\x01u\x90a\x01`V[\x90V[\x90V[\x90a\x01\x90a\x01\x8Ba\x01\x97\x92a\x01lV[a\x01xV[\x82Ta\x01&V[\x90UV[a\x01\xAF\x90a\x01\xA83a\x01\xFEV[`\x01a\x01{V[V[\x90V[a\x01\xC8a\x01\xC3a\x01\xCD\x92a\x01\xB1V[a\x01AV[a\0\x9CV[\x90V[a\x01\xD9\x90a\x01\xB4V[\x90V[a\x01\xE5\x90a\0\xA7V[\x90RV[\x91\x90a\x01\xFC\x90_` \x85\x01\x94\x01\x90a\x01\xDCV[V[\x80a\x02\x19a\x02\x13a\x02\x0E_a\x01\xD0V[a\0\xA7V[\x91a\0\xA7V[\x14a\x02)Wa\x02'\x90a\x02\xC1V[V[a\x02La\x025_a\x01\xD0V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01\xE9V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02la\x02q\x91a\x02PV[a\x02UV[\x90V[a\x02~\x90Ta\x02`V[\x90V[a\x02\x8A\x90a\x01DV[\x90V[a\x02\x96\x90a\x02\x81V[\x90V[\x90V[\x90a\x02\xB1a\x02\xACa\x02\xB8\x92a\x02\x8DV[a\x02\x99V[\x82Ta\x01&V[\x90UV[_\x01\x90V[a\x02\xCA_a\x02tV[a\x02\xD4\x82_a\x02\x9CV[\x90a\x03\x08a\x03\x02\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02\x8DV[\x91a\x02\x8DV[\x91a\x03\x11a\x004V[\x80a\x03\x1B\x81a\x02\xBCV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x9FV[a\0\x1D_5a\0\x9CV[\x80c\x0Co\xE1\xAA\x14a\0\x97W\x80cK\x9F\x8C\xD4\x14a\0\x92W\x80cqP\x18\xA6\x14a\0\x8DW\x80cr\x17\xEF\xCD\x14a\0\x88W\x80c\x8D\xA5\xCB[\x14a\0\x83W\x80c\xAE\xDD\xD0\xBA\x14a\0~W\x80c\xC1r\xAC\x10\x14a\0yWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04lV[a\x049V[a\x04\x06V[a\x03\x84V[a\x03-V[a\x02\x86V[a\x02QV[a\x01cV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xF5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xF0WV[a\0\xBCV[a\0\xB8V[a\0\xB4V[\x90\x91`@\x82\x84\x03\x12a\x01YW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01TW\x83a\x01*\x91\x84\x01a\0\xC0V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01OWa\x01K\x92\x01a\0\xC0V[\x90\x91V[a\0\xB0V[a\0\xB0V[a\0\xACV[_\x01\x90V[4a\x01\x95Wa\x01\x7Fa\x01v6`\x04a\0\xFFV[\x92\x91\x90\x91a\x06wV[a\x01\x87a\0\xA2V[\x80a\x01\x91\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01\xA4WV[a\0\xACV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xC8\x90`\x08a\x01\xCD\x93\x02a\x01\xA9V[a\x01\xADV[\x90V[\x90a\x01\xDB\x91Ta\x01\xB8V[\x90V[a\x01\xEA`\x01_\x90a\x01\xD0V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\x0Fa\x02\na\x02\x14\x92a\x01\xEDV[a\x01\xF8V[a\x01\xEDV[\x90V[a\x02 \x90a\x01\xFBV[\x90V[a\x02,\x90a\x02\x17V[\x90V[a\x028\x90a\x02#V[\x90RV[\x91\x90a\x02O\x90_` \x85\x01\x94\x01\x90a\x02/V[V[4a\x02\x81Wa\x02a6`\x04a\x01\x9AV[a\x02}a\x02la\x01\xDEV[a\x02ta\0\xA2V[\x91\x82\x91\x82a\x02<V[\x03\x90\xF3[a\0\xA8V[4a\x02\xB4Wa\x02\x966`\x04a\x01\x9AV[a\x02\x9Ea\x07\xB0V[a\x02\xA6a\0\xA2V[\x80a\x02\xB0\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[a\x02\xC2\x90a\x01\xEDV[\x90V[a\x02\xCE\x81a\x02\xB9V[\x03a\x02\xD5WV[_\x80\xFD[\x90P5\x90a\x02\xE6\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x03\x01Wa\x02\xFE\x91_\x01a\x02\xD9V[\x90V[a\0\xACV[\x15\x15\x90V[a\x03\x14\x90a\x03\x06V[\x90RV[\x91\x90a\x03+\x90_` \x85\x01\x94\x01\x90a\x03\x0BV[V[4a\x03]Wa\x03Ya\x03Ha\x03C6`\x04a\x02\xE8V[a\x07\xBEV[a\x03Pa\0\xA2V[\x91\x82\x91\x82a\x03\x18V[\x03\x90\xF3[a\0\xA8V[a\x03k\x90a\x02\xB9V[\x90RV[\x91\x90a\x03\x82\x90_` \x85\x01\x94\x01\x90a\x03bV[V[4a\x03\xB4Wa\x03\x946`\x04a\x01\x9AV[a\x03\xB0a\x03\x9Fa\x08\rV[a\x03\xA7a\0\xA2V[\x91\x82\x91\x82a\x03oV[\x03\x90\xF3[a\0\xA8V[a\x03\xC2\x90a\x02\xB9V[\x90V[a\x03\xCE\x81a\x03\xB9V[\x03a\x03\xD5WV[_\x80\xFD[\x90P5\x90a\x03\xE6\x82a\x03\xC5V[V[\x90` \x82\x82\x03\x12a\x04\x01Wa\x03\xFE\x91_\x01a\x03\xD9V[\x90V[a\0\xACV[4a\x044Wa\x04\x1Ea\x04\x196`\x04a\x03\xE8V[a\x08\xA5V[a\x04&a\0\xA2V[\x80a\x040\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04gWa\x04I6`\x04a\x01\x9AV[a\x04Qa\n\x92V[a\x04Ya\0\xA2V[\x80a\x04c\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04\x9AWa\x04\x84a\x04\x7F6`\x04a\x02\xE8V[a\x0B\x01V[a\x04\x8Ca\0\xA2V[\x80a\x04\x96\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\xB4a\x04\xB9\x91a\x04\xA3V[a\x01\xADV[\x90V[a\x04\xC6\x90Ta\x04\xA8V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xF1\x90a\x04\xC9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x0BW`@RV[a\x04\xD3V[`\xE0\x1B\x90V[\x90PQ\x90a\x05#\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x05>Wa\x05;\x91_\x01a\x05\x16V[\x90V[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05q\x81a\x05j\x81a\x05v\x95a\x05CV[\x80\x95a\x05LV[a\x04\xC9V[\x01\x90V[\x92\x90a\x05\x96\x90a\x05\xA4\x95\x93`@\x86\x01\x91\x86\x83\x03_\x88\x01Ra\x05WV[\x92` \x81\x85\x03\x91\x01Ra\x05WV[\x90V[a\x05\xAFa\0\xA2V[=_\x82>=\x90\xFD[\x90V[` \x91\x81R\x01\x90V[` \x7Fs or failed to add\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Key already exist_\x82\x01R\x01RV[a\x06\x1D`2`@\x92a\x05\xBAV[a\x06&\x81a\x05\xC3V[\x01\x90V[a\x06?\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x10V[\x90V[\x15a\x06IWV[a\x06Qa\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06g`\x04\x82\x01a\x06*V[\x03\x90\xFD[a\x06t\x90a\x02\x17V[\x90V[\x92a\x06\xB1` \x93\x94a\x06\xBCa\x06\x94a\x06\x8F`\x01a\x04\xBCV[a\x02#V[\x93c\xC2*\x96\x94\x92\x95\x97a\x06\xA5a\0\xA2V[\x98\x89\x97\x88\x96\x87\x96a\x05\x10V[\x86R`\x04\x86\x01a\x05zV[\x03\x91Z\xFA\x90\x81\x15a\x07[W_\x91a\x07-W[Pa\x06\xEBa\x06\xE6a\x06\xDF`\x02a\x05\xB7V[\x83\x90a\x0BVV[a\x06BV[a\x07\x15\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~\x91a\x06kV[\x90a\x07\x1Ea\0\xA2V[\x80a\x07(\x81a\x01^V[\x03\x90\xA2V[a\x07N\x91P` =\x81\x11a\x07TW[a\x07F\x81\x83a\x04\xE7V[\x81\x01\x90a\x05%V[_a\x06\xCEV[P=a\x07<V[a\x05\xA7V[a\x07ha\x0B\x90V[a\x07pa\x07\x9DV[V[\x90V[a\x07\x89a\x07\x84a\x07\x8E\x92a\x07rV[a\x01\xF8V[a\x01\xEDV[\x90V[a\x07\x9A\x90a\x07uV[\x90V[a\x07\xAEa\x07\xA9_a\x07\x91V[a\x0C\x01V[V[a\x07\xB8a\x07`V[V[_\x90V[a\x07\xDA\x90a\x07\xCAa\x07\xBAV[Pa\x07\xD5`\x02a\x05\xB7V[a\x0C`V[\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07\xF8a\x07\xFD\x91a\x04\xA3V[a\x07\xE1V[\x90V[a\x08\n\x90Ta\x07\xECV[\x90V[a\x08\x15a\x07\xDDV[Pa\x08\x1F_a\x08\0V[\x90V[a\x083\x90a\x08.a\x0B\x90V[a\x08\x90V[V[_\x1B\x90V[\x90a\x08K`\x01\x80`\xA0\x1B\x03\x91a\x085V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08^\x90a\x01\xFBV[\x90V[a\x08j\x90a\x08UV[\x90V[\x90V[\x90a\x08\x85a\x08\x80a\x08\x8C\x92a\x08aV[a\x08mV[\x82Ta\x08:V[\x90UV[a\x08\xA3\x90a\x08\x9Ca\n\x92V[`\x01a\x08pV[V[a\x08\xAE\x90a\x08\"V[V[a\x08\xB8a\x0B\x90V[a\x08\xC0a\t\xDDV[V[\x90V[a\x08\xD9a\x08\xD4a\x08\xDE\x92a\x07rV[a\x01\xF8V[a\x08\xC2V[\x90V[`\x01a\x08\xED\x91\x01a\x08\xC2V[\x90V[Q\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t\x12\x82a\x08\xF0V[\x81\x10\x15a\t#W` \x80\x91\x02\x01\x01\x90V[a\x08\xF4V[a\t2\x90Qa\x02\xB9V[\x90V[` \x7Fkey\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Failed to remove _\x82\x01R\x01RV[a\t\x8F`#`@\x92a\x05\xBAV[a\t\x98\x81a\t5V[\x01\x90V[a\t\xB1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\x82V[\x90V[\x15a\t\xBBWV[a\t\xC3a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xD9`\x04\x82\x01a\t\x9CV[\x03\x90\xFD[a\t\xEFa\t\xEA`\x02a\x05\xB7V[a\x0C\x9FV[\x90a\t\xF9_a\x08\xC5V[[\x80a\n\x15a\n\x0Fa\n\n\x86a\x08\xF0V[a\x08\xC2V[\x91a\x08\xC2V[\x10\x15a\nWWa\nR\x90a\nMa\nHa\n/`\x02a\x05\xB7V[a\nBa\n=\x88\x86\x90a\t\x08V[a\t(V[\x90a\x0C\xC7V[a\t\xB4V[a\x08\xE1V[a\t\xFAV[P\x90P\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xACa\n\x83a\0\xA2V[\x80a\n\x8D\x81a\x01^V[\x03\x90\xA1V[a\n\x9Aa\x08\xB0V[V[a\n\xAD\x90a\n\xA8a\x0B\x90V[a\n\xAFV[V[\x80a\n\xCAa\n\xC4a\n\xBF_a\x07\x91V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\n\xDAWa\n\xD8\x90a\x0C\x01V[V[a\n\xFDa\n\xE6_a\x07\x91V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[a\x0B\n\x90a\n\x9CV[V[a\x0B\x15\x90a\x01\xFBV[\x90V[a\x0B,a\x0B'a\x0B1\x92a\x01\xEDV[a\x01\xF8V[a\x08\xC2V[\x90V[\x90V[a\x0BKa\x0BFa\x0BP\x92a\x08\xC2V[a\x085V[a\x0B4V[\x90V[\x90V[\x90a\x0B\x88a\x0B\x82a\x0B}a\x0Bx_a\x0B\x8D\x96a\x0Bpa\x07\xBAV[P\x01\x94a\x0B\x0CV[a\x0B\x18V[a\x0B7V[\x91a\x0BSV[a\x0E@V[\x90V[a\x0B\x98a\x08\rV[a\x0B\xB1a\x0B\xABa\x0B\xA6a\x0E\xA3V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\x0B\xB8WV[a\x0B\xDAa\x0B\xC3a\x0E\xA3V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[\x90V[\x90a\x0B\xF6a\x0B\xF1a\x0B\xFD\x92a\x06kV[a\x0B\xDEV[\x82Ta\x08:V[\x90UV[a\x0C\n_a\x08\0V[a\x0C\x14\x82_a\x0B\xE1V[\x90a\x0CHa\x0CB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06kV[\x91a\x06kV[\x91a\x0CQa\0\xA2V[\x80a\x0C[\x81a\x01^V[\x03\x90\xA3V[\x90a\x0C\x92a\x0C\x8Ca\x0C\x87a\x0C\x82_a\x0C\x97\x96a\x0Cza\x07\xBAV[P\x01\x94a\x0B\x0CV[a\x0B\x18V[a\x0B7V[\x91a\x0BSV[a\x0E\xD4V[\x90V[``\x90V[a\x0C\xB6_a\x0C\xBB\x92a\x0C\xAFa\x0C\x9AV[P\x01a\x0BSV[a\x0F\xFAV[a\x0C\xC3a\x0C\x9AV[P\x90V[\x90a\x0C\xF9a\x0C\xF3a\x0C\xEEa\x0C\xE9_a\x0C\xFE\x96a\x0C\xE1a\x07\xBAV[P\x01\x94a\x0B\x0CV[a\x0B\x18V[a\x0B7V[\x91a\x0BSV[a\x11LV[\x90V[\x90V[_R` _ \x90V[T\x90V[a\r\x1A\x81a\r\rV[\x82\x10\x15a\r4Wa\r,`\x01\x91a\r\x04V[\x91\x02\x01\x90_\x90V[a\x08\xF4V[\x1B\x90V[\x91\x90`\x08a\rX\x91\x02\x91a\rR_\x19\x84a\r9V[\x92a\r9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\rk\x90a\x0B4V[\x90V[a\rw\x90a\x04\xA3V[\x90V[\x91\x90a\r\x90a\r\x8Ba\r\x98\x93a\rbV[a\rnV[\x90\x83Ta\r=V[\x90UV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\r\xCCW\x82a\r\xC4\x91`\x01a\r\xCA\x95\x01\x81Ua\r\x11V[\x90a\rzV[V[a\x04\xD3V[T\x90V[\x90a\r\xDF\x90a\rbV[_R` R`@_ \x90V[\x90a\r\xF7_\x19\x91a\x085V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x15a\x0E\x10a\x0E\x1A\x92a\x08\xC2V[a\x01\xF8V[a\x08\xC2V[\x90V[\x90V[\x90a\x0E5a\x0E0a\x0E<\x92a\x0E\x01V[a\x0E\x1DV[\x82Ta\r\xEBV[\x90UV[a\x0EHa\x07\xBAV[Pa\x0E]a\x0EW\x82\x84\x90a\x0E\xD4V[\x15a\x03\x06V[_\x14a\x0E\x9DWa\x0E\x93a\x0E\x98\x92a\x0E\x7Fa\x0Ex_\x85\x01a\r\x01V[\x82\x90a\r\x9CV[`\x01a\x0E\x8C_\x85\x01a\r\xD1V[\x93\x01a\r\xD5V[a\x0E V[`\x01\x90V[PP_\x90V[a\x0E\xABa\x07\xDDV[P3\x90V[\x90V[a\x0E\xBFa\x0E\xC4\x91a\x04\xA3V[a\x0E\xB0V[\x90V[a\x0E\xD1\x90Ta\x0E\xB3V[\x90V[a\x0E\xF2\x91`\x01a\x0E\xED\x92a\x0E\xE6a\x07\xBAV[P\x01a\r\xD5V[a\x0E\xC7V[a\x0F\x04a\x0E\xFE_a\x08\xC5V[\x91a\x08\xC2V[\x14\x15\x90V[``\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[a\x0F)\x90a\x0B4V[\x90RV[\x90a\x0F:\x81` \x93a\x0F V[\x01\x90V[\x90V[a\x0FMa\x0FR\x91a\x04\xA3V[a\x0F>V[\x90V[a\x0F_\x90Ta\x0FAV[\x90V[`\x01\x01\x90V[\x90a\x0F\x85a\x0F\x7Fa\x0Fx\x84a\r\xD1V[\x80\x93a\x0F\x0EV[\x92a\x0F\x17V[\x90_[\x81\x81\x10a\x0F\x95WPPP\x90V[\x90\x91\x92a\x0F\xB5a\x0F\xAF`\x01\x92a\x0F\xAA\x87a\x0FUV[a\x0F-V[\x94a\x0FbV[\x91\x01\x91\x90\x91a\x0F\x88V[\x90a\x0F\xC9\x91a\x0FhV[\x90V[\x90a\x0F\xECa\x0F\xE5\x92a\x0F\xDCa\0\xA2V[\x93\x84\x80\x92a\x0F\xBFV[\x03\x83a\x04\xE7V[V[a\x0F\xF7\x90a\x0F\xCCV[\x90V[_a\x10\x0E\x91a\x10\x07a\x0F\tV[P\x01a\x0F\xEEV[\x90V[\x90V[a\x10(a\x10#a\x10-\x92a\x10\x11V[a\x01\xF8V[a\x08\xC2V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x10Sa\x10Y\x91\x93\x92\x93a\x08\xC2V[\x92a\x08\xC2V[\x82\x03\x91\x82\x11a\x10dWV[a\x100V[a\x10r\x81a\r\xD1V[\x82\x10\x15a\x10\x8CWa\x10\x84`\x01\x91a\x0F\x17V[\x91\x02\x01\x90_\x90V[a\x08\xF4V[a\x10\xA1\x90`\x08a\x10\xA6\x93\x02a\x01\xA9V[a\x0F>V[\x90V[\x90a\x10\xB4\x91Ta\x10\x91V[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[_\x90V[a\x10\xE1\x91a\x10\xDBa\x10\xCBV[\x91a\rzV[V[a\x10\xEC\x81a\r\rV[\x80\x15a\x11\rW`\x01\x90\x03\x90a\x11\na\x11\x04\x83\x83a\r\x11V[\x90a\x10\xCFV[UV[a\x10\xB7V[\x91\x90a\x11(a\x11#a\x110\x93a\x0E\x01V[a\x0E\x1DV[\x90\x83Ta\r=V[\x90UV[_\x90V[a\x11J\x91a\x11Da\x114V[\x91a\x11\x12V[V[a\x11Ta\x07\xBAV[Pa\x11ka\x11f`\x01\x83\x01\x84\x90a\r\xD5V[a\x0E\xC7V[\x90\x81a\x11\x7Fa\x11y_a\x08\xC5V[\x91a\x08\xC2V[\x14\x15_\x14a\x12KWa\x11\xFD\x92`\x01a\x11\xF8\x92\x84a\x11\xA6_\x96a\x11\xA0\x85a\x10\x14V[\x90a\x10DV[a\x11\xC3a\x11\xB4\x88\x85\x01a\r\xD1V[a\x11\xBD\x86a\x10\x14V[\x90a\x10DV[\x81a\x11\xD6a\x11\xD0\x83a\x08\xC2V[\x91a\x08\xC2V[\x03a\x12\x02W[PPPa\x11\xF2a\x11\xED\x86\x83\x01a\r\x01V[a\x10\xE3V[\x01a\r\xD5V[a\x118V[`\x01\x90V[a\x12C\x92a\x125a\x12!a\x12\x1Ba\x12>\x94\x8C\x89\x01a\x10iV[\x90a\x10\xA9V[\x93a\x12/\x85\x91\x8C\x89\x01a\x10iV[\x90a\rzV[\x91\x85\x85\x01a\r\xD5V[a\x0E V[_\x80\x80a\x11\xDCV[PPP_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61049f565b61001d5f3561009c565b80630c6fe1aa146100975780634b9f8cd414610092578063715018a61461008d5780637217efcd146100885780638da5cb5b14610083578063aeddd0ba1461007e578063c172ac10146100795763f2fde38b0361000e5761046c565b610439565b610406565b610384565b61032d565b610286565b610251565b610163565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100fa5781359167ffffffffffffffff83116100f55760200192600183028401116100f057565b6100bc565b6100b8565b6100b4565b9091604082840312610159575f82013567ffffffffffffffff8111610154578361012a9184016100c0565b929093602082013567ffffffffffffffff811161014f5761014b92016100c0565b9091565b6100b0565b6100b0565b6100ac565b5f0190565b346101955761017f6101763660046100ff565b92919091610677565b6101876100a2565b806101918161015e565b0390f35b6100a8565b5f9103126101a457565b6100ac565b1c90565b60018060a01b031690565b6101c89060086101cd93026101a9565b6101ad565b90565b906101db91546101b8565b90565b6101ea60015f906101d0565b90565b60018060a01b031690565b90565b61020f61020a610214926101ed565b6101f8565b6101ed565b90565b610220906101fb565b90565b61022c90610217565b90565b61023890610223565b9052565b919061024f905f6020850194019061022f565b565b346102815761026136600461019a565b61027d61026c6101de565b6102746100a2565b9182918261023c565b0390f35b6100a8565b346102b45761029636600461019a565b61029e6107b0565b6102a66100a2565b806102b08161015e565b0390f35b6100a8565b6102c2906101ed565b90565b6102ce816102b9565b036102d557565b5f80fd5b905035906102e6826102c5565b565b90602082820312610301576102fe915f016102d9565b90565b6100ac565b151590565b61031490610306565b9052565b919061032b905f6020850194019061030b565b565b3461035d576103596103486103433660046102e8565b6107be565b6103506100a2565b91829182610318565b0390f35b6100a8565b61036b906102b9565b9052565b9190610382905f60208501940190610362565b565b346103b45761039436600461019a565b6103b061039f61080d565b6103a76100a2565b9182918261036f565b0390f35b6100a8565b6103c2906102b9565b90565b6103ce816103b9565b036103d557565b5f80fd5b905035906103e6826103c5565b565b90602082820312610401576103fe915f016103d9565b90565b6100ac565b346104345761041e6104193660046103e8565b6108a5565b6104266100a2565b806104308161015e565b0390f35b6100a8565b346104675761044936600461019a565b610451610a92565b6104596100a2565b806104638161015e565b0390f35b6100a8565b3461049a5761048461047f3660046102e8565b610b01565b61048c6100a2565b806104968161015e565b0390f35b6100a8565b5f80fd5b5f1c90565b6104b46104b9916104a3565b6101ad565b90565b6104c690546104a8565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104f1906104c9565b810190811067ffffffffffffffff82111761050b57604052565b6104d3565b60e01b90565b90505190610523826102c5565b565b9060208282031261053e5761053b915f01610516565b90565b6100ac565b60209181520190565b90825f939282370152565b91906105718161056a8161057695610543565b809561054c565b6104c9565b0190565b9290610596906105a4959360408601918683035f880152610557565b926020818503910152610557565b90565b6105af6100a2565b3d5f823e3d90fd5b90565b60209181520190565b60207f73206f72206661696c656420746f206164640000000000000000000000000000917f5465654b65794d616e616765723a204b657920616c72656164792065786973745f8201520152565b61061d60326040926105ba565b610626816105c3565b0190565b61063f9060208101905f818303910152610610565b90565b1561064957565b6106516100a2565b62461bcd60e51b8152806106676004820161062a565b0390fd5b61067490610217565b90565b926106b1602093946106bc61069461068f60016104bc565b610223565b9363c22a96949295976106a56100a2565b98899788968796610510565b86526004860161057a565b03915afa90811561075b575f9161072d575b506106eb6106e66106df60026105b7565b8390610b56565b610642565b6107157f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e9161066b565b9061071e6100a2565b806107288161015e565b0390a2565b61074e915060203d8111610754575b61074681836104e7565b810190610525565b5f6106ce565b503d61073c565b6105a7565b610768610b90565b61077061079d565b565b90565b61078961078461078e92610772565b6101f8565b6101ed565b90565b61079a90610775565b90565b6107ae6107a95f610791565b610c01565b565b6107b8610760565b565b5f90565b6107da906107ca6107ba565b506107d560026105b7565b610c60565b90565b5f90565b60018060a01b031690565b6107f86107fd916104a3565b6107e1565b90565b61080a90546107ec565b90565b6108156107dd565b5061081f5f610800565b90565b6108339061082e610b90565b610890565b565b5f1b90565b9061084b60018060a01b0391610835565b9181191691161790565b61085e906101fb565b90565b61086a90610855565b90565b90565b9061088561088061088c92610861565b61086d565b825461083a565b9055565b6108a39061089c610a92565b6001610870565b565b6108ae90610822565b565b6108b8610b90565b6108c06109dd565b565b90565b6108d96108d46108de92610772565b6101f8565b6108c2565b90565b60016108ed91016108c2565b90565b5190565b634e487b7160e01b5f52603260045260245ffd5b90610912826108f0565b811015610923576020809102010190565b6108f4565b61093290516102b9565b90565b60207f6b65790000000000000000000000000000000000000000000000000000000000917f5465654b65794d616e616765723a204661696c656420746f2072656d6f7665205f8201520152565b61098f60236040926105ba565b61099881610935565b0190565b6109b19060208101905f818303910152610982565b90565b156109bb57565b6109c36100a2565b62461bcd60e51b8152806109d96004820161099c565b0390fd5b6109ef6109ea60026105b7565b610c9f565b906109f95f6108c5565b5b80610a15610a0f610a0a866108f0565b6108c2565b916108c2565b1015610a5757610a5290610a4d610a48610a2f60026105b7565b610a42610a3d888690610908565b610928565b90610cc7565b6109b4565b6108e1565b6109fa565b5090507f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac610a836100a2565b80610a8d8161015e565b0390a1565b610a9a6108b0565b565b610aad90610aa8610b90565b610aaf565b565b80610aca610ac4610abf5f610791565b6102b9565b916102b9565b14610ada57610ad890610c01565b565b610afd610ae65f610791565b5f918291631e4fbdf760e01b83526004830161036f565b0390fd5b610b0a90610a9c565b565b610b15906101fb565b90565b610b2c610b27610b31926101ed565b6101f8565b6108c2565b90565b90565b610b4b610b46610b50926108c2565b610835565b610b34565b90565b90565b90610b88610b82610b7d610b785f610b8d96610b706107ba565b500194610b0c565b610b18565b610b37565b91610b53565b610e40565b90565b610b9861080d565b610bb1610bab610ba6610ea3565b6102b9565b916102b9565b03610bb857565b610bda610bc3610ea3565b5f91829163118cdaa760e01b83526004830161036f565b0390fd5b90565b90610bf6610bf1610bfd9261066b565b610bde565b825461083a565b9055565b610c0a5f610800565b610c14825f610be1565b90610c48610c427f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361066b565b9161066b565b91610c516100a2565b80610c5b8161015e565b0390a3565b90610c92610c8c610c87610c825f610c9796610c7a6107ba565b500194610b0c565b610b18565b610b37565b91610b53565b610ed4565b90565b606090565b610cb65f610cbb92610caf610c9a565b5001610b53565b610ffa565b610cc3610c9a565b5090565b90610cf9610cf3610cee610ce95f610cfe96610ce16107ba565b500194610b0c565b610b18565b610b37565b91610b53565b61114c565b90565b90565b5f5260205f2090565b5490565b610d1a81610d0d565b821015610d3457610d2c600191610d04565b910201905f90565b6108f4565b1b90565b91906008610d58910291610d525f1984610d39565b92610d39565b9181191691161790565b610d6b90610b34565b90565b610d77906104a3565b90565b9190610d90610d8b610d9893610d62565b610d6e565b908354610d3d565b9055565b9081549168010000000000000000831015610dcc5782610dc4916001610dca95018155610d11565b90610d7a565b565b6104d3565b5490565b90610ddf90610d62565b5f5260205260405f2090565b90610df75f1991610835565b9181191691161790565b610e15610e10610e1a926108c2565b6101f8565b6108c2565b90565b90565b90610e35610e30610e3c92610e01565b610e1d565b8254610deb565b9055565b610e486107ba565b50610e5d610e57828490610ed4565b15610306565b5f14610e9d57610e93610e9892610e7f610e785f8501610d01565b8290610d9c565b6001610e8c5f8501610dd1565b9301610dd5565b610e20565b600190565b50505f90565b610eab6107dd565b503390565b90565b610ebf610ec4916104a3565b610eb0565b90565b610ed19054610eb3565b90565b610ef2916001610eed92610ee66107ba565b5001610dd5565b610ec7565b610f04610efe5f6108c5565b916108c2565b141590565b606090565b60209181520190565b5f5260205f2090565b610f2990610b34565b9052565b90610f3a81602093610f20565b0190565b90565b610f4d610f52916104a3565b610f3e565b90565b610f5f9054610f41565b90565b60010190565b90610f85610f7f610f7884610dd1565b8093610f0e565b92610f17565b905f5b818110610f955750505090565b909192610fb5610faf600192610faa87610f55565b610f2d565b94610f62565b9101919091610f88565b90610fc991610f68565b90565b90610fec610fe592610fdc6100a2565b93848092610fbf565b03836104e7565b565b610ff790610fcc565b90565b5f61100e91611007610f09565b5001610fee565b90565b90565b61102861102361102d92611011565b6101f8565b6108c2565b90565b634e487b7160e01b5f52601160045260245ffd5b611053611059919392936108c2565b926108c2565b820391821161106457565b611030565b61107281610dd1565b82101561108c57611084600191610f17565b910201905f90565b6108f4565b6110a19060086110a693026101a9565b610f3e565b90565b906110b49154611091565b90565b634e487b7160e01b5f52603160045260245ffd5b5f90565b6110e1916110db6110cb565b91610d7a565b565b6110ec81610d0d565b801561110d57600190039061110a6111048383610d11565b906110cf565b55565b6110b7565b919061112861112361113093610e01565b610e1d565b908354610d3d565b9055565b5f90565b61114a91611144611134565b91611112565b565b6111546107ba565b5061116b611166600183018490610dd5565b610ec7565b908161117f6111795f6108c5565b916108c2565b14155f1461124b576111fd9260016111f892846111a65f966111a085611014565b90611044565b6111c36111b4888501610dd1565b6111bd86611014565b90611044565b816111d66111d0836108c2565b916108c2565b03611202575b5050506111f26111ed868301610d01565b6110e3565b01610dd5565b611138565b600190565b6112439261123561122161121b61123e948c8901611069565b906110a9565b9361122f85918c8901611069565b90610d7a565b91858501610dd5565b610e20565b5f80806111dc565b5050505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x9FV[a\0\x1D_5a\0\x9CV[\x80c\x0Co\xE1\xAA\x14a\0\x97W\x80cK\x9F\x8C\xD4\x14a\0\x92W\x80cqP\x18\xA6\x14a\0\x8DW\x80cr\x17\xEF\xCD\x14a\0\x88W\x80c\x8D\xA5\xCB[\x14a\0\x83W\x80c\xAE\xDD\xD0\xBA\x14a\0~W\x80c\xC1r\xAC\x10\x14a\0yWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04lV[a\x049V[a\x04\x06V[a\x03\x84V[a\x03-V[a\x02\x86V[a\x02QV[a\x01cV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xF5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xF0WV[a\0\xBCV[a\0\xB8V[a\0\xB4V[\x90\x91`@\x82\x84\x03\x12a\x01YW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01TW\x83a\x01*\x91\x84\x01a\0\xC0V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01OWa\x01K\x92\x01a\0\xC0V[\x90\x91V[a\0\xB0V[a\0\xB0V[a\0\xACV[_\x01\x90V[4a\x01\x95Wa\x01\x7Fa\x01v6`\x04a\0\xFFV[\x92\x91\x90\x91a\x06wV[a\x01\x87a\0\xA2V[\x80a\x01\x91\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01\xA4WV[a\0\xACV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xC8\x90`\x08a\x01\xCD\x93\x02a\x01\xA9V[a\x01\xADV[\x90V[\x90a\x01\xDB\x91Ta\x01\xB8V[\x90V[a\x01\xEA`\x01_\x90a\x01\xD0V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\x0Fa\x02\na\x02\x14\x92a\x01\xEDV[a\x01\xF8V[a\x01\xEDV[\x90V[a\x02 \x90a\x01\xFBV[\x90V[a\x02,\x90a\x02\x17V[\x90V[a\x028\x90a\x02#V[\x90RV[\x91\x90a\x02O\x90_` \x85\x01\x94\x01\x90a\x02/V[V[4a\x02\x81Wa\x02a6`\x04a\x01\x9AV[a\x02}a\x02la\x01\xDEV[a\x02ta\0\xA2V[\x91\x82\x91\x82a\x02<V[\x03\x90\xF3[a\0\xA8V[4a\x02\xB4Wa\x02\x966`\x04a\x01\x9AV[a\x02\x9Ea\x07\xB0V[a\x02\xA6a\0\xA2V[\x80a\x02\xB0\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[a\x02\xC2\x90a\x01\xEDV[\x90V[a\x02\xCE\x81a\x02\xB9V[\x03a\x02\xD5WV[_\x80\xFD[\x90P5\x90a\x02\xE6\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x03\x01Wa\x02\xFE\x91_\x01a\x02\xD9V[\x90V[a\0\xACV[\x15\x15\x90V[a\x03\x14\x90a\x03\x06V[\x90RV[\x91\x90a\x03+\x90_` \x85\x01\x94\x01\x90a\x03\x0BV[V[4a\x03]Wa\x03Ya\x03Ha\x03C6`\x04a\x02\xE8V[a\x07\xBEV[a\x03Pa\0\xA2V[\x91\x82\x91\x82a\x03\x18V[\x03\x90\xF3[a\0\xA8V[a\x03k\x90a\x02\xB9V[\x90RV[\x91\x90a\x03\x82\x90_` \x85\x01\x94\x01\x90a\x03bV[V[4a\x03\xB4Wa\x03\x946`\x04a\x01\x9AV[a\x03\xB0a\x03\x9Fa\x08\rV[a\x03\xA7a\0\xA2V[\x91\x82\x91\x82a\x03oV[\x03\x90\xF3[a\0\xA8V[a\x03\xC2\x90a\x02\xB9V[\x90V[a\x03\xCE\x81a\x03\xB9V[\x03a\x03\xD5WV[_\x80\xFD[\x90P5\x90a\x03\xE6\x82a\x03\xC5V[V[\x90` \x82\x82\x03\x12a\x04\x01Wa\x03\xFE\x91_\x01a\x03\xD9V[\x90V[a\0\xACV[4a\x044Wa\x04\x1Ea\x04\x196`\x04a\x03\xE8V[a\x08\xA5V[a\x04&a\0\xA2V[\x80a\x040\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04gWa\x04I6`\x04a\x01\x9AV[a\x04Qa\n\x92V[a\x04Ya\0\xA2V[\x80a\x04c\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04\x9AWa\x04\x84a\x04\x7F6`\x04a\x02\xE8V[a\x0B\x01V[a\x04\x8Ca\0\xA2V[\x80a\x04\x96\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\xB4a\x04\xB9\x91a\x04\xA3V[a\x01\xADV[\x90V[a\x04\xC6\x90Ta\x04\xA8V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xF1\x90a\x04\xC9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x0BW`@RV[a\x04\xD3V[`\xE0\x1B\x90V[\x90PQ\x90a\x05#\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x05>Wa\x05;\x91_\x01a\x05\x16V[\x90V[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05q\x81a\x05j\x81a\x05v\x95a\x05CV[\x80\x95a\x05LV[a\x04\xC9V[\x01\x90V[\x92\x90a\x05\x96\x90a\x05\xA4\x95\x93`@\x86\x01\x91\x86\x83\x03_\x88\x01Ra\x05WV[\x92` \x81\x85\x03\x91\x01Ra\x05WV[\x90V[a\x05\xAFa\0\xA2V[=_\x82>=\x90\xFD[\x90V[` \x91\x81R\x01\x90V[` \x7Fs or failed to add\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Key already exist_\x82\x01R\x01RV[a\x06\x1D`2`@\x92a\x05\xBAV[a\x06&\x81a\x05\xC3V[\x01\x90V[a\x06?\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x10V[\x90V[\x15a\x06IWV[a\x06Qa\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06g`\x04\x82\x01a\x06*V[\x03\x90\xFD[a\x06t\x90a\x02\x17V[\x90V[\x92a\x06\xB1` \x93\x94a\x06\xBCa\x06\x94a\x06\x8F`\x01a\x04\xBCV[a\x02#V[\x93c\xC2*\x96\x94\x92\x95\x97a\x06\xA5a\0\xA2V[\x98\x89\x97\x88\x96\x87\x96a\x05\x10V[\x86R`\x04\x86\x01a\x05zV[\x03\x91Z\xFA\x90\x81\x15a\x07[W_\x91a\x07-W[Pa\x06\xEBa\x06\xE6a\x06\xDF`\x02a\x05\xB7V[\x83\x90a\x0BVV[a\x06BV[a\x07\x15\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~\x91a\x06kV[\x90a\x07\x1Ea\0\xA2V[\x80a\x07(\x81a\x01^V[\x03\x90\xA2V[a\x07N\x91P` =\x81\x11a\x07TW[a\x07F\x81\x83a\x04\xE7V[\x81\x01\x90a\x05%V[_a\x06\xCEV[P=a\x07<V[a\x05\xA7V[a\x07ha\x0B\x90V[a\x07pa\x07\x9DV[V[\x90V[a\x07\x89a\x07\x84a\x07\x8E\x92a\x07rV[a\x01\xF8V[a\x01\xEDV[\x90V[a\x07\x9A\x90a\x07uV[\x90V[a\x07\xAEa\x07\xA9_a\x07\x91V[a\x0C\x01V[V[a\x07\xB8a\x07`V[V[_\x90V[a\x07\xDA\x90a\x07\xCAa\x07\xBAV[Pa\x07\xD5`\x02a\x05\xB7V[a\x0C`V[\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07\xF8a\x07\xFD\x91a\x04\xA3V[a\x07\xE1V[\x90V[a\x08\n\x90Ta\x07\xECV[\x90V[a\x08\x15a\x07\xDDV[Pa\x08\x1F_a\x08\0V[\x90V[a\x083\x90a\x08.a\x0B\x90V[a\x08\x90V[V[_\x1B\x90V[\x90a\x08K`\x01\x80`\xA0\x1B\x03\x91a\x085V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08^\x90a\x01\xFBV[\x90V[a\x08j\x90a\x08UV[\x90V[\x90V[\x90a\x08\x85a\x08\x80a\x08\x8C\x92a\x08aV[a\x08mV[\x82Ta\x08:V[\x90UV[a\x08\xA3\x90a\x08\x9Ca\n\x92V[`\x01a\x08pV[V[a\x08\xAE\x90a\x08\"V[V[a\x08\xB8a\x0B\x90V[a\x08\xC0a\t\xDDV[V[\x90V[a\x08\xD9a\x08\xD4a\x08\xDE\x92a\x07rV[a\x01\xF8V[a\x08\xC2V[\x90V[`\x01a\x08\xED\x91\x01a\x08\xC2V[\x90V[Q\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t\x12\x82a\x08\xF0V[\x81\x10\x15a\t#W` \x80\x91\x02\x01\x01\x90V[a\x08\xF4V[a\t2\x90Qa\x02\xB9V[\x90V[` \x7Fkey\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Failed to remove _\x82\x01R\x01RV[a\t\x8F`#`@\x92a\x05\xBAV[a\t\x98\x81a\t5V[\x01\x90V[a\t\xB1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\x82V[\x90V[\x15a\t\xBBWV[a\t\xC3a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xD9`\x04\x82\x01a\t\x9CV[\x03\x90\xFD[a\t\xEFa\t\xEA`\x02a\x05\xB7V[a\x0C\x9FV[\x90a\t\xF9_a\x08\xC5V[[\x80a\n\x15a\n\x0Fa\n\n\x86a\x08\xF0V[a\x08\xC2V[\x91a\x08\xC2V[\x10\x15a\nWWa\nR\x90a\nMa\nHa\n/`\x02a\x05\xB7V[a\nBa\n=\x88\x86\x90a\t\x08V[a\t(V[\x90a\x0C\xC7V[a\t\xB4V[a\x08\xE1V[a\t\xFAV[P\x90P\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xACa\n\x83a\0\xA2V[\x80a\n\x8D\x81a\x01^V[\x03\x90\xA1V[a\n\x9Aa\x08\xB0V[V[a\n\xAD\x90a\n\xA8a\x0B\x90V[a\n\xAFV[V[\x80a\n\xCAa\n\xC4a\n\xBF_a\x07\x91V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\n\xDAWa\n\xD8\x90a\x0C\x01V[V[a\n\xFDa\n\xE6_a\x07\x91V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[a\x0B\n\x90a\n\x9CV[V[a\x0B\x15\x90a\x01\xFBV[\x90V[a\x0B,a\x0B'a\x0B1\x92a\x01\xEDV[a\x01\xF8V[a\x08\xC2V[\x90V[\x90V[a\x0BKa\x0BFa\x0BP\x92a\x08\xC2V[a\x085V[a\x0B4V[\x90V[\x90V[\x90a\x0B\x88a\x0B\x82a\x0B}a\x0Bx_a\x0B\x8D\x96a\x0Bpa\x07\xBAV[P\x01\x94a\x0B\x0CV[a\x0B\x18V[a\x0B7V[\x91a\x0BSV[a\x0E@V[\x90V[a\x0B\x98a\x08\rV[a\x0B\xB1a\x0B\xABa\x0B\xA6a\x0E\xA3V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\x0B\xB8WV[a\x0B\xDAa\x0B\xC3a\x0E\xA3V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[\x90V[\x90a\x0B\xF6a\x0B\xF1a\x0B\xFD\x92a\x06kV[a\x0B\xDEV[\x82Ta\x08:V[\x90UV[a\x0C\n_a\x08\0V[a\x0C\x14\x82_a\x0B\xE1V[\x90a\x0CHa\x0CB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06kV[\x91a\x06kV[\x91a\x0CQa\0\xA2V[\x80a\x0C[\x81a\x01^V[\x03\x90\xA3V[\x90a\x0C\x92a\x0C\x8Ca\x0C\x87a\x0C\x82_a\x0C\x97\x96a\x0Cza\x07\xBAV[P\x01\x94a\x0B\x0CV[a\x0B\x18V[a\x0B7V[\x91a\x0BSV[a\x0E\xD4V[\x90V[``\x90V[a\x0C\xB6_a\x0C\xBB\x92a\x0C\xAFa\x0C\x9AV[P\x01a\x0BSV[a\x0F\xFAV[a\x0C\xC3a\x0C\x9AV[P\x90V[\x90a\x0C\xF9a\x0C\xF3a\x0C\xEEa\x0C\xE9_a\x0C\xFE\x96a\x0C\xE1a\x07\xBAV[P\x01\x94a\x0B\x0CV[a\x0B\x18V[a\x0B7V[\x91a\x0BSV[a\x11LV[\x90V[\x90V[_R` _ \x90V[T\x90V[a\r\x1A\x81a\r\rV[\x82\x10\x15a\r4Wa\r,`\x01\x91a\r\x04V[\x91\x02\x01\x90_\x90V[a\x08\xF4V[\x1B\x90V[\x91\x90`\x08a\rX\x91\x02\x91a\rR_\x19\x84a\r9V[\x92a\r9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\rk\x90a\x0B4V[\x90V[a\rw\x90a\x04\xA3V[\x90V[\x91\x90a\r\x90a\r\x8Ba\r\x98\x93a\rbV[a\rnV[\x90\x83Ta\r=V[\x90UV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\r\xCCW\x82a\r\xC4\x91`\x01a\r\xCA\x95\x01\x81Ua\r\x11V[\x90a\rzV[V[a\x04\xD3V[T\x90V[\x90a\r\xDF\x90a\rbV[_R` R`@_ \x90V[\x90a\r\xF7_\x19\x91a\x085V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x15a\x0E\x10a\x0E\x1A\x92a\x08\xC2V[a\x01\xF8V[a\x08\xC2V[\x90V[\x90V[\x90a\x0E5a\x0E0a\x0E<\x92a\x0E\x01V[a\x0E\x1DV[\x82Ta\r\xEBV[\x90UV[a\x0EHa\x07\xBAV[Pa\x0E]a\x0EW\x82\x84\x90a\x0E\xD4V[\x15a\x03\x06V[_\x14a\x0E\x9DWa\x0E\x93a\x0E\x98\x92a\x0E\x7Fa\x0Ex_\x85\x01a\r\x01V[\x82\x90a\r\x9CV[`\x01a\x0E\x8C_\x85\x01a\r\xD1V[\x93\x01a\r\xD5V[a\x0E V[`\x01\x90V[PP_\x90V[a\x0E\xABa\x07\xDDV[P3\x90V[\x90V[a\x0E\xBFa\x0E\xC4\x91a\x04\xA3V[a\x0E\xB0V[\x90V[a\x0E\xD1\x90Ta\x0E\xB3V[\x90V[a\x0E\xF2\x91`\x01a\x0E\xED\x92a\x0E\xE6a\x07\xBAV[P\x01a\r\xD5V[a\x0E\xC7V[a\x0F\x04a\x0E\xFE_a\x08\xC5V[\x91a\x08\xC2V[\x14\x15\x90V[``\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[a\x0F)\x90a\x0B4V[\x90RV[\x90a\x0F:\x81` \x93a\x0F V[\x01\x90V[\x90V[a\x0FMa\x0FR\x91a\x04\xA3V[a\x0F>V[\x90V[a\x0F_\x90Ta\x0FAV[\x90V[`\x01\x01\x90V[\x90a\x0F\x85a\x0F\x7Fa\x0Fx\x84a\r\xD1V[\x80\x93a\x0F\x0EV[\x92a\x0F\x17V[\x90_[\x81\x81\x10a\x0F\x95WPPP\x90V[\x90\x91\x92a\x0F\xB5a\x0F\xAF`\x01\x92a\x0F\xAA\x87a\x0FUV[a\x0F-V[\x94a\x0FbV[\x91\x01\x91\x90\x91a\x0F\x88V[\x90a\x0F\xC9\x91a\x0FhV[\x90V[\x90a\x0F\xECa\x0F\xE5\x92a\x0F\xDCa\0\xA2V[\x93\x84\x80\x92a\x0F\xBFV[\x03\x83a\x04\xE7V[V[a\x0F\xF7\x90a\x0F\xCCV[\x90V[_a\x10\x0E\x91a\x10\x07a\x0F\tV[P\x01a\x0F\xEEV[\x90V[\x90V[a\x10(a\x10#a\x10-\x92a\x10\x11V[a\x01\xF8V[a\x08\xC2V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x10Sa\x10Y\x91\x93\x92\x93a\x08\xC2V[\x92a\x08\xC2V[\x82\x03\x91\x82\x11a\x10dWV[a\x100V[a\x10r\x81a\r\xD1V[\x82\x10\x15a\x10\x8CWa\x10\x84`\x01\x91a\x0F\x17V[\x91\x02\x01\x90_\x90V[a\x08\xF4V[a\x10\xA1\x90`\x08a\x10\xA6\x93\x02a\x01\xA9V[a\x0F>V[\x90V[\x90a\x10\xB4\x91Ta\x10\x91V[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[_\x90V[a\x10\xE1\x91a\x10\xDBa\x10\xCBV[\x91a\rzV[V[a\x10\xEC\x81a\r\rV[\x80\x15a\x11\rW`\x01\x90\x03\x90a\x11\na\x11\x04\x83\x83a\r\x11V[\x90a\x10\xCFV[UV[a\x10\xB7V[\x91\x90a\x11(a\x11#a\x110\x93a\x0E\x01V[a\x0E\x1DV[\x90\x83Ta\r=V[\x90UV[_\x90V[a\x11J\x91a\x11Da\x114V[\x91a\x11\x12V[V[a\x11Ta\x07\xBAV[Pa\x11ka\x11f`\x01\x83\x01\x84\x90a\r\xD5V[a\x0E\xC7V[\x90\x81a\x11\x7Fa\x11y_a\x08\xC5V[\x91a\x08\xC2V[\x14\x15_\x14a\x12KWa\x11\xFD\x92`\x01a\x11\xF8\x92\x84a\x11\xA6_\x96a\x11\xA0\x85a\x10\x14V[\x90a\x10DV[a\x11\xC3a\x11\xB4\x88\x85\x01a\r\xD1V[a\x11\xBD\x86a\x10\x14V[\x90a\x10DV[\x81a\x11\xD6a\x11\xD0\x83a\x08\xC2V[\x91a\x08\xC2V[\x03a\x12\x02W[PPPa\x11\xF2a\x11\xED\x86\x83\x01a\r\x01V[a\x10\xE3V[\x01a\r\xD5V[a\x118V[`\x01\x90V[a\x12C\x92a\x125a\x12!a\x12\x1Ba\x12>\x94\x8C\x89\x01a\x10iV[\x90a\x10\xA9V[\x93a\x12/\x85\x91\x8C\x89\x01a\x10iV[\x90a\rzV[\x91\x85\x85\x01a\r\xD5V[a\x0E V[_\x80\x80a\x11\xDCV[PPP_\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeyAdded(address)` and selector `0x654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e`.
```solidity
event KeyAdded(address indexed key);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeyAdded {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeyAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "KeyAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                101u8, 74u8, 187u8, 165u8, 211u8, 23u8, 1u8, 133u8, 237u8, 37u8, 201u8,
                180u8, 31u8, 125u8, 32u8, 148u8, 219u8, 54u8, 67u8, 152u8, 107u8, 5u8,
                233u8, 233u8, 202u8, 179u8, 112u8, 40u8, 184u8, 0u8, 173u8, 126u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { key: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.key.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.key,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeyAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeyAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeyAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeysRevoked()` and selector `0x2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac`.
```solidity
event KeysRevoked();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeysRevoked;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeysRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeysRevoked()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                46u8, 50u8, 243u8, 233u8, 120u8, 242u8, 99u8, 126u8, 218u8, 103u8, 242u8,
                64u8, 6u8, 102u8, 185u8, 211u8, 11u8, 244u8, 255u8, 2u8, 193u8, 105u8,
                132u8, 177u8, 145u8, 87u8, 92u8, 79u8, 105u8, 133u8, 130u8, 172u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeysRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeysRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeysRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _attestationDocVerifier);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _attestationDocVerifier: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._attestationDocVerifier,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _attestationDocVerifier: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifier,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addKey(bytes,bytes)` and selector `0x0c6fe1aa`.
```solidity
function addKey(bytes memory _publicValues, bytes memory _proofBytes) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyCall {
        #[allow(missing_docs)]
        pub _publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proofBytes: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addKey(bytes,bytes)`](addKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyCall> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyCall) -> Self {
                    (value._publicValues, value._proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _publicValues: tuple.0,
                        _proofBytes: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addKeyReturn {
            fn _tokenize(
                &self,
            ) -> <addKeyCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addKeyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addKeyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addKey(bytes,bytes)";
            const SELECTOR: [u8; 4] = [12u8, 111u8, 225u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proofBytes,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addKeyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `attestationDocVerifier()` and selector `0x4b9f8cd4`.
```solidity
function attestationDocVerifier() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`attestationDocVerifier()`](attestationDocVerifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for attestationDocVerifierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "attestationDocVerifier()";
            const SELECTOR: [u8; 4] = [75u8, 159u8, 140u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: attestationDocVerifierReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: attestationDocVerifierReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isKeyValid(address)` and selector `0x7217efcd`.
```solidity
function isKeyValid(address publicKey) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidCall {
        #[allow(missing_docs)]
        pub publicKey: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isKeyValid(address)`](isKeyValidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidCall> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidCall) -> Self {
                    (value.publicKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isKeyValidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isKeyValid(address)";
            const SELECTOR: [u8; 4] = [114u8, 23u8, 239u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.publicKey,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isKeyValidReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isKeyValidReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeAllKeys()` and selector `0xc172ac10`.
```solidity
function revokeAllKeys() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysCall;
    ///Container type for the return parameters of the [`revokeAllKeys()`](revokeAllKeysCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeAllKeysReturn {
            fn _tokenize(
                &self,
            ) -> <revokeAllKeysCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeAllKeysCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeAllKeysReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeAllKeys()";
            const SELECTOR: [u8; 4] = [193u8, 114u8, 172u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeAllKeysReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateAttestationDocVerifier(address)` and selector `0xaeddd0ba`.
```solidity
function updateAttestationDocVerifier(address _attestationDocVerifier) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAttestationDocVerifierCall {
        #[allow(missing_docs)]
        pub _attestationDocVerifier: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateAttestationDocVerifier(address)`](updateAttestationDocVerifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAttestationDocVerifierReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAttestationDocVerifierCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAttestationDocVerifierCall) -> Self {
                    (value._attestationDocVerifier,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAttestationDocVerifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _attestationDocVerifier: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAttestationDocVerifierReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAttestationDocVerifierReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAttestationDocVerifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl updateAttestationDocVerifierReturn {
            fn _tokenize(
                &self,
            ) -> <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAttestationDocVerifierCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAttestationDocVerifierReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAttestationDocVerifier(address)";
            const SELECTOR: [u8; 4] = [174u8, 221u8, 208u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifier,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                updateAttestationDocVerifierReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TeeKeyManager`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum TeeKeyManagerCalls {
        #[allow(missing_docs)]
        addKey(addKeyCall),
        #[allow(missing_docs)]
        attestationDocVerifier(attestationDocVerifierCall),
        #[allow(missing_docs)]
        isKeyValid(isKeyValidCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        revokeAllKeys(revokeAllKeysCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAttestationDocVerifier(updateAttestationDocVerifierCall),
    }
    #[automatically_derived]
    impl TeeKeyManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [12u8, 111u8, 225u8, 170u8],
            [75u8, 159u8, 140u8, 212u8],
            [113u8, 80u8, 24u8, 166u8],
            [114u8, 23u8, 239u8, 205u8],
            [141u8, 165u8, 203u8, 91u8],
            [174u8, 221u8, 208u8, 186u8],
            [193u8, 114u8, 172u8, 16u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeKeyManagerCalls {
        const NAME: &'static str = "TeeKeyManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addKey(_) => <addKeyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::attestationDocVerifier(_) => {
                    <attestationDocVerifierCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isKeyValid(_) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeAllKeys(_) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAttestationDocVerifier(_) => {
                    <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<TeeKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(TeeKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn attestationDocVerifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerCalls::attestationDocVerifier)
                    }
                    attestationDocVerifier
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(TeeKeyManagerCalls::owner)
                    }
                    owner
                },
                {
                    fn updateAttestationDocVerifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerCalls::updateAttestationDocVerifier)
                    }
                    updateAttestationDocVerifier
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<TeeKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn attestationDocVerifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::attestationDocVerifier)
                    }
                    attestationDocVerifier
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::owner)
                    }
                    owner
                },
                {
                    fn updateAttestationDocVerifier(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::updateAttestationDocVerifier)
                    }
                    updateAttestationDocVerifier
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::attestationDocVerifier(inner) => {
                    <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAttestationDocVerifier(inner) => {
                    <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::attestationDocVerifier(inner) => {
                    <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAttestationDocVerifier(inner) => {
                    <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeKeyManager`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum TeeKeyManagerErrors {
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl TeeKeyManagerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeKeyManagerErrors {
        const NAME: &'static str = "TeeKeyManagerErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<TeeKeyManagerErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(TeeKeyManagerErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<TeeKeyManagerErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TeeKeyManagerErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TeeKeyManagerErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeKeyManager`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum TeeKeyManagerEvents {
        #[allow(missing_docs)]
        KeyAdded(KeyAdded),
        #[allow(missing_docs)]
        KeysRevoked(KeysRevoked),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl TeeKeyManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                46u8, 50u8, 243u8, 233u8, 120u8, 242u8, 99u8, 126u8, 218u8, 103u8, 242u8,
                64u8, 6u8, 102u8, 185u8, 211u8, 11u8, 244u8, 255u8, 2u8, 193u8, 105u8,
                132u8, 177u8, 145u8, 87u8, 92u8, 79u8, 105u8, 133u8, 130u8, 172u8,
            ],
            [
                101u8, 74u8, 187u8, 165u8, 211u8, 23u8, 1u8, 133u8, 237u8, 37u8, 201u8,
                180u8, 31u8, 125u8, 32u8, 148u8, 219u8, 54u8, 67u8, 152u8, 107u8, 5u8,
                233u8, 233u8, 202u8, 179u8, 112u8, 40u8, 184u8, 0u8, 173u8, 126u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for TeeKeyManagerEvents {
        const NAME: &'static str = "TeeKeyManagerEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<KeyAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeyAdded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::KeyAdded)
                }
                Some(<KeysRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeysRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KeysRevoked)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for TeeKeyManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TeeKeyManager`](self) contract instance.

See the [wrapper's documentation](`TeeKeyManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TeeKeyManagerInstance<P, N> {
        TeeKeyManagerInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _attestationDocVerifier: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TeeKeyManagerInstance<P, N>>,
    > {
        TeeKeyManagerInstance::<P, N>::deploy(provider, _attestationDocVerifier)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _attestationDocVerifier: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        TeeKeyManagerInstance::<P, N>::deploy_builder(provider, _attestationDocVerifier)
    }
    /**A [`TeeKeyManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TeeKeyManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TeeKeyManagerInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for TeeKeyManagerInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TeeKeyManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > TeeKeyManagerInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`TeeKeyManager`](self) contract instance.

See the [wrapper's documentation](`TeeKeyManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _attestationDocVerifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<TeeKeyManagerInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider, _attestationDocVerifier);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _attestationDocVerifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _attestationDocVerifier,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> TeeKeyManagerInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TeeKeyManagerInstance<P, N> {
            TeeKeyManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > TeeKeyManagerInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addKey`] function.
        pub fn addKey(
            &self,
            _publicValues: alloy::sol_types::private::Bytes,
            _proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, addKeyCall, N> {
            self.call_builder(
                &addKeyCall {
                    _publicValues,
                    _proofBytes,
                },
            )
        }
        ///Creates a new call builder for the [`attestationDocVerifier`] function.
        pub fn attestationDocVerifier(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, attestationDocVerifierCall, N> {
            self.call_builder(&attestationDocVerifierCall)
        }
        ///Creates a new call builder for the [`isKeyValid`] function.
        pub fn isKeyValid(
            &self,
            publicKey: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isKeyValidCall, N> {
            self.call_builder(&isKeyValidCall { publicKey })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`revokeAllKeys`] function.
        pub fn revokeAllKeys(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, revokeAllKeysCall, N> {
            self.call_builder(&revokeAllKeysCall)
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAttestationDocVerifier`] function.
        pub fn updateAttestationDocVerifier(
            &self,
            _attestationDocVerifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, updateAttestationDocVerifierCall, N> {
            self.call_builder(
                &updateAttestationDocVerifierCall {
                    _attestationDocVerifier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > TeeKeyManagerInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`KeyAdded`] event.
        pub fn KeyAdded_filter(&self) -> alloy_contract::Event<&P, KeyAdded, N> {
            self.event_filter::<KeyAdded>()
        }
        ///Creates a new event filter for the [`KeysRevoked`] event.
        pub fn KeysRevoked_filter(&self) -> alloy_contract::Event<&P, KeysRevoked, N> {
            self.event_filter::<KeysRevoked>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
