/**

Generated by the following Solidity interface...
```solidity
interface MockExecutor {
    function executeCall(address target, bytes memory data) external returns (bytes memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeCall",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b61036e61002b823961036e90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6101b0565b61001d5f3561002c565b63bca8c7b50361000e5761017a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91909160408184031261010a576100e2835f830161006f565b92602082013567ffffffffffffffff811161010557610101920161008a565b9091565b610040565b61003c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61015061015960209361015e936101478161010f565b93848093610113565b9586910161011c565b610127565b0190565b6101779160208201915f818403910152610131565b90565b346101ab576101a76101966101903660046100c9565b91610332565b61019e610032565b91829182610162565b0390f35b610038565b5f80fd5b606090565b905090565b90825f939282370152565b9091826101d9816101e0936101b9565b80936101be565b0190565b90916101ef926101c9565b90565b634e487b7160e01b5f52604160045260245ffd5b9061021090610127565b810190811067ffffffffffffffff82111761022a57604052565b6101f2565b9061024261023b610032565b9283610206565b565b67ffffffffffffffff81116102625761025e602091610127565b0190565b6101f2565b9061027961027483610244565b61022f565b918252565b3d5f146102995761028e3d610267565b903d5f602084013e5b565b6102a16101b4565b90610297565b60209181520190565b5f7f6578656375746543616c6c206661696c65640000000000000000000000000000910152565b6102e460126020926102a7565b6102ed816102b0565b0190565b6103069060208101905f8183039101526102d7565b90565b1561031057565b610318610032565b62461bcd60e51b81528061032e600482016102f1565b0390fd5b905f928380936103406101b4565b509261035661034d610032565b938492836101e4565b03925af161036b61036561027e565b91610309565b9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x03na\0+\x829a\x03n\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xB0V[a\0\x1D_5a\0,V[c\xBC\xA8\xC7\xB5\x03a\0\x0EWa\x01zV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91\x90\x91`@\x81\x84\x03\x12a\x01\nWa\0\xE2\x83_\x83\x01a\0oV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x05Wa\x01\x01\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01Pa\x01Y` \x93a\x01^\x93a\x01G\x81a\x01\x0FV[\x93\x84\x80\x93a\x01\x13V[\x95\x86\x91\x01a\x01\x1CV[a\x01'V[\x01\x90V[a\x01w\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x011V[\x90V[4a\x01\xABWa\x01\xA7a\x01\x96a\x01\x906`\x04a\0\xC9V[\x91a\x032V[a\x01\x9Ea\x002V[\x91\x82\x91\x82a\x01bV[\x03\x90\xF3[a\08V[_\x80\xFD[``\x90V[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\x01\xD9\x81a\x01\xE0\x93a\x01\xB9V[\x80\x93a\x01\xBEV[\x01\x90V[\x90\x91a\x01\xEF\x92a\x01\xC9V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x10\x90a\x01'V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02*W`@RV[a\x01\xF2V[\x90a\x02Ba\x02;a\x002V[\x92\x83a\x02\x06V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02bWa\x02^` \x91a\x01'V[\x01\x90V[a\x01\xF2V[\x90a\x02ya\x02t\x83a\x02DV[a\x02/V[\x91\x82RV[=_\x14a\x02\x99Wa\x02\x8E=a\x02gV[\x90=_` \x84\x01>[V[a\x02\xA1a\x01\xB4V[\x90a\x02\x97V[` \x91\x81R\x01\x90V[_\x7FexecuteCall failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xE4`\x12` \x92a\x02\xA7V[a\x02\xED\x81a\x02\xB0V[\x01\x90V[a\x03\x06\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xD7V[\x90V[\x15a\x03\x10WV[a\x03\x18a\x002V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03.`\x04\x82\x01a\x02\xF1V[\x03\x90\xFD[\x90_\x92\x83\x80\x93a\x03@a\x01\xB4V[P\x92a\x03Va\x03Ma\x002V[\x93\x84\x92\x83a\x01\xE4V[\x03\x92Z\xF1a\x03ka\x03ea\x02~V[\x91a\x03\tV[\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6101b0565b61001d5f3561002c565b63bca8c7b50361000e5761017a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91909160408184031261010a576100e2835f830161006f565b92602082013567ffffffffffffffff811161010557610101920161008a565b9091565b610040565b61003c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61015061015960209361015e936101478161010f565b93848093610113565b9586910161011c565b610127565b0190565b6101779160208201915f818403910152610131565b90565b346101ab576101a76101966101903660046100c9565b91610332565b61019e610032565b91829182610162565b0390f35b610038565b5f80fd5b606090565b905090565b90825f939282370152565b9091826101d9816101e0936101b9565b80936101be565b0190565b90916101ef926101c9565b90565b634e487b7160e01b5f52604160045260245ffd5b9061021090610127565b810190811067ffffffffffffffff82111761022a57604052565b6101f2565b9061024261023b610032565b9283610206565b565b67ffffffffffffffff81116102625761025e602091610127565b0190565b6101f2565b9061027961027483610244565b61022f565b918252565b3d5f146102995761028e3d610267565b903d5f602084013e5b565b6102a16101b4565b90610297565b60209181520190565b5f7f6578656375746543616c6c206661696c65640000000000000000000000000000910152565b6102e460126020926102a7565b6102ed816102b0565b0190565b6103069060208101905f8183039101526102d7565b90565b1561031057565b610318610032565b62461bcd60e51b81528061032e600482016102f1565b0390fd5b905f928380936103406101b4565b509261035661034d610032565b938492836101e4565b03925af161036b61036561027e565b91610309565b9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xB0V[a\0\x1D_5a\0,V[c\xBC\xA8\xC7\xB5\x03a\0\x0EWa\x01zV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91\x90\x91`@\x81\x84\x03\x12a\x01\nWa\0\xE2\x83_\x83\x01a\0oV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x05Wa\x01\x01\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01Pa\x01Y` \x93a\x01^\x93a\x01G\x81a\x01\x0FV[\x93\x84\x80\x93a\x01\x13V[\x95\x86\x91\x01a\x01\x1CV[a\x01'V[\x01\x90V[a\x01w\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x011V[\x90V[4a\x01\xABWa\x01\xA7a\x01\x96a\x01\x906`\x04a\0\xC9V[\x91a\x032V[a\x01\x9Ea\x002V[\x91\x82\x91\x82a\x01bV[\x03\x90\xF3[a\08V[_\x80\xFD[``\x90V[\x90P\x90V[\x90\x82_\x93\x92\x827\x01RV[\x90\x91\x82a\x01\xD9\x81a\x01\xE0\x93a\x01\xB9V[\x80\x93a\x01\xBEV[\x01\x90V[\x90\x91a\x01\xEF\x92a\x01\xC9V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x10\x90a\x01'V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02*W`@RV[a\x01\xF2V[\x90a\x02Ba\x02;a\x002V[\x92\x83a\x02\x06V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02bWa\x02^` \x91a\x01'V[\x01\x90V[a\x01\xF2V[\x90a\x02ya\x02t\x83a\x02DV[a\x02/V[\x91\x82RV[=_\x14a\x02\x99Wa\x02\x8E=a\x02gV[\x90=_` \x84\x01>[V[a\x02\xA1a\x01\xB4V[\x90a\x02\x97V[` \x91\x81R\x01\x90V[_\x7FexecuteCall failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xE4`\x12` \x92a\x02\xA7V[a\x02\xED\x81a\x02\xB0V[\x01\x90V[a\x03\x06\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xD7V[\x90V[\x15a\x03\x10WV[a\x03\x18a\x002V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03.`\x04\x82\x01a\x02\xF1V[\x03\x90\xFD[\x90_\x92\x83\x80\x93a\x03@a\x01\xB4V[P\x92a\x03Va\x03Ma\x002V[\x93\x84\x92\x83a\x01\xE4V[\x03\x92Z\xF1a\x03ka\x03ea\x02~V[\x91a\x03\tV[\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `executeCall(address,bytes)` and selector `0xbca8c7b5`.
```solidity
function executeCall(address target, bytes memory data) external returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCallCall {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`executeCall(address,bytes)`](executeCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCallReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCallCall) -> Self {
                    (value.target, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        target: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeCallReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Bytes;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeCall(address,bytes)";
            const SELECTOR: [u8; 4] = [188u8, 168u8, 199u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: executeCallReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: executeCallReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`MockExecutor`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MockExecutorCalls {
        #[allow(missing_docs)]
        executeCall(executeCallCall),
    }
    #[automatically_derived]
    impl MockExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[188u8, 168u8, 199u8, 181u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockExecutorCalls {
        const NAME: &'static str = "MockExecutorCalls";
        const MIN_DATA_LENGTH: usize = 96usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeCall(_) => {
                    <executeCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockExecutorCalls>] = &[
                {
                    fn executeCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockExecutorCalls> {
                        <executeCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockExecutorCalls::executeCall)
                    }
                    executeCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockExecutorCalls>] = &[
                {
                    fn executeCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockExecutorCalls> {
                        <executeCallCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockExecutorCalls::executeCall)
                    }
                    executeCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeCall(inner) => {
                    <executeCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeCall(inner) => {
                    <executeCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockExecutor`](self) contract instance.

See the [wrapper's documentation](`MockExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockExecutorInstance<P, N> {
        MockExecutorInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockExecutorInstance<P, N>>,
    > {
        MockExecutorInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        MockExecutorInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`MockExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockExecutorInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for MockExecutorInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockExecutorInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`MockExecutor`](self) contract instance.

See the [wrapper's documentation](`MockExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockExecutorInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> MockExecutorInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockExecutorInstance<P, N> {
            MockExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockExecutorInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeCall`] function.
        pub fn executeCall(
            &self,
            target: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, executeCallCall, N> {
            self.call_builder(&executeCallCall { target, data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockExecutorInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
