/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();

    event AppchainBlockExplorerUrlUpdated(string newUrl);
    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor();

    function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
    function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function INITIAL_APPCHAIN_OWNER() external view returns (address);
    function SEQUENCING_CHAIN_ID() external view returns (uint256);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function getAllowedSettlementAddresses() external view returns (address[] memory);
    function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address initialAppchainOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
    function owner() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateAppchainBlockExplorerUrl(string memory newUrl) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ALLOWED_SETTLEMENT_ADDRESSES",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "APPCHAIN_BLOCK_EXPLORER_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "INITIAL_APPCHAIN_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllowedSettlementAddresses",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initialAppchainOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "appchainBlockExplorerUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "allowedSettlementAddresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAppchainBlockExplorerUrl",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AppchainBlockExplorerUrlUpdated",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b61200d61020f823961200d90f35b610032565b60405190565b5f80fd5b61003e610132565b565b60401c90565b60ff1690565b61005861005d91610040565b610046565b90565b61006a905461004c565b90565b5f0190565b5f1c90565b60018060401b031690565b61008e61009391610072565b610077565b90565b6100a09054610082565b90565b60018060401b031690565b5f1b90565b906100c460018060401b03916100ae565b9181191691161790565b90565b6100e56100e06100ea926100a3565b6100ce565b6100a3565b90565b90565b9061010561010061010c926100d1565b6100ed565b82546100b3565b9055565b610119906100a3565b9052565b9190610130905f60208501940190610110565b565b61013a6101ea565b6101455f8201610060565b6101ce576101545f8201610096565b61016c61016660018060401b036100a3565b916100a3565b03610175575b50565b610188905f60018060401b0391016100f0565b60018060401b036101c57fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916101bc61002c565b9182918261011d565b0390a15f610172565b5f63f92ee8a960e01b8152806101e66004820161006d565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60c06040526004361015610013575b610db9565b61001d5f3561014c565b80630743bf6e1461014757806318b5ce81146101425780631bc0afd61461013d5780634b8be3f71461013857806357d1ba25146101335780635a2d9c181461012e57806362c73caa1461012957806366a1d108146101245780636edd6c091461011f57806385e1f4d01461011a5780638da5cb5b14610115578063a3c6e1e714610110578063aa6a43d81461010b578063bf6db6f814610106578063d1f4737c14610101578063e79388e6146100fc578063f2fde38b146100f7578063f881afaf146100f25763f8a144be0361000e57610d84565b610d40565b610c7a565b610c27565b610b94565b610b50565b610b0c565b610ac8565b610a84565b610a41565b6109fd565b6109b9565b610976565b610930565b610632565b6105a1565b6104e2565b61040e565b61035c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101b6575b60208310146101b157565b610182565b91607f16916101a6565b60209181520190565b5f5260205f2090565b905f92918054906101ec6101e583610196565b80946101c0565b916001811690815f146102435750600114610207575b505050565b61021491929394506101c9565b915f925b81841061022b57505001905f8080610202565b60018160209295939554848601520191019290610218565b92949550505060ff19168252151560200201905f8080610202565b90610268916101d2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102939061026b565b810190811067ffffffffffffffff8211176102ad57604052565b610275565b906102d26102cb926102c2610152565b9384809261025e565b0383610289565b565b905f106102e7576102e4906102b2565b90565b61016f565b6102f8600c5f906102d4565b90565b5190565b60209181520190565b90825f9392825e0152565b61033261033b60209361034093610329816102fb565b938480936102ff565b95869101610308565b61026b565b0190565b6103599160208201915f818403910152610313565b90565b3461038c5761036c366004610160565b6103886103776102ec565b61037f610152565b91829182610344565b0390f35b610158565b1c90565b60018060a01b031690565b6103b09060086103b59302610391565b610395565b90565b906103c391546103a0565b90565b6103d260015f906103b8565b90565b60018060a01b031690565b6103e9906103d5565b90565b6103f5906103e0565b9052565b919061040c905f602085019401906103ec565b565b3461043e5761041e366004610160565b61043a6104296103c6565b610431610152565b918291826103f9565b0390f35b610158565b5190565b60209181520190565b60200190565b61045f906103e0565b9052565b9061047081602093610456565b0190565b60200190565b9061049761049161048a84610443565b8093610447565b92610450565b905f5b8181106104a75750505090565b9091926104c06104ba6001928651610463565b94610474565b910191909161049a565b6104df9160208201915f81840391015261047a565b90565b34610512576104f2366004610160565b61050e6104fd610e89565b610505610152565b918291826104ca565b0390f35b610158565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156105615781359167ffffffffffffffff831161055c57602001926001830284011161055757565b610523565b61051f565b61051b565b90602082820312610597575f82013567ffffffffffffffff81116105925761058e9201610527565b9091565b610517565b61015c565b5f0190565b346105d0576105ba6105b4366004610566565b906111f0565b6105c2610152565b806105cc8161059c565b0390f35b610158565b90565b6105e89060086105ed9302610391565b6105d5565b90565b906105fb91546105d8565b90565b61060a60075f906105f0565b90565b90565b6106199061060d565b9052565b9190610630905f60208501940190610610565b565b3461066257610642366004610160565b61065e61064d6105fe565b610655610152565b9182918261061d565b0390f35b610158565b610670816103e0565b0361067757565b5f80fd5b9050359061068882610667565b565b6106938161060d565b0361069a57565b5f80fd5b905035906106ab8261068a565b565b151590565b6106bb816106ad565b036106c257565b5f80fd5b905035906106d3826106b2565b565b5f80fd5b906106ec6106e5610152565b9283610289565b565b67ffffffffffffffff811161070c5761070860209161026b565b0190565b610275565b90825f939282370152565b9092919261073161072c826106ee565b6106d9565b9381855260208501908284011161074d5761074b92610711565b565b6106d5565b9080601f830112156107705781602061076d9335910161071c565b90565b61051b565b67ffffffffffffffff811161078d5760208091020190565b610275565b909291926107a76107a282610775565b6106d9565b93818552602080860192028301928184116107e457915b8383106107cb5750505050565b602080916107d9848661067b565b8152019201916107be565b610523565b9080601f830112156108075781602061080493359101610792565b90565b61051b565b9190916101c08184031261092b57610826835f830161067b565b92610834816020840161069e565b92610842826040850161069e565b92610850836060830161067b565b9261085e816080840161067b565b9261086c8260a085016106c6565b9261087a8360c0830161069e565b926108888160e0840161069e565b9261089782610100850161067b565b926108a683610120830161069e565b926108b581610140840161067b565b9261016083013567ffffffffffffffff811161092657826108d7918501610752565b9261018081013567ffffffffffffffff811161092157836108f9918301610752565b926101a082013567ffffffffffffffff811161091c5761091992016107e9565b90565b610517565b610517565b610517565b61015c565b346109715761095b61094336600461080c565b9c9b909b9a919a999299989398979497969596611e02565b610963610152565b8061096d8161059c565b0390f35b610158565b346109a55761098f610989366004610566565b90611e93565b610997610152565b806109a18161059c565b0390f35b610158565b6109b6600b5f906102d4565b90565b346109e9576109c9366004610160565b6109e56109d46109aa565b6109dc610152565b91829182610344565b0390f35b610158565b6109fa60025f906103b8565b90565b34610a2d57610a0d366004610160565b610a29610a186109ee565b610a20610152565b918291826103f9565b0390f35b610158565b610a3e60055f906105f0565b90565b34610a7157610a51366004610160565b610a6d610a5c610a32565b610a64610152565b9182918261061d565b0390f35b610158565b610a815f5f906103b8565b90565b34610ab457610a94366004610160565b610ab0610a9f610a76565b610aa7610152565b918291826103f9565b0390f35b610158565b610ac560095f906105f0565b90565b34610af857610ad8366004610160565b610af4610ae3610ab9565b610aeb610152565b9182918261061d565b0390f35b610158565b610b0960035f906103b8565b90565b34610b3c57610b1c366004610160565b610b38610b27610afd565b610b2f610152565b918291826103f9565b0390f35b610158565b610b4d60045f906103b8565b90565b34610b8057610b60366004610160565b610b7c610b6b610b41565b610b73610152565b918291826103f9565b0390f35b610158565b610b9160085f906105f0565b90565b34610bc457610ba4366004610160565b610bc0610baf610b85565b610bb7610152565b9182918261061d565b0390f35b610158565b60ff1690565b610bdf906008610be49302610391565b610bc9565b90565b90610bf29154610bcf565b90565b610c026004601490610be7565b90565b610c0e906106ad565b9052565b9190610c25905f60208501940190610c05565b565b34610c5757610c37366004610160565b610c53610c42610bf5565b610c4a610152565b91829182610c12565b0390f35b610158565b90602082820312610c7557610c72915f0161067b565b90565b61015c565b34610ca857610c92610c8d366004610c5c565b611f7f565b610c9a610152565b80610ca48161059c565b0390f35b610158565b90602082820312610cc657610cc3915f0161069e565b90565b61015c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610cf581610cdf565b821015610d0f57610d07600191610ce3565b910201905f90565b610ccb565b600a610d1f81610cdf565b821015610d3c57610d3991610d3391610cec565b906103b8565b90565b5f80fd5b34610d7057610d6c610d5b610d56366004610cad565b610d14565b610d63610152565b918291826103f9565b0390f35b610158565b610d8160065f906105f0565b90565b34610db457610d94366004610160565b610db0610d9f610d75565b610da7610152565b9182918261061d565b0390f35b610158565b5f80fd5b606090565b60209181520190565b5f1c90565b610ddc610de191610dcb565b610395565b90565b610dee9054610dd0565b90565b60010190565b90610e14610e0e610e0784610cdf565b8093610dc2565b92610ce3565b905f5b818110610e245750505090565b909192610e44610e3e600192610e3987610de4565b610463565b94610df1565b9101919091610e17565b90610e5891610df7565b90565b90610e7b610e7492610e6b610152565b93848092610e4e565b0383610289565b565b610e8690610e5b565b90565b610e91610dbd565b50610e9c600a610e7d565b90565b610ea99054610dd0565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610ee060176020926102ff565b610ee981610eac565b0190565b610f029060208101905f818303910152610ed3565b90565b15610f0c57565b610f14610152565b62461bcd60e51b815280610f2a60048201610eed565b0390fd5b90610f5c91610f5733610f51610f4b610f465f610e9f565b6103e0565b916103e0565b14610f05565b6111a7565b565b5090565b601f602091010490565b1b90565b91906008610f8b910291610f855f1984610f6c565b92610f6c565b9181191691161790565b90565b610fac610fa7610fb19261060d565b610f95565b61060d565b90565b90565b9190610fcd610fc8610fd593610f98565b610fb4565b908354610f70565b9055565b5f90565b610fef91610fe9610fd9565b91610fb7565b565b5b818110610ffd575050565b8061100a5f600193610fdd565b01610ff2565b9190601f8111611020575b505050565b61102c611051936101c9565b90602061103884610f62565b83019310611059575b61104a90610f62565b0190610ff1565b5f808061101b565b915061104a81929050611041565b90611077905f1990600802610391565b191690565b8161108691611067565b906002021790565b916110999082610f5e565b9067ffffffffffffffff8211611158576110bd826110b78554610196565b85611010565b5f90601f83116001146110f0579180916110df935f926110e4575b505061107c565b90555b565b90915001355f806110d8565b601f198316916110ff856101c9565b925f5b81811061114057509160029391856001969410611126575b505050020190556110e2565b611136910135601f841690611067565b90555f808061111a565b91936020600181928787013581550195019201611102565b610275565b90611168929161108e565b565b91906111848161117d81611189956102ff565b8095610711565b61026b565b0190565b90916111a49260208301925f81850391015261116a565b90565b6111b4818390600c61115d565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a7916111eb6111e2610152565b9283928361118d565b0390a1565b906111fa91610f2e565b565b60401c90565b61120e611213916111fc565b610bc9565b90565b6112209054611202565b90565b67ffffffffffffffff1690565b61123c61124191610dcb565b611223565b90565b61124e9054611230565b90565b67ffffffffffffffff1690565b90565b61127561127061127a9261125e565b610f95565b611251565b90565b90565b61129461128f6112999261127d565b610f95565b611251565b90565b6112b06112ab6112b5926103d5565b610f95565b6103d5565b90565b6112c19061129c565b90565b6112cd906112b8565b90565b6112e46112df6112e99261125e565b610f95565b61060d565b90565b5f1b90565b9061130467ffffffffffffffff916112ec565b9181191691161790565b61132261131d61132792611251565b610f95565b611251565b90565b90565b9061134261133d6113499261130e565b61132a565b82546112f1565b9055565b60401b90565b9061136768ff00000000000000009161134d565b9181191691161790565b61137a906106ad565b90565b90565b9061139561139061139c92611371565b61137d565b8254611353565b9055565b6113a990611280565b9052565b91906113c0905f602085019401906113a0565b565b9c9b9a999897969594939291906113d7611f8a565b6080526113f06113ea5f60805101611216565b156106ad565b60a0526114005f60805101611244565b8061141361140d5f611261565b91611251565b1480611535575b9061142e6114286001611280565b91611251565b148061150d575b6114409091156106ad565b90816114fc575b506114e0576114749d61146761145d6001611280565b5f6080510161132d565b60a0516114cc575b611c6e565b60a05161147e575b565b61148c5f5f60805101611380565b60016114c47fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916114bb610152565b918291826113ad565b0390a161147c565b6114db60015f60805101611380565b61146f565b5f63f92ee8a960e01b8152806114f86004820161059c565b0390fd5b6115079150156106ad565b5f611447565b5061144061151a306112c4565b3b61152d6115275f6112d0565b9161060d565b149050611435565b5060a05161141a565b61155261154d6115579261125e565b610f95565b6103d5565b90565b6115639061153e565b90565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b61159a601c6020926102ff565b6115a381611566565b0190565b6115bc9060208101905f81830391015261158d565b90565b156115c657565b6115ce610152565b62461bcd60e51b8152806115e4600482016115a7565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61161c60176020926102ff565b611625816115e8565b0190565b61163e9060208101905f81830391015261160f565b90565b1561164857565b611650610152565b62461bcd60e51b81528061166660048201611629565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6116c460226040926102ff565b6116cd8161166a565b0190565b6116e69060208101905f8183039101526116b7565b90565b156116f057565b6116f8610152565b62461bcd60e51b81528061170e600482016116d1565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b61176c60266040926102ff565b61177581611712565b0190565b61178e9060208101905f81830391015261175f565b90565b1561179857565b6117a0610152565b62461bcd60e51b8152806117b660048201611779565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61181460256040926102ff565b61181d816117ba565b0190565b6118369060208101905f818303910152611807565b90565b1561184057565b611848610152565b62461bcd60e51b81528061185e60048201611821565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6118bc602a6040926102ff565b6118c581611862565b0190565b6118de9060208101905f8183039101526118af565b90565b156118e857565b6118f0610152565b62461bcd60e51b815280611906600482016118c9565b0390fd5b60207f207a65726f206164647265737300000000000000000000000000000000000000917f496e697469616c20617070636861696e206f776e65722063616e6e6f742062655f8201520152565b611964602d6040926102ff565b61196d8161190a565b0190565b6119869060208101905f818303910152611957565b90565b1561199057565b611998610152565b62461bcd60e51b8152806119ae60048201611971565b0390fd5b906119be5f19916112ec565b9181191691161790565b906119dd6119d86119e492610f98565b610fb4565b82546119b2565b9055565b906119f960018060a01b03916112ec565b9181191691161790565b611a0c906112b8565b90565b90565b90611a27611a22611a2e92611a03565b611a0f565b82546119e8565b9055565b60a01b90565b90611a4760ff60a01b91611a32565b9181191691161790565b90611a66611a61611a6d92611371565b61137d565b8254611a38565b9055565b600190818003010490565b5b818110611a88575050565b80611a955f600193610fdd565b01611a7d565b9091828110611aaa575b505050565b611ac8611ac2611abc611ad395611a71565b92611a71565b92610ce3565b918201910190611a7c565b5f8080611aa5565b90680100000000000000008111611b045781611af9611b0293610cdf565b90828155611a9b565b565b610275565b611b1390516103e0565b90565b611b1f82610443565b9167ffffffffffffffff8311611b8257611b4d611b47600192611b428686611adb565b610450565b92610ce3565b9204915f5b838110611b5f5750505050565b6001906020611b75611b7086611b09565b611a0f565b9401938184015501611b52565b610275565b90611b9191611b16565b565b90611b9d816102fb565b9067ffffffffffffffff8211611c5d57611bc182611bbb8554610196565b85611010565b602090601f8311600114611bf557918091611be4935f92611be9575b505061107c565b90555b565b90915001515f80611bdd565b601f19831691611c04856101c9565b925f5b818110611c4557509160029391856001969410611c2b575b50505002019055611be7565b611c3b910151601f841690611067565b90555f8080611c1f565b91936020600181928787015181550195019201611c07565b610275565b90611c6c91611b93565b565b9b999597611dd1611ded98611e009f968f9b611dfb9f9c611de69a611df49f98611dca94611db58f9c611dae611dbc94611ddf9f611dd89e611da08f92611d7f611da794611cda611dc39e611cd3611ccd611cc85f61155a565b6103e0565b916103e0565b14156115bf565b611cf785611cf0611cea5f6112d0565b9161060d565b1415611641565b611d1487611d0d611d075f6112d0565b9161060d565b14156116e9565b611d3989611d32611d2c611d275f61155a565b6103e0565b916103e0565b1415611791565b611d5e8b611d57611d51611d4c5f61155a565b6103e0565b916103e0565b1415611839565b611d78611d72611d6d5f61155a565b6103e0565b916103e0565b14156118e1565b611d99611d93611d8e5f61155a565b6103e0565b916103e0565b1415611989565b60056119c8565b60066119c8565b6002611a12565b6003611a12565b6004611a51565b60076119c8565b60086119c8565b6004611a12565b60096119c8565b600a611b87565b6001611a12565b600b611c62565b600c611c62565b611fae565b565b90611e189d9c9b9a9998979695949392916113c2565b565b90611e4891611e4333611e3d611e37611e325f610e9f565b6103e0565b916103e0565b14610f05565b611e4a565b565b611e57818390600b61115d565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611e8e611e85610152565b9283928361118d565b0390a1565b90611e9d91611e1a565b565b611ecc90611ec733611ec1611ebb611eb65f610e9f565b6103e0565b916103e0565b14610f05565b611f4f565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b611f01602080926102ff565b611f0a81611ece565b0190565b611f239060208101905f818303910152611ef5565b90565b15611f2d57565b611f35610152565b62461bcd60e51b815280611f4b60048201611f0e565b0390fd5b611f7d90611f7881611f71611f6b611f665f61155a565b6103e0565b916103e0565b1415611f26565b611fae565b565b611f8890611e9f565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611fb75f610e9f565b611fc1825f611a12565b90611ff5611fef7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611a03565b91611a03565b91611ffe610152565b806120088161059c565b0390a356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a \ra\x02\x0F\x829a \r\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x012V[V[`@\x1C\x90V[`\xFF\x16\x90V[a\0Xa\0]\x91a\0@V[a\0FV[\x90V[a\0j\x90Ta\0LV[\x90V[_\x01\x90V[_\x1C\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\0\x8Ea\0\x93\x91a\0rV[a\0wV[\x90V[a\0\xA0\x90Ta\0\x82V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[_\x1B\x90V[\x90a\0\xC4`\x01\x80`@\x1B\x03\x91a\0\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xA3V[a\0\xCEV[a\0\xA3V[\x90V[\x90V[\x90a\x01\x05a\x01\0a\x01\x0C\x92a\0\xD1V[a\0\xEDV[\x82Ta\0\xB3V[\x90UV[a\x01\x19\x90a\0\xA3V[\x90RV[\x91\x90a\x010\x90_` \x85\x01\x94\x01\x90a\x01\x10V[V[a\x01:a\x01\xEAV[a\x01E_\x82\x01a\0`V[a\x01\xCEWa\x01T_\x82\x01a\0\x96V[a\x01la\x01f`\x01\x80`@\x1B\x03a\0\xA3V[\x91a\0\xA3V[\x03a\x01uW[PV[a\x01\x88\x90_`\x01\x80`@\x1B\x03\x91\x01a\0\xF0V[`\x01\x80`@\x1B\x03a\x01\xC5\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x01\xBCa\0,V[\x91\x82\x91\x82a\x01\x1DV[\x03\x90\xA1_a\x01rV[_c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x01\xE6`\x04\x82\x01a\0mV[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V\xFE`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\xB9V[a\0\x1D_5a\x01LV[\x80c\x07C\xBFn\x14a\x01GW\x80c\x18\xB5\xCE\x81\x14a\x01BW\x80c\x1B\xC0\xAF\xD6\x14a\x01=W\x80cK\x8B\xE3\xF7\x14a\x018W\x80cW\xD1\xBA%\x14a\x013W\x80cZ-\x9C\x18\x14a\x01.W\x80cb\xC7<\xAA\x14a\x01)W\x80cf\xA1\xD1\x08\x14a\x01$W\x80cn\xDDl\t\x14a\x01\x1FW\x80c\x85\xE1\xF4\xD0\x14a\x01\x1AW\x80c\x8D\xA5\xCB[\x14a\x01\x15W\x80c\xA3\xC6\xE1\xE7\x14a\x01\x10W\x80c\xAAjC\xD8\x14a\x01\x0BW\x80c\xBFm\xB6\xF8\x14a\x01\x06W\x80c\xD1\xF4s|\x14a\x01\x01W\x80c\xE7\x93\x88\xE6\x14a\0\xFCW\x80c\xF2\xFD\xE3\x8B\x14a\0\xF7W\x80c\xF8\x81\xAF\xAF\x14a\0\xF2Wc\xF8\xA1D\xBE\x03a\0\x0EWa\r\x84V[a\r@V[a\x0CzV[a\x0C'V[a\x0B\x94V[a\x0BPV[a\x0B\x0CV[a\n\xC8V[a\n\x84V[a\nAV[a\t\xFDV[a\t\xB9V[a\tvV[a\t0V[a\x062V[a\x05\xA1V[a\x04\xE2V[a\x04\x0EV[a\x03\\V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xB6W[` \x83\x10\x14a\x01\xB1WV[a\x01\x82V[\x91`\x7F\x16\x91a\x01\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xECa\x01\xE5\x83a\x01\x96V[\x80\x94a\x01\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02CWP`\x01\x14a\x02\x07W[PPPV[a\x02\x14\x91\x92\x93\x94Pa\x01\xC9V[\x91_\x92[\x81\x84\x10a\x02+WPP\x01\x90_\x80\x80a\x02\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x02V[\x90a\x02h\x91a\x01\xD2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x93\x90a\x02kV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xADW`@RV[a\x02uV[\x90a\x02\xD2a\x02\xCB\x92a\x02\xC2a\x01RV[\x93\x84\x80\x92a\x02^V[\x03\x83a\x02\x89V[V[\x90_\x10a\x02\xE7Wa\x02\xE4\x90a\x02\xB2V[\x90V[a\x01oV[a\x02\xF8`\x0C_\x90a\x02\xD4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x032a\x03;` \x93a\x03@\x93a\x03)\x81a\x02\xFBV[\x93\x84\x80\x93a\x02\xFFV[\x95\x86\x91\x01a\x03\x08V[a\x02kV[\x01\x90V[a\x03Y\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x13V[\x90V[4a\x03\x8CWa\x03l6`\x04a\x01`V[a\x03\x88a\x03wa\x02\xECV[a\x03\x7Fa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xB0\x90`\x08a\x03\xB5\x93\x02a\x03\x91V[a\x03\x95V[\x90V[\x90a\x03\xC3\x91Ta\x03\xA0V[\x90V[a\x03\xD2`\x01_\x90a\x03\xB8V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xE9\x90a\x03\xD5V[\x90V[a\x03\xF5\x90a\x03\xE0V[\x90RV[\x91\x90a\x04\x0C\x90_` \x85\x01\x94\x01\x90a\x03\xECV[V[4a\x04>Wa\x04\x1E6`\x04a\x01`V[a\x04:a\x04)a\x03\xC6V[a\x041a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x04_\x90a\x03\xE0V[\x90RV[\x90a\x04p\x81` \x93a\x04VV[\x01\x90V[` \x01\x90V[\x90a\x04\x97a\x04\x91a\x04\x8A\x84a\x04CV[\x80\x93a\x04GV[\x92a\x04PV[\x90_[\x81\x81\x10a\x04\xA7WPPP\x90V[\x90\x91\x92a\x04\xC0a\x04\xBA`\x01\x92\x86Qa\x04cV[\x94a\x04tV[\x91\x01\x91\x90\x91a\x04\x9AV[a\x04\xDF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04zV[\x90V[4a\x05\x12Wa\x04\xF26`\x04a\x01`V[a\x05\x0Ea\x04\xFDa\x0E\x89V[a\x05\x05a\x01RV[\x91\x82\x91\x82a\x04\xCAV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05aW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\\W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05WWV[a\x05#V[a\x05\x1FV[a\x05\x1BV[\x90` \x82\x82\x03\x12a\x05\x97W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x92Wa\x05\x8E\x92\x01a\x05'V[\x90\x91V[a\x05\x17V[a\x01\\V[_\x01\x90V[4a\x05\xD0Wa\x05\xBAa\x05\xB46`\x04a\x05fV[\x90a\x11\xF0V[a\x05\xC2a\x01RV[\x80a\x05\xCC\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[\x90V[a\x05\xE8\x90`\x08a\x05\xED\x93\x02a\x03\x91V[a\x05\xD5V[\x90V[\x90a\x05\xFB\x91Ta\x05\xD8V[\x90V[a\x06\n`\x07_\x90a\x05\xF0V[\x90V[\x90V[a\x06\x19\x90a\x06\rV[\x90RV[\x91\x90a\x060\x90_` \x85\x01\x94\x01\x90a\x06\x10V[V[4a\x06bWa\x06B6`\x04a\x01`V[a\x06^a\x06Ma\x05\xFEV[a\x06Ua\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[a\x06p\x81a\x03\xE0V[\x03a\x06wWV[_\x80\xFD[\x90P5\x90a\x06\x88\x82a\x06gV[V[a\x06\x93\x81a\x06\rV[\x03a\x06\x9AWV[_\x80\xFD[\x90P5\x90a\x06\xAB\x82a\x06\x8AV[V[\x15\x15\x90V[a\x06\xBB\x81a\x06\xADV[\x03a\x06\xC2WV[_\x80\xFD[\x90P5\x90a\x06\xD3\x82a\x06\xB2V[V[_\x80\xFD[\x90a\x06\xECa\x06\xE5a\x01RV[\x92\x83a\x02\x89V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x0CWa\x07\x08` \x91a\x02kV[\x01\x90V[a\x02uV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x071a\x07,\x82a\x06\xEEV[a\x06\xD9V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07MWa\x07K\x92a\x07\x11V[V[a\x06\xD5V[\x90\x80`\x1F\x83\x01\x12\x15a\x07pW\x81` a\x07m\x935\x91\x01a\x07\x1CV[\x90V[a\x05\x1BV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x8DW` \x80\x91\x02\x01\x90V[a\x02uV[\x90\x92\x91\x92a\x07\xA7a\x07\xA2\x82a\x07uV[a\x06\xD9V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x07\xE4W\x91[\x83\x83\x10a\x07\xCBWPPPPV[` \x80\x91a\x07\xD9\x84\x86a\x06{V[\x81R\x01\x92\x01\x91a\x07\xBEV[a\x05#V[\x90\x80`\x1F\x83\x01\x12\x15a\x08\x07W\x81` a\x08\x04\x935\x91\x01a\x07\x92V[\x90V[a\x05\x1BV[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\t+Wa\x08&\x83_\x83\x01a\x06{V[\x92a\x084\x81` \x84\x01a\x06\x9EV[\x92a\x08B\x82`@\x85\x01a\x06\x9EV[\x92a\x08P\x83``\x83\x01a\x06{V[\x92a\x08^\x81`\x80\x84\x01a\x06{V[\x92a\x08l\x82`\xA0\x85\x01a\x06\xC6V[\x92a\x08z\x83`\xC0\x83\x01a\x06\x9EV[\x92a\x08\x88\x81`\xE0\x84\x01a\x06\x9EV[\x92a\x08\x97\x82a\x01\0\x85\x01a\x06{V[\x92a\x08\xA6\x83a\x01 \x83\x01a\x06\x9EV[\x92a\x08\xB5\x81a\x01@\x84\x01a\x06{V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t&W\x82a\x08\xD7\x91\x85\x01a\x07RV[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t!W\x83a\x08\xF9\x91\x83\x01a\x07RV[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\x1CWa\t\x19\x92\x01a\x07\xE9V[\x90V[a\x05\x17V[a\x05\x17V[a\x05\x17V[a\x01\\V[4a\tqWa\t[a\tC6`\x04a\x08\x0CV[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1E\x02V[a\tca\x01RV[\x80a\tm\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[4a\t\xA5Wa\t\x8Fa\t\x896`\x04a\x05fV[\x90a\x1E\x93V[a\t\x97a\x01RV[\x80a\t\xA1\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[a\t\xB6`\x0B_\x90a\x02\xD4V[\x90V[4a\t\xE9Wa\t\xC96`\x04a\x01`V[a\t\xE5a\t\xD4a\t\xAAV[a\t\xDCa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[a\t\xFA`\x02_\x90a\x03\xB8V[\x90V[4a\n-Wa\n\r6`\x04a\x01`V[a\n)a\n\x18a\t\xEEV[a\n a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\n>`\x05_\x90a\x05\xF0V[\x90V[4a\nqWa\nQ6`\x04a\x01`V[a\nma\n\\a\n2V[a\nda\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[a\n\x81__\x90a\x03\xB8V[\x90V[4a\n\xB4Wa\n\x946`\x04a\x01`V[a\n\xB0a\n\x9Fa\nvV[a\n\xA7a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\n\xC5`\t_\x90a\x05\xF0V[\x90V[4a\n\xF8Wa\n\xD86`\x04a\x01`V[a\n\xF4a\n\xE3a\n\xB9V[a\n\xEBa\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[a\x0B\t`\x03_\x90a\x03\xB8V[\x90V[4a\x0B<Wa\x0B\x1C6`\x04a\x01`V[a\x0B8a\x0B'a\n\xFDV[a\x0B/a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\x0BM`\x04_\x90a\x03\xB8V[\x90V[4a\x0B\x80Wa\x0B`6`\x04a\x01`V[a\x0B|a\x0Bka\x0BAV[a\x0Bsa\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\x0B\x91`\x08_\x90a\x05\xF0V[\x90V[4a\x0B\xC4Wa\x0B\xA46`\x04a\x01`V[a\x0B\xC0a\x0B\xAFa\x0B\x85V[a\x0B\xB7a\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[`\xFF\x16\x90V[a\x0B\xDF\x90`\x08a\x0B\xE4\x93\x02a\x03\x91V[a\x0B\xC9V[\x90V[\x90a\x0B\xF2\x91Ta\x0B\xCFV[\x90V[a\x0C\x02`\x04`\x14\x90a\x0B\xE7V[\x90V[a\x0C\x0E\x90a\x06\xADV[\x90RV[\x91\x90a\x0C%\x90_` \x85\x01\x94\x01\x90a\x0C\x05V[V[4a\x0CWWa\x0C76`\x04a\x01`V[a\x0CSa\x0CBa\x0B\xF5V[a\x0CJa\x01RV[\x91\x82\x91\x82a\x0C\x12V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0CuWa\x0Cr\x91_\x01a\x06{V[\x90V[a\x01\\V[4a\x0C\xA8Wa\x0C\x92a\x0C\x8D6`\x04a\x0C\\V[a\x1F\x7FV[a\x0C\x9Aa\x01RV[\x80a\x0C\xA4\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0C\xC6Wa\x0C\xC3\x91_\x01a\x06\x9EV[\x90V[a\x01\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x0C\xF5\x81a\x0C\xDFV[\x82\x10\x15a\r\x0FWa\r\x07`\x01\x91a\x0C\xE3V[\x91\x02\x01\x90_\x90V[a\x0C\xCBV[`\na\r\x1F\x81a\x0C\xDFV[\x82\x10\x15a\r<Wa\r9\x91a\r3\x91a\x0C\xECV[\x90a\x03\xB8V[\x90V[_\x80\xFD[4a\rpWa\rla\r[a\rV6`\x04a\x0C\xADV[a\r\x14V[a\rca\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\r\x81`\x06_\x90a\x05\xF0V[\x90V[4a\r\xB4Wa\r\x946`\x04a\x01`V[a\r\xB0a\r\x9Fa\ruV[a\r\xA7a\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[_\x80\xFD[``\x90V[` \x91\x81R\x01\x90V[_\x1C\x90V[a\r\xDCa\r\xE1\x91a\r\xCBV[a\x03\x95V[\x90V[a\r\xEE\x90Ta\r\xD0V[\x90V[`\x01\x01\x90V[\x90a\x0E\x14a\x0E\x0Ea\x0E\x07\x84a\x0C\xDFV[\x80\x93a\r\xC2V[\x92a\x0C\xE3V[\x90_[\x81\x81\x10a\x0E$WPPP\x90V[\x90\x91\x92a\x0EDa\x0E>`\x01\x92a\x0E9\x87a\r\xE4V[a\x04cV[\x94a\r\xF1V[\x91\x01\x91\x90\x91a\x0E\x17V[\x90a\x0EX\x91a\r\xF7V[\x90V[\x90a\x0E{a\x0Et\x92a\x0Eka\x01RV[\x93\x84\x80\x92a\x0ENV[\x03\x83a\x02\x89V[V[a\x0E\x86\x90a\x0E[V[\x90V[a\x0E\x91a\r\xBDV[Pa\x0E\x9C`\na\x0E}V[\x90V[a\x0E\xA9\x90Ta\r\xD0V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xE0`\x17` \x92a\x02\xFFV[a\x0E\xE9\x81a\x0E\xACV[\x01\x90V[a\x0F\x02\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xD3V[\x90V[\x15a\x0F\x0CWV[a\x0F\x14a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0F*`\x04\x82\x01a\x0E\xEDV[\x03\x90\xFD[\x90a\x0F\\\x91a\x0FW3a\x0FQa\x0FKa\x0FF_a\x0E\x9FV[a\x03\xE0V[\x91a\x03\xE0V[\x14a\x0F\x05V[a\x11\xA7V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0F\x8B\x91\x02\x91a\x0F\x85_\x19\x84a\x0FlV[\x92a\x0FlV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x0F\xACa\x0F\xA7a\x0F\xB1\x92a\x06\rV[a\x0F\x95V[a\x06\rV[\x90V[\x90V[\x91\x90a\x0F\xCDa\x0F\xC8a\x0F\xD5\x93a\x0F\x98V[a\x0F\xB4V[\x90\x83Ta\x0FpV[\x90UV[_\x90V[a\x0F\xEF\x91a\x0F\xE9a\x0F\xD9V[\x91a\x0F\xB7V[V[[\x81\x81\x10a\x0F\xFDWPPV[\x80a\x10\n_`\x01\x93a\x0F\xDDV[\x01a\x0F\xF2V[\x91\x90`\x1F\x81\x11a\x10 W[PPPV[a\x10,a\x10Q\x93a\x01\xC9V[\x90` a\x108\x84a\x0FbV[\x83\x01\x93\x10a\x10YW[a\x10J\x90a\x0FbV[\x01\x90a\x0F\xF1V[_\x80\x80a\x10\x1BV[\x91Pa\x10J\x81\x92\x90Pa\x10AV[\x90a\x10w\x90_\x19\x90`\x08\x02a\x03\x91V[\x19\x16\x90V[\x81a\x10\x86\x91a\x10gV[\x90`\x02\x02\x17\x90V[\x91a\x10\x99\x90\x82a\x0F^V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11XWa\x10\xBD\x82a\x10\xB7\x85Ta\x01\x96V[\x85a\x10\x10V[_\x90`\x1F\x83\x11`\x01\x14a\x10\xF0W\x91\x80\x91a\x10\xDF\x93_\x92a\x10\xE4W[PPa\x10|V[\x90U[V[\x90\x91P\x015_\x80a\x10\xD8V[`\x1F\x19\x83\x16\x91a\x10\xFF\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x11@WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x11&W[PPP\x02\x01\x90Ua\x10\xE2V[a\x116\x91\x015`\x1F\x84\x16\x90a\x10gV[\x90U_\x80\x80a\x11\x1AV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x11\x02V[a\x02uV[\x90a\x11h\x92\x91a\x10\x8EV[V[\x91\x90a\x11\x84\x81a\x11}\x81a\x11\x89\x95a\x02\xFFV[\x80\x95a\x07\x11V[a\x02kV[\x01\x90V[\x90\x91a\x11\xA4\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x11jV[\x90V[a\x11\xB4\x81\x83\x90`\x0Ca\x11]V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\x11\xEBa\x11\xE2a\x01RV[\x92\x83\x92\x83a\x11\x8DV[\x03\x90\xA1V[\x90a\x11\xFA\x91a\x0F.V[V[`@\x1C\x90V[a\x12\x0Ea\x12\x13\x91a\x11\xFCV[a\x0B\xC9V[\x90V[a\x12 \x90Ta\x12\x02V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x12<a\x12A\x91a\r\xCBV[a\x12#V[\x90V[a\x12N\x90Ta\x120V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90V[a\x12ua\x12pa\x12z\x92a\x12^V[a\x0F\x95V[a\x12QV[\x90V[\x90V[a\x12\x94a\x12\x8Fa\x12\x99\x92a\x12}V[a\x0F\x95V[a\x12QV[\x90V[a\x12\xB0a\x12\xABa\x12\xB5\x92a\x03\xD5V[a\x0F\x95V[a\x03\xD5V[\x90V[a\x12\xC1\x90a\x12\x9CV[\x90V[a\x12\xCD\x90a\x12\xB8V[\x90V[a\x12\xE4a\x12\xDFa\x12\xE9\x92a\x12^V[a\x0F\x95V[a\x06\rV[\x90V[_\x1B\x90V[\x90a\x13\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x12\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\"a\x13\x1Da\x13'\x92a\x12QV[a\x0F\x95V[a\x12QV[\x90V[\x90V[\x90a\x13Ba\x13=a\x13I\x92a\x13\x0EV[a\x13*V[\x82Ta\x12\xF1V[\x90UV[`@\x1B\x90V[\x90a\x13gh\xFF\0\0\0\0\0\0\0\0\x91a\x13MV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13z\x90a\x06\xADV[\x90V[\x90V[\x90a\x13\x95a\x13\x90a\x13\x9C\x92a\x13qV[a\x13}V[\x82Ta\x13SV[\x90UV[a\x13\xA9\x90a\x12\x80V[\x90RV[\x91\x90a\x13\xC0\x90_` \x85\x01\x94\x01\x90a\x13\xA0V[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x13\xD7a\x1F\x8AV[`\x80Ra\x13\xF0a\x13\xEA_`\x80Q\x01a\x12\x16V[\x15a\x06\xADV[`\xA0Ra\x14\0_`\x80Q\x01a\x12DV[\x80a\x14\x13a\x14\r_a\x12aV[\x91a\x12QV[\x14\x80a\x155W[\x90a\x14.a\x14(`\x01a\x12\x80V[\x91a\x12QV[\x14\x80a\x15\rW[a\x14@\x90\x91\x15a\x06\xADV[\x90\x81a\x14\xFCW[Pa\x14\xE0Wa\x14t\x9Da\x14ga\x14]`\x01a\x12\x80V[_`\x80Q\x01a\x13-V[`\xA0Qa\x14\xCCW[a\x1CnV[`\xA0Qa\x14~W[V[a\x14\x8C__`\x80Q\x01a\x13\x80V[`\x01a\x14\xC4\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x14\xBBa\x01RV[\x91\x82\x91\x82a\x13\xADV[\x03\x90\xA1a\x14|V[a\x14\xDB`\x01_`\x80Q\x01a\x13\x80V[a\x14oV[_c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x14\xF8`\x04\x82\x01a\x05\x9CV[\x03\x90\xFD[a\x15\x07\x91P\x15a\x06\xADV[_a\x14GV[Pa\x14@a\x15\x1A0a\x12\xC4V[;a\x15-a\x15'_a\x12\xD0V[\x91a\x06\rV[\x14\x90Pa\x145V[P`\xA0Qa\x14\x1AV[a\x15Ra\x15Ma\x15W\x92a\x12^V[a\x0F\x95V[a\x03\xD5V[\x90V[a\x15c\x90a\x15>V[\x90V[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x15\x9A`\x1C` \x92a\x02\xFFV[a\x15\xA3\x81a\x15fV[\x01\x90V[a\x15\xBC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x8DV[\x90V[\x15a\x15\xC6WV[a\x15\xCEa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xE4`\x04\x82\x01a\x15\xA7V[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x16\x1C`\x17` \x92a\x02\xFFV[a\x16%\x81a\x15\xE8V[\x01\x90V[a\x16>\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\x0FV[\x90V[\x15a\x16HWV[a\x16Pa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16f`\x04\x82\x01a\x16)V[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x16\xC4`\"`@\x92a\x02\xFFV[a\x16\xCD\x81a\x16jV[\x01\x90V[a\x16\xE6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xB7V[\x90V[\x15a\x16\xF0WV[a\x16\xF8a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x0E`\x04\x82\x01a\x16\xD1V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x17l`&`@\x92a\x02\xFFV[a\x17u\x81a\x17\x12V[\x01\x90V[a\x17\x8E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17_V[\x90V[\x15a\x17\x98WV[a\x17\xA0a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xB6`\x04\x82\x01a\x17yV[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x18\x14`%`@\x92a\x02\xFFV[a\x18\x1D\x81a\x17\xBAV[\x01\x90V[a\x186\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\x07V[\x90V[\x15a\x18@WV[a\x18Ha\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18^`\x04\x82\x01a\x18!V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x18\xBC`*`@\x92a\x02\xFFV[a\x18\xC5\x81a\x18bV[\x01\x90V[a\x18\xDE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\xAFV[\x90V[\x15a\x18\xE8WV[a\x18\xF0a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\x06`\x04\x82\x01a\x18\xC9V[\x03\x90\xFD[` \x7F zero address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FInitial appchain owner cannot be_\x82\x01R\x01RV[a\x19d`-`@\x92a\x02\xFFV[a\x19m\x81a\x19\nV[\x01\x90V[a\x19\x86\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19WV[\x90V[\x15a\x19\x90WV[a\x19\x98a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xAE`\x04\x82\x01a\x19qV[\x03\x90\xFD[\x90a\x19\xBE_\x19\x91a\x12\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x19\xDDa\x19\xD8a\x19\xE4\x92a\x0F\x98V[a\x0F\xB4V[\x82Ta\x19\xB2V[\x90UV[\x90a\x19\xF9`\x01\x80`\xA0\x1B\x03\x91a\x12\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\x0C\x90a\x12\xB8V[\x90V[\x90V[\x90a\x1A'a\x1A\"a\x1A.\x92a\x1A\x03V[a\x1A\x0FV[\x82Ta\x19\xE8V[\x90UV[`\xA0\x1B\x90V[\x90a\x1AG`\xFF`\xA0\x1B\x91a\x1A2V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1Afa\x1Aaa\x1Am\x92a\x13qV[a\x13}V[\x82Ta\x1A8V[\x90UV[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1A\x88WPPV[\x80a\x1A\x95_`\x01\x93a\x0F\xDDV[\x01a\x1A}V[\x90\x91\x82\x81\x10a\x1A\xAAW[PPPV[a\x1A\xC8a\x1A\xC2a\x1A\xBCa\x1A\xD3\x95a\x1AqV[\x92a\x1AqV[\x92a\x0C\xE3V[\x91\x82\x01\x91\x01\x90a\x1A|V[_\x80\x80a\x1A\xA5V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1B\x04W\x81a\x1A\xF9a\x1B\x02\x93a\x0C\xDFV[\x90\x82\x81Ua\x1A\x9BV[V[a\x02uV[a\x1B\x13\x90Qa\x03\xE0V[\x90V[a\x1B\x1F\x82a\x04CV[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1B\x82Wa\x1BMa\x1BG`\x01\x92a\x1BB\x86\x86a\x1A\xDBV[a\x04PV[\x92a\x0C\xE3V[\x92\x04\x91_[\x83\x81\x10a\x1B_WPPPPV[`\x01\x90` a\x1Bua\x1Bp\x86a\x1B\tV[a\x1A\x0FV[\x94\x01\x93\x81\x84\x01U\x01a\x1BRV[a\x02uV[\x90a\x1B\x91\x91a\x1B\x16V[V[\x90a\x1B\x9D\x81a\x02\xFBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1C]Wa\x1B\xC1\x82a\x1B\xBB\x85Ta\x01\x96V[\x85a\x10\x10V[` \x90`\x1F\x83\x11`\x01\x14a\x1B\xF5W\x91\x80\x91a\x1B\xE4\x93_\x92a\x1B\xE9W[PPa\x10|V[\x90U[V[\x90\x91P\x01Q_\x80a\x1B\xDDV[`\x1F\x19\x83\x16\x91a\x1C\x04\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x1CEWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1C+W[PPP\x02\x01\x90Ua\x1B\xE7V[a\x1C;\x91\x01Q`\x1F\x84\x16\x90a\x10gV[\x90U_\x80\x80a\x1C\x1FV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x1C\x07V[a\x02uV[\x90a\x1Cl\x91a\x1B\x93V[V[\x9B\x99\x95\x97a\x1D\xD1a\x1D\xED\x98a\x1E\0\x9F\x96\x8F\x9Ba\x1D\xFB\x9F\x9Ca\x1D\xE6\x9Aa\x1D\xF4\x9F\x98a\x1D\xCA\x94a\x1D\xB5\x8F\x9Ca\x1D\xAEa\x1D\xBC\x94a\x1D\xDF\x9Fa\x1D\xD8\x9Ea\x1D\xA0\x8F\x92a\x1D\x7Fa\x1D\xA7\x94a\x1C\xDAa\x1D\xC3\x9Ea\x1C\xD3a\x1C\xCDa\x1C\xC8_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x15\xBFV[a\x1C\xF7\x85a\x1C\xF0a\x1C\xEA_a\x12\xD0V[\x91a\x06\rV[\x14\x15a\x16AV[a\x1D\x14\x87a\x1D\ra\x1D\x07_a\x12\xD0V[\x91a\x06\rV[\x14\x15a\x16\xE9V[a\x1D9\x89a\x1D2a\x1D,a\x1D'_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x17\x91V[a\x1D^\x8Ba\x1DWa\x1DQa\x1DL_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x189V[a\x1Dxa\x1Dra\x1Dm_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x18\xE1V[a\x1D\x99a\x1D\x93a\x1D\x8E_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x19\x89V[`\x05a\x19\xC8V[`\x06a\x19\xC8V[`\x02a\x1A\x12V[`\x03a\x1A\x12V[`\x04a\x1AQV[`\x07a\x19\xC8V[`\x08a\x19\xC8V[`\x04a\x1A\x12V[`\ta\x19\xC8V[`\na\x1B\x87V[`\x01a\x1A\x12V[`\x0Ba\x1CbV[`\x0Ca\x1CbV[a\x1F\xAEV[V[\x90a\x1E\x18\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x13\xC2V[V[\x90a\x1EH\x91a\x1EC3a\x1E=a\x1E7a\x1E2_a\x0E\x9FV[a\x03\xE0V[\x91a\x03\xE0V[\x14a\x0F\x05V[a\x1EJV[V[a\x1EW\x81\x83\x90`\x0Ba\x11]V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1E\x8Ea\x1E\x85a\x01RV[\x92\x83\x92\x83a\x11\x8DV[\x03\x90\xA1V[\x90a\x1E\x9D\x91a\x1E\x1AV[V[a\x1E\xCC\x90a\x1E\xC73a\x1E\xC1a\x1E\xBBa\x1E\xB6_a\x0E\x9FV[a\x03\xE0V[\x91a\x03\xE0V[\x14a\x0F\x05V[a\x1FOV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a\x1F\x01` \x80\x92a\x02\xFFV[a\x1F\n\x81a\x1E\xCEV[\x01\x90V[a\x1F#\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1E\xF5V[\x90V[\x15a\x1F-WV[a\x1F5a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1FK`\x04\x82\x01a\x1F\x0EV[\x03\x90\xFD[a\x1F}\x90a\x1Fx\x81a\x1Fqa\x1Fka\x1Ff_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x1F&V[a\x1F\xAEV[V[a\x1F\x88\x90a\x1E\x9FV[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1F\xB7_a\x0E\x9FV[a\x1F\xC1\x82_a\x1A\x12V[\x90a\x1F\xF5a\x1F\xEF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x1A\x03V[\x91a\x1A\x03V[\x91a\x1F\xFEa\x01RV[\x80a \x08\x81a\x05\x9CV[\x03\x90\xA3V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60c06040526004361015610013575b610db9565b61001d5f3561014c565b80630743bf6e1461014757806318b5ce81146101425780631bc0afd61461013d5780634b8be3f71461013857806357d1ba25146101335780635a2d9c181461012e57806362c73caa1461012957806366a1d108146101245780636edd6c091461011f57806385e1f4d01461011a5780638da5cb5b14610115578063a3c6e1e714610110578063aa6a43d81461010b578063bf6db6f814610106578063d1f4737c14610101578063e79388e6146100fc578063f2fde38b146100f7578063f881afaf146100f25763f8a144be0361000e57610d84565b610d40565b610c7a565b610c27565b610b94565b610b50565b610b0c565b610ac8565b610a84565b610a41565b6109fd565b6109b9565b610976565b610930565b610632565b6105a1565b6104e2565b61040e565b61035c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101b6575b60208310146101b157565b610182565b91607f16916101a6565b60209181520190565b5f5260205f2090565b905f92918054906101ec6101e583610196565b80946101c0565b916001811690815f146102435750600114610207575b505050565b61021491929394506101c9565b915f925b81841061022b57505001905f8080610202565b60018160209295939554848601520191019290610218565b92949550505060ff19168252151560200201905f8080610202565b90610268916101d2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102939061026b565b810190811067ffffffffffffffff8211176102ad57604052565b610275565b906102d26102cb926102c2610152565b9384809261025e565b0383610289565b565b905f106102e7576102e4906102b2565b90565b61016f565b6102f8600c5f906102d4565b90565b5190565b60209181520190565b90825f9392825e0152565b61033261033b60209361034093610329816102fb565b938480936102ff565b95869101610308565b61026b565b0190565b6103599160208201915f818403910152610313565b90565b3461038c5761036c366004610160565b6103886103776102ec565b61037f610152565b91829182610344565b0390f35b610158565b1c90565b60018060a01b031690565b6103b09060086103b59302610391565b610395565b90565b906103c391546103a0565b90565b6103d260015f906103b8565b90565b60018060a01b031690565b6103e9906103d5565b90565b6103f5906103e0565b9052565b919061040c905f602085019401906103ec565b565b3461043e5761041e366004610160565b61043a6104296103c6565b610431610152565b918291826103f9565b0390f35b610158565b5190565b60209181520190565b60200190565b61045f906103e0565b9052565b9061047081602093610456565b0190565b60200190565b9061049761049161048a84610443565b8093610447565b92610450565b905f5b8181106104a75750505090565b9091926104c06104ba6001928651610463565b94610474565b910191909161049a565b6104df9160208201915f81840391015261047a565b90565b34610512576104f2366004610160565b61050e6104fd610e89565b610505610152565b918291826104ca565b0390f35b610158565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156105615781359167ffffffffffffffff831161055c57602001926001830284011161055757565b610523565b61051f565b61051b565b90602082820312610597575f82013567ffffffffffffffff81116105925761058e9201610527565b9091565b610517565b61015c565b5f0190565b346105d0576105ba6105b4366004610566565b906111f0565b6105c2610152565b806105cc8161059c565b0390f35b610158565b90565b6105e89060086105ed9302610391565b6105d5565b90565b906105fb91546105d8565b90565b61060a60075f906105f0565b90565b90565b6106199061060d565b9052565b9190610630905f60208501940190610610565b565b3461066257610642366004610160565b61065e61064d6105fe565b610655610152565b9182918261061d565b0390f35b610158565b610670816103e0565b0361067757565b5f80fd5b9050359061068882610667565b565b6106938161060d565b0361069a57565b5f80fd5b905035906106ab8261068a565b565b151590565b6106bb816106ad565b036106c257565b5f80fd5b905035906106d3826106b2565b565b5f80fd5b906106ec6106e5610152565b9283610289565b565b67ffffffffffffffff811161070c5761070860209161026b565b0190565b610275565b90825f939282370152565b9092919261073161072c826106ee565b6106d9565b9381855260208501908284011161074d5761074b92610711565b565b6106d5565b9080601f830112156107705781602061076d9335910161071c565b90565b61051b565b67ffffffffffffffff811161078d5760208091020190565b610275565b909291926107a76107a282610775565b6106d9565b93818552602080860192028301928184116107e457915b8383106107cb5750505050565b602080916107d9848661067b565b8152019201916107be565b610523565b9080601f830112156108075781602061080493359101610792565b90565b61051b565b9190916101c08184031261092b57610826835f830161067b565b92610834816020840161069e565b92610842826040850161069e565b92610850836060830161067b565b9261085e816080840161067b565b9261086c8260a085016106c6565b9261087a8360c0830161069e565b926108888160e0840161069e565b9261089782610100850161067b565b926108a683610120830161069e565b926108b581610140840161067b565b9261016083013567ffffffffffffffff811161092657826108d7918501610752565b9261018081013567ffffffffffffffff811161092157836108f9918301610752565b926101a082013567ffffffffffffffff811161091c5761091992016107e9565b90565b610517565b610517565b610517565b61015c565b346109715761095b61094336600461080c565b9c9b909b9a919a999299989398979497969596611e02565b610963610152565b8061096d8161059c565b0390f35b610158565b346109a55761098f610989366004610566565b90611e93565b610997610152565b806109a18161059c565b0390f35b610158565b6109b6600b5f906102d4565b90565b346109e9576109c9366004610160565b6109e56109d46109aa565b6109dc610152565b91829182610344565b0390f35b610158565b6109fa60025f906103b8565b90565b34610a2d57610a0d366004610160565b610a29610a186109ee565b610a20610152565b918291826103f9565b0390f35b610158565b610a3e60055f906105f0565b90565b34610a7157610a51366004610160565b610a6d610a5c610a32565b610a64610152565b9182918261061d565b0390f35b610158565b610a815f5f906103b8565b90565b34610ab457610a94366004610160565b610ab0610a9f610a76565b610aa7610152565b918291826103f9565b0390f35b610158565b610ac560095f906105f0565b90565b34610af857610ad8366004610160565b610af4610ae3610ab9565b610aeb610152565b9182918261061d565b0390f35b610158565b610b0960035f906103b8565b90565b34610b3c57610b1c366004610160565b610b38610b27610afd565b610b2f610152565b918291826103f9565b0390f35b610158565b610b4d60045f906103b8565b90565b34610b8057610b60366004610160565b610b7c610b6b610b41565b610b73610152565b918291826103f9565b0390f35b610158565b610b9160085f906105f0565b90565b34610bc457610ba4366004610160565b610bc0610baf610b85565b610bb7610152565b9182918261061d565b0390f35b610158565b60ff1690565b610bdf906008610be49302610391565b610bc9565b90565b90610bf29154610bcf565b90565b610c026004601490610be7565b90565b610c0e906106ad565b9052565b9190610c25905f60208501940190610c05565b565b34610c5757610c37366004610160565b610c53610c42610bf5565b610c4a610152565b91829182610c12565b0390f35b610158565b90602082820312610c7557610c72915f0161067b565b90565b61015c565b34610ca857610c92610c8d366004610c5c565b611f7f565b610c9a610152565b80610ca48161059c565b0390f35b610158565b90602082820312610cc657610cc3915f0161069e565b90565b61015c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610cf581610cdf565b821015610d0f57610d07600191610ce3565b910201905f90565b610ccb565b600a610d1f81610cdf565b821015610d3c57610d3991610d3391610cec565b906103b8565b90565b5f80fd5b34610d7057610d6c610d5b610d56366004610cad565b610d14565b610d63610152565b918291826103f9565b0390f35b610158565b610d8160065f906105f0565b90565b34610db457610d94366004610160565b610db0610d9f610d75565b610da7610152565b9182918261061d565b0390f35b610158565b5f80fd5b606090565b60209181520190565b5f1c90565b610ddc610de191610dcb565b610395565b90565b610dee9054610dd0565b90565b60010190565b90610e14610e0e610e0784610cdf565b8093610dc2565b92610ce3565b905f5b818110610e245750505090565b909192610e44610e3e600192610e3987610de4565b610463565b94610df1565b9101919091610e17565b90610e5891610df7565b90565b90610e7b610e7492610e6b610152565b93848092610e4e565b0383610289565b565b610e8690610e5b565b90565b610e91610dbd565b50610e9c600a610e7d565b90565b610ea99054610dd0565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610ee060176020926102ff565b610ee981610eac565b0190565b610f029060208101905f818303910152610ed3565b90565b15610f0c57565b610f14610152565b62461bcd60e51b815280610f2a60048201610eed565b0390fd5b90610f5c91610f5733610f51610f4b610f465f610e9f565b6103e0565b916103e0565b14610f05565b6111a7565b565b5090565b601f602091010490565b1b90565b91906008610f8b910291610f855f1984610f6c565b92610f6c565b9181191691161790565b90565b610fac610fa7610fb19261060d565b610f95565b61060d565b90565b90565b9190610fcd610fc8610fd593610f98565b610fb4565b908354610f70565b9055565b5f90565b610fef91610fe9610fd9565b91610fb7565b565b5b818110610ffd575050565b8061100a5f600193610fdd565b01610ff2565b9190601f8111611020575b505050565b61102c611051936101c9565b90602061103884610f62565b83019310611059575b61104a90610f62565b0190610ff1565b5f808061101b565b915061104a81929050611041565b90611077905f1990600802610391565b191690565b8161108691611067565b906002021790565b916110999082610f5e565b9067ffffffffffffffff8211611158576110bd826110b78554610196565b85611010565b5f90601f83116001146110f0579180916110df935f926110e4575b505061107c565b90555b565b90915001355f806110d8565b601f198316916110ff856101c9565b925f5b81811061114057509160029391856001969410611126575b505050020190556110e2565b611136910135601f841690611067565b90555f808061111a565b91936020600181928787013581550195019201611102565b610275565b90611168929161108e565b565b91906111848161117d81611189956102ff565b8095610711565b61026b565b0190565b90916111a49260208301925f81850391015261116a565b90565b6111b4818390600c61115d565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a7916111eb6111e2610152565b9283928361118d565b0390a1565b906111fa91610f2e565b565b60401c90565b61120e611213916111fc565b610bc9565b90565b6112209054611202565b90565b67ffffffffffffffff1690565b61123c61124191610dcb565b611223565b90565b61124e9054611230565b90565b67ffffffffffffffff1690565b90565b61127561127061127a9261125e565b610f95565b611251565b90565b90565b61129461128f6112999261127d565b610f95565b611251565b90565b6112b06112ab6112b5926103d5565b610f95565b6103d5565b90565b6112c19061129c565b90565b6112cd906112b8565b90565b6112e46112df6112e99261125e565b610f95565b61060d565b90565b5f1b90565b9061130467ffffffffffffffff916112ec565b9181191691161790565b61132261131d61132792611251565b610f95565b611251565b90565b90565b9061134261133d6113499261130e565b61132a565b82546112f1565b9055565b60401b90565b9061136768ff00000000000000009161134d565b9181191691161790565b61137a906106ad565b90565b90565b9061139561139061139c92611371565b61137d565b8254611353565b9055565b6113a990611280565b9052565b91906113c0905f602085019401906113a0565b565b9c9b9a999897969594939291906113d7611f8a565b6080526113f06113ea5f60805101611216565b156106ad565b60a0526114005f60805101611244565b8061141361140d5f611261565b91611251565b1480611535575b9061142e6114286001611280565b91611251565b148061150d575b6114409091156106ad565b90816114fc575b506114e0576114749d61146761145d6001611280565b5f6080510161132d565b60a0516114cc575b611c6e565b60a05161147e575b565b61148c5f5f60805101611380565b60016114c47fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916114bb610152565b918291826113ad565b0390a161147c565b6114db60015f60805101611380565b61146f565b5f63f92ee8a960e01b8152806114f86004820161059c565b0390fd5b6115079150156106ad565b5f611447565b5061144061151a306112c4565b3b61152d6115275f6112d0565b9161060d565b149050611435565b5060a05161141a565b61155261154d6115579261125e565b610f95565b6103d5565b90565b6115639061153e565b90565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b61159a601c6020926102ff565b6115a381611566565b0190565b6115bc9060208101905f81830391015261158d565b90565b156115c657565b6115ce610152565b62461bcd60e51b8152806115e4600482016115a7565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61161c60176020926102ff565b611625816115e8565b0190565b61163e9060208101905f81830391015261160f565b90565b1561164857565b611650610152565b62461bcd60e51b81528061166660048201611629565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b6116c460226040926102ff565b6116cd8161166a565b0190565b6116e69060208101905f8183039101526116b7565b90565b156116f057565b6116f8610152565b62461bcd60e51b81528061170e600482016116d1565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b61176c60266040926102ff565b61177581611712565b0190565b61178e9060208101905f81830391015261175f565b90565b1561179857565b6117a0610152565b62461bcd60e51b8152806117b660048201611779565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61181460256040926102ff565b61181d816117ba565b0190565b6118369060208101905f818303910152611807565b90565b1561184057565b611848610152565b62461bcd60e51b81528061185e60048201611821565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6118bc602a6040926102ff565b6118c581611862565b0190565b6118de9060208101905f8183039101526118af565b90565b156118e857565b6118f0610152565b62461bcd60e51b815280611906600482016118c9565b0390fd5b60207f207a65726f206164647265737300000000000000000000000000000000000000917f496e697469616c20617070636861696e206f776e65722063616e6e6f742062655f8201520152565b611964602d6040926102ff565b61196d8161190a565b0190565b6119869060208101905f818303910152611957565b90565b1561199057565b611998610152565b62461bcd60e51b8152806119ae60048201611971565b0390fd5b906119be5f19916112ec565b9181191691161790565b906119dd6119d86119e492610f98565b610fb4565b82546119b2565b9055565b906119f960018060a01b03916112ec565b9181191691161790565b611a0c906112b8565b90565b90565b90611a27611a22611a2e92611a03565b611a0f565b82546119e8565b9055565b60a01b90565b90611a4760ff60a01b91611a32565b9181191691161790565b90611a66611a61611a6d92611371565b61137d565b8254611a38565b9055565b600190818003010490565b5b818110611a88575050565b80611a955f600193610fdd565b01611a7d565b9091828110611aaa575b505050565b611ac8611ac2611abc611ad395611a71565b92611a71565b92610ce3565b918201910190611a7c565b5f8080611aa5565b90680100000000000000008111611b045781611af9611b0293610cdf565b90828155611a9b565b565b610275565b611b1390516103e0565b90565b611b1f82610443565b9167ffffffffffffffff8311611b8257611b4d611b47600192611b428686611adb565b610450565b92610ce3565b9204915f5b838110611b5f5750505050565b6001906020611b75611b7086611b09565b611a0f565b9401938184015501611b52565b610275565b90611b9191611b16565b565b90611b9d816102fb565b9067ffffffffffffffff8211611c5d57611bc182611bbb8554610196565b85611010565b602090601f8311600114611bf557918091611be4935f92611be9575b505061107c565b90555b565b90915001515f80611bdd565b601f19831691611c04856101c9565b925f5b818110611c4557509160029391856001969410611c2b575b50505002019055611be7565b611c3b910151601f841690611067565b90555f8080611c1f565b91936020600181928787015181550195019201611c07565b610275565b90611c6c91611b93565b565b9b999597611dd1611ded98611e009f968f9b611dfb9f9c611de69a611df49f98611dca94611db58f9c611dae611dbc94611ddf9f611dd89e611da08f92611d7f611da794611cda611dc39e611cd3611ccd611cc85f61155a565b6103e0565b916103e0565b14156115bf565b611cf785611cf0611cea5f6112d0565b9161060d565b1415611641565b611d1487611d0d611d075f6112d0565b9161060d565b14156116e9565b611d3989611d32611d2c611d275f61155a565b6103e0565b916103e0565b1415611791565b611d5e8b611d57611d51611d4c5f61155a565b6103e0565b916103e0565b1415611839565b611d78611d72611d6d5f61155a565b6103e0565b916103e0565b14156118e1565b611d99611d93611d8e5f61155a565b6103e0565b916103e0565b1415611989565b60056119c8565b60066119c8565b6002611a12565b6003611a12565b6004611a51565b60076119c8565b60086119c8565b6004611a12565b60096119c8565b600a611b87565b6001611a12565b600b611c62565b600c611c62565b611fae565b565b90611e189d9c9b9a9998979695949392916113c2565b565b90611e4891611e4333611e3d611e37611e325f610e9f565b6103e0565b916103e0565b14610f05565b611e4a565b565b611e57818390600b61115d565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291611e8e611e85610152565b9283928361118d565b0390a1565b90611e9d91611e1a565b565b611ecc90611ec733611ec1611ebb611eb65f610e9f565b6103e0565b916103e0565b14610f05565b611f4f565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b611f01602080926102ff565b611f0a81611ece565b0190565b611f239060208101905f818303910152611ef5565b90565b15611f2d57565b611f35610152565b62461bcd60e51b815280611f4b60048201611f0e565b0390fd5b611f7d90611f7881611f71611f6b611f665f61155a565b6103e0565b916103e0565b1415611f26565b611fae565b565b611f8890611e9f565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611fb75f610e9f565b611fc1825f611a12565b90611ff5611fef7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611a03565b91611a03565b91611ffe610152565b806120088161059c565b0390a356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R`\x046\x10\x15a\0\x13W[a\r\xB9V[a\0\x1D_5a\x01LV[\x80c\x07C\xBFn\x14a\x01GW\x80c\x18\xB5\xCE\x81\x14a\x01BW\x80c\x1B\xC0\xAF\xD6\x14a\x01=W\x80cK\x8B\xE3\xF7\x14a\x018W\x80cW\xD1\xBA%\x14a\x013W\x80cZ-\x9C\x18\x14a\x01.W\x80cb\xC7<\xAA\x14a\x01)W\x80cf\xA1\xD1\x08\x14a\x01$W\x80cn\xDDl\t\x14a\x01\x1FW\x80c\x85\xE1\xF4\xD0\x14a\x01\x1AW\x80c\x8D\xA5\xCB[\x14a\x01\x15W\x80c\xA3\xC6\xE1\xE7\x14a\x01\x10W\x80c\xAAjC\xD8\x14a\x01\x0BW\x80c\xBFm\xB6\xF8\x14a\x01\x06W\x80c\xD1\xF4s|\x14a\x01\x01W\x80c\xE7\x93\x88\xE6\x14a\0\xFCW\x80c\xF2\xFD\xE3\x8B\x14a\0\xF7W\x80c\xF8\x81\xAF\xAF\x14a\0\xF2Wc\xF8\xA1D\xBE\x03a\0\x0EWa\r\x84V[a\r@V[a\x0CzV[a\x0C'V[a\x0B\x94V[a\x0BPV[a\x0B\x0CV[a\n\xC8V[a\n\x84V[a\nAV[a\t\xFDV[a\t\xB9V[a\tvV[a\t0V[a\x062V[a\x05\xA1V[a\x04\xE2V[a\x04\x0EV[a\x03\\V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xB6W[` \x83\x10\x14a\x01\xB1WV[a\x01\x82V[\x91`\x7F\x16\x91a\x01\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xECa\x01\xE5\x83a\x01\x96V[\x80\x94a\x01\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\x02CWP`\x01\x14a\x02\x07W[PPPV[a\x02\x14\x91\x92\x93\x94Pa\x01\xC9V[\x91_\x92[\x81\x84\x10a\x02+WPP\x01\x90_\x80\x80a\x02\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x02\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x02\x02V[\x90a\x02h\x91a\x01\xD2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x93\x90a\x02kV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xADW`@RV[a\x02uV[\x90a\x02\xD2a\x02\xCB\x92a\x02\xC2a\x01RV[\x93\x84\x80\x92a\x02^V[\x03\x83a\x02\x89V[V[\x90_\x10a\x02\xE7Wa\x02\xE4\x90a\x02\xB2V[\x90V[a\x01oV[a\x02\xF8`\x0C_\x90a\x02\xD4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x032a\x03;` \x93a\x03@\x93a\x03)\x81a\x02\xFBV[\x93\x84\x80\x93a\x02\xFFV[\x95\x86\x91\x01a\x03\x08V[a\x02kV[\x01\x90V[a\x03Y\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\x13V[\x90V[4a\x03\x8CWa\x03l6`\x04a\x01`V[a\x03\x88a\x03wa\x02\xECV[a\x03\x7Fa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xB0\x90`\x08a\x03\xB5\x93\x02a\x03\x91V[a\x03\x95V[\x90V[\x90a\x03\xC3\x91Ta\x03\xA0V[\x90V[a\x03\xD2`\x01_\x90a\x03\xB8V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xE9\x90a\x03\xD5V[\x90V[a\x03\xF5\x90a\x03\xE0V[\x90RV[\x91\x90a\x04\x0C\x90_` \x85\x01\x94\x01\x90a\x03\xECV[V[4a\x04>Wa\x04\x1E6`\x04a\x01`V[a\x04:a\x04)a\x03\xC6V[a\x041a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x04_\x90a\x03\xE0V[\x90RV[\x90a\x04p\x81` \x93a\x04VV[\x01\x90V[` \x01\x90V[\x90a\x04\x97a\x04\x91a\x04\x8A\x84a\x04CV[\x80\x93a\x04GV[\x92a\x04PV[\x90_[\x81\x81\x10a\x04\xA7WPPP\x90V[\x90\x91\x92a\x04\xC0a\x04\xBA`\x01\x92\x86Qa\x04cV[\x94a\x04tV[\x91\x01\x91\x90\x91a\x04\x9AV[a\x04\xDF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04zV[\x90V[4a\x05\x12Wa\x04\xF26`\x04a\x01`V[a\x05\x0Ea\x04\xFDa\x0E\x89V[a\x05\x05a\x01RV[\x91\x82\x91\x82a\x04\xCAV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05aW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\\W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x05WWV[a\x05#V[a\x05\x1FV[a\x05\x1BV[\x90` \x82\x82\x03\x12a\x05\x97W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x92Wa\x05\x8E\x92\x01a\x05'V[\x90\x91V[a\x05\x17V[a\x01\\V[_\x01\x90V[4a\x05\xD0Wa\x05\xBAa\x05\xB46`\x04a\x05fV[\x90a\x11\xF0V[a\x05\xC2a\x01RV[\x80a\x05\xCC\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[\x90V[a\x05\xE8\x90`\x08a\x05\xED\x93\x02a\x03\x91V[a\x05\xD5V[\x90V[\x90a\x05\xFB\x91Ta\x05\xD8V[\x90V[a\x06\n`\x07_\x90a\x05\xF0V[\x90V[\x90V[a\x06\x19\x90a\x06\rV[\x90RV[\x91\x90a\x060\x90_` \x85\x01\x94\x01\x90a\x06\x10V[V[4a\x06bWa\x06B6`\x04a\x01`V[a\x06^a\x06Ma\x05\xFEV[a\x06Ua\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[a\x06p\x81a\x03\xE0V[\x03a\x06wWV[_\x80\xFD[\x90P5\x90a\x06\x88\x82a\x06gV[V[a\x06\x93\x81a\x06\rV[\x03a\x06\x9AWV[_\x80\xFD[\x90P5\x90a\x06\xAB\x82a\x06\x8AV[V[\x15\x15\x90V[a\x06\xBB\x81a\x06\xADV[\x03a\x06\xC2WV[_\x80\xFD[\x90P5\x90a\x06\xD3\x82a\x06\xB2V[V[_\x80\xFD[\x90a\x06\xECa\x06\xE5a\x01RV[\x92\x83a\x02\x89V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x0CWa\x07\x08` \x91a\x02kV[\x01\x90V[a\x02uV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x071a\x07,\x82a\x06\xEEV[a\x06\xD9V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07MWa\x07K\x92a\x07\x11V[V[a\x06\xD5V[\x90\x80`\x1F\x83\x01\x12\x15a\x07pW\x81` a\x07m\x935\x91\x01a\x07\x1CV[\x90V[a\x05\x1BV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x8DW` \x80\x91\x02\x01\x90V[a\x02uV[\x90\x92\x91\x92a\x07\xA7a\x07\xA2\x82a\x07uV[a\x06\xD9V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x07\xE4W\x91[\x83\x83\x10a\x07\xCBWPPPPV[` \x80\x91a\x07\xD9\x84\x86a\x06{V[\x81R\x01\x92\x01\x91a\x07\xBEV[a\x05#V[\x90\x80`\x1F\x83\x01\x12\x15a\x08\x07W\x81` a\x08\x04\x935\x91\x01a\x07\x92V[\x90V[a\x05\x1BV[\x91\x90\x91a\x01\xC0\x81\x84\x03\x12a\t+Wa\x08&\x83_\x83\x01a\x06{V[\x92a\x084\x81` \x84\x01a\x06\x9EV[\x92a\x08B\x82`@\x85\x01a\x06\x9EV[\x92a\x08P\x83``\x83\x01a\x06{V[\x92a\x08^\x81`\x80\x84\x01a\x06{V[\x92a\x08l\x82`\xA0\x85\x01a\x06\xC6V[\x92a\x08z\x83`\xC0\x83\x01a\x06\x9EV[\x92a\x08\x88\x81`\xE0\x84\x01a\x06\x9EV[\x92a\x08\x97\x82a\x01\0\x85\x01a\x06{V[\x92a\x08\xA6\x83a\x01 \x83\x01a\x06\x9EV[\x92a\x08\xB5\x81a\x01@\x84\x01a\x06{V[\x92a\x01`\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t&W\x82a\x08\xD7\x91\x85\x01a\x07RV[\x92a\x01\x80\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t!W\x83a\x08\xF9\x91\x83\x01a\x07RV[\x92a\x01\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\x1CWa\t\x19\x92\x01a\x07\xE9V[\x90V[a\x05\x17V[a\x05\x17V[a\x05\x17V[a\x01\\V[4a\tqWa\t[a\tC6`\x04a\x08\x0CV[\x9C\x9B\x90\x9B\x9A\x91\x9A\x99\x92\x99\x98\x93\x98\x97\x94\x97\x96\x95\x96a\x1E\x02V[a\tca\x01RV[\x80a\tm\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[4a\t\xA5Wa\t\x8Fa\t\x896`\x04a\x05fV[\x90a\x1E\x93V[a\t\x97a\x01RV[\x80a\t\xA1\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[a\t\xB6`\x0B_\x90a\x02\xD4V[\x90V[4a\t\xE9Wa\t\xC96`\x04a\x01`V[a\t\xE5a\t\xD4a\t\xAAV[a\t\xDCa\x01RV[\x91\x82\x91\x82a\x03DV[\x03\x90\xF3[a\x01XV[a\t\xFA`\x02_\x90a\x03\xB8V[\x90V[4a\n-Wa\n\r6`\x04a\x01`V[a\n)a\n\x18a\t\xEEV[a\n a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\n>`\x05_\x90a\x05\xF0V[\x90V[4a\nqWa\nQ6`\x04a\x01`V[a\nma\n\\a\n2V[a\nda\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[a\n\x81__\x90a\x03\xB8V[\x90V[4a\n\xB4Wa\n\x946`\x04a\x01`V[a\n\xB0a\n\x9Fa\nvV[a\n\xA7a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\n\xC5`\t_\x90a\x05\xF0V[\x90V[4a\n\xF8Wa\n\xD86`\x04a\x01`V[a\n\xF4a\n\xE3a\n\xB9V[a\n\xEBa\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[a\x0B\t`\x03_\x90a\x03\xB8V[\x90V[4a\x0B<Wa\x0B\x1C6`\x04a\x01`V[a\x0B8a\x0B'a\n\xFDV[a\x0B/a\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\x0BM`\x04_\x90a\x03\xB8V[\x90V[4a\x0B\x80Wa\x0B`6`\x04a\x01`V[a\x0B|a\x0Bka\x0BAV[a\x0Bsa\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\x0B\x91`\x08_\x90a\x05\xF0V[\x90V[4a\x0B\xC4Wa\x0B\xA46`\x04a\x01`V[a\x0B\xC0a\x0B\xAFa\x0B\x85V[a\x0B\xB7a\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[`\xFF\x16\x90V[a\x0B\xDF\x90`\x08a\x0B\xE4\x93\x02a\x03\x91V[a\x0B\xC9V[\x90V[\x90a\x0B\xF2\x91Ta\x0B\xCFV[\x90V[a\x0C\x02`\x04`\x14\x90a\x0B\xE7V[\x90V[a\x0C\x0E\x90a\x06\xADV[\x90RV[\x91\x90a\x0C%\x90_` \x85\x01\x94\x01\x90a\x0C\x05V[V[4a\x0CWWa\x0C76`\x04a\x01`V[a\x0CSa\x0CBa\x0B\xF5V[a\x0CJa\x01RV[\x91\x82\x91\x82a\x0C\x12V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0CuWa\x0Cr\x91_\x01a\x06{V[\x90V[a\x01\\V[4a\x0C\xA8Wa\x0C\x92a\x0C\x8D6`\x04a\x0C\\V[a\x1F\x7FV[a\x0C\x9Aa\x01RV[\x80a\x0C\xA4\x81a\x05\x9CV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x0C\xC6Wa\x0C\xC3\x91_\x01a\x06\x9EV[\x90V[a\x01\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x0C\xF5\x81a\x0C\xDFV[\x82\x10\x15a\r\x0FWa\r\x07`\x01\x91a\x0C\xE3V[\x91\x02\x01\x90_\x90V[a\x0C\xCBV[`\na\r\x1F\x81a\x0C\xDFV[\x82\x10\x15a\r<Wa\r9\x91a\r3\x91a\x0C\xECV[\x90a\x03\xB8V[\x90V[_\x80\xFD[4a\rpWa\rla\r[a\rV6`\x04a\x0C\xADV[a\r\x14V[a\rca\x01RV[\x91\x82\x91\x82a\x03\xF9V[\x03\x90\xF3[a\x01XV[a\r\x81`\x06_\x90a\x05\xF0V[\x90V[4a\r\xB4Wa\r\x946`\x04a\x01`V[a\r\xB0a\r\x9Fa\ruV[a\r\xA7a\x01RV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01XV[_\x80\xFD[``\x90V[` \x91\x81R\x01\x90V[_\x1C\x90V[a\r\xDCa\r\xE1\x91a\r\xCBV[a\x03\x95V[\x90V[a\r\xEE\x90Ta\r\xD0V[\x90V[`\x01\x01\x90V[\x90a\x0E\x14a\x0E\x0Ea\x0E\x07\x84a\x0C\xDFV[\x80\x93a\r\xC2V[\x92a\x0C\xE3V[\x90_[\x81\x81\x10a\x0E$WPPP\x90V[\x90\x91\x92a\x0EDa\x0E>`\x01\x92a\x0E9\x87a\r\xE4V[a\x04cV[\x94a\r\xF1V[\x91\x01\x91\x90\x91a\x0E\x17V[\x90a\x0EX\x91a\r\xF7V[\x90V[\x90a\x0E{a\x0Et\x92a\x0Eka\x01RV[\x93\x84\x80\x92a\x0ENV[\x03\x83a\x02\x89V[V[a\x0E\x86\x90a\x0E[V[\x90V[a\x0E\x91a\r\xBDV[Pa\x0E\x9C`\na\x0E}V[\x90V[a\x0E\xA9\x90Ta\r\xD0V[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xE0`\x17` \x92a\x02\xFFV[a\x0E\xE9\x81a\x0E\xACV[\x01\x90V[a\x0F\x02\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xD3V[\x90V[\x15a\x0F\x0CWV[a\x0F\x14a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0F*`\x04\x82\x01a\x0E\xEDV[\x03\x90\xFD[\x90a\x0F\\\x91a\x0FW3a\x0FQa\x0FKa\x0FF_a\x0E\x9FV[a\x03\xE0V[\x91a\x03\xE0V[\x14a\x0F\x05V[a\x11\xA7V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0F\x8B\x91\x02\x91a\x0F\x85_\x19\x84a\x0FlV[\x92a\x0FlV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x0F\xACa\x0F\xA7a\x0F\xB1\x92a\x06\rV[a\x0F\x95V[a\x06\rV[\x90V[\x90V[\x91\x90a\x0F\xCDa\x0F\xC8a\x0F\xD5\x93a\x0F\x98V[a\x0F\xB4V[\x90\x83Ta\x0FpV[\x90UV[_\x90V[a\x0F\xEF\x91a\x0F\xE9a\x0F\xD9V[\x91a\x0F\xB7V[V[[\x81\x81\x10a\x0F\xFDWPPV[\x80a\x10\n_`\x01\x93a\x0F\xDDV[\x01a\x0F\xF2V[\x91\x90`\x1F\x81\x11a\x10 W[PPPV[a\x10,a\x10Q\x93a\x01\xC9V[\x90` a\x108\x84a\x0FbV[\x83\x01\x93\x10a\x10YW[a\x10J\x90a\x0FbV[\x01\x90a\x0F\xF1V[_\x80\x80a\x10\x1BV[\x91Pa\x10J\x81\x92\x90Pa\x10AV[\x90a\x10w\x90_\x19\x90`\x08\x02a\x03\x91V[\x19\x16\x90V[\x81a\x10\x86\x91a\x10gV[\x90`\x02\x02\x17\x90V[\x91a\x10\x99\x90\x82a\x0F^V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11XWa\x10\xBD\x82a\x10\xB7\x85Ta\x01\x96V[\x85a\x10\x10V[_\x90`\x1F\x83\x11`\x01\x14a\x10\xF0W\x91\x80\x91a\x10\xDF\x93_\x92a\x10\xE4W[PPa\x10|V[\x90U[V[\x90\x91P\x015_\x80a\x10\xD8V[`\x1F\x19\x83\x16\x91a\x10\xFF\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x11@WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x11&W[PPP\x02\x01\x90Ua\x10\xE2V[a\x116\x91\x015`\x1F\x84\x16\x90a\x10gV[\x90U_\x80\x80a\x11\x1AV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x11\x02V[a\x02uV[\x90a\x11h\x92\x91a\x10\x8EV[V[\x91\x90a\x11\x84\x81a\x11}\x81a\x11\x89\x95a\x02\xFFV[\x80\x95a\x07\x11V[a\x02kV[\x01\x90V[\x90\x91a\x11\xA4\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x11jV[\x90V[a\x11\xB4\x81\x83\x90`\x0Ca\x11]V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\x11\xEBa\x11\xE2a\x01RV[\x92\x83\x92\x83a\x11\x8DV[\x03\x90\xA1V[\x90a\x11\xFA\x91a\x0F.V[V[`@\x1C\x90V[a\x12\x0Ea\x12\x13\x91a\x11\xFCV[a\x0B\xC9V[\x90V[a\x12 \x90Ta\x12\x02V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x12<a\x12A\x91a\r\xCBV[a\x12#V[\x90V[a\x12N\x90Ta\x120V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90V[a\x12ua\x12pa\x12z\x92a\x12^V[a\x0F\x95V[a\x12QV[\x90V[\x90V[a\x12\x94a\x12\x8Fa\x12\x99\x92a\x12}V[a\x0F\x95V[a\x12QV[\x90V[a\x12\xB0a\x12\xABa\x12\xB5\x92a\x03\xD5V[a\x0F\x95V[a\x03\xD5V[\x90V[a\x12\xC1\x90a\x12\x9CV[\x90V[a\x12\xCD\x90a\x12\xB8V[\x90V[a\x12\xE4a\x12\xDFa\x12\xE9\x92a\x12^V[a\x0F\x95V[a\x06\rV[\x90V[_\x1B\x90V[\x90a\x13\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x12\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13\"a\x13\x1Da\x13'\x92a\x12QV[a\x0F\x95V[a\x12QV[\x90V[\x90V[\x90a\x13Ba\x13=a\x13I\x92a\x13\x0EV[a\x13*V[\x82Ta\x12\xF1V[\x90UV[`@\x1B\x90V[\x90a\x13gh\xFF\0\0\0\0\0\0\0\0\x91a\x13MV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13z\x90a\x06\xADV[\x90V[\x90V[\x90a\x13\x95a\x13\x90a\x13\x9C\x92a\x13qV[a\x13}V[\x82Ta\x13SV[\x90UV[a\x13\xA9\x90a\x12\x80V[\x90RV[\x91\x90a\x13\xC0\x90_` \x85\x01\x94\x01\x90a\x13\xA0V[V[\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x13\xD7a\x1F\x8AV[`\x80Ra\x13\xF0a\x13\xEA_`\x80Q\x01a\x12\x16V[\x15a\x06\xADV[`\xA0Ra\x14\0_`\x80Q\x01a\x12DV[\x80a\x14\x13a\x14\r_a\x12aV[\x91a\x12QV[\x14\x80a\x155W[\x90a\x14.a\x14(`\x01a\x12\x80V[\x91a\x12QV[\x14\x80a\x15\rW[a\x14@\x90\x91\x15a\x06\xADV[\x90\x81a\x14\xFCW[Pa\x14\xE0Wa\x14t\x9Da\x14ga\x14]`\x01a\x12\x80V[_`\x80Q\x01a\x13-V[`\xA0Qa\x14\xCCW[a\x1CnV[`\xA0Qa\x14~W[V[a\x14\x8C__`\x80Q\x01a\x13\x80V[`\x01a\x14\xC4\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x14\xBBa\x01RV[\x91\x82\x91\x82a\x13\xADV[\x03\x90\xA1a\x14|V[a\x14\xDB`\x01_`\x80Q\x01a\x13\x80V[a\x14oV[_c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x14\xF8`\x04\x82\x01a\x05\x9CV[\x03\x90\xFD[a\x15\x07\x91P\x15a\x06\xADV[_a\x14GV[Pa\x14@a\x15\x1A0a\x12\xC4V[;a\x15-a\x15'_a\x12\xD0V[\x91a\x06\rV[\x14\x90Pa\x145V[P`\xA0Qa\x14\x1AV[a\x15Ra\x15Ma\x15W\x92a\x12^V[a\x0F\x95V[a\x03\xD5V[\x90V[a\x15c\x90a\x15>V[\x90V[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x15\x9A`\x1C` \x92a\x02\xFFV[a\x15\xA3\x81a\x15fV[\x01\x90V[a\x15\xBC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x8DV[\x90V[\x15a\x15\xC6WV[a\x15\xCEa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xE4`\x04\x82\x01a\x15\xA7V[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x16\x1C`\x17` \x92a\x02\xFFV[a\x16%\x81a\x15\xE8V[\x01\x90V[a\x16>\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\x0FV[\x90V[\x15a\x16HWV[a\x16Pa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16f`\x04\x82\x01a\x16)V[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x16\xC4`\"`@\x92a\x02\xFFV[a\x16\xCD\x81a\x16jV[\x01\x90V[a\x16\xE6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xB7V[\x90V[\x15a\x16\xF0WV[a\x16\xF8a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x0E`\x04\x82\x01a\x16\xD1V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x17l`&`@\x92a\x02\xFFV[a\x17u\x81a\x17\x12V[\x01\x90V[a\x17\x8E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17_V[\x90V[\x15a\x17\x98WV[a\x17\xA0a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\xB6`\x04\x82\x01a\x17yV[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x18\x14`%`@\x92a\x02\xFFV[a\x18\x1D\x81a\x17\xBAV[\x01\x90V[a\x186\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\x07V[\x90V[\x15a\x18@WV[a\x18Ha\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18^`\x04\x82\x01a\x18!V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x18\xBC`*`@\x92a\x02\xFFV[a\x18\xC5\x81a\x18bV[\x01\x90V[a\x18\xDE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\xAFV[\x90V[\x15a\x18\xE8WV[a\x18\xF0a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\x06`\x04\x82\x01a\x18\xC9V[\x03\x90\xFD[` \x7F zero address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FInitial appchain owner cannot be_\x82\x01R\x01RV[a\x19d`-`@\x92a\x02\xFFV[a\x19m\x81a\x19\nV[\x01\x90V[a\x19\x86\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19WV[\x90V[\x15a\x19\x90WV[a\x19\x98a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xAE`\x04\x82\x01a\x19qV[\x03\x90\xFD[\x90a\x19\xBE_\x19\x91a\x12\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x19\xDDa\x19\xD8a\x19\xE4\x92a\x0F\x98V[a\x0F\xB4V[\x82Ta\x19\xB2V[\x90UV[\x90a\x19\xF9`\x01\x80`\xA0\x1B\x03\x91a\x12\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\x0C\x90a\x12\xB8V[\x90V[\x90V[\x90a\x1A'a\x1A\"a\x1A.\x92a\x1A\x03V[a\x1A\x0FV[\x82Ta\x19\xE8V[\x90UV[`\xA0\x1B\x90V[\x90a\x1AG`\xFF`\xA0\x1B\x91a\x1A2V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1Afa\x1Aaa\x1Am\x92a\x13qV[a\x13}V[\x82Ta\x1A8V[\x90UV[`\x01\x90\x81\x80\x03\x01\x04\x90V[[\x81\x81\x10a\x1A\x88WPPV[\x80a\x1A\x95_`\x01\x93a\x0F\xDDV[\x01a\x1A}V[\x90\x91\x82\x81\x10a\x1A\xAAW[PPPV[a\x1A\xC8a\x1A\xC2a\x1A\xBCa\x1A\xD3\x95a\x1AqV[\x92a\x1AqV[\x92a\x0C\xE3V[\x91\x82\x01\x91\x01\x90a\x1A|V[_\x80\x80a\x1A\xA5V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x1B\x04W\x81a\x1A\xF9a\x1B\x02\x93a\x0C\xDFV[\x90\x82\x81Ua\x1A\x9BV[V[a\x02uV[a\x1B\x13\x90Qa\x03\xE0V[\x90V[a\x1B\x1F\x82a\x04CV[\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x1B\x82Wa\x1BMa\x1BG`\x01\x92a\x1BB\x86\x86a\x1A\xDBV[a\x04PV[\x92a\x0C\xE3V[\x92\x04\x91_[\x83\x81\x10a\x1B_WPPPPV[`\x01\x90` a\x1Bua\x1Bp\x86a\x1B\tV[a\x1A\x0FV[\x94\x01\x93\x81\x84\x01U\x01a\x1BRV[a\x02uV[\x90a\x1B\x91\x91a\x1B\x16V[V[\x90a\x1B\x9D\x81a\x02\xFBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1C]Wa\x1B\xC1\x82a\x1B\xBB\x85Ta\x01\x96V[\x85a\x10\x10V[` \x90`\x1F\x83\x11`\x01\x14a\x1B\xF5W\x91\x80\x91a\x1B\xE4\x93_\x92a\x1B\xE9W[PPa\x10|V[\x90U[V[\x90\x91P\x01Q_\x80a\x1B\xDDV[`\x1F\x19\x83\x16\x91a\x1C\x04\x85a\x01\xC9V[\x92_[\x81\x81\x10a\x1CEWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x1C+W[PPP\x02\x01\x90Ua\x1B\xE7V[a\x1C;\x91\x01Q`\x1F\x84\x16\x90a\x10gV[\x90U_\x80\x80a\x1C\x1FV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x1C\x07V[a\x02uV[\x90a\x1Cl\x91a\x1B\x93V[V[\x9B\x99\x95\x97a\x1D\xD1a\x1D\xED\x98a\x1E\0\x9F\x96\x8F\x9Ba\x1D\xFB\x9F\x9Ca\x1D\xE6\x9Aa\x1D\xF4\x9F\x98a\x1D\xCA\x94a\x1D\xB5\x8F\x9Ca\x1D\xAEa\x1D\xBC\x94a\x1D\xDF\x9Fa\x1D\xD8\x9Ea\x1D\xA0\x8F\x92a\x1D\x7Fa\x1D\xA7\x94a\x1C\xDAa\x1D\xC3\x9Ea\x1C\xD3a\x1C\xCDa\x1C\xC8_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x15\xBFV[a\x1C\xF7\x85a\x1C\xF0a\x1C\xEA_a\x12\xD0V[\x91a\x06\rV[\x14\x15a\x16AV[a\x1D\x14\x87a\x1D\ra\x1D\x07_a\x12\xD0V[\x91a\x06\rV[\x14\x15a\x16\xE9V[a\x1D9\x89a\x1D2a\x1D,a\x1D'_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x17\x91V[a\x1D^\x8Ba\x1DWa\x1DQa\x1DL_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x189V[a\x1Dxa\x1Dra\x1Dm_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x18\xE1V[a\x1D\x99a\x1D\x93a\x1D\x8E_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x19\x89V[`\x05a\x19\xC8V[`\x06a\x19\xC8V[`\x02a\x1A\x12V[`\x03a\x1A\x12V[`\x04a\x1AQV[`\x07a\x19\xC8V[`\x08a\x19\xC8V[`\x04a\x1A\x12V[`\ta\x19\xC8V[`\na\x1B\x87V[`\x01a\x1A\x12V[`\x0Ba\x1CbV[`\x0Ca\x1CbV[a\x1F\xAEV[V[\x90a\x1E\x18\x9D\x9C\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x13\xC2V[V[\x90a\x1EH\x91a\x1EC3a\x1E=a\x1E7a\x1E2_a\x0E\x9FV[a\x03\xE0V[\x91a\x03\xE0V[\x14a\x0F\x05V[a\x1EJV[V[a\x1EW\x81\x83\x90`\x0Ba\x11]V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x1E\x8Ea\x1E\x85a\x01RV[\x92\x83\x92\x83a\x11\x8DV[\x03\x90\xA1V[\x90a\x1E\x9D\x91a\x1E\x1AV[V[a\x1E\xCC\x90a\x1E\xC73a\x1E\xC1a\x1E\xBBa\x1E\xB6_a\x0E\x9FV[a\x03\xE0V[\x91a\x03\xE0V[\x14a\x0F\x05V[a\x1FOV[V[_\x7FNew owner cannot be zero address\x91\x01RV[a\x1F\x01` \x80\x92a\x02\xFFV[a\x1F\n\x81a\x1E\xCEV[\x01\x90V[a\x1F#\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1E\xF5V[\x90V[\x15a\x1F-WV[a\x1F5a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1FK`\x04\x82\x01a\x1F\x0EV[\x03\x90\xFD[a\x1F}\x90a\x1Fx\x81a\x1Fqa\x1Fka\x1Ff_a\x15ZV[a\x03\xE0V[\x91a\x03\xE0V[\x14\x15a\x1F&V[a\x1F\xAEV[V[a\x1F\x88\x90a\x1E\x9FV[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1F\xB7_a\x0E\x9FV[a\x1F\xC1\x82_a\x1A\x12V[\x90a\x1F\xF5a\x1F\xEF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x1A\x03V[\x91a\x1A\x03V[\x91a\x1F\xFEa\x01RV[\x80a \x08\x81a\x05\x9CV[\x03\x90\xA3V",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AppchainBlockExplorerUrlUpdated(string)` and selector `0x02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a7`.
```solidity
event AppchainBlockExplorerUrlUpdated(string newUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AppchainBlockExplorerUrlUpdated {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AppchainBlockExplorerUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AppchainBlockExplorerUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AppchainBlockExplorerUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AppchainBlockExplorerUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AppchainBlockExplorerUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ALLOWED_SETTLEMENT_ADDRESSES(uint256)` and selector `0xf881afaf`.
```solidity
function ALLOWED_SETTLEMENT_ADDRESSES(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ALLOWED_SETTLEMENT_ADDRESSES(uint256)`](ALLOWED_SETTLEMENT_ADDRESSESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ALLOWED_SETTLEMENT_ADDRESSESReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ALLOWED_SETTLEMENT_ADDRESSESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ALLOWED_SETTLEMENT_ADDRESSESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ALLOWED_SETTLEMENT_ADDRESSESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ALLOWED_SETTLEMENT_ADDRESSESCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ALLOWED_SETTLEMENT_ADDRESSESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ALLOWED_SETTLEMENT_ADDRESSES(uint256)";
            const SELECTOR: [u8; 4] = [248u8, 129u8, 175u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `APPCHAIN_BLOCK_EXPLORER_URL()` and selector `0x0743bf6e`.
```solidity
function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLCall {}
    ///Container type for the return parameters of the [`APPCHAIN_BLOCK_EXPLORER_URL()`](APPCHAIN_BLOCK_EXPLORER_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for APPCHAIN_BLOCK_EXPLORER_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = APPCHAIN_BLOCK_EXPLORER_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "APPCHAIN_BLOCK_EXPLORER_URL()";
            const SELECTOR: [u8; 4] = [7u8, 67u8, 191u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `INITIAL_APPCHAIN_OWNER()` and selector `0x18b5ce81`.
```solidity
function INITIAL_APPCHAIN_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_APPCHAIN_OWNERCall {}
    ///Container type for the return parameters of the [`INITIAL_APPCHAIN_OWNER()`](INITIAL_APPCHAIN_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_APPCHAIN_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_APPCHAIN_OWNERCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_APPCHAIN_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_APPCHAIN_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_APPCHAIN_OWNERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_APPCHAIN_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_APPCHAIN_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for INITIAL_APPCHAIN_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = INITIAL_APPCHAIN_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "INITIAL_APPCHAIN_OWNER()";
            const SELECTOR: [u8; 4] = [24u8, 181u8, 206u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CHAIN_ID()` and selector `0xf8a144be`.
```solidity
function SEQUENCING_CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CHAIN_ID()`](SEQUENCING_CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CHAIN_ID()";
            const SELECTOR: [u8; 4] = [248u8, 161u8, 68u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllowedSettlementAddresses()` and selector `0x1bc0afd6`.
```solidity
function getAllowedSettlementAddresses() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllowedSettlementAddressesCall {}
    ///Container type for the return parameters of the [`getAllowedSettlementAddresses()`](getAllowedSettlementAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllowedSettlementAddressesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllowedSettlementAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllowedSettlementAddressesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllowedSettlementAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllowedSettlementAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllowedSettlementAddressesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllowedSettlementAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllowedSettlementAddressesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllowedSettlementAddressesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllowedSettlementAddresses()";
            const SELECTOR: [u8; 4] = [27u8, 192u8, 175u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])` and selector `0x5a2d9c18`.
```solidity
function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address initialAppchainOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl, address[] memory allowedSettlementAddresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub initialAppchainOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub appchainBlockExplorerUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub allowedSettlementAddresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value._owner,
                        value.chainId,
                        value.sequencingChainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.initialAppchainOwner,
                        value.sequencingChainRpcUrl,
                        value.appchainBlockExplorerUrl,
                        value.allowedSettlementAddresses,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        chainId: tuple.1,
                        sequencingChainId: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        initialAppchainOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                        appchainBlockExplorerUrl: tuple.12,
                        allowedSettlementAddresses: tuple.13,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,uint256,address,address,bool,uint256,uint256,address,uint256,address,string,string,address[])";
            const SELECTOR: [u8; 4] = [90u8, 45u8, 156u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initialAppchainOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.appchainBlockExplorerUrl,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.allowedSettlementAddresses,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAppchainBlockExplorerUrl(string)` and selector `0x4b8be3f7`.
```solidity
function updateAppchainBlockExplorerUrl(string memory newUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlCall {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateAppchainBlockExplorerUrl(string)`](updateAppchainBlockExplorerUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlCall) -> Self {
                    (value.newUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAppchainBlockExplorerUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAppchainBlockExplorerUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAppchainBlockExplorerUrl(string)";
            const SELECTOR: [u8; 4] = [75u8, 139u8, 227u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        ALLOWED_SETTLEMENT_ADDRESSES(ALLOWED_SETTLEMENT_ADDRESSESCall),
        #[allow(missing_docs)]
        APPCHAIN_BLOCK_EXPLORER_URL(APPCHAIN_BLOCK_EXPLORER_URLCall),
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        INITIAL_APPCHAIN_OWNER(INITIAL_APPCHAIN_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CHAIN_ID(SEQUENCING_CHAIN_IDCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        getAllowedSettlementAddresses(getAllowedSettlementAddressesCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAppchainBlockExplorerUrl(updateAppchainBlockExplorerUrlCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 67u8, 191u8, 110u8],
            [24u8, 181u8, 206u8, 129u8],
            [27u8, 192u8, 175u8, 214u8],
            [75u8, 139u8, 227u8, 247u8],
            [87u8, 209u8, 186u8, 37u8],
            [90u8, 45u8, 156u8, 24u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
            [248u8, 129u8, 175u8, 175u8],
            [248u8, 161u8, 68u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(_) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(_) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::INITIAL_APPCHAIN_OWNER(_) => {
                    <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CHAIN_ID(_) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllowedSettlementAddresses(_) => {
                    <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAppchainBlockExplorerUrl(_) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn APPCHAIN_BLOCK_EXPLORER_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::APPCHAIN_BLOCK_EXPLORER_URL)
                    }
                    APPCHAIN_BLOCK_EXPLORER_URL
                },
                {
                    fn INITIAL_APPCHAIN_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::INITIAL_APPCHAIN_OWNER)
                    }
                    INITIAL_APPCHAIN_OWNER
                },
                {
                    fn getAllowedSettlementAddresses(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::getAllowedSettlementAddresses)
                    }
                    getAllowedSettlementAddresses
                },
                {
                    fn updateAppchainBlockExplorerUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateAppchainBlockExplorerUrl)
                    }
                    updateAppchainBlockExplorerUrl
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn ALLOWED_SETTLEMENT_ADDRESSES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ALLOWED_SETTLEMENT_ADDRESSES)
                    }
                    ALLOWED_SETTLEMENT_ADDRESSES
                },
                {
                    fn SEQUENCING_CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CHAIN_ID)
                    }
                    SEQUENCING_CHAIN_ID
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::INITIAL_APPCHAIN_OWNER(inner) => {
                    <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllowedSettlementAddresses(inner) => {
                    <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ALLOWED_SETTLEMENT_ADDRESSES(inner) => {
                    <ALLOWED_SETTLEMENT_ADDRESSESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::INITIAL_APPCHAIN_OWNER(inner) => {
                    <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllowedSettlementAddresses(inner) => {
                    <getAllowedSettlementAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        AppchainBlockExplorerUrlUpdated(AppchainBlockExplorerUrlUpdated),
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AppchainBlockExplorerUrlUpdated)
                }
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ALLOWED_SETTLEMENT_ADDRESSES`] function.
        pub fn ALLOWED_SETTLEMENT_ADDRESSES(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ALLOWED_SETTLEMENT_ADDRESSESCall, N> {
            self.call_builder(
                &ALLOWED_SETTLEMENT_ADDRESSESCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`APPCHAIN_BLOCK_EXPLORER_URL`] function.
        pub fn APPCHAIN_BLOCK_EXPLORER_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, APPCHAIN_BLOCK_EXPLORER_URLCall, N> {
            self.call_builder(&APPCHAIN_BLOCK_EXPLORER_URLCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`INITIAL_APPCHAIN_OWNER`] function.
        pub fn INITIAL_APPCHAIN_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, INITIAL_APPCHAIN_OWNERCall, N> {
            self.call_builder(&INITIAL_APPCHAIN_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CHAIN_ID`] function.
        pub fn SEQUENCING_CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CHAIN_IDCall, N> {
            self.call_builder(&SEQUENCING_CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`getAllowedSettlementAddresses`] function.
        pub fn getAllowedSettlementAddresses(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getAllowedSettlementAddressesCall,
            N,
        > {
            self.call_builder(
                &getAllowedSettlementAddressesCall {
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _owner: alloy::sol_types::private::Address,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            initialAppchainOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
            appchainBlockExplorerUrl: alloy::sol_types::private::String,
            allowedSettlementAddresses: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _owner,
                    chainId,
                    sequencingChainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    initialAppchainOwner,
                    sequencingChainRpcUrl,
                    appchainBlockExplorerUrl,
                    allowedSettlementAddresses,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAppchainBlockExplorerUrl`] function.
        pub fn updateAppchainBlockExplorerUrl(
            &self,
            newUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateAppchainBlockExplorerUrlCall,
            N,
        > {
            self.call_builder(
                &updateAppchainBlockExplorerUrlCall {
                    newUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AppchainBlockExplorerUrlUpdated`] event.
        pub fn AppchainBlockExplorerUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AppchainBlockExplorerUrlUpdated, N> {
            self.event_filter::<AppchainBlockExplorerUrlUpdated>()
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
