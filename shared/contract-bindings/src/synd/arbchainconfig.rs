/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();

    event AppchainBlockExplorerUrlUpdated(string newUrl);
    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor();

    function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function INITIAL_APPCHAIN_OWNER() external view returns (address);
    function SEQUENCING_CHAIN_ID() external view returns (uint256);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address initialAppchainOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl) external;
    function owner() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateAppchainBlockExplorerUrl(string memory newUrl) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "APPCHAIN_BLOCK_EXPLORER_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "INITIAL_APPCHAIN_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initialAppchainOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "appchainBlockExplorerUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAppchainBlockExplorerUrl",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AppchainBlockExplorerUrlUpdated",
    "inputs": [
      {
        "name": "newUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611a9661020f8239611a9690f35b610032565b60405190565b5f80fd5b61003e610132565b565b60401c90565b60ff1690565b61005861005d91610040565b610046565b90565b61006a905461004c565b90565b5f0190565b5f1c90565b60018060401b031690565b61008e61009391610072565b610077565b90565b6100a09054610082565b90565b60018060401b031690565b5f1b90565b906100c460018060401b03916100ae565b9181191691161790565b90565b6100e56100e06100ea926100a3565b6100ce565b6100a3565b90565b90565b9061010561010061010c926100d1565b6100ed565b82546100b3565b9055565b610119906100a3565b9052565b9190610130905f60208501940190610110565b565b61013a6101ea565b6101455f8201610060565b6101ce576101545f8201610096565b61016c61016660018060401b036100a3565b916100a3565b03610175575b50565b610188905f60018060401b0391016100f0565b60018060401b036101c57fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916101bc61002c565b9182918261011d565b0390a15f610172565b5f63f92ee8a960e01b8152806101e66004820161006d565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60806040526004361015610013575b610a60565b61001d5f3561011c565b80630743bf6e1461011757806318b5ce81146101125780634b8be3f71461010d57806357d1ba251461010857806362c73caa1461010357806366a1d108146100fe5780636edd6c09146100f957806385e1f4d0146100f45780638da5cb5b146100ef578063a3c6e1e7146100ea578063aa6a43d8146100e5578063bf6db6f8146100e0578063bf79fd1c146100db578063d1f4737c146100d6578063f2fde38b146100d15763f8a144be0361000e57610a2b565b6109e9565b610996565b610944565b61073d565b6106f9565b6106b5565b610671565b61062e565b6105ea565b6105a6565b610563565b61052e565b61049d565b6103de565b61032c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261013a57565b61012c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610186575b602083101461018157565b610152565b91607f1691610176565b60209181520190565b5f5260205f2090565b905f92918054906101bc6101b583610166565b8094610190565b916001811690815f1461021357506001146101d7575b505050565b6101e49192939450610199565b915f925b8184106101fb57505001905f80806101d2565b600181602092959395548486015201910192906101e8565b92949550505060ff19168252151560200201905f80806101d2565b90610238916101a2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102639061023b565b810190811067ffffffffffffffff82111761027d57604052565b610245565b906102a261029b92610292610122565b9384809261022e565b0383610259565b565b905f106102b7576102b490610282565b90565b61013f565b6102c8600b5f906102a4565b90565b5190565b60209181520190565b90825f9392825e0152565b61030261030b602093610310936102f9816102cb565b938480936102cf565b958691016102d8565b61023b565b0190565b6103299160208201915f8184039101526102e3565b90565b3461035c5761033c366004610130565b6103586103476102bc565b61034f610122565b91829182610314565b0390f35b610128565b1c90565b60018060a01b031690565b6103809060086103859302610361565b610365565b90565b906103939154610370565b90565b6103a260015f90610388565b90565b60018060a01b031690565b6103b9906103a5565b90565b6103c5906103b0565b9052565b91906103dc905f602085019401906103bc565b565b3461040e576103ee366004610130565b61040a6103f9610396565b610401610122565b918291826103c9565b0390f35b610128565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561045d5781359167ffffffffffffffff831161045857602001926001830284011161045357565b61041f565b61041b565b610417565b90602082820312610493575f82013567ffffffffffffffff811161048e5761048a9201610423565b9091565b610413565b61012c565b5f0190565b346104cc576104b66104b0366004610462565b90610dce565b6104be610122565b806104c881610498565b0390f35b610128565b90565b6104e49060086104e99302610361565b6104d1565b90565b906104f791546104d4565b90565b61050660075f906104ec565b90565b90565b61051590610509565b9052565b919061052c905f6020850194019061050c565b565b3461055e5761053e366004610130565b61055a6105496104fa565b610551610122565b91829182610519565b0390f35b610128565b346105925761057c610576366004610462565b90610e53565b610584610122565b8061058e81610498565b0390f35b610128565b6105a3600a5f906102a4565b90565b346105d6576105b6366004610130565b6105d26105c1610597565b6105c9610122565b91829182610314565b0390f35b610128565b6105e760025f90610388565b90565b3461061a576105fa366004610130565b6106166106056105db565b61060d610122565b918291826103c9565b0390f35b610128565b61062b60055f906104ec565b90565b3461065e5761063e366004610130565b61065a61064961061f565b610651610122565b91829182610519565b0390f35b610128565b61066e5f5f90610388565b90565b346106a157610681366004610130565b61069d61068c610663565b610694610122565b918291826103c9565b0390f35b610128565b6106b260095f906104ec565b90565b346106e5576106c5366004610130565b6106e16106d06106a6565b6106d8610122565b91829182610519565b0390f35b610128565b6106f660035f90610388565b90565b3461072957610709366004610130565b6107256107146106ea565b61071c610122565b918291826103c9565b0390f35b610128565b61073a60045f90610388565b90565b3461076d5761074d366004610130565b61076961075861072e565b610760610122565b918291826103c9565b0390f35b610128565b61077b816103b0565b0361078257565b5f80fd5b9050359061079382610772565b565b61079e81610509565b036107a557565b5f80fd5b905035906107b682610795565b565b5f80fd5b906107cf6107c8610122565b9283610259565b565b67ffffffffffffffff81116107ef576107eb60209161023b565b0190565b610245565b90825f939282370152565b9092919261081461080f826107d1565b6107bc565b938185526020850190828401116108305761082e926107f4565b565b6107b8565b9080601f8301121561085357816020610850933591016107ff565b90565b610417565b916101808383031261093f57610870825f8501610786565b9261087e83602083016107a9565b9261088c81604084016107a9565b9261089a8260608501610786565b926108a88360808301610786565b926108b68160a084016107a9565b926108c48260c085016107a9565b926108d28360e08301610786565b926108e18161010084016107a9565b926108f0826101208501610786565b9261014081013567ffffffffffffffff811161093a5783610912918301610835565b9261016082013567ffffffffffffffff8111610935576109329201610835565b90565b610413565b610413565b61012c565b346109825761096c610957366004610858565b9a9990999891989792979693969594956118ed565b610974610122565b8061097e81610498565b0390f35b610128565b61099360085f906104ec565b90565b346109c6576109a6366004610130565b6109c26109b1610987565b6109b9610122565b91829182610519565b0390f35b610128565b906020828203126109e4576109e1915f01610786565b90565b61012c565b34610a1757610a016109fc3660046109cb565b6119e3565b610a09610122565b80610a1381610498565b0390f35b610128565b610a2860065f906104ec565b90565b34610a5b57610a3b366004610130565b610a57610a46610a1c565b610a4e610122565b91829182610519565b0390f35b610128565b5f80fd5b5f1c90565b610a75610a7a91610a64565b610365565b90565b610a879054610a69565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610abe60176020926102cf565b610ac781610a8a565b0190565b610ae09060208101905f818303910152610ab1565b90565b15610aea57565b610af2610122565b62461bcd60e51b815280610b0860048201610acb565b0390fd5b90610b3a91610b3533610b2f610b29610b245f610a7d565b6103b0565b916103b0565b14610ae3565b610d85565b565b5090565b601f602091010490565b1b90565b91906008610b69910291610b635f1984610b4a565b92610b4a565b9181191691161790565b90565b610b8a610b85610b8f92610509565b610b73565b610509565b90565b90565b9190610bab610ba6610bb393610b76565b610b92565b908354610b4e565b9055565b5f90565b610bcd91610bc7610bb7565b91610b95565b565b5b818110610bdb575050565b80610be85f600193610bbb565b01610bd0565b9190601f8111610bfe575b505050565b610c0a610c2f93610199565b906020610c1684610b40565b83019310610c37575b610c2890610b40565b0190610bcf565b5f8080610bf9565b9150610c2881929050610c1f565b90610c55905f1990600802610361565b191690565b81610c6491610c45565b906002021790565b91610c779082610b3c565b9067ffffffffffffffff8211610d3657610c9b82610c958554610166565b85610bee565b5f90601f8311600114610cce57918091610cbd935f92610cc2575b5050610c5a565b90555b565b90915001355f80610cb6565b601f19831691610cdd85610199565b925f5b818110610d1e57509160029391856001969410610d04575b50505002019055610cc0565b610d14910135601f841690610c45565b90555f8080610cf8565b91936020600181928787013581550195019201610ce0565b610245565b90610d469291610c6c565b565b9190610d6281610d5b81610d67956102cf565b80956107f4565b61023b565b0190565b9091610d829260208301925f818503910152610d48565b90565b610d92818390600b610d3b565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a791610dc9610dc0610122565b92839283610d6b565b0390a1565b90610dd891610b0c565b565b90610e0891610e0333610dfd610df7610df25f610a7d565b6103b0565b916103b0565b14610ae3565b610e0a565b565b610e17818390600a610d3b565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291610e4e610e45610122565b92839283610d6b565b0390a1565b90610e5d91610dda565b565b60401c90565b60ff1690565b610e77610e7c91610e5f565b610e65565b90565b610e899054610e6b565b90565b151590565b67ffffffffffffffff1690565b610eaa610eaf91610a64565b610e91565b90565b610ebc9054610e9e565b90565b67ffffffffffffffff1690565b90565b610ee3610ede610ee892610ecc565b610b73565b610ebf565b90565b90565b610f02610efd610f0792610eeb565b610b73565b610ebf565b90565b610f1e610f19610f23926103a5565b610b73565b6103a5565b90565b610f2f90610f0a565b90565b610f3b90610f26565b90565b610f52610f4d610f5792610ecc565b610b73565b610509565b90565b5f1b90565b90610f7267ffffffffffffffff91610f5a565b9181191691161790565b610f90610f8b610f9592610ebf565b610b73565b610ebf565b90565b90565b90610fb0610fab610fb792610f7c565b610f98565b8254610f5f565b9055565b60401b90565b90610fd568ff000000000000000091610fbb565b9181191691161790565b610fe890610e8c565b90565b90565b90611003610ffe61100a92610fdf565b610feb565b8254610fc1565b9055565b61101790610eee565b9052565b919061102e905f6020850194019061100e565b565b9895929a9794919a99969390996110456119ee565b9b8c5f0161105290610e7f565b1561105c90610e8c565b9b8d5f0161106990610eb2565b805f61107490610ecf565b9061107e90610ebf565b148061119c575b906110996110936001610eee565b91610ebf565b1480611174575b6110ab909115610e8c565b9081611163575b50611147576110dd9b8e8e6110d26110ca6001610eee565b5f8401610f9b565b611133575b50611772565b6110e5575b50565b6110f2905f809101610fee565b600161112a7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611121610122565b9182918261101b565b0390a15f6110e2565b611141905f60019101610fee565b8e6110d7565b5f63f92ee8a960e01b81528061115f60048201610498565b0390fd5b61116e915015610e8c565b5f6110b2565b506110ab61118130610f32565b3b61119461118e5f610f3e565b91610509565b1490506110a0565b508d611085565b6111b76111b26111bc92610ecc565b610b73565b6103a5565b90565b6111c8906111a3565b90565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b6111ff601c6020926102cf565b611208816111cb565b0190565b6112219060208101905f8183039101526111f2565b90565b1561122b57565b611233610122565b62461bcd60e51b8152806112496004820161120c565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61128160176020926102cf565b61128a8161124d565b0190565b6112a39060208101905f818303910152611274565b90565b156112ad57565b6112b5610122565b62461bcd60e51b8152806112cb6004820161128e565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b61132960226040926102cf565b611332816112cf565b0190565b61134b9060208101905f81830391015261131c565b90565b1561135557565b61135d610122565b62461bcd60e51b81528061137360048201611336565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6113d160266040926102cf565b6113da81611377565b0190565b6113f39060208101905f8183039101526113c4565b90565b156113fd57565b611405610122565b62461bcd60e51b81528061141b600482016113de565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61147960256040926102cf565b6114828161141f565b0190565b61149b9060208101905f81830391015261146c565b90565b156114a557565b6114ad610122565b62461bcd60e51b8152806114c360048201611486565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b611521602a6040926102cf565b61152a816114c7565b0190565b6115439060208101905f818303910152611514565b90565b1561154d57565b611555610122565b62461bcd60e51b81528061156b6004820161152e565b0390fd5b60207f207a65726f206164647265737300000000000000000000000000000000000000917f496e697469616c20617070636861696e206f776e65722063616e6e6f742062655f8201520152565b6115c9602d6040926102cf565b6115d28161156f565b0190565b6115eb9060208101905f8183039101526115bc565b90565b156115f557565b6115fd610122565b62461bcd60e51b815280611613600482016115d6565b0390fd5b906116235f1991610f5a565b9181191691161790565b9061164261163d61164992610b76565b610b92565b8254611617565b9055565b9061165e60018060a01b0391610f5a565b9181191691161790565b61167190610f26565b90565b90565b9061168c61168761169392611668565b611674565b825461164d565b9055565b906116a1816102cb565b9067ffffffffffffffff8211611761576116c5826116bf8554610166565b85610bee565b602090601f83116001146116f9579180916116e8935f926116ed575b5050610c5a565b90555b565b90915001515f806116e1565b601f1983169161170885610199565b925f5b8181106117495750916002939185600196941061172f575b505050020190556116eb565b61173f910151601f841690610c45565b90555f8080611723565b9193602060018192878701518155019501920161170b565b610245565b9061177091611697565b565b9995966118c36118df986118bc6118d8986118eb9f9c968f996118e69f9a6118d19a6118a76118b5946118a08f9c6118996118ca9e6118788f6117d36118ae9a6117cc6117c66117c15f6111bf565b6103b0565b916103b0565b1415611224565b6117f0856117e96117e35f610f3e565b91610509565b14156112a6565b61180d876118066118005f610f3e565b91610509565b141561134e565b6118328961182b6118256118205f6111bf565b6103b0565b916103b0565b14156113f6565b6118578b61185061184a6118455f6111bf565b6103b0565b916103b0565b141561149e565b61187161186b6118665f6111bf565b6103b0565b916103b0565b1415611546565b61189261188c6118875f6111bf565b6103b0565b916103b0565b14156115ee565b600561162d565b600661162d565b6002611677565b6003611677565b600761162d565b600861162d565b6004611677565b600961162d565b6001611677565b600a611766565b600b611766565b611a12565b565b906119019b9a999897969594939291611030565b565b6119309061192b3361192561191f61191a5f610a7d565b6103b0565b916103b0565b14610ae3565b6119b3565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b611965602080926102cf565b61196e81611932565b0190565b6119879060208101905f818303910152611959565b90565b1561199157565b611999610122565b62461bcd60e51b8152806119af60048201611972565b0390fd5b6119e1906119dc816119d56119cf6119ca5f6111bf565b6103b0565b916103b0565b141561198a565b611a12565b565b6119ec90611903565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a3781611a30611a2a611a255f6111bf565b6103b0565b916103b0565b141561198a565b611a405f610a7d565b611a4a825f611677565b90611a7e611a787f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611668565b91611668565b91611a87610122565b80611a9181610498565b0390a356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x1A\x96a\x02\x0F\x829a\x1A\x96\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x012V[V[`@\x1C\x90V[`\xFF\x16\x90V[a\0Xa\0]\x91a\0@V[a\0FV[\x90V[a\0j\x90Ta\0LV[\x90V[_\x01\x90V[_\x1C\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\0\x8Ea\0\x93\x91a\0rV[a\0wV[\x90V[a\0\xA0\x90Ta\0\x82V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[_\x1B\x90V[\x90a\0\xC4`\x01\x80`@\x1B\x03\x91a\0\xAEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xA3V[a\0\xCEV[a\0\xA3V[\x90V[\x90V[\x90a\x01\x05a\x01\0a\x01\x0C\x92a\0\xD1V[a\0\xEDV[\x82Ta\0\xB3V[\x90UV[a\x01\x19\x90a\0\xA3V[\x90RV[\x91\x90a\x010\x90_` \x85\x01\x94\x01\x90a\x01\x10V[V[a\x01:a\x01\xEAV[a\x01E_\x82\x01a\0`V[a\x01\xCEWa\x01T_\x82\x01a\0\x96V[a\x01la\x01f`\x01\x80`@\x1B\x03a\0\xA3V[\x91a\0\xA3V[\x03a\x01uW[PV[a\x01\x88\x90_`\x01\x80`@\x1B\x03\x91\x01a\0\xF0V[`\x01\x80`@\x1B\x03a\x01\xC5\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x01\xBCa\0,V[\x91\x82\x91\x82a\x01\x1DV[\x03\x90\xA1_a\x01rV[_c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x01\xE6`\x04\x82\x01a\0mV[\x03\x90\xFD[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n`V[a\0\x1D_5a\x01\x1CV[\x80c\x07C\xBFn\x14a\x01\x17W\x80c\x18\xB5\xCE\x81\x14a\x01\x12W\x80cK\x8B\xE3\xF7\x14a\x01\rW\x80cW\xD1\xBA%\x14a\x01\x08W\x80cb\xC7<\xAA\x14a\x01\x03W\x80cf\xA1\xD1\x08\x14a\0\xFEW\x80cn\xDDl\t\x14a\0\xF9W\x80c\x85\xE1\xF4\xD0\x14a\0\xF4W\x80c\x8D\xA5\xCB[\x14a\0\xEFW\x80c\xA3\xC6\xE1\xE7\x14a\0\xEAW\x80c\xAAjC\xD8\x14a\0\xE5W\x80c\xBFm\xB6\xF8\x14a\0\xE0W\x80c\xBFy\xFD\x1C\x14a\0\xDBW\x80c\xD1\xF4s|\x14a\0\xD6W\x80c\xF2\xFD\xE3\x8B\x14a\0\xD1Wc\xF8\xA1D\xBE\x03a\0\x0EWa\n+V[a\t\xE9V[a\t\x96V[a\tDV[a\x07=V[a\x06\xF9V[a\x06\xB5V[a\x06qV[a\x06.V[a\x05\xEAV[a\x05\xA6V[a\x05cV[a\x05.V[a\x04\x9DV[a\x03\xDEV[a\x03,V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01:WV[a\x01,V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\x86W[` \x83\x10\x14a\x01\x81WV[a\x01RV[\x91`\x7F\x16\x91a\x01vV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xBCa\x01\xB5\x83a\x01fV[\x80\x94a\x01\x90V[\x91`\x01\x81\x16\x90\x81_\x14a\x02\x13WP`\x01\x14a\x01\xD7W[PPPV[a\x01\xE4\x91\x92\x93\x94Pa\x01\x99V[\x91_\x92[\x81\x84\x10a\x01\xFBWPP\x01\x90_\x80\x80a\x01\xD2V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x01\xE8V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x01\xD2V[\x90a\x028\x91a\x01\xA2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02c\x90a\x02;V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02}W`@RV[a\x02EV[\x90a\x02\xA2a\x02\x9B\x92a\x02\x92a\x01\"V[\x93\x84\x80\x92a\x02.V[\x03\x83a\x02YV[V[\x90_\x10a\x02\xB7Wa\x02\xB4\x90a\x02\x82V[\x90V[a\x01?V[a\x02\xC8`\x0B_\x90a\x02\xA4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x03\x02a\x03\x0B` \x93a\x03\x10\x93a\x02\xF9\x81a\x02\xCBV[\x93\x84\x80\x93a\x02\xCFV[\x95\x86\x91\x01a\x02\xD8V[a\x02;V[\x01\x90V[a\x03)\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xE3V[\x90V[4a\x03\\Wa\x03<6`\x04a\x010V[a\x03Xa\x03Ga\x02\xBCV[a\x03Oa\x01\"V[\x91\x82\x91\x82a\x03\x14V[\x03\x90\xF3[a\x01(V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x80\x90`\x08a\x03\x85\x93\x02a\x03aV[a\x03eV[\x90V[\x90a\x03\x93\x91Ta\x03pV[\x90V[a\x03\xA2`\x01_\x90a\x03\x88V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xB9\x90a\x03\xA5V[\x90V[a\x03\xC5\x90a\x03\xB0V[\x90RV[\x91\x90a\x03\xDC\x90_` \x85\x01\x94\x01\x90a\x03\xBCV[V[4a\x04\x0EWa\x03\xEE6`\x04a\x010V[a\x04\na\x03\xF9a\x03\x96V[a\x04\x01a\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04]W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04XW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04SWV[a\x04\x1FV[a\x04\x1BV[a\x04\x17V[\x90` \x82\x82\x03\x12a\x04\x93W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x8EWa\x04\x8A\x92\x01a\x04#V[\x90\x91V[a\x04\x13V[a\x01,V[_\x01\x90V[4a\x04\xCCWa\x04\xB6a\x04\xB06`\x04a\x04bV[\x90a\r\xCEV[a\x04\xBEa\x01\"V[\x80a\x04\xC8\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[\x90V[a\x04\xE4\x90`\x08a\x04\xE9\x93\x02a\x03aV[a\x04\xD1V[\x90V[\x90a\x04\xF7\x91Ta\x04\xD4V[\x90V[a\x05\x06`\x07_\x90a\x04\xECV[\x90V[\x90V[a\x05\x15\x90a\x05\tV[\x90RV[\x91\x90a\x05,\x90_` \x85\x01\x94\x01\x90a\x05\x0CV[V[4a\x05^Wa\x05>6`\x04a\x010V[a\x05Za\x05Ia\x04\xFAV[a\x05Qa\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[4a\x05\x92Wa\x05|a\x05v6`\x04a\x04bV[\x90a\x0ESV[a\x05\x84a\x01\"V[\x80a\x05\x8E\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[a\x05\xA3`\n_\x90a\x02\xA4V[\x90V[4a\x05\xD6Wa\x05\xB66`\x04a\x010V[a\x05\xD2a\x05\xC1a\x05\x97V[a\x05\xC9a\x01\"V[\x91\x82\x91\x82a\x03\x14V[\x03\x90\xF3[a\x01(V[a\x05\xE7`\x02_\x90a\x03\x88V[\x90V[4a\x06\x1AWa\x05\xFA6`\x04a\x010V[a\x06\x16a\x06\x05a\x05\xDBV[a\x06\ra\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x06+`\x05_\x90a\x04\xECV[\x90V[4a\x06^Wa\x06>6`\x04a\x010V[a\x06Za\x06Ia\x06\x1FV[a\x06Qa\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[a\x06n__\x90a\x03\x88V[\x90V[4a\x06\xA1Wa\x06\x816`\x04a\x010V[a\x06\x9Da\x06\x8Ca\x06cV[a\x06\x94a\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x06\xB2`\t_\x90a\x04\xECV[\x90V[4a\x06\xE5Wa\x06\xC56`\x04a\x010V[a\x06\xE1a\x06\xD0a\x06\xA6V[a\x06\xD8a\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[a\x06\xF6`\x03_\x90a\x03\x88V[\x90V[4a\x07)Wa\x07\t6`\x04a\x010V[a\x07%a\x07\x14a\x06\xEAV[a\x07\x1Ca\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x07:`\x04_\x90a\x03\x88V[\x90V[4a\x07mWa\x07M6`\x04a\x010V[a\x07ia\x07Xa\x07.V[a\x07`a\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x07{\x81a\x03\xB0V[\x03a\x07\x82WV[_\x80\xFD[\x90P5\x90a\x07\x93\x82a\x07rV[V[a\x07\x9E\x81a\x05\tV[\x03a\x07\xA5WV[_\x80\xFD[\x90P5\x90a\x07\xB6\x82a\x07\x95V[V[_\x80\xFD[\x90a\x07\xCFa\x07\xC8a\x01\"V[\x92\x83a\x02YV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xEFWa\x07\xEB` \x91a\x02;V[\x01\x90V[a\x02EV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x08\x14a\x08\x0F\x82a\x07\xD1V[a\x07\xBCV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x080Wa\x08.\x92a\x07\xF4V[V[a\x07\xB8V[\x90\x80`\x1F\x83\x01\x12\x15a\x08SW\x81` a\x08P\x935\x91\x01a\x07\xFFV[\x90V[a\x04\x17V[\x91a\x01\x80\x83\x83\x03\x12a\t?Wa\x08p\x82_\x85\x01a\x07\x86V[\x92a\x08~\x83` \x83\x01a\x07\xA9V[\x92a\x08\x8C\x81`@\x84\x01a\x07\xA9V[\x92a\x08\x9A\x82``\x85\x01a\x07\x86V[\x92a\x08\xA8\x83`\x80\x83\x01a\x07\x86V[\x92a\x08\xB6\x81`\xA0\x84\x01a\x07\xA9V[\x92a\x08\xC4\x82`\xC0\x85\x01a\x07\xA9V[\x92a\x08\xD2\x83`\xE0\x83\x01a\x07\x86V[\x92a\x08\xE1\x81a\x01\0\x84\x01a\x07\xA9V[\x92a\x08\xF0\x82a\x01 \x85\x01a\x07\x86V[\x92a\x01@\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t:W\x83a\t\x12\x91\x83\x01a\x085V[\x92a\x01`\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t5Wa\t2\x92\x01a\x085V[\x90V[a\x04\x13V[a\x04\x13V[a\x01,V[4a\t\x82Wa\tla\tW6`\x04a\x08XV[\x9A\x99\x90\x99\x98\x91\x98\x97\x92\x97\x96\x93\x96\x95\x94\x95a\x18\xEDV[a\tta\x01\"V[\x80a\t~\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[a\t\x93`\x08_\x90a\x04\xECV[\x90V[4a\t\xC6Wa\t\xA66`\x04a\x010V[a\t\xC2a\t\xB1a\t\x87V[a\t\xB9a\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\t\xE4Wa\t\xE1\x91_\x01a\x07\x86V[\x90V[a\x01,V[4a\n\x17Wa\n\x01a\t\xFC6`\x04a\t\xCBV[a\x19\xE3V[a\n\ta\x01\"V[\x80a\n\x13\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[a\n(`\x06_\x90a\x04\xECV[\x90V[4a\n[Wa\n;6`\x04a\x010V[a\nWa\nFa\n\x1CV[a\nNa\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x1C\x90V[a\nua\nz\x91a\ndV[a\x03eV[\x90V[a\n\x87\x90Ta\niV[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\n\xBE`\x17` \x92a\x02\xCFV[a\n\xC7\x81a\n\x8AV[\x01\x90V[a\n\xE0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\n\xB1V[\x90V[\x15a\n\xEAWV[a\n\xF2a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0B\x08`\x04\x82\x01a\n\xCBV[\x03\x90\xFD[\x90a\x0B:\x91a\x0B53a\x0B/a\x0B)a\x0B$_a\n}V[a\x03\xB0V[\x91a\x03\xB0V[\x14a\n\xE3V[a\r\x85V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0Bi\x91\x02\x91a\x0Bc_\x19\x84a\x0BJV[\x92a\x0BJV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x0B\x8Aa\x0B\x85a\x0B\x8F\x92a\x05\tV[a\x0BsV[a\x05\tV[\x90V[\x90V[\x91\x90a\x0B\xABa\x0B\xA6a\x0B\xB3\x93a\x0BvV[a\x0B\x92V[\x90\x83Ta\x0BNV[\x90UV[_\x90V[a\x0B\xCD\x91a\x0B\xC7a\x0B\xB7V[\x91a\x0B\x95V[V[[\x81\x81\x10a\x0B\xDBWPPV[\x80a\x0B\xE8_`\x01\x93a\x0B\xBBV[\x01a\x0B\xD0V[\x91\x90`\x1F\x81\x11a\x0B\xFEW[PPPV[a\x0C\na\x0C/\x93a\x01\x99V[\x90` a\x0C\x16\x84a\x0B@V[\x83\x01\x93\x10a\x0C7W[a\x0C(\x90a\x0B@V[\x01\x90a\x0B\xCFV[_\x80\x80a\x0B\xF9V[\x91Pa\x0C(\x81\x92\x90Pa\x0C\x1FV[\x90a\x0CU\x90_\x19\x90`\x08\x02a\x03aV[\x19\x16\x90V[\x81a\x0Cd\x91a\x0CEV[\x90`\x02\x02\x17\x90V[\x91a\x0Cw\x90\x82a\x0B<V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r6Wa\x0C\x9B\x82a\x0C\x95\x85Ta\x01fV[\x85a\x0B\xEEV[_\x90`\x1F\x83\x11`\x01\x14a\x0C\xCEW\x91\x80\x91a\x0C\xBD\x93_\x92a\x0C\xC2W[PPa\x0CZV[\x90U[V[\x90\x91P\x015_\x80a\x0C\xB6V[`\x1F\x19\x83\x16\x91a\x0C\xDD\x85a\x01\x99V[\x92_[\x81\x81\x10a\r\x1EWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\r\x04W[PPP\x02\x01\x90Ua\x0C\xC0V[a\r\x14\x91\x015`\x1F\x84\x16\x90a\x0CEV[\x90U_\x80\x80a\x0C\xF8V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0C\xE0V[a\x02EV[\x90a\rF\x92\x91a\x0ClV[V[\x91\x90a\rb\x81a\r[\x81a\rg\x95a\x02\xCFV[\x80\x95a\x07\xF4V[a\x02;V[\x01\x90V[\x90\x91a\r\x82\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\rHV[\x90V[a\r\x92\x81\x83\x90`\x0Ba\r;V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\r\xC9a\r\xC0a\x01\"V[\x92\x83\x92\x83a\rkV[\x03\x90\xA1V[\x90a\r\xD8\x91a\x0B\x0CV[V[\x90a\x0E\x08\x91a\x0E\x033a\r\xFDa\r\xF7a\r\xF2_a\n}V[a\x03\xB0V[\x91a\x03\xB0V[\x14a\n\xE3V[a\x0E\nV[V[a\x0E\x17\x81\x83\x90`\na\r;V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x0ENa\x0EEa\x01\"V[\x92\x83\x92\x83a\rkV[\x03\x90\xA1V[\x90a\x0E]\x91a\r\xDAV[V[`@\x1C\x90V[`\xFF\x16\x90V[a\x0Ewa\x0E|\x91a\x0E_V[a\x0EeV[\x90V[a\x0E\x89\x90Ta\x0EkV[\x90V[\x15\x15\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0E\xAAa\x0E\xAF\x91a\ndV[a\x0E\x91V[\x90V[a\x0E\xBC\x90Ta\x0E\x9EV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90V[a\x0E\xE3a\x0E\xDEa\x0E\xE8\x92a\x0E\xCCV[a\x0BsV[a\x0E\xBFV[\x90V[\x90V[a\x0F\x02a\x0E\xFDa\x0F\x07\x92a\x0E\xEBV[a\x0BsV[a\x0E\xBFV[\x90V[a\x0F\x1Ea\x0F\x19a\x0F#\x92a\x03\xA5V[a\x0BsV[a\x03\xA5V[\x90V[a\x0F/\x90a\x0F\nV[\x90V[a\x0F;\x90a\x0F&V[\x90V[a\x0FRa\x0FMa\x0FW\x92a\x0E\xCCV[a\x0BsV[a\x05\tV[\x90V[_\x1B\x90V[\x90a\x0Frg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0FZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\x90a\x0F\x8Ba\x0F\x95\x92a\x0E\xBFV[a\x0BsV[a\x0E\xBFV[\x90V[\x90V[\x90a\x0F\xB0a\x0F\xABa\x0F\xB7\x92a\x0F|V[a\x0F\x98V[\x82Ta\x0F_V[\x90UV[`@\x1B\x90V[\x90a\x0F\xD5h\xFF\0\0\0\0\0\0\0\0\x91a\x0F\xBBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xE8\x90a\x0E\x8CV[\x90V[\x90V[\x90a\x10\x03a\x0F\xFEa\x10\n\x92a\x0F\xDFV[a\x0F\xEBV[\x82Ta\x0F\xC1V[\x90UV[a\x10\x17\x90a\x0E\xEEV[\x90RV[\x91\x90a\x10.\x90_` \x85\x01\x94\x01\x90a\x10\x0EV[V[\x98\x95\x92\x9A\x97\x94\x91\x9A\x99\x96\x93\x90\x99a\x10Ea\x19\xEEV[\x9B\x8C_\x01a\x10R\x90a\x0E\x7FV[\x15a\x10\\\x90a\x0E\x8CV[\x9B\x8D_\x01a\x10i\x90a\x0E\xB2V[\x80_a\x10t\x90a\x0E\xCFV[\x90a\x10~\x90a\x0E\xBFV[\x14\x80a\x11\x9CW[\x90a\x10\x99a\x10\x93`\x01a\x0E\xEEV[\x91a\x0E\xBFV[\x14\x80a\x11tW[a\x10\xAB\x90\x91\x15a\x0E\x8CV[\x90\x81a\x11cW[Pa\x11GWa\x10\xDD\x9B\x8E\x8Ea\x10\xD2a\x10\xCA`\x01a\x0E\xEEV[_\x84\x01a\x0F\x9BV[a\x113W[Pa\x17rV[a\x10\xE5W[PV[a\x10\xF2\x90_\x80\x91\x01a\x0F\xEEV[`\x01a\x11*\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x11!a\x01\"V[\x91\x82\x91\x82a\x10\x1BV[\x03\x90\xA1_a\x10\xE2V[a\x11A\x90_`\x01\x91\x01a\x0F\xEEV[\x8Ea\x10\xD7V[_c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x11_`\x04\x82\x01a\x04\x98V[\x03\x90\xFD[a\x11n\x91P\x15a\x0E\x8CV[_a\x10\xB2V[Pa\x10\xABa\x11\x810a\x0F2V[;a\x11\x94a\x11\x8E_a\x0F>V[\x91a\x05\tV[\x14\x90Pa\x10\xA0V[P\x8Da\x10\x85V[a\x11\xB7a\x11\xB2a\x11\xBC\x92a\x0E\xCCV[a\x0BsV[a\x03\xA5V[\x90V[a\x11\xC8\x90a\x11\xA3V[\x90V[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x11\xFF`\x1C` \x92a\x02\xCFV[a\x12\x08\x81a\x11\xCBV[\x01\x90V[a\x12!\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xF2V[\x90V[\x15a\x12+WV[a\x123a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12I`\x04\x82\x01a\x12\x0CV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12\x81`\x17` \x92a\x02\xCFV[a\x12\x8A\x81a\x12MV[\x01\x90V[a\x12\xA3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12tV[\x90V[\x15a\x12\xADWV[a\x12\xB5a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xCB`\x04\x82\x01a\x12\x8EV[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x13)`\"`@\x92a\x02\xCFV[a\x132\x81a\x12\xCFV[\x01\x90V[a\x13K\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x1CV[\x90V[\x15a\x13UWV[a\x13]a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13s`\x04\x82\x01a\x136V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x13\xD1`&`@\x92a\x02\xCFV[a\x13\xDA\x81a\x13wV[\x01\x90V[a\x13\xF3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xC4V[\x90V[\x15a\x13\xFDWV[a\x14\x05a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x1B`\x04\x82\x01a\x13\xDEV[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x14y`%`@\x92a\x02\xCFV[a\x14\x82\x81a\x14\x1FV[\x01\x90V[a\x14\x9B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14lV[\x90V[\x15a\x14\xA5WV[a\x14\xADa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xC3`\x04\x82\x01a\x14\x86V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x15!`*`@\x92a\x02\xCFV[a\x15*\x81a\x14\xC7V[\x01\x90V[a\x15C\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x14V[\x90V[\x15a\x15MWV[a\x15Ua\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15k`\x04\x82\x01a\x15.V[\x03\x90\xFD[` \x7F zero address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FInitial appchain owner cannot be_\x82\x01R\x01RV[a\x15\xC9`-`@\x92a\x02\xCFV[a\x15\xD2\x81a\x15oV[\x01\x90V[a\x15\xEB\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xBCV[\x90V[\x15a\x15\xF5WV[a\x15\xFDa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x13`\x04\x82\x01a\x15\xD6V[\x03\x90\xFD[\x90a\x16#_\x19\x91a\x0FZV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16Ba\x16=a\x16I\x92a\x0BvV[a\x0B\x92V[\x82Ta\x16\x17V[\x90UV[\x90a\x16^`\x01\x80`\xA0\x1B\x03\x91a\x0FZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x16q\x90a\x0F&V[\x90V[\x90V[\x90a\x16\x8Ca\x16\x87a\x16\x93\x92a\x16hV[a\x16tV[\x82Ta\x16MV[\x90UV[\x90a\x16\xA1\x81a\x02\xCBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17aWa\x16\xC5\x82a\x16\xBF\x85Ta\x01fV[\x85a\x0B\xEEV[` \x90`\x1F\x83\x11`\x01\x14a\x16\xF9W\x91\x80\x91a\x16\xE8\x93_\x92a\x16\xEDW[PPa\x0CZV[\x90U[V[\x90\x91P\x01Q_\x80a\x16\xE1V[`\x1F\x19\x83\x16\x91a\x17\x08\x85a\x01\x99V[\x92_[\x81\x81\x10a\x17IWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x17/W[PPP\x02\x01\x90Ua\x16\xEBV[a\x17?\x91\x01Q`\x1F\x84\x16\x90a\x0CEV[\x90U_\x80\x80a\x17#V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x17\x0BV[a\x02EV[\x90a\x17p\x91a\x16\x97V[V[\x99\x95\x96a\x18\xC3a\x18\xDF\x98a\x18\xBCa\x18\xD8\x98a\x18\xEB\x9F\x9C\x96\x8F\x99a\x18\xE6\x9F\x9Aa\x18\xD1\x9Aa\x18\xA7a\x18\xB5\x94a\x18\xA0\x8F\x9Ca\x18\x99a\x18\xCA\x9Ea\x18x\x8Fa\x17\xD3a\x18\xAE\x9Aa\x17\xCCa\x17\xC6a\x17\xC1_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x12$V[a\x17\xF0\x85a\x17\xE9a\x17\xE3_a\x0F>V[\x91a\x05\tV[\x14\x15a\x12\xA6V[a\x18\r\x87a\x18\x06a\x18\0_a\x0F>V[\x91a\x05\tV[\x14\x15a\x13NV[a\x182\x89a\x18+a\x18%a\x18 _a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x13\xF6V[a\x18W\x8Ba\x18Pa\x18Ja\x18E_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x14\x9EV[a\x18qa\x18ka\x18f_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x15FV[a\x18\x92a\x18\x8Ca\x18\x87_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x15\xEEV[`\x05a\x16-V[`\x06a\x16-V[`\x02a\x16wV[`\x03a\x16wV[`\x07a\x16-V[`\x08a\x16-V[`\x04a\x16wV[`\ta\x16-V[`\x01a\x16wV[`\na\x17fV[`\x0Ba\x17fV[a\x1A\x12V[V[\x90a\x19\x01\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x100V[V[a\x190\x90a\x19+3a\x19%a\x19\x1Fa\x19\x1A_a\n}V[a\x03\xB0V[\x91a\x03\xB0V[\x14a\n\xE3V[a\x19\xB3V[V[_\x7FNew owner cannot be zero address\x91\x01RV[a\x19e` \x80\x92a\x02\xCFV[a\x19n\x81a\x192V[\x01\x90V[a\x19\x87\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19YV[\x90V[\x15a\x19\x91WV[a\x19\x99a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xAF`\x04\x82\x01a\x19rV[\x03\x90\xFD[a\x19\xE1\x90a\x19\xDC\x81a\x19\xD5a\x19\xCFa\x19\xCA_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x19\x8AV[a\x1A\x12V[V[a\x19\xEC\x90a\x19\x03V[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1A7\x81a\x1A0a\x1A*a\x1A%_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x19\x8AV[a\x1A@_a\n}V[a\x1AJ\x82_a\x16wV[\x90a\x1A~a\x1Ax\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x16hV[\x91a\x16hV[\x91a\x1A\x87a\x01\"V[\x80a\x1A\x91\x81a\x04\x98V[\x03\x90\xA3V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610a60565b61001d5f3561011c565b80630743bf6e1461011757806318b5ce81146101125780634b8be3f71461010d57806357d1ba251461010857806362c73caa1461010357806366a1d108146100fe5780636edd6c09146100f957806385e1f4d0146100f45780638da5cb5b146100ef578063a3c6e1e7146100ea578063aa6a43d8146100e5578063bf6db6f8146100e0578063bf79fd1c146100db578063d1f4737c146100d6578063f2fde38b146100d15763f8a144be0361000e57610a2b565b6109e9565b610996565b610944565b61073d565b6106f9565b6106b5565b610671565b61062e565b6105ea565b6105a6565b610563565b61052e565b61049d565b6103de565b61032c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261013a57565b61012c565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610186575b602083101461018157565b610152565b91607f1691610176565b60209181520190565b5f5260205f2090565b905f92918054906101bc6101b583610166565b8094610190565b916001811690815f1461021357506001146101d7575b505050565b6101e49192939450610199565b915f925b8184106101fb57505001905f80806101d2565b600181602092959395548486015201910192906101e8565b92949550505060ff19168252151560200201905f80806101d2565b90610238916101a2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906102639061023b565b810190811067ffffffffffffffff82111761027d57604052565b610245565b906102a261029b92610292610122565b9384809261022e565b0383610259565b565b905f106102b7576102b490610282565b90565b61013f565b6102c8600b5f906102a4565b90565b5190565b60209181520190565b90825f9392825e0152565b61030261030b602093610310936102f9816102cb565b938480936102cf565b958691016102d8565b61023b565b0190565b6103299160208201915f8184039101526102e3565b90565b3461035c5761033c366004610130565b6103586103476102bc565b61034f610122565b91829182610314565b0390f35b610128565b1c90565b60018060a01b031690565b6103809060086103859302610361565b610365565b90565b906103939154610370565b90565b6103a260015f90610388565b90565b60018060a01b031690565b6103b9906103a5565b90565b6103c5906103b0565b9052565b91906103dc905f602085019401906103bc565b565b3461040e576103ee366004610130565b61040a6103f9610396565b610401610122565b918291826103c9565b0390f35b610128565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561045d5781359167ffffffffffffffff831161045857602001926001830284011161045357565b61041f565b61041b565b610417565b90602082820312610493575f82013567ffffffffffffffff811161048e5761048a9201610423565b9091565b610413565b61012c565b5f0190565b346104cc576104b66104b0366004610462565b90610dce565b6104be610122565b806104c881610498565b0390f35b610128565b90565b6104e49060086104e99302610361565b6104d1565b90565b906104f791546104d4565b90565b61050660075f906104ec565b90565b90565b61051590610509565b9052565b919061052c905f6020850194019061050c565b565b3461055e5761053e366004610130565b61055a6105496104fa565b610551610122565b91829182610519565b0390f35b610128565b346105925761057c610576366004610462565b90610e53565b610584610122565b8061058e81610498565b0390f35b610128565b6105a3600a5f906102a4565b90565b346105d6576105b6366004610130565b6105d26105c1610597565b6105c9610122565b91829182610314565b0390f35b610128565b6105e760025f90610388565b90565b3461061a576105fa366004610130565b6106166106056105db565b61060d610122565b918291826103c9565b0390f35b610128565b61062b60055f906104ec565b90565b3461065e5761063e366004610130565b61065a61064961061f565b610651610122565b91829182610519565b0390f35b610128565b61066e5f5f90610388565b90565b346106a157610681366004610130565b61069d61068c610663565b610694610122565b918291826103c9565b0390f35b610128565b6106b260095f906104ec565b90565b346106e5576106c5366004610130565b6106e16106d06106a6565b6106d8610122565b91829182610519565b0390f35b610128565b6106f660035f90610388565b90565b3461072957610709366004610130565b6107256107146106ea565b61071c610122565b918291826103c9565b0390f35b610128565b61073a60045f90610388565b90565b3461076d5761074d366004610130565b61076961075861072e565b610760610122565b918291826103c9565b0390f35b610128565b61077b816103b0565b0361078257565b5f80fd5b9050359061079382610772565b565b61079e81610509565b036107a557565b5f80fd5b905035906107b682610795565b565b5f80fd5b906107cf6107c8610122565b9283610259565b565b67ffffffffffffffff81116107ef576107eb60209161023b565b0190565b610245565b90825f939282370152565b9092919261081461080f826107d1565b6107bc565b938185526020850190828401116108305761082e926107f4565b565b6107b8565b9080601f8301121561085357816020610850933591016107ff565b90565b610417565b916101808383031261093f57610870825f8501610786565b9261087e83602083016107a9565b9261088c81604084016107a9565b9261089a8260608501610786565b926108a88360808301610786565b926108b68160a084016107a9565b926108c48260c085016107a9565b926108d28360e08301610786565b926108e18161010084016107a9565b926108f0826101208501610786565b9261014081013567ffffffffffffffff811161093a5783610912918301610835565b9261016082013567ffffffffffffffff8111610935576109329201610835565b90565b610413565b610413565b61012c565b346109825761096c610957366004610858565b9a9990999891989792979693969594956118ed565b610974610122565b8061097e81610498565b0390f35b610128565b61099360085f906104ec565b90565b346109c6576109a6366004610130565b6109c26109b1610987565b6109b9610122565b91829182610519565b0390f35b610128565b906020828203126109e4576109e1915f01610786565b90565b61012c565b34610a1757610a016109fc3660046109cb565b6119e3565b610a09610122565b80610a1381610498565b0390f35b610128565b610a2860065f906104ec565b90565b34610a5b57610a3b366004610130565b610a57610a46610a1c565b610a4e610122565b91829182610519565b0390f35b610128565b5f80fd5b5f1c90565b610a75610a7a91610a64565b610365565b90565b610a879054610a69565b90565b5f7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000910152565b610abe60176020926102cf565b610ac781610a8a565b0190565b610ae09060208101905f818303910152610ab1565b90565b15610aea57565b610af2610122565b62461bcd60e51b815280610b0860048201610acb565b0390fd5b90610b3a91610b3533610b2f610b29610b245f610a7d565b6103b0565b916103b0565b14610ae3565b610d85565b565b5090565b601f602091010490565b1b90565b91906008610b69910291610b635f1984610b4a565b92610b4a565b9181191691161790565b90565b610b8a610b85610b8f92610509565b610b73565b610509565b90565b90565b9190610bab610ba6610bb393610b76565b610b92565b908354610b4e565b9055565b5f90565b610bcd91610bc7610bb7565b91610b95565b565b5b818110610bdb575050565b80610be85f600193610bbb565b01610bd0565b9190601f8111610bfe575b505050565b610c0a610c2f93610199565b906020610c1684610b40565b83019310610c37575b610c2890610b40565b0190610bcf565b5f8080610bf9565b9150610c2881929050610c1f565b90610c55905f1990600802610361565b191690565b81610c6491610c45565b906002021790565b91610c779082610b3c565b9067ffffffffffffffff8211610d3657610c9b82610c958554610166565b85610bee565b5f90601f8311600114610cce57918091610cbd935f92610cc2575b5050610c5a565b90555b565b90915001355f80610cb6565b601f19831691610cdd85610199565b925f5b818110610d1e57509160029391856001969410610d04575b50505002019055610cc0565b610d14910135601f841690610c45565b90555f8080610cf8565b91936020600181928787013581550195019201610ce0565b610245565b90610d469291610c6c565b565b9190610d6281610d5b81610d67956102cf565b80956107f4565b61023b565b0190565b9091610d829260208301925f818503910152610d48565b90565b610d92818390600b610d3b565b907f02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a791610dc9610dc0610122565b92839283610d6b565b0390a1565b90610dd891610b0c565b565b90610e0891610e0333610dfd610df7610df25f610a7d565b6103b0565b916103b0565b14610ae3565b610e0a565b565b610e17818390600a610d3b565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291610e4e610e45610122565b92839283610d6b565b0390a1565b90610e5d91610dda565b565b60401c90565b60ff1690565b610e77610e7c91610e5f565b610e65565b90565b610e899054610e6b565b90565b151590565b67ffffffffffffffff1690565b610eaa610eaf91610a64565b610e91565b90565b610ebc9054610e9e565b90565b67ffffffffffffffff1690565b90565b610ee3610ede610ee892610ecc565b610b73565b610ebf565b90565b90565b610f02610efd610f0792610eeb565b610b73565b610ebf565b90565b610f1e610f19610f23926103a5565b610b73565b6103a5565b90565b610f2f90610f0a565b90565b610f3b90610f26565b90565b610f52610f4d610f5792610ecc565b610b73565b610509565b90565b5f1b90565b90610f7267ffffffffffffffff91610f5a565b9181191691161790565b610f90610f8b610f9592610ebf565b610b73565b610ebf565b90565b90565b90610fb0610fab610fb792610f7c565b610f98565b8254610f5f565b9055565b60401b90565b90610fd568ff000000000000000091610fbb565b9181191691161790565b610fe890610e8c565b90565b90565b90611003610ffe61100a92610fdf565b610feb565b8254610fc1565b9055565b61101790610eee565b9052565b919061102e905f6020850194019061100e565b565b9895929a9794919a99969390996110456119ee565b9b8c5f0161105290610e7f565b1561105c90610e8c565b9b8d5f0161106990610eb2565b805f61107490610ecf565b9061107e90610ebf565b148061119c575b906110996110936001610eee565b91610ebf565b1480611174575b6110ab909115610e8c565b9081611163575b50611147576110dd9b8e8e6110d26110ca6001610eee565b5f8401610f9b565b611133575b50611772565b6110e5575b50565b6110f2905f809101610fee565b600161112a7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611121610122565b9182918261101b565b0390a15f6110e2565b611141905f60019101610fee565b8e6110d7565b5f63f92ee8a960e01b81528061115f60048201610498565b0390fd5b61116e915015610e8c565b5f6110b2565b506110ab61118130610f32565b3b61119461118e5f610f3e565b91610509565b1490506110a0565b508d611085565b6111b76111b26111bc92610ecc565b610b73565b6103a5565b90565b6111c8906111a3565b90565b5f7f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000910152565b6111ff601c6020926102cf565b611208816111cb565b0190565b6112219060208101905f8183039101526111f2565b90565b1561122b57565b611233610122565b62461bcd60e51b8152806112496004820161120c565b0390fd5b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b61128160176020926102cf565b61128a8161124d565b0190565b6112a39060208101905f818303910152611274565b90565b156112ad57565b6112b5610122565b62461bcd60e51b8152806112cb6004820161128e565b0390fd5b60207f726f000000000000000000000000000000000000000000000000000000000000917f53657175656e63696e6720636861696e2049442063616e6e6f74206265207a655f8201520152565b61132960226040926102cf565b611332816112cf565b0190565b61134b9060208101905f81830391015261131c565b90565b1561135557565b61135d610122565b62461bcd60e51b81528061137360048201611336565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6113d160266040926102cf565b6113da81611377565b0190565b6113f39060208101905f8183039101526113c4565b90565b156113fd57565b611405610122565b62461bcd60e51b81528061141b600482016113de565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61147960256040926102cf565b6114828161141f565b0190565b61149b9060208101905f81830391015261146c565b90565b156114a557565b6114ad610122565b62461bcd60e51b8152806114c360048201611486565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b611521602a6040926102cf565b61152a816114c7565b0190565b6115439060208101905f818303910152611514565b90565b1561154d57565b611555610122565b62461bcd60e51b81528061156b6004820161152e565b0390fd5b60207f207a65726f206164647265737300000000000000000000000000000000000000917f496e697469616c20617070636861696e206f776e65722063616e6e6f742062655f8201520152565b6115c9602d6040926102cf565b6115d28161156f565b0190565b6115eb9060208101905f8183039101526115bc565b90565b156115f557565b6115fd610122565b62461bcd60e51b815280611613600482016115d6565b0390fd5b906116235f1991610f5a565b9181191691161790565b9061164261163d61164992610b76565b610b92565b8254611617565b9055565b9061165e60018060a01b0391610f5a565b9181191691161790565b61167190610f26565b90565b90565b9061168c61168761169392611668565b611674565b825461164d565b9055565b906116a1816102cb565b9067ffffffffffffffff8211611761576116c5826116bf8554610166565b85610bee565b602090601f83116001146116f9579180916116e8935f926116ed575b5050610c5a565b90555b565b90915001515f806116e1565b601f1983169161170885610199565b925f5b8181106117495750916002939185600196941061172f575b505050020190556116eb565b61173f910151601f841690610c45565b90555f8080611723565b9193602060018192878701518155019501920161170b565b610245565b9061177091611697565b565b9995966118c36118df986118bc6118d8986118eb9f9c968f996118e69f9a6118d19a6118a76118b5946118a08f9c6118996118ca9e6118788f6117d36118ae9a6117cc6117c66117c15f6111bf565b6103b0565b916103b0565b1415611224565b6117f0856117e96117e35f610f3e565b91610509565b14156112a6565b61180d876118066118005f610f3e565b91610509565b141561134e565b6118328961182b6118256118205f6111bf565b6103b0565b916103b0565b14156113f6565b6118578b61185061184a6118455f6111bf565b6103b0565b916103b0565b141561149e565b61187161186b6118665f6111bf565b6103b0565b916103b0565b1415611546565b61189261188c6118875f6111bf565b6103b0565b916103b0565b14156115ee565b600561162d565b600661162d565b6002611677565b6003611677565b600761162d565b600861162d565b6004611677565b600961162d565b6001611677565b600a611766565b600b611766565b611a12565b565b906119019b9a999897969594939291611030565b565b6119309061192b3361192561191f61191a5f610a7d565b6103b0565b916103b0565b14610ae3565b6119b3565b565b5f7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373910152565b611965602080926102cf565b61196e81611932565b0190565b6119879060208101905f818303910152611959565b90565b1561199157565b611999610122565b62461bcd60e51b8152806119af60048201611972565b0390fd5b6119e1906119dc816119d56119cf6119ca5f6111bf565b6103b0565b916103b0565b141561198a565b611a12565b565b6119ec90611903565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a3781611a30611a2a611a255f6111bf565b6103b0565b916103b0565b141561198a565b611a405f610a7d565b611a4a825f611677565b90611a7e611a787f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611668565b91611668565b91611a87610122565b80611a9181610498565b0390a356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n`V[a\0\x1D_5a\x01\x1CV[\x80c\x07C\xBFn\x14a\x01\x17W\x80c\x18\xB5\xCE\x81\x14a\x01\x12W\x80cK\x8B\xE3\xF7\x14a\x01\rW\x80cW\xD1\xBA%\x14a\x01\x08W\x80cb\xC7<\xAA\x14a\x01\x03W\x80cf\xA1\xD1\x08\x14a\0\xFEW\x80cn\xDDl\t\x14a\0\xF9W\x80c\x85\xE1\xF4\xD0\x14a\0\xF4W\x80c\x8D\xA5\xCB[\x14a\0\xEFW\x80c\xA3\xC6\xE1\xE7\x14a\0\xEAW\x80c\xAAjC\xD8\x14a\0\xE5W\x80c\xBFm\xB6\xF8\x14a\0\xE0W\x80c\xBFy\xFD\x1C\x14a\0\xDBW\x80c\xD1\xF4s|\x14a\0\xD6W\x80c\xF2\xFD\xE3\x8B\x14a\0\xD1Wc\xF8\xA1D\xBE\x03a\0\x0EWa\n+V[a\t\xE9V[a\t\x96V[a\tDV[a\x07=V[a\x06\xF9V[a\x06\xB5V[a\x06qV[a\x06.V[a\x05\xEAV[a\x05\xA6V[a\x05cV[a\x05.V[a\x04\x9DV[a\x03\xDEV[a\x03,V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01:WV[a\x01,V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\x86W[` \x83\x10\x14a\x01\x81WV[a\x01RV[\x91`\x7F\x16\x91a\x01vV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xBCa\x01\xB5\x83a\x01fV[\x80\x94a\x01\x90V[\x91`\x01\x81\x16\x90\x81_\x14a\x02\x13WP`\x01\x14a\x01\xD7W[PPPV[a\x01\xE4\x91\x92\x93\x94Pa\x01\x99V[\x91_\x92[\x81\x84\x10a\x01\xFBWPP\x01\x90_\x80\x80a\x01\xD2V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x01\xE8V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x01\xD2V[\x90a\x028\x91a\x01\xA2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02c\x90a\x02;V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02}W`@RV[a\x02EV[\x90a\x02\xA2a\x02\x9B\x92a\x02\x92a\x01\"V[\x93\x84\x80\x92a\x02.V[\x03\x83a\x02YV[V[\x90_\x10a\x02\xB7Wa\x02\xB4\x90a\x02\x82V[\x90V[a\x01?V[a\x02\xC8`\x0B_\x90a\x02\xA4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x03\x02a\x03\x0B` \x93a\x03\x10\x93a\x02\xF9\x81a\x02\xCBV[\x93\x84\x80\x93a\x02\xCFV[\x95\x86\x91\x01a\x02\xD8V[a\x02;V[\x01\x90V[a\x03)\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xE3V[\x90V[4a\x03\\Wa\x03<6`\x04a\x010V[a\x03Xa\x03Ga\x02\xBCV[a\x03Oa\x01\"V[\x91\x82\x91\x82a\x03\x14V[\x03\x90\xF3[a\x01(V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x80\x90`\x08a\x03\x85\x93\x02a\x03aV[a\x03eV[\x90V[\x90a\x03\x93\x91Ta\x03pV[\x90V[a\x03\xA2`\x01_\x90a\x03\x88V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xB9\x90a\x03\xA5V[\x90V[a\x03\xC5\x90a\x03\xB0V[\x90RV[\x91\x90a\x03\xDC\x90_` \x85\x01\x94\x01\x90a\x03\xBCV[V[4a\x04\x0EWa\x03\xEE6`\x04a\x010V[a\x04\na\x03\xF9a\x03\x96V[a\x04\x01a\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04]W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04XW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04SWV[a\x04\x1FV[a\x04\x1BV[a\x04\x17V[\x90` \x82\x82\x03\x12a\x04\x93W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x8EWa\x04\x8A\x92\x01a\x04#V[\x90\x91V[a\x04\x13V[a\x01,V[_\x01\x90V[4a\x04\xCCWa\x04\xB6a\x04\xB06`\x04a\x04bV[\x90a\r\xCEV[a\x04\xBEa\x01\"V[\x80a\x04\xC8\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[\x90V[a\x04\xE4\x90`\x08a\x04\xE9\x93\x02a\x03aV[a\x04\xD1V[\x90V[\x90a\x04\xF7\x91Ta\x04\xD4V[\x90V[a\x05\x06`\x07_\x90a\x04\xECV[\x90V[\x90V[a\x05\x15\x90a\x05\tV[\x90RV[\x91\x90a\x05,\x90_` \x85\x01\x94\x01\x90a\x05\x0CV[V[4a\x05^Wa\x05>6`\x04a\x010V[a\x05Za\x05Ia\x04\xFAV[a\x05Qa\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[4a\x05\x92Wa\x05|a\x05v6`\x04a\x04bV[\x90a\x0ESV[a\x05\x84a\x01\"V[\x80a\x05\x8E\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[a\x05\xA3`\n_\x90a\x02\xA4V[\x90V[4a\x05\xD6Wa\x05\xB66`\x04a\x010V[a\x05\xD2a\x05\xC1a\x05\x97V[a\x05\xC9a\x01\"V[\x91\x82\x91\x82a\x03\x14V[\x03\x90\xF3[a\x01(V[a\x05\xE7`\x02_\x90a\x03\x88V[\x90V[4a\x06\x1AWa\x05\xFA6`\x04a\x010V[a\x06\x16a\x06\x05a\x05\xDBV[a\x06\ra\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x06+`\x05_\x90a\x04\xECV[\x90V[4a\x06^Wa\x06>6`\x04a\x010V[a\x06Za\x06Ia\x06\x1FV[a\x06Qa\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[a\x06n__\x90a\x03\x88V[\x90V[4a\x06\xA1Wa\x06\x816`\x04a\x010V[a\x06\x9Da\x06\x8Ca\x06cV[a\x06\x94a\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x06\xB2`\t_\x90a\x04\xECV[\x90V[4a\x06\xE5Wa\x06\xC56`\x04a\x010V[a\x06\xE1a\x06\xD0a\x06\xA6V[a\x06\xD8a\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[a\x06\xF6`\x03_\x90a\x03\x88V[\x90V[4a\x07)Wa\x07\t6`\x04a\x010V[a\x07%a\x07\x14a\x06\xEAV[a\x07\x1Ca\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x07:`\x04_\x90a\x03\x88V[\x90V[4a\x07mWa\x07M6`\x04a\x010V[a\x07ia\x07Xa\x07.V[a\x07`a\x01\"V[\x91\x82\x91\x82a\x03\xC9V[\x03\x90\xF3[a\x01(V[a\x07{\x81a\x03\xB0V[\x03a\x07\x82WV[_\x80\xFD[\x90P5\x90a\x07\x93\x82a\x07rV[V[a\x07\x9E\x81a\x05\tV[\x03a\x07\xA5WV[_\x80\xFD[\x90P5\x90a\x07\xB6\x82a\x07\x95V[V[_\x80\xFD[\x90a\x07\xCFa\x07\xC8a\x01\"V[\x92\x83a\x02YV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xEFWa\x07\xEB` \x91a\x02;V[\x01\x90V[a\x02EV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x08\x14a\x08\x0F\x82a\x07\xD1V[a\x07\xBCV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x080Wa\x08.\x92a\x07\xF4V[V[a\x07\xB8V[\x90\x80`\x1F\x83\x01\x12\x15a\x08SW\x81` a\x08P\x935\x91\x01a\x07\xFFV[\x90V[a\x04\x17V[\x91a\x01\x80\x83\x83\x03\x12a\t?Wa\x08p\x82_\x85\x01a\x07\x86V[\x92a\x08~\x83` \x83\x01a\x07\xA9V[\x92a\x08\x8C\x81`@\x84\x01a\x07\xA9V[\x92a\x08\x9A\x82``\x85\x01a\x07\x86V[\x92a\x08\xA8\x83`\x80\x83\x01a\x07\x86V[\x92a\x08\xB6\x81`\xA0\x84\x01a\x07\xA9V[\x92a\x08\xC4\x82`\xC0\x85\x01a\x07\xA9V[\x92a\x08\xD2\x83`\xE0\x83\x01a\x07\x86V[\x92a\x08\xE1\x81a\x01\0\x84\x01a\x07\xA9V[\x92a\x08\xF0\x82a\x01 \x85\x01a\x07\x86V[\x92a\x01@\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t:W\x83a\t\x12\x91\x83\x01a\x085V[\x92a\x01`\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t5Wa\t2\x92\x01a\x085V[\x90V[a\x04\x13V[a\x04\x13V[a\x01,V[4a\t\x82Wa\tla\tW6`\x04a\x08XV[\x9A\x99\x90\x99\x98\x91\x98\x97\x92\x97\x96\x93\x96\x95\x94\x95a\x18\xEDV[a\tta\x01\"V[\x80a\t~\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[a\t\x93`\x08_\x90a\x04\xECV[\x90V[4a\t\xC6Wa\t\xA66`\x04a\x010V[a\t\xC2a\t\xB1a\t\x87V[a\t\xB9a\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\t\xE4Wa\t\xE1\x91_\x01a\x07\x86V[\x90V[a\x01,V[4a\n\x17Wa\n\x01a\t\xFC6`\x04a\t\xCBV[a\x19\xE3V[a\n\ta\x01\"V[\x80a\n\x13\x81a\x04\x98V[\x03\x90\xF3[a\x01(V[a\n(`\x06_\x90a\x04\xECV[\x90V[4a\n[Wa\n;6`\x04a\x010V[a\nWa\nFa\n\x1CV[a\nNa\x01\"V[\x91\x82\x91\x82a\x05\x19V[\x03\x90\xF3[a\x01(V[_\x80\xFD[_\x1C\x90V[a\nua\nz\x91a\ndV[a\x03eV[\x90V[a\n\x87\x90Ta\niV[\x90V[_\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0\x91\x01RV[a\n\xBE`\x17` \x92a\x02\xCFV[a\n\xC7\x81a\n\x8AV[\x01\x90V[a\n\xE0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\n\xB1V[\x90V[\x15a\n\xEAWV[a\n\xF2a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0B\x08`\x04\x82\x01a\n\xCBV[\x03\x90\xFD[\x90a\x0B:\x91a\x0B53a\x0B/a\x0B)a\x0B$_a\n}V[a\x03\xB0V[\x91a\x03\xB0V[\x14a\n\xE3V[a\r\x85V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0Bi\x91\x02\x91a\x0Bc_\x19\x84a\x0BJV[\x92a\x0BJV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x0B\x8Aa\x0B\x85a\x0B\x8F\x92a\x05\tV[a\x0BsV[a\x05\tV[\x90V[\x90V[\x91\x90a\x0B\xABa\x0B\xA6a\x0B\xB3\x93a\x0BvV[a\x0B\x92V[\x90\x83Ta\x0BNV[\x90UV[_\x90V[a\x0B\xCD\x91a\x0B\xC7a\x0B\xB7V[\x91a\x0B\x95V[V[[\x81\x81\x10a\x0B\xDBWPPV[\x80a\x0B\xE8_`\x01\x93a\x0B\xBBV[\x01a\x0B\xD0V[\x91\x90`\x1F\x81\x11a\x0B\xFEW[PPPV[a\x0C\na\x0C/\x93a\x01\x99V[\x90` a\x0C\x16\x84a\x0B@V[\x83\x01\x93\x10a\x0C7W[a\x0C(\x90a\x0B@V[\x01\x90a\x0B\xCFV[_\x80\x80a\x0B\xF9V[\x91Pa\x0C(\x81\x92\x90Pa\x0C\x1FV[\x90a\x0CU\x90_\x19\x90`\x08\x02a\x03aV[\x19\x16\x90V[\x81a\x0Cd\x91a\x0CEV[\x90`\x02\x02\x17\x90V[\x91a\x0Cw\x90\x82a\x0B<V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r6Wa\x0C\x9B\x82a\x0C\x95\x85Ta\x01fV[\x85a\x0B\xEEV[_\x90`\x1F\x83\x11`\x01\x14a\x0C\xCEW\x91\x80\x91a\x0C\xBD\x93_\x92a\x0C\xC2W[PPa\x0CZV[\x90U[V[\x90\x91P\x015_\x80a\x0C\xB6V[`\x1F\x19\x83\x16\x91a\x0C\xDD\x85a\x01\x99V[\x92_[\x81\x81\x10a\r\x1EWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\r\x04W[PPP\x02\x01\x90Ua\x0C\xC0V[a\r\x14\x91\x015`\x1F\x84\x16\x90a\x0CEV[\x90U_\x80\x80a\x0C\xF8V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0C\xE0V[a\x02EV[\x90a\rF\x92\x91a\x0ClV[V[\x91\x90a\rb\x81a\r[\x81a\rg\x95a\x02\xCFV[\x80\x95a\x07\xF4V[a\x02;V[\x01\x90V[\x90\x91a\r\x82\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\rHV[\x90V[a\r\x92\x81\x83\x90`\x0Ba\r;V[\x90\x7F\x02X^\xBC\xE9\x18\xF6V`M\xAB\xB232\xA6\xDF\x1D\xCD\xE1\x19t\x1F|\x1F\x8F\xB3{\x19\x13\x92\xA2\xA7\x91a\r\xC9a\r\xC0a\x01\"V[\x92\x83\x92\x83a\rkV[\x03\x90\xA1V[\x90a\r\xD8\x91a\x0B\x0CV[V[\x90a\x0E\x08\x91a\x0E\x033a\r\xFDa\r\xF7a\r\xF2_a\n}V[a\x03\xB0V[\x91a\x03\xB0V[\x14a\n\xE3V[a\x0E\nV[V[a\x0E\x17\x81\x83\x90`\na\r;V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x0ENa\x0EEa\x01\"V[\x92\x83\x92\x83a\rkV[\x03\x90\xA1V[\x90a\x0E]\x91a\r\xDAV[V[`@\x1C\x90V[`\xFF\x16\x90V[a\x0Ewa\x0E|\x91a\x0E_V[a\x0EeV[\x90V[a\x0E\x89\x90Ta\x0EkV[\x90V[\x15\x15\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0E\xAAa\x0E\xAF\x91a\ndV[a\x0E\x91V[\x90V[a\x0E\xBC\x90Ta\x0E\x9EV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90V[a\x0E\xE3a\x0E\xDEa\x0E\xE8\x92a\x0E\xCCV[a\x0BsV[a\x0E\xBFV[\x90V[\x90V[a\x0F\x02a\x0E\xFDa\x0F\x07\x92a\x0E\xEBV[a\x0BsV[a\x0E\xBFV[\x90V[a\x0F\x1Ea\x0F\x19a\x0F#\x92a\x03\xA5V[a\x0BsV[a\x03\xA5V[\x90V[a\x0F/\x90a\x0F\nV[\x90V[a\x0F;\x90a\x0F&V[\x90V[a\x0FRa\x0FMa\x0FW\x92a\x0E\xCCV[a\x0BsV[a\x05\tV[\x90V[_\x1B\x90V[\x90a\x0Frg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0FZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\x90a\x0F\x8Ba\x0F\x95\x92a\x0E\xBFV[a\x0BsV[a\x0E\xBFV[\x90V[\x90V[\x90a\x0F\xB0a\x0F\xABa\x0F\xB7\x92a\x0F|V[a\x0F\x98V[\x82Ta\x0F_V[\x90UV[`@\x1B\x90V[\x90a\x0F\xD5h\xFF\0\0\0\0\0\0\0\0\x91a\x0F\xBBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xE8\x90a\x0E\x8CV[\x90V[\x90V[\x90a\x10\x03a\x0F\xFEa\x10\n\x92a\x0F\xDFV[a\x0F\xEBV[\x82Ta\x0F\xC1V[\x90UV[a\x10\x17\x90a\x0E\xEEV[\x90RV[\x91\x90a\x10.\x90_` \x85\x01\x94\x01\x90a\x10\x0EV[V[\x98\x95\x92\x9A\x97\x94\x91\x9A\x99\x96\x93\x90\x99a\x10Ea\x19\xEEV[\x9B\x8C_\x01a\x10R\x90a\x0E\x7FV[\x15a\x10\\\x90a\x0E\x8CV[\x9B\x8D_\x01a\x10i\x90a\x0E\xB2V[\x80_a\x10t\x90a\x0E\xCFV[\x90a\x10~\x90a\x0E\xBFV[\x14\x80a\x11\x9CW[\x90a\x10\x99a\x10\x93`\x01a\x0E\xEEV[\x91a\x0E\xBFV[\x14\x80a\x11tW[a\x10\xAB\x90\x91\x15a\x0E\x8CV[\x90\x81a\x11cW[Pa\x11GWa\x10\xDD\x9B\x8E\x8Ea\x10\xD2a\x10\xCA`\x01a\x0E\xEEV[_\x84\x01a\x0F\x9BV[a\x113W[Pa\x17rV[a\x10\xE5W[PV[a\x10\xF2\x90_\x80\x91\x01a\x0F\xEEV[`\x01a\x11*\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x11!a\x01\"V[\x91\x82\x91\x82a\x10\x1BV[\x03\x90\xA1_a\x10\xE2V[a\x11A\x90_`\x01\x91\x01a\x0F\xEEV[\x8Ea\x10\xD7V[_c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x11_`\x04\x82\x01a\x04\x98V[\x03\x90\xFD[a\x11n\x91P\x15a\x0E\x8CV[_a\x10\xB2V[Pa\x10\xABa\x11\x810a\x0F2V[;a\x11\x94a\x11\x8E_a\x0F>V[\x91a\x05\tV[\x14\x90Pa\x10\xA0V[P\x8Da\x10\x85V[a\x11\xB7a\x11\xB2a\x11\xBC\x92a\x0E\xCCV[a\x0BsV[a\x03\xA5V[\x90V[a\x11\xC8\x90a\x11\xA3V[\x90V[_\x7FOwner cannot be zero address\0\0\0\0\x91\x01RV[a\x11\xFF`\x1C` \x92a\x02\xCFV[a\x12\x08\x81a\x11\xCBV[\x01\x90V[a\x12!\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xF2V[\x90V[\x15a\x12+WV[a\x123a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12I`\x04\x82\x01a\x12\x0CV[\x03\x90\xFD[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12\x81`\x17` \x92a\x02\xCFV[a\x12\x8A\x81a\x12MV[\x01\x90V[a\x12\xA3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12tV[\x90V[\x15a\x12\xADWV[a\x12\xB5a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xCB`\x04\x82\x01a\x12\x8EV[\x03\x90\xFD[` \x7Fro\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing chain ID cannot be ze_\x82\x01R\x01RV[a\x13)`\"`@\x92a\x02\xCFV[a\x132\x81a\x12\xCFV[\x01\x90V[a\x13K\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x1CV[\x90V[\x15a\x13UWV[a\x13]a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13s`\x04\x82\x01a\x136V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x13\xD1`&`@\x92a\x02\xCFV[a\x13\xDA\x81a\x13wV[\x01\x90V[a\x13\xF3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xC4V[\x90V[\x15a\x13\xFDWV[a\x14\x05a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x1B`\x04\x82\x01a\x13\xDEV[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x14y`%`@\x92a\x02\xCFV[a\x14\x82\x81a\x14\x1FV[\x01\x90V[a\x14\x9B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14lV[\x90V[\x15a\x14\xA5WV[a\x14\xADa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xC3`\x04\x82\x01a\x14\x86V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x15!`*`@\x92a\x02\xCFV[a\x15*\x81a\x14\xC7V[\x01\x90V[a\x15C\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x14V[\x90V[\x15a\x15MWV[a\x15Ua\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15k`\x04\x82\x01a\x15.V[\x03\x90\xFD[` \x7F zero address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FInitial appchain owner cannot be_\x82\x01R\x01RV[a\x15\xC9`-`@\x92a\x02\xCFV[a\x15\xD2\x81a\x15oV[\x01\x90V[a\x15\xEB\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xBCV[\x90V[\x15a\x15\xF5WV[a\x15\xFDa\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x13`\x04\x82\x01a\x15\xD6V[\x03\x90\xFD[\x90a\x16#_\x19\x91a\x0FZV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16Ba\x16=a\x16I\x92a\x0BvV[a\x0B\x92V[\x82Ta\x16\x17V[\x90UV[\x90a\x16^`\x01\x80`\xA0\x1B\x03\x91a\x0FZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x16q\x90a\x0F&V[\x90V[\x90V[\x90a\x16\x8Ca\x16\x87a\x16\x93\x92a\x16hV[a\x16tV[\x82Ta\x16MV[\x90UV[\x90a\x16\xA1\x81a\x02\xCBV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17aWa\x16\xC5\x82a\x16\xBF\x85Ta\x01fV[\x85a\x0B\xEEV[` \x90`\x1F\x83\x11`\x01\x14a\x16\xF9W\x91\x80\x91a\x16\xE8\x93_\x92a\x16\xEDW[PPa\x0CZV[\x90U[V[\x90\x91P\x01Q_\x80a\x16\xE1V[`\x1F\x19\x83\x16\x91a\x17\x08\x85a\x01\x99V[\x92_[\x81\x81\x10a\x17IWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x17/W[PPP\x02\x01\x90Ua\x16\xEBV[a\x17?\x91\x01Q`\x1F\x84\x16\x90a\x0CEV[\x90U_\x80\x80a\x17#V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x17\x0BV[a\x02EV[\x90a\x17p\x91a\x16\x97V[V[\x99\x95\x96a\x18\xC3a\x18\xDF\x98a\x18\xBCa\x18\xD8\x98a\x18\xEB\x9F\x9C\x96\x8F\x99a\x18\xE6\x9F\x9Aa\x18\xD1\x9Aa\x18\xA7a\x18\xB5\x94a\x18\xA0\x8F\x9Ca\x18\x99a\x18\xCA\x9Ea\x18x\x8Fa\x17\xD3a\x18\xAE\x9Aa\x17\xCCa\x17\xC6a\x17\xC1_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x12$V[a\x17\xF0\x85a\x17\xE9a\x17\xE3_a\x0F>V[\x91a\x05\tV[\x14\x15a\x12\xA6V[a\x18\r\x87a\x18\x06a\x18\0_a\x0F>V[\x91a\x05\tV[\x14\x15a\x13NV[a\x182\x89a\x18+a\x18%a\x18 _a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x13\xF6V[a\x18W\x8Ba\x18Pa\x18Ja\x18E_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x14\x9EV[a\x18qa\x18ka\x18f_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x15FV[a\x18\x92a\x18\x8Ca\x18\x87_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x15\xEEV[`\x05a\x16-V[`\x06a\x16-V[`\x02a\x16wV[`\x03a\x16wV[`\x07a\x16-V[`\x08a\x16-V[`\x04a\x16wV[`\ta\x16-V[`\x01a\x16wV[`\na\x17fV[`\x0Ba\x17fV[a\x1A\x12V[V[\x90a\x19\x01\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x100V[V[a\x190\x90a\x19+3a\x19%a\x19\x1Fa\x19\x1A_a\n}V[a\x03\xB0V[\x91a\x03\xB0V[\x14a\n\xE3V[a\x19\xB3V[V[_\x7FNew owner cannot be zero address\x91\x01RV[a\x19e` \x80\x92a\x02\xCFV[a\x19n\x81a\x192V[\x01\x90V[a\x19\x87\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19YV[\x90V[\x15a\x19\x91WV[a\x19\x99a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xAF`\x04\x82\x01a\x19rV[\x03\x90\xFD[a\x19\xE1\x90a\x19\xDC\x81a\x19\xD5a\x19\xCFa\x19\xCA_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x19\x8AV[a\x1A\x12V[V[a\x19\xEC\x90a\x19\x03V[V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1A7\x81a\x1A0a\x1A*a\x1A%_a\x11\xBFV[a\x03\xB0V[\x91a\x03\xB0V[\x14\x15a\x19\x8AV[a\x1A@_a\n}V[a\x1AJ\x82_a\x16wV[\x90a\x1A~a\x1Ax\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x16hV[\x91a\x16hV[\x91a\x1A\x87a\x01\"V[\x80a\x1A\x91\x81a\x04\x98V[\x03\x90\xA3V",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AppchainBlockExplorerUrlUpdated(string)` and selector `0x02585ebce918f656604dabb23332a6df1dcde119741f7c1f8fb37b191392a2a7`.
```solidity
event AppchainBlockExplorerUrlUpdated(string newUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AppchainBlockExplorerUrlUpdated {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AppchainBlockExplorerUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AppchainBlockExplorerUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AppchainBlockExplorerUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AppchainBlockExplorerUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AppchainBlockExplorerUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `APPCHAIN_BLOCK_EXPLORER_URL()` and selector `0x0743bf6e`.
```solidity
function APPCHAIN_BLOCK_EXPLORER_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLCall {}
    ///Container type for the return parameters of the [`APPCHAIN_BLOCK_EXPLORER_URL()`](APPCHAIN_BLOCK_EXPLORER_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct APPCHAIN_BLOCK_EXPLORER_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<APPCHAIN_BLOCK_EXPLORER_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: APPCHAIN_BLOCK_EXPLORER_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for APPCHAIN_BLOCK_EXPLORER_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for APPCHAIN_BLOCK_EXPLORER_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = APPCHAIN_BLOCK_EXPLORER_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "APPCHAIN_BLOCK_EXPLORER_URL()";
            const SELECTOR: [u8; 4] = [7u8, 67u8, 191u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `INITIAL_APPCHAIN_OWNER()` and selector `0x18b5ce81`.
```solidity
function INITIAL_APPCHAIN_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_APPCHAIN_OWNERCall {}
    ///Container type for the return parameters of the [`INITIAL_APPCHAIN_OWNER()`](INITIAL_APPCHAIN_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_APPCHAIN_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_APPCHAIN_OWNERCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_APPCHAIN_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_APPCHAIN_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_APPCHAIN_OWNERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_APPCHAIN_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_APPCHAIN_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for INITIAL_APPCHAIN_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = INITIAL_APPCHAIN_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "INITIAL_APPCHAIN_OWNER()";
            const SELECTOR: [u8; 4] = [24u8, 181u8, 206u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CHAIN_ID()` and selector `0xf8a144be`.
```solidity
function SEQUENCING_CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CHAIN_ID()`](SEQUENCING_CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CHAIN_IDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CHAIN_ID()";
            const SELECTOR: [u8; 4] = [248u8, 161u8, 68u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,uint256,uint256,address,address,uint256,uint256,address,uint256,address,string,string)` and selector `0xbf79fd1c`.
```solidity
function initialize(address _owner, uint256 chainId, uint256 sequencingChainId, address arbitrumBridgeAddress, address arbitrumInboxAddress, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address initialAppchainOwner, string memory sequencingChainRpcUrl, string memory appchainBlockExplorerUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub initialAppchainOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub appchainBlockExplorerUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,uint256,address,address,uint256,uint256,address,uint256,address,string,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value._owner,
                        value.chainId,
                        value.sequencingChainId,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.initialAppchainOwner,
                        value.sequencingChainRpcUrl,
                        value.appchainBlockExplorerUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        chainId: tuple.1,
                        sequencingChainId: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        settlementDelay: tuple.5,
                        settlementStartBlock: tuple.6,
                        sequencingContractAddress: tuple.7,
                        sequencingStartBlock: tuple.8,
                        initialAppchainOwner: tuple.9,
                        sequencingChainRpcUrl: tuple.10,
                        appchainBlockExplorerUrl: tuple.11,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,uint256,address,address,uint256,uint256,address,uint256,address,string,string)";
            const SELECTOR: [u8; 4] = [191u8, 121u8, 253u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initialAppchainOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.appchainBlockExplorerUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAppchainBlockExplorerUrl(string)` and selector `0x4b8be3f7`.
```solidity
function updateAppchainBlockExplorerUrl(string memory newUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlCall {
        #[allow(missing_docs)]
        pub newUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateAppchainBlockExplorerUrl(string)`](updateAppchainBlockExplorerUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAppchainBlockExplorerUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlCall) -> Self {
                    (value.newUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAppchainBlockExplorerUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAppchainBlockExplorerUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAppchainBlockExplorerUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAppchainBlockExplorerUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAppchainBlockExplorerUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAppchainBlockExplorerUrl(string)";
            const SELECTOR: [u8; 4] = [75u8, 139u8, 227u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        APPCHAIN_BLOCK_EXPLORER_URL(APPCHAIN_BLOCK_EXPLORER_URLCall),
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        INITIAL_APPCHAIN_OWNER(INITIAL_APPCHAIN_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CHAIN_ID(SEQUENCING_CHAIN_IDCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAppchainBlockExplorerUrl(updateAppchainBlockExplorerUrlCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 67u8, 191u8, 110u8],
            [24u8, 181u8, 206u8, 129u8],
            [75u8, 139u8, 227u8, 247u8],
            [87u8, 209u8, 186u8, 37u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [191u8, 109u8, 182u8, 248u8],
            [191u8, 121u8, 253u8, 28u8],
            [209u8, 244u8, 115u8, 124u8],
            [242u8, 253u8, 227u8, 139u8],
            [248u8, 161u8, 68u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::APPCHAIN_BLOCK_EXPLORER_URL(_) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::INITIAL_APPCHAIN_OWNER(_) => {
                    <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CHAIN_ID(_) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAppchainBlockExplorerUrl(_) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn APPCHAIN_BLOCK_EXPLORER_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::APPCHAIN_BLOCK_EXPLORER_URL)
                    }
                    APPCHAIN_BLOCK_EXPLORER_URL
                },
                {
                    fn INITIAL_APPCHAIN_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::INITIAL_APPCHAIN_OWNER)
                    }
                    INITIAL_APPCHAIN_OWNER
                },
                {
                    fn updateAppchainBlockExplorerUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateAppchainBlockExplorerUrl)
                    }
                    updateAppchainBlockExplorerUrl
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn SEQUENCING_CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CHAIN_ID)
                    }
                    SEQUENCING_CHAIN_ID
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::INITIAL_APPCHAIN_OWNER(inner) => {
                    <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::APPCHAIN_BLOCK_EXPLORER_URL(inner) => {
                    <APPCHAIN_BLOCK_EXPLORER_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::INITIAL_APPCHAIN_OWNER(inner) => {
                    <INITIAL_APPCHAIN_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CHAIN_ID(inner) => {
                    <SEQUENCING_CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAppchainBlockExplorerUrl(inner) => {
                    <updateAppchainBlockExplorerUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        AppchainBlockExplorerUrlUpdated(AppchainBlockExplorerUrlUpdated),
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                2u8,
                88u8,
                94u8,
                188u8,
                233u8,
                24u8,
                246u8,
                86u8,
                96u8,
                77u8,
                171u8,
                178u8,
                51u8,
                50u8,
                166u8,
                223u8,
                29u8,
                205u8,
                225u8,
                25u8,
                116u8,
                31u8,
                124u8,
                31u8,
                143u8,
                179u8,
                123u8,
                25u8,
                19u8,
                146u8,
                162u8,
                167u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AppchainBlockExplorerUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AppchainBlockExplorerUrlUpdated)
                }
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AppchainBlockExplorerUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`APPCHAIN_BLOCK_EXPLORER_URL`] function.
        pub fn APPCHAIN_BLOCK_EXPLORER_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, APPCHAIN_BLOCK_EXPLORER_URLCall, N> {
            self.call_builder(&APPCHAIN_BLOCK_EXPLORER_URLCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`INITIAL_APPCHAIN_OWNER`] function.
        pub fn INITIAL_APPCHAIN_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, INITIAL_APPCHAIN_OWNERCall, N> {
            self.call_builder(&INITIAL_APPCHAIN_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CHAIN_ID`] function.
        pub fn SEQUENCING_CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CHAIN_IDCall, N> {
            self.call_builder(&SEQUENCING_CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _owner: alloy::sol_types::private::Address,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            sequencingChainId: alloy::sol_types::private::primitives::aliases::U256,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            initialAppchainOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
            appchainBlockExplorerUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _owner,
                    chainId,
                    sequencingChainId,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    initialAppchainOwner,
                    sequencingChainRpcUrl,
                    appchainBlockExplorerUrl,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAppchainBlockExplorerUrl`] function.
        pub fn updateAppchainBlockExplorerUrl(
            &self,
            newUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateAppchainBlockExplorerUrlCall,
            N,
        > {
            self.call_builder(
                &updateAppchainBlockExplorerUrlCall {
                    newUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AppchainBlockExplorerUrlUpdated`] event.
        pub fn AppchainBlockExplorerUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AppchainBlockExplorerUrlUpdated, N> {
            self.event_filter::<AppchainBlockExplorerUrlUpdated>()
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
