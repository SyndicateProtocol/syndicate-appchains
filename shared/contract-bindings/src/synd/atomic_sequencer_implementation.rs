/**

Generated by the following Solidity interface...
```solidity
interface AtomicSequencerImplementation {
    error InputLengthMismatchError();

    function processTransactionsAtomically(address[] memory chains, bytes[] memory transactions) external;
    function processTransactionsBulkAtomically(address[] memory chains, bytes[][] memory transactions) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "processTransactionsAtomically",
    "inputs": [
      {
        "name": "chains",
        "type": "address[]",
        "internalType": "contract SyndicateSequencingChain[]"
      },
      {
        "name": "transactions",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulkAtomically",
    "inputs": [
      {
        "name": "chains",
        "type": "address[]",
        "internalType": "contract SyndicateSequencingChain[]"
      },
      {
        "name": "transactions",
        "type": "bytes[][]",
        "internalType": "bytes[][]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "InputLengthMismatchError",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AtomicSequencerImplementation {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601557610533908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806327fe99dc146102885763f40fa8111461002f575f80fd5b346102255761003d366103e6565b92908215801561027e575b610256575f929192917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe182360301925b81811061008157005b73ffffffffffffffffffffffffffffffffffffffff6100a96100a4838589610456565b610466565b169086811015610229578060051b840135858112156102255784019182359267ffffffffffffffff84116102255760208101908460051b803603831361022557833b1561022557946040929192519586937fcdafb9780000000000000000000000000000000000000000000000000000000085528260248601602060048801525260448086019286010193925f917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc181360301905b8284106101a65750505050505091815f81819503925af191821561019b5760019261018b575b5001610078565b5f61019591610487565b5f610184565b6040513d5f823e3d90fd5b919395909294967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc908203018652863583811215610225578201906040602083013592019167ffffffffffffffff81116102255780360383136102255761021360209283926001956104f5565b9801960194019189969594939161015e565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f82a8734a000000000000000000000000000000000000000000000000000000005f5260045ffd5b5083831415610048565b3461022557610296366103e6565b9290821580156103ab575b610256575f929192917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe182360301925b8181106102da57005b73ffffffffffffffffffffffffffffffffffffffff6102fd6100a4838589610456565b169086811015610229578060051b8401358581121561022557840180359067ffffffffffffffff821161022557602001813603811361022557833b1561022557610381935f92836040518097819582947f46e2cc090000000000000000000000000000000000000000000000000000000084526020600485015260248401916104f5565b03925af191821561019b5760019261039b575b50016102d1565b5f6103a591610487565b87610394565b50838314156102a1565b9181601f840112156102255782359167ffffffffffffffff8311610225576020808501948460051b01011161022557565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102255760043567ffffffffffffffff8111610225578161042f916004016103b5565b929092916024359067ffffffffffffffff821161022557610452916004016103b5565b9091565b91908110156102295760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036102255790565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104c857604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x053\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c'\xFE\x99\xDC\x14a\x02\x88Wc\xF4\x0F\xA8\x11\x14a\0/W_\x80\xFD[4a\x02%Wa\0=6a\x03\xE6V[\x92\x90\x82\x15\x80\x15a\x02~W[a\x02VW_\x92\x91\x92\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x826\x03\x01\x92[\x81\x81\x10a\0\x81W\0[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\0\xA9a\0\xA4\x83\x85\x89a\x04VV[a\x04fV[\x16\x90\x86\x81\x10\x15a\x02)W\x80`\x05\x1B\x84\x015\x85\x81\x12\x15a\x02%W\x84\x01\x91\x825\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11a\x02%W` \x81\x01\x90\x84`\x05\x1B\x806\x03\x83\x13a\x02%W\x83;\x15a\x02%W\x94`@\x92\x91\x92Q\x95\x86\x93\x7F\xCD\xAF\xB9x\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x82`$\x86\x01` `\x04\x88\x01RR`D\x80\x86\x01\x92\x86\x01\x01\x93\x92_\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1\x816\x03\x01\x90[\x82\x84\x10a\x01\xA6WPPPPPP\x91\x81_\x81\x81\x95\x03\x92Z\xF1\x91\x82\x15a\x01\x9BW`\x01\x92a\x01\x8BW[P\x01a\0xV[_a\x01\x95\x91a\x04\x87V[_a\x01\x84V[`@Q=_\x82>=\x90\xFD[\x91\x93\x95\x90\x92\x94\x96\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBC\x90\x82\x03\x01\x86R\x865\x83\x81\x12\x15a\x02%W\x82\x01\x90`@` \x83\x015\x92\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02%W\x806\x03\x83\x13a\x02%Wa\x02\x13` \x92\x83\x92`\x01\x95a\x04\xF5V[\x98\x01\x96\x01\x94\x01\x91\x89\x96\x95\x94\x93\x91a\x01^V[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7F\x82\xA8sJ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P\x83\x83\x14\x15a\0HV[4a\x02%Wa\x02\x966a\x03\xE6V[\x92\x90\x82\x15\x80\x15a\x03\xABW[a\x02VW_\x92\x91\x92\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x826\x03\x01\x92[\x81\x81\x10a\x02\xDAW\0[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\xFDa\0\xA4\x83\x85\x89a\x04VV[\x16\x90\x86\x81\x10\x15a\x02)W\x80`\x05\x1B\x84\x015\x85\x81\x12\x15a\x02%W\x84\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02%W` \x01\x816\x03\x81\x13a\x02%W\x83;\x15a\x02%Wa\x03\x81\x93_\x92\x83`@Q\x80\x97\x81\x95\x82\x94\x7FF\xE2\xCC\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R` `\x04\x85\x01R`$\x84\x01\x91a\x04\xF5V[\x03\x92Z\xF1\x91\x82\x15a\x01\x9BW`\x01\x92a\x03\x9BW[P\x01a\x02\xD1V[_a\x03\xA5\x91a\x04\x87V[\x87a\x03\x94V[P\x83\x83\x14\x15a\x02\xA1V[\x91\x81`\x1F\x84\x01\x12\x15a\x02%W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02%W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x02%WV[`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC\x82\x01\x12a\x02%W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02%W\x81a\x04/\x91`\x04\x01a\x03\xB5V[\x92\x90\x92\x91`$5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02%Wa\x04R\x91`\x04\x01a\x03\xB5V[\x90\x91V[\x91\x90\x81\x10\x15a\x02)W`\x05\x1B\x01\x90V[5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02%W\x90V[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xC8W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c806327fe99dc146102885763f40fa8111461002f575f80fd5b346102255761003d366103e6565b92908215801561027e575b610256575f929192917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe182360301925b81811061008157005b73ffffffffffffffffffffffffffffffffffffffff6100a96100a4838589610456565b610466565b169086811015610229578060051b840135858112156102255784019182359267ffffffffffffffff84116102255760208101908460051b803603831361022557833b1561022557946040929192519586937fcdafb9780000000000000000000000000000000000000000000000000000000085528260248601602060048801525260448086019286010193925f917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc181360301905b8284106101a65750505050505091815f81819503925af191821561019b5760019261018b575b5001610078565b5f61019591610487565b5f610184565b6040513d5f823e3d90fd5b919395909294967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc908203018652863583811215610225578201906040602083013592019167ffffffffffffffff81116102255780360383136102255761021360209283926001956104f5565b9801960194019189969594939161015e565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f82a8734a000000000000000000000000000000000000000000000000000000005f5260045ffd5b5083831415610048565b3461022557610296366103e6565b9290821580156103ab575b610256575f929192917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe182360301925b8181106102da57005b73ffffffffffffffffffffffffffffffffffffffff6102fd6100a4838589610456565b169086811015610229578060051b8401358581121561022557840180359067ffffffffffffffff821161022557602001813603811361022557833b1561022557610381935f92836040518097819582947f46e2cc090000000000000000000000000000000000000000000000000000000084526020600485015260248401916104f5565b03925af191821561019b5760019261039b575b50016102d1565b5f6103a591610487565b87610394565b50838314156102a1565b9181601f840112156102255782359167ffffffffffffffff8311610225576020808501948460051b01011161022557565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102255760043567ffffffffffffffff8111610225578161042f916004016103b5565b929092916024359067ffffffffffffffff821161022557610452916004016103b5565b9091565b91908110156102295760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036102255790565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104c857604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c'\xFE\x99\xDC\x14a\x02\x88Wc\xF4\x0F\xA8\x11\x14a\0/W_\x80\xFD[4a\x02%Wa\0=6a\x03\xE6V[\x92\x90\x82\x15\x80\x15a\x02~W[a\x02VW_\x92\x91\x92\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x826\x03\x01\x92[\x81\x81\x10a\0\x81W\0[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\0\xA9a\0\xA4\x83\x85\x89a\x04VV[a\x04fV[\x16\x90\x86\x81\x10\x15a\x02)W\x80`\x05\x1B\x84\x015\x85\x81\x12\x15a\x02%W\x84\x01\x91\x825\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11a\x02%W` \x81\x01\x90\x84`\x05\x1B\x806\x03\x83\x13a\x02%W\x83;\x15a\x02%W\x94`@\x92\x91\x92Q\x95\x86\x93\x7F\xCD\xAF\xB9x\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x82`$\x86\x01` `\x04\x88\x01RR`D\x80\x86\x01\x92\x86\x01\x01\x93\x92_\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1\x816\x03\x01\x90[\x82\x84\x10a\x01\xA6WPPPPPP\x91\x81_\x81\x81\x95\x03\x92Z\xF1\x91\x82\x15a\x01\x9BW`\x01\x92a\x01\x8BW[P\x01a\0xV[_a\x01\x95\x91a\x04\x87V[_a\x01\x84V[`@Q=_\x82>=\x90\xFD[\x91\x93\x95\x90\x92\x94\x96\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBC\x90\x82\x03\x01\x86R\x865\x83\x81\x12\x15a\x02%W\x82\x01\x90`@` \x83\x015\x92\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02%W\x806\x03\x83\x13a\x02%Wa\x02\x13` \x92\x83\x92`\x01\x95a\x04\xF5V[\x98\x01\x96\x01\x94\x01\x91\x89\x96\x95\x94\x93\x91a\x01^V[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7F\x82\xA8sJ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P\x83\x83\x14\x15a\0HV[4a\x02%Wa\x02\x966a\x03\xE6V[\x92\x90\x82\x15\x80\x15a\x03\xABW[a\x02VW_\x92\x91\x92\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x826\x03\x01\x92[\x81\x81\x10a\x02\xDAW\0[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\xFDa\0\xA4\x83\x85\x89a\x04VV[\x16\x90\x86\x81\x10\x15a\x02)W\x80`\x05\x1B\x84\x015\x85\x81\x12\x15a\x02%W\x84\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02%W` \x01\x816\x03\x81\x13a\x02%W\x83;\x15a\x02%Wa\x03\x81\x93_\x92\x83`@Q\x80\x97\x81\x95\x82\x94\x7FF\xE2\xCC\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R` `\x04\x85\x01R`$\x84\x01\x91a\x04\xF5V[\x03\x92Z\xF1\x91\x82\x15a\x01\x9BW`\x01\x92a\x03\x9BW[P\x01a\x02\xD1V[_a\x03\xA5\x91a\x04\x87V[\x87a\x03\x94V[P\x83\x83\x14\x15a\x02\xA1V[\x91\x81`\x1F\x84\x01\x12\x15a\x02%W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02%W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x02%WV[`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC\x82\x01\x12a\x02%W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02%W\x81a\x04/\x91`\x04\x01a\x03\xB5V[\x92\x90\x92\x91`$5\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02%Wa\x04R\x91`\x04\x01a\x03\xB5V[\x90\x91V[\x91\x90\x81\x10\x15a\x02)W`\x05\x1B\x01\x90V[5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02%W\x90V[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xC8W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`\x1F\x82` \x94\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93\x81\x86R\x86\x86\x017_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InputLengthMismatchError()` and selector `0x82a8734a`.
```solidity
error InputLengthMismatchError();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InputLengthMismatchError;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InputLengthMismatchError>
        for UnderlyingRustTuple<'_> {
            fn from(value: InputLengthMismatchError) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InputLengthMismatchError {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InputLengthMismatchError {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InputLengthMismatchError()";
            const SELECTOR: [u8; 4] = [130u8, 168u8, 115u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransactionsAtomically(address[],bytes[])` and selector `0x27fe99dc`.
```solidity
function processTransactionsAtomically(address[] memory chains, bytes[] memory transactions) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsAtomicallyCall {
        #[allow(missing_docs)]
        pub chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        #[allow(missing_docs)]
        pub transactions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
    }
    ///Container type for the return parameters of the [`processTransactionsAtomically(address[],bytes[])`](processTransactionsAtomicallyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsAtomicallyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsAtomicallyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsAtomicallyCall) -> Self {
                    (value.chains, value.transactions)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsAtomicallyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chains: tuple.0,
                        transactions: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsAtomicallyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsAtomicallyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsAtomicallyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl processTransactionsAtomicallyReturn {
            fn _tokenize(
                &self,
            ) -> <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsAtomicallyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsAtomicallyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsAtomically(address[],bytes[])";
            const SELECTOR: [u8; 4] = [39u8, 254u8, 153u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.chains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.transactions),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                processTransactionsAtomicallyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransactionsBulkAtomically(address[],bytes[][])` and selector `0xf40fa811`.
```solidity
function processTransactionsBulkAtomically(address[] memory chains, bytes[][] memory transactions) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkAtomicallyCall {
        #[allow(missing_docs)]
        pub chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        #[allow(missing_docs)]
        pub transactions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        >,
    }
    ///Container type for the return parameters of the [`processTransactionsBulkAtomically(address[],bytes[][])`](processTransactionsBulkAtomicallyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkAtomicallyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkAtomicallyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkAtomicallyCall) -> Self {
                    (value.chains, value.transactions)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkAtomicallyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chains: tuple.0,
                        transactions: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkAtomicallyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkAtomicallyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkAtomicallyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl processTransactionsBulkAtomicallyReturn {
            fn _tokenize(
                &self,
            ) -> <processTransactionsBulkAtomicallyCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulkAtomicallyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulkAtomicallyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulkAtomically(address[],bytes[][])";
            const SELECTOR: [u8; 4] = [244u8, 15u8, 168u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.chains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Array<
                            alloy::sol_types::sol_data::Bytes,
                        >,
                    > as alloy_sol_types::SolType>::tokenize(&self.transactions),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                processTransactionsBulkAtomicallyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AtomicSequencerImplementation`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum AtomicSequencerImplementationCalls {
        #[allow(missing_docs)]
        processTransactionsAtomically(processTransactionsAtomicallyCall),
        #[allow(missing_docs)]
        processTransactionsBulkAtomically(processTransactionsBulkAtomicallyCall),
    }
    #[automatically_derived]
    impl AtomicSequencerImplementationCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [39u8, 254u8, 153u8, 220u8],
            [244u8, 15u8, 168u8, 17u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicSequencerImplementationCalls {
        const NAME: &'static str = "AtomicSequencerImplementationCalls";
        const MIN_DATA_LENGTH: usize = 128usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::processTransactionsAtomically(_) => {
                    <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulkAtomically(_) => {
                    <processTransactionsBulkAtomicallyCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls>] = &[
                {
                    fn processTransactionsAtomically(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls> {
                        <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                AtomicSequencerImplementationCalls::processTransactionsAtomically,
                            )
                    }
                    processTransactionsAtomically
                },
                {
                    fn processTransactionsBulkAtomically(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls> {
                        <processTransactionsBulkAtomicallyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                AtomicSequencerImplementationCalls::processTransactionsBulkAtomically,
                            )
                    }
                    processTransactionsBulkAtomically
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls>] = &[
                {
                    fn processTransactionsAtomically(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls> {
                        <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AtomicSequencerImplementationCalls::processTransactionsAtomically,
                            )
                    }
                    processTransactionsAtomically
                },
                {
                    fn processTransactionsBulkAtomically(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls> {
                        <processTransactionsBulkAtomicallyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AtomicSequencerImplementationCalls::processTransactionsBulkAtomically,
                            )
                    }
                    processTransactionsBulkAtomically
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::processTransactionsAtomically(inner) => {
                    <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulkAtomically(inner) => {
                    <processTransactionsBulkAtomicallyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::processTransactionsAtomically(inner) => {
                    <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulkAtomically(inner) => {
                    <processTransactionsBulkAtomicallyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AtomicSequencerImplementation`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum AtomicSequencerImplementationErrors {
        #[allow(missing_docs)]
        InputLengthMismatchError(InputLengthMismatchError),
    }
    #[automatically_derived]
    impl AtomicSequencerImplementationErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[130u8, 168u8, 115u8, 74u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicSequencerImplementationErrors {
        const NAME: &'static str = "AtomicSequencerImplementationErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InputLengthMismatchError(_) => {
                    <InputLengthMismatchError as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AtomicSequencerImplementationErrors>] = &[
                {
                    fn InputLengthMismatchError(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationErrors> {
                        <InputLengthMismatchError as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                AtomicSequencerImplementationErrors::InputLengthMismatchError,
                            )
                    }
                    InputLengthMismatchError
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<AtomicSequencerImplementationErrors>] = &[
                {
                    fn InputLengthMismatchError(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationErrors> {
                        <InputLengthMismatchError as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                AtomicSequencerImplementationErrors::InputLengthMismatchError,
                            )
                    }
                    InputLengthMismatchError
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InputLengthMismatchError(inner) => {
                    <InputLengthMismatchError as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InputLengthMismatchError(inner) => {
                    <InputLengthMismatchError as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AtomicSequencerImplementation`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerImplementationInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AtomicSequencerImplementationInstance<P, N> {
        AtomicSequencerImplementationInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AtomicSequencerImplementationInstance<P, N>>,
    > {
        AtomicSequencerImplementationInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        AtomicSequencerImplementationInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`AtomicSequencerImplementation`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AtomicSequencerImplementation`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AtomicSequencerImplementationInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for AtomicSequencerImplementationInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AtomicSequencerImplementationInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerImplementationInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`AtomicSequencerImplementation`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerImplementationInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AtomicSequencerImplementationInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> AtomicSequencerImplementationInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AtomicSequencerImplementationInstance<P, N> {
            AtomicSequencerImplementationInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerImplementationInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`processTransactionsAtomically`] function.
        pub fn processTransactionsAtomically(
            &self,
            chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            transactions: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, processTransactionsAtomicallyCall, N> {
            self.call_builder(
                &processTransactionsAtomicallyCall {
                    chains,
                    transactions,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulkAtomically`] function.
        pub fn processTransactionsBulkAtomically(
            &self,
            chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            transactions: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            >,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            processTransactionsBulkAtomicallyCall,
            N,
        > {
            self.call_builder(
                &processTransactionsBulkAtomicallyCall {
                    chains,
                    transactions,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerImplementationInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
