/**

Generated by the following Solidity interface...
```solidity
interface SyndicateAccumulator {
    event TransactionProcessed(address indexed sender, bytes data);

    constructor();

    function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
    function accumulator() external view returns (bytes32);
    function isArbChain() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ACCUMULATOR_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "accumulator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isArbChain",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateAccumulator {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523461003057610011610230565b610019610035565b61024c61031c82396080518161015b015261024c90f35b61003b565b60405190565b5f80fd5b60018060a01b031690565b90565b61006161005c6100669261003f565b61004a565b61003f565b90565b6100729061004d565b90565b61007e90610069565b90565b61008b6064610075565b90565b6100979061004d565b90565b6100a39061008e565b90565b90565b90565b6100c06100bb6100c5926100a9565b61004a565b6100a6565b90565b151590565b6100d790516100c8565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610102906100da565b810190811060018060401b0382111761011a57604052565b6100e4565b60e01b90565b5f80fd5b610132816100a6565b0361013957565b5f80fd5b9050519061014a82610129565b565b9060208282031261016557610162915f0161013d565b90565b610125565b5f0190565b610177610035565b3d5f823e3d90fd5b60209181520190565b60207f6c65640000000000000000000000000000000000000000000000000000000000917f41726253797320707265636f6d70696c652076616c69646174696f6e206661695f8201520152565b6101e2602360409261017f565b6101eb81610188565b0190565b6102049060208101905f8183039101526101d5565b90565b1561020e57565b610216610035565b62461bcd60e51b81528061022c600482016101ef565b0390fd5b61024061023b610081565b61009a565b3b61025361024d5f6100ac565b916100a6565b1160805261026a61026460806100cd565b156100c8565b801561027c575b61027a90610207565b565b506102a8602061029261028d610081565b61009a565b63a3b1b31d906102a0610035565b93849261011f565b825281806102b86004820161016a565b03915afa80156103165761027a915f916102e8575b506102e06102da5f6100ac565b916100a6565b119050610271565b610309915060203d811161030f575b61030181836100f8565b81019061014c565b5f6102cd565b503d6102f7565b61016f56fe60806040526004361015610013575b6101d9565b61001d5f3561004c565b8063033811541461004757806363d96437146100425763ea161ce60361000e576101a4565b610124565b610094565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b90565b61007b9061006f565b9052565b9190610092905f60208501940190610072565b565b346100c4576100a4366004610060565b6100c06100af61020a565b6100b7610052565b9182918261007f565b0390f35b610058565b90565b5f1b90565b6100e56100e06100ea926100c9565b6100cc565b61006f565b90565b6101167f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b906100d1565b90565b6101216100ed565b90565b3461015457610134366004610060565b61015061013f610119565b610147610052565b9182918261007f565b0390f35b610058565b7f000000000000000000000000000000000000000000000000000000000000000090565b151590565b61018b9061017d565b9052565b91906101a2905f60208501940190610182565b565b346101d4576101b4366004610060565b6101d06101bf610159565b6101c7610052565b9182918261018f565b0390f35b610058565b5f80fd5b5f90565b5f1c90565b90565b6101f56101fa916101e1565b6101e6565b90565b61020790546101e9565b90565b6102126101dd565b506102255f61021f610228565b016101fd565b90565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b909056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\x000Wa\0\x11a\x020V[a\0\x19a\x005V[a\x02La\x03\x1C\x829`\x80Q\x81a\x01[\x01Ra\x02L\x90\xF3[a\0;V[`@Q\x90V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0aa\0\\a\0f\x92a\0?V[a\0JV[a\0?V[\x90V[a\0r\x90a\0MV[\x90V[a\0~\x90a\0iV[\x90V[a\0\x8B`da\0uV[\x90V[a\0\x97\x90a\0MV[\x90V[a\0\xA3\x90a\0\x8EV[\x90V[\x90V[\x90V[a\0\xC0a\0\xBBa\0\xC5\x92a\0\xA9V[a\0JV[a\0\xA6V[\x90V[\x15\x15\x90V[a\0\xD7\x90Qa\0\xC8V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01\x02\x90a\0\xDAV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x01\x1AW`@RV[a\0\xE4V[`\xE0\x1B\x90V[_\x80\xFD[a\x012\x81a\0\xA6V[\x03a\x019WV[_\x80\xFD[\x90PQ\x90a\x01J\x82a\x01)V[V[\x90` \x82\x82\x03\x12a\x01eWa\x01b\x91_\x01a\x01=V[\x90V[a\x01%V[_\x01\x90V[a\x01wa\x005V[=_\x82>=\x90\xFD[` \x91\x81R\x01\x90V[` \x7Fled\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbSys precompile validation fai_\x82\x01R\x01RV[a\x01\xE2`#`@\x92a\x01\x7FV[a\x01\xEB\x81a\x01\x88V[\x01\x90V[a\x02\x04\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xD5V[\x90V[\x15a\x02\x0EWV[a\x02\x16a\x005V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02,`\x04\x82\x01a\x01\xEFV[\x03\x90\xFD[a\x02@a\x02;a\0\x81V[a\0\x9AV[;a\x02Sa\x02M_a\0\xACV[\x91a\0\xA6V[\x11`\x80Ra\x02ja\x02d`\x80a\0\xCDV[\x15a\0\xC8V[\x80\x15a\x02|W[a\x02z\x90a\x02\x07V[V[Pa\x02\xA8` a\x02\x92a\x02\x8Da\0\x81V[a\0\x9AV[c\xA3\xB1\xB3\x1D\x90a\x02\xA0a\x005V[\x93\x84\x92a\x01\x1FV[\x82R\x81\x80a\x02\xB8`\x04\x82\x01a\x01jV[\x03\x91Z\xFA\x80\x15a\x03\x16Wa\x02z\x91_\x91a\x02\xE8W[Pa\x02\xE0a\x02\xDA_a\0\xACV[\x91a\0\xA6V[\x11\x90Pa\x02qV[a\x03\t\x91P` =\x81\x11a\x03\x0FW[a\x03\x01\x81\x83a\0\xF8V[\x81\x01\x90a\x01LV[_a\x02\xCDV[P=a\x02\xF7V[a\x01oV\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xD9V[a\0\x1D_5a\0LV[\x80c\x038\x11T\x14a\0GW\x80cc\xD9d7\x14a\0BWc\xEA\x16\x1C\xE6\x03a\0\x0EWa\x01\xA4V[a\x01$V[a\0\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x90V[a\0{\x90a\0oV[\x90RV[\x91\x90a\0\x92\x90_` \x85\x01\x94\x01\x90a\0rV[V[4a\0\xC4Wa\0\xA46`\x04a\0`V[a\0\xC0a\0\xAFa\x02\nV[a\0\xB7a\0RV[\x91\x82\x91\x82a\0\x7FV[\x03\x90\xF3[a\0XV[\x90V[_\x1B\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xC9V[a\0\xCCV[a\0oV[\x90V[a\x01\x16\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\0\xD1V[\x90V[a\x01!a\0\xEDV[\x90V[4a\x01TWa\x0146`\x04a\0`V[a\x01Pa\x01?a\x01\x19V[a\x01Ga\0RV[\x91\x82\x91\x82a\0\x7FV[\x03\x90\xF3[a\0XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x15\x15\x90V[a\x01\x8B\x90a\x01}V[\x90RV[\x91\x90a\x01\xA2\x90_` \x85\x01\x94\x01\x90a\x01\x82V[V[4a\x01\xD4Wa\x01\xB46`\x04a\0`V[a\x01\xD0a\x01\xBFa\x01YV[a\x01\xC7a\0RV[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x01\xF5a\x01\xFA\x91a\x01\xE1V[a\x01\xE6V[\x90V[a\x02\x07\x90Ta\x01\xE9V[\x90V[a\x02\x12a\x01\xDDV[Pa\x02%_a\x02\x1Fa\x02(V[\x01a\x01\xFDV[\x90V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6101d9565b61001d5f3561004c565b8063033811541461004757806363d96437146100425763ea161ce60361000e576101a4565b610124565b610094565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b90565b61007b9061006f565b9052565b9190610092905f60208501940190610072565b565b346100c4576100a4366004610060565b6100c06100af61020a565b6100b7610052565b9182918261007f565b0390f35b610058565b90565b5f1b90565b6100e56100e06100ea926100c9565b6100cc565b61006f565b90565b6101167f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b906100d1565b90565b6101216100ed565b90565b3461015457610134366004610060565b61015061013f610119565b610147610052565b9182918261007f565b0390f35b610058565b7f000000000000000000000000000000000000000000000000000000000000000090565b151590565b61018b9061017d565b9052565b91906101a2905f60208501940190610182565b565b346101d4576101b4366004610060565b6101d06101bf610159565b6101c7610052565b9182918261018f565b0390f35b610058565b5f80fd5b5f90565b5f1c90565b90565b6101f56101fa916101e1565b6101e6565b90565b61020790546101e9565b90565b6102126101dd565b506102255f61021f610228565b016101fd565b90565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b909056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xD9V[a\0\x1D_5a\0LV[\x80c\x038\x11T\x14a\0GW\x80cc\xD9d7\x14a\0BWc\xEA\x16\x1C\xE6\x03a\0\x0EWa\x01\xA4V[a\x01$V[a\0\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x90V[a\0{\x90a\0oV[\x90RV[\x91\x90a\0\x92\x90_` \x85\x01\x94\x01\x90a\0rV[V[4a\0\xC4Wa\0\xA46`\x04a\0`V[a\0\xC0a\0\xAFa\x02\nV[a\0\xB7a\0RV[\x91\x82\x91\x82a\0\x7FV[\x03\x90\xF3[a\0XV[\x90V[_\x1B\x90V[a\0\xE5a\0\xE0a\0\xEA\x92a\0\xC9V[a\0\xCCV[a\0oV[\x90V[a\x01\x16\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\0\xD1V[\x90V[a\x01!a\0\xEDV[\x90V[4a\x01TWa\x0146`\x04a\0`V[a\x01Pa\x01?a\x01\x19V[a\x01Ga\0RV[\x91\x82\x91\x82a\0\x7FV[\x03\x90\xF3[a\0XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x15\x15\x90V[a\x01\x8B\x90a\x01}V[\x90RV[\x91\x90a\x01\xA2\x90_` \x85\x01\x94\x01\x90a\x01\x82V[V[4a\x01\xD4Wa\x01\xB46`\x04a\0`V[a\x01\xD0a\x01\xBFa\x01YV[a\x01\xC7a\0RV[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x01\xF5a\x01\xFA\x91a\x01\xE1V[a\x01\xE6V[\x90V[a\x02\x07\x90Ta\x01\xE9V[\x90V[a\x02\x12a\x01\xDDV[Pa\x02%_a\x02\x1Fa\x02(V[\x01a\x01\xFDV[\x90V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V",
    );
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ACCUMULATOR_STORAGE_LOCATION()` and selector `0x63d96437`.
```solidity
function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`ACCUMULATOR_STORAGE_LOCATION()`](ACCUMULATOR_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ACCUMULATOR_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ACCUMULATOR_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ACCUMULATOR_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [99u8, 217u8, 100u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `accumulator()` and selector `0x03381154`.
```solidity
function accumulator() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorCall {}
    ///Container type for the return parameters of the [`accumulator()`](accumulatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for accumulatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = accumulatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "accumulator()";
            const SELECTOR: [u8; 4] = [3u8, 56u8, 17u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isArbChain()` and selector `0xea161ce6`.
```solidity
function isArbChain() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArbChainCall {}
    ///Container type for the return parameters of the [`isArbChain()`](isArbChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArbChainReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArbChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: isArbChainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArbChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArbChainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isArbChainReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArbChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isArbChainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isArbChainReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isArbChain()";
            const SELECTOR: [u8; 4] = [234u8, 22u8, 28u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateAccumulator`](self) function calls.
    pub enum SyndicateAccumulatorCalls {
        #[allow(missing_docs)]
        ACCUMULATOR_STORAGE_LOCATION(ACCUMULATOR_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        accumulator(accumulatorCall),
        #[allow(missing_docs)]
        isArbChain(isArbChainCall),
    }
    #[automatically_derived]
    impl SyndicateAccumulatorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [3u8, 56u8, 17u8, 84u8],
            [99u8, 217u8, 100u8, 55u8],
            [234u8, 22u8, 28u8, 230u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateAccumulatorCalls {
        const NAME: &'static str = "SyndicateAccumulatorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(_) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::accumulator(_) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isArbChain(_) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateAccumulatorCalls>] = &[
                {
                    fn accumulator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateAccumulatorCalls> {
                        <accumulatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateAccumulatorCalls::accumulator)
                    }
                    accumulator
                },
                {
                    fn ACCUMULATOR_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateAccumulatorCalls> {
                        <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateAccumulatorCalls::ACCUMULATOR_STORAGE_LOCATION)
                    }
                    ACCUMULATOR_STORAGE_LOCATION
                },
                {
                    fn isArbChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateAccumulatorCalls> {
                        <isArbChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateAccumulatorCalls::isArbChain)
                    }
                    isArbChain
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isArbChain(inner) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isArbChain(inner) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateAccumulator`](self) events.
    pub enum SyndicateAccumulatorEvents {
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl SyndicateAccumulatorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateAccumulatorEvents {
        const NAME: &'static str = "SyndicateAccumulatorEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateAccumulatorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateAccumulator`](self) contract instance.

See the [wrapper's documentation](`SyndicateAccumulatorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateAccumulatorInstance<T, P, N> {
        SyndicateAccumulatorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateAccumulatorInstance<T, P, N>>,
    > {
        SyndicateAccumulatorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateAccumulatorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SyndicateAccumulator`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateAccumulator`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateAccumulatorInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateAccumulatorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateAccumulatorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateAccumulatorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateAccumulator`](self) contract instance.

See the [wrapper's documentation](`SyndicateAccumulatorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SyndicateAccumulatorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateAccumulatorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateAccumulatorInstance<T, P, N> {
            SyndicateAccumulatorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateAccumulatorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ACCUMULATOR_STORAGE_LOCATION`] function.
        pub fn ACCUMULATOR_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ACCUMULATOR_STORAGE_LOCATIONCall, N> {
            self.call_builder(
                &ACCUMULATOR_STORAGE_LOCATIONCall {
                },
            )
        }
        ///Creates a new call builder for the [`accumulator`] function.
        pub fn accumulator(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, accumulatorCall, N> {
            self.call_builder(&accumulatorCall {})
        }
        ///Creates a new call builder for the [`isArbChain`] function.
        pub fn isArbChain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isArbChainCall, N> {
            self.call_builder(&isArbChainCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateAccumulatorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
