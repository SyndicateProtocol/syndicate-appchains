/**

Generated by the following Solidity interface...
```solidity
interface SyndicateFactoryWrapper {
    type ModuleType is uint8;

    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error EnforcedPause();
    error ExpectedPause();
    error InvalidModuleType();
    error ZeroAddress();

    event CompleteSyndicateDeployed(uint256 indexed chainId, address indexed sequencingChain, address indexed permissionModule, ModuleType moduleType, address admin);
    event Paused(address account);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event Unpaused(address account);

    constructor(address admin, address _syndicateFactory, address _requireAndFactory, address _requireOrFactory);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function computeCompleteSyndicateAddresses(address admin, ModuleType moduleType, bytes32 moduleSalt, bytes32 chainSalt, uint256 chainId) external view returns (address permissionModuleAddress, address sequencingChainAddress);
    function deployCompleteSyndicate(uint256 appchainId, address admin, ModuleType moduleType, bytes32 moduleSalt, bytes32 chainSalt) external returns (address sequencingChain, address permissionModule, uint256 actualChainId);
    function deployWithRequireAndModule(uint256 appchainId, address admin, bytes32 moduleSalt, bytes32 chainSalt) external returns (address sequencingChain, address permissionModule, uint256 actualChainId);
    function deployWithRequireOrModule(uint256 appchainId, address admin, bytes32 moduleSalt, bytes32 chainSalt) external returns (address sequencingChain, address permissionModule, uint256 actualChainId);
    function getNamespacePrefix() external view returns (uint256);
    function getNextAutoChainId() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isChainIdUsed(uint256 chainId) external view returns (uint256);
    function pause() external;
    function paused() external view returns (bool);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function requireAndFactory() external view returns (address);
    function requireOrFactory() external view returns (address);
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function syndicateFactory() external view returns (address);
    function unpause() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_syndicateFactory",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requireAndFactory",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requireOrFactory",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "computeCompleteSyndicateAddresses",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "moduleType",
        "type": "uint8",
        "internalType": "enum SyndicateFactoryWrapper.ModuleType"
      },
      {
        "name": "moduleSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "permissionModuleAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "deployCompleteSyndicate",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "moduleType",
        "type": "uint8",
        "internalType": "enum SyndicateFactoryWrapper.ModuleType"
      },
      {
        "name": "moduleSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "sequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "permissionModule",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "actualChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deployWithRequireAndModule",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "moduleSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "sequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "permissionModule",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "actualChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deployWithRequireOrModule",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "moduleSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "chainSalt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "sequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "permissionModule",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "actualChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getNamespacePrefix",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getNextAutoChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isChainIdUsed",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "requireAndFactory",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract RequireAndModuleFactory"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "requireOrFactory",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract RequireOrModuleFactory"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "syndicateFactory",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract SyndicateFactory"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CompleteSyndicateDeployed",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "sequencingChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "permissionModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "moduleType",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum SyndicateFactoryWrapper.ModuleType"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Paused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpaused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "EnforcedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExpectedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleType",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateFactoryWrapper {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60e06040523461008d5761001d61001461017a565b92919091610289565b610025610092565b611ae661055082396080518181816109bb01528181610c9601528181610ef20152818161122f015281816114e701526115bc015260a05181818161090001528181610c2901526111bf015260c05181818161062f01528181610d8401526113910152611ae690f35b610098565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100c49061009c565b810190811060018060401b038211176100dc57604052565b6100a6565b906100f46100ed610092565b92836100ba565b565b5f80fd5b60018060a01b031690565b61010e906100fa565b90565b61011a81610105565b0361012157565b5f80fd5b9050519061013282610111565b565b6080818303126101755761014a825f8301610125565b9261017261015b8460208501610125565b936101698160408601610125565b93606001610125565b90565b6100f6565b6101986120368038038061018d816100e1565b928339810190610134565b90919293565b90565b90565b6101b86101b36101bd9261019e565b6101a1565b6100fa565b90565b6101c9906101a4565b90565b5f0190565b90565b5f1b90565b6101ed6101e86101f29261019e565b6101d4565b6101d1565b90565b6101fe5f6101d9565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b61023961023461023e926100fa565b6101a1565b6100fa565b90565b61024a90610225565b90565b61025690610241565b90565b61026290610225565b90565b61026e90610259565b90565b61027a90610225565b90565b61028690610271565b90565b92916102936103dd565b836102ae6102a86102a35f6101c0565b610105565b91610105565b148015610371575b801561034f575b801561032d575b610311576102fc610304926102f661030c966102e86102e16101f5565b829061043e565b506102f1610201565b61043e565b5061024d565b608052610265565b60a05261027d565b60c052565b5f63d92e233d60e01b815280610329600482016101cc565b0390fd5b508261034961034361033e5f6101c0565b610105565b91610105565b146102c4565b508061036b6103656103605f6101c0565b610105565b91610105565b146102bd565b508161038d6103876103825f6101c0565b610105565b91610105565b146102b6565b9061039f60ff916101d4565b9181191691161790565b151590565b6103b7906103a9565b90565b90565b906103d26103cd6103d9926103ae565b6103ba565b8254610393565b9055565b6103e85f60016103bd565b565b5f90565b6103f7906101d1565b90565b90610404906103ee565b5f5260205260405f2090565b61041990610225565b90565b61042590610410565b90565b906104329061041c565b5f5260205260405f2090565b6104466103ea565b5061045b610455828490610515565b156103a9565b5f146104e357610482600161047d5f6104758186906103fa565b018590610428565b6103bd565b9061048b610542565b906104c86104c26104bc7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956103ee565b9261041c565b9261041c565b926104d1610092565b806104db816101cc565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b610500610505916104e9565b6104ee565b90565b61051290546104f4565b90565b61053b915f610530610536936105296103ea565b50826103fa565b01610428565b610508565b90565b5f90565b61054a61053e565b50339056fe60806040526004361015610013575b610aa4565b61001d5f3561016c565b806301ffc9a7146101675780630827884714610162578063248a9ca31461015d5780632738ef09146101585780632f2ff15d1461015357806336568abe1461014e5780633f4ba83a146101495780634f045828146101445780635c975abb1461013f57806370c630961461013a5780637232c133146101355780638456cb59146101305780639048f4a51461012b57806391d1485414610126578063a217fddf14610121578063c45a21db1461011c578063c4d36f2b14610117578063c7d3643114610112578063d547741f1461010d578063daab2fe9146101085763ec87621c0361000e57610a6f565b610a0b565b610985565b610950565b6108c2565b610886565b61080b565b61079a565b610765565b610732565b6106fd565b6106aa565b6105f8565b6105bc565b610501565b6104cd565b610499565b610432565b6103cc565b610352565b6101f4565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61019581610180565b0361019c57565b5f80fd5b905035906101ad8261018c565b565b906020828203126101c8576101c5915f016101a0565b90565b61017c565b151590565b6101db906101cd565b9052565b91906101f2905f602085019401906101d2565b565b346102245761022061020f61020a3660046101af565b610aac565b610217610172565b918291826101df565b0390f35b610178565b60018060a01b031690565b61023d90610229565b90565b61024981610234565b0361025057565b5f80fd5b9050359061026182610240565b565b6002111561026d57565b5f80fd5b9050359061027e82610263565b565b90565b61028c81610280565b0361029357565b5f80fd5b905035906102a482610283565b565b90565b6102b2816102a6565b036102b957565b5f80fd5b905035906102ca826102a9565b565b919060a08382031261031d576102e4815f8501610254565b926102f28260208301610271565b9261031a6103038460408501610297565b936103118160608601610297565b936080016102bd565b90565b61017c565b61032b90610234565b9052565b91602061035092949361034960408201965f830190610322565b0190610322565b565b346103875761036e6103653660046102cc565b93929092610bef565b9061038361037a610172565b9283928361032f565b0390f35b610178565b906020828203126103a5576103a2915f01610297565b90565b61017c565b6103b390610280565b9052565b91906103ca905f602085019401906103aa565b565b346103fc576103f86103e76103e236600461038c565b610e8d565b6103ef610172565b918291826103b7565b0390f35b610178565b5f91031261040b57565b61017c565b610419906102a6565b9052565b9190610430905f60208501940190610410565b565b3461046257610442366004610401565b61045e61044d610edf565b610455610172565b9182918261041d565b0390f35b610178565b919060408382031261048f578061048361048c925f8601610297565b93602001610254565b90565b61017c565b5f0190565b346104c8576104b26104ac366004610467565b90610faf565b6104ba610172565b806104c481610494565b0390f35b610178565b346104fc576104e66104e0366004610467565b90610fbb565b6104ee610172565b806104f881610494565b0390f35b610178565b3461052f57610511366004610401565b610519611027565b610521610172565b8061052b81610494565b0390f35b610178565b919060a0838203126105855761054c815f85016102bd565b9261055a8260208301610254565b9261058261056b8460408501610271565b936105798160608601610297565b93608001610297565b90565b61017c565b6040906105b36105ba94969593966105a960608401985f850190610322565b6020830190610322565b0190610410565b565b346105f3576105ef6105db6105d2366004610534565b9392909261146b565b6105e6939193610172565b9384938461058a565b0390f35b610178565b3461062857610608366004610401565b6106246106136114bd565b61061b610172565b918291826101df565b0390f35b610178565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61066861066361066d92610229565b610651565b610229565b90565b61067990610654565b90565b61068590610670565b90565b6106919061067c565b9052565b91906106a8905f60208501940190610688565b565b346106da576106ba366004610401565b6106d66106c561062d565b6106cd610172565b91829182610695565b0390f35b610178565b906020828203126106f8576106f5915f016102bd565b90565b61017c565b3461072d576107296107186107133660046106df565b6114d3565b610720610172565b9182918261041d565b0390f35b610178565b3461076057610742366004610401565b61074a61159f565b610752610172565b8061075c81610494565b0390f35b610178565b3461079557610775366004610401565b6107916107806115a9565b610788610172565b9182918261041d565b0390f35b610178565b346107cb576107c76107b66107b0366004610467565b90611665565b6107be610172565b918291826101df565b0390f35b610178565b90565b5f1b90565b6107ec6107e76107f1926107d0565b6107d3565b610280565b90565b6107fd5f6107d8565b90565b6108086107f4565b90565b3461083b5761081b366004610401565b610837610826610800565b61082e610172565b918291826103b7565b0390f35b610178565b60808183031261088157610856825f83016102bd565b9261087e6108678460208501610254565b936108758160408601610297565b93606001610297565b90565b61017c565b346108bd576108b96108a561089c366004610840565b929190916116c9565b6108b0939193610172565b9384938461058a565b0390f35b610178565b346108f9576108f56108e16108d8366004610840565b9291909161172d565b6108ec939193610172565b9384938461058a565b0390f35b610178565b7f000000000000000000000000000000000000000000000000000000000000000090565b61092b90610670565b90565b61093790610922565b9052565b919061094e905f6020850194019061092e565b565b3461098057610960366004610401565b61097c61096b6108fe565b610973610172565b9182918261093b565b0390f35b610178565b346109b45761099e610998366004610467565b90611781565b6109a6610172565b806109b081610494565b0390f35b610178565b7f000000000000000000000000000000000000000000000000000000000000000090565b6109e690610670565b90565b6109f2906109dd565b9052565b9190610a09905f602085019401906109e9565b565b34610a3b57610a1b366004610401565b610a37610a266109b9565b610a2e610172565b918291826109f6565b0390f35b610178565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610a6c610a40565b90565b34610a9f57610a7f366004610401565b610a9b610a8a610a64565b610a92610172565b918291826103b7565b0390f35b610178565b5f80fd5b5f90565b610ab4610aa8565b5080610acf610ac9637965db0b60e01b610180565b91610180565b14908115610adc575b5090565b610ae6915061178d565b5f610ad8565b5f90565b634e487b7160e01b5f52602160045260245ffd5b60021115610b0e57565b610af0565b90610b1d82610b04565b565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610b4790610b1f565b810190811067ffffffffffffffff821117610b6157604052565b610b29565b60e01b90565b90505190610b7982610240565b565b90602082820312610b9457610b91915f01610b6c565b90565b61017c565b916020610bba929493610bb360408201965f830190610322565b01906103aa565b565b610bc4610172565b3d5f823e3d90fd5b916020610bed929493610be660408201965f8301906103aa565b0190610410565b565b9190949394610bfc610aec565b50610c05610aec565b5080610c19610c135f610b13565b91610b13565b145f14610d625750602090610c4d7f0000000000000000000000000000000000000000000000000000000000000000610922565b610c6f635681706b949294610c7a610c63610172565b96879586948594610b66565b845260048401610b99565b03915afa8015610d5d576020915f91610d30575b50935b610cba7f00000000000000000000000000000000000000000000000000000000000000006109dd565b610cdc631f43fc8b949294610ce7610cd0610172565b96879586948594610b66565b845260048401610bcc565b03915afa908115610d2b575f91610cfd575b5090565b610d1e915060203d8111610d24575b610d168183610b3d565b810190610b7b565b5f610cf9565b503d610d0c565b610bbc565b610d509150823d8111610d56575b610d488183610b3d565b810190610b7b565b5f610c8e565b503d610d3e565b610bbc565b610d75610d6f6001610b13565b91610b13565b145f14610e2257602090610da87f000000000000000000000000000000000000000000000000000000000000000061067c565b610dca635681706b949294610dd5610dbe610172565b96879586948594610b66565b845260048401610b99565b03915afa8015610e1d576020915f91610df0575b5093610c91565b610e109150823d8111610e16575b610e088183610b3d565b810190610b7b565b5f610de9565b503d610dfe565b610bbc565b5f631092ef5760e11b815280610e3a60048201610494565b0390fd5b5f90565b610e4b90610280565b90565b90610e5890610e42565b5f5260205260405f2090565b5f1c90565b90565b610e78610e7d91610e64565b610e69565b90565b610e8a9054610e6c565b90565b6001610ea5610eab92610e9e610e3e565b505f610e4e565b01610e80565b90565b5f90565b90505190610ebf826102a9565b565b90602082820312610eda57610ed7915f01610eb2565b90565b61017c565b610ee7610eae565b50610f2c6020610f167f00000000000000000000000000000000000000000000000000000000000000006109dd565b638de6e28c90610f24610172565b938492610b66565b82528180610f3c60048201610494565b03915afa908115610f80575f91610f52575b5090565b610f73915060203d8111610f79575b610f6b8183610b3d565b810190610ec1565b5f610f4e565b503d610f61565b610bbc565b90610fa091610f9b610f9682610e8d565b6117b3565b610fa2565b565b90610fac9161180c565b50565b90610fb991610f85565b565b9080610fd6610fd0610fcb6118b7565b610234565b91610234565b03610fe757610fe4916118c4565b50565b5f63334bd91960e11b815280610fff60048201610494565b0390fd5b61101361100e6107f4565b6117b3565b61101b61101d565b565b6110256119da565b565b61102f611003565b565b90611049979695949392916110446119e4565b611176565b909192565b61106261105d611067926107d0565b610651565b610229565b90565b6110739061104e565b90565b61107f90610654565b90565b61108b90611076565b90565b91906040838203126110b657806110aa6110b3925f8601610b6c565b93602001610eb2565b90565b61017c565b6110c490610670565b90565b6110d0906110bb565b9052565b611109611110946110ff6060949897956110f5608086019a5f870190610410565b6020850190610322565b60408301906110c7565b01906103aa565b565b61112661112161112b926102a6565b610651565b6102a6565b90565b61113790610670565b90565b61114390610b13565b90565b61114f9061113a565b9052565b91602061117492949361116d60408201965f830190611146565b0190610322565b565b97959296975050508161119961119361118e5f61106a565b610234565b91610234565b1461144f57826111b16111ab5f610b13565b91610b13565b145f1461136f5760206111e37f0000000000000000000000000000000000000000000000000000000000000000610922565b91631b4bf5ba926112085f8693956112136111fc610172565b97889687958694610b66565b845260048401610b99565b03925af1801561136a576040915f9161133c575b50945b6112537f00000000000000000000000000000000000000000000000000000000000000006109dd565b61127e5f63d9852abf611289879b61126a8c611082565b611272610172565b9d8e9889978896610b66565b8652600486016110d4565b03925af1948515611337575f80919096611303575b5094918583908692936112e36112dd6112d77f234a62b8aa546909c227c14788b713d6f47eea68ae2abb5cbde4d2dc0f5522ba94611112565b9461112e565b9461112e565b946112f86112ef610172565b92839283611153565b0390a4919291929190565b905061132791955060403d8111611330575b61131f8183610b3d565b81019061108e565b5f95919561129e565b503d611315565b610bbc565b61135d915060203d8111611363575b6113558183610b3d565b810190610b7b565b5f611227565b503d61134b565b610bbc565b8261138361137d6001610b13565b91610b13565b145f146114335760206113b57f000000000000000000000000000000000000000000000000000000000000000061067c565b9163c70bacfe926113da5f8693956113e56113ce610172565b97889687958694610b66565b845260048401610b99565b03925af1801561142e576040915f91611400575b509461122a565b611421915060203d8111611427575b6114198183610b3d565b810190610b7b565b5f6113f9565b503d61140f565b610bbc565b5f631092ef5760e11b81528061144b60048201610494565b0390fd5b5f63d92e233d60e01b81528061146760048201610494565b0390fd5b906114919493929161147b610aec565b611483610aec565b61148b610eae565b91611031565b909192565b60ff1690565b6114a86114ad91610e64565b611496565b90565b6114ba905461149c565b90565b6114c5610aa8565b506114d060016114b0565b90565b6020611532916114e1610eae565b5061150b7f00000000000000000000000000000000000000000000000000000000000000006109dd565b611527637232c13361151b610172565b95869485938493610b66565b83526004830161041d565b03915afa908115611576575f91611548575b5090565b611569915060203d811161156f575b6115618183610b3d565b810190610ec1565b5f611544565b503d611557565b610bbc565b61158b6115866107f4565b6117b3565b611593611595565b565b61159d611a6e565b565b6115a761157b565b565b6115b1610eae565b506115f660206115e07f00000000000000000000000000000000000000000000000000000000000000006109dd565b63297f4c64906115ee610172565b938492610b66565b8252818061160660048201610494565b03915afa90811561164a575f9161161c575b5090565b61163d915060203d8111611643575b6116358183610b3d565b810190610ec1565b5f611618565b503d61162b565b610bbc565b906116599061112e565b5f5260205260405f2090565b61168b915f61168061168693611679610aa8565b5082610e4e565b0161164f565b6114b0565b90565b906116a59695949392916116a06119e4565b6116aa565b909192565b906116c296949593929150505092600191929361146b565b9192909190565b906116ee9392916116d8610aec565b6116e0610aec565b6116e8610eae565b9161168e565b909192565b9061170a9695949392916117056119e4565b61170f565b909192565b90611726969495939291505050925f91929361146b565b9192909190565b9061175293929161173c610aec565b611744610aec565b61174c610eae565b916116f3565b909192565b906117729161176d61176882610e8d565b6117b3565b611774565b565b9061177e916118c4565b50565b9061178b91611757565b565b611795610aa8565b506117af6117a96301ffc9a760e01b610180565b91610180565b1490565b6117c5906117bf6118b7565b90611a78565b565b906117d360ff916107d3565b9181191691161790565b6117e6906101cd565b90565b90565b906118016117fc611808926117dd565b6117e9565b82546117c7565b9055565b611814610aa8565b50611829611823828490611665565b156101cd565b5f146118b157611850600161184b5f611843818690610e4e565b01859061164f565b6117ec565b906118596118b7565b9061189661189061188a7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610e42565b9261112e565b9261112e565b9261189f610172565b806118a981610494565b0390a4600190565b50505f90565b6118bf610aec565b503390565b6118cc610aa8565b506118d8818390611665565b5f1461195f576118fe5f6118f95f6118f1818690610e4e565b01859061164f565b6117ec565b906119076118b7565b9061194461193e6119387ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610e42565b9261112e565b9261112e565b9261194d610172565b8061195781610494565b0390a4600190565b50505f90565b61196d611ab3565b61197561198c565b565b919061198a905f60208501940190610322565b565b6119975f60016117ec565b61199f6118b7565b6119d57f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa916119cc610172565b91829182611977565b0390a1565b6119e2611965565b565b6119ec6114bd565b6119f257565b5f63d93c066560e01b815280611a0a60048201610494565b0390fd5b611a166119e4565b611a1e611a20565b565b611a2b6001806117ec565b611a336118b7565b611a697f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891611a60610172565b91829182611977565b0390a1565b611a76611a0e565b565b90611a8d611a87838390611665565b156101cd565b611a95575050565b611aaf5f92839263e2517d3f60e01b845260048401610b99565b0390fd5b611ac4611abe6114bd565b156101cd565b611aca57565b5f638dfc202b60e01b815280611ae260048201610494565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xE0`@R4a\0\x8DWa\0\x1Da\0\x14a\x01zV[\x92\x91\x90\x91a\x02\x89V[a\0%a\0\x92V[a\x1A\xE6a\x05P\x829`\x80Q\x81\x81\x81a\t\xBB\x01R\x81\x81a\x0C\x96\x01R\x81\x81a\x0E\xF2\x01R\x81\x81a\x12/\x01R\x81\x81a\x14\xE7\x01Ra\x15\xBC\x01R`\xA0Q\x81\x81\x81a\t\0\x01R\x81\x81a\x0C)\x01Ra\x11\xBF\x01R`\xC0Q\x81\x81\x81a\x06/\x01R\x81\x81a\r\x84\x01Ra\x13\x91\x01Ra\x1A\xE6\x90\xF3[a\0\x98V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xC4\x90a\0\x9CV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xDCW`@RV[a\0\xA6V[\x90a\0\xF4a\0\xEDa\0\x92V[\x92\x83a\0\xBAV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x0E\x90a\0\xFAV[\x90V[a\x01\x1A\x81a\x01\x05V[\x03a\x01!WV[_\x80\xFD[\x90PQ\x90a\x012\x82a\x01\x11V[V[`\x80\x81\x83\x03\x12a\x01uWa\x01J\x82_\x83\x01a\x01%V[\x92a\x01ra\x01[\x84` \x85\x01a\x01%V[\x93a\x01i\x81`@\x86\x01a\x01%V[\x93``\x01a\x01%V[\x90V[a\0\xF6V[a\x01\x98a 6\x808\x03\x80a\x01\x8D\x81a\0\xE1V[\x92\x839\x81\x01\x90a\x014V[\x90\x91\x92\x93V[\x90V[\x90V[a\x01\xB8a\x01\xB3a\x01\xBD\x92a\x01\x9EV[a\x01\xA1V[a\0\xFAV[\x90V[a\x01\xC9\x90a\x01\xA4V[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01\xEDa\x01\xE8a\x01\xF2\x92a\x01\x9EV[a\x01\xD4V[a\x01\xD1V[\x90V[a\x01\xFE_a\x01\xD9V[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x029a\x024a\x02>\x92a\0\xFAV[a\x01\xA1V[a\0\xFAV[\x90V[a\x02J\x90a\x02%V[\x90V[a\x02V\x90a\x02AV[\x90V[a\x02b\x90a\x02%V[\x90V[a\x02n\x90a\x02YV[\x90V[a\x02z\x90a\x02%V[\x90V[a\x02\x86\x90a\x02qV[\x90V[\x92\x91a\x02\x93a\x03\xDDV[\x83a\x02\xAEa\x02\xA8a\x02\xA3_a\x01\xC0V[a\x01\x05V[\x91a\x01\x05V[\x14\x80\x15a\x03qW[\x80\x15a\x03OW[\x80\x15a\x03-W[a\x03\x11Wa\x02\xFCa\x03\x04\x92a\x02\xF6a\x03\x0C\x96a\x02\xE8a\x02\xE1a\x01\xF5V[\x82\x90a\x04>V[Pa\x02\xF1a\x02\x01V[a\x04>V[Pa\x02MV[`\x80Ra\x02eV[`\xA0Ra\x02}V[`\xC0RV[_c\xD9.#=`\xE0\x1B\x81R\x80a\x03)`\x04\x82\x01a\x01\xCCV[\x03\x90\xFD[P\x82a\x03Ia\x03Ca\x03>_a\x01\xC0V[a\x01\x05V[\x91a\x01\x05V[\x14a\x02\xC4V[P\x80a\x03ka\x03ea\x03`_a\x01\xC0V[a\x01\x05V[\x91a\x01\x05V[\x14a\x02\xBDV[P\x81a\x03\x8Da\x03\x87a\x03\x82_a\x01\xC0V[a\x01\x05V[\x91a\x01\x05V[\x14a\x02\xB6V[\x90a\x03\x9F`\xFF\x91a\x01\xD4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x03\xB7\x90a\x03\xA9V[\x90V[\x90V[\x90a\x03\xD2a\x03\xCDa\x03\xD9\x92a\x03\xAEV[a\x03\xBAV[\x82Ta\x03\x93V[\x90UV[a\x03\xE8_`\x01a\x03\xBDV[V[_\x90V[a\x03\xF7\x90a\x01\xD1V[\x90V[\x90a\x04\x04\x90a\x03\xEEV[_R` R`@_ \x90V[a\x04\x19\x90a\x02%V[\x90V[a\x04%\x90a\x04\x10V[\x90V[\x90a\x042\x90a\x04\x1CV[_R` R`@_ \x90V[a\x04Fa\x03\xEAV[Pa\x04[a\x04U\x82\x84\x90a\x05\x15V[\x15a\x03\xA9V[_\x14a\x04\xE3Wa\x04\x82`\x01a\x04}_a\x04u\x81\x86\x90a\x03\xFAV[\x01\x85\x90a\x04(V[a\x03\xBDV[\x90a\x04\x8Ba\x05BV[\x90a\x04\xC8a\x04\xC2a\x04\xBC\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x03\xEEV[\x92a\x04\x1CV[\x92a\x04\x1CV[\x92a\x04\xD1a\0\x92V[\x80a\x04\xDB\x81a\x01\xCCV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x05\0a\x05\x05\x91a\x04\xE9V[a\x04\xEEV[\x90V[a\x05\x12\x90Ta\x04\xF4V[\x90V[a\x05;\x91_a\x050a\x056\x93a\x05)a\x03\xEAV[P\x82a\x03\xFAV[\x01a\x04(V[a\x05\x08V[\x90V[_\x90V[a\x05Ja\x05>V[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n\xA4V[a\0\x1D_5a\x01lV[\x80c\x01\xFF\xC9\xA7\x14a\x01gW\x80c\x08'\x88G\x14a\x01bW\x80c$\x8A\x9C\xA3\x14a\x01]W\x80c'8\xEF\t\x14a\x01XW\x80c//\xF1]\x14a\x01SW\x80c6V\x8A\xBE\x14a\x01NW\x80c?K\xA8:\x14a\x01IW\x80cO\x04X(\x14a\x01DW\x80c\\\x97Z\xBB\x14a\x01?W\x80cp\xC60\x96\x14a\x01:W\x80cr2\xC13\x14a\x015W\x80c\x84V\xCBY\x14a\x010W\x80c\x90H\xF4\xA5\x14a\x01+W\x80c\x91\xD1HT\x14a\x01&W\x80c\xA2\x17\xFD\xDF\x14a\x01!W\x80c\xC4Z!\xDB\x14a\x01\x1CW\x80c\xC4\xD3o+\x14a\x01\x17W\x80c\xC7\xD3d1\x14a\x01\x12W\x80c\xD5Gt\x1F\x14a\x01\rW\x80c\xDA\xAB/\xE9\x14a\x01\x08Wc\xEC\x87b\x1C\x03a\0\x0EWa\noV[a\n\x0BV[a\t\x85V[a\tPV[a\x08\xC2V[a\x08\x86V[a\x08\x0BV[a\x07\x9AV[a\x07eV[a\x072V[a\x06\xFDV[a\x06\xAAV[a\x05\xF8V[a\x05\xBCV[a\x05\x01V[a\x04\xCDV[a\x04\x99V[a\x042V[a\x03\xCCV[a\x03RV[a\x01\xF4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x95\x81a\x01\x80V[\x03a\x01\x9CWV[_\x80\xFD[\x90P5\x90a\x01\xAD\x82a\x01\x8CV[V[\x90` \x82\x82\x03\x12a\x01\xC8Wa\x01\xC5\x91_\x01a\x01\xA0V[\x90V[a\x01|V[\x15\x15\x90V[a\x01\xDB\x90a\x01\xCDV[\x90RV[\x91\x90a\x01\xF2\x90_` \x85\x01\x94\x01\x90a\x01\xD2V[V[4a\x02$Wa\x02 a\x02\x0Fa\x02\n6`\x04a\x01\xAFV[a\n\xACV[a\x02\x17a\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02=\x90a\x02)V[\x90V[a\x02I\x81a\x024V[\x03a\x02PWV[_\x80\xFD[\x90P5\x90a\x02a\x82a\x02@V[V[`\x02\x11\x15a\x02mWV[_\x80\xFD[\x90P5\x90a\x02~\x82a\x02cV[V[\x90V[a\x02\x8C\x81a\x02\x80V[\x03a\x02\x93WV[_\x80\xFD[\x90P5\x90a\x02\xA4\x82a\x02\x83V[V[\x90V[a\x02\xB2\x81a\x02\xA6V[\x03a\x02\xB9WV[_\x80\xFD[\x90P5\x90a\x02\xCA\x82a\x02\xA9V[V[\x91\x90`\xA0\x83\x82\x03\x12a\x03\x1DWa\x02\xE4\x81_\x85\x01a\x02TV[\x92a\x02\xF2\x82` \x83\x01a\x02qV[\x92a\x03\x1Aa\x03\x03\x84`@\x85\x01a\x02\x97V[\x93a\x03\x11\x81``\x86\x01a\x02\x97V[\x93`\x80\x01a\x02\xBDV[\x90V[a\x01|V[a\x03+\x90a\x024V[\x90RV[\x91` a\x03P\x92\x94\x93a\x03I`@\x82\x01\x96_\x83\x01\x90a\x03\"V[\x01\x90a\x03\"V[V[4a\x03\x87Wa\x03na\x03e6`\x04a\x02\xCCV[\x93\x92\x90\x92a\x0B\xEFV[\x90a\x03\x83a\x03za\x01rV[\x92\x83\x92\x83a\x03/V[\x03\x90\xF3[a\x01xV[\x90` \x82\x82\x03\x12a\x03\xA5Wa\x03\xA2\x91_\x01a\x02\x97V[\x90V[a\x01|V[a\x03\xB3\x90a\x02\x80V[\x90RV[\x91\x90a\x03\xCA\x90_` \x85\x01\x94\x01\x90a\x03\xAAV[V[4a\x03\xFCWa\x03\xF8a\x03\xE7a\x03\xE26`\x04a\x03\x8CV[a\x0E\x8DV[a\x03\xEFa\x01rV[\x91\x82\x91\x82a\x03\xB7V[\x03\x90\xF3[a\x01xV[_\x91\x03\x12a\x04\x0BWV[a\x01|V[a\x04\x19\x90a\x02\xA6V[\x90RV[\x91\x90a\x040\x90_` \x85\x01\x94\x01\x90a\x04\x10V[V[4a\x04bWa\x04B6`\x04a\x04\x01V[a\x04^a\x04Ma\x0E\xDFV[a\x04Ua\x01rV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01xV[\x91\x90`@\x83\x82\x03\x12a\x04\x8FW\x80a\x04\x83a\x04\x8C\x92_\x86\x01a\x02\x97V[\x93` \x01a\x02TV[\x90V[a\x01|V[_\x01\x90V[4a\x04\xC8Wa\x04\xB2a\x04\xAC6`\x04a\x04gV[\x90a\x0F\xAFV[a\x04\xBAa\x01rV[\x80a\x04\xC4\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[4a\x04\xFCWa\x04\xE6a\x04\xE06`\x04a\x04gV[\x90a\x0F\xBBV[a\x04\xEEa\x01rV[\x80a\x04\xF8\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[4a\x05/Wa\x05\x116`\x04a\x04\x01V[a\x05\x19a\x10'V[a\x05!a\x01rV[\x80a\x05+\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[\x91\x90`\xA0\x83\x82\x03\x12a\x05\x85Wa\x05L\x81_\x85\x01a\x02\xBDV[\x92a\x05Z\x82` \x83\x01a\x02TV[\x92a\x05\x82a\x05k\x84`@\x85\x01a\x02qV[\x93a\x05y\x81``\x86\x01a\x02\x97V[\x93`\x80\x01a\x02\x97V[\x90V[a\x01|V[`@\x90a\x05\xB3a\x05\xBA\x94\x96\x95\x93\x96a\x05\xA9``\x84\x01\x98_\x85\x01\x90a\x03\"V[` \x83\x01\x90a\x03\"V[\x01\x90a\x04\x10V[V[4a\x05\xF3Wa\x05\xEFa\x05\xDBa\x05\xD26`\x04a\x054V[\x93\x92\x90\x92a\x14kV[a\x05\xE6\x93\x91\x93a\x01rV[\x93\x84\x93\x84a\x05\x8AV[\x03\x90\xF3[a\x01xV[4a\x06(Wa\x06\x086`\x04a\x04\x01V[a\x06$a\x06\x13a\x14\xBDV[a\x06\x1Ba\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x06ha\x06ca\x06m\x92a\x02)V[a\x06QV[a\x02)V[\x90V[a\x06y\x90a\x06TV[\x90V[a\x06\x85\x90a\x06pV[\x90V[a\x06\x91\x90a\x06|V[\x90RV[\x91\x90a\x06\xA8\x90_` \x85\x01\x94\x01\x90a\x06\x88V[V[4a\x06\xDAWa\x06\xBA6`\x04a\x04\x01V[a\x06\xD6a\x06\xC5a\x06-V[a\x06\xCDa\x01rV[\x91\x82\x91\x82a\x06\x95V[\x03\x90\xF3[a\x01xV[\x90` \x82\x82\x03\x12a\x06\xF8Wa\x06\xF5\x91_\x01a\x02\xBDV[\x90V[a\x01|V[4a\x07-Wa\x07)a\x07\x18a\x07\x136`\x04a\x06\xDFV[a\x14\xD3V[a\x07 a\x01rV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01xV[4a\x07`Wa\x07B6`\x04a\x04\x01V[a\x07Ja\x15\x9FV[a\x07Ra\x01rV[\x80a\x07\\\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[4a\x07\x95Wa\x07u6`\x04a\x04\x01V[a\x07\x91a\x07\x80a\x15\xA9V[a\x07\x88a\x01rV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01xV[4a\x07\xCBWa\x07\xC7a\x07\xB6a\x07\xB06`\x04a\x04gV[\x90a\x16eV[a\x07\xBEa\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x90V[_\x1B\x90V[a\x07\xECa\x07\xE7a\x07\xF1\x92a\x07\xD0V[a\x07\xD3V[a\x02\x80V[\x90V[a\x07\xFD_a\x07\xD8V[\x90V[a\x08\x08a\x07\xF4V[\x90V[4a\x08;Wa\x08\x1B6`\x04a\x04\x01V[a\x087a\x08&a\x08\0V[a\x08.a\x01rV[\x91\x82\x91\x82a\x03\xB7V[\x03\x90\xF3[a\x01xV[`\x80\x81\x83\x03\x12a\x08\x81Wa\x08V\x82_\x83\x01a\x02\xBDV[\x92a\x08~a\x08g\x84` \x85\x01a\x02TV[\x93a\x08u\x81`@\x86\x01a\x02\x97V[\x93``\x01a\x02\x97V[\x90V[a\x01|V[4a\x08\xBDWa\x08\xB9a\x08\xA5a\x08\x9C6`\x04a\x08@V[\x92\x91\x90\x91a\x16\xC9V[a\x08\xB0\x93\x91\x93a\x01rV[\x93\x84\x93\x84a\x05\x8AV[\x03\x90\xF3[a\x01xV[4a\x08\xF9Wa\x08\xF5a\x08\xE1a\x08\xD86`\x04a\x08@V[\x92\x91\x90\x91a\x17-V[a\x08\xEC\x93\x91\x93a\x01rV[\x93\x84\x93\x84a\x05\x8AV[\x03\x90\xF3[a\x01xV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t+\x90a\x06pV[\x90V[a\t7\x90a\t\"V[\x90RV[\x91\x90a\tN\x90_` \x85\x01\x94\x01\x90a\t.V[V[4a\t\x80Wa\t`6`\x04a\x04\x01V[a\t|a\tka\x08\xFEV[a\tsa\x01rV[\x91\x82\x91\x82a\t;V[\x03\x90\xF3[a\x01xV[4a\t\xB4Wa\t\x9Ea\t\x986`\x04a\x04gV[\x90a\x17\x81V[a\t\xA6a\x01rV[\x80a\t\xB0\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t\xE6\x90a\x06pV[\x90V[a\t\xF2\x90a\t\xDDV[\x90RV[\x91\x90a\n\t\x90_` \x85\x01\x94\x01\x90a\t\xE9V[V[4a\n;Wa\n\x1B6`\x04a\x04\x01V[a\n7a\n&a\t\xB9V[a\n.a\x01rV[\x91\x82\x91\x82a\t\xF6V[\x03\x90\xF3[a\x01xV[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\nla\n@V[\x90V[4a\n\x9FWa\n\x7F6`\x04a\x04\x01V[a\n\x9Ba\n\x8Aa\ndV[a\n\x92a\x01rV[\x91\x82\x91\x82a\x03\xB7V[\x03\x90\xF3[a\x01xV[_\x80\xFD[_\x90V[a\n\xB4a\n\xA8V[P\x80a\n\xCFa\n\xC9cye\xDB\x0B`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90\x81\x15a\n\xDCW[P\x90V[a\n\xE6\x91Pa\x17\x8DV[_a\n\xD8V[_\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x11\x15a\x0B\x0EWV[a\n\xF0V[\x90a\x0B\x1D\x82a\x0B\x04V[V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0BG\x90a\x0B\x1FV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0BaW`@RV[a\x0B)V[`\xE0\x1B\x90V[\x90PQ\x90a\x0By\x82a\x02@V[V[\x90` \x82\x82\x03\x12a\x0B\x94Wa\x0B\x91\x91_\x01a\x0BlV[\x90V[a\x01|V[\x91` a\x0B\xBA\x92\x94\x93a\x0B\xB3`@\x82\x01\x96_\x83\x01\x90a\x03\"V[\x01\x90a\x03\xAAV[V[a\x0B\xC4a\x01rV[=_\x82>=\x90\xFD[\x91` a\x0B\xED\x92\x94\x93a\x0B\xE6`@\x82\x01\x96_\x83\x01\x90a\x03\xAAV[\x01\x90a\x04\x10V[V[\x91\x90\x94\x93\x94a\x0B\xFCa\n\xECV[Pa\x0C\x05a\n\xECV[P\x80a\x0C\x19a\x0C\x13_a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\rbWP` \x90a\x0CM\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\"V[a\x0CocV\x81pk\x94\x92\x94a\x0Cza\x0Cca\x01rV[\x96\x87\x95\x86\x94\x85\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x91Z\xFA\x80\x15a\r]W` \x91_\x91a\r0W[P\x93[a\x0C\xBA\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[a\x0C\xDCc\x1FC\xFC\x8B\x94\x92\x94a\x0C\xE7a\x0C\xD0a\x01rV[\x96\x87\x95\x86\x94\x85\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\xCCV[\x03\x91Z\xFA\x90\x81\x15a\r+W_\x91a\x0C\xFDW[P\x90V[a\r\x1E\x91P` =\x81\x11a\r$W[a\r\x16\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x0C\xF9V[P=a\r\x0CV[a\x0B\xBCV[a\rP\x91P\x82=\x81\x11a\rVW[a\rH\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x0C\x8EV[P=a\r>V[a\x0B\xBCV[a\rua\ro`\x01a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\x0E\"W` \x90a\r\xA8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06|V[a\r\xCAcV\x81pk\x94\x92\x94a\r\xD5a\r\xBEa\x01rV[\x96\x87\x95\x86\x94\x85\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x91Z\xFA\x80\x15a\x0E\x1DW` \x91_\x91a\r\xF0W[P\x93a\x0C\x91V[a\x0E\x10\x91P\x82=\x81\x11a\x0E\x16W[a\x0E\x08\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\r\xE9V[P=a\r\xFEV[a\x0B\xBCV[_c\x10\x92\xEFW`\xE1\x1B\x81R\x80a\x0E:`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[_\x90V[a\x0EK\x90a\x02\x80V[\x90V[\x90a\x0EX\x90a\x0EBV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x0Exa\x0E}\x91a\x0EdV[a\x0EiV[\x90V[a\x0E\x8A\x90Ta\x0ElV[\x90V[`\x01a\x0E\xA5a\x0E\xAB\x92a\x0E\x9Ea\x0E>V[P_a\x0ENV[\x01a\x0E\x80V[\x90V[_\x90V[\x90PQ\x90a\x0E\xBF\x82a\x02\xA9V[V[\x90` \x82\x82\x03\x12a\x0E\xDAWa\x0E\xD7\x91_\x01a\x0E\xB2V[\x90V[a\x01|V[a\x0E\xE7a\x0E\xAEV[Pa\x0F,` a\x0F\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[c\x8D\xE6\xE2\x8C\x90a\x0F$a\x01rV[\x93\x84\x92a\x0BfV[\x82R\x81\x80a\x0F<`\x04\x82\x01a\x04\x94V[\x03\x91Z\xFA\x90\x81\x15a\x0F\x80W_\x91a\x0FRW[P\x90V[a\x0Fs\x91P` =\x81\x11a\x0FyW[a\x0Fk\x81\x83a\x0B=V[\x81\x01\x90a\x0E\xC1V[_a\x0FNV[P=a\x0FaV[a\x0B\xBCV[\x90a\x0F\xA0\x91a\x0F\x9Ba\x0F\x96\x82a\x0E\x8DV[a\x17\xB3V[a\x0F\xA2V[V[\x90a\x0F\xAC\x91a\x18\x0CV[PV[\x90a\x0F\xB9\x91a\x0F\x85V[V[\x90\x80a\x0F\xD6a\x0F\xD0a\x0F\xCBa\x18\xB7V[a\x024V[\x91a\x024V[\x03a\x0F\xE7Wa\x0F\xE4\x91a\x18\xC4V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0F\xFF`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[a\x10\x13a\x10\x0Ea\x07\xF4V[a\x17\xB3V[a\x10\x1Ba\x10\x1DV[V[a\x10%a\x19\xDAV[V[a\x10/a\x10\x03V[V[\x90a\x10I\x97\x96\x95\x94\x93\x92\x91a\x10Da\x19\xE4V[a\x11vV[\x90\x91\x92V[a\x10ba\x10]a\x10g\x92a\x07\xD0V[a\x06QV[a\x02)V[\x90V[a\x10s\x90a\x10NV[\x90V[a\x10\x7F\x90a\x06TV[\x90V[a\x10\x8B\x90a\x10vV[\x90V[\x91\x90`@\x83\x82\x03\x12a\x10\xB6W\x80a\x10\xAAa\x10\xB3\x92_\x86\x01a\x0BlV[\x93` \x01a\x0E\xB2V[\x90V[a\x01|V[a\x10\xC4\x90a\x06pV[\x90V[a\x10\xD0\x90a\x10\xBBV[\x90RV[a\x11\ta\x11\x10\x94a\x10\xFF``\x94\x98\x97\x95a\x10\xF5`\x80\x86\x01\x9A_\x87\x01\x90a\x04\x10V[` \x85\x01\x90a\x03\"V[`@\x83\x01\x90a\x10\xC7V[\x01\x90a\x03\xAAV[V[a\x11&a\x11!a\x11+\x92a\x02\xA6V[a\x06QV[a\x02\xA6V[\x90V[a\x117\x90a\x06pV[\x90V[a\x11C\x90a\x0B\x13V[\x90V[a\x11O\x90a\x11:V[\x90RV[\x91` a\x11t\x92\x94\x93a\x11m`@\x82\x01\x96_\x83\x01\x90a\x11FV[\x01\x90a\x03\"V[V[\x97\x95\x92\x96\x97PPP\x81a\x11\x99a\x11\x93a\x11\x8E_a\x10jV[a\x024V[\x91a\x024V[\x14a\x14OW\x82a\x11\xB1a\x11\xAB_a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\x13oW` a\x11\xE3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\"V[\x91c\x1BK\xF5\xBA\x92a\x12\x08_\x86\x93\x95a\x12\x13a\x11\xFCa\x01rV[\x97\x88\x96\x87\x95\x86\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x92Z\xF1\x80\x15a\x13jW`@\x91_\x91a\x13<W[P\x94[a\x12S\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[a\x12~_c\xD9\x85*\xBFa\x12\x89\x87\x9Ba\x12j\x8Ca\x10\x82V[a\x12ra\x01rV[\x9D\x8E\x98\x89\x97\x88\x96a\x0BfV[\x86R`\x04\x86\x01a\x10\xD4V[\x03\x92Z\xF1\x94\x85\x15a\x137W_\x80\x91\x90\x96a\x13\x03W[P\x94\x91\x85\x83\x90\x86\x92\x93a\x12\xE3a\x12\xDDa\x12\xD7\x7F#Jb\xB8\xAATi\t\xC2'\xC1G\x88\xB7\x13\xD6\xF4~\xEAh\xAE*\xBB\\\xBD\xE4\xD2\xDC\x0FU\"\xBA\x94a\x11\x12V[\x94a\x11.V[\x94a\x11.V[\x94a\x12\xF8a\x12\xEFa\x01rV[\x92\x83\x92\x83a\x11SV[\x03\x90\xA4\x91\x92\x91\x92\x91\x90V[\x90Pa\x13'\x91\x95P`@=\x81\x11a\x130W[a\x13\x1F\x81\x83a\x0B=V[\x81\x01\x90a\x10\x8EV[_\x95\x91\x95a\x12\x9EV[P=a\x13\x15V[a\x0B\xBCV[a\x13]\x91P` =\x81\x11a\x13cW[a\x13U\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x12'V[P=a\x13KV[a\x0B\xBCV[\x82a\x13\x83a\x13}`\x01a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\x143W` a\x13\xB5\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06|V[\x91c\xC7\x0B\xAC\xFE\x92a\x13\xDA_\x86\x93\x95a\x13\xE5a\x13\xCEa\x01rV[\x97\x88\x96\x87\x95\x86\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x92Z\xF1\x80\x15a\x14.W`@\x91_\x91a\x14\0W[P\x94a\x12*V[a\x14!\x91P` =\x81\x11a\x14'W[a\x14\x19\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x13\xF9V[P=a\x14\x0FV[a\x0B\xBCV[_c\x10\x92\xEFW`\xE1\x1B\x81R\x80a\x14K`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x14g`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[\x90a\x14\x91\x94\x93\x92\x91a\x14{a\n\xECV[a\x14\x83a\n\xECV[a\x14\x8Ba\x0E\xAEV[\x91a\x101V[\x90\x91\x92V[`\xFF\x16\x90V[a\x14\xA8a\x14\xAD\x91a\x0EdV[a\x14\x96V[\x90V[a\x14\xBA\x90Ta\x14\x9CV[\x90V[a\x14\xC5a\n\xA8V[Pa\x14\xD0`\x01a\x14\xB0V[\x90V[` a\x152\x91a\x14\xE1a\x0E\xAEV[Pa\x15\x0B\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[a\x15'cr2\xC13a\x15\x1Ba\x01rV[\x95\x86\x94\x85\x93\x84\x93a\x0BfV[\x83R`\x04\x83\x01a\x04\x1DV[\x03\x91Z\xFA\x90\x81\x15a\x15vW_\x91a\x15HW[P\x90V[a\x15i\x91P` =\x81\x11a\x15oW[a\x15a\x81\x83a\x0B=V[\x81\x01\x90a\x0E\xC1V[_a\x15DV[P=a\x15WV[a\x0B\xBCV[a\x15\x8Ba\x15\x86a\x07\xF4V[a\x17\xB3V[a\x15\x93a\x15\x95V[V[a\x15\x9Da\x1AnV[V[a\x15\xA7a\x15{V[V[a\x15\xB1a\x0E\xAEV[Pa\x15\xF6` a\x15\xE0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[c)\x7FLd\x90a\x15\xEEa\x01rV[\x93\x84\x92a\x0BfV[\x82R\x81\x80a\x16\x06`\x04\x82\x01a\x04\x94V[\x03\x91Z\xFA\x90\x81\x15a\x16JW_\x91a\x16\x1CW[P\x90V[a\x16=\x91P` =\x81\x11a\x16CW[a\x165\x81\x83a\x0B=V[\x81\x01\x90a\x0E\xC1V[_a\x16\x18V[P=a\x16+V[a\x0B\xBCV[\x90a\x16Y\x90a\x11.V[_R` R`@_ \x90V[a\x16\x8B\x91_a\x16\x80a\x16\x86\x93a\x16ya\n\xA8V[P\x82a\x0ENV[\x01a\x16OV[a\x14\xB0V[\x90V[\x90a\x16\xA5\x96\x95\x94\x93\x92\x91a\x16\xA0a\x19\xE4V[a\x16\xAAV[\x90\x91\x92V[\x90a\x16\xC2\x96\x94\x95\x93\x92\x91PPP\x92`\x01\x91\x92\x93a\x14kV[\x91\x92\x90\x91\x90V[\x90a\x16\xEE\x93\x92\x91a\x16\xD8a\n\xECV[a\x16\xE0a\n\xECV[a\x16\xE8a\x0E\xAEV[\x91a\x16\x8EV[\x90\x91\x92V[\x90a\x17\n\x96\x95\x94\x93\x92\x91a\x17\x05a\x19\xE4V[a\x17\x0FV[\x90\x91\x92V[\x90a\x17&\x96\x94\x95\x93\x92\x91PPP\x92_\x91\x92\x93a\x14kV[\x91\x92\x90\x91\x90V[\x90a\x17R\x93\x92\x91a\x17<a\n\xECV[a\x17Da\n\xECV[a\x17La\x0E\xAEV[\x91a\x16\xF3V[\x90\x91\x92V[\x90a\x17r\x91a\x17ma\x17h\x82a\x0E\x8DV[a\x17\xB3V[a\x17tV[V[\x90a\x17~\x91a\x18\xC4V[PV[\x90a\x17\x8B\x91a\x17WV[V[a\x17\x95a\n\xA8V[Pa\x17\xAFa\x17\xA9c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90V[a\x17\xC5\x90a\x17\xBFa\x18\xB7V[\x90a\x1AxV[V[\x90a\x17\xD3`\xFF\x91a\x07\xD3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x17\xE6\x90a\x01\xCDV[\x90V[\x90V[\x90a\x18\x01a\x17\xFCa\x18\x08\x92a\x17\xDDV[a\x17\xE9V[\x82Ta\x17\xC7V[\x90UV[a\x18\x14a\n\xA8V[Pa\x18)a\x18#\x82\x84\x90a\x16eV[\x15a\x01\xCDV[_\x14a\x18\xB1Wa\x18P`\x01a\x18K_a\x18C\x81\x86\x90a\x0ENV[\x01\x85\x90a\x16OV[a\x17\xECV[\x90a\x18Ya\x18\xB7V[\x90a\x18\x96a\x18\x90a\x18\x8A\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x0EBV[\x92a\x11.V[\x92a\x11.V[\x92a\x18\x9Fa\x01rV[\x80a\x18\xA9\x81a\x04\x94V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x18\xBFa\n\xECV[P3\x90V[a\x18\xCCa\n\xA8V[Pa\x18\xD8\x81\x83\x90a\x16eV[_\x14a\x19_Wa\x18\xFE_a\x18\xF9_a\x18\xF1\x81\x86\x90a\x0ENV[\x01\x85\x90a\x16OV[a\x17\xECV[\x90a\x19\x07a\x18\xB7V[\x90a\x19Da\x19>a\x198\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x0EBV[\x92a\x11.V[\x92a\x11.V[\x92a\x19Ma\x01rV[\x80a\x19W\x81a\x04\x94V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x19ma\x1A\xB3V[a\x19ua\x19\x8CV[V[\x91\x90a\x19\x8A\x90_` \x85\x01\x94\x01\x90a\x03\"V[V[a\x19\x97_`\x01a\x17\xECV[a\x19\x9Fa\x18\xB7V[a\x19\xD5\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\x19\xCCa\x01rV[\x91\x82\x91\x82a\x19wV[\x03\x90\xA1V[a\x19\xE2a\x19eV[V[a\x19\xECa\x14\xBDV[a\x19\xF2WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\x1A\n`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[a\x1A\x16a\x19\xE4V[a\x1A\x1Ea\x1A V[V[a\x1A+`\x01\x80a\x17\xECV[a\x1A3a\x18\xB7V[a\x1Ai\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\x1A`a\x01rV[\x91\x82\x91\x82a\x19wV[\x03\x90\xA1V[a\x1Ava\x1A\x0EV[V[\x90a\x1A\x8Da\x1A\x87\x83\x83\x90a\x16eV[\x15a\x01\xCDV[a\x1A\x95WPPV[a\x1A\xAF_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0B\x99V[\x03\x90\xFD[a\x1A\xC4a\x1A\xBEa\x14\xBDV[\x15a\x01\xCDV[a\x1A\xCAWV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x1A\xE2`\x04\x82\x01a\x04\x94V[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610aa4565b61001d5f3561016c565b806301ffc9a7146101675780630827884714610162578063248a9ca31461015d5780632738ef09146101585780632f2ff15d1461015357806336568abe1461014e5780633f4ba83a146101495780634f045828146101445780635c975abb1461013f57806370c630961461013a5780637232c133146101355780638456cb59146101305780639048f4a51461012b57806391d1485414610126578063a217fddf14610121578063c45a21db1461011c578063c4d36f2b14610117578063c7d3643114610112578063d547741f1461010d578063daab2fe9146101085763ec87621c0361000e57610a6f565b610a0b565b610985565b610950565b6108c2565b610886565b61080b565b61079a565b610765565b610732565b6106fd565b6106aa565b6105f8565b6105bc565b610501565b6104cd565b610499565b610432565b6103cc565b610352565b6101f4565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61019581610180565b0361019c57565b5f80fd5b905035906101ad8261018c565b565b906020828203126101c8576101c5915f016101a0565b90565b61017c565b151590565b6101db906101cd565b9052565b91906101f2905f602085019401906101d2565b565b346102245761022061020f61020a3660046101af565b610aac565b610217610172565b918291826101df565b0390f35b610178565b60018060a01b031690565b61023d90610229565b90565b61024981610234565b0361025057565b5f80fd5b9050359061026182610240565b565b6002111561026d57565b5f80fd5b9050359061027e82610263565b565b90565b61028c81610280565b0361029357565b5f80fd5b905035906102a482610283565b565b90565b6102b2816102a6565b036102b957565b5f80fd5b905035906102ca826102a9565b565b919060a08382031261031d576102e4815f8501610254565b926102f28260208301610271565b9261031a6103038460408501610297565b936103118160608601610297565b936080016102bd565b90565b61017c565b61032b90610234565b9052565b91602061035092949361034960408201965f830190610322565b0190610322565b565b346103875761036e6103653660046102cc565b93929092610bef565b9061038361037a610172565b9283928361032f565b0390f35b610178565b906020828203126103a5576103a2915f01610297565b90565b61017c565b6103b390610280565b9052565b91906103ca905f602085019401906103aa565b565b346103fc576103f86103e76103e236600461038c565b610e8d565b6103ef610172565b918291826103b7565b0390f35b610178565b5f91031261040b57565b61017c565b610419906102a6565b9052565b9190610430905f60208501940190610410565b565b3461046257610442366004610401565b61045e61044d610edf565b610455610172565b9182918261041d565b0390f35b610178565b919060408382031261048f578061048361048c925f8601610297565b93602001610254565b90565b61017c565b5f0190565b346104c8576104b26104ac366004610467565b90610faf565b6104ba610172565b806104c481610494565b0390f35b610178565b346104fc576104e66104e0366004610467565b90610fbb565b6104ee610172565b806104f881610494565b0390f35b610178565b3461052f57610511366004610401565b610519611027565b610521610172565b8061052b81610494565b0390f35b610178565b919060a0838203126105855761054c815f85016102bd565b9261055a8260208301610254565b9261058261056b8460408501610271565b936105798160608601610297565b93608001610297565b90565b61017c565b6040906105b36105ba94969593966105a960608401985f850190610322565b6020830190610322565b0190610410565b565b346105f3576105ef6105db6105d2366004610534565b9392909261146b565b6105e6939193610172565b9384938461058a565b0390f35b610178565b3461062857610608366004610401565b6106246106136114bd565b61061b610172565b918291826101df565b0390f35b610178565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61066861066361066d92610229565b610651565b610229565b90565b61067990610654565b90565b61068590610670565b90565b6106919061067c565b9052565b91906106a8905f60208501940190610688565b565b346106da576106ba366004610401565b6106d66106c561062d565b6106cd610172565b91829182610695565b0390f35b610178565b906020828203126106f8576106f5915f016102bd565b90565b61017c565b3461072d576107296107186107133660046106df565b6114d3565b610720610172565b9182918261041d565b0390f35b610178565b3461076057610742366004610401565b61074a61159f565b610752610172565b8061075c81610494565b0390f35b610178565b3461079557610775366004610401565b6107916107806115a9565b610788610172565b9182918261041d565b0390f35b610178565b346107cb576107c76107b66107b0366004610467565b90611665565b6107be610172565b918291826101df565b0390f35b610178565b90565b5f1b90565b6107ec6107e76107f1926107d0565b6107d3565b610280565b90565b6107fd5f6107d8565b90565b6108086107f4565b90565b3461083b5761081b366004610401565b610837610826610800565b61082e610172565b918291826103b7565b0390f35b610178565b60808183031261088157610856825f83016102bd565b9261087e6108678460208501610254565b936108758160408601610297565b93606001610297565b90565b61017c565b346108bd576108b96108a561089c366004610840565b929190916116c9565b6108b0939193610172565b9384938461058a565b0390f35b610178565b346108f9576108f56108e16108d8366004610840565b9291909161172d565b6108ec939193610172565b9384938461058a565b0390f35b610178565b7f000000000000000000000000000000000000000000000000000000000000000090565b61092b90610670565b90565b61093790610922565b9052565b919061094e905f6020850194019061092e565b565b3461098057610960366004610401565b61097c61096b6108fe565b610973610172565b9182918261093b565b0390f35b610178565b346109b45761099e610998366004610467565b90611781565b6109a6610172565b806109b081610494565b0390f35b610178565b7f000000000000000000000000000000000000000000000000000000000000000090565b6109e690610670565b90565b6109f2906109dd565b9052565b9190610a09905f602085019401906109e9565b565b34610a3b57610a1b366004610401565b610a37610a266109b9565b610a2e610172565b918291826109f6565b0390f35b610178565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610a6c610a40565b90565b34610a9f57610a7f366004610401565b610a9b610a8a610a64565b610a92610172565b918291826103b7565b0390f35b610178565b5f80fd5b5f90565b610ab4610aa8565b5080610acf610ac9637965db0b60e01b610180565b91610180565b14908115610adc575b5090565b610ae6915061178d565b5f610ad8565b5f90565b634e487b7160e01b5f52602160045260245ffd5b60021115610b0e57565b610af0565b90610b1d82610b04565b565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610b4790610b1f565b810190811067ffffffffffffffff821117610b6157604052565b610b29565b60e01b90565b90505190610b7982610240565b565b90602082820312610b9457610b91915f01610b6c565b90565b61017c565b916020610bba929493610bb360408201965f830190610322565b01906103aa565b565b610bc4610172565b3d5f823e3d90fd5b916020610bed929493610be660408201965f8301906103aa565b0190610410565b565b9190949394610bfc610aec565b50610c05610aec565b5080610c19610c135f610b13565b91610b13565b145f14610d625750602090610c4d7f0000000000000000000000000000000000000000000000000000000000000000610922565b610c6f635681706b949294610c7a610c63610172565b96879586948594610b66565b845260048401610b99565b03915afa8015610d5d576020915f91610d30575b50935b610cba7f00000000000000000000000000000000000000000000000000000000000000006109dd565b610cdc631f43fc8b949294610ce7610cd0610172565b96879586948594610b66565b845260048401610bcc565b03915afa908115610d2b575f91610cfd575b5090565b610d1e915060203d8111610d24575b610d168183610b3d565b810190610b7b565b5f610cf9565b503d610d0c565b610bbc565b610d509150823d8111610d56575b610d488183610b3d565b810190610b7b565b5f610c8e565b503d610d3e565b610bbc565b610d75610d6f6001610b13565b91610b13565b145f14610e2257602090610da87f000000000000000000000000000000000000000000000000000000000000000061067c565b610dca635681706b949294610dd5610dbe610172565b96879586948594610b66565b845260048401610b99565b03915afa8015610e1d576020915f91610df0575b5093610c91565b610e109150823d8111610e16575b610e088183610b3d565b810190610b7b565b5f610de9565b503d610dfe565b610bbc565b5f631092ef5760e11b815280610e3a60048201610494565b0390fd5b5f90565b610e4b90610280565b90565b90610e5890610e42565b5f5260205260405f2090565b5f1c90565b90565b610e78610e7d91610e64565b610e69565b90565b610e8a9054610e6c565b90565b6001610ea5610eab92610e9e610e3e565b505f610e4e565b01610e80565b90565b5f90565b90505190610ebf826102a9565b565b90602082820312610eda57610ed7915f01610eb2565b90565b61017c565b610ee7610eae565b50610f2c6020610f167f00000000000000000000000000000000000000000000000000000000000000006109dd565b638de6e28c90610f24610172565b938492610b66565b82528180610f3c60048201610494565b03915afa908115610f80575f91610f52575b5090565b610f73915060203d8111610f79575b610f6b8183610b3d565b810190610ec1565b5f610f4e565b503d610f61565b610bbc565b90610fa091610f9b610f9682610e8d565b6117b3565b610fa2565b565b90610fac9161180c565b50565b90610fb991610f85565b565b9080610fd6610fd0610fcb6118b7565b610234565b91610234565b03610fe757610fe4916118c4565b50565b5f63334bd91960e11b815280610fff60048201610494565b0390fd5b61101361100e6107f4565b6117b3565b61101b61101d565b565b6110256119da565b565b61102f611003565b565b90611049979695949392916110446119e4565b611176565b909192565b61106261105d611067926107d0565b610651565b610229565b90565b6110739061104e565b90565b61107f90610654565b90565b61108b90611076565b90565b91906040838203126110b657806110aa6110b3925f8601610b6c565b93602001610eb2565b90565b61017c565b6110c490610670565b90565b6110d0906110bb565b9052565b611109611110946110ff6060949897956110f5608086019a5f870190610410565b6020850190610322565b60408301906110c7565b01906103aa565b565b61112661112161112b926102a6565b610651565b6102a6565b90565b61113790610670565b90565b61114390610b13565b90565b61114f9061113a565b9052565b91602061117492949361116d60408201965f830190611146565b0190610322565b565b97959296975050508161119961119361118e5f61106a565b610234565b91610234565b1461144f57826111b16111ab5f610b13565b91610b13565b145f1461136f5760206111e37f0000000000000000000000000000000000000000000000000000000000000000610922565b91631b4bf5ba926112085f8693956112136111fc610172565b97889687958694610b66565b845260048401610b99565b03925af1801561136a576040915f9161133c575b50945b6112537f00000000000000000000000000000000000000000000000000000000000000006109dd565b61127e5f63d9852abf611289879b61126a8c611082565b611272610172565b9d8e9889978896610b66565b8652600486016110d4565b03925af1948515611337575f80919096611303575b5094918583908692936112e36112dd6112d77f234a62b8aa546909c227c14788b713d6f47eea68ae2abb5cbde4d2dc0f5522ba94611112565b9461112e565b9461112e565b946112f86112ef610172565b92839283611153565b0390a4919291929190565b905061132791955060403d8111611330575b61131f8183610b3d565b81019061108e565b5f95919561129e565b503d611315565b610bbc565b61135d915060203d8111611363575b6113558183610b3d565b810190610b7b565b5f611227565b503d61134b565b610bbc565b8261138361137d6001610b13565b91610b13565b145f146114335760206113b57f000000000000000000000000000000000000000000000000000000000000000061067c565b9163c70bacfe926113da5f8693956113e56113ce610172565b97889687958694610b66565b845260048401610b99565b03925af1801561142e576040915f91611400575b509461122a565b611421915060203d8111611427575b6114198183610b3d565b810190610b7b565b5f6113f9565b503d61140f565b610bbc565b5f631092ef5760e11b81528061144b60048201610494565b0390fd5b5f63d92e233d60e01b81528061146760048201610494565b0390fd5b906114919493929161147b610aec565b611483610aec565b61148b610eae565b91611031565b909192565b60ff1690565b6114a86114ad91610e64565b611496565b90565b6114ba905461149c565b90565b6114c5610aa8565b506114d060016114b0565b90565b6020611532916114e1610eae565b5061150b7f00000000000000000000000000000000000000000000000000000000000000006109dd565b611527637232c13361151b610172565b95869485938493610b66565b83526004830161041d565b03915afa908115611576575f91611548575b5090565b611569915060203d811161156f575b6115618183610b3d565b810190610ec1565b5f611544565b503d611557565b610bbc565b61158b6115866107f4565b6117b3565b611593611595565b565b61159d611a6e565b565b6115a761157b565b565b6115b1610eae565b506115f660206115e07f00000000000000000000000000000000000000000000000000000000000000006109dd565b63297f4c64906115ee610172565b938492610b66565b8252818061160660048201610494565b03915afa90811561164a575f9161161c575b5090565b61163d915060203d8111611643575b6116358183610b3d565b810190610ec1565b5f611618565b503d61162b565b610bbc565b906116599061112e565b5f5260205260405f2090565b61168b915f61168061168693611679610aa8565b5082610e4e565b0161164f565b6114b0565b90565b906116a59695949392916116a06119e4565b6116aa565b909192565b906116c296949593929150505092600191929361146b565b9192909190565b906116ee9392916116d8610aec565b6116e0610aec565b6116e8610eae565b9161168e565b909192565b9061170a9695949392916117056119e4565b61170f565b909192565b90611726969495939291505050925f91929361146b565b9192909190565b9061175293929161173c610aec565b611744610aec565b61174c610eae565b916116f3565b909192565b906117729161176d61176882610e8d565b6117b3565b611774565b565b9061177e916118c4565b50565b9061178b91611757565b565b611795610aa8565b506117af6117a96301ffc9a760e01b610180565b91610180565b1490565b6117c5906117bf6118b7565b90611a78565b565b906117d360ff916107d3565b9181191691161790565b6117e6906101cd565b90565b90565b906118016117fc611808926117dd565b6117e9565b82546117c7565b9055565b611814610aa8565b50611829611823828490611665565b156101cd565b5f146118b157611850600161184b5f611843818690610e4e565b01859061164f565b6117ec565b906118596118b7565b9061189661189061188a7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610e42565b9261112e565b9261112e565b9261189f610172565b806118a981610494565b0390a4600190565b50505f90565b6118bf610aec565b503390565b6118cc610aa8565b506118d8818390611665565b5f1461195f576118fe5f6118f95f6118f1818690610e4e565b01859061164f565b6117ec565b906119076118b7565b9061194461193e6119387ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610e42565b9261112e565b9261112e565b9261194d610172565b8061195781610494565b0390a4600190565b50505f90565b61196d611ab3565b61197561198c565b565b919061198a905f60208501940190610322565b565b6119975f60016117ec565b61199f6118b7565b6119d57f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa916119cc610172565b91829182611977565b0390a1565b6119e2611965565b565b6119ec6114bd565b6119f257565b5f63d93c066560e01b815280611a0a60048201610494565b0390fd5b611a166119e4565b611a1e611a20565b565b611a2b6001806117ec565b611a336118b7565b611a697f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891611a60610172565b91829182611977565b0390a1565b611a76611a0e565b565b90611a8d611a87838390611665565b156101cd565b611a95575050565b611aaf5f92839263e2517d3f60e01b845260048401610b99565b0390fd5b611ac4611abe6114bd565b156101cd565b611aca57565b5f638dfc202b60e01b815280611ae260048201610494565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n\xA4V[a\0\x1D_5a\x01lV[\x80c\x01\xFF\xC9\xA7\x14a\x01gW\x80c\x08'\x88G\x14a\x01bW\x80c$\x8A\x9C\xA3\x14a\x01]W\x80c'8\xEF\t\x14a\x01XW\x80c//\xF1]\x14a\x01SW\x80c6V\x8A\xBE\x14a\x01NW\x80c?K\xA8:\x14a\x01IW\x80cO\x04X(\x14a\x01DW\x80c\\\x97Z\xBB\x14a\x01?W\x80cp\xC60\x96\x14a\x01:W\x80cr2\xC13\x14a\x015W\x80c\x84V\xCBY\x14a\x010W\x80c\x90H\xF4\xA5\x14a\x01+W\x80c\x91\xD1HT\x14a\x01&W\x80c\xA2\x17\xFD\xDF\x14a\x01!W\x80c\xC4Z!\xDB\x14a\x01\x1CW\x80c\xC4\xD3o+\x14a\x01\x17W\x80c\xC7\xD3d1\x14a\x01\x12W\x80c\xD5Gt\x1F\x14a\x01\rW\x80c\xDA\xAB/\xE9\x14a\x01\x08Wc\xEC\x87b\x1C\x03a\0\x0EWa\noV[a\n\x0BV[a\t\x85V[a\tPV[a\x08\xC2V[a\x08\x86V[a\x08\x0BV[a\x07\x9AV[a\x07eV[a\x072V[a\x06\xFDV[a\x06\xAAV[a\x05\xF8V[a\x05\xBCV[a\x05\x01V[a\x04\xCDV[a\x04\x99V[a\x042V[a\x03\xCCV[a\x03RV[a\x01\xF4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x95\x81a\x01\x80V[\x03a\x01\x9CWV[_\x80\xFD[\x90P5\x90a\x01\xAD\x82a\x01\x8CV[V[\x90` \x82\x82\x03\x12a\x01\xC8Wa\x01\xC5\x91_\x01a\x01\xA0V[\x90V[a\x01|V[\x15\x15\x90V[a\x01\xDB\x90a\x01\xCDV[\x90RV[\x91\x90a\x01\xF2\x90_` \x85\x01\x94\x01\x90a\x01\xD2V[V[4a\x02$Wa\x02 a\x02\x0Fa\x02\n6`\x04a\x01\xAFV[a\n\xACV[a\x02\x17a\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02=\x90a\x02)V[\x90V[a\x02I\x81a\x024V[\x03a\x02PWV[_\x80\xFD[\x90P5\x90a\x02a\x82a\x02@V[V[`\x02\x11\x15a\x02mWV[_\x80\xFD[\x90P5\x90a\x02~\x82a\x02cV[V[\x90V[a\x02\x8C\x81a\x02\x80V[\x03a\x02\x93WV[_\x80\xFD[\x90P5\x90a\x02\xA4\x82a\x02\x83V[V[\x90V[a\x02\xB2\x81a\x02\xA6V[\x03a\x02\xB9WV[_\x80\xFD[\x90P5\x90a\x02\xCA\x82a\x02\xA9V[V[\x91\x90`\xA0\x83\x82\x03\x12a\x03\x1DWa\x02\xE4\x81_\x85\x01a\x02TV[\x92a\x02\xF2\x82` \x83\x01a\x02qV[\x92a\x03\x1Aa\x03\x03\x84`@\x85\x01a\x02\x97V[\x93a\x03\x11\x81``\x86\x01a\x02\x97V[\x93`\x80\x01a\x02\xBDV[\x90V[a\x01|V[a\x03+\x90a\x024V[\x90RV[\x91` a\x03P\x92\x94\x93a\x03I`@\x82\x01\x96_\x83\x01\x90a\x03\"V[\x01\x90a\x03\"V[V[4a\x03\x87Wa\x03na\x03e6`\x04a\x02\xCCV[\x93\x92\x90\x92a\x0B\xEFV[\x90a\x03\x83a\x03za\x01rV[\x92\x83\x92\x83a\x03/V[\x03\x90\xF3[a\x01xV[\x90` \x82\x82\x03\x12a\x03\xA5Wa\x03\xA2\x91_\x01a\x02\x97V[\x90V[a\x01|V[a\x03\xB3\x90a\x02\x80V[\x90RV[\x91\x90a\x03\xCA\x90_` \x85\x01\x94\x01\x90a\x03\xAAV[V[4a\x03\xFCWa\x03\xF8a\x03\xE7a\x03\xE26`\x04a\x03\x8CV[a\x0E\x8DV[a\x03\xEFa\x01rV[\x91\x82\x91\x82a\x03\xB7V[\x03\x90\xF3[a\x01xV[_\x91\x03\x12a\x04\x0BWV[a\x01|V[a\x04\x19\x90a\x02\xA6V[\x90RV[\x91\x90a\x040\x90_` \x85\x01\x94\x01\x90a\x04\x10V[V[4a\x04bWa\x04B6`\x04a\x04\x01V[a\x04^a\x04Ma\x0E\xDFV[a\x04Ua\x01rV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01xV[\x91\x90`@\x83\x82\x03\x12a\x04\x8FW\x80a\x04\x83a\x04\x8C\x92_\x86\x01a\x02\x97V[\x93` \x01a\x02TV[\x90V[a\x01|V[_\x01\x90V[4a\x04\xC8Wa\x04\xB2a\x04\xAC6`\x04a\x04gV[\x90a\x0F\xAFV[a\x04\xBAa\x01rV[\x80a\x04\xC4\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[4a\x04\xFCWa\x04\xE6a\x04\xE06`\x04a\x04gV[\x90a\x0F\xBBV[a\x04\xEEa\x01rV[\x80a\x04\xF8\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[4a\x05/Wa\x05\x116`\x04a\x04\x01V[a\x05\x19a\x10'V[a\x05!a\x01rV[\x80a\x05+\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[\x91\x90`\xA0\x83\x82\x03\x12a\x05\x85Wa\x05L\x81_\x85\x01a\x02\xBDV[\x92a\x05Z\x82` \x83\x01a\x02TV[\x92a\x05\x82a\x05k\x84`@\x85\x01a\x02qV[\x93a\x05y\x81``\x86\x01a\x02\x97V[\x93`\x80\x01a\x02\x97V[\x90V[a\x01|V[`@\x90a\x05\xB3a\x05\xBA\x94\x96\x95\x93\x96a\x05\xA9``\x84\x01\x98_\x85\x01\x90a\x03\"V[` \x83\x01\x90a\x03\"V[\x01\x90a\x04\x10V[V[4a\x05\xF3Wa\x05\xEFa\x05\xDBa\x05\xD26`\x04a\x054V[\x93\x92\x90\x92a\x14kV[a\x05\xE6\x93\x91\x93a\x01rV[\x93\x84\x93\x84a\x05\x8AV[\x03\x90\xF3[a\x01xV[4a\x06(Wa\x06\x086`\x04a\x04\x01V[a\x06$a\x06\x13a\x14\xBDV[a\x06\x1Ba\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x06ha\x06ca\x06m\x92a\x02)V[a\x06QV[a\x02)V[\x90V[a\x06y\x90a\x06TV[\x90V[a\x06\x85\x90a\x06pV[\x90V[a\x06\x91\x90a\x06|V[\x90RV[\x91\x90a\x06\xA8\x90_` \x85\x01\x94\x01\x90a\x06\x88V[V[4a\x06\xDAWa\x06\xBA6`\x04a\x04\x01V[a\x06\xD6a\x06\xC5a\x06-V[a\x06\xCDa\x01rV[\x91\x82\x91\x82a\x06\x95V[\x03\x90\xF3[a\x01xV[\x90` \x82\x82\x03\x12a\x06\xF8Wa\x06\xF5\x91_\x01a\x02\xBDV[\x90V[a\x01|V[4a\x07-Wa\x07)a\x07\x18a\x07\x136`\x04a\x06\xDFV[a\x14\xD3V[a\x07 a\x01rV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01xV[4a\x07`Wa\x07B6`\x04a\x04\x01V[a\x07Ja\x15\x9FV[a\x07Ra\x01rV[\x80a\x07\\\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[4a\x07\x95Wa\x07u6`\x04a\x04\x01V[a\x07\x91a\x07\x80a\x15\xA9V[a\x07\x88a\x01rV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01xV[4a\x07\xCBWa\x07\xC7a\x07\xB6a\x07\xB06`\x04a\x04gV[\x90a\x16eV[a\x07\xBEa\x01rV[\x91\x82\x91\x82a\x01\xDFV[\x03\x90\xF3[a\x01xV[\x90V[_\x1B\x90V[a\x07\xECa\x07\xE7a\x07\xF1\x92a\x07\xD0V[a\x07\xD3V[a\x02\x80V[\x90V[a\x07\xFD_a\x07\xD8V[\x90V[a\x08\x08a\x07\xF4V[\x90V[4a\x08;Wa\x08\x1B6`\x04a\x04\x01V[a\x087a\x08&a\x08\0V[a\x08.a\x01rV[\x91\x82\x91\x82a\x03\xB7V[\x03\x90\xF3[a\x01xV[`\x80\x81\x83\x03\x12a\x08\x81Wa\x08V\x82_\x83\x01a\x02\xBDV[\x92a\x08~a\x08g\x84` \x85\x01a\x02TV[\x93a\x08u\x81`@\x86\x01a\x02\x97V[\x93``\x01a\x02\x97V[\x90V[a\x01|V[4a\x08\xBDWa\x08\xB9a\x08\xA5a\x08\x9C6`\x04a\x08@V[\x92\x91\x90\x91a\x16\xC9V[a\x08\xB0\x93\x91\x93a\x01rV[\x93\x84\x93\x84a\x05\x8AV[\x03\x90\xF3[a\x01xV[4a\x08\xF9Wa\x08\xF5a\x08\xE1a\x08\xD86`\x04a\x08@V[\x92\x91\x90\x91a\x17-V[a\x08\xEC\x93\x91\x93a\x01rV[\x93\x84\x93\x84a\x05\x8AV[\x03\x90\xF3[a\x01xV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t+\x90a\x06pV[\x90V[a\t7\x90a\t\"V[\x90RV[\x91\x90a\tN\x90_` \x85\x01\x94\x01\x90a\t.V[V[4a\t\x80Wa\t`6`\x04a\x04\x01V[a\t|a\tka\x08\xFEV[a\tsa\x01rV[\x91\x82\x91\x82a\t;V[\x03\x90\xF3[a\x01xV[4a\t\xB4Wa\t\x9Ea\t\x986`\x04a\x04gV[\x90a\x17\x81V[a\t\xA6a\x01rV[\x80a\t\xB0\x81a\x04\x94V[\x03\x90\xF3[a\x01xV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t\xE6\x90a\x06pV[\x90V[a\t\xF2\x90a\t\xDDV[\x90RV[\x91\x90a\n\t\x90_` \x85\x01\x94\x01\x90a\t\xE9V[V[4a\n;Wa\n\x1B6`\x04a\x04\x01V[a\n7a\n&a\t\xB9V[a\n.a\x01rV[\x91\x82\x91\x82a\t\xF6V[\x03\x90\xF3[a\x01xV[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\nla\n@V[\x90V[4a\n\x9FWa\n\x7F6`\x04a\x04\x01V[a\n\x9Ba\n\x8Aa\ndV[a\n\x92a\x01rV[\x91\x82\x91\x82a\x03\xB7V[\x03\x90\xF3[a\x01xV[_\x80\xFD[_\x90V[a\n\xB4a\n\xA8V[P\x80a\n\xCFa\n\xC9cye\xDB\x0B`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90\x81\x15a\n\xDCW[P\x90V[a\n\xE6\x91Pa\x17\x8DV[_a\n\xD8V[_\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x11\x15a\x0B\x0EWV[a\n\xF0V[\x90a\x0B\x1D\x82a\x0B\x04V[V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0BG\x90a\x0B\x1FV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0BaW`@RV[a\x0B)V[`\xE0\x1B\x90V[\x90PQ\x90a\x0By\x82a\x02@V[V[\x90` \x82\x82\x03\x12a\x0B\x94Wa\x0B\x91\x91_\x01a\x0BlV[\x90V[a\x01|V[\x91` a\x0B\xBA\x92\x94\x93a\x0B\xB3`@\x82\x01\x96_\x83\x01\x90a\x03\"V[\x01\x90a\x03\xAAV[V[a\x0B\xC4a\x01rV[=_\x82>=\x90\xFD[\x91` a\x0B\xED\x92\x94\x93a\x0B\xE6`@\x82\x01\x96_\x83\x01\x90a\x03\xAAV[\x01\x90a\x04\x10V[V[\x91\x90\x94\x93\x94a\x0B\xFCa\n\xECV[Pa\x0C\x05a\n\xECV[P\x80a\x0C\x19a\x0C\x13_a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\rbWP` \x90a\x0CM\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\"V[a\x0CocV\x81pk\x94\x92\x94a\x0Cza\x0Cca\x01rV[\x96\x87\x95\x86\x94\x85\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x91Z\xFA\x80\x15a\r]W` \x91_\x91a\r0W[P\x93[a\x0C\xBA\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[a\x0C\xDCc\x1FC\xFC\x8B\x94\x92\x94a\x0C\xE7a\x0C\xD0a\x01rV[\x96\x87\x95\x86\x94\x85\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\xCCV[\x03\x91Z\xFA\x90\x81\x15a\r+W_\x91a\x0C\xFDW[P\x90V[a\r\x1E\x91P` =\x81\x11a\r$W[a\r\x16\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x0C\xF9V[P=a\r\x0CV[a\x0B\xBCV[a\rP\x91P\x82=\x81\x11a\rVW[a\rH\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x0C\x8EV[P=a\r>V[a\x0B\xBCV[a\rua\ro`\x01a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\x0E\"W` \x90a\r\xA8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06|V[a\r\xCAcV\x81pk\x94\x92\x94a\r\xD5a\r\xBEa\x01rV[\x96\x87\x95\x86\x94\x85\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x91Z\xFA\x80\x15a\x0E\x1DW` \x91_\x91a\r\xF0W[P\x93a\x0C\x91V[a\x0E\x10\x91P\x82=\x81\x11a\x0E\x16W[a\x0E\x08\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\r\xE9V[P=a\r\xFEV[a\x0B\xBCV[_c\x10\x92\xEFW`\xE1\x1B\x81R\x80a\x0E:`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[_\x90V[a\x0EK\x90a\x02\x80V[\x90V[\x90a\x0EX\x90a\x0EBV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x0Exa\x0E}\x91a\x0EdV[a\x0EiV[\x90V[a\x0E\x8A\x90Ta\x0ElV[\x90V[`\x01a\x0E\xA5a\x0E\xAB\x92a\x0E\x9Ea\x0E>V[P_a\x0ENV[\x01a\x0E\x80V[\x90V[_\x90V[\x90PQ\x90a\x0E\xBF\x82a\x02\xA9V[V[\x90` \x82\x82\x03\x12a\x0E\xDAWa\x0E\xD7\x91_\x01a\x0E\xB2V[\x90V[a\x01|V[a\x0E\xE7a\x0E\xAEV[Pa\x0F,` a\x0F\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[c\x8D\xE6\xE2\x8C\x90a\x0F$a\x01rV[\x93\x84\x92a\x0BfV[\x82R\x81\x80a\x0F<`\x04\x82\x01a\x04\x94V[\x03\x91Z\xFA\x90\x81\x15a\x0F\x80W_\x91a\x0FRW[P\x90V[a\x0Fs\x91P` =\x81\x11a\x0FyW[a\x0Fk\x81\x83a\x0B=V[\x81\x01\x90a\x0E\xC1V[_a\x0FNV[P=a\x0FaV[a\x0B\xBCV[\x90a\x0F\xA0\x91a\x0F\x9Ba\x0F\x96\x82a\x0E\x8DV[a\x17\xB3V[a\x0F\xA2V[V[\x90a\x0F\xAC\x91a\x18\x0CV[PV[\x90a\x0F\xB9\x91a\x0F\x85V[V[\x90\x80a\x0F\xD6a\x0F\xD0a\x0F\xCBa\x18\xB7V[a\x024V[\x91a\x024V[\x03a\x0F\xE7Wa\x0F\xE4\x91a\x18\xC4V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0F\xFF`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[a\x10\x13a\x10\x0Ea\x07\xF4V[a\x17\xB3V[a\x10\x1Ba\x10\x1DV[V[a\x10%a\x19\xDAV[V[a\x10/a\x10\x03V[V[\x90a\x10I\x97\x96\x95\x94\x93\x92\x91a\x10Da\x19\xE4V[a\x11vV[\x90\x91\x92V[a\x10ba\x10]a\x10g\x92a\x07\xD0V[a\x06QV[a\x02)V[\x90V[a\x10s\x90a\x10NV[\x90V[a\x10\x7F\x90a\x06TV[\x90V[a\x10\x8B\x90a\x10vV[\x90V[\x91\x90`@\x83\x82\x03\x12a\x10\xB6W\x80a\x10\xAAa\x10\xB3\x92_\x86\x01a\x0BlV[\x93` \x01a\x0E\xB2V[\x90V[a\x01|V[a\x10\xC4\x90a\x06pV[\x90V[a\x10\xD0\x90a\x10\xBBV[\x90RV[a\x11\ta\x11\x10\x94a\x10\xFF``\x94\x98\x97\x95a\x10\xF5`\x80\x86\x01\x9A_\x87\x01\x90a\x04\x10V[` \x85\x01\x90a\x03\"V[`@\x83\x01\x90a\x10\xC7V[\x01\x90a\x03\xAAV[V[a\x11&a\x11!a\x11+\x92a\x02\xA6V[a\x06QV[a\x02\xA6V[\x90V[a\x117\x90a\x06pV[\x90V[a\x11C\x90a\x0B\x13V[\x90V[a\x11O\x90a\x11:V[\x90RV[\x91` a\x11t\x92\x94\x93a\x11m`@\x82\x01\x96_\x83\x01\x90a\x11FV[\x01\x90a\x03\"V[V[\x97\x95\x92\x96\x97PPP\x81a\x11\x99a\x11\x93a\x11\x8E_a\x10jV[a\x024V[\x91a\x024V[\x14a\x14OW\x82a\x11\xB1a\x11\xAB_a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\x13oW` a\x11\xE3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\"V[\x91c\x1BK\xF5\xBA\x92a\x12\x08_\x86\x93\x95a\x12\x13a\x11\xFCa\x01rV[\x97\x88\x96\x87\x95\x86\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x92Z\xF1\x80\x15a\x13jW`@\x91_\x91a\x13<W[P\x94[a\x12S\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[a\x12~_c\xD9\x85*\xBFa\x12\x89\x87\x9Ba\x12j\x8Ca\x10\x82V[a\x12ra\x01rV[\x9D\x8E\x98\x89\x97\x88\x96a\x0BfV[\x86R`\x04\x86\x01a\x10\xD4V[\x03\x92Z\xF1\x94\x85\x15a\x137W_\x80\x91\x90\x96a\x13\x03W[P\x94\x91\x85\x83\x90\x86\x92\x93a\x12\xE3a\x12\xDDa\x12\xD7\x7F#Jb\xB8\xAATi\t\xC2'\xC1G\x88\xB7\x13\xD6\xF4~\xEAh\xAE*\xBB\\\xBD\xE4\xD2\xDC\x0FU\"\xBA\x94a\x11\x12V[\x94a\x11.V[\x94a\x11.V[\x94a\x12\xF8a\x12\xEFa\x01rV[\x92\x83\x92\x83a\x11SV[\x03\x90\xA4\x91\x92\x91\x92\x91\x90V[\x90Pa\x13'\x91\x95P`@=\x81\x11a\x130W[a\x13\x1F\x81\x83a\x0B=V[\x81\x01\x90a\x10\x8EV[_\x95\x91\x95a\x12\x9EV[P=a\x13\x15V[a\x0B\xBCV[a\x13]\x91P` =\x81\x11a\x13cW[a\x13U\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x12'V[P=a\x13KV[a\x0B\xBCV[\x82a\x13\x83a\x13}`\x01a\x0B\x13V[\x91a\x0B\x13V[\x14_\x14a\x143W` a\x13\xB5\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06|V[\x91c\xC7\x0B\xAC\xFE\x92a\x13\xDA_\x86\x93\x95a\x13\xE5a\x13\xCEa\x01rV[\x97\x88\x96\x87\x95\x86\x94a\x0BfV[\x84R`\x04\x84\x01a\x0B\x99V[\x03\x92Z\xF1\x80\x15a\x14.W`@\x91_\x91a\x14\0W[P\x94a\x12*V[a\x14!\x91P` =\x81\x11a\x14'W[a\x14\x19\x81\x83a\x0B=V[\x81\x01\x90a\x0B{V[_a\x13\xF9V[P=a\x14\x0FV[a\x0B\xBCV[_c\x10\x92\xEFW`\xE1\x1B\x81R\x80a\x14K`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x14g`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[\x90a\x14\x91\x94\x93\x92\x91a\x14{a\n\xECV[a\x14\x83a\n\xECV[a\x14\x8Ba\x0E\xAEV[\x91a\x101V[\x90\x91\x92V[`\xFF\x16\x90V[a\x14\xA8a\x14\xAD\x91a\x0EdV[a\x14\x96V[\x90V[a\x14\xBA\x90Ta\x14\x9CV[\x90V[a\x14\xC5a\n\xA8V[Pa\x14\xD0`\x01a\x14\xB0V[\x90V[` a\x152\x91a\x14\xE1a\x0E\xAEV[Pa\x15\x0B\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[a\x15'cr2\xC13a\x15\x1Ba\x01rV[\x95\x86\x94\x85\x93\x84\x93a\x0BfV[\x83R`\x04\x83\x01a\x04\x1DV[\x03\x91Z\xFA\x90\x81\x15a\x15vW_\x91a\x15HW[P\x90V[a\x15i\x91P` =\x81\x11a\x15oW[a\x15a\x81\x83a\x0B=V[\x81\x01\x90a\x0E\xC1V[_a\x15DV[P=a\x15WV[a\x0B\xBCV[a\x15\x8Ba\x15\x86a\x07\xF4V[a\x17\xB3V[a\x15\x93a\x15\x95V[V[a\x15\x9Da\x1AnV[V[a\x15\xA7a\x15{V[V[a\x15\xB1a\x0E\xAEV[Pa\x15\xF6` a\x15\xE0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xDDV[c)\x7FLd\x90a\x15\xEEa\x01rV[\x93\x84\x92a\x0BfV[\x82R\x81\x80a\x16\x06`\x04\x82\x01a\x04\x94V[\x03\x91Z\xFA\x90\x81\x15a\x16JW_\x91a\x16\x1CW[P\x90V[a\x16=\x91P` =\x81\x11a\x16CW[a\x165\x81\x83a\x0B=V[\x81\x01\x90a\x0E\xC1V[_a\x16\x18V[P=a\x16+V[a\x0B\xBCV[\x90a\x16Y\x90a\x11.V[_R` R`@_ \x90V[a\x16\x8B\x91_a\x16\x80a\x16\x86\x93a\x16ya\n\xA8V[P\x82a\x0ENV[\x01a\x16OV[a\x14\xB0V[\x90V[\x90a\x16\xA5\x96\x95\x94\x93\x92\x91a\x16\xA0a\x19\xE4V[a\x16\xAAV[\x90\x91\x92V[\x90a\x16\xC2\x96\x94\x95\x93\x92\x91PPP\x92`\x01\x91\x92\x93a\x14kV[\x91\x92\x90\x91\x90V[\x90a\x16\xEE\x93\x92\x91a\x16\xD8a\n\xECV[a\x16\xE0a\n\xECV[a\x16\xE8a\x0E\xAEV[\x91a\x16\x8EV[\x90\x91\x92V[\x90a\x17\n\x96\x95\x94\x93\x92\x91a\x17\x05a\x19\xE4V[a\x17\x0FV[\x90\x91\x92V[\x90a\x17&\x96\x94\x95\x93\x92\x91PPP\x92_\x91\x92\x93a\x14kV[\x91\x92\x90\x91\x90V[\x90a\x17R\x93\x92\x91a\x17<a\n\xECV[a\x17Da\n\xECV[a\x17La\x0E\xAEV[\x91a\x16\xF3V[\x90\x91\x92V[\x90a\x17r\x91a\x17ma\x17h\x82a\x0E\x8DV[a\x17\xB3V[a\x17tV[V[\x90a\x17~\x91a\x18\xC4V[PV[\x90a\x17\x8B\x91a\x17WV[V[a\x17\x95a\n\xA8V[Pa\x17\xAFa\x17\xA9c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x80V[\x91a\x01\x80V[\x14\x90V[a\x17\xC5\x90a\x17\xBFa\x18\xB7V[\x90a\x1AxV[V[\x90a\x17\xD3`\xFF\x91a\x07\xD3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x17\xE6\x90a\x01\xCDV[\x90V[\x90V[\x90a\x18\x01a\x17\xFCa\x18\x08\x92a\x17\xDDV[a\x17\xE9V[\x82Ta\x17\xC7V[\x90UV[a\x18\x14a\n\xA8V[Pa\x18)a\x18#\x82\x84\x90a\x16eV[\x15a\x01\xCDV[_\x14a\x18\xB1Wa\x18P`\x01a\x18K_a\x18C\x81\x86\x90a\x0ENV[\x01\x85\x90a\x16OV[a\x17\xECV[\x90a\x18Ya\x18\xB7V[\x90a\x18\x96a\x18\x90a\x18\x8A\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x0EBV[\x92a\x11.V[\x92a\x11.V[\x92a\x18\x9Fa\x01rV[\x80a\x18\xA9\x81a\x04\x94V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x18\xBFa\n\xECV[P3\x90V[a\x18\xCCa\n\xA8V[Pa\x18\xD8\x81\x83\x90a\x16eV[_\x14a\x19_Wa\x18\xFE_a\x18\xF9_a\x18\xF1\x81\x86\x90a\x0ENV[\x01\x85\x90a\x16OV[a\x17\xECV[\x90a\x19\x07a\x18\xB7V[\x90a\x19Da\x19>a\x198\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x0EBV[\x92a\x11.V[\x92a\x11.V[\x92a\x19Ma\x01rV[\x80a\x19W\x81a\x04\x94V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x19ma\x1A\xB3V[a\x19ua\x19\x8CV[V[\x91\x90a\x19\x8A\x90_` \x85\x01\x94\x01\x90a\x03\"V[V[a\x19\x97_`\x01a\x17\xECV[a\x19\x9Fa\x18\xB7V[a\x19\xD5\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\x19\xCCa\x01rV[\x91\x82\x91\x82a\x19wV[\x03\x90\xA1V[a\x19\xE2a\x19eV[V[a\x19\xECa\x14\xBDV[a\x19\xF2WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\x1A\n`\x04\x82\x01a\x04\x94V[\x03\x90\xFD[a\x1A\x16a\x19\xE4V[a\x1A\x1Ea\x1A V[V[a\x1A+`\x01\x80a\x17\xECV[a\x1A3a\x18\xB7V[a\x1Ai\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\x1A`a\x01rV[\x91\x82\x91\x82a\x19wV[\x03\x90\xA1V[a\x1Ava\x1A\x0EV[V[\x90a\x1A\x8Da\x1A\x87\x83\x83\x90a\x16eV[\x15a\x01\xCDV[a\x1A\x95WPPV[a\x1A\xAF_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0B\x99V[\x03\x90\xFD[a\x1A\xC4a\x1A\xBEa\x14\xBDV[\x15a\x01\xCDV[a\x1A\xCAWV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x1A\xE2`\x04\x82\x01a\x04\x94V[\x03\x90\xFD",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ModuleType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ModuleType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from_underlying(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into_underlying(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl From<u8> for ModuleType {
            fn from(value: u8) -> Self {
                Self::from_underlying(value)
            }
        }
        #[automatically_derived]
        impl From<ModuleType> for u8 {
            fn from(value: ModuleType) -> Self {
                value.into_underlying()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EnforcedPause()` and selector `0xd93c0665`.
```solidity
error EnforcedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EnforcedPause;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EnforcedPause> for UnderlyingRustTuple<'_> {
            fn from(value: EnforcedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EnforcedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EnforcedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EnforcedPause()";
            const SELECTOR: [u8; 4] = [217u8, 60u8, 6u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ExpectedPause()` and selector `0x8dfc202b`.
```solidity
error ExpectedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExpectedPause;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExpectedPause> for UnderlyingRustTuple<'_> {
            fn from(value: ExpectedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExpectedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExpectedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExpectedPause()";
            const SELECTOR: [u8; 4] = [141u8, 252u8, 32u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidModuleType()` and selector `0x2125deae`.
```solidity
error InvalidModuleType();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleType;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleType> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleType) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleType {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleType {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleType()";
            const SELECTOR: [u8; 4] = [33u8, 37u8, 222u8, 174u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CompleteSyndicateDeployed(uint256,address,address,uint8,address)` and selector `0x234a62b8aa546909c227c14788b713d6f47eea68ae2abb5cbde4d2dc0f5522ba`.
```solidity
event CompleteSyndicateDeployed(uint256 indexed chainId, address indexed sequencingChain, address indexed permissionModule, ModuleType moduleType, address admin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CompleteSyndicateDeployed {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub moduleType: <ModuleType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CompleteSyndicateDeployed {
            type DataTuple<'a> = (ModuleType, alloy::sol_types::sol_data::Address);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CompleteSyndicateDeployed(uint256,address,address,uint8,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                35u8, 74u8, 98u8, 184u8, 170u8, 84u8, 105u8, 9u8, 194u8, 39u8, 193u8,
                71u8, 136u8, 183u8, 19u8, 214u8, 244u8, 126u8, 234u8, 104u8, 174u8, 42u8,
                187u8, 92u8, 189u8, 228u8, 210u8, 220u8, 15u8, 85u8, 34u8, 186u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    chainId: topics.1,
                    sequencingChain: topics.2,
                    permissionModule: topics.3,
                    moduleType: data.0,
                    admin: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <ModuleType as alloy_sol_types::SolType>::tokenize(&self.moduleType),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.chainId.clone(),
                    self.sequencingChain.clone(),
                    self.permissionModule.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.chainId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sequencingChain,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.permissionModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CompleteSyndicateDeployed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CompleteSyndicateDeployed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &CompleteSyndicateDeployed,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Paused(address)` and selector `0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258`.
```solidity
event Paused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Paused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Paused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Paused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8, 231u8, 140u8, 234u8, 1u8, 190u8, 227u8, 32u8, 205u8, 78u8, 66u8,
                2u8, 112u8, 181u8, 234u8, 116u8, 0u8, 13u8, 17u8, 176u8, 201u8, 247u8,
                71u8, 84u8, 235u8, 219u8, 252u8, 84u8, 75u8, 5u8, 162u8, 88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Paused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Paused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Paused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Unpaused(address)` and selector `0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa`.
```solidity
event Unpaused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpaused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpaused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Unpaused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8, 185u8, 238u8, 10u8, 73u8, 91u8, 242u8, 230u8, 255u8, 156u8, 145u8,
                167u8, 131u8, 76u8, 27u8, 164u8, 253u8, 210u8, 68u8, 165u8, 232u8, 170u8,
                78u8, 83u8, 123u8, 211u8, 138u8, 234u8, 228u8, 176u8, 115u8, 170u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpaused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpaused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpaused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address _syndicateFactory, address _requireAndFactory, address _requireOrFactory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _syndicateFactory: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requireAndFactory: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requireOrFactory: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.admin,
                        value._syndicateFactory,
                        value._requireAndFactory,
                        value._requireOrFactory,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _syndicateFactory: tuple.1,
                        _requireAndFactory: tuple.2,
                        _requireOrFactory: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._syndicateFactory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requireAndFactory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requireOrFactory,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `computeCompleteSyndicateAddresses(address,uint8,bytes32,bytes32,uint256)` and selector `0x08278847`.
```solidity
function computeCompleteSyndicateAddresses(address admin, ModuleType moduleType, bytes32 moduleSalt, bytes32 chainSalt, uint256 chainId) external view returns (address permissionModuleAddress, address sequencingChainAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeCompleteSyndicateAddressesCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub moduleType: <ModuleType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub moduleSalt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainSalt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`computeCompleteSyndicateAddresses(address,uint8,bytes32,bytes32,uint256)`](computeCompleteSyndicateAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeCompleteSyndicateAddressesReturn {
        #[allow(missing_docs)]
        pub permissionModuleAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ModuleType,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ModuleType as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeCompleteSyndicateAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeCompleteSyndicateAddressesCall) -> Self {
                    (
                        value.admin,
                        value.moduleType,
                        value.moduleSalt,
                        value.chainSalt,
                        value.chainId,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeCompleteSyndicateAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        moduleType: tuple.1,
                        moduleSalt: tuple.2,
                        chainSalt: tuple.3,
                        chainId: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeCompleteSyndicateAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeCompleteSyndicateAddressesReturn) -> Self {
                    (value.permissionModuleAddress, value.sequencingChainAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeCompleteSyndicateAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        permissionModuleAddress: tuple.0,
                        sequencingChainAddress: tuple.1,
                    }
                }
            }
        }
        impl computeCompleteSyndicateAddressesReturn {
            fn _tokenize(
                &self,
            ) -> <computeCompleteSyndicateAddressesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionModuleAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainAddress,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeCompleteSyndicateAddressesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                ModuleType,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = computeCompleteSyndicateAddressesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeCompleteSyndicateAddresses(address,uint8,bytes32,bytes32,uint256)";
            const SELECTOR: [u8; 4] = [8u8, 39u8, 136u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <ModuleType as alloy_sol_types::SolType>::tokenize(&self.moduleType),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleSalt),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainSalt),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                computeCompleteSyndicateAddressesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `deployCompleteSyndicate(uint256,address,uint8,bytes32,bytes32)` and selector `0x4f045828`.
```solidity
function deployCompleteSyndicate(uint256 appchainId, address admin, ModuleType moduleType, bytes32 moduleSalt, bytes32 chainSalt) external returns (address sequencingChain, address permissionModule, uint256 actualChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployCompleteSyndicateCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub moduleType: <ModuleType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub moduleSalt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainSalt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`deployCompleteSyndicate(uint256,address,uint8,bytes32,bytes32)`](deployCompleteSyndicateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployCompleteSyndicateReturn {
        #[allow(missing_docs)]
        pub sequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub actualChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                ModuleType,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                <ModuleType as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployCompleteSyndicateCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployCompleteSyndicateCall) -> Self {
                    (
                        value.appchainId,
                        value.admin,
                        value.moduleType,
                        value.moduleSalt,
                        value.chainSalt,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployCompleteSyndicateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainId: tuple.0,
                        admin: tuple.1,
                        moduleType: tuple.2,
                        moduleSalt: tuple.3,
                        chainSalt: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployCompleteSyndicateReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployCompleteSyndicateReturn) -> Self {
                    (value.sequencingChain, value.permissionModule, value.actualChainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployCompleteSyndicateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sequencingChain: tuple.0,
                        permissionModule: tuple.1,
                        actualChainId: tuple.2,
                    }
                }
            }
        }
        impl deployCompleteSyndicateReturn {
            fn _tokenize(
                &self,
            ) -> <deployCompleteSyndicateCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionModule,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actualChainId),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deployCompleteSyndicateCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                ModuleType,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deployCompleteSyndicateReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deployCompleteSyndicate(uint256,address,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [79u8, 4u8, 88u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <ModuleType as alloy_sol_types::SolType>::tokenize(&self.moduleType),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleSalt),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainSalt),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                deployCompleteSyndicateReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `deployWithRequireAndModule(uint256,address,bytes32,bytes32)` and selector `0xc4d36f2b`.
```solidity
function deployWithRequireAndModule(uint256 appchainId, address admin, bytes32 moduleSalt, bytes32 chainSalt) external returns (address sequencingChain, address permissionModule, uint256 actualChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployWithRequireAndModuleCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub moduleSalt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainSalt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`deployWithRequireAndModule(uint256,address,bytes32,bytes32)`](deployWithRequireAndModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployWithRequireAndModuleReturn {
        #[allow(missing_docs)]
        pub sequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub actualChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployWithRequireAndModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployWithRequireAndModuleCall) -> Self {
                    (value.appchainId, value.admin, value.moduleSalt, value.chainSalt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployWithRequireAndModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainId: tuple.0,
                        admin: tuple.1,
                        moduleSalt: tuple.2,
                        chainSalt: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployWithRequireAndModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployWithRequireAndModuleReturn) -> Self {
                    (value.sequencingChain, value.permissionModule, value.actualChainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployWithRequireAndModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sequencingChain: tuple.0,
                        permissionModule: tuple.1,
                        actualChainId: tuple.2,
                    }
                }
            }
        }
        impl deployWithRequireAndModuleReturn {
            fn _tokenize(
                &self,
            ) -> <deployWithRequireAndModuleCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionModule,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actualChainId),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deployWithRequireAndModuleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deployWithRequireAndModuleReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deployWithRequireAndModule(uint256,address,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [196u8, 211u8, 111u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleSalt),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainSalt),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                deployWithRequireAndModuleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `deployWithRequireOrModule(uint256,address,bytes32,bytes32)` and selector `0xc45a21db`.
```solidity
function deployWithRequireOrModule(uint256 appchainId, address admin, bytes32 moduleSalt, bytes32 chainSalt) external returns (address sequencingChain, address permissionModule, uint256 actualChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployWithRequireOrModuleCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub moduleSalt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub chainSalt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`deployWithRequireOrModule(uint256,address,bytes32,bytes32)`](deployWithRequireOrModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployWithRequireOrModuleReturn {
        #[allow(missing_docs)]
        pub sequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub permissionModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub actualChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployWithRequireOrModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployWithRequireOrModuleCall) -> Self {
                    (value.appchainId, value.admin, value.moduleSalt, value.chainSalt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployWithRequireOrModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainId: tuple.0,
                        admin: tuple.1,
                        moduleSalt: tuple.2,
                        chainSalt: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployWithRequireOrModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployWithRequireOrModuleReturn) -> Self {
                    (value.sequencingChain, value.permissionModule, value.actualChainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployWithRequireOrModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sequencingChain: tuple.0,
                        permissionModule: tuple.1,
                        actualChainId: tuple.2,
                    }
                }
            }
        }
        impl deployWithRequireOrModuleReturn {
            fn _tokenize(
                &self,
            ) -> <deployWithRequireOrModuleCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.permissionModule,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actualChainId),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deployWithRequireOrModuleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deployWithRequireOrModuleReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deployWithRequireOrModule(uint256,address,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [196u8, 90u8, 33u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleSalt),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainSalt),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                deployWithRequireOrModuleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getNamespacePrefix()` and selector `0x9048f4a5`.
```solidity
function getNamespacePrefix() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNamespacePrefixCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getNamespacePrefix()`](getNamespacePrefixCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNamespacePrefixReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNamespacePrefixCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNamespacePrefixCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNamespacePrefixCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNamespacePrefixReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNamespacePrefixReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNamespacePrefixReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getNamespacePrefixCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getNamespacePrefix()";
            const SELECTOR: [u8; 4] = [144u8, 72u8, 244u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getNamespacePrefixReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getNamespacePrefixReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getNextAutoChainId()` and selector `0x2738ef09`.
```solidity
function getNextAutoChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNextAutoChainIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getNextAutoChainId()`](getNextAutoChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNextAutoChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNextAutoChainIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNextAutoChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNextAutoChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNextAutoChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getNextAutoChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getNextAutoChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getNextAutoChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getNextAutoChainId()";
            const SELECTOR: [u8; 4] = [39u8, 56u8, 239u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getNextAutoChainIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getNextAutoChainIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isChainIdUsed(uint256)` and selector `0x7232c133`.
```solidity
function isChainIdUsed(uint256 chainId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isChainIdUsedCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isChainIdUsed(uint256)`](isChainIdUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isChainIdUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isChainIdUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isChainIdUsedCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isChainIdUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isChainIdUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isChainIdUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isChainIdUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isChainIdUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isChainIdUsed(uint256)";
            const SELECTOR: [u8; 4] = [114u8, 50u8, 193u8, 51u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isChainIdUsedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isChainIdUsedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pause()` and selector `0x8456cb59`.
```solidity
function pause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseCall;
    ///Container type for the return parameters of the [`pause()`](pauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl pauseReturn {
            fn _tokenize(
                &self,
            ) -> <pauseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pause()";
            const SELECTOR: [u8; 4] = [132u8, 86u8, 203u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                pauseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `paused()` and selector `0x5c975abb`.
```solidity
function paused() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`paused()`](pausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: pausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pausedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pausedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pausedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `requireAndFactory()` and selector `0xc7d36431`.
```solidity
function requireAndFactory() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireAndFactoryCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`requireAndFactory()`](requireAndFactoryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireAndFactoryReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireAndFactoryCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requireAndFactoryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requireAndFactoryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireAndFactoryReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requireAndFactoryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requireAndFactoryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requireAndFactoryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requireAndFactory()";
            const SELECTOR: [u8; 4] = [199u8, 211u8, 100u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: requireAndFactoryReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: requireAndFactoryReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `requireOrFactory()` and selector `0x70c63096`.
```solidity
function requireOrFactory() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireOrFactoryCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`requireOrFactory()`](requireOrFactoryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireOrFactoryReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireOrFactoryCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requireOrFactoryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requireOrFactoryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireOrFactoryReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requireOrFactoryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requireOrFactoryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requireOrFactoryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requireOrFactory()";
            const SELECTOR: [u8; 4] = [112u8, 198u8, 48u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: requireOrFactoryReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: requireOrFactoryReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `syndicateFactory()` and selector `0xdaab2fe9`.
```solidity
function syndicateFactory() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndicateFactoryCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`syndicateFactory()`](syndicateFactoryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndicateFactoryReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndicateFactoryCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: syndicateFactoryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for syndicateFactoryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndicateFactoryReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: syndicateFactoryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for syndicateFactoryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndicateFactoryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "syndicateFactory()";
            const SELECTOR: [u8; 4] = [218u8, 171u8, 47u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: syndicateFactoryReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: syndicateFactoryReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `unpause()` and selector `0x3f4ba83a`.
```solidity
function unpause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall;
    ///Container type for the return parameters of the [`unpause()`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl unpauseReturn {
            fn _tokenize(
                &self,
            ) -> <unpauseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause()";
            const SELECTOR: [u8; 4] = [63u8, 75u8, 168u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                unpauseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateFactoryWrapper`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum SyndicateFactoryWrapperCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        computeCompleteSyndicateAddresses(computeCompleteSyndicateAddressesCall),
        #[allow(missing_docs)]
        deployCompleteSyndicate(deployCompleteSyndicateCall),
        #[allow(missing_docs)]
        deployWithRequireAndModule(deployWithRequireAndModuleCall),
        #[allow(missing_docs)]
        deployWithRequireOrModule(deployWithRequireOrModuleCall),
        #[allow(missing_docs)]
        getNamespacePrefix(getNamespacePrefixCall),
        #[allow(missing_docs)]
        getNextAutoChainId(getNextAutoChainIdCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isChainIdUsed(isChainIdUsedCall),
        #[allow(missing_docs)]
        pause(pauseCall),
        #[allow(missing_docs)]
        paused(pausedCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        requireAndFactory(requireAndFactoryCall),
        #[allow(missing_docs)]
        requireOrFactory(requireOrFactoryCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        syndicateFactory(syndicateFactoryCall),
        #[allow(missing_docs)]
        unpause(unpauseCall),
    }
    #[automatically_derived]
    impl SyndicateFactoryWrapperCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [8u8, 39u8, 136u8, 71u8],
            [36u8, 138u8, 156u8, 163u8],
            [39u8, 56u8, 239u8, 9u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [63u8, 75u8, 168u8, 58u8],
            [79u8, 4u8, 88u8, 40u8],
            [92u8, 151u8, 90u8, 187u8],
            [112u8, 198u8, 48u8, 150u8],
            [114u8, 50u8, 193u8, 51u8],
            [132u8, 86u8, 203u8, 89u8],
            [144u8, 72u8, 244u8, 165u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [196u8, 90u8, 33u8, 219u8],
            [196u8, 211u8, 111u8, 43u8],
            [199u8, 211u8, 100u8, 49u8],
            [213u8, 71u8, 116u8, 31u8],
            [218u8, 171u8, 47u8, 233u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateFactoryWrapperCalls {
        const NAME: &'static str = "SyndicateFactoryWrapperCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 21usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::computeCompleteSyndicateAddresses(_) => {
                    <computeCompleteSyndicateAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deployCompleteSyndicate(_) => {
                    <deployCompleteSyndicateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deployWithRequireAndModule(_) => {
                    <deployWithRequireAndModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deployWithRequireOrModule(_) => {
                    <deployWithRequireOrModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getNamespacePrefix(_) => {
                    <getNamespacePrefixCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getNextAutoChainId(_) => {
                    <getNextAutoChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isChainIdUsed(_) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pause(_) => <pauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused(_) => <pausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requireAndFactory(_) => {
                    <requireAndFactoryCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requireOrFactory(_) => {
                    <requireOrFactoryCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::syndicateFactory(_) => {
                    <syndicateFactoryCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn computeCompleteSyndicateAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <computeCompleteSyndicateAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperCalls::computeCompleteSyndicateAddresses,
                            )
                    }
                    computeCompleteSyndicateAddresses
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getNextAutoChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::getNextAutoChainId)
                    }
                    getNextAutoChainId
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateFactoryWrapperCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn unpause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateFactoryWrapperCalls::unpause)
                    }
                    unpause
                },
                {
                    fn deployCompleteSyndicate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <deployCompleteSyndicateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::deployCompleteSyndicate)
                    }
                    deployCompleteSyndicate
                },
                {
                    fn paused(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateFactoryWrapperCalls::paused)
                    }
                    paused
                },
                {
                    fn requireOrFactory(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <requireOrFactoryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::requireOrFactory)
                    }
                    requireOrFactory
                },
                {
                    fn isChainIdUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::isChainIdUsed)
                    }
                    isChainIdUsed
                },
                {
                    fn pause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateFactoryWrapperCalls::pause)
                    }
                    pause
                },
                {
                    fn getNamespacePrefix(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <getNamespacePrefixCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::getNamespacePrefix)
                    }
                    getNamespacePrefix
                },
                {
                    fn hasRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateFactoryWrapperCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn deployWithRequireOrModule(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <deployWithRequireOrModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::deployWithRequireOrModule)
                    }
                    deployWithRequireOrModule
                },
                {
                    fn deployWithRequireAndModule(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <deployWithRequireAndModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperCalls::deployWithRequireAndModule,
                            )
                    }
                    deployWithRequireAndModule
                },
                {
                    fn requireAndFactory(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <requireAndFactoryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::requireAndFactory)
                    }
                    requireAndFactory
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn syndicateFactory(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <syndicateFactoryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::syndicateFactory)
                    }
                    syndicateFactory
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn computeCompleteSyndicateAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <computeCompleteSyndicateAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperCalls::computeCompleteSyndicateAddresses,
                            )
                    }
                    computeCompleteSyndicateAddresses
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getNextAutoChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::getNextAutoChainId)
                    }
                    getNextAutoChainId
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn unpause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::unpause)
                    }
                    unpause
                },
                {
                    fn deployCompleteSyndicate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <deployCompleteSyndicateCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::deployCompleteSyndicate)
                    }
                    deployCompleteSyndicate
                },
                {
                    fn paused(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::paused)
                    }
                    paused
                },
                {
                    fn requireOrFactory(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <requireOrFactoryCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::requireOrFactory)
                    }
                    requireOrFactory
                },
                {
                    fn isChainIdUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::isChainIdUsed)
                    }
                    isChainIdUsed
                },
                {
                    fn pause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::pause)
                    }
                    pause
                },
                {
                    fn getNamespacePrefix(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <getNamespacePrefixCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::getNamespacePrefix)
                    }
                    getNamespacePrefix
                },
                {
                    fn hasRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn deployWithRequireOrModule(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <deployWithRequireOrModuleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::deployWithRequireOrModule)
                    }
                    deployWithRequireOrModule
                },
                {
                    fn deployWithRequireAndModule(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <deployWithRequireAndModuleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperCalls::deployWithRequireAndModule,
                            )
                    }
                    deployWithRequireAndModule
                },
                {
                    fn requireAndFactory(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <requireAndFactoryCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::requireAndFactory)
                    }
                    requireAndFactory
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn syndicateFactory(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <syndicateFactoryCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::syndicateFactory)
                    }
                    syndicateFactory
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::computeCompleteSyndicateAddresses(inner) => {
                    <computeCompleteSyndicateAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deployCompleteSyndicate(inner) => {
                    <deployCompleteSyndicateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deployWithRequireAndModule(inner) => {
                    <deployWithRequireAndModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deployWithRequireOrModule(inner) => {
                    <deployWithRequireOrModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getNamespacePrefix(inner) => {
                    <getNamespacePrefixCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getNextAutoChainId(inner) => {
                    <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isChainIdUsed(inner) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requireAndFactory(inner) => {
                    <requireAndFactoryCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requireOrFactory(inner) => {
                    <requireOrFactoryCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::syndicateFactory(inner) => {
                    <syndicateFactoryCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::computeCompleteSyndicateAddresses(inner) => {
                    <computeCompleteSyndicateAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deployCompleteSyndicate(inner) => {
                    <deployCompleteSyndicateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deployWithRequireAndModule(inner) => {
                    <deployWithRequireAndModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deployWithRequireOrModule(inner) => {
                    <deployWithRequireOrModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getNamespacePrefix(inner) => {
                    <getNamespacePrefixCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getNextAutoChainId(inner) => {
                    <getNextAutoChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isChainIdUsed(inner) => {
                    <isChainIdUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requireAndFactory(inner) => {
                    <requireAndFactoryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requireOrFactory(inner) => {
                    <requireOrFactoryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::syndicateFactory(inner) => {
                    <syndicateFactoryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`SyndicateFactoryWrapper`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SyndicateFactoryWrapperErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        EnforcedPause(EnforcedPause),
        #[allow(missing_docs)]
        ExpectedPause(ExpectedPause),
        #[allow(missing_docs)]
        InvalidModuleType(InvalidModuleType),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
    }
    #[automatically_derived]
    impl SyndicateFactoryWrapperErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [33u8, 37u8, 222u8, 174u8],
            [102u8, 151u8, 178u8, 50u8],
            [141u8, 252u8, 32u8, 43u8],
            [217u8, 46u8, 35u8, 61u8],
            [217u8, 60u8, 6u8, 101u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateFactoryWrapperErrors {
        const NAME: &'static str = "SyndicateFactoryWrapperErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EnforcedPause(_) => {
                    <EnforcedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExpectedPause(_) => {
                    <ExpectedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleType(_) => {
                    <InvalidModuleType as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors>] = &[
                {
                    fn InvalidModuleType(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <InvalidModuleType as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::InvalidModuleType)
                    }
                    InvalidModuleType
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(SyndicateFactoryWrapperErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors>] = &[
                {
                    fn InvalidModuleType(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <InvalidModuleType as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::InvalidModuleType)
                    }
                    InvalidModuleType
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateFactoryWrapperErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateFactoryWrapperErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateFactoryWrapperErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidModuleType(inner) => {
                    <InvalidModuleType as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleType(inner) => {
                    <InvalidModuleType as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateFactoryWrapper`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SyndicateFactoryWrapperEvents {
        #[allow(missing_docs)]
        CompleteSyndicateDeployed(CompleteSyndicateDeployed),
        #[allow(missing_docs)]
        Paused(Paused),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        Unpaused(Unpaused),
    }
    #[automatically_derived]
    impl SyndicateFactoryWrapperEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                35u8, 74u8, 98u8, 184u8, 170u8, 84u8, 105u8, 9u8, 194u8, 39u8, 193u8,
                71u8, 136u8, 183u8, 19u8, 214u8, 244u8, 126u8, 234u8, 104u8, 174u8, 42u8,
                187u8, 92u8, 189u8, 228u8, 210u8, 220u8, 15u8, 85u8, 34u8, 186u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                93u8, 185u8, 238u8, 10u8, 73u8, 91u8, 242u8, 230u8, 255u8, 156u8, 145u8,
                167u8, 131u8, 76u8, 27u8, 164u8, 253u8, 210u8, 68u8, 165u8, 232u8, 170u8,
                78u8, 83u8, 123u8, 211u8, 138u8, 234u8, 228u8, 176u8, 115u8, 170u8,
            ],
            [
                98u8, 231u8, 140u8, 234u8, 1u8, 190u8, 227u8, 32u8, 205u8, 78u8, 66u8,
                2u8, 112u8, 181u8, 234u8, 116u8, 0u8, 13u8, 17u8, 176u8, 201u8, 247u8,
                71u8, 84u8, 235u8, 219u8, 252u8, 84u8, 75u8, 5u8, 162u8, 88u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateFactoryWrapperEvents {
        const NAME: &'static str = "SyndicateFactoryWrapperEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <CompleteSyndicateDeployed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CompleteSyndicateDeployed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CompleteSyndicateDeployed)
                }
                Some(<Paused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Paused as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Paused)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(<Unpaused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpaused as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Unpaused)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateFactoryWrapperEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CompleteSyndicateDeployed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CompleteSyndicateDeployed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateFactoryWrapper`](self) contract instance.

See the [wrapper's documentation](`SyndicateFactoryWrapperInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateFactoryWrapperInstance<P, N> {
        SyndicateFactoryWrapperInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        _syndicateFactory: alloy::sol_types::private::Address,
        _requireAndFactory: alloy::sol_types::private::Address,
        _requireOrFactory: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateFactoryWrapperInstance<P, N>>,
    > {
        SyndicateFactoryWrapperInstance::<
            P,
            N,
        >::deploy(
            provider,
            admin,
            _syndicateFactory,
            _requireAndFactory,
            _requireOrFactory,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        _syndicateFactory: alloy::sol_types::private::Address,
        _requireAndFactory: alloy::sol_types::private::Address,
        _requireOrFactory: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        SyndicateFactoryWrapperInstance::<
            P,
            N,
        >::deploy_builder(
            provider,
            admin,
            _syndicateFactory,
            _requireAndFactory,
            _requireOrFactory,
        )
    }
    /**A [`SyndicateFactoryWrapper`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateFactoryWrapper`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateFactoryWrapperInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for SyndicateFactoryWrapperInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateFactoryWrapperInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryWrapperInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateFactoryWrapper`](self) contract instance.

See the [wrapper's documentation](`SyndicateFactoryWrapperInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            _syndicateFactory: alloy::sol_types::private::Address,
            _requireAndFactory: alloy::sol_types::private::Address,
            _requireOrFactory: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SyndicateFactoryWrapperInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                _syndicateFactory,
                _requireAndFactory,
                _requireOrFactory,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            _syndicateFactory: alloy::sol_types::private::Address,
            _requireAndFactory: alloy::sol_types::private::Address,
            _requireOrFactory: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            _syndicateFactory,
                            _requireAndFactory,
                            _requireOrFactory,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> SyndicateFactoryWrapperInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateFactoryWrapperInstance<P, N> {
            SyndicateFactoryWrapperInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryWrapperInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall)
        }
        ///Creates a new call builder for the [`computeCompleteSyndicateAddresses`] function.
        pub fn computeCompleteSyndicateAddresses(
            &self,
            admin: alloy::sol_types::private::Address,
            moduleType: <ModuleType as alloy::sol_types::SolType>::RustType,
            moduleSalt: alloy::sol_types::private::FixedBytes<32>,
            chainSalt: alloy::sol_types::private::FixedBytes<32>,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            computeCompleteSyndicateAddressesCall,
            N,
        > {
            self.call_builder(
                &computeCompleteSyndicateAddressesCall {
                    admin,
                    moduleType,
                    moduleSalt,
                    chainSalt,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`deployCompleteSyndicate`] function.
        pub fn deployCompleteSyndicate(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
            moduleType: <ModuleType as alloy::sol_types::SolType>::RustType,
            moduleSalt: alloy::sol_types::private::FixedBytes<32>,
            chainSalt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, deployCompleteSyndicateCall, N> {
            self.call_builder(
                &deployCompleteSyndicateCall {
                    appchainId,
                    admin,
                    moduleType,
                    moduleSalt,
                    chainSalt,
                },
            )
        }
        ///Creates a new call builder for the [`deployWithRequireAndModule`] function.
        pub fn deployWithRequireAndModule(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
            moduleSalt: alloy::sol_types::private::FixedBytes<32>,
            chainSalt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, deployWithRequireAndModuleCall, N> {
            self.call_builder(
                &deployWithRequireAndModuleCall {
                    appchainId,
                    admin,
                    moduleSalt,
                    chainSalt,
                },
            )
        }
        ///Creates a new call builder for the [`deployWithRequireOrModule`] function.
        pub fn deployWithRequireOrModule(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
            moduleSalt: alloy::sol_types::private::FixedBytes<32>,
            chainSalt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, deployWithRequireOrModuleCall, N> {
            self.call_builder(
                &deployWithRequireOrModuleCall {
                    appchainId,
                    admin,
                    moduleSalt,
                    chainSalt,
                },
            )
        }
        ///Creates a new call builder for the [`getNamespacePrefix`] function.
        pub fn getNamespacePrefix(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getNamespacePrefixCall, N> {
            self.call_builder(&getNamespacePrefixCall)
        }
        ///Creates a new call builder for the [`getNextAutoChainId`] function.
        pub fn getNextAutoChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getNextAutoChainIdCall, N> {
            self.call_builder(&getNextAutoChainIdCall)
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isChainIdUsed`] function.
        pub fn isChainIdUsed(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, isChainIdUsedCall, N> {
            self.call_builder(&isChainIdUsedCall { chainId })
        }
        ///Creates a new call builder for the [`pause`] function.
        pub fn pause(&self) -> alloy_contract::SolCallBuilder<&P, pauseCall, N> {
            self.call_builder(&pauseCall)
        }
        ///Creates a new call builder for the [`paused`] function.
        pub fn paused(&self) -> alloy_contract::SolCallBuilder<&P, pausedCall, N> {
            self.call_builder(&pausedCall)
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`requireAndFactory`] function.
        pub fn requireAndFactory(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, requireAndFactoryCall, N> {
            self.call_builder(&requireAndFactoryCall)
        }
        ///Creates a new call builder for the [`requireOrFactory`] function.
        pub fn requireOrFactory(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, requireOrFactoryCall, N> {
            self.call_builder(&requireOrFactoryCall)
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`syndicateFactory`] function.
        pub fn syndicateFactory(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, syndicateFactoryCall, N> {
            self.call_builder(&syndicateFactoryCall)
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(&self) -> alloy_contract::SolCallBuilder<&P, unpauseCall, N> {
            self.call_builder(&unpauseCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SyndicateFactoryWrapperInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CompleteSyndicateDeployed`] event.
        pub fn CompleteSyndicateDeployed_filter(
            &self,
        ) -> alloy_contract::Event<&P, CompleteSyndicateDeployed, N> {
            self.event_filter::<CompleteSyndicateDeployed>()
        }
        ///Creates a new event filter for the [`Paused`] event.
        pub fn Paused_filter(&self) -> alloy_contract::Event<&P, Paused, N> {
            self.event_filter::<Paused>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`Unpaused`] event.
        pub fn Unpaused_filter(&self) -> alloy_contract::Event<&P, Unpaused, N> {
            self.event_filter::<Unpaused>()
        }
    }
}
