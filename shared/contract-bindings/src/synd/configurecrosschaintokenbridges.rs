/**

Generated by the following Solidity interface...
```solidity
interface ConfigureCrosschainTokenBridges {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ConfigureCrosschainTokenBridges {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610dd26101068239610dd290f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c6107c7565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b90565b60018060a01b031690565b90565b61015c61015761016192610137565b610145565b61013a565b90565b61016d90610148565b90565b6101795f610164565b90565b6101859061013a565b90565b60209181520190565b5f7f546f6b656e2061646472657373206e6f74207365740000000000000000000000910152565b6101c56015602092610188565b6101ce81610191565b0190565b6101e79060208101905f8183039101526101b8565b90565b156101f157565b6101f9610042565b62461bcd60e51b81528061020f600482016101d2565b0390fd5b5f1c90565b90565b61022f61022a61023492610218565b610145565b610218565b90565b61024361024891610213565b61021b565b90565b61025f61025a61026492610218565b610145565b61013a565b90565b61027b6102766102809261013a565b610145565b61013a565b90565b61028c90610267565b90565b6102c86102c36102be7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610237565b61024b565b610283565b90565b6102d490610267565b90565b6102e0906102cb565b90565b6102f36102ee61028f565b6102d7565b90565b6102ff90610283565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061032e90610306565b810190811067ffffffffffffffff82111761034857604052565b610310565b60e01b90565b5f91031261035d57565b61004c565b61036a610042565b3d5f823e3d90fd5b90565b61038961038461038e92610372565b610145565b610218565b90565b906103a461039d610042565b9283610324565b565b67ffffffffffffffff81116103be5760208091020190565b610310565b906103d56103d0836103a6565b610391565b918252565b369037565b906104046103ec836103c3565b926020806103fa86936103a6565b92019103906103da565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b906104288261041a565b811015610439576020809102010190565b610406565b61045261044d61045792610137565b610145565b610218565b90565b906104649061017c565b9052565b90565b61047f61047a61048492610468565b610145565b610218565b90565b67ffffffffffffffff811161049f5760208091020190565b610310565b906104b66104b183610487565b610391565b918252565b369037565b906104e56104cd836104a4565b926020806104db8693610487565b92019103906104bb565b565b90565b6104fe6104f9610503926104e7565b610145565b610218565b90565b5190565b9061051482610506565b811015610525576020809102010190565b610406565b9061053490610218565b9052565b90565b61054f61054a61055492610538565b610145565b610218565b90565b61056090610267565b90565b61056c90610557565b90565b600161057b9101610218565b90565b610588905161017c565b90565b67ffffffffffffffff81116105a9576105a5602091610306565b0190565b610310565b906105c06105bb8361058b565b610391565b918252565b5f7f436f6e6669677572696e67206272696467653a00000000000000000000000000910152565b6105f660136105ae565b90610603602083016105c5565b565b61060d6105ec565b90565b61061a9051610218565b90565b5f7f4d696e74206c696d69743a000000000000000000000000000000000000000000910152565b61064e600b6105ae565b9061065b6020830161061d565b565b610665610644565b90565b5f7f4275726e206c696d69743a000000000000000000000000000000000000000000910152565b610699600b6105ae565b906106a660208301610668565b565b6106b061068f565b90565b6106bc90610283565b90565b6106c89061017c565b9052565b6106d590610218565b9052565b60409061070261070994969593966106f860608401985f8501906106bf565b60208301906106cc565b01906106cc565b565b5f7f42726964676520636f6e66696775726564207375636365737366756c6c790000910152565b61073c601e6105ae565b906107496020830161070b565b565b610753610732565b90565b60207f6c6c790000000000000000000000000000000000000000000000000000000000917f416c6c206272696467657320636f6e66696775726564207375636365737366755f8201520152565b6107ad60236105ae565b906107ba60208301610756565b565b6107c46107a3565b90565b6107f36107d2610170565b6107ec6107e66107e15f610164565b61017c565b9161017c565b14156101ea565b6108036107fe6102e3565b6102f6565b637fb5297f90803b15610bf357610826915f9161081e610042565b93849261034d565b82528183816108376004820161005f565b03925af18015610bee57610bc2575b506108596108546002610375565b6103df565b9061088a7312345678901234567890123456789012345678906108858461087f5f61043e565b9061041e565b61045a565b6108bb7309876543210987654321098765432109876543216108b6846108b0600161046b565b9061041e565b61045a565b6108cd6108c86002610375565b6104c0565b916108fc6108e469d3c21bcecceda10000006104ea565b6108f7856108f15f61043e565b9061050a565b61052a565b61092c6109136a01a784379d99db4200000061053b565b61092785610921600161046b565b9061050a565b61052a565b61093e6109396002610375565b6104c0565b9261096d61095569d3c21bcecceda10000006104ea565b610968866109625f61043e565b9061050a565b61052a565b61099d6109846a01a784379d99db4200000061053b565b61099886610992600161046b565b9061050a565b61052a565b6109ad6109a8610170565b610563565b6109b65f61043e565b5b806109d26109cc6109c78761041a565b610218565b91610218565b1015610b20576109fb6109ee6109e986849061041e565b61057e565b6109f6610605565b610c5e565b610a1e610a11610a0c85849061050a565b610610565b610a1961065d565b610cc6565b610a41610a34610a2f88849061050a565b610610565b610a3c6106a8565b610cc6565b610a4a826106b3565b906363a0daac610a63610a5e87849061041e565b61057e565b610a76610a7187859061050a565b610610565b93610a8a610a858b869061050a565b610610565b92813b15610b1b575f610ab091610abb8296610aa4610042565b998a978896879561034d565b8552600485016106d9565b03925af1918215610b1657610ae592610aea575b50610ae0610adb61074b565b610d20565b61056f565b6109b7565b610b09905f3d8111610b0f575b610b018183610324565b810190610353565b5f610acf565b503d610af7565b610362565b610302565b505050509050610b36610b316107bc565b610d20565b610b46610b416102e3565b6102f6565b6376eadd3690803b15610bbd57610b69915f91610b61610042565b93849261034d565b8252818381610b7a6004820161005f565b03925af18015610bb857610b8c575b50565b610bab905f3d8111610bb1575b610ba38183610324565b810190610353565b5f610b89565b503d610b99565b610362565b610302565b610be1905f3d8111610be7575b610bd98183610324565b810190610353565b5f610846565b503d610bcf565b610362565b610302565b5190565b90825f9392825e0152565b610c26610c2f602093610c3493610c1d81610bf8565b93848093610188565b95869101610bfc565b610306565b0190565b92916020610c54610c5c9360408701908782035f890152610c07565b9401906106bf565b565b90610c99610c9e92610c8a610c71610042565b93849260046020850163319af33360e01b815201610c38565b60208201810382520382610324565b610d61565b565b92916020610cbc610cc49360408701908782035f890152610c07565b9401906106cc565b565b90610d01610d0692610cf2610cd9610042565b938492600460208501632d839cb360e21b815201610ca0565b60208201810382520382610324565b610d61565b565b610d1d9160208201915f818403910152610c07565b90565b610d4b610d5a610d5f92610d32610042565b92839160046020840163104c13eb60e21b815201610d08565b60208201810382520382610324565b610d61565b565b610d7490610d6f6001610da0565b610dc0565b565b6a636f6e736f6c652e6c6f6790565b5f8091610d90610d76565b602082519201905afa50565b5f90565b610da8610d9c565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610dac57610dd090610d85565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\r\xD2a\x01\x06\x829a\r\xD2\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x07\xC7V[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\\a\x01Wa\x01a\x92a\x017V[a\x01EV[a\x01:V[\x90V[a\x01m\x90a\x01HV[\x90V[a\x01y_a\x01dV[\x90V[a\x01\x85\x90a\x01:V[\x90V[` \x91\x81R\x01\x90V[_\x7FToken address not set\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xC5`\x15` \x92a\x01\x88V[a\x01\xCE\x81a\x01\x91V[\x01\x90V[a\x01\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xB8V[\x90V[\x15a\x01\xF1WV[a\x01\xF9a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02\x0F`\x04\x82\x01a\x01\xD2V[\x03\x90\xFD[_\x1C\x90V[\x90V[a\x02/a\x02*a\x024\x92a\x02\x18V[a\x01EV[a\x02\x18V[\x90V[a\x02Ca\x02H\x91a\x02\x13V[a\x02\x1BV[\x90V[a\x02_a\x02Za\x02d\x92a\x02\x18V[a\x01EV[a\x01:V[\x90V[a\x02{a\x02va\x02\x80\x92a\x01:V[a\x01EV[a\x01:V[\x90V[a\x02\x8C\x90a\x02gV[\x90V[a\x02\xC8a\x02\xC3a\x02\xBE\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x027V[a\x02KV[a\x02\x83V[\x90V[a\x02\xD4\x90a\x02gV[\x90V[a\x02\xE0\x90a\x02\xCBV[\x90V[a\x02\xF3a\x02\xEEa\x02\x8FV[a\x02\xD7V[\x90V[a\x02\xFF\x90a\x02\x83V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03.\x90a\x03\x06V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03HW`@RV[a\x03\x10V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03]WV[a\0LV[a\x03ja\0BV[=_\x82>=\x90\xFD[\x90V[a\x03\x89a\x03\x84a\x03\x8E\x92a\x03rV[a\x01EV[a\x02\x18V[\x90V[\x90a\x03\xA4a\x03\x9Da\0BV[\x92\x83a\x03$V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xBEW` \x80\x91\x02\x01\x90V[a\x03\x10V[\x90a\x03\xD5a\x03\xD0\x83a\x03\xA6V[a\x03\x91V[\x91\x82RV[6\x907V[\x90a\x04\x04a\x03\xEC\x83a\x03\xC3V[\x92` \x80a\x03\xFA\x86\x93a\x03\xA6V[\x92\x01\x91\x03\x90a\x03\xDAV[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x04(\x82a\x04\x1AV[\x81\x10\x15a\x049W` \x80\x91\x02\x01\x01\x90V[a\x04\x06V[a\x04Ra\x04Ma\x04W\x92a\x017V[a\x01EV[a\x02\x18V[\x90V[\x90a\x04d\x90a\x01|V[\x90RV[\x90V[a\x04\x7Fa\x04za\x04\x84\x92a\x04hV[a\x01EV[a\x02\x18V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9FW` \x80\x91\x02\x01\x90V[a\x03\x10V[\x90a\x04\xB6a\x04\xB1\x83a\x04\x87V[a\x03\x91V[\x91\x82RV[6\x907V[\x90a\x04\xE5a\x04\xCD\x83a\x04\xA4V[\x92` \x80a\x04\xDB\x86\x93a\x04\x87V[\x92\x01\x91\x03\x90a\x04\xBBV[V[\x90V[a\x04\xFEa\x04\xF9a\x05\x03\x92a\x04\xE7V[a\x01EV[a\x02\x18V[\x90V[Q\x90V[\x90a\x05\x14\x82a\x05\x06V[\x81\x10\x15a\x05%W` \x80\x91\x02\x01\x01\x90V[a\x04\x06V[\x90a\x054\x90a\x02\x18V[\x90RV[\x90V[a\x05Oa\x05Ja\x05T\x92a\x058V[a\x01EV[a\x02\x18V[\x90V[a\x05`\x90a\x02gV[\x90V[a\x05l\x90a\x05WV[\x90V[`\x01a\x05{\x91\x01a\x02\x18V[\x90V[a\x05\x88\x90Qa\x01|V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xA9Wa\x05\xA5` \x91a\x03\x06V[\x01\x90V[a\x03\x10V[\x90a\x05\xC0a\x05\xBB\x83a\x05\x8BV[a\x03\x91V[\x91\x82RV[_\x7FConfiguring bridge:\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xF6`\x13a\x05\xAEV[\x90a\x06\x03` \x83\x01a\x05\xC5V[V[a\x06\ra\x05\xECV[\x90V[a\x06\x1A\x90Qa\x02\x18V[\x90V[_\x7FMint limit:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06N`\x0Ba\x05\xAEV[\x90a\x06[` \x83\x01a\x06\x1DV[V[a\x06ea\x06DV[\x90V[_\x7FBurn limit:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x99`\x0Ba\x05\xAEV[\x90a\x06\xA6` \x83\x01a\x06hV[V[a\x06\xB0a\x06\x8FV[\x90V[a\x06\xBC\x90a\x02\x83V[\x90V[a\x06\xC8\x90a\x01|V[\x90RV[a\x06\xD5\x90a\x02\x18V[\x90RV[`@\x90a\x07\x02a\x07\t\x94\x96\x95\x93\x96a\x06\xF8``\x84\x01\x98_\x85\x01\x90a\x06\xBFV[` \x83\x01\x90a\x06\xCCV[\x01\x90a\x06\xCCV[V[_\x7FBridge configured successfully\0\0\x91\x01RV[a\x07<`\x1Ea\x05\xAEV[\x90a\x07I` \x83\x01a\x07\x0BV[V[a\x07Sa\x072V[\x90V[` \x7Flly\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FAll bridges configured successfu_\x82\x01R\x01RV[a\x07\xAD`#a\x05\xAEV[\x90a\x07\xBA` \x83\x01a\x07VV[V[a\x07\xC4a\x07\xA3V[\x90V[a\x07\xF3a\x07\xD2a\x01pV[a\x07\xECa\x07\xE6a\x07\xE1_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x01\xEAV[a\x08\x03a\x07\xFEa\x02\xE3V[a\x02\xF6V[c\x7F\xB5)\x7F\x90\x80;\x15a\x0B\xF3Wa\x08&\x91_\x91a\x08\x1Ea\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x087`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x0B\xEEWa\x0B\xC2W[Pa\x08Ya\x08T`\x02a\x03uV[a\x03\xDFV[\x90a\x08\x8As\x124Vx\x90\x124Vx\x90\x124Vx\x90\x124Vx\x90a\x08\x85\x84a\x08\x7F_a\x04>V[\x90a\x04\x1EV[a\x04ZV[a\x08\xBBs\t\x87eC!\t\x87eC!\t\x87eC!\t\x87eC!a\x08\xB6\x84a\x08\xB0`\x01a\x04kV[\x90a\x04\x1EV[a\x04ZV[a\x08\xCDa\x08\xC8`\x02a\x03uV[a\x04\xC0V[\x91a\x08\xFCa\x08\xE4i\xD3\xC2\x1B\xCE\xCC\xED\xA1\0\0\0a\x04\xEAV[a\x08\xF7\x85a\x08\xF1_a\x04>V[\x90a\x05\nV[a\x05*V[a\t,a\t\x13j\x01\xA7\x847\x9D\x99\xDBB\0\0\0a\x05;V[a\t'\x85a\t!`\x01a\x04kV[\x90a\x05\nV[a\x05*V[a\t>a\t9`\x02a\x03uV[a\x04\xC0V[\x92a\tma\tUi\xD3\xC2\x1B\xCE\xCC\xED\xA1\0\0\0a\x04\xEAV[a\th\x86a\tb_a\x04>V[\x90a\x05\nV[a\x05*V[a\t\x9Da\t\x84j\x01\xA7\x847\x9D\x99\xDBB\0\0\0a\x05;V[a\t\x98\x86a\t\x92`\x01a\x04kV[\x90a\x05\nV[a\x05*V[a\t\xADa\t\xA8a\x01pV[a\x05cV[a\t\xB6_a\x04>V[[\x80a\t\xD2a\t\xCCa\t\xC7\x87a\x04\x1AV[a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x0B Wa\t\xFBa\t\xEEa\t\xE9\x86\x84\x90a\x04\x1EV[a\x05~V[a\t\xF6a\x06\x05V[a\x0C^V[a\n\x1Ea\n\x11a\n\x0C\x85\x84\x90a\x05\nV[a\x06\x10V[a\n\x19a\x06]V[a\x0C\xC6V[a\nAa\n4a\n/\x88\x84\x90a\x05\nV[a\x06\x10V[a\n<a\x06\xA8V[a\x0C\xC6V[a\nJ\x82a\x06\xB3V[\x90cc\xA0\xDA\xACa\nca\n^\x87\x84\x90a\x04\x1EV[a\x05~V[a\nva\nq\x87\x85\x90a\x05\nV[a\x06\x10V[\x93a\n\x8Aa\n\x85\x8B\x86\x90a\x05\nV[a\x06\x10V[\x92\x81;\x15a\x0B\x1BW_a\n\xB0\x91a\n\xBB\x82\x96a\n\xA4a\0BV[\x99\x8A\x97\x88\x96\x87\x95a\x03MV[\x85R`\x04\x85\x01a\x06\xD9V[\x03\x92Z\xF1\x91\x82\x15a\x0B\x16Wa\n\xE5\x92a\n\xEAW[Pa\n\xE0a\n\xDBa\x07KV[a\r V[a\x05oV[a\t\xB7V[a\x0B\t\x90_=\x81\x11a\x0B\x0FW[a\x0B\x01\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\n\xCFV[P=a\n\xF7V[a\x03bV[a\x03\x02V[PPPP\x90Pa\x0B6a\x0B1a\x07\xBCV[a\r V[a\x0BFa\x0BAa\x02\xE3V[a\x02\xF6V[cv\xEA\xDD6\x90\x80;\x15a\x0B\xBDWa\x0Bi\x91_\x91a\x0Baa\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x0Bz`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x0B\xB8Wa\x0B\x8CW[PV[a\x0B\xAB\x90_=\x81\x11a\x0B\xB1W[a\x0B\xA3\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x0B\x89V[P=a\x0B\x99V[a\x03bV[a\x03\x02V[a\x0B\xE1\x90_=\x81\x11a\x0B\xE7W[a\x0B\xD9\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x08FV[P=a\x0B\xCFV[a\x03bV[a\x03\x02V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0C&a\x0C/` \x93a\x0C4\x93a\x0C\x1D\x81a\x0B\xF8V[\x93\x84\x80\x93a\x01\x88V[\x95\x86\x91\x01a\x0B\xFCV[a\x03\x06V[\x01\x90V[\x92\x91` a\x0CTa\x0C\\\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0C\x07V[\x94\x01\x90a\x06\xBFV[V[\x90a\x0C\x99a\x0C\x9E\x92a\x0C\x8Aa\x0Cqa\0BV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x0C8V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\raV[V[\x92\x91` a\x0C\xBCa\x0C\xC4\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0C\x07V[\x94\x01\x90a\x06\xCCV[V[\x90a\r\x01a\r\x06\x92a\x0C\xF2a\x0C\xD9a\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x0C\xA0V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\raV[V[a\r\x1D\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0C\x07V[\x90V[a\rKa\rZa\r_\x92a\r2a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\r\x08V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\raV[V[a\rt\x90a\ro`\x01a\r\xA0V[a\r\xC0V[V[jconsole.log\x90V[_\x80\x91a\r\x90a\rvV[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\r\xA8a\r\x9CV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\r\xACWa\r\xD0\x90a\r\x85V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c6107c7565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b90565b60018060a01b031690565b90565b61015c61015761016192610137565b610145565b61013a565b90565b61016d90610148565b90565b6101795f610164565b90565b6101859061013a565b90565b60209181520190565b5f7f546f6b656e2061646472657373206e6f74207365740000000000000000000000910152565b6101c56015602092610188565b6101ce81610191565b0190565b6101e79060208101905f8183039101526101b8565b90565b156101f157565b6101f9610042565b62461bcd60e51b81528061020f600482016101d2565b0390fd5b5f1c90565b90565b61022f61022a61023492610218565b610145565b610218565b90565b61024361024891610213565b61021b565b90565b61025f61025a61026492610218565b610145565b61013a565b90565b61027b6102766102809261013a565b610145565b61013a565b90565b61028c90610267565b90565b6102c86102c36102be7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610237565b61024b565b610283565b90565b6102d490610267565b90565b6102e0906102cb565b90565b6102f36102ee61028f565b6102d7565b90565b6102ff90610283565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061032e90610306565b810190811067ffffffffffffffff82111761034857604052565b610310565b60e01b90565b5f91031261035d57565b61004c565b61036a610042565b3d5f823e3d90fd5b90565b61038961038461038e92610372565b610145565b610218565b90565b906103a461039d610042565b9283610324565b565b67ffffffffffffffff81116103be5760208091020190565b610310565b906103d56103d0836103a6565b610391565b918252565b369037565b906104046103ec836103c3565b926020806103fa86936103a6565b92019103906103da565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b906104288261041a565b811015610439576020809102010190565b610406565b61045261044d61045792610137565b610145565b610218565b90565b906104649061017c565b9052565b90565b61047f61047a61048492610468565b610145565b610218565b90565b67ffffffffffffffff811161049f5760208091020190565b610310565b906104b66104b183610487565b610391565b918252565b369037565b906104e56104cd836104a4565b926020806104db8693610487565b92019103906104bb565b565b90565b6104fe6104f9610503926104e7565b610145565b610218565b90565b5190565b9061051482610506565b811015610525576020809102010190565b610406565b9061053490610218565b9052565b90565b61054f61054a61055492610538565b610145565b610218565b90565b61056090610267565b90565b61056c90610557565b90565b600161057b9101610218565b90565b610588905161017c565b90565b67ffffffffffffffff81116105a9576105a5602091610306565b0190565b610310565b906105c06105bb8361058b565b610391565b918252565b5f7f436f6e6669677572696e67206272696467653a00000000000000000000000000910152565b6105f660136105ae565b90610603602083016105c5565b565b61060d6105ec565b90565b61061a9051610218565b90565b5f7f4d696e74206c696d69743a000000000000000000000000000000000000000000910152565b61064e600b6105ae565b9061065b6020830161061d565b565b610665610644565b90565b5f7f4275726e206c696d69743a000000000000000000000000000000000000000000910152565b610699600b6105ae565b906106a660208301610668565b565b6106b061068f565b90565b6106bc90610283565b90565b6106c89061017c565b9052565b6106d590610218565b9052565b60409061070261070994969593966106f860608401985f8501906106bf565b60208301906106cc565b01906106cc565b565b5f7f42726964676520636f6e66696775726564207375636365737366756c6c790000910152565b61073c601e6105ae565b906107496020830161070b565b565b610753610732565b90565b60207f6c6c790000000000000000000000000000000000000000000000000000000000917f416c6c206272696467657320636f6e66696775726564207375636365737366755f8201520152565b6107ad60236105ae565b906107ba60208301610756565b565b6107c46107a3565b90565b6107f36107d2610170565b6107ec6107e66107e15f610164565b61017c565b9161017c565b14156101ea565b6108036107fe6102e3565b6102f6565b637fb5297f90803b15610bf357610826915f9161081e610042565b93849261034d565b82528183816108376004820161005f565b03925af18015610bee57610bc2575b506108596108546002610375565b6103df565b9061088a7312345678901234567890123456789012345678906108858461087f5f61043e565b9061041e565b61045a565b6108bb7309876543210987654321098765432109876543216108b6846108b0600161046b565b9061041e565b61045a565b6108cd6108c86002610375565b6104c0565b916108fc6108e469d3c21bcecceda10000006104ea565b6108f7856108f15f61043e565b9061050a565b61052a565b61092c6109136a01a784379d99db4200000061053b565b61092785610921600161046b565b9061050a565b61052a565b61093e6109396002610375565b6104c0565b9261096d61095569d3c21bcecceda10000006104ea565b610968866109625f61043e565b9061050a565b61052a565b61099d6109846a01a784379d99db4200000061053b565b61099886610992600161046b565b9061050a565b61052a565b6109ad6109a8610170565b610563565b6109b65f61043e565b5b806109d26109cc6109c78761041a565b610218565b91610218565b1015610b20576109fb6109ee6109e986849061041e565b61057e565b6109f6610605565b610c5e565b610a1e610a11610a0c85849061050a565b610610565b610a1961065d565b610cc6565b610a41610a34610a2f88849061050a565b610610565b610a3c6106a8565b610cc6565b610a4a826106b3565b906363a0daac610a63610a5e87849061041e565b61057e565b610a76610a7187859061050a565b610610565b93610a8a610a858b869061050a565b610610565b92813b15610b1b575f610ab091610abb8296610aa4610042565b998a978896879561034d565b8552600485016106d9565b03925af1918215610b1657610ae592610aea575b50610ae0610adb61074b565b610d20565b61056f565b6109b7565b610b09905f3d8111610b0f575b610b018183610324565b810190610353565b5f610acf565b503d610af7565b610362565b610302565b505050509050610b36610b316107bc565b610d20565b610b46610b416102e3565b6102f6565b6376eadd3690803b15610bbd57610b69915f91610b61610042565b93849261034d565b8252818381610b7a6004820161005f565b03925af18015610bb857610b8c575b50565b610bab905f3d8111610bb1575b610ba38183610324565b810190610353565b5f610b89565b503d610b99565b610362565b610302565b610be1905f3d8111610be7575b610bd98183610324565b810190610353565b5f610846565b503d610bcf565b610362565b610302565b5190565b90825f9392825e0152565b610c26610c2f602093610c3493610c1d81610bf8565b93848093610188565b95869101610bfc565b610306565b0190565b92916020610c54610c5c9360408701908782035f890152610c07565b9401906106bf565b565b90610c99610c9e92610c8a610c71610042565b93849260046020850163319af33360e01b815201610c38565b60208201810382520382610324565b610d61565b565b92916020610cbc610cc49360408701908782035f890152610c07565b9401906106cc565b565b90610d01610d0692610cf2610cd9610042565b938492600460208501632d839cb360e21b815201610ca0565b60208201810382520382610324565b610d61565b565b610d1d9160208201915f818403910152610c07565b90565b610d4b610d5a610d5f92610d32610042565b92839160046020840163104c13eb60e21b815201610d08565b60208201810382520382610324565b610d61565b565b610d7490610d6f6001610da0565b610dc0565b565b6a636f6e736f6c652e6c6f6790565b5f8091610d90610d76565b602082519201905afa50565b5f90565b610da8610d9c565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610dac57610dd090610d85565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\x07\xC7V[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\\a\x01Wa\x01a\x92a\x017V[a\x01EV[a\x01:V[\x90V[a\x01m\x90a\x01HV[\x90V[a\x01y_a\x01dV[\x90V[a\x01\x85\x90a\x01:V[\x90V[` \x91\x81R\x01\x90V[_\x7FToken address not set\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xC5`\x15` \x92a\x01\x88V[a\x01\xCE\x81a\x01\x91V[\x01\x90V[a\x01\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xB8V[\x90V[\x15a\x01\xF1WV[a\x01\xF9a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02\x0F`\x04\x82\x01a\x01\xD2V[\x03\x90\xFD[_\x1C\x90V[\x90V[a\x02/a\x02*a\x024\x92a\x02\x18V[a\x01EV[a\x02\x18V[\x90V[a\x02Ca\x02H\x91a\x02\x13V[a\x02\x1BV[\x90V[a\x02_a\x02Za\x02d\x92a\x02\x18V[a\x01EV[a\x01:V[\x90V[a\x02{a\x02va\x02\x80\x92a\x01:V[a\x01EV[a\x01:V[\x90V[a\x02\x8C\x90a\x02gV[\x90V[a\x02\xC8a\x02\xC3a\x02\xBE\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x027V[a\x02KV[a\x02\x83V[\x90V[a\x02\xD4\x90a\x02gV[\x90V[a\x02\xE0\x90a\x02\xCBV[\x90V[a\x02\xF3a\x02\xEEa\x02\x8FV[a\x02\xD7V[\x90V[a\x02\xFF\x90a\x02\x83V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03.\x90a\x03\x06V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03HW`@RV[a\x03\x10V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03]WV[a\0LV[a\x03ja\0BV[=_\x82>=\x90\xFD[\x90V[a\x03\x89a\x03\x84a\x03\x8E\x92a\x03rV[a\x01EV[a\x02\x18V[\x90V[\x90a\x03\xA4a\x03\x9Da\0BV[\x92\x83a\x03$V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xBEW` \x80\x91\x02\x01\x90V[a\x03\x10V[\x90a\x03\xD5a\x03\xD0\x83a\x03\xA6V[a\x03\x91V[\x91\x82RV[6\x907V[\x90a\x04\x04a\x03\xEC\x83a\x03\xC3V[\x92` \x80a\x03\xFA\x86\x93a\x03\xA6V[\x92\x01\x91\x03\x90a\x03\xDAV[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x04(\x82a\x04\x1AV[\x81\x10\x15a\x049W` \x80\x91\x02\x01\x01\x90V[a\x04\x06V[a\x04Ra\x04Ma\x04W\x92a\x017V[a\x01EV[a\x02\x18V[\x90V[\x90a\x04d\x90a\x01|V[\x90RV[\x90V[a\x04\x7Fa\x04za\x04\x84\x92a\x04hV[a\x01EV[a\x02\x18V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9FW` \x80\x91\x02\x01\x90V[a\x03\x10V[\x90a\x04\xB6a\x04\xB1\x83a\x04\x87V[a\x03\x91V[\x91\x82RV[6\x907V[\x90a\x04\xE5a\x04\xCD\x83a\x04\xA4V[\x92` \x80a\x04\xDB\x86\x93a\x04\x87V[\x92\x01\x91\x03\x90a\x04\xBBV[V[\x90V[a\x04\xFEa\x04\xF9a\x05\x03\x92a\x04\xE7V[a\x01EV[a\x02\x18V[\x90V[Q\x90V[\x90a\x05\x14\x82a\x05\x06V[\x81\x10\x15a\x05%W` \x80\x91\x02\x01\x01\x90V[a\x04\x06V[\x90a\x054\x90a\x02\x18V[\x90RV[\x90V[a\x05Oa\x05Ja\x05T\x92a\x058V[a\x01EV[a\x02\x18V[\x90V[a\x05`\x90a\x02gV[\x90V[a\x05l\x90a\x05WV[\x90V[`\x01a\x05{\x91\x01a\x02\x18V[\x90V[a\x05\x88\x90Qa\x01|V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xA9Wa\x05\xA5` \x91a\x03\x06V[\x01\x90V[a\x03\x10V[\x90a\x05\xC0a\x05\xBB\x83a\x05\x8BV[a\x03\x91V[\x91\x82RV[_\x7FConfiguring bridge:\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xF6`\x13a\x05\xAEV[\x90a\x06\x03` \x83\x01a\x05\xC5V[V[a\x06\ra\x05\xECV[\x90V[a\x06\x1A\x90Qa\x02\x18V[\x90V[_\x7FMint limit:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06N`\x0Ba\x05\xAEV[\x90a\x06[` \x83\x01a\x06\x1DV[V[a\x06ea\x06DV[\x90V[_\x7FBurn limit:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x99`\x0Ba\x05\xAEV[\x90a\x06\xA6` \x83\x01a\x06hV[V[a\x06\xB0a\x06\x8FV[\x90V[a\x06\xBC\x90a\x02\x83V[\x90V[a\x06\xC8\x90a\x01|V[\x90RV[a\x06\xD5\x90a\x02\x18V[\x90RV[`@\x90a\x07\x02a\x07\t\x94\x96\x95\x93\x96a\x06\xF8``\x84\x01\x98_\x85\x01\x90a\x06\xBFV[` \x83\x01\x90a\x06\xCCV[\x01\x90a\x06\xCCV[V[_\x7FBridge configured successfully\0\0\x91\x01RV[a\x07<`\x1Ea\x05\xAEV[\x90a\x07I` \x83\x01a\x07\x0BV[V[a\x07Sa\x072V[\x90V[` \x7Flly\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FAll bridges configured successfu_\x82\x01R\x01RV[a\x07\xAD`#a\x05\xAEV[\x90a\x07\xBA` \x83\x01a\x07VV[V[a\x07\xC4a\x07\xA3V[\x90V[a\x07\xF3a\x07\xD2a\x01pV[a\x07\xECa\x07\xE6a\x07\xE1_a\x01dV[a\x01|V[\x91a\x01|V[\x14\x15a\x01\xEAV[a\x08\x03a\x07\xFEa\x02\xE3V[a\x02\xF6V[c\x7F\xB5)\x7F\x90\x80;\x15a\x0B\xF3Wa\x08&\x91_\x91a\x08\x1Ea\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x087`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x0B\xEEWa\x0B\xC2W[Pa\x08Ya\x08T`\x02a\x03uV[a\x03\xDFV[\x90a\x08\x8As\x124Vx\x90\x124Vx\x90\x124Vx\x90\x124Vx\x90a\x08\x85\x84a\x08\x7F_a\x04>V[\x90a\x04\x1EV[a\x04ZV[a\x08\xBBs\t\x87eC!\t\x87eC!\t\x87eC!\t\x87eC!a\x08\xB6\x84a\x08\xB0`\x01a\x04kV[\x90a\x04\x1EV[a\x04ZV[a\x08\xCDa\x08\xC8`\x02a\x03uV[a\x04\xC0V[\x91a\x08\xFCa\x08\xE4i\xD3\xC2\x1B\xCE\xCC\xED\xA1\0\0\0a\x04\xEAV[a\x08\xF7\x85a\x08\xF1_a\x04>V[\x90a\x05\nV[a\x05*V[a\t,a\t\x13j\x01\xA7\x847\x9D\x99\xDBB\0\0\0a\x05;V[a\t'\x85a\t!`\x01a\x04kV[\x90a\x05\nV[a\x05*V[a\t>a\t9`\x02a\x03uV[a\x04\xC0V[\x92a\tma\tUi\xD3\xC2\x1B\xCE\xCC\xED\xA1\0\0\0a\x04\xEAV[a\th\x86a\tb_a\x04>V[\x90a\x05\nV[a\x05*V[a\t\x9Da\t\x84j\x01\xA7\x847\x9D\x99\xDBB\0\0\0a\x05;V[a\t\x98\x86a\t\x92`\x01a\x04kV[\x90a\x05\nV[a\x05*V[a\t\xADa\t\xA8a\x01pV[a\x05cV[a\t\xB6_a\x04>V[[\x80a\t\xD2a\t\xCCa\t\xC7\x87a\x04\x1AV[a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x0B Wa\t\xFBa\t\xEEa\t\xE9\x86\x84\x90a\x04\x1EV[a\x05~V[a\t\xF6a\x06\x05V[a\x0C^V[a\n\x1Ea\n\x11a\n\x0C\x85\x84\x90a\x05\nV[a\x06\x10V[a\n\x19a\x06]V[a\x0C\xC6V[a\nAa\n4a\n/\x88\x84\x90a\x05\nV[a\x06\x10V[a\n<a\x06\xA8V[a\x0C\xC6V[a\nJ\x82a\x06\xB3V[\x90cc\xA0\xDA\xACa\nca\n^\x87\x84\x90a\x04\x1EV[a\x05~V[a\nva\nq\x87\x85\x90a\x05\nV[a\x06\x10V[\x93a\n\x8Aa\n\x85\x8B\x86\x90a\x05\nV[a\x06\x10V[\x92\x81;\x15a\x0B\x1BW_a\n\xB0\x91a\n\xBB\x82\x96a\n\xA4a\0BV[\x99\x8A\x97\x88\x96\x87\x95a\x03MV[\x85R`\x04\x85\x01a\x06\xD9V[\x03\x92Z\xF1\x91\x82\x15a\x0B\x16Wa\n\xE5\x92a\n\xEAW[Pa\n\xE0a\n\xDBa\x07KV[a\r V[a\x05oV[a\t\xB7V[a\x0B\t\x90_=\x81\x11a\x0B\x0FW[a\x0B\x01\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\n\xCFV[P=a\n\xF7V[a\x03bV[a\x03\x02V[PPPP\x90Pa\x0B6a\x0B1a\x07\xBCV[a\r V[a\x0BFa\x0BAa\x02\xE3V[a\x02\xF6V[cv\xEA\xDD6\x90\x80;\x15a\x0B\xBDWa\x0Bi\x91_\x91a\x0Baa\0BV[\x93\x84\x92a\x03MV[\x82R\x81\x83\x81a\x0Bz`\x04\x82\x01a\0_V[\x03\x92Z\xF1\x80\x15a\x0B\xB8Wa\x0B\x8CW[PV[a\x0B\xAB\x90_=\x81\x11a\x0B\xB1W[a\x0B\xA3\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x0B\x89V[P=a\x0B\x99V[a\x03bV[a\x03\x02V[a\x0B\xE1\x90_=\x81\x11a\x0B\xE7W[a\x0B\xD9\x81\x83a\x03$V[\x81\x01\x90a\x03SV[_a\x08FV[P=a\x0B\xCFV[a\x03bV[a\x03\x02V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0C&a\x0C/` \x93a\x0C4\x93a\x0C\x1D\x81a\x0B\xF8V[\x93\x84\x80\x93a\x01\x88V[\x95\x86\x91\x01a\x0B\xFCV[a\x03\x06V[\x01\x90V[\x92\x91` a\x0CTa\x0C\\\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0C\x07V[\x94\x01\x90a\x06\xBFV[V[\x90a\x0C\x99a\x0C\x9E\x92a\x0C\x8Aa\x0Cqa\0BV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x0C8V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\raV[V[\x92\x91` a\x0C\xBCa\x0C\xC4\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0C\x07V[\x94\x01\x90a\x06\xCCV[V[\x90a\r\x01a\r\x06\x92a\x0C\xF2a\x0C\xD9a\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x0C\xA0V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\raV[V[a\r\x1D\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0C\x07V[\x90V[a\rKa\rZa\r_\x92a\r2a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\r\x08V[` \x82\x01\x81\x03\x82R\x03\x82a\x03$V[a\raV[V[a\rt\x90a\ro`\x01a\r\xA0V[a\r\xC0V[V[jconsole.log\x90V[_\x80\x91a\r\x90a\rvV[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\r\xA8a\r\x9CV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\r\xACWa\r\xD0\x90a\r\x85V[V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ConfigureCrosschainTokenBridges`](self) function calls.
    pub enum ConfigureCrosschainTokenBridgesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl ConfigureCrosschainTokenBridgesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConfigureCrosschainTokenBridgesCalls {
        const NAME: &'static str = "ConfigureCrosschainTokenBridgesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConfigureCrosschainTokenBridgesCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigureCrosschainTokenBridgesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigureCrosschainTokenBridgesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigureCrosschainTokenBridgesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigureCrosschainTokenBridgesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ConfigureCrosschainTokenBridges`](self) contract instance.

See the [wrapper's documentation](`ConfigureCrosschainTokenBridgesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ConfigureCrosschainTokenBridgesInstance<T, P, N> {
        ConfigureCrosschainTokenBridgesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ConfigureCrosschainTokenBridgesInstance<T, P, N>>,
    > {
        ConfigureCrosschainTokenBridgesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ConfigureCrosschainTokenBridgesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ConfigureCrosschainTokenBridges`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ConfigureCrosschainTokenBridges`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ConfigureCrosschainTokenBridgesInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for ConfigureCrosschainTokenBridgesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ConfigureCrosschainTokenBridgesInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigureCrosschainTokenBridgesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ConfigureCrosschainTokenBridges`](self) contract instance.

See the [wrapper's documentation](`ConfigureCrosschainTokenBridgesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ConfigureCrosschainTokenBridgesInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > ConfigureCrosschainTokenBridgesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> ConfigureCrosschainTokenBridgesInstance<T, P, N> {
            ConfigureCrosschainTokenBridgesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigureCrosschainTokenBridgesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigureCrosschainTokenBridgesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
