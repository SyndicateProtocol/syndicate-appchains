/**

Generated by the following Solidity interface...
```solidity
interface SimulateEmissions {
    function IS_SCRIPT() external view returns (bool);
    function run() external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SimulateEmissions {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611110610106823961111090f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610995565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b5f1c90565b90565b90565b61015661015161015b9261013c565b61013f565b61013c565b90565b61016a61016f91610137565b610142565b90565b60018060a01b031690565b61019161018c6101969261013c565b61013f565b610172565b90565b6101ad6101a86101b292610172565b61013f565b610172565b90565b6101be90610199565b90565b6101fa6101f56101f07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61015e565b61017d565b6101b5565b90565b61020690610199565b90565b610212906101fd565b90565b6102256102206101c1565b610209565b90565b610231906101b5565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061025c90610234565b810190811067ffffffffffffffff82111761027657604052565b61023e565b60e01b90565b61028a90610172565b90565b61029681610281565b0361029d57565b5f80fd5b905051906102ae8261028d565b565b906020828203126102c9576102c6915f016102a1565b90565b61004c565b60209181520190565b5f7f43414c43554c41544f525f414444520000000000000000000000000000000000910152565b61030b600f6020926102ce565b610314816102d7565b0190565b61032d9060208101905f8183039101526102fe565b90565b610338610042565b3d5f823e3d90fd5b90565b61035761035261035c92610340565b61013f565b610172565b90565b61036890610343565b90565b5f7f43414c43554c41544f525f41444452206e6f7420736574000000000000000000910152565b61039f60176020926102ce565b6103a88161036b565b0190565b6103c19060208101905f818303910152610392565b90565b156103cb57565b6103d3610042565b62461bcd60e51b8152806103e9600482016103ac565b0390fd5b6103f690610199565b90565b610402906103ed565b90565b61040e906101b5565b90565b61041a816100d7565b0361042157565b5f80fd5b9050519061043282610411565b565b9060208282031261044d5761044a915f01610425565b90565b61004c565b9061046561045e610042565b9283610252565b565b67ffffffffffffffff811161048557610481602091610234565b0190565b61023e565b9061049c61049783610467565b610452565b918252565b5f7f43616c63756c61746f72206e6f7420696e697469616c697a6564207965740000910152565b6104d2601e61048a565b906104df602083016104a1565b565b6104e96104c8565b90565b5f7f3d3d3d20456d697373696f6e2053696d756c6174696f6e203d3d3d0000000000910152565b61051d601b61048a565b9061052a602083016104ec565b565b610534610513565b90565b5f7f53696d756c6174696e672066697273742031302065706f6368732e2e2e000000910152565b610568601d61048a565b9061057560208301610537565b565b61057f61055e565b90565b61058b8161013c565b0361059257565b5f80fd5b905051906105a382610582565b565b906020828203126105be576105bb915f01610596565b90565b61004c565b6105d76105d26105dc92610340565b61013f565b61013c565b90565b634e487b7160e01b5f52601160045260245ffd5b6105fc9061013c565b5f19811461060a5760010190565b6105df565b90565b61062661062161062b9261060f565b61013f565b61013c565b90565b61063d6106439193929361013c565b9261013c565b820180921161064e57565b6105df565b90565b61066a61066561066f92610653565b61013f565b61013c565b90565b61067b9061013c565b9052565b9190610692905f60208501940190610672565b565b5f7f45706f6368000000000000000000000000000000000000000000000000000000910152565b6106c5600561048a565b906106d260208301610694565b565b6106dc6106bb565b90565b5f7f2d20446563617920666163746f723a0000000000000000000000000000000000910152565b610710600f61048a565b9061071d602083016106df565b565b610727610706565b90565b5f7f202052656d61696e696e6720737570706c793a00000000000000000000000000910152565b61075b601361048a565b906107686020830161072a565b565b610772610751565b90565b90565b61078c61078761079192610775565b61013f565b61013c565b90565b90565b6107ab6107a66107b092610794565b61013f565b61013c565b90565b6107c26107c89193929361013c565b9261013c565b82039182116107d357565b6105df565b6107e76107ed9193929361013c565b9261013c565b916107f983820261013c565b92818404149015171561080857565b6105df565b634e487b7160e01b5f52601260045260245ffd5b61082d6108339161013c565b9161013c565b90811561083e570490565b61080d565b5f7f2020457374696d6174656420656d697373696f6e3a0000000000000000000000910152565b610874601561048a565b9061088160208301610843565b565b61088b61086a565b90565b5f7f202046696e616c2065706f6368202d20776f756c642073776565703a00000000910152565b6108bf601c61048a565b906108cc6020830161088e565b565b6108d66108b5565b90565b60207f68733a0000000000000000000000000000000000000000000000000000000000917f546f74616c2073696d756c6174656420666f72206e6578742031302065706f635f8201520152565b610930602361048a565b9061093d602083016108d9565b565b610947610926565b90565b5f7f576f756c64206c656176652072656d61696e696e673a00000000000000000000910152565b61097b601661048a565b906109886020830161094a565b565b610992610971565b90565b6109c060206109aa6109a5610215565b610228565b63350d56bf906109b8610042565b93849261027b565b825281806109d060048201610318565b03915afa8015610f0d57610a10915f91610edf575b50610a0b81610a046109fe6109f95f61035f565b610281565b91610281565b14156103c4565b6103f9565b90610a356020610a1f84610405565b63158ef93e90610a2d610042565b93849261027b565b82528180610a456004820161005f565b03915afa8015610eda57610a61915f91610eac575b50156100d7565b610e9857610a75610a7061052c565b610f6a565b610a85610a80610577565b610f6a565b610aa96020610a9384610405565b637667180890610aa1610042565b93849261027b565b82528180610ab96004820161005f565b03915afa908115610e93575f91610e65575b5091610ad65f6105c3565b835b84610afe610af8610af384610aed600a610612565b9061062e565b61013c565b9161013c565b1080610e4a575b15610e3857610b2e6020610b1885610405565b63e4b7fb7390610b26610042565b93849261027b565b82528180610b3e6004820161005f565b03915afa908115610e33575f91610e05575b509485610b65610b5f5f6105c3565b9161013c565b14610df257610ba26020610b7886610405565b63e0f5147490610b978592610b8b610042565b9586948593849361027b565b83526004830161067f565b03915afa908115610ded575f91610dbf575b50610bd2828290610bc36106d4565b90610bcc61071f565b91610ff2565b610be387610bde61076a565b61105d565b81610bf7610bf1602f610778565b9161013c565b145f14610cc957505050610c3f610c2760209286610c21610c55969798610c1c6108ce565b61105d565b9061062e565b935b610c3a85610c3561093f565b61105d565b610405565b63e4b7fb7390610c4d610042565b93849261027b565b82528180610c656004820161005f565b03915afa8015610cc457610c9292610c85925f92610c94575b50906107b3565b610c8d61098a565b61105d565b565b610cb691925060203d8111610cbd575b610cae8183610252565b8101906105a5565b905f610c7e565b503d610ca4565b610330565b92610d06929691936020610cdc87610405565b63236640b990610cfb8892610cef610042565b9889948593849361027b565b83526004830161067f565b03915afa928315610dba57610d63610d4c610d6993610d46610d8097610d86995f91610d8c575b509491610d41670de0b6b3a7640000610797565b6107b3565b906107d8565b91610d5e670de0b6b3a7640000610797565b6107b3565b90610821565b610d7a81610d75610883565b61105d565b9061062e565b916105f3565b93610ad8565b610dad915060203d8111610db3575b610da58183610252565b8101906105a5565b5f610d2d565b503d610d9b565b610330565b610de0915060203d8111610de6575b610dd88183610252565b8101906105a5565b5f610bb4565b503d610dce565b610330565b50509192506020610c3f610c5592610c29565b610e26915060203d8111610e2c575b610e1e8183610252565b8101906105a5565b5f610b50565b503d610e14565b610330565b509192506020610c3f610c5592610c29565b5084610e5f610e596030610656565b9161013c565b10610b05565b610e86915060203d8111610e8c575b610e7e8183610252565b8101906105a5565b5f610acb565b503d610e74565b610330565b9050610eaa610ea56104e1565b610f6a565b565b610ecd915060203d8111610ed3575b610ec58183610252565b810190610434565b5f610a5a565b503d610ebb565b610330565b610f00915060203d8111610f06575b610ef88183610252565b8101906102b0565b5f6109e5565b503d610eee565b610330565b5190565b90825f9392825e0152565b610f40610f49602093610f4e93610f3781610f12565b938480936102ce565b95869101610f16565b610234565b0190565b610f679160208201915f818403910152610f21565b90565b610f95610fa4610fa992610f7c610042565b92839160046020840163104c13eb60e21b815201610f52565b60208201810382520382610252565b61109f565b565b949391610fe890610ff094610fdb610fd060609560808b01908b82035f8d0152610f21565b9260208a0190610672565b8782036040890152610f21565b940190610672565b565b9061102161103594611030939294611008610042565b95869460046020870163c67ea9d160e01b815201610fab565b60208201810382520382610252565b61109f565b565b9291602061105361105b9360408701908782035f890152610f21565b940190610672565b565b9061109861109d92611089611070610042565b938492600460208501632d839cb360e21b815201611037565b60208201810382520382610252565b61109f565b565b6110b2906110ad60016110de565b6110fe565b565b6a636f6e736f6c652e6c6f6790565b5f80916110ce6110b4565b602082519201905afa50565b5f90565b6110e66110da565b5090565b634e487b7160e01b5f52605160045260245ffd5b6001036110ea5761110e906110c3565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x11\x10a\x01\x06\x829a\x11\x10\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\t\x95V[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1C\x90V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\x01<V[a\x01?V[a\x01<V[\x90V[a\x01ja\x01o\x91a\x017V[a\x01BV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x91a\x01\x8Ca\x01\x96\x92a\x01<V[a\x01?V[a\x01rV[\x90V[a\x01\xADa\x01\xA8a\x01\xB2\x92a\x01rV[a\x01?V[a\x01rV[\x90V[a\x01\xBE\x90a\x01\x99V[\x90V[a\x01\xFAa\x01\xF5a\x01\xF0\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x01^V[a\x01}V[a\x01\xB5V[\x90V[a\x02\x06\x90a\x01\x99V[\x90V[a\x02\x12\x90a\x01\xFDV[\x90V[a\x02%a\x02 a\x01\xC1V[a\x02\tV[\x90V[a\x021\x90a\x01\xB5V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\\\x90a\x024V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02vW`@RV[a\x02>V[`\xE0\x1B\x90V[a\x02\x8A\x90a\x01rV[\x90V[a\x02\x96\x81a\x02\x81V[\x03a\x02\x9DWV[_\x80\xFD[\x90PQ\x90a\x02\xAE\x82a\x02\x8DV[V[\x90` \x82\x82\x03\x12a\x02\xC9Wa\x02\xC6\x91_\x01a\x02\xA1V[\x90V[a\0LV[` \x91\x81R\x01\x90V[_\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x0B`\x0F` \x92a\x02\xCEV[a\x03\x14\x81a\x02\xD7V[\x01\x90V[a\x03-\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xFEV[\x90V[a\x038a\0BV[=_\x82>=\x90\xFD[\x90V[a\x03Wa\x03Ra\x03\\\x92a\x03@V[a\x01?V[a\x01rV[\x90V[a\x03h\x90a\x03CV[\x90V[_\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x9F`\x17` \x92a\x02\xCEV[a\x03\xA8\x81a\x03kV[\x01\x90V[a\x03\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\x92V[\x90V[\x15a\x03\xCBWV[a\x03\xD3a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xE9`\x04\x82\x01a\x03\xACV[\x03\x90\xFD[a\x03\xF6\x90a\x01\x99V[\x90V[a\x04\x02\x90a\x03\xEDV[\x90V[a\x04\x0E\x90a\x01\xB5V[\x90V[a\x04\x1A\x81a\0\xD7V[\x03a\x04!WV[_\x80\xFD[\x90PQ\x90a\x042\x82a\x04\x11V[V[\x90` \x82\x82\x03\x12a\x04MWa\x04J\x91_\x01a\x04%V[\x90V[a\0LV[\x90a\x04ea\x04^a\0BV[\x92\x83a\x02RV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x85Wa\x04\x81` \x91a\x024V[\x01\x90V[a\x02>V[\x90a\x04\x9Ca\x04\x97\x83a\x04gV[a\x04RV[\x91\x82RV[_\x7FCalculator not initialized yet\0\0\x91\x01RV[a\x04\xD2`\x1Ea\x04\x8AV[\x90a\x04\xDF` \x83\x01a\x04\xA1V[V[a\x04\xE9a\x04\xC8V[\x90V[_\x7F=== Emission Simulation ===\0\0\0\0\0\x91\x01RV[a\x05\x1D`\x1Ba\x04\x8AV[\x90a\x05*` \x83\x01a\x04\xECV[V[a\x054a\x05\x13V[\x90V[_\x7FSimulating first 10 epochs...\0\0\0\x91\x01RV[a\x05h`\x1Da\x04\x8AV[\x90a\x05u` \x83\x01a\x057V[V[a\x05\x7Fa\x05^V[\x90V[a\x05\x8B\x81a\x01<V[\x03a\x05\x92WV[_\x80\xFD[\x90PQ\x90a\x05\xA3\x82a\x05\x82V[V[\x90` \x82\x82\x03\x12a\x05\xBEWa\x05\xBB\x91_\x01a\x05\x96V[\x90V[a\0LV[a\x05\xD7a\x05\xD2a\x05\xDC\x92a\x03@V[a\x01?V[a\x01<V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x05\xFC\x90a\x01<V[_\x19\x81\x14a\x06\nW`\x01\x01\x90V[a\x05\xDFV[\x90V[a\x06&a\x06!a\x06+\x92a\x06\x0FV[a\x01?V[a\x01<V[\x90V[a\x06=a\x06C\x91\x93\x92\x93a\x01<V[\x92a\x01<V[\x82\x01\x80\x92\x11a\x06NWV[a\x05\xDFV[\x90V[a\x06ja\x06ea\x06o\x92a\x06SV[a\x01?V[a\x01<V[\x90V[a\x06{\x90a\x01<V[\x90RV[\x91\x90a\x06\x92\x90_` \x85\x01\x94\x01\x90a\x06rV[V[_\x7FEpoch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xC5`\x05a\x04\x8AV[\x90a\x06\xD2` \x83\x01a\x06\x94V[V[a\x06\xDCa\x06\xBBV[\x90V[_\x7F- Decay factor:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\x10`\x0Fa\x04\x8AV[\x90a\x07\x1D` \x83\x01a\x06\xDFV[V[a\x07'a\x07\x06V[\x90V[_\x7F  Remaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07[`\x13a\x04\x8AV[\x90a\x07h` \x83\x01a\x07*V[V[a\x07ra\x07QV[\x90V[\x90V[a\x07\x8Ca\x07\x87a\x07\x91\x92a\x07uV[a\x01?V[a\x01<V[\x90V[\x90V[a\x07\xABa\x07\xA6a\x07\xB0\x92a\x07\x94V[a\x01?V[a\x01<V[\x90V[a\x07\xC2a\x07\xC8\x91\x93\x92\x93a\x01<V[\x92a\x01<V[\x82\x03\x91\x82\x11a\x07\xD3WV[a\x05\xDFV[a\x07\xE7a\x07\xED\x91\x93\x92\x93a\x01<V[\x92a\x01<V[\x91a\x07\xF9\x83\x82\x02a\x01<V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x08\x08WV[a\x05\xDFV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x08-a\x083\x91a\x01<V[\x91a\x01<V[\x90\x81\x15a\x08>W\x04\x90V[a\x08\rV[_\x7F  Estimated emission:\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08t`\x15a\x04\x8AV[\x90a\x08\x81` \x83\x01a\x08CV[V[a\x08\x8Ba\x08jV[\x90V[_\x7F  Final epoch - would sweep:\0\0\0\0\x91\x01RV[a\x08\xBF`\x1Ca\x04\x8AV[\x90a\x08\xCC` \x83\x01a\x08\x8EV[V[a\x08\xD6a\x08\xB5V[\x90V[` \x7Fhs:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTotal simulated for next 10 epoc_\x82\x01R\x01RV[a\t0`#a\x04\x8AV[\x90a\t=` \x83\x01a\x08\xD9V[V[a\tGa\t&V[\x90V[_\x7FWould leave remaining:\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t{`\x16a\x04\x8AV[\x90a\t\x88` \x83\x01a\tJV[V[a\t\x92a\tqV[\x90V[a\t\xC0` a\t\xAAa\t\xA5a\x02\x15V[a\x02(V[c5\rV\xBF\x90a\t\xB8a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\t\xD0`\x04\x82\x01a\x03\x18V[\x03\x91Z\xFA\x80\x15a\x0F\rWa\n\x10\x91_\x91a\x0E\xDFW[Pa\n\x0B\x81a\n\x04a\t\xFEa\t\xF9_a\x03_V[a\x02\x81V[\x91a\x02\x81V[\x14\x15a\x03\xC4V[a\x03\xF9V[\x90a\n5` a\n\x1F\x84a\x04\x05V[c\x15\x8E\xF9>\x90a\n-a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\nE`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0E\xDAWa\na\x91_\x91a\x0E\xACW[P\x15a\0\xD7V[a\x0E\x98Wa\nua\npa\x05,V[a\x0FjV[a\n\x85a\n\x80a\x05wV[a\x0FjV[a\n\xA9` a\n\x93\x84a\x04\x05V[cvg\x18\x08\x90a\n\xA1a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\n\xB9`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x90\x81\x15a\x0E\x93W_\x91a\x0EeW[P\x91a\n\xD6_a\x05\xC3V[\x83[\x84a\n\xFEa\n\xF8a\n\xF3\x84a\n\xED`\na\x06\x12V[\x90a\x06.V[a\x01<V[\x91a\x01<V[\x10\x80a\x0EJW[\x15a\x0E8Wa\x0B.` a\x0B\x18\x85a\x04\x05V[c\xE4\xB7\xFBs\x90a\x0B&a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0B>`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x90\x81\x15a\x0E3W_\x91a\x0E\x05W[P\x94\x85a\x0Bea\x0B__a\x05\xC3V[\x91a\x01<V[\x14a\r\xF2Wa\x0B\xA2` a\x0Bx\x86a\x04\x05V[c\xE0\xF5\x14t\x90a\x0B\x97\x85\x92a\x0B\x8Ba\0BV[\x95\x86\x94\x85\x93\x84\x93a\x02{V[\x83R`\x04\x83\x01a\x06\x7FV[\x03\x91Z\xFA\x90\x81\x15a\r\xEDW_\x91a\r\xBFW[Pa\x0B\xD2\x82\x82\x90a\x0B\xC3a\x06\xD4V[\x90a\x0B\xCCa\x07\x1FV[\x91a\x0F\xF2V[a\x0B\xE3\x87a\x0B\xDEa\x07jV[a\x10]V[\x81a\x0B\xF7a\x0B\xF1`/a\x07xV[\x91a\x01<V[\x14_\x14a\x0C\xC9WPPPa\x0C?a\x0C'` \x92\x86a\x0C!a\x0CU\x96\x97\x98a\x0C\x1Ca\x08\xCEV[a\x10]V[\x90a\x06.V[\x93[a\x0C:\x85a\x0C5a\t?V[a\x10]V[a\x04\x05V[c\xE4\xB7\xFBs\x90a\x0CMa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0Ce`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0C\xC4Wa\x0C\x92\x92a\x0C\x85\x92_\x92a\x0C\x94W[P\x90a\x07\xB3V[a\x0C\x8Da\t\x8AV[a\x10]V[V[a\x0C\xB6\x91\x92P` =\x81\x11a\x0C\xBDW[a\x0C\xAE\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[\x90_a\x0C~V[P=a\x0C\xA4V[a\x030V[\x92a\r\x06\x92\x96\x91\x93` a\x0C\xDC\x87a\x04\x05V[c#f@\xB9\x90a\x0C\xFB\x88\x92a\x0C\xEFa\0BV[\x98\x89\x94\x85\x93\x84\x93a\x02{V[\x83R`\x04\x83\x01a\x06\x7FV[\x03\x91Z\xFA\x92\x83\x15a\r\xBAWa\rca\rLa\ri\x93a\rFa\r\x80\x97a\r\x86\x99_\x91a\r\x8CW[P\x94\x91a\rAg\r\xE0\xB6\xB3\xA7d\0\0a\x07\x97V[a\x07\xB3V[\x90a\x07\xD8V[\x91a\r^g\r\xE0\xB6\xB3\xA7d\0\0a\x07\x97V[a\x07\xB3V[\x90a\x08!V[a\rz\x81a\rua\x08\x83V[a\x10]V[\x90a\x06.V[\x91a\x05\xF3V[\x93a\n\xD8V[a\r\xAD\x91P` =\x81\x11a\r\xB3W[a\r\xA5\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\r-V[P=a\r\x9BV[a\x030V[a\r\xE0\x91P` =\x81\x11a\r\xE6W[a\r\xD8\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\x0B\xB4V[P=a\r\xCEV[a\x030V[PP\x91\x92P` a\x0C?a\x0CU\x92a\x0C)V[a\x0E&\x91P` =\x81\x11a\x0E,W[a\x0E\x1E\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\x0BPV[P=a\x0E\x14V[a\x030V[P\x91\x92P` a\x0C?a\x0CU\x92a\x0C)V[P\x84a\x0E_a\x0EY`0a\x06VV[\x91a\x01<V[\x10a\x0B\x05V[a\x0E\x86\x91P` =\x81\x11a\x0E\x8CW[a\x0E~\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\n\xCBV[P=a\x0EtV[a\x030V[\x90Pa\x0E\xAAa\x0E\xA5a\x04\xE1V[a\x0FjV[V[a\x0E\xCD\x91P` =\x81\x11a\x0E\xD3W[a\x0E\xC5\x81\x83a\x02RV[\x81\x01\x90a\x044V[_a\nZV[P=a\x0E\xBBV[a\x030V[a\x0F\0\x91P` =\x81\x11a\x0F\x06W[a\x0E\xF8\x81\x83a\x02RV[\x81\x01\x90a\x02\xB0V[_a\t\xE5V[P=a\x0E\xEEV[a\x030V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0F@a\x0FI` \x93a\x0FN\x93a\x0F7\x81a\x0F\x12V[\x93\x84\x80\x93a\x02\xCEV[\x95\x86\x91\x01a\x0F\x16V[a\x024V[\x01\x90V[a\x0Fg\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0F!V[\x90V[a\x0F\x95a\x0F\xA4a\x0F\xA9\x92a\x0F|a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x0FRV[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\x9FV[V[\x94\x93\x91a\x0F\xE8\x90a\x0F\xF0\x94a\x0F\xDBa\x0F\xD0``\x95`\x80\x8B\x01\x90\x8B\x82\x03_\x8D\x01Ra\x0F!V[\x92` \x8A\x01\x90a\x06rV[\x87\x82\x03`@\x89\x01Ra\x0F!V[\x94\x01\x90a\x06rV[V[\x90a\x10!a\x105\x94a\x100\x93\x92\x94a\x10\x08a\0BV[\x95\x86\x94`\x04` \x87\x01c\xC6~\xA9\xD1`\xE0\x1B\x81R\x01a\x0F\xABV[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\x9FV[V[\x92\x91` a\x10Sa\x10[\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0F!V[\x94\x01\x90a\x06rV[V[\x90a\x10\x98a\x10\x9D\x92a\x10\x89a\x10pa\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x107V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\x9FV[V[a\x10\xB2\x90a\x10\xAD`\x01a\x10\xDEV[a\x10\xFEV[V[jconsole.log\x90V[_\x80\x91a\x10\xCEa\x10\xB4V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x10\xE6a\x10\xDAV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x10\xEAWa\x11\x0E\x90a\x10\xC3V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610995565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b5f1c90565b90565b90565b61015661015161015b9261013c565b61013f565b61013c565b90565b61016a61016f91610137565b610142565b90565b60018060a01b031690565b61019161018c6101969261013c565b61013f565b610172565b90565b6101ad6101a86101b292610172565b61013f565b610172565b90565b6101be90610199565b90565b6101fa6101f56101f07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61015e565b61017d565b6101b5565b90565b61020690610199565b90565b610212906101fd565b90565b6102256102206101c1565b610209565b90565b610231906101b5565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061025c90610234565b810190811067ffffffffffffffff82111761027657604052565b61023e565b60e01b90565b61028a90610172565b90565b61029681610281565b0361029d57565b5f80fd5b905051906102ae8261028d565b565b906020828203126102c9576102c6915f016102a1565b90565b61004c565b60209181520190565b5f7f43414c43554c41544f525f414444520000000000000000000000000000000000910152565b61030b600f6020926102ce565b610314816102d7565b0190565b61032d9060208101905f8183039101526102fe565b90565b610338610042565b3d5f823e3d90fd5b90565b61035761035261035c92610340565b61013f565b610172565b90565b61036890610343565b90565b5f7f43414c43554c41544f525f41444452206e6f7420736574000000000000000000910152565b61039f60176020926102ce565b6103a88161036b565b0190565b6103c19060208101905f818303910152610392565b90565b156103cb57565b6103d3610042565b62461bcd60e51b8152806103e9600482016103ac565b0390fd5b6103f690610199565b90565b610402906103ed565b90565b61040e906101b5565b90565b61041a816100d7565b0361042157565b5f80fd5b9050519061043282610411565b565b9060208282031261044d5761044a915f01610425565b90565b61004c565b9061046561045e610042565b9283610252565b565b67ffffffffffffffff811161048557610481602091610234565b0190565b61023e565b9061049c61049783610467565b610452565b918252565b5f7f43616c63756c61746f72206e6f7420696e697469616c697a6564207965740000910152565b6104d2601e61048a565b906104df602083016104a1565b565b6104e96104c8565b90565b5f7f3d3d3d20456d697373696f6e2053696d756c6174696f6e203d3d3d0000000000910152565b61051d601b61048a565b9061052a602083016104ec565b565b610534610513565b90565b5f7f53696d756c6174696e672066697273742031302065706f6368732e2e2e000000910152565b610568601d61048a565b9061057560208301610537565b565b61057f61055e565b90565b61058b8161013c565b0361059257565b5f80fd5b905051906105a382610582565b565b906020828203126105be576105bb915f01610596565b90565b61004c565b6105d76105d26105dc92610340565b61013f565b61013c565b90565b634e487b7160e01b5f52601160045260245ffd5b6105fc9061013c565b5f19811461060a5760010190565b6105df565b90565b61062661062161062b9261060f565b61013f565b61013c565b90565b61063d6106439193929361013c565b9261013c565b820180921161064e57565b6105df565b90565b61066a61066561066f92610653565b61013f565b61013c565b90565b61067b9061013c565b9052565b9190610692905f60208501940190610672565b565b5f7f45706f6368000000000000000000000000000000000000000000000000000000910152565b6106c5600561048a565b906106d260208301610694565b565b6106dc6106bb565b90565b5f7f2d20446563617920666163746f723a0000000000000000000000000000000000910152565b610710600f61048a565b9061071d602083016106df565b565b610727610706565b90565b5f7f202052656d61696e696e6720737570706c793a00000000000000000000000000910152565b61075b601361048a565b906107686020830161072a565b565b610772610751565b90565b90565b61078c61078761079192610775565b61013f565b61013c565b90565b90565b6107ab6107a66107b092610794565b61013f565b61013c565b90565b6107c26107c89193929361013c565b9261013c565b82039182116107d357565b6105df565b6107e76107ed9193929361013c565b9261013c565b916107f983820261013c565b92818404149015171561080857565b6105df565b634e487b7160e01b5f52601260045260245ffd5b61082d6108339161013c565b9161013c565b90811561083e570490565b61080d565b5f7f2020457374696d6174656420656d697373696f6e3a0000000000000000000000910152565b610874601561048a565b9061088160208301610843565b565b61088b61086a565b90565b5f7f202046696e616c2065706f6368202d20776f756c642073776565703a00000000910152565b6108bf601c61048a565b906108cc6020830161088e565b565b6108d66108b5565b90565b60207f68733a0000000000000000000000000000000000000000000000000000000000917f546f74616c2073696d756c6174656420666f72206e6578742031302065706f635f8201520152565b610930602361048a565b9061093d602083016108d9565b565b610947610926565b90565b5f7f576f756c64206c656176652072656d61696e696e673a00000000000000000000910152565b61097b601661048a565b906109886020830161094a565b565b610992610971565b90565b6109c060206109aa6109a5610215565b610228565b63350d56bf906109b8610042565b93849261027b565b825281806109d060048201610318565b03915afa8015610f0d57610a10915f91610edf575b50610a0b81610a046109fe6109f95f61035f565b610281565b91610281565b14156103c4565b6103f9565b90610a356020610a1f84610405565b63158ef93e90610a2d610042565b93849261027b565b82528180610a456004820161005f565b03915afa8015610eda57610a61915f91610eac575b50156100d7565b610e9857610a75610a7061052c565b610f6a565b610a85610a80610577565b610f6a565b610aa96020610a9384610405565b637667180890610aa1610042565b93849261027b565b82528180610ab96004820161005f565b03915afa908115610e93575f91610e65575b5091610ad65f6105c3565b835b84610afe610af8610af384610aed600a610612565b9061062e565b61013c565b9161013c565b1080610e4a575b15610e3857610b2e6020610b1885610405565b63e4b7fb7390610b26610042565b93849261027b565b82528180610b3e6004820161005f565b03915afa908115610e33575f91610e05575b509485610b65610b5f5f6105c3565b9161013c565b14610df257610ba26020610b7886610405565b63e0f5147490610b978592610b8b610042565b9586948593849361027b565b83526004830161067f565b03915afa908115610ded575f91610dbf575b50610bd2828290610bc36106d4565b90610bcc61071f565b91610ff2565b610be387610bde61076a565b61105d565b81610bf7610bf1602f610778565b9161013c565b145f14610cc957505050610c3f610c2760209286610c21610c55969798610c1c6108ce565b61105d565b9061062e565b935b610c3a85610c3561093f565b61105d565b610405565b63e4b7fb7390610c4d610042565b93849261027b565b82528180610c656004820161005f565b03915afa8015610cc457610c9292610c85925f92610c94575b50906107b3565b610c8d61098a565b61105d565b565b610cb691925060203d8111610cbd575b610cae8183610252565b8101906105a5565b905f610c7e565b503d610ca4565b610330565b92610d06929691936020610cdc87610405565b63236640b990610cfb8892610cef610042565b9889948593849361027b565b83526004830161067f565b03915afa928315610dba57610d63610d4c610d6993610d46610d8097610d86995f91610d8c575b509491610d41670de0b6b3a7640000610797565b6107b3565b906107d8565b91610d5e670de0b6b3a7640000610797565b6107b3565b90610821565b610d7a81610d75610883565b61105d565b9061062e565b916105f3565b93610ad8565b610dad915060203d8111610db3575b610da58183610252565b8101906105a5565b5f610d2d565b503d610d9b565b610330565b610de0915060203d8111610de6575b610dd88183610252565b8101906105a5565b5f610bb4565b503d610dce565b610330565b50509192506020610c3f610c5592610c29565b610e26915060203d8111610e2c575b610e1e8183610252565b8101906105a5565b5f610b50565b503d610e14565b610330565b509192506020610c3f610c5592610c29565b5084610e5f610e596030610656565b9161013c565b10610b05565b610e86915060203d8111610e8c575b610e7e8183610252565b8101906105a5565b5f610acb565b503d610e74565b610330565b9050610eaa610ea56104e1565b610f6a565b565b610ecd915060203d8111610ed3575b610ec58183610252565b810190610434565b5f610a5a565b503d610ebb565b610330565b610f00915060203d8111610f06575b610ef88183610252565b8101906102b0565b5f6109e5565b503d610eee565b610330565b5190565b90825f9392825e0152565b610f40610f49602093610f4e93610f3781610f12565b938480936102ce565b95869101610f16565b610234565b0190565b610f679160208201915f818403910152610f21565b90565b610f95610fa4610fa992610f7c610042565b92839160046020840163104c13eb60e21b815201610f52565b60208201810382520382610252565b61109f565b565b949391610fe890610ff094610fdb610fd060609560808b01908b82035f8d0152610f21565b9260208a0190610672565b8782036040890152610f21565b940190610672565b565b9061102161103594611030939294611008610042565b95869460046020870163c67ea9d160e01b815201610fab565b60208201810382520382610252565b61109f565b565b9291602061105361105b9360408701908782035f890152610f21565b940190610672565b565b9061109861109d92611089611070610042565b938492600460208501632d839cb360e21b815201611037565b60208201810382520382610252565b61109f565b565b6110b2906110ad60016110de565b6110fe565b565b6a636f6e736f6c652e6c6f6790565b5f80916110ce6110b4565b602082519201905afa50565b5f90565b6110e66110da565b5090565b634e487b7160e01b5f52605160045260245ffd5b6001036110ea5761110e906110c3565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\t\x95V[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1C\x90V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\x01<V[a\x01?V[a\x01<V[\x90V[a\x01ja\x01o\x91a\x017V[a\x01BV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x91a\x01\x8Ca\x01\x96\x92a\x01<V[a\x01?V[a\x01rV[\x90V[a\x01\xADa\x01\xA8a\x01\xB2\x92a\x01rV[a\x01?V[a\x01rV[\x90V[a\x01\xBE\x90a\x01\x99V[\x90V[a\x01\xFAa\x01\xF5a\x01\xF0\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x01^V[a\x01}V[a\x01\xB5V[\x90V[a\x02\x06\x90a\x01\x99V[\x90V[a\x02\x12\x90a\x01\xFDV[\x90V[a\x02%a\x02 a\x01\xC1V[a\x02\tV[\x90V[a\x021\x90a\x01\xB5V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\\\x90a\x024V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02vW`@RV[a\x02>V[`\xE0\x1B\x90V[a\x02\x8A\x90a\x01rV[\x90V[a\x02\x96\x81a\x02\x81V[\x03a\x02\x9DWV[_\x80\xFD[\x90PQ\x90a\x02\xAE\x82a\x02\x8DV[V[\x90` \x82\x82\x03\x12a\x02\xC9Wa\x02\xC6\x91_\x01a\x02\xA1V[\x90V[a\0LV[` \x91\x81R\x01\x90V[_\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x0B`\x0F` \x92a\x02\xCEV[a\x03\x14\x81a\x02\xD7V[\x01\x90V[a\x03-\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xFEV[\x90V[a\x038a\0BV[=_\x82>=\x90\xFD[\x90V[a\x03Wa\x03Ra\x03\\\x92a\x03@V[a\x01?V[a\x01rV[\x90V[a\x03h\x90a\x03CV[\x90V[_\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x9F`\x17` \x92a\x02\xCEV[a\x03\xA8\x81a\x03kV[\x01\x90V[a\x03\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\x92V[\x90V[\x15a\x03\xCBWV[a\x03\xD3a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xE9`\x04\x82\x01a\x03\xACV[\x03\x90\xFD[a\x03\xF6\x90a\x01\x99V[\x90V[a\x04\x02\x90a\x03\xEDV[\x90V[a\x04\x0E\x90a\x01\xB5V[\x90V[a\x04\x1A\x81a\0\xD7V[\x03a\x04!WV[_\x80\xFD[\x90PQ\x90a\x042\x82a\x04\x11V[V[\x90` \x82\x82\x03\x12a\x04MWa\x04J\x91_\x01a\x04%V[\x90V[a\0LV[\x90a\x04ea\x04^a\0BV[\x92\x83a\x02RV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x85Wa\x04\x81` \x91a\x024V[\x01\x90V[a\x02>V[\x90a\x04\x9Ca\x04\x97\x83a\x04gV[a\x04RV[\x91\x82RV[_\x7FCalculator not initialized yet\0\0\x91\x01RV[a\x04\xD2`\x1Ea\x04\x8AV[\x90a\x04\xDF` \x83\x01a\x04\xA1V[V[a\x04\xE9a\x04\xC8V[\x90V[_\x7F=== Emission Simulation ===\0\0\0\0\0\x91\x01RV[a\x05\x1D`\x1Ba\x04\x8AV[\x90a\x05*` \x83\x01a\x04\xECV[V[a\x054a\x05\x13V[\x90V[_\x7FSimulating first 10 epochs...\0\0\0\x91\x01RV[a\x05h`\x1Da\x04\x8AV[\x90a\x05u` \x83\x01a\x057V[V[a\x05\x7Fa\x05^V[\x90V[a\x05\x8B\x81a\x01<V[\x03a\x05\x92WV[_\x80\xFD[\x90PQ\x90a\x05\xA3\x82a\x05\x82V[V[\x90` \x82\x82\x03\x12a\x05\xBEWa\x05\xBB\x91_\x01a\x05\x96V[\x90V[a\0LV[a\x05\xD7a\x05\xD2a\x05\xDC\x92a\x03@V[a\x01?V[a\x01<V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x05\xFC\x90a\x01<V[_\x19\x81\x14a\x06\nW`\x01\x01\x90V[a\x05\xDFV[\x90V[a\x06&a\x06!a\x06+\x92a\x06\x0FV[a\x01?V[a\x01<V[\x90V[a\x06=a\x06C\x91\x93\x92\x93a\x01<V[\x92a\x01<V[\x82\x01\x80\x92\x11a\x06NWV[a\x05\xDFV[\x90V[a\x06ja\x06ea\x06o\x92a\x06SV[a\x01?V[a\x01<V[\x90V[a\x06{\x90a\x01<V[\x90RV[\x91\x90a\x06\x92\x90_` \x85\x01\x94\x01\x90a\x06rV[V[_\x7FEpoch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xC5`\x05a\x04\x8AV[\x90a\x06\xD2` \x83\x01a\x06\x94V[V[a\x06\xDCa\x06\xBBV[\x90V[_\x7F- Decay factor:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\x10`\x0Fa\x04\x8AV[\x90a\x07\x1D` \x83\x01a\x06\xDFV[V[a\x07'a\x07\x06V[\x90V[_\x7F  Remaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07[`\x13a\x04\x8AV[\x90a\x07h` \x83\x01a\x07*V[V[a\x07ra\x07QV[\x90V[\x90V[a\x07\x8Ca\x07\x87a\x07\x91\x92a\x07uV[a\x01?V[a\x01<V[\x90V[\x90V[a\x07\xABa\x07\xA6a\x07\xB0\x92a\x07\x94V[a\x01?V[a\x01<V[\x90V[a\x07\xC2a\x07\xC8\x91\x93\x92\x93a\x01<V[\x92a\x01<V[\x82\x03\x91\x82\x11a\x07\xD3WV[a\x05\xDFV[a\x07\xE7a\x07\xED\x91\x93\x92\x93a\x01<V[\x92a\x01<V[\x91a\x07\xF9\x83\x82\x02a\x01<V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x08\x08WV[a\x05\xDFV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x08-a\x083\x91a\x01<V[\x91a\x01<V[\x90\x81\x15a\x08>W\x04\x90V[a\x08\rV[_\x7F  Estimated emission:\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08t`\x15a\x04\x8AV[\x90a\x08\x81` \x83\x01a\x08CV[V[a\x08\x8Ba\x08jV[\x90V[_\x7F  Final epoch - would sweep:\0\0\0\0\x91\x01RV[a\x08\xBF`\x1Ca\x04\x8AV[\x90a\x08\xCC` \x83\x01a\x08\x8EV[V[a\x08\xD6a\x08\xB5V[\x90V[` \x7Fhs:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTotal simulated for next 10 epoc_\x82\x01R\x01RV[a\t0`#a\x04\x8AV[\x90a\t=` \x83\x01a\x08\xD9V[V[a\tGa\t&V[\x90V[_\x7FWould leave remaining:\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t{`\x16a\x04\x8AV[\x90a\t\x88` \x83\x01a\tJV[V[a\t\x92a\tqV[\x90V[a\t\xC0` a\t\xAAa\t\xA5a\x02\x15V[a\x02(V[c5\rV\xBF\x90a\t\xB8a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\t\xD0`\x04\x82\x01a\x03\x18V[\x03\x91Z\xFA\x80\x15a\x0F\rWa\n\x10\x91_\x91a\x0E\xDFW[Pa\n\x0B\x81a\n\x04a\t\xFEa\t\xF9_a\x03_V[a\x02\x81V[\x91a\x02\x81V[\x14\x15a\x03\xC4V[a\x03\xF9V[\x90a\n5` a\n\x1F\x84a\x04\x05V[c\x15\x8E\xF9>\x90a\n-a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\nE`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0E\xDAWa\na\x91_\x91a\x0E\xACW[P\x15a\0\xD7V[a\x0E\x98Wa\nua\npa\x05,V[a\x0FjV[a\n\x85a\n\x80a\x05wV[a\x0FjV[a\n\xA9` a\n\x93\x84a\x04\x05V[cvg\x18\x08\x90a\n\xA1a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\n\xB9`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x90\x81\x15a\x0E\x93W_\x91a\x0EeW[P\x91a\n\xD6_a\x05\xC3V[\x83[\x84a\n\xFEa\n\xF8a\n\xF3\x84a\n\xED`\na\x06\x12V[\x90a\x06.V[a\x01<V[\x91a\x01<V[\x10\x80a\x0EJW[\x15a\x0E8Wa\x0B.` a\x0B\x18\x85a\x04\x05V[c\xE4\xB7\xFBs\x90a\x0B&a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0B>`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x90\x81\x15a\x0E3W_\x91a\x0E\x05W[P\x94\x85a\x0Bea\x0B__a\x05\xC3V[\x91a\x01<V[\x14a\r\xF2Wa\x0B\xA2` a\x0Bx\x86a\x04\x05V[c\xE0\xF5\x14t\x90a\x0B\x97\x85\x92a\x0B\x8Ba\0BV[\x95\x86\x94\x85\x93\x84\x93a\x02{V[\x83R`\x04\x83\x01a\x06\x7FV[\x03\x91Z\xFA\x90\x81\x15a\r\xEDW_\x91a\r\xBFW[Pa\x0B\xD2\x82\x82\x90a\x0B\xC3a\x06\xD4V[\x90a\x0B\xCCa\x07\x1FV[\x91a\x0F\xF2V[a\x0B\xE3\x87a\x0B\xDEa\x07jV[a\x10]V[\x81a\x0B\xF7a\x0B\xF1`/a\x07xV[\x91a\x01<V[\x14_\x14a\x0C\xC9WPPPa\x0C?a\x0C'` \x92\x86a\x0C!a\x0CU\x96\x97\x98a\x0C\x1Ca\x08\xCEV[a\x10]V[\x90a\x06.V[\x93[a\x0C:\x85a\x0C5a\t?V[a\x10]V[a\x04\x05V[c\xE4\xB7\xFBs\x90a\x0CMa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0Ce`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0C\xC4Wa\x0C\x92\x92a\x0C\x85\x92_\x92a\x0C\x94W[P\x90a\x07\xB3V[a\x0C\x8Da\t\x8AV[a\x10]V[V[a\x0C\xB6\x91\x92P` =\x81\x11a\x0C\xBDW[a\x0C\xAE\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[\x90_a\x0C~V[P=a\x0C\xA4V[a\x030V[\x92a\r\x06\x92\x96\x91\x93` a\x0C\xDC\x87a\x04\x05V[c#f@\xB9\x90a\x0C\xFB\x88\x92a\x0C\xEFa\0BV[\x98\x89\x94\x85\x93\x84\x93a\x02{V[\x83R`\x04\x83\x01a\x06\x7FV[\x03\x91Z\xFA\x92\x83\x15a\r\xBAWa\rca\rLa\ri\x93a\rFa\r\x80\x97a\r\x86\x99_\x91a\r\x8CW[P\x94\x91a\rAg\r\xE0\xB6\xB3\xA7d\0\0a\x07\x97V[a\x07\xB3V[\x90a\x07\xD8V[\x91a\r^g\r\xE0\xB6\xB3\xA7d\0\0a\x07\x97V[a\x07\xB3V[\x90a\x08!V[a\rz\x81a\rua\x08\x83V[a\x10]V[\x90a\x06.V[\x91a\x05\xF3V[\x93a\n\xD8V[a\r\xAD\x91P` =\x81\x11a\r\xB3W[a\r\xA5\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\r-V[P=a\r\x9BV[a\x030V[a\r\xE0\x91P` =\x81\x11a\r\xE6W[a\r\xD8\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\x0B\xB4V[P=a\r\xCEV[a\x030V[PP\x91\x92P` a\x0C?a\x0CU\x92a\x0C)V[a\x0E&\x91P` =\x81\x11a\x0E,W[a\x0E\x1E\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\x0BPV[P=a\x0E\x14V[a\x030V[P\x91\x92P` a\x0C?a\x0CU\x92a\x0C)V[P\x84a\x0E_a\x0EY`0a\x06VV[\x91a\x01<V[\x10a\x0B\x05V[a\x0E\x86\x91P` =\x81\x11a\x0E\x8CW[a\x0E~\x81\x83a\x02RV[\x81\x01\x90a\x05\xA5V[_a\n\xCBV[P=a\x0EtV[a\x030V[\x90Pa\x0E\xAAa\x0E\xA5a\x04\xE1V[a\x0FjV[V[a\x0E\xCD\x91P` =\x81\x11a\x0E\xD3W[a\x0E\xC5\x81\x83a\x02RV[\x81\x01\x90a\x044V[_a\nZV[P=a\x0E\xBBV[a\x030V[a\x0F\0\x91P` =\x81\x11a\x0F\x06W[a\x0E\xF8\x81\x83a\x02RV[\x81\x01\x90a\x02\xB0V[_a\t\xE5V[P=a\x0E\xEEV[a\x030V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0F@a\x0FI` \x93a\x0FN\x93a\x0F7\x81a\x0F\x12V[\x93\x84\x80\x93a\x02\xCEV[\x95\x86\x91\x01a\x0F\x16V[a\x024V[\x01\x90V[a\x0Fg\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0F!V[\x90V[a\x0F\x95a\x0F\xA4a\x0F\xA9\x92a\x0F|a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x0FRV[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\x9FV[V[\x94\x93\x91a\x0F\xE8\x90a\x0F\xF0\x94a\x0F\xDBa\x0F\xD0``\x95`\x80\x8B\x01\x90\x8B\x82\x03_\x8D\x01Ra\x0F!V[\x92` \x8A\x01\x90a\x06rV[\x87\x82\x03`@\x89\x01Ra\x0F!V[\x94\x01\x90a\x06rV[V[\x90a\x10!a\x105\x94a\x100\x93\x92\x94a\x10\x08a\0BV[\x95\x86\x94`\x04` \x87\x01c\xC6~\xA9\xD1`\xE0\x1B\x81R\x01a\x0F\xABV[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\x9FV[V[\x92\x91` a\x10Sa\x10[\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0F!V[\x94\x01\x90a\x06rV[V[\x90a\x10\x98a\x10\x9D\x92a\x10\x89a\x10pa\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x107V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\x9FV[V[a\x10\xB2\x90a\x10\xAD`\x01a\x10\xDEV[a\x10\xFEV[V[jconsole.log\x90V[_\x80\x91a\x10\xCEa\x10\xB4V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x10\xE6a\x10\xDAV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x10\xEAWa\x11\x0E\x90a\x10\xC3V[V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SimulateEmissions`](self) function calls.
    pub enum SimulateEmissionsCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl SimulateEmissionsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SimulateEmissionsCalls {
        const NAME: &'static str = "SimulateEmissionsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SimulateEmissionsCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimulateEmissionsCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimulateEmissionsCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimulateEmissionsCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimulateEmissionsCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SimulateEmissions`](self) contract instance.

See the [wrapper's documentation](`SimulateEmissionsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SimulateEmissionsInstance<T, P, N> {
        SimulateEmissionsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SimulateEmissionsInstance<T, P, N>>,
    > {
        SimulateEmissionsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SimulateEmissionsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SimulateEmissions`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SimulateEmissions`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SimulateEmissionsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SimulateEmissionsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SimulateEmissionsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SimulateEmissionsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SimulateEmissions`](self) contract instance.

See the [wrapper's documentation](`SimulateEmissionsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SimulateEmissionsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SimulateEmissionsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SimulateEmissionsInstance<T, P, N> {
            SimulateEmissionsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SimulateEmissionsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SimulateEmissionsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
