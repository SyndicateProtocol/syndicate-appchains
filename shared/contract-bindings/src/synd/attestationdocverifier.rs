/**

Generated by the following Solidity interface...
```solidity
interface AttestationDocVerifier {
    constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, bytes32 _pcr8);

    function attestationDocVerifierVKey() external view returns (bytes32);
    function pcr0() external view returns (bytes32);
    function pcr1() external view returns (bytes32);
    function pcr2() external view returns (bytes32);
    function pcr8() external view returns (bytes32);
    function rootCertHash() external view returns (bytes32);
    function verifier() external view returns (address);
    function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_verifier",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_attestationDocVerifierVKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_rootCertHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "_pcr8",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "attestationDocVerifierVKey",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pcr8",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rootCertHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyAttestationDocProof",
    "inputs": [
      {
        "name": "_publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\x006Wa\0 a\0\x14a\x01sV[\x95\x94\x90\x94\x93\x91\x93a\x02gV[a\0(a\0;V[a\r\x04a\x02\xB6\x829a\r\x04\x90\xF3[a\0AV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0m\x90a\0EV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x85W`@RV[a\0OV[\x90a\0\x9Da\0\x96a\0;V[\x92\x83a\0cV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB7\x90a\0\xA3V[\x90V[a\0\xC3\x81a\0\xAEV[\x03a\0\xCAWV[_\x80\xFD[\x90PQ\x90a\0\xDB\x82a\0\xBAV[V[\x90V[a\0\xE9\x81a\0\xDDV[\x03a\0\xF0WV[_\x80\xFD[\x90PQ\x90a\x01\x01\x82a\0\xE0V[V[`\xE0\x81\x83\x03\x12a\x01nWa\x01\x19\x82_\x83\x01a\0\xCEV[\x92a\x01'\x83` \x84\x01a\0\xF4V[\x92a\x015\x81`@\x85\x01a\0\xF4V[\x92a\x01C\x82``\x83\x01a\0\xF4V[\x92a\x01ka\x01T\x84`\x80\x85\x01a\0\xF4V[\x93a\x01b\x81`\xA0\x86\x01a\0\xF4V[\x93`\xC0\x01a\0\xF4V[\x90V[a\0\x9FV[a\x01\x91a\x0F\xBA\x808\x03\x80a\x01\x86\x81a\0\x8AV[\x92\x839\x81\x01\x90a\x01\x03V[\x90\x91\x92\x93\x94\x95\x96V[_\x1B\x90V[\x90a\x01\xB0`\x01\x80`\xA0\x1B\x03\x91a\x01\x9AV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x01\xD1a\x01\xCCa\x01\xD6\x92a\0\xA3V[a\x01\xBAV[a\0\xA3V[\x90V[a\x01\xE2\x90a\x01\xBDV[\x90V[a\x01\xEE\x90a\x01\xD9V[\x90V[\x90V[\x90a\x02\ta\x02\x04a\x02\x10\x92a\x01\xE5V[a\x01\xF1V[\x82Ta\x01\x9FV[\x90UV[\x90a\x02 _\x19\x91a\x01\x9AV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x023\x90a\0\xDDV[\x90V[_\x1C\x90V[a\x02D\x90a\x026V[\x90V[\x90a\x02\\a\x02Wa\x02c\x92a\x02*V[a\x02;V[\x82Ta\x02\x14V[\x90UV[a\x02\xB3\x96\x95\x93a\x02\x97a\x02\xA5\x94a\x02\x90a\x02\xAC\x98\x95a\x02\x89a\x02\x9E\x96_a\x01\xF4V[`\x01a\x02GV[`\x02a\x02GV[`\x03a\x02GV[`\x04a\x02GV[`\x05a\x02GV[`\x06a\x02GV[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04=V[a\0\x1D_5a\0\x9CV[\x80c\x05S\xF2t\x14a\0\x97W\x80c+z\xC3\xF3\x14a\0\x92W\x80c/t\x13\x8D\x14a\0\x8DW\x80c8\xF3\xEF\xD4\x14a\0\x88W\x80c\x81\xA9\xD3\x8A\x14a\0\x83W\x80c\xC2*\x96\x94\x14a\0~W\x80c\xCC\xA3\xB4\xFE\x14a\0yWc\xE5\x95\x1D\xD1\x03a\0\x0EWa\x04\x08V[a\x03\xC4V[a\x03|V[a\x02\x99V[a\x02UV[a\x02\x11V[a\x01\xCDV[a\x01 V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xBAWV[a\0\xACV[\x1C\x90V[\x90V[a\0\xD6\x90`\x08a\0\xDB\x93\x02a\0\xBFV[a\0\xC3V[\x90V[\x90a\0\xE9\x91Ta\0\xC6V[\x90V[a\0\xF8`\x02_\x90a\0\xDEV[\x90V[\x90V[a\x01\x07\x90a\0\xFBV[\x90RV[\x91\x90a\x01\x1E\x90_` \x85\x01\x94\x01\x90a\0\xFEV[V[4a\x01PWa\x0106`\x04a\0\xB0V[a\x01La\x01;a\0\xECV[a\x01Ca\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01p\x90`\x08a\x01u\x93\x02a\0\xBFV[a\x01UV[\x90V[\x90a\x01\x83\x91Ta\x01`V[\x90V[a\x01\x91__\x90a\x01xV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xA8\x90a\x01\x94V[\x90V[a\x01\xB4\x90a\x01\x9FV[\x90RV[\x91\x90a\x01\xCB\x90_` \x85\x01\x94\x01\x90a\x01\xABV[V[4a\x01\xFDWa\x01\xDD6`\x04a\0\xB0V[a\x01\xF9a\x01\xE8a\x01\x86V[a\x01\xF0a\0\xA2V[\x91\x82\x91\x82a\x01\xB8V[\x03\x90\xF3[a\0\xA8V[a\x02\x0E`\x06_\x90a\0\xDEV[\x90V[4a\x02AWa\x02!6`\x04a\0\xB0V[a\x02=a\x02,a\x02\x02V[a\x024a\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[a\x02R`\x05_\x90a\0\xDEV[\x90V[4a\x02\x85Wa\x02e6`\x04a\0\xB0V[a\x02\x81a\x02pa\x02FV[a\x02xa\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[a\x02\x96`\x03_\x90a\0\xDEV[\x90V[4a\x02\xC9Wa\x02\xA96`\x04a\0\xB0V[a\x02\xC5a\x02\xB4a\x02\x8AV[a\x02\xBCa\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x18W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x13W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0EWV[a\x02\xDAV[a\x02\xD6V[a\x02\xD2V[\x90\x91`@\x82\x84\x03\x12a\x03wW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03rW\x83a\x03H\x91\x84\x01a\x02\xDEV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03mWa\x03i\x92\x01a\x02\xDEV[\x90\x91V[a\x02\xCEV[a\x02\xCEV[a\0\xACV[4a\x03\xB0Wa\x03\xACa\x03\x9Ba\x03\x926`\x04a\x03\x1DV[\x92\x91\x90\x91a\n\xF5V[a\x03\xA3a\0\xA2V[\x91\x82\x91\x82a\x01\xB8V[\x03\x90\xF3[a\0\xA8V[a\x03\xC1`\x04_\x90a\0\xDEV[\x90V[4a\x03\xF4Wa\x03\xD46`\x04a\0\xB0V[a\x03\xF0a\x03\xDFa\x03\xB5V[a\x03\xE7a\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[a\x04\x05`\x01_\x90a\0\xDEV[\x90V[4a\x048Wa\x04\x186`\x04a\0\xB0V[a\x044a\x04#a\x03\xF9V[a\x04+a\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04q\x90a\x04IV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\x8BW`@RV[a\x04SV[\x90a\x04\xA3a\x04\x9Ca\0\xA2V[\x92\x83a\x04gV[V[a\x04\xAE\x81a\0\xFBV[\x03a\x04\xB5WV[_\x80\xFD[\x90P5\x90a\x04\xC6\x82a\x04\xA5V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\xDE\x81a\x04\xC8V[\x03a\x04\xE5WV[_\x80\xFD[\x90P5\x90a\x04\xF6\x82a\x04\xD5V[V[a\x05\x01\x81a\x01\x9FV[\x03a\x05\x08WV[_\x80\xFD[\x90P5\x90a\x05\x19\x82a\x04\xF8V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x05\xC3Wa\x05\xBC\x90a\x057a\x01\0a\x04\x90V[\x93a\x05D\x82_\x83\x01a\x04\xB9V[_\x86\x01Ra\x05U\x82` \x83\x01a\x04\xE9V[` \x86\x01Ra\x05g\x82`@\x83\x01a\x04\xE9V[`@\x86\x01Ra\x05y\x82``\x83\x01a\x04\xB9V[``\x86\x01Ra\x05\x8B\x82`\x80\x83\x01a\x04\xB9V[`\x80\x86\x01Ra\x05\x9D\x82`\xA0\x83\x01a\x04\xB9V[`\xA0\x86\x01Ra\x05\xAF\x82`\xC0\x83\x01a\x04\xB9V[`\xC0\x86\x01R`\xE0\x01a\x05\x0CV[`\xE0\x83\x01RV[a\x04EV[\x90a\x01\0\x82\x82\x03\x12a\x05\xE2Wa\x05\xDF\x91_\x01a\x05\x1BV[\x90V[a\0\xACV[a\x05\xF1\x90Qa\0\xFBV[\x90V[_\x1C\x90V[a\x06\x05a\x06\n\x91a\x05\xF4V[a\0\xC3V[\x90V[a\x06\x17\x90Ta\x05\xF9V[\x90V[` \x91\x81R\x01\x90V[_\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06W`\x17` \x92a\x06\x1AV[a\x06`\x81a\x06#V[\x01\x90V[a\x06y\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06JV[\x90V[\x15a\x06\x83WV[a\x06\x8Ba\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xA1`\x04\x82\x01a\x06dV[\x03\x90\xFD[a\x06\xAF\x90Qa\x04\xC8V[\x90V[\x90V[\x90V[a\x06\xCCa\x06\xC7a\x06\xD1\x92a\x04\xC8V[a\x06\xB5V[a\x06\xB2V[\x90V[_\x7FValidity window has not started\0\x91\x01RV[a\x07\x08`\x1F` \x92a\x06\x1AV[a\x07\x11\x81a\x06\xD4V[\x01\x90V[a\x07*\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\xFBV[\x90V[\x15a\x074WV[a\x07<a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07R`\x04\x82\x01a\x07\x15V[\x03\x90\xFD[_\x7FValidity window has ended\0\0\0\0\0\0\0\x91\x01RV[a\x07\x8A`\x19` \x92a\x06\x1AV[a\x07\x93\x81a\x07VV[\x01\x90V[a\x07\xAC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07}V[\x90V[\x15a\x07\xB6WV[a\x07\xBEa\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07\xD4`\x04\x82\x01a\x07\x97V[\x03\x90\xFD[_\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\x0C`\r` \x92a\x06\x1AV[a\x08\x15\x81a\x07\xD8V[\x01\x90V[a\x08.\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\xFFV[\x90V[\x15a\x088WV[a\x08@a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08V`\x04\x82\x01a\x08\x19V[\x03\x90\xFD[_\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\x8E`\r` \x92a\x06\x1AV[a\x08\x97\x81a\x08ZV[\x01\x90V[a\x08\xB0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\x81V[\x90V[\x15a\x08\xBAWV[a\x08\xC2a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xD8`\x04\x82\x01a\x08\x9BV[\x03\x90\xFD[_\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\x10`\r` \x92a\x06\x1AV[a\t\x19\x81a\x08\xDCV[\x01\x90V[a\t2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\x03V[\x90V[\x15a\t<WV[a\tDa\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\tZ`\x04\x82\x01a\t\x1DV[\x03\x90\xFD[_\x7FPCR8 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\x92`\r` \x92a\x06\x1AV[a\t\x9B\x81a\t^V[\x01\x90V[a\t\xB4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\x85V[\x90V[\x15a\t\xBEWV[a\t\xC6a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xDC`\x04\x82\x01a\t\x9FV[\x03\x90\xFD[a\t\xECa\t\xF1\x91a\x05\xF4V[a\x01UV[\x90V[a\t\xFE\x90Ta\t\xE0V[\x90V[a\n\x15a\n\x10a\n\x1A\x92a\x01\x94V[a\x06\xB5V[a\x01\x94V[\x90V[a\n&\x90a\n\x01V[\x90V[a\n2\x90a\n\x1DV[\x90V[a\n>\x90a\n\x01V[\x90V[a\nJ\x90a\n5V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\naWV[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\x94\x81a\n\x8D\x81a\n\x99\x95a\nfV[\x80\x95a\noV[a\x04IV[\x01\x90V[\x93\x91\x90a\n\xD5\x95\x93a\n\xC7\x92a\n\xBA``\x88\x01\x93_\x89\x01\x90a\0\xFEV[\x86\x83\x03` \x88\x01Ra\nzV[\x92`@\x81\x85\x03\x91\x01Ra\nzV[\x90V[a\n\xE0a\0\xA2V[=_\x82>=\x90\xFD[a\n\xF2\x90Qa\x01\x9FV[\x90V[\x92\x91\x90\x92a\x0B\x01a\x04AV[Pa\x0B\x0F\x81\x85\x81\x01\x90a\x05\xC8V[\x92a\x0B?a\x0B\x1E_\x86\x01a\x05\xE7V[a\x0B9a\x0B3a\x0B.`\x02a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\x06|V[a\x0BgBa\x0B`a\x0BZa\x0BU` \x89\x01a\x06\xA5V[a\x06\xB8V[\x91a\x06\xB2V[\x10\x15a\x07-V[a\x0B\x8FBa\x0B\x88a\x0B\x82a\x0B}`@\x89\x01a\x06\xA5V[a\x06\xB8V[\x91a\x06\xB2V[\x11\x15a\x07\xAFV[a\x0B\xBFa\x0B\x9E``\x86\x01a\x05\xE7V[a\x0B\xB9a\x0B\xB3a\x0B\xAE`\x03a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\x081V[a\x0B\xEFa\x0B\xCE`\x80\x86\x01a\x05\xE7V[a\x0B\xE9a\x0B\xE3a\x0B\xDE`\x04a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\x08\xB3V[a\x0C\x1Fa\x0B\xFE`\xA0\x86\x01a\x05\xE7V[a\x0C\x19a\x0C\x13a\x0C\x0E`\x05a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\t5V[a\x0COa\x0C.`\xC0\x86\x01a\x05\xE7V[a\x0CIa\x0CCa\x0C>`\x06a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\t\xB7V[a\x0Cha\x0Cca\x0C^_a\t\xF4V[a\n)V[a\nAV[\x90cAI<`a\x0Cx`\x01a\x06\rV[\x93\x96\x94\x91\x94\x83;\x15a\x0C\xFFW_\x95a\x0C\xA2\x93a\x0C\xAD\x92a\x0C\x96a\0\xA2V[\x9A\x8B\x98\x89\x97\x88\x97a\nQV[\x87R`\x04\x87\x01a\n\x9DV[\x03\x91Z\xFA\x90\x81\x15a\x0C\xFAWa\x0C\xCB\x92`\xE0\x92a\x0C\xCEW[P\x01a\n\xE8V[\x90V[a\x0C\xED\x90_=\x81\x11a\x0C\xF3W[a\x0C\xE5\x81\x83a\x04gV[\x81\x01\x90a\nWV[_a\x0C\xC4V[P=a\x0C\xDBV[a\n\xD8V[a\nMV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61043d565b61001d5f3561009c565b80630553f274146100975780632b7ac3f3146100925780632f74138d1461008d57806338f3efd41461008857806381a9d38a14610083578063c22a96941461007e578063cca3b4fe146100795763e5951dd10361000e57610408565b6103c4565b61037c565b610299565b610255565b610211565b6101cd565b610120565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100ba57565b6100ac565b1c90565b90565b6100d69060086100db93026100bf565b6100c3565b90565b906100e991546100c6565b90565b6100f860025f906100de565b90565b90565b610107906100fb565b9052565b919061011e905f602085019401906100fe565b565b34610150576101303660046100b0565b61014c61013b6100ec565b6101436100a2565b9182918261010b565b0390f35b6100a8565b60018060a01b031690565b61017090600861017593026100bf565b610155565b90565b906101839154610160565b90565b6101915f5f90610178565b90565b60018060a01b031690565b6101a890610194565b90565b6101b49061019f565b9052565b91906101cb905f602085019401906101ab565b565b346101fd576101dd3660046100b0565b6101f96101e8610186565b6101f06100a2565b918291826101b8565b0390f35b6100a8565b61020e60065f906100de565b90565b34610241576102213660046100b0565b61023d61022c610202565b6102346100a2565b9182918261010b565b0390f35b6100a8565b61025260055f906100de565b90565b34610285576102653660046100b0565b610281610270610246565b6102786100a2565b9182918261010b565b0390f35b6100a8565b61029660035f906100de565b90565b346102c9576102a93660046100b0565b6102c56102b461028a565b6102bc6100a2565b9182918261010b565b0390f35b6100a8565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103185781359167ffffffffffffffff831161031357602001926001830284011161030e57565b6102da565b6102d6565b6102d2565b9091604082840312610377575f82013567ffffffffffffffff811161037257836103489184016102de565b929093602082013567ffffffffffffffff811161036d5761036992016102de565b9091565b6102ce565b6102ce565b6100ac565b346103b0576103ac61039b61039236600461031d565b92919091610af5565b6103a36100a2565b918291826101b8565b0390f35b6100a8565b6103c160045f906100de565b90565b346103f4576103d43660046100b0565b6103f06103df6103b5565b6103e76100a2565b9182918261010b565b0390f35b6100a8565b61040560015f906100de565b90565b34610438576104183660046100b0565b6104346104236103f9565b61042b6100a2565b9182918261010b565b0390f35b6100a8565b5f80fd5b5f90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061047190610449565b810190811067ffffffffffffffff82111761048b57604052565b610453565b906104a361049c6100a2565b9283610467565b565b6104ae816100fb565b036104b557565b5f80fd5b905035906104c6826104a5565b565b67ffffffffffffffff1690565b6104de816104c8565b036104e557565b5f80fd5b905035906104f6826104d5565b565b6105018161019f565b0361050857565b5f80fd5b90503590610519826104f8565b565b9190610100838203126105c3576105bc90610537610100610490565b93610544825f83016104b9565b5f86015261055582602083016104e9565b602086015261056782604083016104e9565b604086015261057982606083016104b9565b606086015261058b82608083016104b9565b608086015261059d8260a083016104b9565b60a08601526105af8260c083016104b9565b60c086015260e00161050c565b60e0830152565b610445565b90610100828203126105e2576105df915f0161051b565b90565b6100ac565b6105f190516100fb565b90565b5f1c90565b61060561060a916105f4565b6100c3565b90565b61061790546105f9565b90565b60209181520190565b5f7f526f6f7420636572742068617368206d69736d61746368000000000000000000910152565b610657601760209261061a565b61066081610623565b0190565b6106799060208101905f81830391015261064a565b90565b1561068357565b61068b6100a2565b62461bcd60e51b8152806106a160048201610664565b0390fd5b6106af90516104c8565b90565b90565b90565b6106cc6106c76106d1926104c8565b6106b5565b6106b2565b90565b5f7f56616c69646974792077696e646f7720686173206e6f74207374617274656400910152565b610708601f60209261061a565b610711816106d4565b0190565b61072a9060208101905f8183039101526106fb565b90565b1561073457565b61073c6100a2565b62461bcd60e51b81528061075260048201610715565b0390fd5b5f7f56616c69646974792077696e646f772068617320656e64656400000000000000910152565b61078a601960209261061a565b61079381610756565b0190565b6107ac9060208101905f81830391015261077d565b90565b156107b657565b6107be6100a2565b62461bcd60e51b8152806107d460048201610797565b0390fd5b5f7f50435230206d69736d6174636800000000000000000000000000000000000000910152565b61080c600d60209261061a565b610815816107d8565b0190565b61082e9060208101905f8183039101526107ff565b90565b1561083857565b6108406100a2565b62461bcd60e51b81528061085660048201610819565b0390fd5b5f7f50435231206d69736d6174636800000000000000000000000000000000000000910152565b61088e600d60209261061a565b6108978161085a565b0190565b6108b09060208101905f818303910152610881565b90565b156108ba57565b6108c26100a2565b62461bcd60e51b8152806108d86004820161089b565b0390fd5b5f7f50435232206d69736d6174636800000000000000000000000000000000000000910152565b610910600d60209261061a565b610919816108dc565b0190565b6109329060208101905f818303910152610903565b90565b1561093c57565b6109446100a2565b62461bcd60e51b81528061095a6004820161091d565b0390fd5b5f7f50435238206d69736d6174636800000000000000000000000000000000000000910152565b610992600d60209261061a565b61099b8161095e565b0190565b6109b49060208101905f818303910152610985565b90565b156109be57565b6109c66100a2565b62461bcd60e51b8152806109dc6004820161099f565b0390fd5b6109ec6109f1916105f4565b610155565b90565b6109fe90546109e0565b90565b610a15610a10610a1a92610194565b6106b5565b610194565b90565b610a2690610a01565b90565b610a3290610a1d565b90565b610a3e90610a01565b90565b610a4a90610a35565b90565b5f80fd5b60e01b90565b5f910312610a6157565b6100ac565b60209181520190565b90825f939282370152565b9190610a9481610a8d81610a9995610a66565b8095610a6f565b610449565b0190565b939190610ad59593610ac792610aba60608801935f8901906100fe565b8683036020880152610a7a565b926040818503910152610a7a565b90565b610ae06100a2565b3d5f823e3d90fd5b610af2905161019f565b90565b92919092610b01610441565b50610b0f81858101906105c8565b92610b3f610b1e5f86016105e7565b610b39610b33610b2e600261060d565b6100fb565b916100fb565b1461067c565b610b6742610b60610b5a610b55602089016106a5565b6106b8565b916106b2565b101561072d565b610b8f42610b88610b82610b7d604089016106a5565b6106b8565b916106b2565b11156107af565b610bbf610b9e606086016105e7565b610bb9610bb3610bae600361060d565b6100fb565b916100fb565b14610831565b610bef610bce608086016105e7565b610be9610be3610bde600461060d565b6100fb565b916100fb565b146108b3565b610c1f610bfe60a086016105e7565b610c19610c13610c0e600561060d565b6100fb565b916100fb565b14610935565b610c4f610c2e60c086016105e7565b610c49610c43610c3e600661060d565b6100fb565b916100fb565b146109b7565b610c68610c63610c5e5f6109f4565b610a29565b610a41565b906341493c60610c78600161060d565b9396949194833b15610cff575f95610ca293610cad92610c966100a2565b9a8b9889978897610a51565b875260048701610a9d565b03915afa908115610cfa57610ccb9260e092610cce575b5001610ae8565b90565b610ced905f3d8111610cf3575b610ce58183610467565b810190610a57565b5f610cc4565b503d610cdb565b610ad8565b610a4d56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04=V[a\0\x1D_5a\0\x9CV[\x80c\x05S\xF2t\x14a\0\x97W\x80c+z\xC3\xF3\x14a\0\x92W\x80c/t\x13\x8D\x14a\0\x8DW\x80c8\xF3\xEF\xD4\x14a\0\x88W\x80c\x81\xA9\xD3\x8A\x14a\0\x83W\x80c\xC2*\x96\x94\x14a\0~W\x80c\xCC\xA3\xB4\xFE\x14a\0yWc\xE5\x95\x1D\xD1\x03a\0\x0EWa\x04\x08V[a\x03\xC4V[a\x03|V[a\x02\x99V[a\x02UV[a\x02\x11V[a\x01\xCDV[a\x01 V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xBAWV[a\0\xACV[\x1C\x90V[\x90V[a\0\xD6\x90`\x08a\0\xDB\x93\x02a\0\xBFV[a\0\xC3V[\x90V[\x90a\0\xE9\x91Ta\0\xC6V[\x90V[a\0\xF8`\x02_\x90a\0\xDEV[\x90V[\x90V[a\x01\x07\x90a\0\xFBV[\x90RV[\x91\x90a\x01\x1E\x90_` \x85\x01\x94\x01\x90a\0\xFEV[V[4a\x01PWa\x0106`\x04a\0\xB0V[a\x01La\x01;a\0\xECV[a\x01Ca\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01p\x90`\x08a\x01u\x93\x02a\0\xBFV[a\x01UV[\x90V[\x90a\x01\x83\x91Ta\x01`V[\x90V[a\x01\x91__\x90a\x01xV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xA8\x90a\x01\x94V[\x90V[a\x01\xB4\x90a\x01\x9FV[\x90RV[\x91\x90a\x01\xCB\x90_` \x85\x01\x94\x01\x90a\x01\xABV[V[4a\x01\xFDWa\x01\xDD6`\x04a\0\xB0V[a\x01\xF9a\x01\xE8a\x01\x86V[a\x01\xF0a\0\xA2V[\x91\x82\x91\x82a\x01\xB8V[\x03\x90\xF3[a\0\xA8V[a\x02\x0E`\x06_\x90a\0\xDEV[\x90V[4a\x02AWa\x02!6`\x04a\0\xB0V[a\x02=a\x02,a\x02\x02V[a\x024a\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[a\x02R`\x05_\x90a\0\xDEV[\x90V[4a\x02\x85Wa\x02e6`\x04a\0\xB0V[a\x02\x81a\x02pa\x02FV[a\x02xa\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[a\x02\x96`\x03_\x90a\0\xDEV[\x90V[4a\x02\xC9Wa\x02\xA96`\x04a\0\xB0V[a\x02\xC5a\x02\xB4a\x02\x8AV[a\x02\xBCa\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x18W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x13W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0EWV[a\x02\xDAV[a\x02\xD6V[a\x02\xD2V[\x90\x91`@\x82\x84\x03\x12a\x03wW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03rW\x83a\x03H\x91\x84\x01a\x02\xDEV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03mWa\x03i\x92\x01a\x02\xDEV[\x90\x91V[a\x02\xCEV[a\x02\xCEV[a\0\xACV[4a\x03\xB0Wa\x03\xACa\x03\x9Ba\x03\x926`\x04a\x03\x1DV[\x92\x91\x90\x91a\n\xF5V[a\x03\xA3a\0\xA2V[\x91\x82\x91\x82a\x01\xB8V[\x03\x90\xF3[a\0\xA8V[a\x03\xC1`\x04_\x90a\0\xDEV[\x90V[4a\x03\xF4Wa\x03\xD46`\x04a\0\xB0V[a\x03\xF0a\x03\xDFa\x03\xB5V[a\x03\xE7a\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[a\x04\x05`\x01_\x90a\0\xDEV[\x90V[4a\x048Wa\x04\x186`\x04a\0\xB0V[a\x044a\x04#a\x03\xF9V[a\x04+a\0\xA2V[\x91\x82\x91\x82a\x01\x0BV[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04q\x90a\x04IV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\x8BW`@RV[a\x04SV[\x90a\x04\xA3a\x04\x9Ca\0\xA2V[\x92\x83a\x04gV[V[a\x04\xAE\x81a\0\xFBV[\x03a\x04\xB5WV[_\x80\xFD[\x90P5\x90a\x04\xC6\x82a\x04\xA5V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\xDE\x81a\x04\xC8V[\x03a\x04\xE5WV[_\x80\xFD[\x90P5\x90a\x04\xF6\x82a\x04\xD5V[V[a\x05\x01\x81a\x01\x9FV[\x03a\x05\x08WV[_\x80\xFD[\x90P5\x90a\x05\x19\x82a\x04\xF8V[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x05\xC3Wa\x05\xBC\x90a\x057a\x01\0a\x04\x90V[\x93a\x05D\x82_\x83\x01a\x04\xB9V[_\x86\x01Ra\x05U\x82` \x83\x01a\x04\xE9V[` \x86\x01Ra\x05g\x82`@\x83\x01a\x04\xE9V[`@\x86\x01Ra\x05y\x82``\x83\x01a\x04\xB9V[``\x86\x01Ra\x05\x8B\x82`\x80\x83\x01a\x04\xB9V[`\x80\x86\x01Ra\x05\x9D\x82`\xA0\x83\x01a\x04\xB9V[`\xA0\x86\x01Ra\x05\xAF\x82`\xC0\x83\x01a\x04\xB9V[`\xC0\x86\x01R`\xE0\x01a\x05\x0CV[`\xE0\x83\x01RV[a\x04EV[\x90a\x01\0\x82\x82\x03\x12a\x05\xE2Wa\x05\xDF\x91_\x01a\x05\x1BV[\x90V[a\0\xACV[a\x05\xF1\x90Qa\0\xFBV[\x90V[_\x1C\x90V[a\x06\x05a\x06\n\x91a\x05\xF4V[a\0\xC3V[\x90V[a\x06\x17\x90Ta\x05\xF9V[\x90V[` \x91\x81R\x01\x90V[_\x7FRoot cert hash mismatch\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06W`\x17` \x92a\x06\x1AV[a\x06`\x81a\x06#V[\x01\x90V[a\x06y\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06JV[\x90V[\x15a\x06\x83WV[a\x06\x8Ba\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xA1`\x04\x82\x01a\x06dV[\x03\x90\xFD[a\x06\xAF\x90Qa\x04\xC8V[\x90V[\x90V[\x90V[a\x06\xCCa\x06\xC7a\x06\xD1\x92a\x04\xC8V[a\x06\xB5V[a\x06\xB2V[\x90V[_\x7FValidity window has not started\0\x91\x01RV[a\x07\x08`\x1F` \x92a\x06\x1AV[a\x07\x11\x81a\x06\xD4V[\x01\x90V[a\x07*\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\xFBV[\x90V[\x15a\x074WV[a\x07<a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07R`\x04\x82\x01a\x07\x15V[\x03\x90\xFD[_\x7FValidity window has ended\0\0\0\0\0\0\0\x91\x01RV[a\x07\x8A`\x19` \x92a\x06\x1AV[a\x07\x93\x81a\x07VV[\x01\x90V[a\x07\xAC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07}V[\x90V[\x15a\x07\xB6WV[a\x07\xBEa\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07\xD4`\x04\x82\x01a\x07\x97V[\x03\x90\xFD[_\x7FPCR0 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\x0C`\r` \x92a\x06\x1AV[a\x08\x15\x81a\x07\xD8V[\x01\x90V[a\x08.\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\xFFV[\x90V[\x15a\x088WV[a\x08@a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08V`\x04\x82\x01a\x08\x19V[\x03\x90\xFD[_\x7FPCR1 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\x8E`\r` \x92a\x06\x1AV[a\x08\x97\x81a\x08ZV[\x01\x90V[a\x08\xB0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\x81V[\x90V[\x15a\x08\xBAWV[a\x08\xC2a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xD8`\x04\x82\x01a\x08\x9BV[\x03\x90\xFD[_\x7FPCR2 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\x10`\r` \x92a\x06\x1AV[a\t\x19\x81a\x08\xDCV[\x01\x90V[a\t2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\x03V[\x90V[\x15a\t<WV[a\tDa\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\tZ`\x04\x82\x01a\t\x1DV[\x03\x90\xFD[_\x7FPCR8 mismatch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\x92`\r` \x92a\x06\x1AV[a\t\x9B\x81a\t^V[\x01\x90V[a\t\xB4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\x85V[\x90V[\x15a\t\xBEWV[a\t\xC6a\0\xA2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xDC`\x04\x82\x01a\t\x9FV[\x03\x90\xFD[a\t\xECa\t\xF1\x91a\x05\xF4V[a\x01UV[\x90V[a\t\xFE\x90Ta\t\xE0V[\x90V[a\n\x15a\n\x10a\n\x1A\x92a\x01\x94V[a\x06\xB5V[a\x01\x94V[\x90V[a\n&\x90a\n\x01V[\x90V[a\n2\x90a\n\x1DV[\x90V[a\n>\x90a\n\x01V[\x90V[a\nJ\x90a\n5V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[_\x91\x03\x12a\naWV[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\x94\x81a\n\x8D\x81a\n\x99\x95a\nfV[\x80\x95a\noV[a\x04IV[\x01\x90V[\x93\x91\x90a\n\xD5\x95\x93a\n\xC7\x92a\n\xBA``\x88\x01\x93_\x89\x01\x90a\0\xFEV[\x86\x83\x03` \x88\x01Ra\nzV[\x92`@\x81\x85\x03\x91\x01Ra\nzV[\x90V[a\n\xE0a\0\xA2V[=_\x82>=\x90\xFD[a\n\xF2\x90Qa\x01\x9FV[\x90V[\x92\x91\x90\x92a\x0B\x01a\x04AV[Pa\x0B\x0F\x81\x85\x81\x01\x90a\x05\xC8V[\x92a\x0B?a\x0B\x1E_\x86\x01a\x05\xE7V[a\x0B9a\x0B3a\x0B.`\x02a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\x06|V[a\x0BgBa\x0B`a\x0BZa\x0BU` \x89\x01a\x06\xA5V[a\x06\xB8V[\x91a\x06\xB2V[\x10\x15a\x07-V[a\x0B\x8FBa\x0B\x88a\x0B\x82a\x0B}`@\x89\x01a\x06\xA5V[a\x06\xB8V[\x91a\x06\xB2V[\x11\x15a\x07\xAFV[a\x0B\xBFa\x0B\x9E``\x86\x01a\x05\xE7V[a\x0B\xB9a\x0B\xB3a\x0B\xAE`\x03a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\x081V[a\x0B\xEFa\x0B\xCE`\x80\x86\x01a\x05\xE7V[a\x0B\xE9a\x0B\xE3a\x0B\xDE`\x04a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\x08\xB3V[a\x0C\x1Fa\x0B\xFE`\xA0\x86\x01a\x05\xE7V[a\x0C\x19a\x0C\x13a\x0C\x0E`\x05a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\t5V[a\x0COa\x0C.`\xC0\x86\x01a\x05\xE7V[a\x0CIa\x0CCa\x0C>`\x06a\x06\rV[a\0\xFBV[\x91a\0\xFBV[\x14a\t\xB7V[a\x0Cha\x0Cca\x0C^_a\t\xF4V[a\n)V[a\nAV[\x90cAI<`a\x0Cx`\x01a\x06\rV[\x93\x96\x94\x91\x94\x83;\x15a\x0C\xFFW_\x95a\x0C\xA2\x93a\x0C\xAD\x92a\x0C\x96a\0\xA2V[\x9A\x8B\x98\x89\x97\x88\x97a\nQV[\x87R`\x04\x87\x01a\n\x9DV[\x03\x91Z\xFA\x90\x81\x15a\x0C\xFAWa\x0C\xCB\x92`\xE0\x92a\x0C\xCEW[P\x01a\n\xE8V[\x90V[a\x0C\xED\x90_=\x81\x11a\x0C\xF3W[a\x0C\xE5\x81\x83a\x04gV[\x81\x01\x90a\nWV[_a\x0C\xC4V[P=a\x0C\xDBV[a\n\xD8V[a\nMV",
    );
    /**Constructor`.
```solidity
constructor(address _verifier, bytes32 _attestationDocVerifierVKey, bytes32 _rootCertHash, bytes32 _pcr0, bytes32 _pcr1, bytes32 _pcr2, bytes32 _pcr8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _verifier: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _pcr8: alloy::sol_types::private::FixedBytes<32>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._verifier,
                        value._attestationDocVerifierVKey,
                        value._rootCertHash,
                        value._pcr0,
                        value._pcr1,
                        value._pcr2,
                        value._pcr8,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _verifier: tuple.0,
                        _attestationDocVerifierVKey: tuple.1,
                        _rootCertHash: tuple.2,
                        _pcr0: tuple.3,
                        _pcr1: tuple.4,
                        _pcr2: tuple.5,
                        _pcr8: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._verifier,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifierVKey,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._rootCertHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr0),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr2),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._pcr8),
                )
            }
        }
    };
    /**Function with signature `attestationDocVerifierVKey()` and selector `0xe5951dd1`.
```solidity
function attestationDocVerifierVKey() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyCall {}
    ///Container type for the return parameters of the [`attestationDocVerifierVKey()`](attestationDocVerifierVKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierVKeyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierVKeyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierVKeyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierVKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for attestationDocVerifierVKeyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = attestationDocVerifierVKeyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "attestationDocVerifierVKey()";
            const SELECTOR: [u8; 4] = [229u8, 149u8, 29u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pcr0()` and selector `0x81a9d38a`.
```solidity
function pcr0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Call {}
    ///Container type for the return parameters of the [`pcr0()`](pcr0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr0Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr0Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pcr0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr0()";
            const SELECTOR: [u8; 4] = [129u8, 169u8, 211u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pcr1()` and selector `0xcca3b4fe`.
```solidity
function pcr1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Call {}
    ///Container type for the return parameters of the [`pcr1()`](pcr1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr1Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pcr1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr1()";
            const SELECTOR: [u8; 4] = [204u8, 163u8, 180u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pcr2()` and selector `0x38f3efd4`.
```solidity
function pcr2() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Call {}
    ///Container type for the return parameters of the [`pcr2()`](pcr2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr2Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr2Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pcr2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr2()";
            const SELECTOR: [u8; 4] = [56u8, 243u8, 239u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pcr8()` and selector `0x2f74138d`.
```solidity
function pcr8() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr8Call {}
    ///Container type for the return parameters of the [`pcr8()`](pcr8Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pcr8Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr8Call> for UnderlyingRustTuple<'_> {
                fn from(value: pcr8Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr8Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pcr8Return> for UnderlyingRustTuple<'_> {
                fn from(value: pcr8Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pcr8Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pcr8Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pcr8Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pcr8()";
            const SELECTOR: [u8; 4] = [47u8, 116u8, 19u8, 141u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `rootCertHash()` and selector `0x0553f274`.
```solidity
function rootCertHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashCall {}
    ///Container type for the return parameters of the [`rootCertHash()`](rootCertHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootCertHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootCertHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rootCertHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootCertHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rootCertHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = rootCertHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rootCertHash()";
            const SELECTOR: [u8; 4] = [5u8, 83u8, 242u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `verifier()` and selector `0x2b7ac3f3`.
```solidity
function verifier() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierCall {}
    ///Container type for the return parameters of the [`verifier()`](verifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifierReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifierReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifier()";
            const SELECTOR: [u8; 4] = [43u8, 122u8, 195u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `verifyAttestationDocProof(bytes,bytes)` and selector `0xc22a9694`.
```solidity
function verifyAttestationDocProof(bytes memory _publicValues, bytes memory _proofBytes) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofCall {
        #[allow(missing_docs)]
        pub _publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proofBytes: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`verifyAttestationDocProof(bytes,bytes)`](verifyAttestationDocProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofCall) -> Self {
                    (value._publicValues, value._proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _publicValues: tuple.0,
                        _proofBytes: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyAttestationDocProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyAttestationDocProofReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyAttestationDocProof(bytes,bytes)";
            const SELECTOR: [u8; 4] = [194u8, 42u8, 150u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proofBytes,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AttestationDocVerifier`](self) function calls.
    pub enum AttestationDocVerifierCalls {
        #[allow(missing_docs)]
        attestationDocVerifierVKey(attestationDocVerifierVKeyCall),
        #[allow(missing_docs)]
        pcr0(pcr0Call),
        #[allow(missing_docs)]
        pcr1(pcr1Call),
        #[allow(missing_docs)]
        pcr2(pcr2Call),
        #[allow(missing_docs)]
        pcr8(pcr8Call),
        #[allow(missing_docs)]
        rootCertHash(rootCertHashCall),
        #[allow(missing_docs)]
        verifier(verifierCall),
        #[allow(missing_docs)]
        verifyAttestationDocProof(verifyAttestationDocProofCall),
    }
    #[automatically_derived]
    impl AttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 83u8, 242u8, 116u8],
            [43u8, 122u8, 195u8, 243u8],
            [47u8, 116u8, 19u8, 141u8],
            [56u8, 243u8, 239u8, 212u8],
            [129u8, 169u8, 211u8, 138u8],
            [194u8, 42u8, 150u8, 148u8],
            [204u8, 163u8, 180u8, 254u8],
            [229u8, 149u8, 29u8, 209u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AttestationDocVerifierCalls {
        const NAME: &'static str = "AttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::attestationDocVerifierVKey(_) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pcr0(_) => <pcr0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr1(_) => <pcr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr2(_) => <pcr2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pcr8(_) => <pcr8Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::rootCertHash(_) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifier(_) => <verifierCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyAttestationDocProof(_) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AttestationDocVerifierCalls>] = &[
                {
                    fn rootCertHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <rootCertHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::rootCertHash)
                    }
                    rootCertHash
                },
                {
                    fn verifier(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifierCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::verifier)
                    }
                    verifier
                },
                {
                    fn pcr8(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr8Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::pcr8)
                    }
                    pcr8
                },
                {
                    fn pcr2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::pcr2)
                    }
                    pcr2
                },
                {
                    fn pcr0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::pcr0)
                    }
                    pcr0
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::verifyAttestationDocProof)
                    }
                    verifyAttestationDocProof
                },
                {
                    fn pcr1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <pcr1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::pcr1)
                    }
                    pcr1
                },
                {
                    fn attestationDocVerifierVKey(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AttestationDocVerifierCalls> {
                        <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AttestationDocVerifierCalls::attestationDocVerifierVKey)
                    }
                    attestationDocVerifierVKey
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pcr8(inner) => {
                    <pcr8Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::attestationDocVerifierVKey(inner) => {
                    <attestationDocVerifierVKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pcr0(inner) => {
                    <pcr0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr1(inner) => {
                    <pcr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr2(inner) => {
                    <pcr2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pcr8(inner) => {
                    <pcr8Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::rootCertHash(inner) => {
                    <rootCertHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifier(inner) => {
                    <verifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AttestationDocVerifierInstance<T, P, N> {
        AttestationDocVerifierInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _pcr8: alloy::sol_types::private::FixedBytes<32>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AttestationDocVerifierInstance<T, P, N>>,
    > {
        AttestationDocVerifierInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _pcr8,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _verifier: alloy::sol_types::private::Address,
        _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
        _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
        _pcr0: alloy::sol_types::private::FixedBytes<32>,
        _pcr1: alloy::sol_types::private::FixedBytes<32>,
        _pcr2: alloy::sol_types::private::FixedBytes<32>,
        _pcr8: alloy::sol_types::private::FixedBytes<32>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AttestationDocVerifierInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            _verifier,
            _attestationDocVerifierVKey,
            _rootCertHash,
            _pcr0,
            _pcr1,
            _pcr2,
            _pcr8,
        )
    }
    /**A [`AttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AttestationDocVerifierInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AttestationDocVerifierInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AttestationDocVerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`AttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _pcr8: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::Result<AttestationDocVerifierInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _verifier,
                _attestationDocVerifierVKey,
                _rootCertHash,
                _pcr0,
                _pcr1,
                _pcr2,
                _pcr8,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _verifier: alloy::sol_types::private::Address,
            _attestationDocVerifierVKey: alloy::sol_types::private::FixedBytes<32>,
            _rootCertHash: alloy::sol_types::private::FixedBytes<32>,
            _pcr0: alloy::sol_types::private::FixedBytes<32>,
            _pcr1: alloy::sol_types::private::FixedBytes<32>,
            _pcr2: alloy::sol_types::private::FixedBytes<32>,
            _pcr8: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _verifier,
                            _attestationDocVerifierVKey,
                            _rootCertHash,
                            _pcr0,
                            _pcr1,
                            _pcr2,
                            _pcr8,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AttestationDocVerifierInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AttestationDocVerifierInstance<T, P, N> {
            AttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`attestationDocVerifierVKey`] function.
        pub fn attestationDocVerifierVKey(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, attestationDocVerifierVKeyCall, N> {
            self.call_builder(&attestationDocVerifierVKeyCall {})
        }
        ///Creates a new call builder for the [`pcr0`] function.
        pub fn pcr0(&self) -> alloy_contract::SolCallBuilder<T, &P, pcr0Call, N> {
            self.call_builder(&pcr0Call {})
        }
        ///Creates a new call builder for the [`pcr1`] function.
        pub fn pcr1(&self) -> alloy_contract::SolCallBuilder<T, &P, pcr1Call, N> {
            self.call_builder(&pcr1Call {})
        }
        ///Creates a new call builder for the [`pcr2`] function.
        pub fn pcr2(&self) -> alloy_contract::SolCallBuilder<T, &P, pcr2Call, N> {
            self.call_builder(&pcr2Call {})
        }
        ///Creates a new call builder for the [`pcr8`] function.
        pub fn pcr8(&self) -> alloy_contract::SolCallBuilder<T, &P, pcr8Call, N> {
            self.call_builder(&pcr8Call {})
        }
        ///Creates a new call builder for the [`rootCertHash`] function.
        pub fn rootCertHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, rootCertHashCall, N> {
            self.call_builder(&rootCertHashCall {})
        }
        ///Creates a new call builder for the [`verifier`] function.
        pub fn verifier(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifierCall, N> {
            self.call_builder(&verifierCall {})
        }
        ///Creates a new call builder for the [`verifyAttestationDocProof`] function.
        pub fn verifyAttestationDocProof(
            &self,
            _publicValues: alloy::sol_types::private::Bytes,
            _proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyAttestationDocProofCall, N> {
            self.call_builder(
                &verifyAttestationDocProofCall {
                    _publicValues,
                    _proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AttestationDocVerifierInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
